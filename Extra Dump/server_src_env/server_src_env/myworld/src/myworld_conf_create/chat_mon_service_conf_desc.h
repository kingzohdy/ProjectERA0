/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
********************************************************************/

#ifndef CHAT_MON_SERVICE_CONF_DESC_H
#define CHAT_MON_SERVICE_CONF_DESC_H


#ifndef TDR_METALIB_CHAT_MON_SERVICE_VERSION 
#define TDR_METALIB_CHAT_MON_SERVICE_VERSION 	10 /*version of metalib*/
#endif

#ifndef TDR_METALIB_CHAT_MON_SERVICE_HASH 
#define TDR_METALIB_CHAT_MON_SERVICE_HASH 	"3fd8bdffccfcc09846ac505876c2dc4c" /*hash of metalib*/
#endif
/*   
 User Define Macros.   */

#define TORMSVR_STRING_LEN                       	256
#define TORM_MAX_CHANNEL                         	256
#define TORM_MAX_DBCONN                          	32
#define TORM_MAX_TABLE                           	128
#define TORM_MAX_DBMETALIB                       	128
#define TORM_MAX_CACHEMETA                       	128
#define TORM_MAX_RECORDS_NUM_PERSELECT           	100 	/* 单个select查询能检索出的记录行最大数目 */
#define TORM_MAX_CACHE_PERCENT_SYN_SCTMSLCT_RES  	80 	/* 当将自定义查询条件中的记录添加的cache中时，如果cache使用比例超过此值时停止添加记录到cache中 */

/* SOAP_ENCODING_TYPE*/
enum tagSOAP_ENCODING_TYPE 
{
    SOAP_ENCODING_TYPE_UTF8 = 0, 	/* UTF8 */
    SOAP_ENCODING_TYPE_GBK = 1, 	/* GBK */
};
#define TCONND_NAME_LEN                          	32
#define TCONND_URL_LEN                           	128
#define MAX_LOG_DB_CONN_NUM                      	128


#ifdef __cplusplus
extern "C" {
#endif

/*   Define c types.   */


#ifndef TDR_CUSTOM_C_TYPES
#define TDR_CUSTOM_C_TYPES
#if defined(WIN32) &&  _MSC_VER < 1300
typedef __int64 tdr_longlong;
typedef unsigned __int64 tdr_ulonglong;
#else
typedef long long tdr_longlong;
typedef unsigned long long tdr_ulonglong;
#endif  /*defined(WIN32) &&  _MSC_VER < 1300*/
typedef unsigned short tdr_wchar_t;  /**<Wchar基本数据类型*/
typedef unsigned int tdr_date_t;	/**<data基本数据类型*/
typedef unsigned int tdr_time_t;	/**<time基本数据类型*/
typedef tdr_ulonglong tdr_datetime_t;  /**<datetime基本数据类型*/
typedef unsigned long int tdr_ip_t;  /**<IPv4数据类型*/
#endif /*TDR_CUSTOM_C_TYPES*/



/*   Structs/unions prototype.   */

struct tagTORMConnectDBInfo;
typedef struct tagTORMConnectDBInfo                	TORMCONNECTDBINFO;
typedef struct tagTORMConnectDBInfo                	*LPTORMCONNECTDBINFO;

struct tagChatMonListener;
typedef struct tagChatMonListener                  	CHATMONLISTENER;
typedef struct tagChatMonListener                  	*LPCHATMONLISTENER;

struct tagChatMonLogDBConnInfo;
typedef struct tagChatMonLogDBConnInfo             	CHATMONLOGDBCONNINFO;
typedef struct tagChatMonLogDBConnInfo             	*LPCHATMONLOGDBCONNINFO;

struct tagchat_mon_serviceconf;
typedef struct tagchat_mon_serviceconf             	CHAT_MON_SERVICECONF;
typedef struct tagchat_mon_serviceconf             	*LPCHAT_MON_SERVICECONF;

struct tagchat_mon_servicerun_status;
typedef struct tagchat_mon_servicerun_status       	CHAT_MON_SERVICERUN_STATUS;
typedef struct tagchat_mon_servicerun_status       	*LPCHAT_MON_SERVICERUN_STATUS;



/*   Define structs/unions.   */

#pragma pack(1)

/* dbms server  info */
struct tagTORMConnectDBInfo
{
    int IDX;                            
    int MajorVersion;                   
    int MinVersion;                     
    char DBMSName[TORMSVR_STRING_LEN];   
    char DBMSConnectionInfo[TORMSVR_STRING_LEN];
    char DBMSCurDatabaseName[TORMSVR_STRING_LEN];
    char DBMSUser[TORMSVR_STRING_LEN];   
    char DBMSPassword[TORMSVR_STRING_LEN];
    char DBMSSock[TORMSVR_STRING_LEN];   
};

struct tagChatMonListener
{
    char Name[TCONND_NAME_LEN];          
    char Url[TCONND_URL_LEN];            
    int SendBuff;                       
    int RecvBuff;                       
    int MaxIdle;                        
    int Backlog;                        
    int MaxNoAuthIdle;                  
};

struct tagChatMonLogDBConnInfo
{
    char Name[TCONND_NAME_LEN];          
    char Url[TCONND_URL_LEN];            
};

struct tagchat_mon_serviceconf
{
    char SpawnIP[24];                     	/*   spawn-fcgi绑定的IP地址 */
    int SpawnPort;                       	/*   spawn-fcgi绑定的端口 */
    int SpawnNum;                        	/*   spawn-fcgi数量,绑定的端口为SpawnPort递增1 */
    char FcgiWebServerIPList[512];        	/*   配置Fastcgi Web服务器的ip地址列表以逗号(,)分割,不在列表内的ip地址将被禁止访问,未设置则全部允许访问|FCGI_WEB_SERVER_ADDRS */
    int SoapEncoding;                    	/*   soap输入输出编码格式 Bind Macrosgroup:SOAP_ENCODING_TYPE,*/
    int ChannelKeyStart;                
    int HeartBeatInterval;               	/*   heart beart 间隔秒数 */
    char DirtyWordFile[128];             
    char DirtyWordMd5File[128];          
    char RoleDBMetaFile[128];             	/*   role_db_meta.tdr 路径 */
    TORMCONNECTDBINFO ServiceDBInfo;                   	/*   操作失败日志数据库 */
    CHATMONLISTENER Listener;                       
    int ChatLogDBConnNum;                	/*   连接tlog_db的数量 */
    CHATMONLOGDBCONNINFO ChatMonLogDBConnInfo[MAX_LOG_DB_CONN_NUM]; 	/*   连接tlog_db信息 */
};

struct tagchat_mon_servicerun_status
{
    int Res;                            
};


#pragma pack()

#ifdef __cplusplus
}
#endif


#endif /* CHAT_MON_SERVICE_CONF_DESC_H */
