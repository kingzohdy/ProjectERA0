/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
********************************************************************/

#ifndef PROTO_CS_H
#define PROTO_CS_H


#ifndef TDR_METALIB_PROTO_CS_VERSION 
#define TDR_METALIB_PROTO_CS_VERSION 	2568 /*version of metalib*/
#endif

#ifndef TDR_METALIB_PROTO_CS_HASH 
#define TDR_METALIB_PROTO_CS_HASH 	"125971e495bfa5bda1cc3c8e93911bd7" /*hash of metalib*/
#endif
/*   
 User Define Macros.   */

#define BASE_MSPD                                	400
#define BASE_RSPD                                	800
#define BASE_FSPD                                	600
#define MAX_GD_GIF                               	4096
#define MAX_SHOP_MSG                             	10
#define RONGLU_RESET_USE                         	5052310
#define FITTINGS_UPDATE_PEARL_ITEMID             	5249000
#define PERFECT_REVIVE_ITEM_ID_1                 	5050210 	/* 绑定复活币  */
#define PERFECT_REVIVE_ITEM_ID_2                 	5050002 	/* 重生契约 */
#define PERFECT_REVIVE_ITEM_ID_3                 	5050200 	/* 非绑定复活币  */
#define STALL_GRID_ADD_ITEMID                    	5160001
#define ADD_FIT_GRID_ITEMID                      	5249010
#define MAX_STALL_SEE_DIST                       	800
#define STATUS_FOOD_RESTORE_HP                   	1019
#define STATUS_FOOD_RESTORE_MP                   	1020
#define GAOJI_SIT_INVAR                          	10 	/* 高级打坐恒定值,除以100 */
#define LIFT_AWARD_ITEM_ID                       	5060200 	/* 生存奖章ID */
#define COIN_TO_BULL_RATE                        	100 	/* 银币兑换绑银的汇率|放大100倍 */
#define COIN_TO_BULL_TAX                         	10 	/* 银币兑换绑银的税收|万分率 */
#define COIN_TO_BULL_MAX                         	1000000 	/* 每次最多转换100W银币 */
#define STALL_SHOW_ADMSG_INTERVAL_TIME           	30 	/* 摆摊时广告显示的间隔时间s */
#define STALL_SHOW_ADMSG_TIME                    	5 	/* 广告的显示时间s */
#define REPAIR_WAER                              	0
#define REPAIR_PACK                              	1
#define GPRS_ITEMID                              	5030014
#define MAX_ITEM_INLAY_NUM                       	6 	/* 最大可以镶嵌的数 */
#define MAX_PKG_RECORD                           	50 	/* 一个数据包里最多的记录条数 */
#define MAX_TRADE_RECORD                         	100 	/* 每次查询最大的挂单纪录,大概6K的数据 */
#define MAX_SHOPPING_XML_FILE_SIZE               	20480 	/* 这个配置文件不要超过20K的大小,谢谢 */
#define SAFE_LOCK_ACTIVE_FALG                    	1 	/* 激活安全锁标记 */
#define SAFE_LOCK_PASS_FLAG                      	2 	/* 安全锁认证标记 */
#define TMPITEM_ON_PATRONID                      	1 	/* 骑的临时道具正在巡逻路径上 */
#define STATUS_BEACH_ID1                         	3083
#define STATUS_BEACH_ID2                         	3084
#define STATUS_BEACH_ID3                         	3085
#define STATUS_BEACH_ID4                         	3086
#define UNREAL_MAX_LAYER                         	80 	/* 幻境最大层数 */
#define PET_SKILL_UP_ITEMID                      	5219601
#define PET_SKILL_RESET_ID                       	5219600
#define SJ_ITEM_ID                               	5060350
#define RONGYAN_HAIXIN_ITEM_ID                   	5063000
#define MEM_NUM_CLAN_SKILL_ID                    	11198 	/* 公会技能成员人数在ClanSkillDef表中的id */
#define BUSINESS_CLAN_SKILL_ID                   	11199 	/* 公会技能公会商运在ClanSkillDef表中的id */

/* CSCmd*/
enum tagCSCmd 
{
    DIR_REQ = 0, 
    DIR_RES = 1, 
    ACC_LOGIN_REQ = 2, 	/* account login request */
    ACC_LOGIN_RES = 3, 	/* account login response */
    ROLE_LIST = 4, 	/* get account role list */
    ROLE_LOGIN_REQ = 5, 	/* role login request */
    ROLE_LOGIN_RES = 6, 	/* role login response */
    ROLE_NEW_REQ = 7, 
    ROLE_NEW_RES = 8, 
    ROLE_DEL_REQ = 9, 
    ROLE_DEL_RES = 10, 
    HEARTBEAT_REQ = 11, 	/* heart beat from client to svr */
    ROLE_LOGOUT_REQ = 12, 
    ACC_LOGOUT_REQ = 13, 
    ACC_LOGOUT_RES = 14, 
    SYS_MSG = 15, 
    MOVE_CLT = 16, 
    MOVE_STOP = 17, 
    MOVE_OTHER = 18, 
    SELECT_BIRTH_LOCATION_SVR = 19, 
    SELECT_BIRTH_LOCATION_CLT = 20, 
    ADJUST_TIME = 21, 
    ENTER_VIEW = 22, 
    LEAVE_VIEW = 23, 
    ACTION_REQ = 24, 
    ACTION_RES = 25, 
    ENTER_MAP = 26, 
    CHAT_REQ = 27, 
    CHAT_RES = 28, 
    CLT_OPT = 29, 
    ATTR_CHG = 30, 
    SKILL_INFO = 31, 
    SKILL_PREPARE = 32, 
    SKILL_PREPARE_SVR = 33, 
    SKILL_BRK = 34, 
    SKILL_BRK_SVR = 35, 
    SKILL_ATK = 36, 
    SKILL_ATK_SVR_BAK = 37, 
    SKILL_HIT = 38, 
    REVIVE = 39, 
    SKILL_HIT_SVR_BAK = 40, 
    DLG_CLT = 41, 
    DLG_SVR = 42, 
    ADJUST_CLT = 43, 
    DIATHESIS_INFO = 44, 
    FITTINGS_INFO = 45, 
    PACKAGE_REQ = 46, 
    PACKAGE_INFO = 47, 
    KICKOFF_INFO = 48, 
    TRANS_LIST = 49, 
    TRANS_SELECT = 50, 
    TEAM_CLT = 51, 
    TEAM_SVR = 52, 
    RELATION_CLT = 53, 
    RELATION_SVR = 54, 
    SHOP_CLT = 55, 
    SHOP_SVR = 56, 
    TASK_CLT = 57, 
    TASK_SVR = 58, 
    SKILL_REVIVE_INFO = 59, 
    ONLINE_INFO = 60, 
    AUTO_FLY_CLT = 61, 
    COLLECT_CLT = 62, 
    LEARN_CLT = 63, 
    RIDE_PRE = 64, 
    RIDE_PRE_RES = 65, 
    RIDE_ON = 66, 
    RIDE_BRK = 67, 
    RIDE_LIST_CHG = 68, 
    PET_SVR = 69, 
    PET_CLT = 70, 
    EXCHG_SVR = 71, 
    EXCHG_CLT = 72, 
    DYN_PWORLD_SVR = 73, 
    DYN_PWORLD_CLT = 74, 
    CLAN_SVR = 75, 
    CLAN_CLT = 76, 
    TRUST_CLT = 77, 
    TRUST_SVR = 78, 
    SHOPPING_CLT = 79, 	/* 商城协议请求 */
    SHOPPING_SVR = 80, 	/* 商城协议回包 */
    MAIL_CLT = 81, 
    MAIL_SVR = 82, 
    STALL_CLT = 83, 
    STALL_SVR = 84, 
    ARM_CLT = 85, 
    ARM_SVR = 86, 
    PET_CAMPAIGN_BRK_SVR = 87, 
    CANCEL_ROLE_LOGOUT = 88, 	/* 回心转意，取消角色登出 */
    CHGNAME_CLT = 89, 
    CHGNAME_SVR = 90, 
    AUTH_CLT = 91, 
    AUTH_SVR = 92, 
    QUE_INFO = 93, 
    MON_SPEECH = 94, 
    VERSION_CLT = 95, 
    VERSION_SVR = 96, 
    CANCEL_STATUS = 97, 	/* 玩家主动取消自己的status */
    PLAYER_JUMP = 98, 	/* 玩家跳跃 */
    BULLETIN_SVR = 99, 	/* 公告信息 */
    RIDE_CLT = 100, 	/* 骑乘操作 */
    WATCH_PLAYER_CLT = 101, 	/* 请求观察其他玩家 */
    WATCH_PLAYER_SVR = 102, 	/* 观察其他玩家的响应 */
    ONLINE_AWARD_CLT = 103, 
    ONLINE_AWARD_SVR = 104, 
    WEI_XING_CLT = 105, 
    WEI_XING_SVR = 106, 
    PLAYER_FIGHT_SVR = 107, 	/* 战斗状态通知 */
    DESIGNATION_CLT = 108, 	/* 称号相关操作 */
    DESIGNATION_SVR = 109, 	/* 称号相关服务器消息 */
    RESPACT_SVR = 110, 	/* 声望相关服务器消息 */
    RIDE_SVR = 111, 	/* 骑乘服务器相关消息 */
    WATCH_FRIEND_CLT = 112, 	/* 请求观察好友 */
    FAIRY_SVR = 113, 
    FAIRY_CLT = 114, 
    ITEM_COOL_INFO = 115, 
    MUD_ROLE_LOGIN_REQ = 116, 
    MUD_ROLE_LOGIN_RES = 117, 
    MUD_CHAT_ROOM_LIST_REQ = 118, 
    MUD_CHAT_ROOM_LIST_RES = 119, 
    MUD_ENTER_CHAT_ROOM_REQ = 120, 
    MUD_ENTER_CHAT_ROOM_RES = 121, 
    MUD_ROLE_LOGOUT_REQ = 122, 
    MUD_ROLE_ATTR_CHG = 123, 
    PK_CLT = 124, 
    MON_SPEECH_EX = 125, 
    RANGE_CLT = 126, 
    PLOY_FB_INFO_SVR = 127, 
    PWORLD_CLT = 128, 
    PWORLD_SVR = 129, 
    HEARTBEAT_RES = 130, 
    CHANGE_COIN_INTO = 131, 	/* 换钱 */
    GIFT_SVR = 132, 
    GIFT_CLT = 133, 
    RANGE_SVR = 134, 
    PWORLD_LIMIT_INFO = 135, 
    BCT_CLT = 136, 
    BCT_SVR = 137, 
    AUTOTEAM_CLT = 138, 
    AUTOTEAM_SVR = 139, 
    SECONDARY_SKILL_CLT = 140, 
    SECONDARY_SKILL_SVR = 141, 
    EXTEND_ITEM_CLT = 142, 
    EXTEND_ITEM_SVR = 143, 
    PREPAREATK_CLT = 144, 	/* 吟唱攻击客户端来的数据 */
    PREPAREATK_SVR = 145, 	/* 吟唱攻击客户端来的数据 */
    INVITE_TEST_CLT = 146, 	/* 邀请切磋clt */
    INVITE_TEST_SVR = 147, 	/* 邀请切磋Svr */
    PLAYER_MISC_CLT = 148, 	/* player类中的一些杂项请求,都归整到这个请求里来吧 */
    PLAYER_MISC_SVR = 149, 	/* player类中的一些杂项请求,都归整到这个请求里来吧 */
    GPRS_CLT = 150, 
    GPRS_SVR = 151, 
    RIDE_MACHINE_CLT = 152, 
    SAFE_LOCK_CLT = 153, 
    SAFE_LOCK_SVR = 154, 
    DIE_INFO_SVR = 155, 
    BASE_ATTR_CHG = 156, 
    MAP_CLT = 157, 
    MAP_SVR = 158, 
    CONTI_GIFT_SVR = 159, 
    BATTLE_SVR = 160, 
    REPORT_DATA_REQ = 161, 
    REPORT_DATA_RES = 162, 
    KEYIN_ITEM_CLT = 163, 
    KEYIN_ITEM_SVR = 164, 
    RUNE_CLT = 165, 
    RUNE_SVR = 166, 
    BATTLE_LIMIT_INFO = 167, 
    MUD_CHAT_ROOM_ENTER_INFO = 168, 
    MUD_CHAT_ROOM_LEAVE_INFO = 169, 
    MUD_CHAT_CHANNEL_SET_REQ = 170, 
    MUD_CHAT_CHANNEL_SET_RES = 171, 
    MUD_OFFLINE_EXP_FULL_INFO = 172, 
    MUD_OFFLINE_EXP_TAKE_REQ = 173, 
    MUD_OFFLINE_EXP_TAKE_RES = 174, 
    ROLL_CLT = 175, 
    ROLL_SVR = 176, 
    ACCGIFT_SVR = 177, 
    PROPS_SVR = 178, 
    ONLINEGIFT_GROUP_SVR = 179, 
    LEAVE_CLT = 180, 
    MOTION_CLT = 181, 
    VAL_CLT = 182, 
    VAL_SVR = 183, 
    DIFF_PWORLD_CLT = 184, 
    DIFF_PWORLD_SVR = 185, 
    CDKEY_SVR = 186, 
    ROLE_UNDEL_REQ = 187, 	/* 取消删除 */
    MUD_OUT_CHAT_ROOM_REQ = 188, 
    MUD_OUT_CHAT_ROOM_RES = 189, 
    RAFFLE_CLT = 190, 	/* 抽奖协议 */
    RAFFLE_SVR = 191, 
    GOLD_RAFFLE_SVR = 192, 	/* 角色上线通知金券商城抽奖次数 */
    STARDATA_CLT = 193, 	/* vip相关数据请求 */
    STARDATA_SVR = 194, 	/* vip相关数据回包 */
    CITY_CLT = 195, 
    CITY_SVR = 196, 
    MACHINE_SVR = 197, 
    ACTIVE_GAME_CLT = 198, 
    ACTIVE_GAME_SVR = 199, 
    LTRINFO_SVR = 200, 	/* 媒体次数礼包数据更改 */
    UNREAL_CLT = 201, 
    UNREAL_SVR = 202, 
    SJ_TASK_CLT = 203, 	/* 赏金任务 */
    SJ_TASK_SVR = 204, 	/* 赏金任务 */
    AAS_CLT = 205, 
    AAS_SVR = 206, 
    SUBJECT_CLT = 207, 
    SUBJECT_SVR = 208, 
    GAY_CLT = 209, 
    GAY_SVR = 210, 
    STRONG_CLT = 211, 
    STRONG_SVR = 212, 
    AUTOPWORLD_CLT = 213, 
    AUTOPWORLD_SVR = 214, 
    ROLE_CHG_MEMID = 215, 
    ACTIVE_CLT = 216, 
    ACC_GET_ROLE_CLT = 217, 
    ACC_GET_ROLE_SVR = 218, 
    RONGLU_CLT = 219, 
    RONGLU_SVR = 220, 
    FZ_CLT = 221, 
    FZ_SVR = 222, 
    GUNIUS_CLT = 223, 
    GUNIUS_SVR = 224, 
    APEX_CLT = 225, 
    APEX_SVR = 226, 
    BUSY_CLT = 227, 
    BUSY_SVR = 228, 
    POLY_PWORLD_SVR = 229, 
    SPARTA_SVR = 230, 
    SPARTA_CLT = 231, 
    BOON_SVR = 232, 
    BOON_CLT = 233, 
    EXTEND_ITEM_SAVE = 234, 
    SCHOOL_SVR = 235, 
    SCHOOL_CLT = 236, 
    SECOND_PWD_CLT = 237, 
    SECOND_PWD_SVR = 238, 
    BACK_CLT = 239, 
    BACK_SVR = 240, 
    CARD_BOX_CLT = 241, 
    CARD_BOX_SVR = 242, 
    STORE_CLT = 243, 
    STORE_SVR = 244, 
    CLAN_PET_CLT = 245, 
    CLAN_PET_SVR = 246, 
    SPAN_STRONG_CLT = 247, 
    SPAN_STRONG_SVR = 248, 
    HOME_CLT = 249, 
    HOME_SVR = 250, 
    SHIKONG_CLT = 251, 
    SHIKONG_SVR = 252, 
};
#define HOME_PAGE_MAX                            	10 	/* 家园一页最大10个 */

/* HOME_CLT_OP*/
enum tagHOME_CLT_OP 
{
    HOME_CLT_OP_NEW = 1, 	/* 新建 */
    HOME_CLT_OP_PAGE = 2, 	/* 第几页 */
    HOME_CLT_OP_SET_NAME = 3, 	/* 设置家园名字 */
    HOME_CLT_OP_SET_STAT = 4, 	/* 设置状态 */
    HOME_CLT_OP_ENTER = 5, 	/* 进入 */
    HOME_CLT_OP_MSG_BOARD = 6, 	/* 柳岩 */
    HOME_CLT_OP_DESTORY = 7, 	/* 拆 */
    HOME_CLT_OP_SALE = 8, 	/* 售 */
    HOME_CLT_OP_BUY = 9, 	/* 买 */
    HOME_CLT_OP_PET = 10, 	/* 花园宠物操作 */
    HOME_CLT_OP_JIAJU_PUT = 11, 	/* 家具摆放 */
    HOME_CLT_OP_ZHONGZHI = 12, 	/* 菜地种植 */
    HOME_CLT_OP_JIAJU_ADJUST = 13, 	/* 家具调整 */
};

/* HOME_PET_OP*/
enum tagHOME_PET_OP 
{
    HOME_PET_OP_EAT = 1, 	/* 喂食 */
    HOME_PET_OP_CLAER = 2, 	/* 清洁 */
    HOME_PET_OP_PLAY = 3, 	/* 玩耍 */
    HOME_PET_OP_DUANLIAN = 4, 	/* 锻炼 */
    HOME_PET_OP_GET = 5, 	/* 获取 */
    HOME_PET_OP_REPLACE = 6, 	/* 更换宠物 */
};

/* HOME_SVR_OP*/
enum tagHOME_SVR_OP 
{
    HOME_SVR_OP_PAGE = 1, 	/* 一页家园信息 */
    HOME_SVR_OP_SINGLE = 2, 	/* 单个家园信息 */
    HOME_SVR_OP_NAME_CHG = 3, 	/* 名字变换 */
    HOME_SVR_OP_STAT_CHG = 4, 	/* 状态变换 */
    HOME_SVR_OP_LIUYAN_CHG = 5, 	/* 留言变换 */
    HOME_SVR_OP_SALE = 6, 	/* 出售 */
    HOME_SVR_OP_BUY = 7, 	/* 购买 */
    HOME_SVR_OP_DEL = 8, 	/* 删除 */
    HOME_SVR_OP_PET = 9, 	/* 宠物信息变化 */
    HOME_SVR_OP_HOUSE_INFO = 10, 	/* 家园房间信息 */
    HOME_SVR_OP_FARM = 11, 	/* 家园菜地信息 */
};

/* SHIKONG_JOIN_TYPE*/
enum tagSHIKONG_JOIN_TYPE 
{
    SHIKONG_JOIN_SINGLE = 0, 	/* 个人 */
    SHIKONG_JOIN_TEAM = 1, 	/* 队伍 */
};

/* SHIKONG_SVR_OP*/
enum tagSHIKONG_SVR_OP 
{
    SHIKONG_SVR_OP_ENTER_APPLY_QUEUE = 0, 	/* 进入副本排队队列 */
    SHIKONG_SVR_OP_INVITE_ENTER = 1, 	/* 排到你了，邀请进入副本 */
    SHIKONG_SVR_OP_EXIT_SHIKONG_QUEUE = 2, 	/* 退出队列 */
};

/* SHIKONG_CLT_OP*/
enum tagSHIKONG_CLT_OP 
{
    SHIKONG_CLT_EXIT_APPLY_QUEUE = 0, 
    SHIKONG_CLT_ENTER_PWORLD = 1, 
};

/* SPAN_STRONG_CLT_OP*/
enum tagSPAN_STRONG_CLT_OP 
{
    SPAN_STRONG_CLT_OP_SALE = 1, 	/* 竞拍 */
    SPAN_STRONG_CLT_OP_ENTER = 2, 	/* 进入副本 */
    SPAN_STRONG_CLT_OP_INFO_REQ = 3, 	/* 跨服据点信息请求 */
    SPAN_STRONG_CLT_OP_GROUP = 4, 	/* 分配跨服战团 */
    SPAN_STRONG_CLT_OP_AWARD = 5, 	/* 领取占领资金 */
};

/* SPAN_STRONG_SVR_OP*/
enum tagSPAN_STRONG_SVR_OP 
{
    SPAN_STRONG_SVR_ALL_INFO = 1, 	/* 据点列表 */
    SPAN_STRONG_SVR_INFO_ONE = 2, 	/* 单个据点 */
    SPAN_STRONG_SVR_PWORLD_INFO = 3, 	/* 据点副本信息 */
    SPAN_STRONG_SVR_WAR_ONE = 4, 	/* 个人战场信息 */
    SPAN_STRONG_SVR_WAR_ALL = 5, 	/* 所有战场信息 */
    SPAN_STRONG_SVR_OCC_INFO = 6, 	/* 占领信息,及时通知 */
};

/* CLAN_PET_CLT_OP*/
enum tagCLAN_PET_CLT_OP 
{
    CLAN_PET_CLT_OP_JIYANG = 1, 	/* 寄养 */
    CLAN_PET_CLT_OP_JIYANG_END = 2, 	/* 寄养解锁 */
    CLAN_PET_CLT_OP_WANSHUA = 3, 	/* 玩耍 */
    CLAN_PET_CLT_OP_TOU = 4, 	/* 偷 */
    CLAN_PET_CLT_OP_EAT = 5, 	/* 喂食 */
    CLAN_PET_CLT_OP_WORK = 6, 	/* 干活 */
    CLAN_PET_CLT_OP_WORK_AWARD = 7, 	/* 干活领取 */
    CLAN_PET_CLT_OP_CLEAR = 8, 	/* 清理栏位 */
};

/* CLAN_PET_SVR_OP*/
enum tagCLAN_PET_SVR_OP 
{
    CLAN_PET_SVR_OP_ALL = 1, 	/* 所有宠物信息 */
    CLAN_PET_SVR_OP_ONE = 2, 	/* 单个信息 */
    CLAN_PET_SVR_OP_GRID = 3, 	/* 栏位数量变化 */
    CLAN_PET_SVR_OP_BOX = 4, 	/* 宝箱信息 */
    CLAN_PET_SVR_OP_GAOJI_SEC = 5, 	/* 高级寄养剩余时间 */
};

/* STORE_CLT_OP*/
enum tagSTORE_CLT_OP 
{
    STORE_CLT_OP_OPEN = 1, 	/* 开店 */
    STORE_CLT_OP_UP = 2, 	/* 上架 */
    STORE_CLT_OP_DOWN = 3, 	/* 下架 */
    STORE_CLT_OP_MONEY_IN = 4, 	/* 注入资金 */
    STORE_CLT_OP_CLOSE = 5, 	/* 主动关店 */
    STORE_CLT_OP_VIEW = 6, 	/* 查看商铺 */
    STORE_CLT_OP_PAGE = 7, 	/* 翻页 */
    STORE_CLT_OP_ADD_GRID = 8, 	/* 增加格子 */
    STORE_CLT_OP_BUY = 9, 	/* 买东西 */
    STORE_CLT_OP_DEC_GRID = 10, 	/* 减少格子 */
    STORE_CLT_OP_POS = 11, 	/* 排名 */
    STORE_CLT_OP_OPEN_UI = 12, 	/* ui请求 */
    STORE_CLT_OP_SEARCH = 13, 	/* 搜索请求 */
    STORE_CLT_OP_CHG_NAME = 14, 	/* 店铺改名 */
};
#define STORE_SEARCH_LEN                         	16 	/*  */

/* STORE_SVR_OP*/
enum tagSTORE_SVR_OP 
{
    STORE_SVR_OP_ONE_INFO = 1, 	/* 单个商铺详细信息 */
    STORE_SVR_OP_PAGE = 2, 	/* 翻页回复 */
    STORE_SVR_OP_GRID_CHG = 3, 	/* 商铺格子数变化 */
    STORE_SVR_OP_MONEY_CHG = 4, 	/* 商铺资金变化 */
    STORE_SVR_OP_ITEM_CHG = 5, 	/* 商铺物品变化 */
    STORE_SVR_OP_CLOSE = 6, 	/* 关店 */
    STORE_SVR_OP_OPEN = 7, 	/* 开店回复 */
    STORE_SVR_OP_OPEN_UI = 8, 	/* 打开商铺UI */
    STORE_SVR_OP_POS = 9, 	/* 排名 */
    STORE_SVR_OP_SEARCH = 10, 	/* 搜索 */
};
#define STORE_PAGE_MAX                           	10 	/*  */

/* BOON_CLT_OP*/
enum tagBOON_CLT_OP 
{
    BOON_CLT_OP_GET = 1, 	/* 领取 */
    BOON_CLT_OP_ASSIGN = 2, 	/* 分配 */
};

/* BOON_SVR_OP*/
enum tagBOON_SVR_OP 
{
    BOON_SVR_OP_ASSIGN = 1, 	/* 本周分配,领取变化 */
    BOON_SVR_OP_CHG = 2, 	/* 本周加成变化 */
    BOON_SVR_OP_ALL = 3, 	/* 所有信息 */
};

/* BUSY_CLT_OP*/
enum tagBUSY_CLT_OP 
{
    BUSY_CLT_OP_FINI = 1, 	/* 完成某个ID的我很忙 */
};

/* BUSY_FINI_TYPE*/
enum tagBUSY_FINI_TYPE 
{
    BUSY_FINI_MONEY = 0, 	/* 使用金币完成 */
    BUSY_FINI_ITEM = 1, 	/* 使用物品完成 */
};
#define BUSY_ITEM_ID                             	5052899 	/* 免做令牌 */

/* BUSY_SVR_OP*/
enum tagBUSY_SVR_OP 
{
    BUSY_SVR_OP_DAY_NUM = 1, 	/* 今天的次数 */
    BUSY_SVR_OP_UI = 2, 	/* 弹出UI */
    BUSY_SVR_OP_FINI_ACTION = 3, 	/* 秒成功 */
};

/* GUNIUS_CLT_OP*/
enum tagGUNIUS_CLT_OP 
{
    GUNIUS_CLT_OP_UP = 1, 	/* 天赋升级 */
};

/* GUNIUS_SVR_OP*/
enum tagGUNIUS_SVR_OP 
{
    GUNIUS_SVR_OP_ONE = 1, 	/* 单个天赋变化 */
    GUNIUS_SVR_OP_ALL = 2, 	/* 所有天赋信息 */
};

/* FZ_CLT_OP*/
enum tagFZ_CLT_OP 
{
    FZ_CLT_OP_LVL_UP = 1, 	/* 方舟等级升级 */
    FZ_CLT_OP_ATTR_UP = 2, 	/* 方舟属性升级 */
};

/* FZ_SVR_OP*/
enum tagFZ_SVR_OP 
{
    FZ_SVR_OP_ONE = 1, 	/* 单个方舟格子信息 */
    FZ_SVR_OP_LIST = 2, 	/* 方舟列表 */
};

/* RONGLU_CLT_OP*/
enum tagRONGLU_CLT_OP 
{
    RONGLU_CLT_OP_RESET_START = 1, 	/* 重置开始 */
    RONGLU_CLT_OP_RESET_END = 2, 	/* 重置结束 */
    RONGLU_CLT_OP_RESET_BREAK = 3, 	/* 重置取消 */
};

/* RONGLU_SVR_OP*/
enum tagRONGLU_SVR_OP 
{
    RONGLU_SVR_OP_ONE = 1, 	/* 一个熔炉信息变化 */
    RONGLU_SVR_OP_KILL_NUM_CHG = 2, 	/* 杀怪计数器变化 */
    RONGLU_SVR_OP_START_RES = 3, 	/* 开始重铸给客户端的回复 */
};
#define ACC_ROLE_MAX                             	32

/* ACTIVE_CLT_OP*/
enum tagACTIVE_CLT_OP 
{
    ACTIVE_CLT_OP_TRANS = 1, 	/* 活动助手传送 */
};

/* AUTOPWORLD_CLT_OP*/
enum tagAUTOPWORLD_CLT_OP 
{
    AUTOPWORLD_CLT_OP_UI = 1, 	/* UI请求 */
    AUTOPWORLD_CLT_OP_ENTER = 2, 	/* 进入副本 */
    AUTOPWORLD_CLT_OP_AGREE = 3, 	/* 客户端同意与否 */
};

/* AUTOPWORLD_SVR_OP*/
enum tagAUTOPWORLD_SVR_OP 
{
    AUTOPWORLD_SVR_OP_UI = 1, 
    AUTOPWORLD_SVR_OP_ENTER = 2, 	/* 进入副本消息转发 */
};

/* STRONG_CLT_OP*/
enum tagSTRONG_CLT_OP 
{
    STRONG_CLT_OP_SALE = 1, 	/* 据点暗拍 */
    STRONG_CLT_OP_SET_BANNER = 2, 	/* 设置旗子 */
    STRONG_CLT_OP_SET_BANNER_XUANYAN = 3, 	/* 设置旗子宣言 */
    STRONG_CLT_OP_INFO_ALL = 4, 	/* 获取所有据点信息请求 */
    STRONG_CLT_OP_AWARD = 5, 	/* 领取奖励请求 */
    STRONG_CLT_OP_ENTER = 6, 	/* 进入据点 */
};

/* STRONG_SVR_OP*/
enum tagSTRONG_SVR_OP 
{
    STRONG_SVR_OP_SALE_INFO = 1, 	/* 据点暗拍信息 */
    STRONG_SVR_OP_STRONG_INFO = 2, 	/* 据点信息 */
    STRONG_SVR_OP_PWORLD_INFO = 3, 	/* 据点副本信息 */
    STRONG_SVR_OP_BANNER_CHG = 4, 	/* 旗子信息发生变化 */
    STRONG_SVR_OP_STRONG_ACTIVE = 5, 	/* 据点激活 */
    STRONG_SVR_OP_ALL_INFO = 6, 	/* 所有据点信息 */
    STRONG_SVR_OP_WAR_ONE = 7, 	/* 单人据点战斗信息 */
    STRONG_SVR_OP_WAR_ALL = 8, 	/* 所有人的据点战斗信息 */
    STRONG_SVR_OP_STRONGID = 9, 	/* 今日进过的据点ID */
    STRONG_SVR_OP_STRONGLORY = 10, 	/* 战旗荣耀信息 */
};
#define STRONG_STAT_NO                           	0 	/*  */
#define STRONG_STAT_IDLE                         	1 	/* 空闲时间 */
#define STRONG_STAT_SALE                         	2 	/* 竞拍时间 */
#define STRONG_STAT_TONGJI                       	3 	/* 统计时间 */
#define STRONG_STAT_SELECT                       	4 	/* 玩家查询时间 */
#define STRONG_STAT_FIGHT                        	5 	/* 开搞时间 */
#define STRONG_PLAYER_MAX                        	400 	/* 据点战最多玩家 */

/* SUBJECT_CLT_OP*/
enum tagSUBJECT_CLT_OP 
{
    SUBJECT_CLT_OP_JOIN = 1, 	/* 参加答题 */
    SUBJECT_CLT_OP_EXIT = 2, 	/* 退出答题 */
    SUBJECT_CLT_OP_COMMIT = 3, 	/* 提交答题 */
};

/* SUBJECT_SVR_OP*/
enum tagSUBJECT_SVR_OP 
{
    SUBJECT_SVR_OP_INVITE = 1, 	/* 邀请玩家 */
    SUBJECT_SVR_OP_FLUSH = 2, 	/* 更新UI面板信息 */
};
#define SUBJECT_MAX_TOP                          	20
#define UNREAL_PWORLD_ID                         	115

/* UNREAL_CLT_OP*/
enum tagUNREAL_CLT_OP 
{
    UNREAL_CLT_OP_NO = 0, 
    UNREAL_CLT_OP_ENTER = 1, 
};

/* UNREAL_SVR_OP*/
enum tagUNREAL_SVR_OP 
{
    UNREAL_SVR_OP_NO = 0, 
    UNREAL_SVR_OP_SAVE_INFO = 1, 
    UNREAL_SVR_OP_MON_INFO = 2, 
    UNREAL_SVR_OP_TEAM_INFO = 3, 
    UNREAL_SVR_OP_BOSS_INFO = 4, 
};
#define UNREAL_TEAM_INFO_MAX                     	50
#define UNREAL_MAX_BOSS                          	10

/* RND_AWD_TYPE*/
enum tagRND_AWD_TYPE 
{
    RND_AWD_TYPE_BCT = 0, 
    RND_AWD_TYPE_GOLD10 = 1, 
    RND_AWD_TYPE_GOLD50 = 2, 
    RND_AWD_TYPE_GOLD100 = 3, 
};
#define GOLD_RAFFLE_MAX_NUM                      	10

/* CDKEY_FAIL*/
enum tagCDKEY_FAIL 
{
    CDKEY_FAIL_NO = 0, 	/* 成功 */
    CDKEY_FAIL_VAILD = 1, 	/* cdkey无效 */
    CDKEY_FAIL_USE = 2, 	/* cdkey已经使用过了 */
    CDKEY_FAIL_OVERDUE = 3, 	/* cdkey过期 */
    CDKEY_FAIL_DUMP = 4, 	/* 重复领取相同类型的礼包 */
    CDKEY_FAIL_SYS = 5, 	/* 系统错误 */
    CDKEY_FAIL_MANY = 6, 	/* 多个角色同时在使用同一个cdkey */
    CDKEY_FAIL_LEVEL_LOW = 7, 	/* 等级过低 */
    CDKEY_FAIL_LEVEL_HIGH = 8, 	/* 等级过高 */
};

/* SAFE_LOCK_CMD*/
enum tagSAFE_LOCK_CMD 
{
    SAFE_LOCK_ACTIVE = 1, 	/* 激活安全锁 */
    SAFE_LOCK_PASS = 2, 	/* 安全锁密码验证 */
    SAFE_LOCK_MODIFY = 3, 	/* 安全锁密码修改 */
    SAFE_LOCK_CANCEL = 4, 	/* 取消安全锁 */
    SAFE_LOCK_REDO = 5, 	/* 重新锁上 */
};

/* TEST_CLT*/
enum tagTEST_CLT 
{
    TEST_CLT_INVITE = 1, 	/* 邀请 */
    TEST_CLT_RES = 2, 	/* 回复 */
};

/* TEST_SVR*/
enum tagTEST_SVR 
{
    TEST_SVR_INFO = 1, 	/* 转发客户端的邀请 */
    TEST_SVR_RES = 2, 	/* 服务器回复 */
    TEST_SVR_CANCEL = 3, 	/* 取消邀请 */
};

/* BCT_CMD_CLT*/
enum tagBCT_CMD_CLT 
{
    BCT_CMD_CLT_ENTER = 1, 	/* 进入白层塔 */
    BCT_CMD_CLT_CONTINUE = 2, 	/* 进入下一层 */
    BCT_CMD_CLT_RAFFLE_START = 3, 	/* 开始抽奖 */
    BCT_CMD_CLT_EXIT = 4, 	/* 退出白层塔 */
    BCT_CMD_CLT_RAFFLE_END = 5, 	/* 结束抽奖 */
    BCT_CMD_CLT_LAYER_TOP = 6, 	/* 每层记录信息 */
    BCT_CMD_CLT_AGAIN = 7, 	/* 失败后继续搞 */
    BCT_CMD_CLT_AWARD = 8, 	/* 领取每层奖励 */
};

/* BCT_CMD_SVR*/
enum tagBCT_CMD_SVR 
{
    BCT_CMD_SVR_HISTORY = 1, 	/* 每层历史记录 */
    BCT_CMD_SVR_TOP = 2, 	/* 自己最高层数记录| 登录时候发 */
    BCT_CMD_SVR_EXIT = 3, 	/* 退出白层塔发总结数据 */
    BCT_CMD_SVR_FAIL = 4, 	/* 白层塔失败面板 */
    BCT_CMD_SVR_PASS = 5, 	/* 弹出白层塔过关面板 */
    BCT_CMD_SVR_RAFFLE_START = 6, 
    BCT_CMD_SVR_PASS_STOP_TIME = 7, 	/* 停止计时 */
    BCT_CMD_SVR_INFO = 8, 	/* 下线在上线 发bct信息 */
};
#define RAFFLE_NUM                               	3
#define CS_MAX_BODY                              	70000 	/* broadcast msg request */
#define PLAYER_WEIXING                           	0
#define PLAYER_UNWEIXING                         	1
#define PLAYER_APPEAL_WEIXING                    	2

/* AUTH_FLAG*/
enum tagAUTH_FLAG 
{
    AUTH_FLAG_QUICK = 1, 	/* 快速试玩 */
    AUTH_FLAG_DEQUICK = 2, 	/* 快速试玩帐号转正 */
    AUTH_FLAG_REG = 4, 	/* 反向注册帐号 */
    AUTH_FLAG_INSERT = 8, 	/* 只插入不相应 */
    AUTH_FLAG_PASSWD_CARD = 16, 	/* 密保卡验证 */
    AUTH_FLAG_SIGN = 32, 	/* 微端获取签名 */
    AUTH_FLAG_WEB_SIGN = 64, 	/* web端获取签名 */
    AUTH_FLAG_PLUGIN_SIGN = 128, 	/* 插件获取签名 */
    AUTH_FLAG_NOX = 256, 	/* nox的验证方式 */
};

/* ACTIVE_FLAG*/
enum tagACTIVE_FLAG 
{
    ACTIVE_FLAG_AUTH = 0, 	/* 帐号密码验证 */
    ACTIVE_FLAG_QUICK = 1, 	/* 快速试玩 */
    ACTIVE_FLAG_DEQUICK = 2, 	/* 快速试玩帐号转正 */
    ACTIVE_FLAG_REG = 3, 	/* 反向注册帐号 */
    ACTIVE_FLAG_ACTIVE_CODE = 4, 	/* 激活码 */
};

/* LoginResultGrp*/
enum tagLoginResultGrp 
{
    LOGIN_SUCC = 0, 	/* account or role login succ */
    LOGIN_REP = 1, 	/* account or role login fail because repeat */
    LOGIN_SVRBUSY = 2, 	/* account or role login fail because server busy */
    LOGIN_BADCLT = 3, 	/* account login fail because client protolcol version not compatible */
    LOGIN_BAN = 4, 	/* account or role login fail because system ban the account or role */
    LOGIN_FREQUENCY = 5, 	/* account login fail because frequency limit */
    LOGIN_NOSERVICE = 6, 	/* server not available */
    LOGIN_AGAIN_SAMEIP = 7, 	/* repeat login  */
    LOGIN_QUEUE_FULL = 8, 	/* queue full */
    LOGIN_PRECREATEROLE = 9, 	/* preCreateRole */
    LOGIN_ERR = 16, 	/* account or role login fail because other reason */
};

/* MAP_SPAN_TYPE*/
enum tagMAP_SPAN_TYPE 
{
    MAP_SPAN_NONE = 0, 	/* r非跨服场景 */
    MAP_SPAN_BATTLE = 1, 	/* 跨服战场 */
};
#define ROLE_VIP_FLAG                            	1
#define SHOW_HEAD_FLAG                           	1
#define SHOW_FASHION_FLAG                        	2
#define NEW_ROLE_FLAG                            	4
#define PWORLD_ITEM_ADD_XP                       	8
#define FAIRY_EVOLVE_ING                         	16
#define FAIRY_DIATH_TICK                         	32
#define EAR_SWITCH                               	64
#define RAND_TASK_SPRITE                         	128
#define FAIRY_BEIHOULING                         	256
#define ROLE_LOGOUT_RIDE                         	512
#define ROLE_LOGOUT_FLY                          	1024
#define SHOW_BACK_FLAG                           	2048
#define SHOW_FACE_FLAG                           	4096
#define PLAYER_CLAN_SKILL_RESET                  	8192
#define SHOW_WEDDING_DSN_FLAG                    	16384
#define WEDDING_DSN_FLAG_ONCE                    	32768
#define CLEAR_SHORTCUT_COLUMN_SKILL_FLAG         	65536
#define SVR_CONFIG_CLOSE_LINE                    	1
#define SVR_CONFIG_UNFY_USE_JINQUAN              	2

/* RoleNewResultGrp*/
enum tagRoleNewResultGrp 
{
    NEW_SUCC = 0, 	/* role new succ */
    NEW_SVRBUSY = 1, 	/* role new fail because server busy */
    NEW_ROLENUM = 2, 	/* role new fail because account have too many roles */
    NEW_DUP = 3, 	/* role new fail because dup name */
    NEW_NAME_CHECK = 4, 	/* 角色名不符合规范 */
    NEW_ERR = 5, 	/* role new fail because other reason */
    NEW_NOCREATE = 6, 	/* 服务器禁止创建角色 */
};

/* RoleDelResultGrp*/
enum tagRoleDelResultGrp 
{
    DEL_SUCC = 0, 	/* role del succ */
    DEL_ERR = 1, 	/* role del fail because other reason */
    DEL_ERR_CLAN_LEADER = 2, 	/* 角色是公会会长，不允许被删 */
};

/* LogoutForType*/
enum tagLogoutForType 
{
    LOGOUT_FOR_NORMAL = 0, 	/* 正常退出 */
    LOGOUT_FOR_MUD = 1, 	/* 退出到MUD */
};

/* LogoutResultGrp*/
enum tagLogoutResultGrp 
{
    LOGOUT_SUCC = 0, 	/* role del succ */
    LOGOUT_ERR = 1, 	/* role del fail because other reason */
    LOGOUT_FOR_MUD_SUCC = 2, 	/* 退出成功,可以登录到mud了 */
};

/* DirResultGrp*/
enum tagDirResultGrp 
{
    DIR_SUCC = 0, 
    DIR_LATEST = 1, 
    DIR_ERR = 2, 
};

/* DirBusyDegree*/
enum tagDirBusyDegree 
{
    DIR_NOT_WORK = 0, 	/* 维护状态 */
    DIR_EXCELLENCE = 1, 	/* 很好 */
    DIR_NORMAL = 2, 	/* 正常 */
    DIR_BUSY = 3, 	/* 繁忙 */
    DIR_FULL = 4, 	/* 爆满 */
};

/* REGIONSTATUSBIT*/
enum tagREGIONSTATUSBIT 
{
    REGIONSTATUSBIT_DIANXIN = 1, 	/* 电信大区 */
    REGIONSTATUSBIT_WANGTONG = 2, 	/* 网通大区 */
    REGIONSTATUSBIT_SHUANGXIAN = 4, 	/* 双线大区 */
    REGIONSTATUSBIT_TUIJIE = 8, 	/* 是否是推介大区 */
    REGIONSTATUSBIT_NEW = 16, 	/* 是否是新标志大区 */
};
#define SYS_MSG_LEN                              	2048

/* SysMsgType*/
enum tagSysMsgType 
{
    SYS_TIP = 0, 	/* 提示信息 */
    SYS_SVR = 1, 	/* 系统广播 */
    SYS_COMBAT = 2, 	/* 战斗信息 */
    SYS_MIDDLE = 3, 	/* 中央滚动提示信息 */
    SYS_MIDDLE2 = 4, 	/* 中央提示信息 */
    SYS_BULLETIN = 5, 	/* 系统公告信息 */
    SYS_CHAT = 6, 	/* 聊天频道 */
    SYS_POP_WINDOW = 7, 	/* 弹出窗口提示信息 */
    SYS_BUGLE = 8, 	/* 小喇叭 */
    SYS_MSG_STUFF = 9, 	/* 材料 */
    SYS_MSG_TASK = 10, 	/* 任务物品 */
    SYS_MSG_ITEM = 11, 	/* 道具 */
    SYS_MSG_ARM = 12, 	/* 装备 */
    SYS_MSG_CHAT_TIP = 13, 	/* 聊天框提示信息 */
    SYS_CLAN = 14, 	/* 公会频道 */
    SYS_TEAM = 15, 	/* 队伍频道 */
    SYS_ACTIVE = 16, 	/* 活动频道 */
    SYS_CURR = 17, 	/* 始终当前频道页显示 */
    SYS_SHOW = 18, 	/* 炫耀频道 */
};
#define MAX_SYS_LINK                             	512

/* CSMoveType*/
enum tagCSMoveType 
{
    CS_MOVE_WALK = 0, 
    CS_MOVE_TURN = 1, 
};
#define CS_MAX_MOVEPOINTS                        	32
#define MAX_BIRTH_MAP                            	8

/* CSState*/
enum tagCSState 
{
    CS_STAT_STAND = 0, 
    CS_STAT_WALK = 1, 
    CS_STAT_GAOJI_SIT = 2, 
    CS_STAT_SIT = 4, 
    CS_STAT_DEAD = 8, 
    CS_STAT_ATK = 16, 
    CS_STAT_MOVE_ATK = 32, 
    CS_STAT_PREPARE = 64, 
    CS_STAT_MOVE_PREPARE = 128, 
    CS_STAT_DIALOG = 256, 
    CS_STAT_STASH = 512, 
    CS_STAT_FIGHT = 1024, 
    CS_STAT_AUTOFLY = 2048, 
    CS_STAT_COLLECT = 4096, 
    CS_STAT_FLY = 8192, 
    CS_STAT_QIANXIN = 16384, 
    CS_STAT_RIDE_PREPARE = 32768, 
    CS_STAT_RIDE_ON = 65536, 
    CS_STAT_STALL = 131072, 
    CS_STAT_CAMPAIGN_PRE = 262144, 
    CS_STAT_HITCH_RIDE = 524288, 
    CS_STAT_RECIPE_PREPARE = 1048576, 
    CS_STAT_RIDE_MON_MACHINE = 2097152, 
    CS_STAT_FAIRY_CAMPAIGN_PRE = 4194304, 
    CS_STAT_ARM_FENJIE_PRE = 8388608, 
    CS_STAT_GEM_FENJIE_PRE = 16777216, 
};

/* LOCK_TYPE*/
enum tagLOCK_TYPE 
{
    LOCK_TYPE_NO = 0, 	/* 没有锁定或解除锁定 */
    LOCK_TYPE_ID = 1, 	/* 锁定ID，LockVal是目标ID */
    LOCK_TYPE_DIR = 2, 	/* 锁定方向，LockVal是方向数值 */
};

/* VIEW_FLAG*/
enum tagVIEW_FLAG 
{
    VIEW_FLAG_NO = 0, 
    VIEW_FLAG_CAPTAIN = 1, 	/* 队长标志 */
    VIEW_FLAG_SAFE = 2, 	/* 安全区标记 */
    VIEW_FLAG_SPY = 4, 	/* 刺探活动中的探标记 */
    VIEW_FLAG_ANTI_SPY = 8, 	/* 刺探活动中的防标记 */
    VIEW_FLAG_PK = 16, 	/* PK区域 */
    VIEW_FLAG_GM = 32, 	/* GM标记 */
};

/* ITEM_ROLL_STAT*/
enum tagITEM_ROLL_STAT 
{
    ITEM_ROLL_NONE = 0, 	/* 不需要ROLL */
    ITEM_ROLL_WAIT = 1, 	/* 等待ROLL */
    ITEM_ROLL_ROLLING = 2, 	/* ROLL的过程中 */
};

/* ActionTypeC*/
enum tagActionTypeC 
{
    ACTION_STAND = 0, 
    ACTION_RUN = 1, 
    ACTION_SIT = 2, 
    ACTION_CMD_RET = 3, 	/* 客户端执行指令后返回 */
    ACTION_TAKE_DAILY_GOAL_AWARD = 4, 	/* 提取今日目标完成阶段奖励 */
    ACTION_RUNE_LEVEL_UP = 5, 	/* 升级(合成)符文 */
    ACTION_RESET_RUNE_EX = 6, 	/* 重置符文额外属性 */
    ACTION_RUNNE_SKILL_CHG = 7, 	/* 符文技能改变请求 */
};

/* CLIENT_CMD_TYPE*/
enum tagCLIENT_CMD_TYPE 
{
    CLIENT_CMD_SNAPSHOOT = 0, 	/* 客户端截屏 */
    CLIENT_CMD_AUTO_MOVE = 1, 	/* 客户端自动寻路 */
};
#define MAX_RUNE_STUFF_NUM                       	5 	/* 符文合成材料数量 */

/* RUNE_RESET_OP_TYPE*/
enum tagRUNE_RESET_OP_TYPE 
{
    RUNE_REST_NORMAL = 0, 	/* 普通重置 */
    RUNE_REST_VIP = 1, 	/* 金卷(vip)重置 */
    RUNE_REST_SAVE = 2, 	/* 保存 */
};
#define RUNE_REST_COST_MONEY                     	500 	/* 符文额外属性重置时消耗的银币(普通) */
#define RUNE_REST_COST_GOLD                      	1000 	/* 符文额外属性重置时消耗的金卷(VIP) */

/* ActionTypeS*/
enum tagActionTypeS 
{
    ACTION_STATE = 0, 
    ACTION_DEAD = 1, 
    ACTION_REVIVE = 2, 
    ACTION_HIT = 3, 
    ACTION_DOBACK_BAK = 4, 
    ACTION_STATUS = 5, 
    ACTION_MSPD_CHG = 6, 
    ACTION_UI = 7, 
    ACTION_TMP_PAK_TIME = 8, 
    ACTION_PAK_ENLARGE = 9, 
    ACTION_LOCK = 10, 
    ACTION_AVATAR = 11, 
    ACTION_AMM = 12, 
    ACTION_TEAM = 13, 
    ACTION_LEVEL = 14, 
    ACTION_TMP = 15, 
    ACTION_USE_ITEM = 16, 
    ACTION_EFFECT = 17, 
    ACTION_TASK = 18, 
    ACTION_AUTOFLY = 19, 
    ACTION_COLLECT = 20, 
    ACTION_SKILL_LEARN = 21, 
    ACTION_QIANXIN = 22, 
    ACTION_FLY = 23, 
    ACTION_RIDE = 24, 
    ACTION_RIDE_LEARN = 25, 
    ACTION_RIDE_PRE = 26, 
    ACTION_PET_VIEW = 27, 
    ACTION_QIYUE = 28, 
    ACTION_STALL = 29, 
    ACTION_SIT_DOWN = 30, 
    ACTION_CLAN_CHG = 31, 
    ACTION_HP_CHG = 32, 
    ACTION_JUMP = 33, 
    ACTION_CLAN_EXTRA_UI = 34, 
    ACTION_DESIGNATION_CHG = 35, 
    ACTION_FIGHT = 36, 
    ACTION_HITCH_RIDE = 37, 
    ACTION_LEAVE_RIDE = 38, 
    ACTION_FAIRY_VIEW = 39, 
    ACTION_PK_MODE_CHG = 40, 
    ACTION_PK_VAL_CHG = 41, 
    ACTION_PWORLD_UI = 42, 
    ACTION_DESTROY = 43, 
    ACTION_OBJ_ENTER_MAP = 44, 
    ACTION_OBJ_LEAVE_MAP = 45, 
    ACTION_MON_LIFE = 46, 
    ACTION_GET_XP = 47, 
    ACTION_MON_PK_MODE_CHG = 48, 	/* 怪物的pk模式改变 */
    ACTION_CAREER_CHG = 49, 	/* 角色转职了,播个动画之类的吧 */
    ACTION_TMPENERGE_MAX = 50, 	/* 临时机械能量的最大槽 */
    ACTION_BLOCKMSK_POINT = 51, 	/* 半动态阻挡建议点 */
    ACTION_MON_BOOTY_FIRST = 52, 	/* 怪物归属 */
    ACTION_LOGIC_AREA = 53, 	/* 逻辑区域 */
    ACTION_TEST = 54, 	/* 切磋 */
    ACTION_RIDE_ON_MACHINE = 55, 	/* 乘坐机械 */
    ACTION_LEAVE_MACHINE = 56, 	/* 离开机械 */
    ACTION_MACHINE_ATTR_CHG = 57, 	/* 机械属性变化 */
    ACTION_INPWORD_SAFETIME_DOWN = 58, 	/* 进入副本,倒计时 */
    ACTION_CLOSE_DIALOG = 59, 	/* 通知客户端关闭对话面板 */
    ACTION_PET_CAMPAIGN_PRE = 60, 	/* 宠物出征吟唱 */
    ACTION_MACHINE_PASSENGER_INFO = 61, 	/* 机械乘客信息 */
    ACTION_BEGIN_LEAVE_MAP = 62, 	/* 便于客户端暂时不表现视野可见内容消失 */
    ACTION_HIDE_TASK_INFO = 63, 	/* 隐藏任务信息 */
    ACTION_OFFLINE_EXP = 64, 	/* 离线补偿经验 */
    ACTION_PK_TIME = 65, 	/* PK犯罪时间通知 */
    ACTION_DROP_ITEM_UPDATE = 66, 	/* 掉落物品的信息更新。 */
    ACTION_PREPARE_ADD_BY_HIT = 67, 	/* 玩家吟唱打退时间 */
    ACTION_LEAVE_STAT = 68, 	/* 暂离状态 */
    ACTION_MOTION = 69, 	/* 动作表情 */
    ACTION_TARGET = 70, 	/* 攻击目标 */
    ACTION_USE_ITEM_PRE = 71, 	/* 使用物品吟唱 */
    ACTION_CATCH_PET = 72, 	/* 抓宠结果动作 */
    ACTION_CLAN_ITEM = 73, 	/* 使用工会道具 */
    ACTION_MACHINE_ITEM_LOCK = 74, 	/* 使用机械锁定物品 */
    ACTION_MACHINE_LEAVE_PRE = 75, 	/* 召回机械吟唱 */
    ACTION_MACHINE_LEAVE_PRE_BRK = 76, 	/* 召回机械BRK */
    ACTION_CLIENT_CMD = 77, 	/* 客户端执行指令 */
    ACTION_FAKE_STATUS = 78, 	/* 假buff状态,用于显示 */
    ACTION_BATTLE_LIMIT_TIME = 79, 	/* 副本4小时一周期进入次数限制 */
    ACTION_MAP_POS = 80, 	/* 小地图显示 */
    ACTION_ARM_FENJIE_PRE = 81, 	/* 分解吟唱 */
    ACTION_ARM_FENJIE = 82, 	/* 分解 */
    ACTION_BALLISTIC_ATK = 83, 	/* 弹道攻击过程 */
    ACTION_CLAN_CITY_UPDATE = 84, 	/* 进入公会城市后更新城市信息(包括自己的别人的) */
    ACTION_ARM_RECAST = 85, 	/* 角色装备重铸返回结果详情 */
    ACTION_DAILY_GOAL_INFO = 86, 	/* 今日目标任务信息 */
    ACTION_PET_HETI = 87, 	/* 宠物合体 */
    ACTION_DYN_ACTIVE_INFO = 88, 	/* 动态活动(由脚本触发或时间不固定的活动)状态信息 */
    ACTION_RESET_RUNE_EX_RES = 89, 	/* 重置符文额外属性的结果 */
    ACTION_RUNE_EX_ENABLE_INFO = 90, 	/* 符文额外属性激活信息 */
    ACTION_DO_RUNE_EX = 91, 	/* 符文额外属性发动 */
    ACTION_ARM_STAR = 92, 	/* 装备强化信息 */
    ACTION_ACC_DE_QUICK = 93, 	/* 快速试玩帐号转正 */
    ACTION_ACHIEVEMENT_NEW = 94, 	/* 新完成的成长之路 */
    ACTION_ACHIEVEMENT_LIST = 95, 	/* 已完成成长之路ID列表 */
    ACTION_ARM_WASH = 96, 	/* 装备洗炼信息 */
    ACTION_YESTERDAY_INFO = 97, 	/* 昨日信息 */
    ACTION_COUNT_DOWN = 98, 	/* 倒计时 */
    ACTION_VIEW_FLAG_CHG = 99, 	/* CSPlayer.ViewFlag在EnterView后改变的通知 */
    ACTION_DAILY_BULL = 100, 	/* 每日消耗绑银数量 */
    ACTION_RUNNE_SKILL_CHG_RET = 101, 	/* 选择已镶嵌符文技能后的通知 */
    ACTION_CLAN_MACHINE_PWORLD = 102, 	/* 公会守护枢纽波次信息 */
    ACTION_SHAM_DEAD = 103, 	/* 假死 */
    ACTION_COLOR_FONT_LIMIT = 104, 	/* 彩色字体时效 */
    ACTION_MOTION_LIMIT = 105, 	/* 新增动作表情时效 */
    ACTION_COW_FINAL_RANGE = 106, 	/* 牛仔决赛排行榜信息 */
    ACTION_CLAN_DONATE_LOG = 107, 	/* 公会捐献日志增量信息 */
    ACTION_CLAN_SKILL_INFO = 108, 	/* 公会技能变化后的通知 */
    ACTION_PLAYER_CLAN_SKILL_INFO = 109, 	/* 玩家身上公会技能变化后的通知 */
    ACTION_LEVEL_FENG = 110, 	/* 等级封印变化 */
    ACTION_ARM_LEVELUP = 111, 	/* 装备升级 */
    ACTION_WORSHIP_EFFIGY = 112, 	/* 角色膜拜城主雕像 */
    ACTION_BEACH_INFO = 113, 	/* 角色海滩信息 */
    ACTION_VIP_INFO = 114, 	/* 角色vip信息 */
    ACTION_DAOBA_INFO = 115, 	/* 刀疤信息变化 */
    ACTION_BEACH_BUFF = 116, 	/* 进入沙滩，显示BUFF */
    ACTION_XUKONG_ENERGY = 117, 	/* 虚空能量结晶 */
    ACTION_HANG_HAI_RANGE = 118, 	/* 航海大亨排行榜信息 */
    ACTION_CLAN_WAR_AWARD_INFO = 119, 	/* 跨服公会奖励信息 */
    ACTION_MAP_SHOW = 120, 	/* 小地图上显示 */
    ACTION_CLAN_BATTLE_APPLY_INFO = 121, 	/* 跨服公会战报名信息 */
    ACTION_PRECREATE_GIFT_VERIFY = 122, 	/* 角色预创建礼包短信认证 */
    ACTION_WEDDING_DSN = 123, 	/* 更新头顶上的情侣夫妻等称号 */
    ACTION_SCULPT_CHG = 124, 	/* 变更造型:发型,发色,脸型之类的 */
};
#define MAX_SKILL_TARGET                         	16
#define MAX_HURT                                 	16

/* HURT_TYPE*/
enum tagHURT_TYPE 
{
    HURT_TYPE_DMG = 0, 	/* 伤害 */
    HURT_TYPE_HEAVY_DMG = 1, 	/* 爆击伤害 */
    HURT_TYPE_HITDEAD = 2, 	/* 一击必杀 */
    HURT_TYPE_MISS = 3, 	/* Miss，没打到 */
    HURT_TYPE_HP = 4, 	/* 加血 */
    HURT_TYPE_MP = 5, 	/* 加魔 */
    HURT_TYPE_NOEFFECT = 7, 	/* 攻击无效 */
    HURT_TYPE_SBSORB = 8, 	/* 伤害吸收了 */
};

/* HIT_FLAGS*/
enum tagHIT_FLAGS 
{
    HIT_FLAG_BE_REFLECTED = 1, 	/* 被反射的伤害 */
    HIT_FLAG_BEIHOULING = 2, 	/* 背后灵伤害  */
};

/* UI_TYPE*/
enum tagUI_TYPE 
{
    UI_TYPE_STASH = 0, 	/* 仓库界面 */
    UI_TYPE_SKILL = 1, 	/* 技能面板 */
    UI_TYPE_DIATHESIS = 2, 	/* 数值面板 */
    UI_TYPE_PWORLD = 3, 	/* 副本面板 */
    UI_TYPE_PET = 4, 	/* 宠物指令面板 */
    UI_TYPE_FIT = 5, 	/* 配件面板 */
    UI_TYPE_CLAN_CREATE = 6, 	/* 公会创建面板 */
    UI_TYPE_CLAN_DISBAND = 7, 	/* 公会解散面板 */
    UI_TYPE_CLAN_SEARCH = 8, 	/* 公会查询面板 */
    UI_TYPE_CLAN_MANIFESTO = 9, 	/* 公会宣告面板 */
    UI_TYPE_ARM_STAR = 10, 	/* 装备品质提升 */
    UI_TYPE_ARM_FIGHT = 11, 	/* 装备战斗力提升 */
    UI_TYPE_ARM_LEVEL = 12, 	/* 装备等级提升 */
    UI_TYPE_ARM_IDENTIFIABILITY = 13, 	/* 装备鉴定 */
    UI_TYPE_GEM_LEVEL_UP = 14, 	/* 宝石升级 */
    UI_TYPE_GEM_INLAY = 15, 	/* 宝石镶嵌 */
    UI_TYPE_GEM_PICK = 16, 	/* 宝石摘取 */
    UI_TYPE_CHG_ROLE_NAME = 17, 	/* 改角色名 */
    UI_TYPE_UPGRADE_CLAN_CITY = 18, 	/* 升级城市 */
    UI_TYPE_UPGRADE_CLAN_CITY_BUILDING = 19, 	/* 升级城市建筑 */
    UI_TYPE_UPGRADE_CLAN = 20, 	/* 升级公会 */
    UI_TYPE_UPGRADE_TECH_CENTER = 21, 	/* 升级科技中心 */
    UI_TYPE_UPGRADE_COLLECTION_CENTER = 22, 	/* 升级采集中心 */
    UI_TYPE_UPGRADE_FACTORY = 23, 	/* 升级工厂 */
    UI_TYPE_UPGRADE_FARM = 24, 	/* 升级兽栏 */
    UI_TYPE_SKILL_FITTING_INLAY = 25, 	/* 技能配件镶嵌面板 */
    UI_TYPE_SKILL_FITTING_PICK = 26, 	/* 技能配件摘取面板 */
    UI_TYPE_PET_WASH_GENIUS = 27, 	/* 宠物洗点 */
    UI_TYPE_PET_STRENGTHEN = 28, 	/* 宠物强化 */
    UI_TYPE_PET_ADD_ATTR = 29, 	/* 宠物增强 */
    UI_TYPE_PET_SKILL_LEARN = 30, 	/* 宠物学习技能 */
    UI_TYPE_PET_SKILL_UP = 31, 	/* 宠物升级技能 */
    UI_TYPE_PET_ADD_SKILL_GRID = 32, 	/* 宠物技能栏扩充 */
    UI_TYPE_PET_WASH_SKILL_GRID = 33, 	/* 宠物技能栏改造 */
    UI_TYPE_GENIUS = 34, 	/* 天赋面板 */
    UI_TYPE_CHANGE_COIN_INTO = 35, 	/* 货币兑换面板 */
    UI_TYPE_BCT = 36, 	/* 白层塔 */
    UI_TYPE_MINING_RECIPE = 37, 	/* 采矿 */
    UI_TYPE_HERBALISM_RECIPE = 38, 	/* 采药 */
    UI_TYPE_RESOLVE_RECIPE = 39, 	/* 分解 */
    UI_TYPE_BLACKSMITHING_RECIPE = 40, 	/*  锻造 */
    UI_TYPE_ALCHEMY_RECIPE = 41, 	/* 炼金 */
    UI_TYPE_ENCHANT_RECIPE = 42, 	/* 附魔 */
    UI_TYPE_ENGINEERING_RECIPE = 43, 	/* 工程学(蒸汽科技) */
    UI_TYPE_CAREER_CHG = 44, 	/* 转职ui */
    UI_TYPE_CLAN_RESEARCH = 45, 	/* 公会研发 */
    UI_TYPE_CLAN_MAKING = 46, 	/* 公会制造 */
    UI_TYPE_CLAN_STORAGE = 47, 	/* 公会仓库 */
    UI_TYPE_UPGRADE_WALL = 48, 	/* 升级城防 */
    UI_TYPE_CLAN_FACTORY = 49, 	/* 公会工厂 */
    UI_TYPE_ARM_BIND = 50, 	/* 装备绑定 */
    UI_TYPE_ARM_UNBIND = 51, 	/* 装备解除绑定 */
    UI_TYPE_ARM_MOVE = 52, 	/* 品质转移 */
    UI_TYPE_CHG_CLAN_NAME = 53, 	/* 改公会名 */
    UI_TYPE_OPEN_BATTLE = 54, 	/* open the battle ui */
    UI_TYPE_SAFEPWD_MODIFY = 55, 	/* 安全锁密码修改 */
    UI_TYPE_SAFEPWD_CANCEL = 56, 	/* 安全锁密码取消 */
    UI_TYPE_ARM_UNFENGYIN = 57, 	/* 解封装备 */
    UI_TYPE_MAP_TRANS = 58, 	/* 地图传送 */
    UI_TYPE_WORLD_CITY = 59, 	/* 沙巴克建造管理UI */
    UI_TYPE_ARM_RECAST = 60, 	/* 装备重铸 */
    UI_TYPE_ARM_RECAST_ADVANCE = 61, 	/* 高级装备重铸 */
    UI_TYPE_CLAN_GIFT = 62, 	/* 公会福利 */
    UI_TYPE_UNREAL = 63, 	/* 幻境 */
    UI_TYPE_RUNE_LEVEL_UP = 64, 	/* 符文升级(合成) */
    UI_TYPE_PET_SKILL_RESET = 65, 	/* 宠物技能重置 */
    UI_TYPE_ARM_WASH = 66, 	/* 装备洗炼 */
    UI_TYPE_ARM_OPERATE = 67, 	/* 装备打造界面整合：装备强化、装备重铸、装备洗炼、装备绑定、星级转移 */
    UI_TYPE_SPY_TRANS = 68, 	/* 刺探任务传送 */
    UI_TYPE_CLAN_DONATE_LOG = 69, 	/* 公会捐献日志 */
    UI_TYPE_SET_BANNER = 70, 	/* 设置旗子 */
    UI_TYPE_SET_BANNER_XUANYAN = 71, 	/* 设置旗子宣言 */
    UI_TYPE_CLAN_GET_RES_INFO = 72, 	/* 领取公会资源记录面板 */
    UI_TYPE_PET_OPERATE = 73, 	/* 宠物操作界面整合 */
    UI_TYPE_RIDE_MOVE_LEVEL = 74, 	/* 坐骑等级转移 */
    UI_TYPE_RESET_RONGLU = 75, 	/* 熔炉重置 */
    UI_TYPE_ARM_LEVELUP = 76, 	/* 装备升级 */
    UI_TYPE_BUSY = 77, 	/* 我很忙 */
    UI_TYPE_NPCSHOP = 78, 	/* 随身商店 */
    UI_TYPE_ADDATTR_MOVE = 79, 	/* 装备附加属性转移 */
    UI_TYPE_ATTR_RESET = 80, 	/* 装备单条属性重铸 */
    UI_TYPE_PET_MOVE_STAR = 81, 	/* 宠物移星 */
    UI_TYPE_PET_EAT = 82, 	/* 宠物吞噬 */
    UI_TYPE_PET_STEP_UP = 83, 	/* 宠物进阶 */
    UI_TYPE_CLAN_BOON = 84, 	/* 公会福利面板 */
    UI_TYPE_ADDATTR_MOVE_GAOJI = 85, 	/* 装备附加属性转移|高级 */
    UI_TYPE_STUDENT_REG = 86, 	/* 学生登记面板 */
    UI_TYPE_ARM_STEP_UP = 87, 	/* 打开装备升阶面板 */
    UI_TYPE_ARM_SKILL_MOVE_LOW = 88, 	/* 装备技能转移-低级 */
    UI_TYPE_ARM_SKILL_MOVE_HIGH = 89, 	/* 装备技能转移-高级 */
    UI_TYPE_PET_IMP_UP = 90, 	/* 宠物成长升级 */
    UI_TYPE_PET_JIYANG = 91, 	/* 宠物寄养选择面板 */
    UI_TYPE_ORANGE_ARM_LEVELUP = 92, 	/* 橙色装备进阶面板 */
    UI_TYPE_BACK_UNREAL = 93, 	/* 背饰幻化面板 */
    UI_TYPE_PET_UNBIND = 94, 	/* 宠物解绑面板 */
    UI_TYPE_SKILL_ACTIVE = 95, 	/* 打开技能激活面板 */
    UI_TYPE_HOME = 96, 	/* 打开家园UI */
};

/* FIGHT_SVR_TYPE*/
enum tagFIGHT_SVR_TYPE 
{
    CLEAN_FIGHT_STATUS = 0, 
    ENTER_FIGHT_STATUS = 1, 
};
#define MAX_FAKE_STATUS_DYN_VALUE                	6 	/* 最大动态效果值数量 */

/* FAKE_STATUS_OP_TYPE*/
enum tagFAKE_STATUS_OP_TYPE 
{
    FAKE_STATUS_OP_DEL = 0, 
    FAKE_STATUS_OP_ADD = 1, 
    FAKE_STATUS_OP_UPDATE = 2, 
};
#define RUNE_EX_ENABLE_NUM                       	12 	/* 符文额外属性激活所需对应颜色高级符文数量 */

/* MAP_SHOW_DATA_TYPE*/
enum tagMAP_SHOW_DATA_TYPE 
{
    MAP_SHOW_DATA_MON_CAMP = 0, 	/* 地图上显示怪物阵营 */
};

/* MAP_SHOW_OP_TYPE*/
enum tagMAP_SHOW_OP_TYPE 
{
    MAP_SHOW_OP_LEAVE = 0, 	/* 离开地图 */
    MAP_SHOW_OP_ENTER = 1, 	/* 进入地图 */
    MAP_SHOW_OP_UPDATE = 2, 	/* 更新信息 */
};
#define PRECREATE_GIFT_VERIFY_TIMEOUT            	120 	/* 短信认证码过期时间|秒 */

/* PRECREATE_GIFT_VERIFY_RESULT*/
enum tagPRECREATE_GIFT_VERIFY_RESULT 
{
    PRECREATE_GIFT_VERIFY_RESULT_SUCC = 0, 	/* 认证成功|关闭ui */
    PRECREATE_GIFT_VERIFY_RESULT_VERIFY_FAIL = 1, 	/* 验证码错误|不关闭ui */
    PRECREATE_GIFT_VERIFY_RESULT_TIMEOUT = 2, 	/* 短信认证码过期|不关闭ui */
    PRECREATE_GIFT_VERIFY_RESULT_NO_ROLE = 3, 	/* 没有创建或删除了角色|关闭ui */
    PRECREATE_GIFT_VERIFY_RESULT_ADD_GIFT_FAIL = 4, 	/* 增加礼包失败|关闭ui */
    PRECREATE_GIFT_VERIFY_RESULT_DUP = 5, 	/* 礼包重复领取|关闭ui */
    PRECREATE_GIFT_VERIFY_RESULT_NO_MOBILE = 6, 	/* 未输入手机号|不关闭ui */
    PRECREATE_GIFT_VERIFY_RESULT_SMS_SEND_FAIL = 7, 	/* 短信息发送失败|不关闭ui */
    PRECREATE_GIFT_VERIFY_RESULT_TOO_FAST = 8, 	/* 短信息密码获取太频繁|不关闭ui */
};

/* ACTION_PRECREATE_GIFT_VERIFY_OP*/
enum tagACTION_PRECREATE_GIFT_VERIFY_OP 
{
    ACTION_PRECREATE_GIFT_VERIFY_OP_OPEN = 0, 	/* 打开ui */
    ACTION_PRECREATE_GIFT_VERIFY_OP_SN = 1, 	/* 新短信验证码序号|打开或刷新ui */
    ACTION_PRECREATE_GIFT_VERIFY_OP_RESULT = 2, 	/* 认证结果 */
};

/* CHAT_TYPE*/
enum tagCHAT_TYPE 
{
    CHAT_SAY = 0, 	/* 附近 */
    CHAT_TEAM = 1, 	/* 队伍 */
    CHAT_PRIVATE = 2, 	/* 私聊 */
    CHAT_CLAN = 3, 	/* 公会 */
    CHAT_WORLD = 4, 	/* 世界 */
    CHAT_ITEM = 5, 	/* 小喇叭 */
    CHAT_FRIEND = 6, 	/* 好友聊天 */
    CHAT_BATTLE = 7, 	/* 战场聊天 */
    CHAT_MUD_ROOM = 8, 	/* MUD聊天室 */
    CHAT_AUTOTEAM = 9, 	/* 自动组队聊天 */
    CHAT_SPAN = 10, 	/* 跨服聊天 */
    CHAT_CLAN_GROUP = 11, 	/* 公会战团聊天 */
    CHAT_WINDOW = 12, 	/* 窗口聊天 */
    CHAT_SPAN_MAP = 13, 	/* 跨服野外聊天 */
    CHAT_SPAN_MAP_WORLD = 14, 	/* 跨服野外同服聊天 */
};

/* SKILL_INFO_TYPE*/
enum tagSKILL_INFO_TYPE 
{
    SKILL_INFO_CHANGE = 0, 
    SKILL_INFO_DEL = 1, 
    SKILL_COOL_CLEAN = 2, 
    SKILL_COOL_TIME = 3, 	/* 设置技能的cd时间,只影响一次 */
};

/* SKILL_COOL_TYPE*/
enum tagSKILL_COOL_TYPE 
{
    SKILL_COOL_CAREER = 0, 
    SKILL_COOL_ALL = 1, 
    SKILL_COOL_ONE = 2, 
};

/* SKILL_BRK_TYPE*/
enum tagSKILL_BRK_TYPE 
{
    SKILL_BRK_NORMAL = 0, 	/* 默认都用这个 */
    SKILL_BRK_CD = 1, 	/* 客户端要把技能的cd,重新设置下 */
    SKILL_BRK_POS = 2, 	/* 客户端要拉扯回原来的点 */
};
#define RIDE_ITEM_TESHU_ID                       	5234001 	/* 直接升级道具ID */

/* RIDE_REFUSE_TYPE*/
enum tagRIDE_REFUSE_TYPE 
{
    RIDE_REFUSE_CANCEL = 0, 
    RIDE_REFUSE_IGNORE = 1, 
};

/* RIDE_CLT_TYPE*/
enum tagRIDE_CLT_TYPE 
{
    RIDE_DROP = 0, 
    RIDE_APPLY = 1, 	/* 申请上坐骑 */
    RIDE_APPLY_ACCEPT = 2, 	/* 接受申请上坐骑 */
    RIDE_INVITE = 3, 	/* 邀请上坐骑 */
    RIDE_INVITE_ACCEPT = 4, 	/* 接受邀请上坐骑 */
    RIDE_NPC_SELECT = 5, 	/* 骑乘主人NPC操作 */
    RIDE_LEVEL_UP = 6, 	/* 骑乘强化 */
    RIDE_APPLY_REFUSE = 7, 	/* 拒绝申请上坐骑 */
    RIDE_INVITE_REFUSE = 8, 	/* 拒绝邀请上坐骑 */
    RIDE_KICK_PASSENGER = 9, 	/* 踢乘客下马 */
    RIDE_MOVE_LEVEL = 10, 	/* 骑乘移星 */
};

/* RIDE_SVR_TYPE*/
enum tagRIDE_SVR_TYPE 
{
    RIDE_SVR_ACCEPT = 0, 	/* 申请上坐骑信息转发 */
    RIDE_SVR_INVITE = 1, 	/* 邀请上坐骑信息转发 */
};

/* PET_CHG_TYPE*/
enum tagPET_CHG_TYPE 
{
    PET_CHG_NAME = 0, 
    PET_CHG_EXP = 1, 
    PET_CHG_HP = 2, 
    PET_CHG_MAXHP = 3, 
    PET_CHG_LEVEL = 4, 
    PET_CHG_LOVE_VAL = 5, 
    PET_CHG_BREEDNUM = 6, 
    PET_CHG_STAT = 7, 
};
#define PET_ATTR_CHG_MAX                         	8

/* PET_SVR_TYPE*/
enum tagPET_SVR_TYPE 
{
    PET_INFO_CHG = 0, 	/* 宠物信息更新,如果身上无此宠物则增加 */
    PET_ATTR_CHG = 1, 
    PET_SVR_DEL = 2, 
    PET_SVR_STRENGTHEN = 3, 
    PET_SVR_FIGHT_ATTR = 4, 
    PET_SVR_WATCH = 5, 
    PET_SVR_ACT = 6, 
    PET_SVR_FUSE_INVITE = 7, 
    PET_SVR_FUSE_REJECT = 8, 
    PET_SVR_FUSE_CANCEL = 9, 
    PET_SVR_FUSE_DEAL = 10, 
    PET_SVR_FUSE_UI = 11, 
    PET_SVR_FUSE_SUCC = 12, 
    PET_SVR_WASH_GENIUS = 13, 
    PET_SVR_RESET_SKILL = 14, 
    PET_SVR_MOVE_STAR_SUCC = 15, 
    PET_SVR_EAT_SUCC = 16, 
    PET_SVR_STEP_UP = 17, 
    PET_SVR_IMP_UP = 18, 
    PET_SVR_GENIUS_LEARN = 19, 
    PET_SVR_WASH_HIGH = 20, 
    PET_SVR_UNBIND = 21, 
};

/* PET_SVR_ACT_TYPE*/
enum tagPET_SVR_ACT_TYPE 
{
    PET_SVR_ACT_WASH_GENIUS = 0, 
    PET_SVR_ACT_ADD_SKILLGRID = 1, 
    PET_SVR_ACT_SKILL_LEARN = 2, 
    PET_SVR_ACT_SKILL_UP = 3, 
    PET_SVR_ACT_WASH_GRID = 4, 
};

/* PET_CLT_TYPE*/
enum tagPET_CLT_TYPE 
{
    PET_CLT_ACT = 0, 
    PET_CLT_SKILL_UP = 1, 
    PET_CLT_CHG_NAME = 2, 
    PET_CLT_DROP = 3, 
    PET_CLT_STRENGTHEN = 4, 
    PET_CLT_WASH_SKILL_GRID = 5, 
    PET_CLT_WATCH = 6, 
    PET_CLT_SKILL_LEARN = 7, 
    PET_CLT_SET_PASSIVE = 8, 
    PET_CLT_ADD_SKILL_GRID = 9, 
    PET_CLT_FUSE_INVITE = 10, 
    PET_CLT_FUSE_REJECT = 11, 
    PET_CLT_FUSE_ACCEPT = 12, 
    PET_CLT_FUSE_CANCEL = 13, 
    PET_CLT_FUSE_DEAL = 14, 
    PET_CLT_STRENGTHEN_SAVE = 15, 
    PET_CLT_RESTREN = 16, 
    PET_CLT_LOCK_SKILL = 17, 
    PET_CLT_SKILL_RESET = 18, 
    PET_CLT_WASH_GENIUS = 19, 
    PET_CLT_WASH_GENIUS_SAVE = 20, 
    PET_CLT_HETI_END = 21, 
    PET_CLT_LOVE_LEVEL_UP = 22, 
    PET_CLT_MOVE_STAR = 23, 
    PET_CLT_EAT = 24, 
    PET_CLT_STEP_UP = 25, 	/* 宠物进阶 */
    PET_CLT_IMP_UP = 26, 	/* 宠物成长升级 */
    PET_CLT_GENIUS_LEARN = 27, 	/* 宠物天赋书 */
    PET_CLT_UNBIND = 28, 	/* 宠物解绑 */
};
#define PET_CAMPAIGN_PRE_TIME                    	5

/* PET_ACT_TYPE*/
enum tagPET_ACT_TYPE 
{
    PET_ACT_CAMPAIGN_PRE = 0, 
    PET_ACT_CAMPAIGN = 1, 
    PET_ACT_BACKUP = 2, 
    PET_ACT_CAMPAIGN_BRK = 3, 
};

/* PET_WASH_MONEY_TYPE*/
enum tagPET_WASH_MONEY_TYPE 
{
    PET_WASH_NORMAL = 0, 
    PET_WASH_BIND_GODCOIN = 1, 
    PET_WASH_GODCOIN = 2, 
};

/* PET_WASH_LOCK_FLAG*/
enum tagPET_WASH_LOCK_FLAG 
{
    PET_WASH_LOCK_GENIUS = 1, 
    PET_WASH_LOCK_ATK_GENIUS = 2, 
    PET_WASH_LOCK_PHSIC_DEF_GENIUS = 4, 
    PET_WASH_LOCK_ICE_DEF_GENIUS = 8, 
    PET_WASH_LOCK_HP_GENIUS = 16, 
    PET_WASH_LOCK_HITRATE_GENIUS = 32, 
    PET_WASH_LOCK_FLEE_GENIUS = 64, 
};

/* CHANGE_COIN_INTO_WAYS*/
enum tagCHANGE_COIN_INTO_WAYS 
{
    COIN_UNKNOW = 0, 
    COIN_MONEY2BULL = 1, 	/* 银币换绑银 */
    COIN_BULL2MONEY = 2, 	/* 暂时没用 */
};

/* REVIVE_TYPE*/
enum tagREVIVE_TYPE 
{
    REVIVE_NORMAL = 0, 	/* 复活点复活 */
    REVIVE_ACCEPT_SKILL = 1, 	/* 接收技能复活 */
    REVIVE_PERFECT = 2, 	/* 完美复活 */
    REVIVE_STAND = 3, 	/* 原地复活 */
    REVIVE_NIXI = 4, 	/* 逆袭 */
};

/* DLG_TYPE*/
enum tagDLG_TYPE 
{
    DLG_TYPE_ANSWER = 0, 	/* 普通对话框 */
    DLG_TYPE_OPT = 1, 	/* 带选项的对话框 */
    DLG_TYPE_LAST = 2, 	/* 对话框最后一句 */
    DLG_TYPE_COMMIT_OPT = 3, 	/* 提交物品对话框 */
    DLG_TYPE_CHOOSE = 4, 	/* 选择确认对话框 */
};

/* DLG_CLTTYPE*/
enum tagDLG_CLTTYPE 
{
    DLG_TYPE_CLOSE = 0, 	/* 关闭对话框 */
    DLG_TYPE_INPUT = 1, 	/* 带选项的对话框 */
};

/* DLG_STYLE_TYPE*/
enum tagDLG_STYLE_TYPE 
{
    DLG_STYLE_NORMAL = 0, 	/* 普通样式对话框 */
    DLG_STYLE_COMMIT = 1, 	/* 提交物品面板风格对话框 */
};
#define DLG_STR_LEN                              	4096
#define MAX_DLG_OPT                              	16
#define DLG_OPT_LEN                              	256
#define DLG_INPUT_LEN                            	512
#define OP_DIST                                  	400
#define DLG_NPC_ID_INVALID                       	-1 	/* 无效NPCID,用于物品触发对话 */
#define CHOOSE_STR_LEN                           	128

/* CHOOSE_TYPE*/
enum tagCHOOSE_TYPE 
{
    CHOOSE_TYPE_CLOSE = 0, 	/* 关闭,未选择 */
    CHOOSE_TYPE_YES = 1, 	/* 选择了yes */
    CHOOSE_TYPE_NO = 2, 	/* 选择了no */
};

/* BIND_TYPE*/
enum tagBIND_TYPE 
{
    BIND_TYPE_UNKNOWN = 0, 	/* 未知 */
    BIND_TYPE_NPC = 1, 	/* 脚本绑定了npc */
    BIND_TYPE_ITEM = 2, 	/* 脚本绑定了物品 */
    BIND_TYPE_NAME = 3, 	/* 脚本绑定了脚本名 */
    BIND_TYPE_EVENT = 4, 	/* 脚本绑定了游戏事件 */
};

/* ADJUST_TYPE*/
enum tagADJUST_TYPE 
{
    ADJUST_TYPE_LEVEL = 0, 	/* 手动升级 */
    ADJUST_TYPE_ATTR = 1, 	/* 手动分配属性点 */
    ADJUST_TYPE_UI = 3, 	/* 界面操作 */
    ADJUST_TYPE_LOCK = 4, 	/* 锁定 */
    ADJUST_TYPE_WEAR = 5, 	/* 穿装备 */
    ADJUST_TYPE_UNWEAR = 6, 	/* 脱装备 */
    ADJUST_TYPE_AMM = 7, 	/* 换子弹 */
    ADJUST_SHOW_HEAD = 8, 	/* 显示头盔 */
    ADJUST_SHOW_FASHION = 9, 	/* 显示时装 */
    ADJUST_SHOW_BACK = 10, 	/* 显示被饰 */
    ADJUST_SELECT_FASHION_SUIT = 11, 	/* 选择时装套 */
    ADJUST_SHOW_FACE = 12, 	/* 显示面饰 */
    ADJUST_SHOW_WEDDING_DSN = 13, 	/* 显示情侣伴侣称号 */
};
#define MAX_CHG_SKILL_CD_NUM                     	10

/* DIATHESIS_INFO_TYPE*/
enum tagDIATHESIS_INFO_TYPE 
{
    DIATHESIS_INFO_CHG = 0, 
    GENIUS_INFO_CHG = 1, 
    DIATHESIS_ALL_DATA = 2, 
    SKILL_REDUCE_CD_TIME = 3, 
};

/* SHOPPING_REQ_TYPE*/
enum tagSHOPPING_REQ_TYPE 
{
    SHOPPING_REQ_RES_ALL = 0, 	/* 商城的相关协议 */
    SHOPPING_BUY_REQ = 1, 	/* 购买赠送协议 */
    SHOPPING_FRESH_REQ = 2, 	/* 拉取商品配置协议 */
    SHOPPING_FRESH_RES = 3, 	/* 拉取商品配置协议返回 */
    SHOPPING_MODIFY_RES = 4, 	/* 商品表运营修改,主动通知客户端 */
    SHOPPING_QUERY_TIANYUAN_REQ = 5, 	/* 查询天元请求 */
    SHOPPING_QUERY_TIANYUAN_RES = 6, 	/* 查询天元应答 */
    SHOPPING_PACKAGE_PRESENT_REQ = 7, 	/* 从商品背包里面赠送请求 */
    SHOPPING_PACKAGE_PRESENT_RES = 8, 	/* 从商品背包里面赠送应答 */
    SHOPPING_SHOW_MSG_RES = 9, 	/* 商城跑马灯的文字 */
    SHOPPING_QUERY_TRADESELL_REQ = 10, 	/* 查询出售列表请求 */
    SHOPPING_QUERY_TRADESELL_RES = 11, 	/* 查询出售列表应答 */
    SHOPPING_QUERY_TRADEBUY_REQ = 15, 	/* 查询求购列表请求 */
    SHOPPING_QUERY_TRADEBUY_RES = 16, 	/* 查询求购列表应答 */
    SHOPPING_TRADE_REQ = 17, 	/* 交易请求 */
    SHOPPING_TRADE_RES = 18, 	/* 交易应答 */
    SHOPPING_SEND_TRADERECORD_REQ = 19, 	/* 发布交易单请求 */
    SHOPPING_SEND_TRADERECORD_RES = 20, 	/* 发布交易单应答 */
    SHOPPING_QUERY_MY_TRADERECORD_REQ = 21, 	/* 查询我的帐单请求 */
    SHOPPING_QUERY_MY_TRADERECORD_RES = 22, 	/* 查询我的帐单应答 */
    SHOPPING_DESTROY_TRADERECORD_REQ = 25, 	/* 撤销交易单请求 */
    SHOPPING_DESTROY_TRADERECORD_RES = 26, 	/* 撤销交易单应答 */
    SHOPPING_GET_XML_FILE_REQ = 27, 	/* 获取xml的配置请求 */
    SHOPPING_GET_XML_FILE_RES = 28, 	/* 获取xml的配置应答 */
    SHOPPING_QUERY_RECORD_BY_ID_REQ = 29, 	/* 通过id来查询交易记录 */
    SHOPPING_QUERY_RECORD_BY_ID_RES = 30, 	/* 通过id来查询交易记录应答 */
    SHOPPING_MODIFY_LIMIT_RES = 31, 	/* 商品表运营修改,主动通知客户端 */
    SHOPPING_LIMIT_FRESH_RES = 32, 	/* 拉取商品配置协议返回 */
    SHOPPING_OPEN_REQ = 33, 	/* 大开商城时,发这个协议上来,服务器会酌情下发一些数据 */
    SHOPPING_QUERY_PROPSDEF_REQ = 34, 	/* 查询冲值礼包请求 */
    SHOPPING_QUERY_PROPSDEF_RES = 35, 	/* 查询冲值礼包返回 */
    SHOPPING_QUERY_PROPSGIFT_REQ = 36, 	/* 查询冲值礼包请求 */
    SHOPPING_QUERY_PROPSGIFT_RES = 37, 	/* 查询冲值礼包返回 */
    SHOPPING_SET_PROPSGIFT_REQ = 38, 	/* 查询冲值礼包请求 */
    SHOPPING_SET_PROPSGIFT_RES = 39, 	/* 查询冲值礼包返回 */
    SHOPPING_EXCHANGE_POINT_REQ = 40, 	/* 点券兑换请求 */
    SHOPPING_EXCHANGE_POINT_RES = 41, 	/* 点券兑换应答 */
    SHOPPING_SHOP_DEL_RES = 42, 	/* 商品信息删除 */
    SHOPPING_SHOPLIMIT_DEL_RES = 43, 	/* 商品限量信息删除 */
};

/* PACKAGE_REQ_TYPE*/
enum tagPACKAGE_REQ_TYPE 
{
    PACKAGE_REQ_ALL = 0, 
    PACKAGE_REQ_MOVE = 1, 
    PACKAGE_REQ_ARRANGE = 2, 
    PACKAGE_REQ_MONEY = 3, 
    PACKAGE_REQ_USE = 4, 
    PACKAGE_REQ_PICK = 5, 
    PACKAGE_REQ_BOOTY_SELECT = 6, 
    PACKAGE_REQ_TMPDROP = 7, 
    PACKAGE_REQ_FITTINGS_INLAY = 8, 	/* 镶嵌协议 */
    PACKAGE_REQ_FITTINGS_PICK = 9, 	/* 配件摘除协议 */
    PACKAGE_REQ_MOVE_ALL_SHOPPING = 10, 	/* 将商品背包物品全部或部分转入背包 */
    PACKAGE_REQ_CANGBAOTU_RESET = 11, 	/* 把指定的藏宝图重置下 */
    PACKAGE_REQ_USE_PRE = 12, 	/* 物品使用吟唱 */
    PACKAGE_REQ_ADD_STASH_ET = 13, 	/* 扩充仓库开孔 */
    PACKAGE_REQ_USE_PRE_BRK = 14, 	/* 物品使用吟唱打断 */
};

/* INLAY_REQ_TYPE*/
enum tagINLAY_REQ_TYPE 
{
    INLAY_REQ_ALL = 0, 
    FITTINGS_INLAY_REQ_ALL = 1, 	/* 配件镶嵌请求 */
};

/* PACKAGE_USE_TYPE*/
enum tagPACKAGE_USE_TYPE 
{
    PACKAGE_USE_DEFAULT = 0, 	/* 默认使用方式 */
    PACKAGE_USE_RECORD = 1, 	/* 空间记忆器定位 */
    PACKAGE_USE_TRANS = 2, 	/* 空间记忆器传送 */
};
#define PACKAGE_ARRANGE_MIN                      	5 	/* 整理一次背包的时间间隔 */
#define MAX_CHG_NUM                              	128

/* PACKAGE_INFO_TYPE*/
enum tagPACKAGE_INFO_TYPE 
{
    PACKAGE_INFO_ALL = 0, 
    PACKAGE_INFO_CHG = 1, 
    PACKAGE_INFO_BOOTY = 2, 
    PACKAGE_PET_CHG = 3, 
    PACKAGE_SUNDRIES_NUM_CHG = 4, 
    PACKAGE_STUFF_NUM_CHG = 5, 
    PACKAGE_TASK_NUM_CHG = 6, 
    PACKAGE_NOTIFY_ITEM_VIEW = 7, 	/* 通知下刚下发的地图物品,客户端要自动打开拾取页面 */
    PACKAGE_CANGBAOTU_RESET = 8, 	/* 重置藏宝图的地图信息 */
    PACKAGE_STASH_NUM_CHG = 9, 
    PACKAGE_ET_NUM = 10, 	/* 扩充背包栏格子变化 */
    PACKAGE_USE_PRE_BRK = 11, 	/* 物品使用吟唱打断 */
    PACKAGE_SPAR_NUM_CHG = 12, 
};
#define MAX_APPLY_NUM                            	10
#define MAX_INVITE_NUM                           	5
#define TEAM_KICK_VOTE_VALID_TIME                	15 	/* 投票合法的时间s */
#define TEAM_KICK_INTERVAL_TIME                  	180 	/* 距离上次发起踢人的间隔时间s */

/* TEAM_OP_TYPE*/
enum tagTEAM_OP_TYPE 
{
    TEAM_OP_APPLY = 0, 	/* 申请入队 */
    TEAM_OP_APPLY_ACCEPT = 1, 	/* 接受申请入队 */
    TEAM_OP_APPLY_REFUSE = 2, 	/* 拒绝申请入队 */
    TEAM_OP_APPLY_CLEAR = 3, 	/* 清空申请入队 */
    TEAM_OP_INVITE = 4, 	/* 邀请入队 */
    TEAM_OP_INVITE_ACCEPT = 5, 	/* 接受邀请入队 */
    TEAM_OP_INVITE_REFUSE = 6, 	/* 拒绝邀请入队 */
    TEAM_OP_INVITE_CLEAR = 7, 	/* 清空邀请入队 */
    TEAM_OP_CAPTAIN_CHG = 8, 	/* 队长转让 */
    TEAM_OP_EXIT = 9, 	/* 退出队伍 */
    TEAM_OP_KICK = 10, 	/* 开除出队伍 */
    TEAM_OP_DESTROY = 11, 	/* 解散队伍 */
    TEAM_OP_CHGNAME = 12, 	/* 队伍改名 */
    TEAM_OP_SWITCH_QIYUE = 13, 	/* 队伍切换契约 */
    TEAM_OP_USER_SET_QIYUE = 14, 	/* 用户设置契约 */
    TEAM_OP_USER_DEL_QIYUE = 15, 	/* 用户删除契约 */
    TEAM_OP_CHG_BOOTY_MODE = 16, 	/* 切换战利品分配模式 */
    TEAM_OP_VOTE_KICK = 17, 	/* 投票踢人 */
    TEAM_OP_FOLLOW = 18, 	/* 队员跟随 */
    TEAM_OP_SUMMON_ANSWER = 19, 	/* 召唤应答 */
    TEAM_OP_ADD = 20, 	/* 组队，根据情况邀请或者申请 */
};
#define TEAM_SUMMON_OVER_TIME                    	30 	/* 队伍召唤倒计时,单位秒 */

/* TEAM_SVR_TYPE*/
enum tagTEAM_SVR_TYPE 
{
    TEAM_SVR_TEAMINFO = 0, 	/* 队伍列表信息 */
    TEAM_SVR_APPLY = 1, 	/* 队伍申请转发 */
    TEAM_SVR_INVITE = 2, 	/* 队伍邀请转发 */
    TEAM_SVR_MSG = 3, 	/* 队伍提示 */
    TEAM_USER_QIYUELIST = 4, 	/* 玩家的契约列表 */
    TEAM_SVR_BOOTY_MODE = 5, 	/* 更新队伍战利品模式 */
    TEAM_SVR_FOLLOW = 6, 	/* 队长要求跟随转发 */
    TEAM_SVR_FOLLOW_TICK = 7, 	/* 队伍跟随,全队广播队长地图坐标 */
    TEAM_SVR_SUMMON_ASK = 8, 	/* 召唤询问 */
    TEAM_SVR_SUMMON_CLOSE_UI = 9, 	/* 关闭队伍召唤界面 */
};
#define TEAM_OP_TIME                             	300 	/* 队伍操作处理时间 */

/* RELATION_OP_TYPE*/
enum tagRELATION_OP_TYPE 
{
    RELATION_OP_TYPE_CHG = 0, 	/* 个人关系信息变化 */
    RELATION_OP_TYPE_CHGLIST = 1, 	/* 个人关系信息变化列表 */
    RELATION_OP_TYPE_ADDRELATION_REQ = 2, 	/* 加好友请求 */
    RELATION_OP_TYPE_ADDFRIEND_INFO = 3, 	/* 加好友请求通知 */
    RELATION_OP_TYPE_ADDFRIEND_RES = 4, 	/* 加好友请求响应 */
    RELATION_OP_TYPE_EMOTION_REQ = 5, 	/* 修改心情签名 */
    RELATION_OP_TYPE_MEMNAME_REQ = 6, 	/* 修改备注名字 */
    RELATION_OP_TYPE_DELRELATION_REQ = 7, 	/* 删关系请求 */
    RELATION_OP_TYPE_AVATAR_REQ = 10, 	/* 查看同伴请求 */
    RELATION_OP_TYPE_AVATAR_RES = 11, 	/* 查看同伴回复 */
    RELATION_OP_TYPE_DELRELATION_RES = 13, 	/* 删除关系回复 */
    RELATION_OP_TYPE_EMOTION_RES = 14, 	/* 修改心情签名回复 */
    RELATION_OP_TYPE_CHG_CLAN = 15, 	/*  工会信息 */
    RELATION_OP_TYPE_CHGLIST_CLAN = 16, 	/* 工会信息列表 */
    RELATION_OP_TYPE_REJECT = 17, 	/* 拒绝加好友 */
    RELATION_OP_TYPE_INFO_REQ = 18, 	/* 客户端关系信息请求 */
    RELATION_OP_TYPE_INFO_RES = 19, 	/* 服务器关系信息回复 */
    RELATION_OP_TYPE_SET_GROUP = 20, 	/* 设置好友分组 */
    RELATION_OP_TYPE_MAX_FRIEND = 21, 	/* 最大好友数量变化 */
    RELATION_OP_TYPE_MSG_GROUP = 22, 	/* 好友消息群发 */
    RELATION_OP_TYPE_INVOLVE_MARRY_CLT = 23, 	/* 结婚系统相关的操作,c to s */
    RELATION_OP_TYPE_INVOLVE_MARRY_SVR = 24, 	/* 结婚系统相关的操作,s to c */
};
#define MAX_FIREND_GROUP                         	5 	/* 好友最多5组 */

/* RELATION_ATTR*/
enum tagRELATION_ATTR 
{
    RELATION_ATTR_NAME = 0, 	/* 名字 */
    RELATION_ATTR_GENDER = 1, 	/* 性别 */
    RELATION_ATTR_LEVEL = 2, 	/* 等级 */
    RELATION_ATTR_BUDDYVAL = 3, 	/* 友好度 */
    RELATION_ATTR_HEAD = 4, 	/* 头像 */
    RELATION_ATTR_CAREER = 5, 	/* 职业 */
    RELATION_ATTR_EMOTION = 6, 	/* 心情签名 */
    RELATION_ATTR_MEMNAME = 7, 	/* 备忘名字 */
    RELATION_ATTR_ONLINE = 8, 	/* 是否在线 */
    RELATION_ATTR_GPRSEND = 9, 
    RELATION_ATTR_GROUP = 10, 	/* 组ID */
};
#define RELATION_ATTR_MAX                        	11

/* NPC_SHOP_OP*/
enum tagNPC_SHOP_OP 
{
    SHOP_BUY = 0, 	/* 购买 */
    SHOP_BUY_SELLED = 1, 	/* 回购 */
    SHOP_SELL = 2, 	/* 出售 */
    SHOP_REPAIR_ONE = 3, 	/* 单独修理 */
    SHOP_REPAIR_ALL = 4, 	/* 全部修理 */
    SHOP_LIST = 5, 	/* 商店列表 */
    SHOP_SELLED_LIST = 6, 	/* 回购列表 */
};
#define REBATE_TYPE_MAX_NUM                      	4 	/* 折扣最多类型 */

/* REBATE_TYPE*/
enum tagREBATE_TYPE 
{
    REBATE_TYPE_RED_NAME = 1, 	/* 红名折扣 */
    REBATE_TYPE_CITY_OWNER_1 = 2, 	/* 占领时间城1周折扣 */
    REBATE_TYPE_CITY_OWNER_2 = 3, 	/* 占领时间城2-4周折扣 */
    REBATE_TYPE_CITY_OWNER_3 = 4, 	/* 占领时间城5周折扣 */
};
#define REBATE_RED_NAME                          	200 	/* 红名折扣200% */
#define REBATE_CITY_OWNER_1                      	90 	/* 占领时间城1周折扣90% */
#define REBATE_CITY_OWNER_2                      	85 	/* 占领时间城2-4周折扣85% */
#define REBATE_CITY_OWNER_3                      	80 	/* 占领时间城5周折扣80% */

/* TASK_OP*/
enum tagTASK_OP 
{
    TASK_INFO = 0, 	/* 获取角色任务信息 */
    TASK_CHG = 1, 	/* 任务变化 */
    TASK_DIALOG = 2, 	/* 任务对话框 */
    TASK_ACCEPT = 3, 	/* 接任务 */
    TASK_AWARD = 4, 	/* 领取任务奖励 */
    TASK_DROP = 5, 	/* 放弃任务 */
    TASK_FINI = 6, 	/* 任务完成 */
    TASK_SHARE = 7, 	/* 共享任务 */
    TASK_REFUSE = 8, 	/* 拒绝任务 */
    TASK_TIMER = 9, 	/* 拒绝任务 */
    TASK_ITEM_RECYCLE_OPEN = 10, 	/* 使用物品接环组打开接受面板 */
    TASK_ITEM_RECYCLE_ACCEPT = 11, 	/* 接受物品环组 */
    TASK_ITEM_RECYCLE_UI = 12, 	/* 物品环组接受的任务信息 */
};

/* TASK_DIALOG_TYPE*/
enum tagTASK_DIALOG_TYPE 
{
    TASK_DIALOG_NOFINI_TIP = 0, 	/* 未完成任务提示框 */
    TASK_DIALOG_ACCEPT = 1, 	/* 任务接取框 */
    TASK_DIALOG_AWARD = 2, 	/* 领取任务奖励框 */
    TASK_DIALOG_ACCEPT_TIP = 3, 	/* 任务接取提示框 */
};

/* COLLECT_OP*/
enum tagCOLLECT_OP 
{
    COLLECT_START = 0, 	/* 开始采集 */
    COLLECT_END = 1, 	/* 结束采集 */
};

/* LEARN_TYPE*/
enum tagLEARN_TYPE 
{
    SKILL_LEARN = 0, 	/* 技能学习 */
    SKILL_LEVEL_UP = 1, 	/* 技能升级 */
    DIATHESIS_LEARN = 2, 	/* 素质学习 */
    DIATHESIS_LEVEL_UP = 3, 	/* 素质升级 */
    GENIUS_LEARN = 4, 	/* 天赋学习 */
    GENIUS_LEVEL_UP = 5, 	/* 天赋升级 */
    GENIUS_ALL_RESET = 6, 	/* 把所有的天赋重置,协议的id和level填0就可以了 */
};
#define EXCHG_MAX_DIST                           	1000 	/* 交易最大距离限制 */
#define LOGIN_NOT_EXCHG_TIME                     	10 	/* 登陆后120秒不能交易 */
#define EXCHG_INVITE_TIME                        	15 	/* 交易请求有效时间 15秒 */

/* EXCHG_STAT*/
enum tagEXCHG_STAT 
{
    EXCHG_NO = 0, 	/* 不是交易状态 */
    EXCHG_READY = 1, 	/* 交易状态 */
    EXCHG_LOCK = 2, 	/* 锁定状态 */
    EXCHG_DEAL = 3, 	/* 确认交易状态 */
};

/* EXCHG_TYPE*/
enum tagEXCHG_TYPE 
{
    INVITE = 0, 	/* 邀请 */
    REJECT = 1, 	/* 拒绝 */
    ACCEPT = 2, 	/* 接受 */
    CANCEL = 3, 	/* 取消 */
    LOCK = 4, 	/* 交易锁定 */
    DEAL = 5, 	/* 交易确认 */
    START = 6, 	/* 开始交易 */
    END = 7, 	/* 结束交易 */
    CANCEL_LOCK = 8, 	/* 取消锁定 */
};

/* REJECT_REASON*/
enum tagREJECT_REASON 
{
    INITIATIVE_REJECT = 0, 	/* 主动拒绝 */
    ROLE_LOGOUT_REJECT = 1, 	/* 下线 */
    CHG_MAP_REJECT = 2, 	/* 切地图 */
    DIST_REJECT = 3, 	/* 距离太远 */
    TIME_REJECT = 4, 	/* 太长时间没有响应 */
};

/* PWORLD_GRADE_TYPE*/
enum tagPWORLD_GRADE_TYPE 
{
    PWORLD_GRADE_D = 0, 
    PWORLD_GRADE_C = 1, 
    PWORLD_GRADE_B = 2, 
    PWORLD_GRADE_A = 3, 
    PWORLD_GRADE_S = 4, 
};

/* PWORLD_LEVEL_TYPE*/
enum tagPWORLD_LEVEL_TYPE 
{
    PWORLD_LEVEL_MIN = 0, 	/* 最小等级 */
    PWORLD_LEVEL_MAX = 1, 	/* 最大等级 */
    PWORLD_LEVEL_AVG = 2, 	/* 平均等级 */
};

/* PWORLD_DIFFICULTY_TYPE*/
enum tagPWORLD_DIFFICULTY_TYPE 
{
    PWORLD_DIFFICULTY_NORMAL = 0, 	/* 普通 */
    PWORLD_DIFFICULTY_JINYING = 1, 	/* 精英 */
};
#define MAX_PWORLD_MAP                           	32

/* CLAN_CLT_OPERATON*/
enum tagCLAN_CLT_OPERATON 
{
    CLAN_OP_CREATE = 0, 	/* 创建一个公会 */
    CLAN_OP_INVITE_JOIN_CLAN = 1, 	/* 添加一个成员 */
    CLAN_OP_DEL_MEMBER = 2, 	/* 删除一个成员 */
    CLAN_OP_EXIT_CLAN = 3, 	/* 退出公会 */
    CLAN_OP_UP_POSITION = 4, 	/* 提升一个成员的阶级 */
    CLAN_OP_DOWN_POSITION = 5, 	/* 降低一个成员的阶级 */
    CLAN_OP_DISBAND = 6, 	/* 解散公会 */
    CLAN_OP_EDIT_BULLETIN = 7, 	/* 编辑公告 */
    CLAN_OP_EDIT_MANIFESTO = 8, 	/* 编辑宣言 */
    CLAN_OP_DEMISE_JOB = 9, 	/* 让位 */
    CLAN_OP_APPLY_JOIN_CLAN = 10, 	/* 申请入会 */
    CLAN_OP_CENSOR_JOIN_CLAN = 11, 	/* 入会审查 */
    CLAN_OP_SET_MEMBER_NICKNAME = 12, 	/* 设置昵称 */
    CLAN_OP_APPLY_JOIN_LIST = 13, 	/* 查看入会请求列表 */
    CLAN_OP_INVITE_JOIN_UNION = 14, 	/* 邀请加入同盟 */
    CLAN_OP_APPLY_JOIN_UNION = 15, 	/* 申请加入同盟 */
    CLAN_OP_EXIT_UNION = 16, 	/* 退出同盟 */
    CLAN_OP_APPLY_JOIN_ENEMY = 17, 	/* 添加敌对公会 */
    CLAN_OP_EXIT_ENEMY = 18, 	/* 删除敌对公会 */
    CLAN_OP_DIPLOMATISM_STATUS = 19, 	/* 查看公会的外交状态 */
    CLAN_OP_ANSWER_JOIN_CLAN = 20, 	/* 回复别人的入会邀请 */
    CLAN_OP_ANSWER_JOIN_UNION = 21, 	/* 回复别人的入盟邀请 */
    CLAN_OP_ANSWER_JOIN_ENEMY = 22, 	/* 回复别人的进行敌对请求 */
    CLAN_OP_SEARCH = 23, 	/* ×使用ID搜索公会× */
    CLAN_OP_CENSOR_JOIN_UNION = 24, 	/* 审查申请入盟的公会 */
    CLAN_OP_CENSOR_JOIN_ENEMY = 25, 	/* 审查申请敌对的公会 */
    CLAN_OP_MEMBER_SNAPSHOT = 26, 	/* 要求查看所有成员信息的快照 */
    CLAN_OP_INFO = 27, 	/* 要求查看公会的一般信息 */
    CLAN_OP_MANIFESTO = 28, 	/* 查看公会的宣言 */
    CLAN_OP_UPGRADE = 29, 	/* 提升公会等级 */
    CLAN_OP_ENABLE_CITY = 30, 	/* 申请公会城市 */
    CLAN_OP_UPGRADE_CITY = 31, 	/* 提升公会城市等级 */
    CLAN_OP_UPGRADE_CITY_BUILDING = 32, 	/* 提升公会城市建筑等级 */
    CLAN_OP_SELECT_TASK_GROUP = 33, 	/* 切换公会任务组 */
    CLAN_OP_SELECT_CITY_TASK_GROUP = 34, 	/* 切换公会城市任务组 */
    CLAN_OP_VIEW_PAGE = 35, 	/* 查看服务器上的一页公会 */
    CLAN_OP_CITY_INFO = 36, 	/* 查看本公会公会城市信息 */
    CLAN_OP_PAY = 37, 	/* 领工资 */
    CLAN_OP_FIND_REQ = 38, 	/* 查找公会 */
    CLAN_OP_VIEW_PAGE_BY_ID = 39, 	/* 使用ID获取一页公会的信息 */
    CLAN_OP_RESEARCH = 40, 	/* 科技研发 */
    CLAN_OP_CANCEL_RESEARCH = 41, 	/* 取消研发 */
    CLAN_OP_MAKE = 42, 	/* 制造 */
    CLAN_OP_CANCEL_MAKING = 43, 	/* 取消制造 */
    CLAN_OP_GRAB_MACHINE = 44, 	/* 提取机械 */
    CLAN_OP_CALLBACK_MACHINE = 45, 	/* 召回机械 */
    CLAN_OP_MACHINE_SUPPLY = 46, 	/* 机械补给 */
    CLAN_OP_STORAGE_GRID_LOCK_SWITCH = 47, 	/* 仓库格子锁切换 */
    CLAN_OP_STORAGE_GRID_DESTROY = 48, 	/* 丢弃仓库中的东西 */
    CLAN_OP_ANSWER_EXIT_ENEMY = 49, 	/* 回复别人的解除敌对请求 */
    CLAN_OP_SET_JOB_AND_TITLE = 50, 	/* 设置公会成员的职位与封号 */
    CLAN_OP_RESEARCH_SPEEDUP = 51, 	/* 研发加速 */
    CLAN_OP_MAKING_SPEEDUP = 52, 	/* 制造加速 */
    CLAN_OP_TMP = 53, 	/* 未使用,可重复利用 */
    CLAN_OP_RESOURCE_LOCK_SWITCH = 54, 	/* 资源中心锁切换 */
    CLAN_OP_RESOURCE_GRAB_ITEM = 55, 	/* 资源中心兑换物品 */
    CLAN_OP_SET_COLOR = 56, 	/* 头顶颜色设置 */
    CLAN_OP_SET_MAP_POS = 57, 	/* 地图会标 */
    CLAN_OP_SKILL_RESEARCH = 58, 	/* 技能研发 */
    CLAN_OP_SKILL_LEARN = 59, 	/* 技能学习 */
    CLAN_OP_VIEW_GETRES_INFO = 60, 	/* 查看领取公会资源记录 */
    CLAN_OP_CLAN_SUMMON_ANSWER = 61, 	/* 公会传送应答 */
    CLAN_OP_SET_GROUP = 62, 	/* 设置成员加入战团 */
    CLAN_OP_SET_GROUP_STRONG_MAP = 63, 	/* 设置战团参与据点 */
    CLAN_OP_OPEN_GROUP = 64, 	/* 激活第六战团 */
    CLAN_OP_KICK_CITY = 65, 	/* 本公会成员T出公会城市 */
    MAX_CLAN_OP = 66, 	/* CLAN_OP_XXX最大数量 */
};
#define CLAN_NAME_IN_LEN                         	22 	/* 可输入的公会名长度 */
#define CLAN_MANIFESTO_IN_LEN                    	129 	/* 可输入的公会宣告长度 */
#define CLAN_NICK_IN_LEN                         	22 	/* 可输入的公会会员昵称长度 */
#define CLAN_VIEW_GETRES_NUM                     	10 	/* 每页显示领取公会资源记录个数 */

/* FIND_CLAN_BY_WHAT*/
enum tagFIND_CLAN_BY_WHAT 
{
    FIND_CLAN_BY_ID = 0, 	/* 用ID精确查找 */
    FIND_CLAN_BY_NAME = 1, 	/* 用一个字符串概略查找 */
};

/* CLAN_MAKE_FOR*/
enum tagCLAN_MAKE_FOR 
{
    CLAN_MAKE_FOR_COLLECTION = 0, 	/* 采集制造 */
    CLAN_MAKE_FOR_ARM = 1, 	/* 军事制造 */
};

/* CLAN_PROGRESS_NOTIFY*/
enum tagCLAN_PROGRESS_NOTIFY 
{
    CLAN_PROGRESS_STARTED = 0, 	/* 开始 */
    CLAN_PROGRESS_CANCELED = 1, 	/* 取消 */
    CLAN_PROGRESS_FINISHED = 2, 	/* 完成 */
    CLAN_PROGRESS_SHIFTED = 3, 	/* 变速 */
};

/* CLAN_MACHINE_SUPPLY_FOR*/
enum tagCLAN_MACHINE_SUPPLY_FOR 
{
    CLAN_MACHINE_SUPPLY_FOR_REPAIR = 0, 	/* 修理 */
    CLAN_MACHINE_SUPPLY_FOR_FUEL = 1, 	/* 油料 */
};
#define CLAN_OPEN_GROUP_ITEM_ID                  	5230042
#define CLAN_SUMMON_OVER_TIME                    	30 	/* 公会召唤倒计时,单位秒 */

/* CLAN_SVR_OPERATON*/
enum tagCLAN_SVR_OPERATON 
{
    CLAN_SVR_ASK_JOIN_CLAN = 0, 	/* 询问是否入会 */
    CLAN_SVR_ASK_JOIN_UNION = 1, 	/* 询问是否入盟 */
    CLAN_SVR_ASK_JOIN_ENEMY = 2, 	/* 询问是进入行敌视状态 */
    CLAN_SVR_INFO = 3, 	/* 公会信息 */
    CLAN_SVR_MEMBER_SNAPSHOT = 4, 	/* 全部会员信息 */
    CLAN_SVR_MEMBER_CHG = 5, 	/* 增量会员信息 */
    CLAN_SVR_CLAN_VIEW_PAGE = 6, 	/* 一页公会信息(废弃) */
    CLAN_SVR_APPLY_JOIN_LIST = 7, 	/* 申请列表 */
    CLAN_SVR_DIPLOMATISM_STATUS = 8, 	/* 公会的外交状况 */
    CLAN_SVR_MSG = 9, 	/* 公会文本消息 */
    CLAN_SVR_MANIFESTO = 10, 	/* 公会宣言 */
    CLAN_SVR_CREATE = 11, 	/* 公会创建成功消息 */
    CLAN_SVR_DISABLE = 12, 	/* 被开除/退出/公会解散,总之就是公会面板不能打开鸟 */
    CLAN_SVR_BULLETIN = 13, 	/* 公会公告 */
    CLAN_SVR_CITY_INFO = 14, 	/* 公会城市信息 */
    CLAN_SVR_FIND_RES = 15, 	/* 公会查询结果 */
    CLAN_SVR_DIPLOMATISM_CHG = 16, 	/* 公会的外交变化情况 */
    CLAN_SVR_NOTIFY = 17, 	/* 公会通知消息,使客户端按钮闪烁 */
    CLAN_SVR_ID_SNAPSHOT = 18, 	/* 所有公会的ID快照 */
    CLAN_SVR_VIEW_CHG = 19, 	/* 公会的变化信息 */
    CLAN_SVR_VIEW_PAGE = 20, 	/* 一页公会的信息 */
    CLAN_SVR_ADVANCE_SNAPSHOT = 21, 	/* 高级公会信息快照 */
    CLAN_SVR_RESEARCH_NOTIFY = 22, 	/* 研发进展通知 */
    CLAN_SVR_MAKING_NOTIFY = 23, 	/* 制造进展通知 */
    CLAN_SVR_STORAGE_GRID_NOTIFY = 24, 	/* 公会仓库格子通知 */
    CLAN_SVR_PROPERTY_NOTIFY = 25, 	/* 公会属性变化通知 */
    CLAN_SVR_BUILDING_NOTIFY = 26, 	/* 公会建筑变化通知 */
    CLAN_SVR_ASK_EXIT_ENEMY = 27, 	/* 询问是否可解除敌对 */
    CLAN_SVR_RESOURCE_NOTIFY = 28, 	/* 资源变化通知 */
    CLAN_SVR_COLOR_NOTIFY = 29, 	/* 头顶颜色变化 */
    CLAN_SVR_MAP_POS_NOTIFY = 30, 	/* 地图会标变化 */
    CLAN_SVR_YESTERDAY_CLAN_TOUCH_NOTIFY = 31, 	/* 公会昨日摸宝次数 */
    CLAN_SVR_GETRES_INFO = 32, 	/* 发给客户端的一页公会资源领取记录 */
    CLAN_SVR_SUMMON_ASK = 33, 	/* 公会传送询问 */
    CLAN_SVR_SUMMON_UI_CLOSE = 34, 	/* 公会传送UI关闭 */
    CLAN_SVR_GROUP_INFO = 35, 	/* 公会战团信息 */
    CLAN_SVR_DART_INFO = 36, 	/* 公会开启运镖 */
    CLAN_SVR_SPEND_INFO = 37, 	/* 公会扣费通知 */
};

/* CLAN_MEMBER_CHG_CODE*/
enum tagCLAN_MEMBER_CHG_CODE 
{
    CLAN_MEMBER_CHG_ADD = 0, 	/* 增加 */
    CLAN_MEMBER_CHG_DEL = 1, 	/* 减少 */
    CLAN_MEMBER_CHG_MOD = 2, 	/* 修改 */
};

/* CLAN_VIEW_CHG_CODE*/
enum tagCLAN_VIEW_CHG_CODE 
{
    CLAN_VIEW_CHG_ADD = 0, 	/* 增加 */
    CLAN_VIEW_CHG_DEL = 1, 	/* 减少 */
    CLAN_VIEW_CHG_MOD = 2, 	/* 修改 */
};

/* CLAN_NOTIFY_CODE*/
enum tagCLAN_NOTIFY_CODE 
{
    CLAN_NOTIFY_MEMBER = 0, 	/* 有人申请加入公会 */
    CLAN_NOTIFY_DIPLOMATISM = 1, 	/* 有人申请敌对或同盟 */
};

/* CLAN_PROPERTY_TYPE*/
enum tagCLAN_PROPERTY_TYPE 
{
    CLAN_PROPERTY_MONEY = 0, 	/* 公会资金 */
    CLAN_PROPERTY_STABLE_VALUE = 1, 	/* 安定度 */
    CLAN_PROPERTY_ACTIVE_VALUE = 2, 	/* 繁荣度 */
    CLAN_PROPERTY_TECH_POINT = 3, 	/* 科技点 */
    CLAN_PROPERTY_USED_TECH_POINT = 4, 	/* 已用科技点 */
    CLAN_PROPERTY_MAX_COLLECTION_MAKING_NUM = 5, 	/* 最大同时采集制造数 */
    CLAN_PROPERTY_MAX_ARM_MAKING_NUM = 6, 	/* 最大同时军事制造数 */
    CLAN_PROPERTY_MAX_MACHINE_GRID_NUM = 7, 	/* 机械仓库最大有效栏位数 */
    CLAN_PROPERTY_MAX_RESOURCE_GRID_NUM = 8, 	/* 资源仓库最大有效栏位数 */
    CLAN_PROPERTY_LEVEL = 9, 	/* 公会等级 */
    CLAN_PROPERTY_CITY_LEVEL = 10, 	/* 公会城市等级 */
    CLAN_PROPERTY_FLAG = 11, 	/* 公会标记 */
};

/* CLAN_STORAGE_GRID_CHANGE*/
enum tagCLAN_STORAGE_GRID_CHANGE 
{
    CLAN_STORAGE_GRID_ADD = 0, 	/* 增加了一个物品/机械 */
    CLAN_STORAGE_GRID_DEL = 1, 	/* 摧毁了一个物品/机械 */
    CLAN_STORAGE_GRID_MOD = 2, 	/* 一个物品/机械发生了变化 */
};

/* CLAN_BUILDING_NOTIFY*/
enum tagCLAN_BUILDING_NOTIFY 
{
    CLAN_BUILDING_BEGIN = 0, 	/* 建造/升级开始 */
    CLAN_BUILDING_COMPLETED = 1, 	/* 建造/升级完成 */
};

/* MAIL_CLT_OPERATON*/
enum tagMAIL_CLT_OPERATON 
{
    MAIL_CLT_READ = 0, 	/* 阅读邮件 */
    MAIL_CLT_DELETE = 1, 	/* 删除邮件 */
    MAIL_CLT_ALL_DELETE = 2, 	/* 删除全部邮件 */
    MAIL_CLT_SEND = 3, 	/* 发送邮件 */
    MAIL_CLT_GET = 4, 	/* 收取邮件中的物品和钱 */
    MAIL_CLT_ALL_GET = 5, 	/* 收取所有邮件中的所有物品和钱 */
};
#define MAIL_MAX_HEAD_PAGE_NUM                   	8 	/* 一页显示的邮件头数量 */
#define MAIL_MAX_TITLE_LEN                       	32 	/* 邮件标题的最大长度 */
#define MAIL_MAX_HEAD_NUM                        	70 	/* 一个玩家的最大邮件数量 */

/* MAIL_GETTING_OPERATON*/
enum tagMAIL_GETTING_OPERATON 
{
    MAIL_GET_ITEM = 0, 	/* 获取一个格子内的所有物品 */
    MAIL_GET_MONEY = 1, 	/* 获取全部金钱 */
    MAIL_GET_ALL = 2, 	/* 获取全部金钱与物品 */
};

/* MAIL_SVR_OPERATON*/
enum tagMAIL_SVR_OPERATON 
{
    MAIL_SVR_HEAD_CHG = 0, 	/* 邮件头增量信息 */
    MAIL_SVR_HEAD_SNAPSHOT = 1, 	/* 邮件头快照 */
    MAIL_SVR_CONTENT = 2, 	/* 邮件内容 */
    MAIL_SVR_GOODS_CHG = 3, 	/* 邮件物品变化 */
    MAIL_SVR_SEND_RES = 4, 	/* 发送邮件结果 */
};

/* MAIL_CHG*/
enum tagMAIL_CHG 
{
    MAIL_CHG_ADD = 0, 	/* 新邮件 */
    MAIL_CHG_DEL = 1, 	/* 删除邮件 */
    MAIL_CHG_MOD = 2, 	/* 修改邮件头信息 */
};

/* BULLETIN_SVR_OPERATON*/
enum tagBULLETIN_SVR_OPERATON 
{
    BULLETIN_SVR_SNAPSHOT = 0, 	/* 公告快照 */
    BULLETIN_SVR_CHG_ADD = 1, 	/* 增加一个公告 */
    BULLETIN_SVR_CHG_DEL = 2, 	/* 减少一个公告 */
};

/* RESPACT_SVR_OPERATON*/
enum tagRESPACT_SVR_OPERATON 
{
    RESPACT_SVR_INFO = 0, 	/* 所有声望信息 */
    RESPACT_SVR_CHG = 1, 	/* 某一个声望的变化 */
};

/* RUNE_CLT_OPERATION*/
enum tagRUNE_CLT_OPERATION 
{
    RUNE_CLT_ENABLE = 0, 
    RUNE_CLT_SET = 1, 
    RUNE_CLT_DEL = 2, 
};

/* RUNE_SVR_OPERATION*/
enum tagRUNE_SVR_OPERATION 
{
    RUNE_SVR_ENABLE = 0, 
    RUNE_SVR_SET = 1, 
    RUNE_SVR_DEL = 2, 
};

/* TRUST_CLT_TYPE*/
enum tagTRUST_CLT_TYPE 
{
    TRUST_OPEN_FACE = 0, 	/* 打开委托挂单信息面板 */
    TRUST_ROLE_ORDER = 1, 
    TRUST_CONTRIBUTE = 2, 
    TRUST_ORDER = 3, 
    TRUST_CANCEL_ORDER = 4, 
};
#define TRUST_OPEN_LIMIT                         	2 	/* 打开挂单面板时间间隔限制 */
#define MAX_TRUST_ORDER                          	5 	/* 最大挂单 */
#define BUDDY_VALUE_S                            	50000 	/* 友好 度S 段对应值 */
#define BUDDY_VALUE_A                            	40000 	/* 友好 度A 段对应值 */
#define BUDDY_VALUE_B                            	30 	/* 友好 度B 段对应值 */
#define BUDDY_VALUE_C                            	20 	/* 友好 度C 段对应值 */
#define BUDDY_VALUE_D                            	10 	/* 友好 度D 段对应值 */

/* TRUST_SVR_TYPE*/
enum tagTRUST_SVR_TYPE 
{
    TRUST_VER_LIST = 0, 
    TRUST_ORDER_LIST = 1, 
    TRUST_CONTRIBUTE_MSG = 2, 
};
#define TRUST_CONTRIBUTE_LEN                     	128

/* STALL_CLT_TYPE*/
enum tagSTALL_CLT_TYPE 
{
    CLT_STALL_START = 0, 
    CLT_STALL_END = 1, 
    CLT_STALL_CHANGE_NAME = 2, 	/* 摊位更名 */
    CLT_STALL_SEE = 3, 	/* 摊位查看 */
    CLT_STALL_BUY = 4, 	/* 购物 */
    CLT_STALL_ADD_GRID = 5, 	/* 扩充摊位格子 */
    CLT_STALL_CHANGE_ADMSG = 6, 	/* 摊位修改广告 */
    CLT_STALL_DOWN = 7, 	/* 下架 */
    CLT_STALL_UP = 8, 	/* 上架 */
};

/* STALL_SVR_TYPE*/
enum tagSTALL_SVR_TYPE 
{
    SVR_STALL_START = 0, 	/* 开始摆摊回复 */
    SVR_STALL_END = 1, 
    SVR_STALL_CHANGE_NAME = 2, 	/* 摊位更名回复 */
    SVR_STALL_SEE = 3, 	/* 摊位查看回复 */
    SVR_STALL_BUY = 4, 	/* 购物回复,通知购买者 */
    SVR_STALL_INFO_CHG = 5, 	/* 顾客购买东西后,摊位信息发生变化 */
    SVR_STALL_GRID_NUM = 6, 	/* 摊位道具格子数 */
    SVR_STAL_SHOW_ADMSG = 7, 	/* 摊位显示广告信息 */
    SVR_STAL_UP_RES = 8, 	/* 上架回复 */
    SVR_STAL_DOWN_RES = 9, 	/* 下架回复 */
    SVR_STAL_CHG_ADMSG_RES = 10, 	/* 修改广告回复 */
};

/* ARM_ACT_TYPE*/
enum tagARM_ACT_TYPE 
{
    ARM_ACT_STAR = 0, 	/* 装备品质提升 */
    ARM_ACT_LEVEL = 1, 	/* 装备等级提升 */
    ARM_ACT_FIGHT = 2, 	/* 装备战斗力提升 */
    ARM_ACT_IDENTIFIABILITY = 3, 	/* 装备鉴定 */
    GEM_ACT_LEVEL_UP = 4, 	/* 宝石升级 */
    GEM_ACT_INLAY = 5, 	/* 宝石镶嵌 */
    GEM_ACT_PICK = 6, 	/* 宝石摘取 */
    GEM_ACT_OPEN_HOLE = 7, 	/* 开宝石孔 */
    ARM_MOVE_STAR = 8, 	/* 品质转移 */
    ARM_BIND = 9, 	/* 装备绑定 */
    ARM_UNBIND = 10, 	/* 装备取消绑定 */
    ARM_UNFENGYIN_PRE = 11, 	/* 请求封印者的name */
    ARM_UNFENGYIN = 12, 	/* 装备取消封印 */
    ARM_FENJIE = 13, 	/* 装备分解 */
    ARM_FENJIE_PRE = 14, 	/* 装备分解吟唱 */
    ARM_FENJIE_PRE_BRK = 15, 	/* 装备分解吟唱 */
    GEM_ADD_POWER = 16, 	/* 宝石充能 */
    GEM_RESET_ATTR = 17, 	/* 宝石重置 */
    ARM_RECAST = 18, 	/* 装备重铸 */
    ARM_RECAST_SAVE = 19, 	/* 保存装备重铸结果 */
    ARM_STAR_SAVE = 20, 	/* 保存强化结果 */
    GEM_RESET_ATTR_SAVE = 21, 	/* 保存宝石重置 */
    ARM_WASH_ADDATTR = 22, 	/* 洗炼 */
    ARM_WASH_ADDATTR_SAVE = 23, 	/* 洗炼保存 */
    SPAR_INLAY = 24, 	/* 晶石镶嵌 */
    SPAR_SORB = 25, 	/* 晶石吸收 */
    RUNE_UP_SVR_RES = 26, 	/* 符文合成服务器回复 */
    ARM_LEVEL_UP = 27, 	/* 装备升级 */
    ARM_ADDATTR_MOVE = 28, 	/* 装备附加属性转移 */
    ARM_ATTR_RESET = 29, 	/* 装备附加属性转移 */
    ARM_ATTR_ACTIVE = 30, 	/* 激活某条属性 */
    ARM_ACT_CHECK = 31, 	/* 装备鉴定 */
    ARM_ACT_STEP_UP = 32, 	/* 装备升阶 */
    ARM_BASE_ATTR_RESET = 33, 	/* 绿色属性重铸 */
    ARM_BASE_ATTR_RESET_SAVE = 34, 	/* 绿色属性重铸保存 */
    ARM_SKILL_ACTIVE = 35, 	/* 装备技能激活 */
    ARM_LEGEND_UP = 36, 	/* 装备进阶到传奇 */
    ARM_BACK_UNREAL = 37, 	/* 背饰幻化 */
    ARM_SKILL_RECAST_ACTIVE = 38, 	/* 装备技能激活,之前的不要了 */
    ARM_SKILL_RECAST_LOCK = 39, 	/* 装备技能锁 */
    ARM_SKILL_RECAST_RESET = 40, 	/* 装备技能重置 */
};
#define ARM_LEGEND_MAX                           	3 	/* 最多继承3条属性 */
#define ARM_BASE_ATTR_RESET_MAX                  	4 	/*  */
#define ARM_STEP_UP_STUFF                        	10 	/* 装备升阶材料max */
#define MAX_UP_GEM_LIST                          	5 	/* 宝石升级所需材料最大限制 */
#define GEM_ADD_POWER_LIST                       	8 	/* 宝石充能最大材料限制 */
#define MAX_SPAR_SORB_STUFF                      	8 	/* 晶石吸收最大材料列表 */

/* IF_BAO_TYPE*/
enum tagIF_BAO_TYPE 
{
    NO_BAO_XIAN = 0, 	/* 没有买保险 */
    YES_BAO_XIAN = 1, 	/* 买了保险 */
    YES_BAO_XIAN_GAOJI = 2, 	/* 买了高级保险 */
};
#define ARM_WASH_MUST_ITEM_ID                    	5200049 	/* 必定四条的洗练石头 */
#define ARM_RECAST_MUST_ITEM_ID                  	5200039 	/* 必满的重铸石头 */

/* CHG_NAME_TYPE*/
enum tagCHG_NAME_TYPE 
{
    CHG_ROLE_NAME = 0, 
    CHG_CLAN_NAME = 1, 
};
#define AUTH_LEN                                 	576

/* VERSION_UP*/
enum tagVERSION_UP 
{
    VERSION_UPDATA = 0, 
    VERSION_NOT_UPDATA = 1, 
    VERSION_OLD = 2, 
};
#define UPADDR_LEN                               	32

/* WEIXING_SVR_OP*/
enum tagWEIXING_SVR_OP 
{
    WEIXING_SVR_POS = 0, 
    WEIXING_SVR_APPEAL = 1, 
    WEIXING_DESTROY = 2, 	/* 收到这个case，就把尾行的状态消除掉哈 */
};

/* DESIGNATION_CLT_OP*/
enum tagDESIGNATION_CLT_OP 
{
    DESIGNATION_CLT_SET = 0, 
};

/* DESIGNATION_SVR_OP*/
enum tagDESIGNATION_SVR_OP 
{
    DESIGNATION_SVR_SET_RES = 0, 
    DESIGNATION_SVR_ADD = 1, 
    DESIGNATION_SVR_INFO = 2, 
};
#define FAIRY_CAMP_PRE_TIME                      	5
#define DEC_EVOLVE_TIME_ITEMID                   	5251118
#define DEC_EVOLVE_TIME                          	300

/* FAIRY_CLT_OP*/
enum tagFAIRY_CLT_OP 
{
    OP_CAMP_PRE = 0, 	/* 出征吟唱 */
    OP_CAMP = 1, 	/* 出征 */
    OP_EVOLVE = 2, 	/* 炼化 */
    OP_BACK = 3, 	/* 召回 */
    OP_DROP = 4, 	/* 丢弃 */
    OP_EVOLVE_STOP = 5, 	/* 炼化停止 */
    OP_CAMP_BRK = 6, 	/* 出征吟唱打断 */
    OP_INTO_EXP = 7, 	/* 注入经验 */
    OP_STAR_UP = 8, 	/* 精灵品质升级 */
    OP_KEYIN = 9, 	/* 精灵刻印 */
    OP_DEC_EVOLVE_TIME = 10, 	/* 道具减少炼化时间 */
};

/* FAIRY_STAT*/
enum tagFAIRY_STAT 
{
    FAIRY_STAT_CAMP = 1, 
    FAIRY_STAT_BACK = 2, 	/* 召回 */
    FAIRY_STAT_EVOLVE = 4, 	/* 炼化 */
    FAIRY_STAT_DROP = 8, 	/* 丢弃 */
};

/* FAIRY_RES_TYPE*/
enum tagFAIRY_RES_TYPE 
{
    FAIRY_RES_TYPE_PRE_BRK = 0, 
    FAIRY_RES_TYPE_DATA = 1, 
};

/* POLY_FB_OP_TYPE*/
enum tagPOLY_FB_OP_TYPE 
{
    SELF_RES_CHG = 1, 	/* 角色自身资源变化 */
    FB_ROLE_INFO_NOT_SORT = 2, 	/* FB中所有玩家资源   未排序 */
    FB_ROLE_INFO_SORT = 3, 	/* FB中所有玩家资源   排序 */
};
#define MAX_PWORLD_MEMBER                        	1000
#define MAX_BATTLE_PWORLD_MEMBER                 	300
#define TRADE_HANDLE_RATE                        	3 	/* 出售金币银币手续费率 */
#define TRADE_TAX_RATE                           	5 	/* 出售金币银币税率 */

/* STARDATA_TYPE*/
enum tagSTARDATA_TYPE 
{
    STARDATA_NONE = 0, 	/* 不使用 */
    STARDATA_OPEN_STONE_REQ = 1, 	/* 开钻的协议请求 */
    STARDATA_OPEN_STONE_RES = 2, 	/* 开钻的协议返回 */
    STARDATA_SYNC_RES = 4, 	/* 通过vip/钻的数据 */
};

/* MUD_ROLE_ATTR_TYPE*/
enum tagMUD_ROLE_ATTR_TYPE 
{
    MUD_ROLE_OFFLINE_EXP = 0, 	/* 离线补偿经验值 */
};

/* PK_CLT_TYPE*/
enum tagPK_CLT_TYPE 
{
    PK_MODE_CHG = 0, 
};

/* PWORLD_CLT_TYPE*/
enum tagPWORLD_CLT_TYPE 
{
    PWORLD_CLT_EXIT_QUEUE = 0, 
    PWORLD_CLT_ENTER_PWORLD = 1, 
    PWORLD_CLT_EXIT_PWORLD = 2, 
    PWORLD_CLT_JOIN_QUEUE = 3, 
    PWORLD_CLT_ENTER_CLAN_CITY = 4, 
    PWORLD_CLT_MATCH = 5, 	/* 战场手动匹配 */
    PWORLD_CLT_MATCH_CANCEL = 6, 	/* 战场手动取消匹配 */
    PWORLD_CLT_APPLY_INVITE = 7, 	/* 发起公会成员报名跨服战邀请 */
};

/* TEAM_JOIN_TYPE*/
enum tagTEAM_JOIN_TYPE 
{
    TEAM_JOIN_SINGLE = 0, 	/* 个人 */
    TEAM_JOIN_TEAM = 1, 	/* 队伍 */
    TEAM_JOIN_CLAN = 2, 	/* 公会 */
};

/* PWORLD_SVR_TYPE*/
enum tagPWORLD_SVR_TYPE 
{
    PWORLD_SVR_ENTER_QUEUE = 0, 	/* 进入副本排队队列 */
    PWORLD_SVR_INVITE_ENTER_PWORLD = 1, 	/* 排到你了，邀请进入副本 */
    PWORLD_SVR_EXIT_PWORLD_QUEUE = 2, 	/* 退出队列 */
    PWORLD_SVR_MATCH = 3, 	/* 战场手动匹配状态 */
    PWORLD_SVR_APPLY_INVITE = 4, 	/* 公会成员报名跨服战邀请 */
};

/* PWORLD_SVR_MATCH_STATUS*/
enum tagPWORLD_SVR_MATCH_STATUS 
{
    PWORLD_SVR_MATCH_CAN_NOT = 0, 	/* 还不能手动匹配 */
    PWORLD_SVR_MATCH_CAN = 1, 	/* 可以手动匹配了 */
    PWORLD_SVR_MATCH_DOING = 2, 	/* 正在匹配 */
    PWORLD_SVR_MATCH_DONE = 3, 	/* 匹配完成 */
};

/* BATTLE_SVR_TYPE*/
enum tagBATTLE_SVR_TYPE 
{
    BATTLE_SVR_INFO = 0, 
};

/* BATTLE_OP_TYPE*/
enum tagBATTLE_OP_TYPE 
{
    BATTLE_OP_TYPE_UPDATE = 0, 	/* 更新 */
    BATTLE_OP_TYPE_END = 1, 	/* 结束 */
    BATTLE_OP_TYPE_SELF = 2, 	/* 更新自己的信息 */
    BATTLE_OP_TYPE_UPDATE_ENERGY = 3, 	/* 更新能量结晶 */
};

/* SVR_ACC_GIFT_TYPE*/
enum tagSVR_ACC_GIFT_TYPE 
{
    SVR_ACC_GIFT_TYPE_ALL = 1, 	/* 全部奖励列表   登录时给客户端 */
    SVR_ACC_GIFT_TYPE_ONE = 2, 	/* 角色领取礼包后  回复客户端 */
};

/* SVR_PROP_GIFT_TYPE*/
enum tagSVR_PROP_GIFT_TYPE 
{
    SVR_PROP_GIFT_TYPE_ALL = 1, 	/* 全部奖励列表   登录时给客户端 */
    SVR_PROP_GIFT_TYPE_ONE = 2, 	/* 角色领取礼包后  回复客户端 */
    SVR_PROP_GIFT_TYPE_ADD = 3, 	/* 增加礼包对应的充值点数 */
    SVR_PROP_GIFT_TYPE_NOTICE = 4, 	/* 角色领取礼包后  通知所有服务器 */
};

/* SVR_GIFT_GROUP_TYPE*/
enum tagSVR_GIFT_GROUP_TYPE 
{
    SVR_GIFT_GROUP_TYPE_ONE = 1, 	/* 添加一条奖励 */
    SVR_GIFT_GROUP_TYPE_RES = 2, 	/* 领取回复 */
};

/* GIFT_TYPE*/
enum tagGIFT_TYPE 
{
    GIFT_TYPE_LV = 1, 	/* 等级奖励 */
    GIFT_TYPE_ONEDAY = 2, 	/* 每日奖励 */
    GIFT_TYPE_CONTI = 3, 	/* 连续每日在线多久奖励 */
    GIFT_TYPE_ACCGIFT = 4, 	/* 特殊奖励  问卷奖励 */
    GIFT_TYPE_PROPGIFT = 5, 	/* 充值奖励 */
    GIFT_TYPE_CONTI_GROUP = 6, 	/* 连续在线组奖励 */
    GIFT_TYPE_CDKEY = 7, 
    GIFT_TYPE_ACCGIFT_RELOAD = 8, 	/* 重新获取特殊礼包 */
    GIFT_TYPE_NEW_ROLE = 9, 	/* 新角色礼包 */
    GIFT_TYPE_CONT_COVER = 10, 	/* 连续签到礼包 */
};

/* RANGE_CLT_OP*/
enum tagRANGE_CLT_OP 
{
    RANGE_CLT_PAGE = 0, 	/* 请求页信息 */
    RANGE_CLT_WATCH_PLAYER = 1, 	/* 观察角色 */
    RANGE_CLT_WATCH_PET = 2, 	/* 观察宠物 */
    RANGE_CLT_JOIN_CLAN = 3, 	/* 申请加入公会 */
    RANGE_CLT_FIND = 4, 	/* 查询 */
};

/* RANGE_SVR_OP*/
enum tagRANGE_SVR_OP 
{
    RANGE_SVR_TIP = 0, 	/* 排名tip */
    RANGE_SVR_PAGE = 1, 	/* 页信息 */
    RANGE_SVR_FIND = 2, 	/* 查询返回 */
};

/* PWORLD_LIMIT_TYPE*/
enum tagPWORLD_LIMIT_TYPE 
{
    PWORLD_LIMIT_TYPE_ALL = 0, 	/* 全部副本限制信息，登录后发送 */
    PWORLD_LIMIT_TYPE_CHG = 1, 	/* 单个副本限制信息 */
};

/* AUTOTEAM_CLT_OP*/
enum tagAUTOTEAM_CLT_OP 
{
    AUTOTEAM_CLT_OP_APPLY = 0, 	/* 申请自动组队 */
    AUTOTEAM_CLT_OP_UI = 1, 	/* 某些界面操作 */
    AUTOTEAM_CLT_OP_TRANS = 2, 	/* 某些界面操作 */
};

/* AUTOTEAM_UI_OP*/
enum tagAUTOTEAM_UI_OP 
{
    AUTOTEAM_UI_AGREE = 0, 	/* 同意自动组队 */
    AUTOTEAM_UI_REJECT = 1, 	/* 拒绝自动组队 */
    AUTOTEAM_UI_CREATE = 2, 	/* 完成组建 */
    AUTOTEAM_UI_CREATE_AGREE = 3, 	/* 同意完成组建 */
    AUTOTEAM_UI_CREATE_REJECT = 4, 	/* 拒绝完成组建 */
    AUTOTEAM_UI_EXIT_TRANS = 5, 	/* 不传送 */
};

/* AUTOTEAM_SVR_OP*/
enum tagAUTOTEAM_SVR_OP 
{
    AUTOTEAM_SVR_OP_PRE_ADD = 0, 	/* 预创建队伍队员加入 */
    AUTOTEAM_SVR_OP_PRE_DEC = 1, 	/* 预创建队伍队员减少 */
    AUTOTEAM_SVR_OP_PRE_AGREE = 2, 	/* 预创建队伍队员同意 */
    AUTOTEAM_SVR_OP_CANCEL = 3, 	/* 取消自动组队 */
    AUTOTEAM_SVR_OP_SUCC = 4, 	/* 自动组队成功 */
    AUTOTEAM_SVR_OP_CREATE = 5, 	/* 完成组建通知 */
    AUTOTEAM_SVR_OP_CREATE_CANCEL = 6, 	/* 结束完成组建 */
    AUTOTEAM_SVR_OP_INFO_SYNC = 7, 	/* 成功自动组队后,同步的自动组队相关信息 */
    AUTOTEAM_SVR_OP_CLEAN = 8, 	/* 清理掉客户端自动组队的信息 */
};

/* SECONDARY_SKILL_CLT_OP*/
enum tagSECONDARY_SKILL_CLT_OP 
{
    SECONDARY_SKILL_CLT_LEARN_RECIPE = 0, 	/* 学习配方 */
    SECONDARY_SKILL_CLT_RECIPE_PRE = 1, 	/* 生产配方、分解的吟唱 */
    SECONDARY_SKILL_CLT_RECIPE_PRE_BRK = 2, 	/* 打断生产配方、分解的吟唱 */
    SECONDARY_SKILL_CLT_RECIPE_RESOLVE = 3, 	/* 分解 */
    SECONDARY_SKILL_CLT_RECIPE_BLACKSMITHING = 4, 	/* 生产锻造配方 */
    SECONDARY_SKILL_CLT_RECIPE_ALCHEMY = 5, 	/* 生产炼金配方 */
    SECONDARY_SKILL_CLT_RECIPE_ENCHANT = 6, 	/* 生产附魔配方 */
    SECONDARY_SKILL_CLT_RECIPE_ENGINEERING = 7, 	/* 生产工程配方 */
    SECONDARY_SKILL_CLT_DEL_SKILL = 8, 	/* 删除生活技能，公共技能不可删除 */
    SECONDARY_SKILL_CLT_RECIPE_MINING = 9, 	/* 生产采集配方 */
    SECONDARY_SKILL_CLT_RECIPE_HERBALISM = 10, 	/* 生产采药配方 */
};

/* SECONDARY_SKILL_SVR_OP*/
enum tagSECONDARY_SKILL_SVR_OP 
{
    SECONDARY_SKILL_SVR_INFO = 0, 	/* 生活技能信息 */
    SECONDARY_SKILL_SVR_RECIPE_CHG = 1, 	/* 生活技能的配方变化信息，无则增加，有就更新 */
    SECONDARY_SKILL_SVR_DEL_SKILL = 2, 	/* 删除生活技能 */
    SECONDARY_SKILL_SVR_SKILL_CHG = 3, 	/* 生活技能熟练度、等级等信息 */
    SECONDARY_SKILL_SVR_RECIPE_PRE = 4, 	/* 生活技能生产吟唱 */
    SECONDARY_SKILL_SVR_RECIPE_PRE_BRK = 5, 	/* 打断生活技能生产吟唱 */
    SECONDARY_SKILL_SVR_RECIPE_SUCC = 6, 	/* 制造成功,结束吟唱动作，表现成功动作 */
};

/* PREPAREATK_CLT_OP*/
enum tagPREPAREATK_CLT_OP 
{
    PREPAREATK_OP_AKEE = 0, 	/* 角色被怪物的吟唱攻击打了,用于激光怪扫射 */
    NORMALATK_OP_AKEE = 1, 	/* 角色被怪物的瞬发技能打了,用于石头滚动怪 */
};

/* PLAYER_MISC_CLT_TYPE*/
enum tagPLAYER_MISC_CLT_TYPE 
{
    NO_UESD_CLT = 0, 
    PLAYER_CAREER_CHG_CLT = 1, 
    PLAYER_CLEAN_SAFETIME_STATUSID_CLT = 2, 	/* 清楚保护状态id */
    PLAYER_CHOOSE_CLT = 3, 	/* 选择确认框clt */
    PLAYER_OFFLINE_EXP_CLT = 4, 	/* 领取一次性离线补偿clt */
    PLAYER_SELECT_TARGET_CLT = 5, 	/* 选择目标 */
    PLAYER_DROP_CLAN_ITEM = 6, 	/* 玩家下工会道具 */
    PLAYER_CLAN_EVERYDAY_PWORLD_ENTER = 7, 	/* 传送进驱逐入侵副本 */
    PLAYER_CLAN_MACHINE_PWORLD_ENTER = 8, 	/* 传送进守护枢纽副本 */
    PLAYER_SHAM_DEAD_BRK = 9, 	/* 客户端请求取消假死 */
    PLAYER_TAKE_COW_AWARD = 10, 	/* 领取牛仔决赛排名奖励 */
    PLAYER_EXP_BUFF_AWARD = 11, 	/* 领取经验BUFF */
    PLAYER_BAOXIANG_OPEN = 12, 	/* 开宝箱 */
    PLAYER_WORLD_BOSS_INFO_REQ = 13, 	/* 世界boss信息请求 */
    PLAYER_CHARM_REQ = 14, 	/* 玩家砸鸡蛋请求 */
    PLAYER_REG_REQ = 15, 	/* 玩家登记请求 */
    PLAYER_BUCHANG_REQ = 16, 	/* 玩家领取补偿 */
    PLAYER_MT_GIFT_AWARD = 17, 	/* 玩家领取MT礼包 */
    PLAYER_YANGHAIBANG_ADD = 18, 	/* 养海蚌喂养 */
    PLAYER_YANGHAIBANG_AWARD = 19, 	/* 养海蚌领奖 */
    PLAYER_TAKE_HANG_HAI_AWARD = 20, 	/* 领取航海大亨排名奖励 */
    PLAYER_TAKE_CLAN_WAR_AWARD = 21, 	/* 领取公会跨服战个人奖励 */
    PLAYER_RONGYAN_BOSS_SELECT = 22, 	/* 融焰巨兽真假boss选择 */
    PLAYER_RONGYAN_BEGIN_SELECT = 23, 	/* 融焰巨兽刚开始的选择的倍数索引 */
    PLAYER_PAOSHANG_UI_SELECT = 24, 	/* 用户操作跑商商店界面 */
    PLAYER_PRECREATE_GIFT_VERIFY = 25, 	/* 预创建礼包短信认证 */
    PLAYER_DIANFENG_GROUP_INFO_C = 26, 	/* 末世巅峰客户端需要服务器发什么组信息 */
    PLAYER_DIANFENG_JING_CAI = 27, 	/* 末世巅峰竞猜 */
    PLAYER_DIANFENG_BAOMING_CLT = 28, 	/* 末世巅峰报名 */
    PLAYER_DIANFENG_TRANSMIT_CLT = 29, 	/* 末世巅峰传送 */
    PLAYER_DIANFENG_IF_GUESS_CLT = 30, 	/* 末世巅峰是否已经竞猜 */
    PLAYER_MATCH_CHG_CAREER = 31, 	/* 比赛服转职 */
    PLAYER_ZJ_RONGYAN_CALL = 32, 	/* 终极熔岩巨兽召唤 */
    PLAYER_ZJ_RONGYAN_BOSS_SELECT = 33, 	/* 终极融焰巨兽真假boss选择 */
    PLAYER_SCULPT_CHG_CLT = 34, 	/* 造型变更 */
    PLAYER_NEW_PEOPLE_CLT = 35, 	/* 请求新人栏信息 */
    PLAYER_SHORTCUT_SKILL_CLEAR = 36, 	/* 通知服务器去除清除快捷栏技能标识 */
};
#define MAX_WORLD_BOSS_NUM                       	16

/* PAOSHANG_CLT_OP*/
enum tagPAOSHANG_CLT_OP 
{
    PAOSHANG_BUY = 0, 	/* 用户购买道具 */
    PAOSHANG_SELL = 1, 	/* 用户卖出道具 */
    PAOSHANG_ALL_SELL = 2, 	/* 用户全部卖出道具 */
};

/* PRECREATE_GIFT_VERIFY_OP*/
enum tagPRECREATE_GIFT_VERIFY_OP 
{
    PRECREATE_GIFT_VERIFY_OP_GET_SMS = 0, 	/* 获取认证短信 */
    PRECREATE_GIFT_VERIFY_OP_VERIFY = 1, 	/* 认证验证码 */
};

/* PLAYER_MISC_SVR_TYPE*/
enum tagPLAYER_MISC_SVR_TYPE 
{
    NO_UESD_SVR = 0, 
    PLAYER_CAREER_CHG_SVR = 1, 
    PLAYER_CHOOSE_SVR = 2, 	/* 选择确认框svr */
    PLAYER_MOVIE_START_SVR = 3, 	/* 通知客户端放一段视频 */
    PLAYER_OPEN_ITEM_MAP = 4, 	/* 打开物品地图,类似藏宝图s */
    PLAYER_EXP_BUFF_INFO = 5, 	/* 经验BUFF信息 */
    PLAYER_WORLD_MAX_LEVEL = 6, 	/* 最高等级 */
    PLAYER_BAOXIANG_AWARD_INFO = 7, 	/* 开宝箱获得的物品 */
    PLAYER_BOSS_INFO_RES = 8, 	/* boss信息回复 */
    WEATHER_CHG_NOTIFY = 9, 	/* 天气通知 */
    PLAYER_CHARM_RES = 10, 	/* 玩家砸鸡蛋回复 */
    PLAYER_REG_RES = 11, 	/* 玩家登记回复 */
    PLAYER_SVR_REG_INFO = 12, 	/* 服务器登记信息通知玩家 */
    PLAYER_SVR_BUY_HETONG = 13, 	/* 通知客户端购买换车合同 */
    PLAYER_SVR_NEW_GIFT_INFO = 14, 	/* 角色新手奖励信息 */
    PLAYER_SVR_CONT_COVER_INFO = 15, 	/* 角色连续签到信息 */
    PLAYER_BUCHANG_RES = 16, 	/* 玩家领取补偿回复 */
    PLAYER_MT_GIFT_INFO = 17, 	/* MT版礼包奖励信息 */
    PLAYER_YANGHAIBANG_UI_INFO = 18, 	/* 养海蚌UI信息 */
    PLAYER_GOLD_RATE = 19, 	/* 金币汇率 */
    PLAYER_TOTEM_ACTIVE = 20, 	/* 图腾激活 */
    PLAYER_PINJIU_SCREEN_VAGUE = 21, 	/* 拼酒活动，玩家输了，通知客户端进行屏幕模糊 */
    PLAYER_RONGYAN_MOVE_UI = 22, 	/* 融焰巨兽可移动的信息框 */
    PLAYER_RONGYAN_BOSS_TRUE_FALSE_UI = 23, 	/* 融焰巨兽真假对话框 */
    ZHENGYI_LIMIT_CHG = 24, 	/* 正义点限制变化 */
    CHUAN_CHENG_CHG = 25, 	/* 传承点变化 */
    PLAYER_OPEN_PAOSHANG_UI_SVR = 26, 	/* 打开跑商店铺ui */
    PLAYER_DAQIAGNDAO_FENSHU = 27, 	/* 打强盗分数显示 */
    PLAYER_WEEK_CHARM = 28, 	/* 周魅力通知 */
    PLAYER_DIANFENG_FIRST_INFO = 29, 	/* 末世巅峰上届各组冠军信息或雕像信息 */
    PLAYER_DIANFENG_GROUP_UI_INFO = 30, 	/* 末世巅峰职业组信息界面 */
    PLAYER_DIANFENG_PIPEI_SUCCEED_UI = 31, 	/* 巅峰之战匹配成功后含有倒计时的二级提示框 */
    PLAYER_DIANFENG_WIN_LOSS_UI = 32, 	/* 末世巅峰胜负标记情况 */
    PLAYER_DIANFENG_BAOMING_UI_SVR = 33, 	/* 末世巅峰报名UI */
    PLAYER_DIANFENG_TRANSMIT_UI_SVR = 34, 	/* 末世巅峰传送UI */
    PLAYER_DIANFENG_GUESS_RES_SVR = 35, 	/* 末世巅峰竞猜结果 */
    PLAYER_DIANFENG_GUESS_MINGDAN = 36, 	/* 末世巅峰竞猜名单 */
    CONTINUE_KILL_TANK = 37, 	/* 坦克大战连杀通知 */
    PLAYER_CLAN_PET_NOTIFY = 38, 	/* 角色公会宠物信息通知 */
    PLAYER_BEACH_LOW_EXP_SVR = 39, 	/* 询问是否获取海滩低经验 */
    PLAYER_TEAM_MZT_LAYER_NOTIFY = 40, 	/* 谜之塔队伍层数信息通知 */
    PLAYER_UNREAL_EXP_LAYER_NOTIFY = 41, 	/* 幻境经验层数通知 */
    PLAYER_ZJ_RONGYAN_SVR = 42, 	/* 终极熔岩巨兽信息窗口 */
    PLAYER_ZJ_RONGYAN_TRUE_FALSE_UI = 43, 	/* 终极熔岩巨兽真假boss选择窗口 */
    PLAYER_SCULPT_CHG_SVR = 44, 	/* 造型变更通知 */
    PLAYER_WORD_PWD_UI = 45, 	/* 银币副本文字密码提示窗口 */
    PLAYER_ENTER_SPAN_MAP_NOTIFY = 46, 	/* 进入跨服野外信息通知 */
    PLAYER_NEW_PEOPLE_INFO = 47, 	/* 新人栏信息 */
};
#define WEATHER_TYPE_DAY                         	1 	/* 白天 */
#define WEATHER_TYPE_DUSK                        	2 	/* 黄昏 */
#define WEATHER_TYPE_NIGHT                       	3 	/* 夜晚 */
#define WEATHER_TYPE_RAIN                        	4 	/* 雨天 */

/* DIANFENG_BAOMING*/
enum tagDIANFENG_BAOMING 
{
    BAOMING_XIANSHI = 0, 	/* 报名时间内未报名玩家显示报名参赛按键！ */
    BAOMING_YI_BAO = 1, 	/* 报名时间内已报名 */
    BAOMING_NO_IN_TIME = 2, 	/* 未在报名时间内 */
};

/* DIANFENG_FIRST_TYPE*/
enum tagDIANFENG_FIRST_TYPE 
{
    FIRST_INFO = 0, 	/* 组冠军信息 */
    FIRST_EFFIGY = 1, 	/* 雕像信息 */
};
#define MAX_NEW_PEOPLE_NUM                       	50 	/* 新人栏中的最多的新人信息数量 */

/* RIDE_MACHINE_CLT_OP*/
enum tagRIDE_MACHINE_CLT_OP 
{
    RIDE_MACHINE_CLT_RIDE = 0, 	/* 骑机械 */
    RIDE_MACHINE_CLT_LEAVE = 1, 	/* 下车 */
    RIDE_MACHINE_CLT_BACK = 2, 	/* 召回机械 */
    RIDE_MACHINE_CLT_KICK = 3, 	/* 踢人 */
    RIDE_MACHINE_CLT_PASSENGER_UI = 4, 	/* 请求乘坐列表面板快照 */
    RIDE_MACHINE_CLT_LEAVE_PRE = 5, 	/* 下车吟唱 */
    RIDE_MACHINE_CLT_LEAVE_PRE_BRK = 6, 	/* 下车吟唱 */
    RIDE_MACHINE_CLT_INVITE = 7, 	/* 邀请骑机械 */
    RIDE_MACHINE_CLT_INVITE_ACCPET = 8, 	/* 接受邀请骑机械 */
    RIDE_MACHINE_CLT_INVITE_REFUSE = 9, 	/* 拒绝骑机械 */
};
#define MACHINE_LEAVE_PRE_TIME                   	3 	/* 下车吟唱时间 */
#define MACHINE_RIDE_INVITE_DIST                 	800 	/* 骑乘机械邀请距离 */

/* MACHINE_REFUSE_TYPE*/
enum tagMACHINE_REFUSE_TYPE 
{
    MACHINE_REFUSE_CANCEL = 0, 
    MACHINE_REFUSE_IGNORE = 1, 
};

/* MACHINE_SVR_OP*/
enum tagMACHINE_SVR_OP 
{
    MACHINE_SVR_INVITE_INFO = 0, 	/* 邀请骑乘 */
};

/* MAP_CLT_OP*/
enum tagMAP_CLT_OP 
{
    MAP_CLT_CHANGE_LINE = 1, 	/* 换线 */
    MAP_CLT_UPDATE_LINE_INFO = 2, 	/* 更新线路信息 */
};

/* MAP_SVR_OP*/
enum tagMAP_SVR_OP 
{
    MAP_SVR_LINE_INFO = 1, 	/* 线路信息 */
    MAP_SVR_ORE_INFO = 2, 	/* 地图矿石信息 */
    MAP_SVR_BIG_ORE_INFO = 3, 	/* 地图富矿信息 */
};

/* MAP_BUSY_TYPE*/
enum tagMAP_BUSY_TYPE 
{
    MAP_BUSY_TYPE_NORMAL = 0, 	/* 流畅 */
    MAP_BUSY_TYPE_BUSY = 1, 	/* 拥挤 */
    MAP_BUSY_TYPE_FULL = 2, 	/* 爆满 */
};
#define MAX_REPORT_DATA_REQ                      	256
#define MAX_REPORT_DATA_RES                      	60000

/* BATTLE_LIMIT_TYPE*/
enum tagBATTLE_LIMIT_TYPE 
{
    BATTLE_LIMIT_TYPE_ALL = 0, 	/* 战场限制信息 */
    BATTLE_LIMIT_TYPE_CHG = 1, 	/* 变化信息 */
};

/* ROLL_SVR_TYPE*/
enum tagROLL_SVR_TYPE 
{
    ROLL_SVR_UI = 0, 	/* Roll点面板 */
};

/* ROLL_CLT_TYPE*/
enum tagROLL_CLT_TYPE 
{
    ROLL_CLT_NEED = 0, 	/* 需求 */
    ROLL_CLT_QUIT = 1, 	/* 关闭或放弃 */
};
#define MAX_FIGHT_OBJ_NUM                        	2

/* VAL_CLT_TYPE*/
enum tagVAL_CLT_TYPE 
{
    VAL_CLT_WATCH = 0, 	/* 获取数值信息 */
    VAL_CLT_FIGHT = 1, 	/* 模拟战斗 */
};

/* VAL_SVR_TYPE*/
enum tagVAL_SVR_TYPE 
{
    VAL_SVR_WATCH_INFO = 0, 	/* 目标信息 */
    VAL_SVR_FIGHT_INFO = 1, 	/* 模拟战斗结果 */
};

/* DIFF_PWORLD_CLT_TYPE*/
enum tagDIFF_PWORLD_CLT_TYPE 
{
    DIFF_PWORLD_CLT_ENTER = 0, 	/* 进入选择的难度副本 */
    DIFF_PWORLD_CLT_SELECT_CARD = 1, 	/* 选择卡片 */
    DIFF_PWORLD_CLT_SELECT_VIP_CARD = 2, 	/* 选择VIP卡片 */
};

/* DIFF_PWORLD_SVR_TYPE*/
enum tagDIFF_PWORLD_SVR_TYPE 
{
    DIFF_PWORLD_SVR_UI = 0, 	/* 进入面板 */
    DIFF_PWORLD_SVR_TIPS = 1, 	/* 进副本不符合队员提示 */
    DIFF_PWORLD_SVR_AWARD_UI = 2, 	/* 评价奖励UI */
    DIFF_PWORLD_SVR_UPDATE_CARD = 3, 	/* 翻牌 */
    DIFF_PWORLD_SVR_CARD_MSG = 4, 	/* 翻牌时候背包空间不足的提示 */
    DIFF_PWORLD_SVR_SELECT = 5, 	/* 翻牌也回复一个信息 */
    DIFF_PWORLD_SVR_UPDATE_VIP_CARD = 6, 	/* VIP翻牌 */
    DIFF_PWORLD_SVR_SELECT_VIP = 7, 	/* VIP翻牌也回复一个信息 */
};
#define MAX_DIFF_PWORLD_TIP_LEN                  	128 	/* 副本队员不符合条件提示信息长度 */

/* CITY_SVR_TYPE*/
enum tagCITY_SVR_TYPE 
{
    CITY_SVR_MAP_INFO = 0, 	/* 建筑信息 */
    CITY_SVR_BUILD_UI_INFO = 1, 	/* 建造界面 */
    CITY_SVR_BUILD_WARNING = 2, 	/* 攻击警告 */
    CITY_SVR_BUILD_CAPTURE = 3, 	/* 占领倒计时 */
    CITY_SVR_CORE_INFO = 4, 	/* 城池所有者信息 */
    CITY_SVR_FIGHT = 5, 	/* 攻城开始，播放一小段音效 */
    CITY_SVR_MAP_MEM_POS = 6, 	/* 地图显示人员位置信息 */
    CITY_SVR_FIGHT_RANGE = 7, 	/* 攻城战排行榜 */
    CITY_SVR_KILL_INFO = 8, 	/* 攻城战杀人信息 */
};

/* CITY_CLT_TYPE*/
enum tagCITY_CLT_TYPE 
{
    CITY_CLT_BUILD_CREATE = 0, 	/* 建造 */
    CITY_CLT_BUILD_LEVELUP = 1, 	/* 升级 */
    CITY_CLT_BUILD_REPAIR = 2, 	/* 修理 */
    CITY_CLT_BUILD_ADD_ENERGY = 3, 	/* 充能 */
    CITY_CLT_BUILD_DEL = 4, 	/* 销毁 */
    CITY_CLT_MAP_MEM_POS = 5, 	/* 地图显示己方公会成员位置 */
};

/* ACTIVE_GAME_SVR_TYPE*/
enum tagACTIVE_GAME_SVR_TYPE 
{
    ACTIVE_GAME_SVR_TYPE_UI_INFO = 0, 	/* 活动UI信息 */
    ACTIVE_GAME_SVR_TYPE_UI_CLOSE = 1, 	/* 关闭UI */
};

/* ACTIVE_GAME_UI_TYPE*/
enum tagACTIVE_GAME_UI_TYPE 
{
    ACTIVE_UI_TYPE_CLAN_PWORLD = 0, 	/* 公会副本打积分活动 */
    ACTIVE_UI_TYPE_WORLD_CITY_OPEN = 1, 	/* 攻城战激活 */
    ACTIVE_UI_TYPE_CLAN_TOUCH = 2, 	/* 公会摸宝活动 */
    ACTIVE_UI_TYPE_CLAN_SPY = 3, 	/* 公会刺探活动 */
    ACTIVE_UI_TYPE_CLAN_MACHINE_PWORLD = 4, 	/* 公会枢纽副本活动UI */
    ACTIVE_UI_TYPE_LUCKY = 5, 	/* 天降洪福活动UI */
    ACTIVE_UI_TYPE_GUCHENG = 6, 	/* 勇闯古城活动UI */
};

/* ACTIVE_GAME_CLT_TYPE*/
enum tagACTIVE_GAME_CLT_TYPE 
{
    ACTIVE_GAME_CLT_TYPE_AWARD = 0, 	/* 领奖励 */
};

/* SJ_TASK_CLT_TYPE*/
enum tagSJ_TASK_CLT_TYPE 
{
    SJ_TASK_CLT_TYPE_OPEN = 0, 	/* 打开面板 */
    SJ_TASK_CLT_TYPE_REFRESH_TASK = 1, 	/* 刷新任务 */
    SJ_TASK_CLT_TYPE_REFRESH_STAR = 2, 	/* 刷新星级 */
    SJ_TASK_CLT_TYPE_ACCPET = 3, 	/* 接受任务 */
};

/* SJ_TASK_SVR_TYPE*/
enum tagSJ_TASK_SVR_TYPE 
{
    SJ_TASK_SVR_TYPE_UI_INFO = 0, 	/* 打开面板 */
    SJ_TASK_SVR_TYPE_CLOSE = 1, 	/* 强制关闭面板 */
    SJ_TASK_SVR_ITEM_CHG = 2, 	/* 碎片数量变化 */
};
#define AAS_ID_CARD_LEN                          	19 	/* 身份证字符串长度 */

/* AAS_SVR_TYPE*/
enum tagAAS_SVR_TYPE 
{
    AAS_SVR_UI = 0, 	/* 补填身份证UI */
    AAS_SVR_SUCC = 1, 	/* 身份证补填成功 */
};

/* AAS_CLT_TYPE*/
enum tagAAS_CLT_TYPE 
{
    AAS_CLT_ADD_ID_INFO = 0, 	/* 补填身份证 */
};

/* GAY_CLT_TYPE*/
enum tagGAY_CLT_TYPE 
{
    GAY_CLT_ACCEPT = 0, 	/* 确认搞基 */
    GAY_CLT_REJECT = 1, 	/* 拒绝搞基 */
};

/* GAY_SVR_TYPE*/
enum tagGAY_SVR_TYPE 
{
    GAY_SVR_INVITE = 0, 	/* 申请搞基 */
};

/* POLY_SVR_TYPE*/
enum tagPOLY_SVR_TYPE 
{
    POLY_SVR_TYPE_INFO = 0, 
    POLY_SVR_TYPE_BOSS_POSITION = 1, 
};

/* POLY_PWORLD_OP_TYPE*/
enum tagPOLY_PWORLD_OP_TYPE 
{
    POLY_OP_DOUBLE_MONSTER = 0, 	/* 双阵营杀怪 */
    POLY_OP_MACHINE_WAR = 1, 	/* 机械战 */
    POLY_OP_TANK = 2, 	/* 坦克大战 */
};

/* MACHINE_WAR_CAMP_TYPE*/
enum tagMACHINE_WAR_CAMP_TYPE 
{
    MACHINE_WAR_CAMP_HUMAN = 1, 	/* 人类阵营编号 */
    MACHINE_WAR_CAMP_TITAN = 2, 	/* 巨人阵营编号 */
    MACHINE_WAR_CAMP_MONSTER = 3, 	/* 怪兽阵营编号 */
};
#define MAX_SPARTA_ROLE                          	6
#define SPARTA_WIN_KILL_NUM                      	10
#define SPARTA_PWORLD_ID                         	603
#define SPARTA_MAP_ID                            	60300

/* SPARTA_SVR_TYPE*/
enum tagSPARTA_SVR_TYPE 
{
    SPARTA_SVR_READY_UI = 0, 
    SPARTA_SVR_APPLY_INFO = 1, 
    SPARTA_SVR_EXIT_QUEUE = 2, 
    SPARTA_SVR_FIGHT_INFO = 3, 
    SPARTA_SVR_ROLE_SPARTA_INFO = 4, 
};

/* SPARTA_CLT_TYPE*/
enum tagSPARTA_CLT_TYPE 
{
    SPARTA_CLT_READY = 0, 
    SPARTA_CLT_APPLY = 1, 
    SPARTA_CLT_EXIT_APPLY = 2, 
};
#define MAX_SCHOOL_VAL                           	1000000
#define MAX_DAY_SCHOOL_VAL                       	500

/* SCHOOL_CLT_TYPE*/
enum tagSCHOOL_CLT_TYPE 
{
    SCHOOL_CLT_INVITE = 0, 
    SCHOOL_CLT_ACCEPT = 1, 
    SCHOOL_CLT_MEM_INFO_REQ = 2, 
    SCHOOL_CLT_REJECT = 3, 
    SCHOOL_CLT_DEL = 4, 
    SCHOOL_CLT_XINDE = 5, 
    SCHOOL_CLT_AWARD_XINDE = 6, 
};

/* SCHOOL_SVR_TYPE*/
enum tagSCHOOL_SVR_TYPE 
{
    SCHOOL_SVR_ALL_INFO = 0, 
    SCHOOL_SVR_INVITE_UI = 1, 
    SCHOOL_SVR_JOIN_UI = 2, 
    SCHOOL_SVR_MEM_INFO = 3, 
    SCHOOL_SVR_ONLINE_UPDATE = 4, 
    SCHOOL_SVR_ADD_STUDENT_ACTION = 5, 
};

/* SCHOOL_MEM_TYPE*/
enum tagSCHOOL_MEM_TYPE 
{
    SCHOOL_MEM_TYPE_TEACHER = 0, 
    SCHOOL_MEM_TYPE_STUDENT = 1, 
};

/* SECOND_PWD_CMD*/
enum tagSECOND_PWD_CMD 
{
    SECOND_PWD_SET = 1, 	/* 二级密码设定 */
    SECOND_PWD_INPUT = 2, 	/* 二级密码输入 */
};

/* SECOND_PWD_CMD_SVR*/
enum tagSECOND_PWD_CMD_SVR 
{
    SECOND_PWD_SET_SVR = 1, 	/* 二级密码设定对话框弹出 */
    SECOND_PWD_INPUT_SVR = 2, 	/* 二级密码输入对话框弹出 */
    SECOND_PWD_SET_SUCC_SVR = 3, 	/* 二级密码设置对话框成功后弹出 */
};

/* SecondPwdResultGrp*/
enum tagSecondPwdResultGrp 
{
    SECOND_PWD_SUCC = 0, 	/* succ */
    SECOND_PWD_NO_NULL = 1, 	/* 密码不能为空 */
    SECOND_PWD_SET_ERR = 2, 	/* 设置失败 */
    SECOND_PWD_ERR = 3, 	/* 密码错误 */
};

/* BACK_CLT_TYPE*/
enum tagBACK_CLT_TYPE 
{
    BACK_CLT_LEVELUP = 0, 
    BACK_CLT_CHG_TYPE = 1, 
};

/* BACK_SVR_TYPE*/
enum tagBACK_SVR_TYPE 
{
    BACK_SVR_LEVELUP_SUCC = 0, 
    BACK_SVR_CHGTYPE_SUCC = 1, 
};

/* CARDBOX_CLT_TYPE*/
enum tagCARDBOX_CLT_TYPE 
{
    CARDBOX_CLT_TYPE_OPEN = 0, 
    CARDBOX_CLT_TYPE_SELECT = 1, 
    CARDBOX_CLT_TYPE_NEXT = 2, 
    CARDBOX_CLT_TYPE_CLOSE = 3, 
    CARDBOX_CLT_TYPE_WASH = 4, 
};

/* CARDBOX_SVR_TYPE*/
enum tagCARDBOX_SVR_TYPE 
{
    CARDBOX_SVR_TYPE_BOX_INFO = 0, 
    CARDBOX_SVR_TYPE_SELECT_INFO = 1, 
    CARDBOX_SVR_TYPE_CLOSE = 2, 
};
#define MAX_CARD_BOX_CARD_NUM                    	16
#define PDU_MAGIC                                	85
#define PDU_VERSION                              	1
#define PDU_MAX_ENCRYPTSKEY_LEN                  	128
#define PDU_MAX_ENCRYPTIDENT_LEN                 	64
#define PDU_MAX_ENCRYPTSYN_LEN                   	128
#define PDU_MAX_ENCRYPTSYNACK_LEN                	128

/* PDU_CMD*/
enum tagPDU_CMD 
{
    PDU_CMD_NONE = 0, 
    PDU_CMD_CHGSKEY = 1, 
    PDU_CMD_QUEINFO = 2, 
    PDU_CMD_AUTH = 3, 
    PDU_CMD_IDENT = 4, 
    PDU_CMD_PLAIN = 5, 
    PDU_CMD_RELAY = 6, 
    PDU_CMD_STOP = 7, 
    PDU_CMD_SYN = 8, 
    PDU_CMD_SYNACK = 9, 
};

/* PDU_STOP_REASON*/
enum tagPDU_STOP_REASON 
{
    PDU_STOP_NONE = 0, 
    PDU_STOP_CONNECTION_REFUSED = 1, 	/* 连接过多,导致被拒绝 */
    PDU_STOP_CONNECTION_SAMEACC_QUE = 2, 	/* same account queue */
};
#define MAX_WEB_SIGN_LEN                         	64 	/* 最大网站签名信息长度 */
#define MAX_WEB_SIGN_HEX_LEN                     	2048 	/* 最大网站签名信息HEX格式的长度|必须是两个WebSignInfo结构体长度以上 */

/* AUTH_INFO_TYPE*/
enum tagAUTH_INFO_TYPE 
{
    AUTH_INFO_TYPE_NORMAL = 0, 	/* 正常的信息 */
    AUTH_INFO_TYPE_WEB_SIGN = 1, 	/* 获取web签名 */
    AUTH_INFO_TYPE_GET_SIGN = 2, 	/* web签名换取正式签名 */
};


#ifdef __cplusplus
extern "C" {
#endif

/*   Define c types.   */


#ifndef TDR_CUSTOM_C_TYPES
#define TDR_CUSTOM_C_TYPES
#if defined(WIN32) &&  _MSC_VER < 1300
typedef __int64 tdr_longlong;
typedef unsigned __int64 tdr_ulonglong;
#else
typedef long long tdr_longlong;
typedef unsigned long long tdr_ulonglong;
#endif  /*defined(WIN32) &&  _MSC_VER < 1300*/
typedef unsigned short tdr_wchar_t;  /**<Wchar基本数据类型*/
typedef unsigned int tdr_date_t;	/**<data基本数据类型*/
typedef unsigned int tdr_time_t;	/**<time基本数据类型*/
typedef tdr_ulonglong tdr_datetime_t;  /**<datetime基本数据类型*/
typedef unsigned long int tdr_ip_t;  /**<IPv4数据类型*/
#endif /*TDR_CUSTOM_C_TYPES*/



/*   Structs/unions prototype.   */

struct tagHomePut;
typedef struct tagHomePut                          	HOMEPUT;
typedef struct tagHomePut                          	*LPHOMEPUT;

struct tagHomeNew;
typedef struct tagHomeNew                          	HOMENEW;
typedef struct tagHomeNew                          	*LPHOMENEW;

struct tagHomeZhongzhi;
typedef struct tagHomeZhongzhi                     	HOMEZHONGZHI;
typedef struct tagHomeZhongzhi                     	*LPHOMEZHONGZHI;

struct tagHomePet;
typedef struct tagHomePet                          	HOMEPET;
typedef struct tagHomePet                          	*LPHOMEPET;

struct tagHomePage;
typedef struct tagHomePage                         	HOMEPAGE;
typedef struct tagHomePage                         	*LPHOMEPAGE;

struct tagHomeSetName;
typedef struct tagHomeSetName                      	HOMESETNAME;
typedef struct tagHomeSetName                      	*LPHOMESETNAME;

struct tagHomeSetStat;
typedef struct tagHomeSetStat                      	HOMESETSTAT;
typedef struct tagHomeSetStat                      	*LPHOMESETSTAT;

struct tagHomeEnter;
typedef struct tagHomeEnter                        	HOMEENTER;
typedef struct tagHomeEnter                        	*LPHOMEENTER;

struct tagHomeMsg;
typedef struct tagHomeMsg                          	HOMEMSG;
typedef struct tagHomeMsg                          	*LPHOMEMSG;

struct tagHomeDestory;
typedef struct tagHomeDestory                      	HOMEDESTORY;
typedef struct tagHomeDestory                      	*LPHOMEDESTORY;

struct tagHomeSale;
typedef struct tagHomeSale                         	HOMESALE;
typedef struct tagHomeSale                         	*LPHOMESALE;

struct tagHomeBuy;
typedef struct tagHomeBuy                          	HOMEBUY;
typedef struct tagHomeBuy                          	*LPHOMEBUY;

struct tagJiaJuAdjustInfo;
typedef struct tagJiaJuAdjustInfo                  	JIAJUADJUSTINFO;
typedef struct tagJiaJuAdjustInfo                  	*LPJIAJUADJUSTINFO;

struct tagHomeJiaJuAdjust;
typedef struct tagHomeJiaJuAdjust                  	HOMEJIAJUADJUST;
typedef struct tagHomeJiaJuAdjust                  	*LPHOMEJIAJUADJUST;

union tagCltHome;
typedef union  tagCltHome                          	CLTHOME;
typedef union  tagCltHome                          	*LPCLTHOME;

struct tagCSHomeClt;
typedef struct tagCSHomeClt                        	CSHOMECLT;
typedef struct tagCSHomeClt                        	*LPCSHOMECLT;

struct tagHomeSvrPage;
typedef struct tagHomeSvrPage                      	HOMESVRPAGE;
typedef struct tagHomeSvrPage                      	*LPHOMESVRPAGE;

struct tagHomeSvrSingle;
typedef struct tagHomeSvrSingle                    	HOMESVRSINGLE;
typedef struct tagHomeSvrSingle                    	*LPHOMESVRSINGLE;

struct tagHomeSvrFarm;
typedef struct tagHomeSvrFarm                      	HOMESVRFARM;
typedef struct tagHomeSvrFarm                      	*LPHOMESVRFARM;

struct tagHomeSvrHouse;
typedef struct tagHomeSvrHouse                     	HOMESVRHOUSE;
typedef struct tagHomeSvrHouse                     	*LPHOMESVRHOUSE;

struct tagHomeSvrDel;
typedef struct tagHomeSvrDel                       	HOMESVRDEL;
typedef struct tagHomeSvrDel                       	*LPHOMESVRDEL;

struct tagHomeSvrPet;
typedef struct tagHomeSvrPet                       	HOMESVRPET;
typedef struct tagHomeSvrPet                       	*LPHOMESVRPET;

struct tagHomeSvrNameChg;
typedef struct tagHomeSvrNameChg                   	HOMESVRNAMECHG;
typedef struct tagHomeSvrNameChg                   	*LPHOMESVRNAMECHG;

struct tagHomeSvrStatChg;
typedef struct tagHomeSvrStatChg                   	HOMESVRSTATCHG;
typedef struct tagHomeSvrStatChg                   	*LPHOMESVRSTATCHG;

struct tagHomeSvrLiuyanChg;
typedef struct tagHomeSvrLiuyanChg                 	HOMESVRLIUYANCHG;
typedef struct tagHomeSvrLiuyanChg                 	*LPHOMESVRLIUYANCHG;

struct tagHomeSvrSaleChg;
typedef struct tagHomeSvrSaleChg                   	HOMESVRSALECHG;
typedef struct tagHomeSvrSaleChg                   	*LPHOMESVRSALECHG;

struct tagHomeSvrBuy;
typedef struct tagHomeSvrBuy                       	HOMESVRBUY;
typedef struct tagHomeSvrBuy                       	*LPHOMESVRBUY;

union tagSvrHome;
typedef union  tagSvrHome                          	SVRHOME;
typedef union  tagSvrHome                          	*LPSVRHOME;

struct tagCSHomeSvr;
typedef struct tagCSHomeSvr                        	CSHOMESVR;
typedef struct tagCSHomeSvr                        	*LPCSHOMESVR;

struct tagCSEnterApplyQueue;
typedef struct tagCSEnterApplyQueue                	CSENTERAPPLYQUEUE;
typedef struct tagCSEnterApplyQueue                	*LPCSENTERAPPLYQUEUE;

struct tagCSInviteEnter;
typedef struct tagCSInviteEnter                    	CSINVITEENTER;
typedef struct tagCSInviteEnter                    	*LPCSINVITEENTER;

struct tagCSExitShiKongQueue;
typedef struct tagCSExitShiKongQueue               	CSEXITSHIKONGQUEUE;
typedef struct tagCSExitShiKongQueue               	*LPCSEXITSHIKONGQUEUE;

union tagSvrShiKong;
typedef union  tagSvrShiKong                       	SVRSHIKONG;
typedef union  tagSvrShiKong                       	*LPSVRSHIKONG;

struct tagCSShiKongSvr;
typedef struct tagCSShiKongSvr                     	CSSHIKONGSVR;
typedef struct tagCSShiKongSvr                     	*LPCSSHIKONGSVR;

struct tagCSExitApplyQueue;
typedef struct tagCSExitApplyQueue                 	CSEXITAPPLYQUEUE;
typedef struct tagCSExitApplyQueue                 	*LPCSEXITAPPLYQUEUE;

struct tagCSEnterShikongPworld;
typedef struct tagCSEnterShikongPworld             	CSENTERSHIKONGPWORLD;
typedef struct tagCSEnterShikongPworld             	*LPCSENTERSHIKONGPWORLD;

union tagCltShiKong;
typedef union  tagCltShiKong                       	CLTSHIKONG;
typedef union  tagCltShiKong                       	*LPCLTSHIKONG;

struct tagCSShiKongClt;
typedef struct tagCSShiKongClt                     	CSSHIKONGCLT;
typedef struct tagCSShiKongClt                     	*LPCSSHIKONGCLT;

struct tagSpanStrongSale;
typedef struct tagSpanStrongSale                   	SPANSTRONGSALE;
typedef struct tagSpanStrongSale                   	*LPSPANSTRONGSALE;

struct tagSpanStrongClanAward;
typedef struct tagSpanStrongClanAward              	SPANSTRONGCLANAWARD;
typedef struct tagSpanStrongClanAward              	*LPSPANSTRONGCLANAWARD;

struct tagSpanStrongGroup;
typedef struct tagSpanStrongGroup                  	SPANSTRONGGROUP;
typedef struct tagSpanStrongGroup                  	*LPSPANSTRONGGROUP;

struct tagSpanStrongEnter;
typedef struct tagSpanStrongEnter                  	SPANSTRONGENTER;
typedef struct tagSpanStrongEnter                  	*LPSPANSTRONGENTER;

struct tagSpanStrongInfo;
typedef struct tagSpanStrongInfo                   	SPANSTRONGINFO;
typedef struct tagSpanStrongInfo                   	*LPSPANSTRONGINFO;

union tagCltSpanStrong;
typedef union  tagCltSpanStrong                    	CLTSPANSTRONG;
typedef union  tagCltSpanStrong                    	*LPCLTSPANSTRONG;

struct tagCSSpanStrongClt;
typedef struct tagCSSpanStrongClt                  	CSSPANSTRONGCLT;
typedef struct tagCSSpanStrongClt                  	*LPCSSPANSTRONGCLT;

struct tagCsSpanStrongPworld;
typedef struct tagCsSpanStrongPworld               	CSSPANSTRONGPWORLD;
typedef struct tagCsSpanStrongPworld               	*LPCSSPANSTRONGPWORLD;

struct tagCsSpanStrongInfoAll;
typedef struct tagCsSpanStrongInfoAll              	CSSPANSTRONGINFOALL;
typedef struct tagCsSpanStrongInfoAll              	*LPCSSPANSTRONGINFOALL;

struct tagRStrongOwnerOcc;
typedef struct tagRStrongOwnerOcc                  	RSTRONGOWNEROCC;
typedef struct tagRStrongOwnerOcc                  	*LPRSTRONGOWNEROCC;

struct tagRStrongSaleOcc;
typedef struct tagRStrongSaleOcc                   	RSTRONGSALEOCC;
typedef struct tagRStrongSaleOcc                   	*LPRSTRONGSALEOCC;

struct tagCsSpanStrongOcc;
typedef struct tagCsSpanStrongOcc                  	CSSPANSTRONGOCC;
typedef struct tagCsSpanStrongOcc                  	*LPCSSPANSTRONGOCC;

struct tagCsSpanStrongInfoOne;
typedef struct tagCsSpanStrongInfoOne              	CSSPANSTRONGINFOONE;
typedef struct tagCsSpanStrongInfoOne              	*LPCSSPANSTRONGINFOONE;

struct tagCsSpanStrongWarOne;
typedef struct tagCsSpanStrongWarOne               	CSSPANSTRONGWARONE;
typedef struct tagCsSpanStrongWarOne               	*LPCSSPANSTRONGWARONE;

struct tagCsSpanStrongWarAll;
typedef struct tagCsSpanStrongWarAll               	CSSPANSTRONGWARALL;
typedef struct tagCsSpanStrongWarAll               	*LPCSSPANSTRONGWARALL;

union tagSvrSpanStrong;
typedef union  tagSvrSpanStrong                    	SVRSPANSTRONG;
typedef union  tagSvrSpanStrong                    	*LPSVRSPANSTRONG;

struct tagCSSpanStrongSvr;
typedef struct tagCSSpanStrongSvr                  	CSSPANSTRONGSVR;
typedef struct tagCSSpanStrongSvr                  	*LPCSSPANSTRONGSVR;

struct tagCsClanPetJiYang;
typedef struct tagCsClanPetJiYang                  	CSCLANPETJIYANG;
typedef struct tagCsClanPetJiYang                  	*LPCSCLANPETJIYANG;

struct tagCsClanPetJiYangEnd;
typedef struct tagCsClanPetJiYangEnd               	CSCLANPETJIYANGEND;
typedef struct tagCsClanPetJiYangEnd               	*LPCSCLANPETJIYANGEND;

struct tagCsClanPetClear;
typedef struct tagCsClanPetClear                   	CSCLANPETCLEAR;
typedef struct tagCsClanPetClear                   	*LPCSCLANPETCLEAR;

struct tagCsClanPetWanShua;
typedef struct tagCsClanPetWanShua                 	CSCLANPETWANSHUA;
typedef struct tagCsClanPetWanShua                 	*LPCSCLANPETWANSHUA;

struct tagCsClanPetTou;
typedef struct tagCsClanPetTou                     	CSCLANPETTOU;
typedef struct tagCsClanPetTou                     	*LPCSCLANPETTOU;

struct tagCsClanPetEat;
typedef struct tagCsClanPetEat                     	CSCLANPETEAT;
typedef struct tagCsClanPetEat                     	*LPCSCLANPETEAT;

struct tagCsClanPetWork;
typedef struct tagCsClanPetWork                    	CSCLANPETWORK;
typedef struct tagCsClanPetWork                    	*LPCSCLANPETWORK;

struct tagCsClanPetWorkAward;
typedef struct tagCsClanPetWorkAward               	CSCLANPETWORKAWARD;
typedef struct tagCsClanPetWorkAward               	*LPCSCLANPETWORKAWARD;

union tagCltClanPetData;
typedef union  tagCltClanPetData                   	CLTCLANPETDATA;
typedef union  tagCltClanPetData                   	*LPCLTCLANPETDATA;

struct tagCSClanPetClt;
typedef struct tagCSClanPetClt                     	CSCLANPETCLT;
typedef struct tagCSClanPetClt                     	*LPCSCLANPETCLT;

struct tagCSClanPetAll;
typedef struct tagCSClanPetAll                     	CSCLANPETALL;
typedef struct tagCSClanPetAll                     	*LPCSCLANPETALL;

struct tagCSClanPetOne;
typedef struct tagCSClanPetOne                     	CSCLANPETONE;
typedef struct tagCSClanPetOne                     	*LPCSCLANPETONE;

struct tagCSClanPetGaojiSec;
typedef struct tagCSClanPetGaojiSec                	CSCLANPETGAOJISEC;
typedef struct tagCSClanPetGaojiSec                	*LPCSCLANPETGAOJISEC;

struct tagCSClanPetGrid;
typedef struct tagCSClanPetGrid                    	CSCLANPETGRID;
typedef struct tagCSClanPetGrid                    	*LPCSCLANPETGRID;

struct tagCSClanPetBox;
typedef struct tagCSClanPetBox                     	CSCLANPETBOX;
typedef struct tagCSClanPetBox                     	*LPCSCLANPETBOX;

union tagSvrClanPetData;
typedef union  tagSvrClanPetData                   	SVRCLANPETDATA;
typedef union  tagSvrClanPetData                   	*LPSVRCLANPETDATA;

struct tagCSClanPetSvr;
typedef struct tagCSClanPetSvr                     	CSCLANPETSVR;
typedef struct tagCSClanPetSvr                     	*LPCSCLANPETSVR;

struct tagCltStoreSearch;
typedef struct tagCltStoreSearch                   	CLTSTORESEARCH;
typedef struct tagCltStoreSearch                   	*LPCLTSTORESEARCH;

struct tagCltStoreUI;
typedef struct tagCltStoreUI                       	CLTSTOREUI;
typedef struct tagCltStoreUI                       	*LPCLTSTOREUI;

struct tagCltStorePos;
typedef struct tagCltStorePos                      	CLTSTOREPOS;
typedef struct tagCltStorePos                      	*LPCLTSTOREPOS;

struct tagStoreOpen;
typedef struct tagStoreOpen                        	STOREOPEN;
typedef struct tagStoreOpen                        	*LPSTOREOPEN;

struct tagStoreChgName;
typedef struct tagStoreChgName                     	STORECHGNAME;
typedef struct tagStoreChgName                     	*LPSTORECHGNAME;

struct tagStoreUp;
typedef struct tagStoreUp                          	STOREUP;
typedef struct tagStoreUp                          	*LPSTOREUP;

struct tagStoreDown;
typedef struct tagStoreDown                        	STOREDOWN;
typedef struct tagStoreDown                        	*LPSTOREDOWN;

struct tagStoreMoneyIn;
typedef struct tagStoreMoneyIn                     	STOREMONEYIN;
typedef struct tagStoreMoneyIn                     	*LPSTOREMONEYIN;

struct tagStoreClose;
typedef struct tagStoreClose                       	STORECLOSE;
typedef struct tagStoreClose                       	*LPSTORECLOSE;

struct tagStoreView;
typedef struct tagStoreView                        	STOREVIEW;
typedef struct tagStoreView                        	*LPSTOREVIEW;

struct tagStorePage;
typedef struct tagStorePage                        	STOREPAGE;
typedef struct tagStorePage                        	*LPSTOREPAGE;

struct tagStoreAddGrid;
typedef struct tagStoreAddGrid                     	STOREADDGRID;
typedef struct tagStoreAddGrid                     	*LPSTOREADDGRID;

struct tagStoreDecGrid;
typedef struct tagStoreDecGrid                     	STOREDECGRID;
typedef struct tagStoreDecGrid                     	*LPSTOREDECGRID;

struct tagStoreBuy;
typedef struct tagStoreBuy                         	STOREBUY;
typedef struct tagStoreBuy                         	*LPSTOREBUY;

union tagCltStoreData;
typedef union  tagCltStoreData                     	CLTSTOREDATA;
typedef union  tagCltStoreData                     	*LPCLTSTOREDATA;

struct tagCSStoreClt;
typedef struct tagCSStoreClt                       	CSSTORECLT;
typedef struct tagCSStoreClt                       	*LPCSSTORECLT;

struct tagSvrStoreSaerch;
typedef struct tagSvrStoreSaerch                   	SVRSTORESAERCH;
typedef struct tagSvrStoreSaerch                   	*LPSVRSTORESAERCH;

struct tagSvrStorePos;
typedef struct tagSvrStorePos                      	SVRSTOREPOS;
typedef struct tagSvrStorePos                      	*LPSVRSTOREPOS;

struct tagStorePageOne;
typedef struct tagStorePageOne                     	STOREPAGEONE;
typedef struct tagStorePageOne                     	*LPSTOREPAGEONE;

struct tagStorePageSvr;
typedef struct tagStorePageSvr                     	STOREPAGESVR;
typedef struct tagStorePageSvr                     	*LPSTOREPAGESVR;

struct tagStoreOpenUI;
typedef struct tagStoreOpenUI                      	STOREOPENUI;
typedef struct tagStoreOpenUI                      	*LPSTOREOPENUI;

struct tagStoreOne;
typedef struct tagStoreOne                         	STOREONE;
typedef struct tagStoreOne                         	*LPSTOREONE;

struct tagStoreGridChg;
typedef struct tagStoreGridChg                     	STOREGRIDCHG;
typedef struct tagStoreGridChg                     	*LPSTOREGRIDCHG;

struct tagStoreMoneyChg;
typedef struct tagStoreMoneyChg                    	STOREMONEYCHG;
typedef struct tagStoreMoneyChg                    	*LPSTOREMONEYCHG;

struct tagStoreItemChg;
typedef struct tagStoreItemChg                     	STOREITEMCHG;
typedef struct tagStoreItemChg                     	*LPSTOREITEMCHG;

struct tagStoreCloseSvr;
typedef struct tagStoreCloseSvr                    	STORECLOSESVR;
typedef struct tagStoreCloseSvr                    	*LPSTORECLOSESVR;

struct tagStoreOpenSvr;
typedef struct tagStoreOpenSvr                     	STOREOPENSVR;
typedef struct tagStoreOpenSvr                     	*LPSTOREOPENSVR;

union tagSvrStoreData;
typedef union  tagSvrStoreData                     	SVRSTOREDATA;
typedef union  tagSvrStoreData                     	*LPSVRSTOREDATA;

struct tagCSStoreSvr;
typedef struct tagCSStoreSvr                       	CSSTORESVR;
typedef struct tagCSStoreSvr                       	*LPCSSTORESVR;

struct tagCSBoonGet;
typedef struct tagCSBoonGet                        	CSBOONGET;
typedef struct tagCSBoonGet                        	*LPCSBOONGET;

struct tagCSBoonAssign;
typedef struct tagCSBoonAssign                     	CSBOONASSIGN;
typedef struct tagCSBoonAssign                     	*LPCSBOONASSIGN;

union tagCltBoonData;
typedef union  tagCltBoonData                      	CLTBOONDATA;
typedef union  tagCltBoonData                      	*LPCLTBOONDATA;

struct tagCSBoonClt;
typedef struct tagCSBoonClt                        	CSBOONCLT;
typedef struct tagCSBoonClt                        	*LPCSBOONCLT;

struct tagCSSvrBoonAssign;
typedef struct tagCSSvrBoonAssign                  	CSSVRBOONASSIGN;
typedef struct tagCSSvrBoonAssign                  	*LPCSSVRBOONASSIGN;

struct tagCSSvrBoonChg;
typedef struct tagCSSvrBoonChg                     	CSSVRBOONCHG;
typedef struct tagCSSvrBoonChg                     	*LPCSSVRBOONCHG;

struct tagCSSvrBoonAll;
typedef struct tagCSSvrBoonAll                     	CSSVRBOONALL;
typedef struct tagCSSvrBoonAll                     	*LPCSSVRBOONALL;

union tagSvrBoonData;
typedef union  tagSvrBoonData                      	SVRBOONDATA;
typedef union  tagSvrBoonData                      	*LPSVRBOONDATA;

struct tagCSBoonSvr;
typedef struct tagCSBoonSvr                        	CSBOONSVR;
typedef struct tagCSBoonSvr                        	*LPCSBOONSVR;

struct tagCSBusyFini;
typedef struct tagCSBusyFini                       	CSBUSYFINI;
typedef struct tagCSBusyFini                       	*LPCSBUSYFINI;

union tagCSBusyCltData;
typedef union  tagCSBusyCltData                    	CSBUSYCLTDATA;
typedef union  tagCSBusyCltData                    	*LPCSBUSYCLTDATA;

struct tagCSBusyClt;
typedef struct tagCSBusyClt                        	CSBUSYCLT;
typedef struct tagCSBusyClt                        	*LPCSBUSYCLT;

struct tagCSBusyUI;
typedef struct tagCSBusyUI                         	CSBUSYUI;
typedef struct tagCSBusyUI                         	*LPCSBUSYUI;

struct tagCSBusyFiniAction;
typedef struct tagCSBusyFiniAction                 	CSBUSYFINIACTION;
typedef struct tagCSBusyFiniAction                 	*LPCSBUSYFINIACTION;

union tagCSBusySvrData;
typedef union  tagCSBusySvrData                    	CSBUSYSVRDATA;
typedef union  tagCSBusySvrData                    	*LPCSBUSYSVRDATA;

struct tagCSBusySvr;
typedef struct tagCSBusySvr                        	CSBUSYSVR;
typedef struct tagCSBusySvr                        	*LPCSBUSYSVR;

struct tagGuniusUpClt;
typedef struct tagGuniusUpClt                      	GUNIUSUPCLT;
typedef struct tagGuniusUpClt                      	*LPGUNIUSUPCLT;

union tagCsGuniusClt;
typedef union  tagCsGuniusClt                      	CSGUNIUSCLT;
typedef union  tagCsGuniusClt                      	*LPCSGUNIUSCLT;

struct tagGuniusClt;
typedef struct tagGuniusClt                        	GUNIUSCLT;
typedef struct tagGuniusClt                        	*LPGUNIUSCLT;

struct tagGuniusOneClt;
typedef struct tagGuniusOneClt                     	GUNIUSONECLT;
typedef struct tagGuniusOneClt                     	*LPGUNIUSONECLT;

struct tagGuniusAllClt;
typedef struct tagGuniusAllClt                     	GUNIUSALLCLT;
typedef struct tagGuniusAllClt                     	*LPGUNIUSALLCLT;

union tagCsGuniusSvr;
typedef union  tagCsGuniusSvr                      	CSGUNIUSSVR;
typedef union  tagCsGuniusSvr                      	*LPCSGUNIUSSVR;

struct tagGuniusSvr;
typedef struct tagGuniusSvr                        	GUNIUSSVR;
typedef struct tagGuniusSvr                        	*LPGUNIUSSVR;

struct tagFzLvlUpClt;
typedef struct tagFzLvlUpClt                       	FZLVLUPCLT;
typedef struct tagFzLvlUpClt                       	*LPFZLVLUPCLT;

struct tagFzAttrUpClt;
typedef struct tagFzAttrUpClt                      	FZATTRUPCLT;
typedef struct tagFzAttrUpClt                      	*LPFZATTRUPCLT;

union tagCsFzClt;
typedef union  tagCsFzClt                          	CSFZCLT;
typedef union  tagCsFzClt                          	*LPCSFZCLT;

struct tagFzClt;
typedef struct tagFzClt                            	FZCLT;
typedef struct tagFzClt                            	*LPFZCLT;

struct tagFzOneSvr;
typedef struct tagFzOneSvr                         	FZONESVR;
typedef struct tagFzOneSvr                         	*LPFZONESVR;

struct tagFzListSvr;
typedef struct tagFzListSvr                        	FZLISTSVR;
typedef struct tagFzListSvr                        	*LPFZLISTSVR;

struct tagCSDaoBa;
typedef struct tagCSDaoBa                          	CSDAOBA;
typedef struct tagCSDaoBa                          	*LPCSDAOBA;

union tagCsFzSvr;
typedef union  tagCsFzSvr                          	CSFZSVR;
typedef union  tagCsFzSvr                          	*LPCSFZSVR;

struct tagFzSvr;
typedef struct tagFzSvr                            	FZSVR;
typedef struct tagFzSvr                            	*LPFZSVR;

struct tagResetStartClt;
typedef struct tagResetStartClt                    	RESETSTARTCLT;
typedef struct tagResetStartClt                    	*LPRESETSTARTCLT;

struct tagResetBreakClt;
typedef struct tagResetBreakClt                    	RESETBREAKCLT;
typedef struct tagResetBreakClt                    	*LPRESETBREAKCLT;

struct tagResetEndClt;
typedef struct tagResetEndClt                      	RESETENDCLT;
typedef struct tagResetEndClt                      	*LPRESETENDCLT;

union tagCsRongluClt;
typedef union  tagCsRongluClt                      	CSRONGLUCLT;
typedef union  tagCsRongluClt                      	*LPCSRONGLUCLT;

struct tagRongluClt;
typedef struct tagRongluClt                        	RONGLUCLT;
typedef struct tagRongluClt                        	*LPRONGLUCLT;

struct tagRongluStartRes;
typedef struct tagRongluStartRes                   	RONGLUSTARTRES;
typedef struct tagRongluStartRes                   	*LPRONGLUSTARTRES;

struct tagRongluOne;
typedef struct tagRongluOne                        	RONGLUONE;
typedef struct tagRongluOne                        	*LPRONGLUONE;

struct tagRongluKillNumChg;
typedef struct tagRongluKillNumChg                 	RONGLUKILLNUMCHG;
typedef struct tagRongluKillNumChg                 	*LPRONGLUKILLNUMCHG;

union tagCsRongluSvr;
typedef union  tagCsRongluSvr                      	CSRONGLUSVR;
typedef union  tagCsRongluSvr                      	*LPCSRONGLUSVR;

struct tagRongluSvr;
typedef struct tagRongluSvr                        	RONGLUSVR;
typedef struct tagRongluSvr                        	*LPRONGLUSVR;

struct tagAccGetRoleInfo;
typedef struct tagAccGetRoleInfo                   	ACCGETROLEINFO;
typedef struct tagAccGetRoleInfo                   	*LPACCGETROLEINFO;

struct tagAccGetRoleClt;
typedef struct tagAccGetRoleClt                    	ACCGETROLECLT;
typedef struct tagAccGetRoleClt                    	*LPACCGETROLECLT;

struct tagAccRoleInfo;
typedef struct tagAccRoleInfo                      	ACCROLEINFO;
typedef struct tagAccRoleInfo                      	*LPACCROLEINFO;

struct tagAccGetRoleSvr;
typedef struct tagAccGetRoleSvr                    	ACCGETROLESVR;
typedef struct tagAccGetRoleSvr                    	*LPACCGETROLESVR;

struct tagActiveTrans;
typedef struct tagActiveTrans                      	ACTIVETRANS;
typedef struct tagActiveTrans                      	*LPACTIVETRANS;

union tagCSActiveClt;
typedef union  tagCSActiveClt                      	CSACTIVECLT;
typedef union  tagCSActiveClt                      	*LPCSACTIVECLT;

struct tagActiveClt;
typedef struct tagActiveClt                        	ACTIVECLT;
typedef struct tagActiveClt                        	*LPACTIVECLT;

struct tagAutoPworldAgree;
typedef struct tagAutoPworldAgree                  	AUTOPWORLDAGREE;
typedef struct tagAutoPworldAgree                  	*LPAUTOPWORLDAGREE;

struct tagAutoPworldUIReq;
typedef struct tagAutoPworldUIReq                  	AUTOPWORLDUIREQ;
typedef struct tagAutoPworldUIReq                  	*LPAUTOPWORLDUIREQ;

struct tagAutoPworldEnterReq;
typedef struct tagAutoPworldEnterReq               	AUTOPWORLDENTERREQ;
typedef struct tagAutoPworldEnterReq               	*LPAUTOPWORLDENTERREQ;

union tagCSAutoPworldClt;
typedef union  tagCSAutoPworldClt                  	CSAUTOPWORLDCLT;
typedef union  tagCSAutoPworldClt                  	*LPCSAUTOPWORLDCLT;

struct tagAutoPworldClt;
typedef struct tagAutoPworldClt                    	AUTOPWORLDCLT;
typedef struct tagAutoPworldClt                    	*LPAUTOPWORLDCLT;

struct tagAutoPworldSvrUI;
typedef struct tagAutoPworldSvrUI                  	AUTOPWORLDSVRUI;
typedef struct tagAutoPworldSvrUI                  	*LPAUTOPWORLDSVRUI;

struct tagAutoPworldTeamInfo;
typedef struct tagAutoPworldTeamInfo               	AUTOPWORLDTEAMINFO;
typedef struct tagAutoPworldTeamInfo               	*LPAUTOPWORLDTEAMINFO;

struct tagAutoPworldSvrEnter;
typedef struct tagAutoPworldSvrEnter               	AUTOPWORLDSVRENTER;
typedef struct tagAutoPworldSvrEnter               	*LPAUTOPWORLDSVRENTER;

union tagCSAutoPworldSvr;
typedef union  tagCSAutoPworldSvr                  	CSAUTOPWORLDSVR;
typedef union  tagCSAutoPworldSvr                  	*LPCSAUTOPWORLDSVR;

struct tagAutoPworldSvr;
typedef struct tagAutoPworldSvr                    	AUTOPWORLDSVR;
typedef struct tagAutoPworldSvr                    	*LPAUTOPWORLDSVR;

struct tagStrongAwardReq;
typedef struct tagStrongAwardReq                   	STRONGAWARDREQ;
typedef struct tagStrongAwardReq                   	*LPSTRONGAWARDREQ;

struct tagStrongInfoAllReq;
typedef struct tagStrongInfoAllReq                 	STRONGINFOALLREQ;
typedef struct tagStrongInfoAllReq                 	*LPSTRONGINFOALLREQ;

struct tagStrongEnterReq;
typedef struct tagStrongEnterReq                   	STRONGENTERREQ;
typedef struct tagStrongEnterReq                   	*LPSTRONGENTERREQ;

struct tagStrongSale;
typedef struct tagStrongSale                       	STRONGSALE;
typedef struct tagStrongSale                       	*LPSTRONGSALE;

struct tagStrongEnter;
typedef struct tagStrongEnter                      	STRONGENTER;
typedef struct tagStrongEnter                      	*LPSTRONGENTER;

struct tagStrongBannerXuanyan;
typedef struct tagStrongBannerXuanyan              	STRONGBANNERXUANYAN;
typedef struct tagStrongBannerXuanyan              	*LPSTRONGBANNERXUANYAN;

struct tagStrongSetBanner;
typedef struct tagStrongSetBanner                  	STRONGSETBANNER;
typedef struct tagStrongSetBanner                  	*LPSTRONGSETBANNER;

union tagCSStrongClt;
typedef union  tagCSStrongClt                      	CSSTRONGCLT;
typedef union  tagCSStrongClt                      	*LPCSSTRONGCLT;

struct tagStrongClt;
typedef struct tagStrongClt                        	STRONGCLT;
typedef struct tagStrongClt                        	*LPSTRONGCLT;

struct tagStrongIDInfo;
typedef struct tagStrongIDInfo                     	STRONGIDINFO;
typedef struct tagStrongIDInfo                     	*LPSTRONGIDINFO;

struct tagGloryOne;
typedef struct tagGloryOne                         	GLORYONE;
typedef struct tagGloryOne                         	*LPGLORYONE;

struct tagStrongGlory;
typedef struct tagStrongGlory                      	STRONGGLORY;
typedef struct tagStrongGlory                      	*LPSTRONGGLORY;

struct tagStrongSaleInfo;
typedef struct tagStrongSaleInfo                   	STRONGSALEINFO;
typedef struct tagStrongSaleInfo                   	*LPSTRONGSALEINFO;

struct tagStrongWarOne;
typedef struct tagStrongWarOne                     	STRONGWARONE;
typedef struct tagStrongWarOne                     	*LPSTRONGWARONE;

struct tagStrongWarAll;
typedef struct tagStrongWarAll                     	STRONGWARALL;
typedef struct tagStrongWarAll                     	*LPSTRONGWARALL;

struct tagStrongInfoOne;
typedef struct tagStrongInfoOne                    	STRONGINFOONE;
typedef struct tagStrongInfoOne                    	*LPSTRONGINFOONE;

struct tagStrongAllInfoOne;
typedef struct tagStrongAllInfoOne                 	STRONGALLINFOONE;
typedef struct tagStrongAllInfoOne                 	*LPSTRONGALLINFOONE;

struct tagStrongAllInfo;
typedef struct tagStrongAllInfo                    	STRONGALLINFO;
typedef struct tagStrongAllInfo                    	*LPSTRONGALLINFO;

struct tagStrongActive;
typedef struct tagStrongActive                     	STRONGACTIVE;
typedef struct tagStrongActive                     	*LPSTRONGACTIVE;

struct tagBannerChg;
typedef struct tagBannerChg                        	BANNERCHG;
typedef struct tagBannerChg                        	*LPBANNERCHG;

struct tagStrongPointInfos;
typedef struct tagStrongPointInfos                 	STRONGPOINTINFOS;
typedef struct tagStrongPointInfos                 	*LPSTRONGPOINTINFOS;

struct tagStrongPworldInfo;
typedef struct tagStrongPworldInfo                 	STRONGPWORLDINFO;
typedef struct tagStrongPworldInfo                 	*LPSTRONGPWORLDINFO;

union tagCSStrongSvr;
typedef union  tagCSStrongSvr                      	CSSTRONGSVR;
typedef union  tagCSStrongSvr                      	*LPCSSTRONGSVR;

struct tagStrongSvr;
typedef struct tagStrongSvr                        	STRONGSVR;
typedef struct tagStrongSvr                        	*LPSTRONGSVR;

struct tagSubJectJoin;
typedef struct tagSubJectJoin                      	SUBJECTJOIN;
typedef struct tagSubJectJoin                      	*LPSUBJECTJOIN;

struct tagSubJectExit;
typedef struct tagSubJectExit                      	SUBJECTEXIT;
typedef struct tagSubJectExit                      	*LPSUBJECTEXIT;

struct tagSubJectCommit;
typedef struct tagSubJectCommit                    	SUBJECTCOMMIT;
typedef struct tagSubJectCommit                    	*LPSUBJECTCOMMIT;

union tagCSSubJectClt;
typedef union  tagCSSubJectClt                     	CSSUBJECTCLT;
typedef union  tagCSSubJectClt                     	*LPCSSUBJECTCLT;

struct tagSubJectClt;
typedef struct tagSubJectClt                       	SUBJECTCLT;
typedef struct tagSubJectClt                       	*LPSUBJECTCLT;

struct tagSubJectInvite;
typedef struct tagSubJectInvite                    	SUBJECTINVITE;
typedef struct tagSubJectInvite                    	*LPSUBJECTINVITE;

struct tagSubJectSelf;
typedef struct tagSubJectSelf                      	SUBJECTSELF;
typedef struct tagSubJectSelf                      	*LPSUBJECTSELF;

struct tagSubJectTopOne;
typedef struct tagSubJectTopOne                    	SUBJECTTOPONE;
typedef struct tagSubJectTopOne                    	*LPSUBJECTTOPONE;

struct tagSubJectTop;
typedef struct tagSubJectTop                       	SUBJECTTOP;
typedef struct tagSubJectTop                       	*LPSUBJECTTOP;

struct tagSubJectPloy;
typedef struct tagSubJectPloy                      	SUBJECTPLOY;
typedef struct tagSubJectPloy                      	*LPSUBJECTPLOY;

struct tagSubJectAward;
typedef struct tagSubJectAward                     	SUBJECTAWARD;
typedef struct tagSubJectAward                     	*LPSUBJECTAWARD;

struct tagSubJectFlush;
typedef struct tagSubJectFlush                     	SUBJECTFLUSH;
typedef struct tagSubJectFlush                     	*LPSUBJECTFLUSH;

union tagCSSubJectSvr;
typedef union  tagCSSubJectSvr                     	CSSUBJECTSVR;
typedef union  tagCSSubJectSvr                     	*LPCSSUBJECTSVR;

struct tagSubJectSvr;
typedef struct tagSubJectSvr                       	SUBJECTSVR;
typedef struct tagSubJectSvr                       	*LPSUBJECTSVR;

struct tagUnrealEnter;
typedef struct tagUnrealEnter                      	UNREALENTER;
typedef struct tagUnrealEnter                      	*LPUNREALENTER;

struct tagUnrealSave;
typedef struct tagUnrealSave                       	UNREALSAVE;
typedef struct tagUnrealSave                       	*LPUNREALSAVE;

struct tagUnrealTeamOne;
typedef struct tagUnrealTeamOne                    	UNREALTEAMONE;
typedef struct tagUnrealTeamOne                    	*LPUNREALTEAMONE;

struct tagUnrealTeamInfo;
typedef struct tagUnrealTeamInfo                   	UNREALTEAMINFO;
typedef struct tagUnrealTeamInfo                   	*LPUNREALTEAMINFO;

struct tagBossInfo;
typedef struct tagBossInfo                         	BOSSINFO;
typedef struct tagBossInfo                         	*LPBOSSINFO;

struct tagUnrealMonInfo;
typedef struct tagUnrealMonInfo                    	UNREALMONINFO;
typedef struct tagUnrealMonInfo                    	*LPUNREALMONINFO;

struct tagUnrealBossInfos;
typedef struct tagUnrealBossInfos                  	UNREALBOSSINFOS;
typedef struct tagUnrealBossInfos                  	*LPUNREALBOSSINFOS;

union tagCSUnrealClt;
typedef union  tagCSUnrealClt                      	CSUNREALCLT;
typedef union  tagCSUnrealClt                      	*LPCSUNREALCLT;

union tagCSUnrealSvr;
typedef union  tagCSUnrealSvr                      	CSUNREALSVR;
typedef union  tagCSUnrealSvr                      	*LPCSUNREALSVR;

struct tagUnrealSvr;
typedef struct tagUnrealSvr                        	UNREALSVR;
typedef struct tagUnrealSvr                        	*LPUNREALSVR;

struct tagUnrealClt;
typedef struct tagUnrealClt                        	UNREALCLT;
typedef struct tagUnrealClt                        	*LPUNREALCLT;

struct tagCsGoldRaffleSvr;
typedef struct tagCsGoldRaffleSvr                  	CSGOLDRAFFLESVR;
typedef struct tagCsGoldRaffleSvr                  	*LPCSGOLDRAFFLESVR;

struct tagCsRaffleClt;
typedef struct tagCsRaffleClt                      	CSRAFFLECLT;
typedef struct tagCsRaffleClt                      	*LPCSRAFFLECLT;

struct tagCsRaffleSvr;
typedef struct tagCsRaffleSvr                      	CSRAFFLESVR;
typedef struct tagCsRaffleSvr                      	*LPCSRAFFLESVR;

struct tagCsUnDel;
typedef struct tagCsUnDel                          	CSUNDEL;
typedef struct tagCsUnDel                          	*LPCSUNDEL;

struct tagCsCDkeySvr;
typedef struct tagCsCDkeySvr                       	CSCDKEYSVR;
typedef struct tagCsCDkeySvr                       	*LPCSCDKEYSVR;

struct tagFengYinArm;
typedef struct tagFengYinArm                       	FENGYINARM;
typedef struct tagFengYinArm                       	*LPFENGYINARM;

struct tagCSReviveInfo;
typedef struct tagCSReviveInfo                     	CSREVIVEINFO;
typedef struct tagCSReviveInfo                     	*LPCSREVIVEINFO;

struct tagDieSvr;
typedef struct tagDieSvr                           	DIESVR;
typedef struct tagDieSvr                           	*LPDIESVR;

struct tagSafeLockActive;
typedef struct tagSafeLockActive                   	SAFELOCKACTIVE;
typedef struct tagSafeLockActive                   	*LPSAFELOCKACTIVE;

struct tagSafeLockModify;
typedef struct tagSafeLockModify                   	SAFELOCKMODIFY;
typedef struct tagSafeLockModify                   	*LPSAFELOCKMODIFY;

struct tagCSSafeLockClt;
typedef struct tagCSSafeLockClt                    	CSSAFELOCKCLT;
typedef struct tagCSSafeLockClt                    	*LPCSSAFELOCKCLT;

struct tagSafeLockClt;
typedef struct tagSafeLockClt                      	SAFELOCKCLT;
typedef struct tagSafeLockClt                      	*LPSAFELOCKCLT;

struct tagSafeLockSvr;
typedef struct tagSafeLockSvr                      	SAFELOCKSVR;
typedef struct tagSafeLockSvr                      	*LPSAFELOCKSVR;

struct tagGPRSClt;
typedef struct tagGPRSClt                          	GPRSCLT;
typedef struct tagGPRSClt                          	*LPGPRSCLT;

struct tagGPRSSvr;
typedef struct tagGPRSSvr                          	GPRSSVR;
typedef struct tagGPRSSvr                          	*LPGPRSSVR;

struct tagTestInvite;
typedef struct tagTestInvite                       	TESTINVITE;
typedef struct tagTestInvite                       	*LPTESTINVITE;

struct tagTestRes;
typedef struct tagTestRes                          	TESTRES;
typedef struct tagTestRes                          	*LPTESTRES;

struct tagTestSvrRes;
typedef struct tagTestSvrRes                       	TESTSVRRES;
typedef struct tagTestSvrRes                       	*LPTESTSVRRES;

union tagCSInviteTestClt;
typedef union  tagCSInviteTestClt                  	CSINVITETESTCLT;
typedef union  tagCSInviteTestClt                  	*LPCSINVITETESTCLT;

union tagCSInviteTestSvr;
typedef union  tagCSInviteTestSvr                  	CSINVITETESTSVR;
typedef union  tagCSInviteTestSvr                  	*LPCSINVITETESTSVR;

struct tagInviteClt;
typedef struct tagInviteClt                        	INVITECLT;
typedef struct tagInviteClt                        	*LPINVITECLT;

struct tagInviteSvr;
typedef struct tagInviteSvr                        	INVITESVR;
typedef struct tagInviteSvr                        	*LPINVITESVR;

struct tagBctEnter;
typedef struct tagBctEnter                         	BCTENTER;
typedef struct tagBctEnter                         	*LPBCTENTER;

struct tagBctContinue;
typedef struct tagBctContinue                      	BCTCONTINUE;
typedef struct tagBctContinue                      	*LPBCTCONTINUE;

struct tagBctRaffleStart;
typedef struct tagBctRaffleStart                   	BCTRAFFLESTART;
typedef struct tagBctRaffleStart                   	*LPBCTRAFFLESTART;

struct tagBctAward;
typedef struct tagBctAward                         	BCTAWARD;
typedef struct tagBctAward                         	*LPBCTAWARD;

struct tagBctRaffleEnd;
typedef struct tagBctRaffleEnd                     	BCTRAFFLEEND;
typedef struct tagBctRaffleEnd                     	*LPBCTRAFFLEEND;

struct tagBctExit;
typedef struct tagBctExit                          	BCTEXIT;
typedef struct tagBctExit                          	*LPBCTEXIT;

struct tagBctTopInfo;
typedef struct tagBctTopInfo                       	BCTTOPINFO;
typedef struct tagBctTopInfo                       	*LPBCTTOPINFO;

struct tagBctAgain;
typedef struct tagBctAgain                         	BCTAGAIN;
typedef struct tagBctAgain                         	*LPBCTAGAIN;

union tagCSBctClt;
typedef union  tagCSBctClt                         	CSBCTCLT;
typedef union  tagCSBctClt                         	*LPCSBCTCLT;

struct tagCSBctReq;
typedef struct tagCSBctReq                         	CSBCTREQ;
typedef struct tagCSBctReq                         	*LPCSBCTREQ;

struct tagBctLayerHistory;
typedef struct tagBctLayerHistory                  	BCTLAYERHISTORY;
typedef struct tagBctLayerHistory                  	*LPBCTLAYERHISTORY;

struct tagBctSelfTop;
typedef struct tagBctSelfTop                       	BCTSELFTOP;
typedef struct tagBctSelfTop                       	*LPBCTSELFTOP;

struct tagBctInfo;
typedef struct tagBctInfo                          	BCTINFO;
typedef struct tagBctInfo                          	*LPBCTINFO;

struct tagSvrRaffleStart;
typedef struct tagSvrRaffleStart                   	SVRRAFFLESTART;
typedef struct tagSvrRaffleStart                   	*LPSVRRAFFLESTART;

struct tagBctStopTm;
typedef struct tagBctStopTm                        	BCTSTOPTM;
typedef struct tagBctStopTm                        	*LPBCTSTOPTM;

struct tagBctPass;
typedef struct tagBctPass                          	BCTPASS;
typedef struct tagBctPass                          	*LPBCTPASS;

struct tagBctFail;
typedef struct tagBctFail                          	BCTFAIL;
typedef struct tagBctFail                          	*LPBCTFAIL;

struct tagRaffleAward;
typedef struct tagRaffleAward                      	RAFFLEAWARD;
typedef struct tagRaffleAward                      	*LPRAFFLEAWARD;

struct tagBctSvrExit;
typedef struct tagBctSvrExit                       	BCTSVREXIT;
typedef struct tagBctSvrExit                       	*LPBCTSVREXIT;

union tagCSBctSvr;
typedef union  tagCSBctSvr                         	CSBCTSVR;
typedef union  tagCSBctSvr                         	*LPCSBCTSVR;

struct tagCSBctRes;
typedef struct tagCSBctRes                         	CSBCTRES;
typedef struct tagCSBctRes                         	*LPCSBCTRES;

struct tagCSPkgHead;
typedef struct tagCSPkgHead                        	CSPKGHEAD;
typedef struct tagCSPkgHead                        	*LPCSPKGHEAD;

struct tagCSAccLoginReq;
typedef struct tagCSAccLoginReq                    	CSACCLOGINREQ;
typedef struct tagCSAccLoginReq                    	*LPCSACCLOGINREQ;

struct tagCSAccLoginRes;
typedef struct tagCSAccLoginRes                    	CSACCLOGINRES;
typedef struct tagCSAccLoginRes                    	*LPCSACCLOGINRES;

struct tagRoleInfo;
typedef struct tagRoleInfo                         	ROLEINFO;
typedef struct tagRoleInfo                         	*LPROLEINFO;

struct tagCSRoleList;
typedef struct tagCSRoleList                       	CSROLELIST;
typedef struct tagCSRoleList                       	*LPCSROLELIST;

struct tagCSRoleLoginReq;
typedef struct tagCSRoleLoginReq                   	CSROLELOGINREQ;
typedef struct tagCSRoleLoginReq                   	*LPCSROLELOGINREQ;

struct tagCSPworldInfo;
typedef struct tagCSPworldInfo                     	CSPWORLDINFO;
typedef struct tagCSPworldInfo                     	*LPCSPWORLDINFO;

struct tagCSEnterMap;
typedef struct tagCSEnterMap                       	CSENTERMAP;
typedef struct tagCSEnterMap                       	*LPCSENTERMAP;

struct tagCSSkillData;
typedef struct tagCSSkillData                      	CSSKILLDATA;
typedef struct tagCSSkillData                      	*LPCSSKILLDATA;

struct tagCSSkillList;
typedef struct tagCSSkillList                      	CSSKILLLIST;
typedef struct tagCSSkillList                      	*LPCSSKILLLIST;

struct tagCSPkInfo;
typedef struct tagCSPkInfo                         	CSPKINFO;
typedef struct tagCSPkInfo                         	*LPCSPKINFO;

struct tagCSRoleDetail;
typedef struct tagCSRoleDetail                     	CSROLEDETAIL;
typedef struct tagCSRoleDetail                     	*LPCSROLEDETAIL;

struct tagCSEnterWorld;
typedef struct tagCSEnterWorld                     	CSENTERWORLD;
typedef struct tagCSEnterWorld                     	*LPCSENTERWORLD;

struct tagCSRoleLoginRes;
typedef struct tagCSRoleLoginRes                   	CSROLELOGINRES;
typedef struct tagCSRoleLoginRes                   	*LPCSROLELOGINRES;

struct tagCSRoleNewReq;
typedef struct tagCSRoleNewReq                     	CSROLENEWREQ;
typedef struct tagCSRoleNewReq                     	*LPCSROLENEWREQ;

struct tagCSRoleNewRes;
typedef struct tagCSRoleNewRes                     	CSROLENEWRES;
typedef struct tagCSRoleNewRes                     	*LPCSROLENEWRES;

struct tagCSRoleDelReq;
typedef struct tagCSRoleDelReq                     	CSROLEDELREQ;
typedef struct tagCSRoleDelReq                     	*LPCSROLEDELREQ;

struct tagCSRoleDelRes;
typedef struct tagCSRoleDelRes                     	CSROLEDELRES;
typedef struct tagCSRoleDelRes                     	*LPCSROLEDELRES;

struct tagCSHeartBeatReq;
typedef struct tagCSHeartBeatReq                   	CSHEARTBEATREQ;
typedef struct tagCSHeartBeatReq                   	*LPCSHEARTBEATREQ;

struct tagCSBroadcastReq;
typedef struct tagCSBroadcastReq                   	CSBROADCASTREQ;
typedef struct tagCSBroadcastReq                   	*LPCSBROADCASTREQ;

struct tagCSBroadcastRes;
typedef struct tagCSBroadcastRes                   	CSBROADCASTRES;
typedef struct tagCSBroadcastRes                   	*LPCSBROADCASTRES;

struct tagCSRoleLogoutReq;
typedef struct tagCSRoleLogoutReq                  	CSROLELOGOUTREQ;
typedef struct tagCSRoleLogoutReq                  	*LPCSROLELOGOUTREQ;

struct tagCSAccLogoutReq;
typedef struct tagCSAccLogoutReq                   	CSACCLOGOUTREQ;
typedef struct tagCSAccLogoutReq                   	*LPCSACCLOGOUTREQ;

struct tagCSAccLogoutRes;
typedef struct tagCSAccLogoutRes                   	CSACCLOGOUTRES;
typedef struct tagCSAccLogoutRes                   	*LPCSACCLOGOUTRES;

struct tagCSDirReq;
typedef struct tagCSDirReq                         	CSDIRREQ;
typedef struct tagCSDirReq                         	*LPCSDIRREQ;

struct tagCSDirWorldInfo;
typedef struct tagCSDirWorldInfo                   	CSDIRWORLDINFO;
typedef struct tagCSDirWorldInfo                   	*LPCSDIRWORLDINFO;

struct tagCSDirBigWorld;
typedef struct tagCSDirBigWorld                    	CSDIRBIGWORLD;
typedef struct tagCSDirBigWorld                    	*LPCSDIRBIGWORLD;

struct tagCSDirWorldList;
typedef struct tagCSDirWorldList                   	CSDIRWORLDLIST;
typedef struct tagCSDirWorldList                   	*LPCSDIRWORLDLIST;

struct tagCSDirLatestInfo;
typedef struct tagCSDirLatestInfo                  	CSDIRLATESTINFO;
typedef struct tagCSDirLatestInfo                  	*LPCSDIRLATESTINFO;

struct tagCSDirLatest;
typedef struct tagCSDirLatest                      	CSDIRLATEST;
typedef struct tagCSDirLatest                      	*LPCSDIRLATEST;

struct tagCSDirErr;
typedef struct tagCSDirErr                         	CSDIRERR;
typedef struct tagCSDirErr                         	*LPCSDIRERR;

union tagCSDirInfo;
typedef union  tagCSDirInfo                        	CSDIRINFO;
typedef union  tagCSDirInfo                        	*LPCSDIRINFO;

struct tagCSDirRes;
typedef struct tagCSDirRes                         	CSDIRRES;
typedef struct tagCSDirRes                         	*LPCSDIRRES;

struct tagSysMsgLinkPos;
typedef struct tagSysMsgLinkPos                    	SYSMSGLINKPOS;
typedef struct tagSysMsgLinkPos                    	*LPSYSMSGLINKPOS;

struct tagCSSysMsg;
typedef struct tagCSSysMsg                         	CSSYSMSG;
typedef struct tagCSSysMsg                         	*LPCSSYSMSG;

struct tagCSPoint;
typedef struct tagCSPoint                          	CSPOINT;
typedef struct tagCSPoint                          	*LPCSPOINT;

struct tagCSWalk;
typedef struct tagCSWalk                           	CSWALK;
typedef struct tagCSWalk                           	*LPCSWALK;

struct tagCSTurn;
typedef struct tagCSTurn                           	CSTURN;
typedef struct tagCSTurn                           	*LPCSTURN;

union tagCSMoveData;
typedef union  tagCSMoveData                       	CSMOVEDATA;
typedef union  tagCSMoveData                       	*LPCSMOVEDATA;

struct tagCSMoveC;
typedef struct tagCSMoveC                          	CSMOVEC;
typedef struct tagCSMoveC                          	*LPCSMOVEC;

struct tagCSelectBirthLocS;
typedef struct tagCSelectBirthLocS                 	CSELECTBIRTHLOCS;
typedef struct tagCSelectBirthLocS                 	*LPCSELECTBIRTHLOCS;

struct tagCSelectBirthLocC;
typedef struct tagCSelectBirthLocC                 	CSELECTBIRTHLOCC;
typedef struct tagCSelectBirthLocC                 	*LPCSELECTBIRTHLOCC;

struct tagAdjustTime;
typedef struct tagAdjustTime                       	ADJUSTTIME;
typedef struct tagAdjustTime                       	*LPADJUSTTIME;

struct tagCSMoveStop;
typedef struct tagCSMoveStop                       	CSMOVESTOP;
typedef struct tagCSMoveStop                       	*LPCSMOVESTOP;

struct tagCSOneMspd;
typedef struct tagCSOneMspd                        	CSONEMSPD;
typedef struct tagCSOneMspd                        	*LPCSONEMSPD;

struct tagCSMspdInfo;
typedef struct tagCSMspdInfo                       	CSMSPDINFO;
typedef struct tagCSMspdInfo                       	*LPCSMSPDINFO;

struct tagCSMoveOther;
typedef struct tagCSMoveOther                      	CSMOVEOTHER;
typedef struct tagCSMoveOther                      	*LPCSMOVEOTHER;

struct tagCSLock;
typedef struct tagCSLock                           	CSLOCK;
typedef struct tagCSLock                           	*LPCSLOCK;

struct tagCSPetView;
typedef struct tagCSPetView                        	CSPETVIEW;
typedef struct tagCSPetView                        	*LPCSPETVIEW;

struct tagCSRolePetView;
typedef struct tagCSRolePetView                    	CSROLEPETVIEW;
typedef struct tagCSRolePetView                    	*LPCSROLEPETVIEW;

struct tagCSRoleFairyView;
typedef struct tagCSRoleFairyView                  	CSROLEFAIRYVIEW;
typedef struct tagCSRoleFairyView                  	*LPCSROLEFAIRYVIEW;

struct tagCSRoleClanView;
typedef struct tagCSRoleClanView                   	CSROLECLANVIEW;
typedef struct tagCSRoleClanView                   	*LPCSROLECLANVIEW;

struct tagCSRoleRideView;
typedef struct tagCSRoleRideView                   	CSROLERIDEVIEW;
typedef struct tagCSRoleRideView                   	*LPCSROLERIDEVIEW;

struct tagCSRoleMachineInfo;
typedef struct tagCSRoleMachineInfo                	CSROLEMACHINEINFO;
typedef struct tagCSRoleMachineInfo                	*LPCSROLEMACHINEINFO;

struct tagCSViewPrepareInfo;
typedef struct tagCSViewPrepareInfo                	CSVIEWPREPAREINFO;
typedef struct tagCSViewPrepareInfo                	*LPCSVIEWPREPAREINFO;

struct tagCSRoleItemView;
typedef struct tagCSRoleItemView                   	CSROLEITEMVIEW;
typedef struct tagCSRoleItemView                   	*LPCSROLEITEMVIEW;

struct tagCSPlayer;
typedef struct tagCSPlayer                         	CSPLAYER;
typedef struct tagCSPlayer                         	*LPCSPLAYER;

struct tagCSMonPKModeChg;
typedef struct tagCSMonPKModeChg                   	CSMONPKMODECHG;
typedef struct tagCSMonPKModeChg                   	*LPCSMONPKMODECHG;

struct tagCSMonFactoryInfo;
typedef struct tagCSMonFactoryInfo                 	CSMONFACTORYINFO;
typedef struct tagCSMonFactoryInfo                 	*LPCSMONFACTORYINFO;

struct tagCSMonPrepareAtkInfo;
typedef struct tagCSMonPrepareAtkInfo              	CSMONPREPAREATKINFO;
typedef struct tagCSMonPrepareAtkInfo              	*LPCSMONPREPAREATKINFO;

struct tagCSMonRongluinfo;
typedef struct tagCSMonRongluinfo                  	CSMONRONGLUINFO;
typedef struct tagCSMonRongluinfo                  	*LPCSMONRONGLUINFO;

struct tagCSMonLostTotem;
typedef struct tagCSMonLostTotem                   	CSMONLOSTTOTEM;
typedef struct tagCSMonLostTotem                   	*LPCSMONLOSTTOTEM;

struct tagCSMonster;
typedef struct tagCSMonster                        	CSMONSTER;
typedef struct tagCSMonster                        	*LPCSMONSTER;

struct tagCSNpc;
typedef struct tagCSNpc                            	CSNPC;
typedef struct tagCSNpc                            	*LPCSNPC;

struct tagCSDropItem;
typedef struct tagCSDropItem                       	CSDROPITEM;
typedef struct tagCSDropItem                       	*LPCSDROPITEM;

union tagCSObject;
typedef union  tagCSObject                         	CSOBJECT;
typedef union  tagCSObject                         	*LPCSOBJECT;

struct tagCSEnterView;
typedef struct tagCSEnterView                      	CSENTERVIEW;
typedef struct tagCSEnterView                      	*LPCSENTERVIEW;

struct tagHomeData;
typedef struct tagHomeData                         	HOMEDATA;
typedef struct tagHomeData                         	*LPHOMEDATA;

struct tagCSLeaveView;
typedef struct tagCSLeaveView                      	CSLEAVEVIEW;
typedef struct tagCSLeaveView                      	*LPCSLEAVEVIEW;

struct tagCSActionCmdRet;
typedef struct tagCSActionCmdRet                   	CSACTIONCMDRET;
typedef struct tagCSActionCmdRet                   	*LPCSACTIONCMDRET;

struct tagCSActionTakeDailyGoalAward;
typedef struct tagCSActionTakeDailyGoalAward       	CSACTIONTAKEDAILYGOALAWARD;
typedef struct tagCSActionTakeDailyGoalAward       	*LPCSACTIONTAKEDAILYGOALAWARD;

struct tagCSRuneItem;
typedef struct tagCSRuneItem                       	CSRUNEITEM;
typedef struct tagCSRuneItem                       	*LPCSRUNEITEM;

struct tagCSActionRuneLevelUp;
typedef struct tagCSActionRuneLevelUp              	CSACTIONRUNELEVELUP;
typedef struct tagCSActionRuneLevelUp              	*LPCSACTIONRUNELEVELUP;

struct tagCSActionResetRuneEx;
typedef struct tagCSActionResetRuneEx              	CSACTIONRESETRUNEEX;
typedef struct tagCSActionResetRuneEx              	*LPCSACTIONRESETRUNEEX;

struct tagCSActionRunneSkillChg;
typedef struct tagCSActionRunneSkillChg            	CSACTIONRUNNESKILLCHG;
typedef struct tagCSActionRunneSkillChg            	*LPCSACTIONRUNNESKILLCHG;

union tagCSActionDataC;
typedef union  tagCSActionDataC                    	CSACTIONDATAC;
typedef union  tagCSActionDataC                    	*LPCSACTIONDATAC;

struct tagCSActionReq;
typedef struct tagCSActionReq                      	CSACTIONREQ;
typedef struct tagCSActionReq                      	*LPCSACTIONREQ;

struct tagCSHeti;
typedef struct tagCSHeti                           	CSHETI;
typedef struct tagCSHeti                           	*LPCSHETI;

struct tagCSTest;
typedef struct tagCSTest                           	CSTEST;
typedef struct tagCSTest                           	*LPCSTEST;

struct tagCSLogicArea;
typedef struct tagCSLogicArea                      	CSLOGICAREA;
typedef struct tagCSLogicArea                      	*LPCSLOGICAREA;

struct tagCSActionFly;
typedef struct tagCSActionFly                      	CSACTIONFLY;
typedef struct tagCSActionFly                      	*LPCSACTIONFLY;

struct tagCSActionSkillLearn;
typedef struct tagCSActionSkillLearn               	CSACTIONSKILLLEARN;
typedef struct tagCSActionSkillLearn               	*LPCSACTIONSKILLLEARN;

struct tagCSActionState;
typedef struct tagCSActionState                    	CSACTIONSTATE;
typedef struct tagCSActionState                    	*LPCSACTIONSTATE;

struct tagCSActionDead;
typedef struct tagCSActionDead                     	CSACTIONDEAD;
typedef struct tagCSActionDead                     	*LPCSACTIONDEAD;

struct tagCSActionDestroy;
typedef struct tagCSActionDestroy                  	CSACTIONDESTROY;
typedef struct tagCSActionDestroy                  	*LPCSACTIONDESTROY;

struct tagCSActionRevive;
typedef struct tagCSActionRevive                   	CSACTIONREVIVE;
typedef struct tagCSActionRevive                   	*LPCSACTIONREVIVE;

struct tagCSHurt;
typedef struct tagCSHurt                           	CSHURT;
typedef struct tagCSHurt                           	*LPCSHURT;

struct tagCSDoBack;
typedef struct tagCSDoBack                         	CSDOBACK;
typedef struct tagCSDoBack                         	*LPCSDOBACK;

struct tagCSOneHit;
typedef struct tagCSOneHit                         	CSONEHIT;
typedef struct tagCSOneHit                         	*LPCSONEHIT;

struct tagCSHits;
typedef struct tagCSHits                           	CSHITS;
typedef struct tagCSHits                           	*LPCSHITS;

struct tagCSBallisticAtk;
typedef struct tagCSBallisticAtk                   	CSBALLISTICATK;
typedef struct tagCSBallisticAtk                   	*LPCSBALLISTICATK;

struct tagCSUIInfo;
typedef struct tagCSUIInfo                         	CSUIINFO;
typedef struct tagCSUIInfo                         	*LPCSUIINFO;

struct tagCSPakEnlarge;
typedef struct tagCSPakEnlarge                     	CSPAKENLARGE;
typedef struct tagCSPakEnlarge                     	*LPCSPAKENLARGE;

struct tagCSTeamAction;
typedef struct tagCSTeamAction                     	CSTEAMACTION;
typedef struct tagCSTeamAction                     	*LPCSTEAMACTION;

struct tagCSUseItem;
typedef struct tagCSUseItem                        	CSUSEITEM;
typedef struct tagCSUseItem                        	*LPCSUSEITEM;

struct tagCSEffect;
typedef struct tagCSEffect                         	CSEFFECT;
typedef struct tagCSEffect                         	*LPCSEFFECT;

struct tagCSTaskAction;
typedef struct tagCSTaskAction                     	CSTASKACTION;
typedef struct tagCSTaskAction                     	*LPCSTASKACTION;

struct tagCSAutoFly;
typedef struct tagCSAutoFly                        	CSAUTOFLY;
typedef struct tagCSAutoFly                        	*LPCSAUTOFLY;

struct tagCSCollectAction;
typedef struct tagCSCollectAction                  	CSCOLLECTACTION;
typedef struct tagCSCollectAction                  	*LPCSCOLLECTACTION;

struct tagCSActionQianXin;
typedef struct tagCSActionQianXin                  	CSACTIONQIANXIN;
typedef struct tagCSActionQianXin                  	*LPCSACTIONQIANXIN;

struct tagCSActionRide;
typedef struct tagCSActionRide                     	CSACTIONRIDE;
typedef struct tagCSActionRide                     	*LPCSACTIONRIDE;

struct tagCSActionRideLearn;
typedef struct tagCSActionRideLearn                	CSACTIONRIDELEARN;
typedef struct tagCSActionRideLearn                	*LPCSACTIONRIDELEARN;

struct tagCSActionRidePre;
typedef struct tagCSActionRidePre                  	CSACTIONRIDEPRE;
typedef struct tagCSActionRidePre                  	*LPCSACTIONRIDEPRE;

struct tagCSActionQiYue;
typedef struct tagCSActionQiYue                    	CSACTIONQIYUE;
typedef struct tagCSActionQiYue                    	*LPCSACTIONQIYUE;

struct tagCSActionStall;
typedef struct tagCSActionStall                    	CSACTIONSTALL;
typedef struct tagCSActionStall                    	*LPCSACTIONSTALL;

struct tagCSActionSit;
typedef struct tagCSActionSit                      	CSACTIONSIT;
typedef struct tagCSActionSit                      	*LPCSACTIONSIT;

struct tagCSHPChg;
typedef struct tagCSHPChg                          	CSHPCHG;
typedef struct tagCSHPChg                          	*LPCSHPCHG;

struct tagCSClanCityUpgrade;
typedef struct tagCSClanCityUpgrade                	CSCLANCITYUPGRADE;
typedef struct tagCSClanCityUpgrade                	*LPCSCLANCITYUPGRADE;

struct tagCSClanCityBuildingUpgrade;
typedef struct tagCSClanCityBuildingUpgrade        	CSCLANCITYBUILDINGUPGRADE;
typedef struct tagCSClanCityBuildingUpgrade        	*LPCSCLANCITYBUILDINGUPGRADE;

union tagClanExtraUIData;
typedef union  tagClanExtraUIData                  	CLANEXTRAUIDATA;
typedef union  tagClanExtraUIData                  	*LPCLANEXTRAUIDATA;

struct tagCSClanExtraUI;
typedef struct tagCSClanExtraUI                    	CSCLANEXTRAUI;
typedef struct tagCSClanExtraUI                    	*LPCSCLANEXTRAUI;

struct tagCSDesignationChg;
typedef struct tagCSDesignationChg                 	CSDESIGNATIONCHG;
typedef struct tagCSDesignationChg                 	*LPCSDESIGNATIONCHG;

struct tagCSActionFight;
typedef struct tagCSActionFight                    	CSACTIONFIGHT;
typedef struct tagCSActionFight                    	*LPCSACTIONFIGHT;

struct tagCSRideOnInfo;
typedef struct tagCSRideOnInfo                     	CSRIDEONINFO;
typedef struct tagCSRideOnInfo                     	*LPCSRIDEONINFO;

struct tagCSRoleFairyAction;
typedef struct tagCSRoleFairyAction                	CSROLEFAIRYACTION;
typedef struct tagCSRoleFairyAction                	*LPCSROLEFAIRYACTION;

struct tagCSPKModeChg;
typedef struct tagCSPKModeChg                      	CSPKMODECHG;
typedef struct tagCSPKModeChg                      	*LPCSPKMODECHG;

struct tagCSPKValChg;
typedef struct tagCSPKValChg                       	CSPKVALCHG;
typedef struct tagCSPKValChg                       	*LPCSPKVALCHG;

struct tagCSActionObjEnterMap;
typedef struct tagCSActionObjEnterMap              	CSACTIONOBJENTERMAP;
typedef struct tagCSActionObjEnterMap              	*LPCSACTIONOBJENTERMAP;

struct tagCSActionObjLeaveMap;
typedef struct tagCSActionObjLeaveMap              	CSACTIONOBJLEAVEMAP;
typedef struct tagCSActionObjLeaveMap              	*LPCSACTIONOBJLEAVEMAP;

struct tagCSActionMonLife;
typedef struct tagCSActionMonLife                  	CSACTIONMONLIFE;
typedef struct tagCSActionMonLife                  	*LPCSACTIONMONLIFE;

struct tagCSActionGetXp;
typedef struct tagCSActionGetXp                    	CSACTIONGETXP;
typedef struct tagCSActionGetXp                    	*LPCSACTIONGETXP;

struct tagCSActionCareerChg;
typedef struct tagCSActionCareerChg                	CSACTIONCAREERCHG;
typedef struct tagCSActionCareerChg                	*LPCSACTIONCAREERCHG;

struct tagCSActionTmpEnergeMax;
typedef struct tagCSActionTmpEnergeMax             	CSACTIONTMPENERGEMAX;
typedef struct tagCSActionTmpEnergeMax             	*LPCSACTIONTMPENERGEMAX;

struct tagCSActionBlockMskPoint;
typedef struct tagCSActionBlockMskPoint            	CSACTIONBLOCKMSKPOINT;
typedef struct tagCSActionBlockMskPoint            	*LPCSACTIONBLOCKMSKPOINT;

struct tagCSActionMonBootyFirst;
typedef struct tagCSActionMonBootyFirst            	CSACTIONMONBOOTYFIRST;
typedef struct tagCSActionMonBootyFirst            	*LPCSACTIONMONBOOTYFIRST;

struct tagCSActionRideOnMachine;
typedef struct tagCSActionRideOnMachine            	CSACTIONRIDEONMACHINE;
typedef struct tagCSActionRideOnMachine            	*LPCSACTIONRIDEONMACHINE;

struct tagCSActionLeaveMachine;
typedef struct tagCSActionLeaveMachine             	CSACTIONLEAVEMACHINE;
typedef struct tagCSActionLeaveMachine             	*LPCSACTIONLEAVEMACHINE;

struct tagCSActionMachineAttrChg;
typedef struct tagCSActionMachineAttrChg           	CSACTIONMACHINEATTRCHG;
typedef struct tagCSActionMachineAttrChg           	*LPCSACTIONMACHINEATTRCHG;

struct tagCSActionCloseDialog;
typedef struct tagCSActionCloseDialog              	CSACTIONCLOSEDIALOG;
typedef struct tagCSActionCloseDialog              	*LPCSACTIONCLOSEDIALOG;

struct tagCSActionPetCampaignPre;
typedef struct tagCSActionPetCampaignPre           	CSACTIONPETCAMPAIGNPRE;
typedef struct tagCSActionPetCampaignPre           	*LPCSACTIONPETCAMPAIGNPRE;

struct tagMachinePassengerUIInfo;
typedef struct tagMachinePassengerUIInfo           	MACHINEPASSENGERUIINFO;
typedef struct tagMachinePassengerUIInfo           	*LPMACHINEPASSENGERUIINFO;

struct tagCSActionMachinePassengerInfo;
typedef struct tagCSActionMachinePassengerInfo     	CSACTIONMACHINEPASSENGERINFO;
typedef struct tagCSActionMachinePassengerInfo     	*LPCSACTIONMACHINEPASSENGERINFO;

struct tagCSActionBeginLeaveMap;
typedef struct tagCSActionBeginLeaveMap            	CSACTIONBEGINLEAVEMAP;
typedef struct tagCSActionBeginLeaveMap            	*LPCSACTIONBEGINLEAVEMAP;

struct tagCSActionPKTime;
typedef struct tagCSActionPKTime                   	CSACTIONPKTIME;
typedef struct tagCSActionPKTime                   	*LPCSACTIONPKTIME;

struct tagCSActionDropItemUpdate;
typedef struct tagCSActionDropItemUpdate           	CSACTIONDROPITEMUPDATE;
typedef struct tagCSActionDropItemUpdate           	*LPCSACTIONDROPITEMUPDATE;

struct tagCSActionTmpItem;
typedef struct tagCSActionTmpItem                  	CSACTIONTMPITEM;
typedef struct tagCSActionTmpItem                  	*LPCSACTIONTMPITEM;

struct tagCSActionClanItem;
typedef struct tagCSActionClanItem                 	CSACTIONCLANITEM;
typedef struct tagCSActionClanItem                 	*LPCSACTIONCLANITEM;

struct tagCSActionPrepareAddByHit;
typedef struct tagCSActionPrepareAddByHit          	CSACTIONPREPAREADDBYHIT;
typedef struct tagCSActionPrepareAddByHit          	*LPCSACTIONPREPAREADDBYHIT;

struct tagCSActionLeaveState;
typedef struct tagCSActionLeaveState               	CSACTIONLEAVESTATE;
typedef struct tagCSActionLeaveState               	*LPCSACTIONLEAVESTATE;

struct tagCSActionMotion;
typedef struct tagCSActionMotion                   	CSACTIONMOTION;
typedef struct tagCSActionMotion                   	*LPCSACTIONMOTION;

struct tagCSActionTarget;
typedef struct tagCSActionTarget                   	CSACTIONTARGET;
typedef struct tagCSActionTarget                   	*LPCSACTIONTARGET;

struct tagCSActionUseItemPre;
typedef struct tagCSActionUseItemPre               	CSACTIONUSEITEMPRE;
typedef struct tagCSActionUseItemPre               	*LPCSACTIONUSEITEMPRE;

struct tagCSActionCatchPet;
typedef struct tagCSActionCatchPet                 	CSACTIONCATCHPET;
typedef struct tagCSActionCatchPet                 	*LPCSACTIONCATCHPET;

struct tagCSActionMachineItemLockInfo;
typedef struct tagCSActionMachineItemLockInfo      	CSACTIONMACHINEITEMLOCKINFO;
typedef struct tagCSActionMachineItemLockInfo      	*LPCSACTIONMACHINEITEMLOCKINFO;

struct tagCSActionMachineLeavePre;
typedef struct tagCSActionMachineLeavePre          	CSACTIONMACHINELEAVEPRE;
typedef struct tagCSActionMachineLeavePre          	*LPCSACTIONMACHINELEAVEPRE;

struct tagCSActionMachineLeaveBrk;
typedef struct tagCSActionMachineLeaveBrk          	CSACTIONMACHINELEAVEBRK;
typedef struct tagCSActionMachineLeaveBrk          	*LPCSACTIONMACHINELEAVEBRK;

struct tagCSAutoMoveData;
typedef struct tagCSAutoMoveData                   	CSAUTOMOVEDATA;
typedef struct tagCSAutoMoveData                   	*LPCSAUTOMOVEDATA;

union tagCSActionClientCmdData;
typedef union  tagCSActionClientCmdData            	CSACTIONCLIENTCMDDATA;
typedef union  tagCSActionClientCmdData            	*LPCSACTIONCLIENTCMDDATA;

struct tagCSActionClientCmd;
typedef struct tagCSActionClientCmd                	CSACTIONCLIENTCMD;
typedef struct tagCSActionClientCmd                	*LPCSACTIONCLIENTCMD;

struct tagCSActionFakeStatus;
typedef struct tagCSActionFakeStatus               	CSACTIONFAKESTATUS;
typedef struct tagCSActionFakeStatus               	*LPCSACTIONFAKESTATUS;

struct tagCSActionBattleLimitTime;
typedef struct tagCSActionBattleLimitTime          	CSACTIONBATTLELIMITTIME;
typedef struct tagCSActionBattleLimitTime          	*LPCSACTIONBATTLELIMITTIME;

struct tagCSActionMapPos;
typedef struct tagCSActionMapPos                   	CSACTIONMAPPOS;
typedef struct tagCSActionMapPos                   	*LPCSACTIONMAPPOS;

struct tagCSActionFenJiePre;
typedef struct tagCSActionFenJiePre                	CSACTIONFENJIEPRE;
typedef struct tagCSActionFenJiePre                	*LPCSACTIONFENJIEPRE;

struct tagCSActionFenJie;
typedef struct tagCSActionFenJie                   	CSACTIONFENJIE;
typedef struct tagCSActionFenJie                   	*LPCSACTIONFENJIE;

struct tagCSActionClanCityUpdate;
typedef struct tagCSActionClanCityUpdate           	CSACTIONCLANCITYUPDATE;
typedef struct tagCSActionClanCityUpdate           	*LPCSACTIONCLANCITYUPDATE;

struct tagCSActionDailyGoalInfo;
typedef struct tagCSActionDailyGoalInfo            	CSACTIONDAILYGOALINFO;
typedef struct tagCSActionDailyGoalInfo            	*LPCSACTIONDAILYGOALINFO;

struct tagCSActionDynActiveInfo;
typedef struct tagCSActionDynActiveInfo            	CSACTIONDYNACTIVEINFO;
typedef struct tagCSActionDynActiveInfo            	*LPCSACTIONDYNACTIVEINFO;

struct tagCSRecastInfo;
typedef struct tagCSRecastInfo                     	CSRECASTINFO;
typedef struct tagCSRecastInfo                     	*LPCSRECASTINFO;

struct tagCSActionResetRuneExRes;
typedef struct tagCSActionResetRuneExRes           	CSACTIONRESETRUNEEXRES;
typedef struct tagCSActionResetRuneExRes           	*LPCSACTIONRESETRUNEEXRES;

struct tagCSActionRuneExEnableInfo;
typedef struct tagCSActionRuneExEnableInfo         	CSACTIONRUNEEXENABLEINFO;
typedef struct tagCSActionRuneExEnableInfo         	*LPCSACTIONRUNEEXENABLEINFO;

struct tagCSActionDoRuneEx;
typedef struct tagCSActionDoRuneEx                 	CSACTIONDORUNEEX;
typedef struct tagCSActionDoRuneEx                 	*LPCSACTIONDORUNEEX;

struct tagCSActionArmStar;
typedef struct tagCSActionArmStar                  	CSACTIONARMSTAR;
typedef struct tagCSActionArmStar                  	*LPCSACTIONARMSTAR;

struct tagCSActionAccDeQuick;
typedef struct tagCSActionAccDeQuick               	CSACTIONACCDEQUICK;
typedef struct tagCSActionAccDeQuick               	*LPCSACTIONACCDEQUICK;

struct tagCSActionAchievementNew;
typedef struct tagCSActionAchievementNew           	CSACTIONACHIEVEMENTNEW;
typedef struct tagCSActionAchievementNew           	*LPCSACTIONACHIEVEMENTNEW;

struct tagCSActionAchievementList;
typedef struct tagCSActionAchievementList          	CSACTIONACHIEVEMENTLIST;
typedef struct tagCSActionAchievementList          	*LPCSACTIONACHIEVEMENTLIST;

struct tagCSActionArmWash;
typedef struct tagCSActionArmWash                  	CSACTIONARMWASH;
typedef struct tagCSActionArmWash                  	*LPCSACTIONARMWASH;

struct tagCSActionYesterdayInfo;
typedef struct tagCSActionYesterdayInfo            	CSACTIONYESTERDAYINFO;
typedef struct tagCSActionYesterdayInfo            	*LPCSACTIONYESTERDAYINFO;

struct tagCSActionCountDown;
typedef struct tagCSActionCountDown                	CSACTIONCOUNTDOWN;
typedef struct tagCSActionCountDown                	*LPCSACTIONCOUNTDOWN;

struct tagCSActionViewFlagChg;
typedef struct tagCSActionViewFlagChg              	CSACTIONVIEWFLAGCHG;
typedef struct tagCSActionViewFlagChg              	*LPCSACTIONVIEWFLAGCHG;

struct tagCSActionDailyBull;
typedef struct tagCSActionDailyBull                	CSACTIONDAILYBULL;
typedef struct tagCSActionDailyBull                	*LPCSACTIONDAILYBULL;

struct tagCSActionRunneSkillChgRet;
typedef struct tagCSActionRunneSkillChgRet         	CSACTIONRUNNESKILLCHGRET;
typedef struct tagCSActionRunneSkillChgRet         	*LPCSACTIONRUNNESKILLCHGRET;

struct tagCSActionClanMachinePworld;
typedef struct tagCSActionClanMachinePworld        	CSACTIONCLANMACHINEPWORLD;
typedef struct tagCSActionClanMachinePworld        	*LPCSACTIONCLANMACHINEPWORLD;

struct tagCSActionShamDead;
typedef struct tagCSActionShamDead                 	CSACTIONSHAMDEAD;
typedef struct tagCSActionShamDead                 	*LPCSACTIONSHAMDEAD;

struct tagCSActionColorFontLimit;
typedef struct tagCSActionColorFontLimit           	CSACTIONCOLORFONTLIMIT;
typedef struct tagCSActionColorFontLimit           	*LPCSACTIONCOLORFONTLIMIT;

struct tagCSActionMotionLimit;
typedef struct tagCSActionMotionLimit              	CSACTIONMOTIONLIMIT;
typedef struct tagCSActionMotionLimit              	*LPCSACTIONMOTIONLIMIT;

struct tagCSActionCowFinalRange;
typedef struct tagCSActionCowFinalRange            	CSACTIONCOWFINALRANGE;
typedef struct tagCSActionCowFinalRange            	*LPCSACTIONCOWFINALRANGE;

struct tagCSHangHaiRange;
typedef struct tagCSHangHaiRange                   	CSHANGHAIRANGE;
typedef struct tagCSHangHaiRange                   	*LPCSHANGHAIRANGE;

struct tagCSActionClanDonateLog;
typedef struct tagCSActionClanDonateLog            	CSACTIONCLANDONATELOG;
typedef struct tagCSActionClanDonateLog            	*LPCSACTIONCLANDONATELOG;

struct tagCSActionClanSkillInfo;
typedef struct tagCSActionClanSkillInfo            	CSACTIONCLANSKILLINFO;
typedef struct tagCSActionClanSkillInfo            	*LPCSACTIONCLANSKILLINFO;

struct tagCSActionPlayerClanSkillInfo;
typedef struct tagCSActionPlayerClanSkillInfo      	CSACTIONPLAYERCLANSKILLINFO;
typedef struct tagCSActionPlayerClanSkillInfo      	*LPCSACTIONPLAYERCLANSKILLINFO;

struct tagCSActionArmLevelUP;
typedef struct tagCSActionArmLevelUP               	CSACTIONARMLEVELUP;
typedef struct tagCSActionArmLevelUP               	*LPCSACTIONARMLEVELUP;

struct tagActionLevelFeng;
typedef struct tagActionLevelFeng                  	ACTIONLEVELFENG;
typedef struct tagActionLevelFeng                  	*LPACTIONLEVELFENG;

struct tagActionWorshipEggify;
typedef struct tagActionWorshipEggify              	ACTIONWORSHIPEGGIFY;
typedef struct tagActionWorshipEggify              	*LPACTIONWORSHIPEGGIFY;

struct tagActionBeachInfo;
typedef struct tagActionBeachInfo                  	ACTIONBEACHINFO;
typedef struct tagActionBeachInfo                  	*LPACTIONBEACHINFO;

struct tagActionVipInfo;
typedef struct tagActionVipInfo                    	ACTIONVIPINFO;
typedef struct tagActionVipInfo                    	*LPACTIONVIPINFO;

struct tagActionBeachBuff;
typedef struct tagActionBeachBuff                  	ACTIONBEACHBUFF;
typedef struct tagActionBeachBuff                  	*LPACTIONBEACHBUFF;

struct tagActionXuKongEnergy;
typedef struct tagActionXuKongEnergy               	ACTIONXUKONGENERGY;
typedef struct tagActionXuKongEnergy               	*LPACTIONXUKONGENERGY;

struct tagCSActionClanWarAwardInfo;
typedef struct tagCSActionClanWarAwardInfo         	CSACTIONCLANWARAWARDINFO;
typedef struct tagCSActionClanWarAwardInfo         	*LPCSACTIONCLANWARAWARDINFO;

struct tagMapShowMonCamp;
typedef struct tagMapShowMonCamp                   	MAPSHOWMONCAMP;
typedef struct tagMapShowMonCamp                   	*LPMAPSHOWMONCAMP;

union tagCSMapShowData;
typedef union  tagCSMapShowData                    	CSMAPSHOWDATA;
typedef union  tagCSMapShowData                    	*LPCSMAPSHOWDATA;

struct tagCSActionMapShow;
typedef struct tagCSActionMapShow                  	CSACTIONMAPSHOW;
typedef struct tagCSActionMapShow                  	*LPCSACTIONMAPSHOW;

struct tagCSActionClanBattleApplyInfo;
typedef struct tagCSActionClanBattleApplyInfo      	CSACTIONCLANBATTLEAPPLYINFO;
typedef struct tagCSActionClanBattleApplyInfo      	*LPCSACTIONCLANBATTLEAPPLYINFO;

union tagActionPrecreateGiftVerifyData;
typedef union  tagActionPrecreateGiftVerifyData    	ACTIONPRECREATEGIFTVERIFYDATA;
typedef union  tagActionPrecreateGiftVerifyData    	*LPACTIONPRECREATEGIFTVERIFYDATA;

struct tagCSActionPrecreateGiftVerify;
typedef struct tagCSActionPrecreateGiftVerify      	CSACTIONPRECREATEGIFTVERIFY;
typedef struct tagCSActionPrecreateGiftVerify      	*LPCSACTIONPRECREATEGIFTVERIFY;

struct tagCSActionWeddingDsn;
typedef struct tagCSActionWeddingDsn               	CSACTIONWEDDINGDSN;
typedef struct tagCSActionWeddingDsn               	*LPCSACTIONWEDDINGDSN;

struct tagCSActionSculptChg;
typedef struct tagCSActionSculptChg                	CSACTIONSCULPTCHG;
typedef struct tagCSActionSculptChg                	*LPCSACTIONSCULPTCHG;

union tagCSActionDataS;
typedef union  tagCSActionDataS                    	CSACTIONDATAS;
typedef union  tagCSActionDataS                    	*LPCSACTIONDATAS;

struct tagCSActionRes;
typedef struct tagCSActionRes                      	CSACTIONRES;
typedef struct tagCSActionRes                      	*LPCSACTIONRES;

struct tagCSChatReq;
typedef struct tagCSChatReq                        	CSCHATREQ;
typedef struct tagCSChatReq                        	*LPCSCHATREQ;

struct tagCSChatRes;
typedef struct tagCSChatRes                        	CSCHATRES;
typedef struct tagCSChatRes                        	*LPCSCHATRES;

struct tagSkillCool;
typedef struct tagSkillCool                        	SKILLCOOL;
typedef struct tagSkillCool                        	*LPSKILLCOOL;

struct tagSetSkillCDTime;
typedef struct tagSetSkillCDTime                   	SETSKILLCDTIME;
typedef struct tagSetSkillCDTime                   	*LPSETSKILLCDTIME;

union tagCSSkillInfoData;
typedef union  tagCSSkillInfoData                  	CSSKILLINFODATA;
typedef union  tagCSSkillInfoData                  	*LPCSSKILLINFODATA;

struct tagCSSkillInfo;
typedef struct tagCSSkillInfo                      	CSSKILLINFO;
typedef struct tagCSSkillInfo                      	*LPCSSKILLINFO;

struct tagCSSkillPre;
typedef struct tagCSSkillPre                       	CSSKILLPRE;
typedef struct tagCSSkillPre                       	*LPCSSKILLPRE;

struct tagCSSkillPreS;
typedef struct tagCSSkillPreS                      	CSSKILLPRES;
typedef struct tagCSSkillPreS                      	*LPCSSKILLPRES;

struct tagCSSkillBrk;
typedef struct tagCSSkillBrk                       	CSSKILLBRK;
typedef struct tagCSSkillBrk                       	*LPCSSKILLBRK;

union tagCSSkillBrkData;
typedef union  tagCSSkillBrkData                   	CSSKILLBRKDATA;
typedef union  tagCSSkillBrkData                   	*LPCSSKILLBRKDATA;

struct tagCSSkillBrkS;
typedef struct tagCSSkillBrkS                      	CSSKILLBRKS;
typedef struct tagCSSkillBrkS                      	*LPCSSKILLBRKS;

struct tagCSSkillAtk;
typedef struct tagCSSkillAtk                       	CSSKILLATK;
typedef struct tagCSSkillAtk                       	*LPCSSKILLATK;

struct tagCSSkillAtkS;
typedef struct tagCSSkillAtkS                      	CSSKILLATKS;
typedef struct tagCSSkillAtkS                      	*LPCSSKILLATKS;

struct tagCSRidePre;
typedef struct tagCSRidePre                        	CSRIDEPRE;
typedef struct tagCSRidePre                        	*LPCSRIDEPRE;

struct tagCSRidePreS;
typedef struct tagCSRidePreS                       	CSRIDEPRES;
typedef struct tagCSRidePreS                       	*LPCSRIDEPRES;

struct tagCSRideOn;
typedef struct tagCSRideOn                         	CSRIDEON;
typedef struct tagCSRideOn                         	*LPCSRIDEON;

struct tagCSRideBrk;
typedef struct tagCSRideBrk                        	CSRIDEBRK;
typedef struct tagCSRideBrk                        	*LPCSRIDEBRK;

struct tagCSRideListChg;
typedef struct tagCSRideListChg                    	CSRIDELISTCHG;
typedef struct tagCSRideListChg                    	*LPCSRIDELISTCHG;

struct tagCSRideDrop;
typedef struct tagCSRideDrop                       	CSRIDEDROP;
typedef struct tagCSRideDrop                       	*LPCSRIDEDROP;

struct tagCSRideApply;
typedef struct tagCSRideApply                      	CSRIDEAPPLY;
typedef struct tagCSRideApply                      	*LPCSRIDEAPPLY;

struct tagCSRideApplyAccpet;
typedef struct tagCSRideApplyAccpet                	CSRIDEAPPLYACCPET;
typedef struct tagCSRideApplyAccpet                	*LPCSRIDEAPPLYACCPET;

struct tagCSRideInvite;
typedef struct tagCSRideInvite                     	CSRIDEINVITE;
typedef struct tagCSRideInvite                     	*LPCSRIDEINVITE;

struct tagCSRideInviteAccpet;
typedef struct tagCSRideInviteAccpet               	CSRIDEINVITEACCPET;
typedef struct tagCSRideInviteAccpet               	*LPCSRIDEINVITEACCPET;

struct tagCSRideNpcSelect;
typedef struct tagCSRideNpcSelect                  	CSRIDENPCSELECT;
typedef struct tagCSRideNpcSelect                  	*LPCSRIDENPCSELECT;

struct tagCSRideLevelUp;
typedef struct tagCSRideLevelUp                    	CSRIDELEVELUP;
typedef struct tagCSRideLevelUp                    	*LPCSRIDELEVELUP;

struct tagCSRideApplyRefuse;
typedef struct tagCSRideApplyRefuse                	CSRIDEAPPLYREFUSE;
typedef struct tagCSRideApplyRefuse                	*LPCSRIDEAPPLYREFUSE;

struct tagCSRideInviteRefuse;
typedef struct tagCSRideInviteRefuse               	CSRIDEINVITEREFUSE;
typedef struct tagCSRideInviteRefuse               	*LPCSRIDEINVITEREFUSE;

struct tagCSRideKick;
typedef struct tagCSRideKick                       	CSRIDEKICK;
typedef struct tagCSRideKick                       	*LPCSRIDEKICK;

struct tagCSRideMoveLevel;
typedef struct tagCSRideMoveLevel                  	CSRIDEMOVELEVEL;
typedef struct tagCSRideMoveLevel                  	*LPCSRIDEMOVELEVEL;

union tagCSRideCltData;
typedef union  tagCSRideCltData                    	CSRIDECLTDATA;
typedef union  tagCSRideCltData                    	*LPCSRIDECLTDATA;

struct tagCSRideClt;
typedef struct tagCSRideClt                        	CSRIDECLT;
typedef struct tagCSRideClt                        	*LPCSRIDECLT;

struct tagRideApplyInfo;
typedef struct tagRideApplyInfo                    	RIDEAPPLYINFO;
typedef struct tagRideApplyInfo                    	*LPRIDEAPPLYINFO;

union tagCSRideSvrData;
typedef union  tagCSRideSvrData                    	CSRIDESVRDATA;
typedef union  tagCSRideSvrData                    	*LPCSRIDESVRDATA;

struct tagCSRideSvr;
typedef struct tagCSRideSvr                        	CSRIDESVR;
typedef struct tagCSRideSvr                        	*LPCSRIDESVR;

struct tagCSPetAttrHP;
typedef struct tagCSPetAttrHP                      	CSPETATTRHP;
typedef struct tagCSPetAttrHP                      	*LPCSPETATTRHP;

struct tagCSPetAttrMaxHP;
typedef struct tagCSPetAttrMaxHP                   	CSPETATTRMAXHP;
typedef struct tagCSPetAttrMaxHP                   	*LPCSPETATTRMAXHP;

union tagCSPetAttrValue;
typedef union  tagCSPetAttrValue                   	CSPETATTRVALUE;
typedef union  tagCSPetAttrValue                   	*LPCSPETATTRVALUE;

struct tagCSPetAttrChg;
typedef struct tagCSPetAttrChg                     	CSPETATTRCHG;
typedef struct tagCSPetAttrChg                     	*LPCSPETATTRCHG;

struct tagCSPetSvrStrengthen;
typedef struct tagCSPetSvrStrengthen               	CSPETSVRSTRENGTHEN;
typedef struct tagCSPetSvrStrengthen               	*LPCSPETSVRSTRENGTHEN;

struct tagCSPetSvrFightAttr;
typedef struct tagCSPetSvrFightAttr                	CSPETSVRFIGHTATTR;
typedef struct tagCSPetSvrFightAttr                	*LPCSPETSVRFIGHTATTR;

struct tagCSPetWatchInfo;
typedef struct tagCSPetWatchInfo                   	CSPETWATCHINFO;
typedef struct tagCSPetWatchInfo                   	*LPCSPETWATCHINFO;

struct tagCSPetFuseInviteInfo;
typedef struct tagCSPetFuseInviteInfo              	CSPETFUSEINVITEINFO;
typedef struct tagCSPetFuseInviteInfo              	*LPCSPETFUSEINVITEINFO;

struct tagCSPetFuseUI;
typedef struct tagCSPetFuseUI                      	CSPETFUSEUI;
typedef struct tagCSPetFuseUI                      	*LPCSPETFUSEUI;

struct tagCSPetFuseReject;
typedef struct tagCSPetFuseReject                  	CSPETFUSEREJECT;
typedef struct tagCSPetFuseReject                  	*LPCSPETFUSEREJECT;

struct tagCSPetFuseAccept;
typedef struct tagCSPetFuseAccept                  	CSPETFUSEACCEPT;
typedef struct tagCSPetFuseAccept                  	*LPCSPETFUSEACCEPT;

struct tagCSPetFuseCancel;
typedef struct tagCSPetFuseCancel                  	CSPETFUSECANCEL;
typedef struct tagCSPetFuseCancel                  	*LPCSPETFUSECANCEL;

struct tagCSPetFuseDeal;
typedef struct tagCSPetFuseDeal                    	CSPETFUSEDEAL;
typedef struct tagCSPetFuseDeal                    	*LPCSPETFUSEDEAL;

struct tagCSPetFuseBaby;
typedef struct tagCSPetFuseBaby                    	CSPETFUSEBABY;
typedef struct tagCSPetFuseBaby                    	*LPCSPETFUSEBABY;

struct tagCSPetFuseSucc;
typedef struct tagCSPetFuseSucc                    	CSPETFUSESUCC;
typedef struct tagCSPetFuseSucc                    	*LPCSPETFUSESUCC;

struct tagCSPetWashGeniusInfo;
typedef struct tagCSPetWashGeniusInfo              	CSPETWASHGENIUSINFO;
typedef struct tagCSPetWashGeniusInfo              	*LPCSPETWASHGENIUSINFO;

struct tagCSPetActInfo;
typedef struct tagCSPetActInfo                     	CSPETACTINFO;
typedef struct tagCSPetActInfo                     	*LPCSPETACTINFO;

struct tagCSResetSkillSucc;
typedef struct tagCSResetSkillSucc                 	CSRESETSKILLSUCC;
typedef struct tagCSResetSkillSucc                 	*LPCSRESETSKILLSUCC;

struct tagCSPetMoveStarSucc;
typedef struct tagCSPetMoveStarSucc                	CSPETMOVESTARSUCC;
typedef struct tagCSPetMoveStarSucc                	*LPCSPETMOVESTARSUCC;

struct tagCSPetEatSucc;
typedef struct tagCSPetEatSucc                     	CSPETEATSUCC;
typedef struct tagCSPetEatSucc                     	*LPCSPETEATSUCC;

struct tagCSPetStepUpSucc;
typedef struct tagCSPetStepUpSucc                  	CSPETSTEPUPSUCC;
typedef struct tagCSPetStepUpSucc                  	*LPCSPETSTEPUPSUCC;

struct tagCSPetImpUpSucc;
typedef struct tagCSPetImpUpSucc                   	CSPETIMPUPSUCC;
typedef struct tagCSPetImpUpSucc                   	*LPCSPETIMPUPSUCC;

struct tagCSPetGeniusLearnSucc;
typedef struct tagCSPetGeniusLearnSucc             	CSPETGENIUSLEARNSUCC;
typedef struct tagCSPetGeniusLearnSucc             	*LPCSPETGENIUSLEARNSUCC;

struct tagCSPetWashHighSucc;
typedef struct tagCSPetWashHighSucc                	CSPETWASHHIGHSUCC;
typedef struct tagCSPetWashHighSucc                	*LPCSPETWASHHIGHSUCC;

struct tagCSPetDelInfo;
typedef struct tagCSPetDelInfo                     	CSPETDELINFO;
typedef struct tagCSPetDelInfo                     	*LPCSPETDELINFO;

struct tagCSPetUnbindSvr;
typedef struct tagCSPetUnbindSvr                   	CSPETUNBINDSVR;
typedef struct tagCSPetUnbindSvr                   	*LPCSPETUNBINDSVR;

union tagCSPetSvrData;
typedef union  tagCSPetSvrData                     	CSPETSVRDATA;
typedef union  tagCSPetSvrData                     	*LPCSPETSVRDATA;

struct tagCSPetSvr;
typedef struct tagCSPetSvr                         	CSPETSVR;
typedef struct tagCSPetSvr                         	*LPCSPETSVR;

struct tagCSPetAct;
typedef struct tagCSPetAct                         	CSPETACT;
typedef struct tagCSPetAct                         	*LPCSPETACT;

struct tagCSPetImpUp;
typedef struct tagCSPetImpUp                       	CSPETIMPUP;
typedef struct tagCSPetImpUp                       	*LPCSPETIMPUP;

struct tagCSPetHetiEnd;
typedef struct tagCSPetHetiEnd                     	CSPETHETIEND;
typedef struct tagCSPetHetiEnd                     	*LPCSPETHETIEND;

struct tagCSPetSkillUp;
typedef struct tagCSPetSkillUp                     	CSPETSKILLUP;
typedef struct tagCSPetSkillUp                     	*LPCSPETSKILLUP;

struct tagCSPetSkillLearn;
typedef struct tagCSPetSkillLearn                  	CSPETSKILLLEARN;
typedef struct tagCSPetSkillLearn                  	*LPCSPETSKILLLEARN;

struct tagCSPetWashSkillGrid;
typedef struct tagCSPetWashSkillGrid               	CSPETWASHSKILLGRID;
typedef struct tagCSPetWashSkillGrid               	*LPCSPETWASHSKILLGRID;

struct tagCSPetStrengthen;
typedef struct tagCSPetStrengthen                  	CSPETSTRENGTHEN;
typedef struct tagCSPetStrengthen                  	*LPCSPETSTRENGTHEN;

struct tagCSPetReStren;
typedef struct tagCSPetReStren                     	CSPETRESTREN;
typedef struct tagCSPetReStren                     	*LPCSPETRESTREN;

struct tagCSPetChgName;
typedef struct tagCSPetChgName                     	CSPETCHGNAME;
typedef struct tagCSPetChgName                     	*LPCSPETCHGNAME;

struct tagCSPetLockSkill;
typedef struct tagCSPetLockSkill                   	CSPETLOCKSKILL;
typedef struct tagCSPetLockSkill                   	*LPCSPETLOCKSKILL;

struct tagCSPetSkillReset;
typedef struct tagCSPetSkillReset                  	CSPETSKILLRESET;
typedef struct tagCSPetSkillReset                  	*LPCSPETSKILLRESET;

struct tagCSPetSkillUpDate;
typedef struct tagCSPetSkillUpDate                 	CSPETSKILLUPDATE;
typedef struct tagCSPetSkillUpDate                 	*LPCSPETSKILLUPDATE;

struct tagCSPetCltWatch;
typedef struct tagCSPetCltWatch                    	CSPETCLTWATCH;
typedef struct tagCSPetCltWatch                    	*LPCSPETCLTWATCH;

struct tagCSPetAddSkillGrid;
typedef struct tagCSPetAddSkillGrid                	CSPETADDSKILLGRID;
typedef struct tagCSPetAddSkillGrid                	*LPCSPETADDSKILLGRID;

struct tagCSPetStepUp;
typedef struct tagCSPetStepUp                      	CSPETSTEPUP;
typedef struct tagCSPetStepUp                      	*LPCSPETSTEPUP;

struct tagCSPetFuseInvite;
typedef struct tagCSPetFuseInvite                  	CSPETFUSEINVITE;
typedef struct tagCSPetFuseInvite                  	*LPCSPETFUSEINVITE;

struct tagCSPetStrengthenSave;
typedef struct tagCSPetStrengthenSave              	CSPETSTRENGTHENSAVE;
typedef struct tagCSPetStrengthenSave              	*LPCSPETSTRENGTHENSAVE;

struct tagCSPetWashGenius;
typedef struct tagCSPetWashGenius                  	CSPETWASHGENIUS;
typedef struct tagCSPetWashGenius                  	*LPCSPETWASHGENIUS;

struct tagCSPetWashGeniusSave;
typedef struct tagCSPetWashGeniusSave              	CSPETWASHGENIUSSAVE;
typedef struct tagCSPetWashGeniusSave              	*LPCSPETWASHGENIUSSAVE;

struct tagPetChgMode;
typedef struct tagPetChgMode                       	PETCHGMODE;
typedef struct tagPetChgMode                       	*LPPETCHGMODE;

struct tagCSPetLoveLevelUp;
typedef struct tagCSPetLoveLevelUp                 	CSPETLOVELEVELUP;
typedef struct tagCSPetLoveLevelUp                 	*LPCSPETLOVELEVELUP;

struct tagCSPetMoveStar;
typedef struct tagCSPetMoveStar                    	CSPETMOVESTAR;
typedef struct tagCSPetMoveStar                    	*LPCSPETMOVESTAR;

struct tagCSPetEat;
typedef struct tagCSPetEat                         	CSPETEAT;
typedef struct tagCSPetEat                         	*LPCSPETEAT;

struct tagCSPetGeniusLearn;
typedef struct tagCSPetGeniusLearn                 	CSPETGENIUSLEARN;
typedef struct tagCSPetGeniusLearn                 	*LPCSPETGENIUSLEARN;

struct tagCSPetUnbind;
typedef struct tagCSPetUnbind                      	CSPETUNBIND;
typedef struct tagCSPetUnbind                      	*LPCSPETUNBIND;

union tagCSPetCltData;
typedef union  tagCSPetCltData                     	CSPETCLTDATA;
typedef union  tagCSPetCltData                     	*LPCSPETCLTDATA;

struct tagCSPetClt;
typedef struct tagCSPetClt                         	CSPETCLT;
typedef struct tagCSPetClt                         	*LPCSPETCLT;

struct tagCSChangeCoinInto;
typedef struct tagCSChangeCoinInto                 	CSCHANGECOININTO;
typedef struct tagCSChangeCoinInto                 	*LPCSCHANGECOININTO;

struct tagCSReviveAcceptSkill;
typedef struct tagCSReviveAcceptSkill              	CSREVIVEACCEPTSKILL;
typedef struct tagCSReviveAcceptSkill              	*LPCSREVIVEACCEPTSKILL;

union tagCSReviveData;
typedef union  tagCSReviveData                     	CSREVIVEDATA;
typedef union  tagCSReviveData                     	*LPCSREVIVEDATA;

struct tagCSRevive;
typedef struct tagCSRevive                         	CSREVIVE;
typedef struct tagCSRevive                         	*LPCSREVIVE;

union tagDlgDataC;
typedef union  tagDlgDataC                         	DLGDATAC;
typedef union  tagDlgDataC                         	*LPDLGDATAC;

struct tagCSDlgC;
typedef struct tagCSDlgC                           	CSDLGC;
typedef struct tagCSDlgC                           	*LPCSDLGC;

struct tagDlgOneOpt;
typedef struct tagDlgOneOpt                        	DLGONEOPT;
typedef struct tagDlgOneOpt                        	*LPDLGONEOPT;

struct tagDlgOptS;
typedef struct tagDlgOptS                          	DLGOPTS;
typedef struct tagDlgOptS                          	*LPDLGOPTS;

struct tagDlgAnswer;
typedef struct tagDlgAnswer                        	DLGANSWER;
typedef struct tagDlgAnswer                        	*LPDLGANSWER;

struct tagCSDlgCommit;
typedef struct tagCSDlgCommit                      	CSDLGCOMMIT;
typedef struct tagCSDlgCommit                      	*LPCSDLGCOMMIT;

union tagDlgDataS;
typedef union  tagDlgDataS                         	DLGDATAS;
typedef union  tagDlgDataS                         	*LPDLGDATAS;

struct tagCSDlgS;
typedef struct tagCSDlgS                           	CSDLGS;
typedef struct tagCSDlgS                           	*LPCSDLGS;

struct tagCSChooseS;
typedef struct tagCSChooseS                        	CSCHOOSES;
typedef struct tagCSChooseS                        	*LPCSCHOOSES;

struct tagCSChooseC;
typedef struct tagCSChooseC                        	CSCHOOSEC;
typedef struct tagCSChooseC                        	*LPCSCHOOSEC;

struct tagCSMovieStartS;
typedef struct tagCSMovieStartS                    	CSMOVIESTARTS;
typedef struct tagCSMovieStartS                    	*LPCSMOVIESTARTS;

struct tagCSOpenItemMap;
typedef struct tagCSOpenItemMap                    	CSOPENITEMMAP;
typedef struct tagCSOpenItemMap                    	*LPCSOPENITEMMAP;

struct tagCSAdjustUI;
typedef struct tagCSAdjustUI                       	CSADJUSTUI;
typedef struct tagCSAdjustUI                       	*LPCSADJUSTUI;

struct tagCSWear;
typedef struct tagCSWear                           	CSWEAR;
typedef struct tagCSWear                           	*LPCSWEAR;

struct tagCSAmm;
typedef struct tagCSAmm                            	CSAMM;
typedef struct tagCSAmm                            	*LPCSAMM;

struct tagCSAddFitGrid;
typedef struct tagCSAddFitGrid                     	CSADDFITGRID;
typedef struct tagCSAddFitGrid                     	*LPCSADDFITGRID;

struct tagCSSelectFashionSuit;
typedef struct tagCSSelectFashionSuit              	CSSELECTFASHIONSUIT;
typedef struct tagCSSelectFashionSuit              	*LPCSSELECTFASHIONSUIT;

union tagCSAdjustDataC;
typedef union  tagCSAdjustDataC                    	CSADJUSTDATAC;
typedef union  tagCSAdjustDataC                    	*LPCSADJUSTDATAC;

struct tagCSAdjustC;
typedef struct tagCSAdjustC                        	CSADJUSTC;
typedef struct tagCSAdjustC                        	*LPCSADJUSTC;

struct tagCSGeniusInfo;
typedef struct tagCSGeniusInfo                     	CSGENIUSINFO;
typedef struct tagCSGeniusInfo                     	*LPCSGENIUSINFO;

struct tagCSSkillReduceCdTime;
typedef struct tagCSSkillReduceCdTime              	CSSKILLREDUCECDTIME;
typedef struct tagCSSkillReduceCdTime              	*LPCSSKILLREDUCECDTIME;

struct tagCSSkillReduceCdTimeArr;
typedef struct tagCSSkillReduceCdTimeArr           	CSSKILLREDUCECDTIMEARR;
typedef struct tagCSSkillReduceCdTimeArr           	*LPCSSKILLREDUCECDTIMEARR;

union tagCSDiathesisInfoData;
typedef union  tagCSDiathesisInfoData              	CSDIATHESISINFODATA;
typedef union  tagCSDiathesisInfoData              	*LPCSDIATHESISINFODATA;

struct tagCSDiathesisInfo;
typedef struct tagCSDiathesisInfo                  	CSDIATHESISINFO;
typedef struct tagCSDiathesisInfo                  	*LPCSDIATHESISINFO;

struct tagCSPackageMove;
typedef struct tagCSPackageMove                    	CSPACKAGEMOVE;
typedef struct tagCSPackageMove                    	*LPCSPACKAGEMOVE;

struct tagCSPackageMoney;
typedef struct tagCSPackageMoney                   	CSPACKAGEMONEY;
typedef struct tagCSPackageMoney                   	*LPCSPACKAGEMONEY;

struct tagCSPackageUse;
typedef struct tagCSPackageUse                     	CSPACKAGEUSE;
typedef struct tagCSPackageUse                     	*LPCSPACKAGEUSE;

struct tagCSPackageArrange;
typedef struct tagCSPackageArrange                 	CSPACKAGEARRANGE;
typedef struct tagCSPackageArrange                 	*LPCSPACKAGEARRANGE;

struct tagCSPackagePick;
typedef struct tagCSPackagePick                    	CSPACKAGEPICK;
typedef struct tagCSPackagePick                    	*LPCSPACKAGEPICK;

struct tagCSPackagePickSelect;
typedef struct tagCSPackagePickSelect              	CSPACKAGEPICKSELECT;
typedef struct tagCSPackagePickSelect              	*LPCSPACKAGEPICKSELECT;

struct tagCSPackageTmpDrop;
typedef struct tagCSPackageTmpDrop                 	CSPACKAGETMPDROP;
typedef struct tagCSPackageTmpDrop                 	*LPCSPACKAGETMPDROP;

struct tagCSPackageInlay;
typedef struct tagCSPackageInlay                   	CSPACKAGEINLAY;
typedef struct tagCSPackageInlay                   	*LPCSPACKAGEINLAY;

struct tagCSPackageFittingsPick;
typedef struct tagCSPackageFittingsPick            	CSPACKAGEFITTINGSPICK;
typedef struct tagCSPackageFittingsPick            	*LPCSPACKAGEFITTINGSPICK;

struct tagCSPackageMoveAllShopping;
typedef struct tagCSPackageMoveAllShopping         	CSPACKAGEMOVEALLSHOPPING;
typedef struct tagCSPackageMoveAllShopping         	*LPCSPACKAGEMOVEALLSHOPPING;

struct tagCSPackageCangBaoTuReset;
typedef struct tagCSPackageCangBaoTuReset          	CSPACKAGECANGBAOTURESET;
typedef struct tagCSPackageCangBaoTuReset          	*LPCSPACKAGECANGBAOTURESET;

struct tagPackageUseBrk;
typedef struct tagPackageUseBrk                    	PACKAGEUSEBRK;
typedef struct tagPackageUseBrk                    	*LPPACKAGEUSEBRK;

union tagCSPackageReqData;
typedef union  tagCSPackageReqData                 	CSPACKAGEREQDATA;
typedef union  tagCSPackageReqData                 	*LPCSPACKAGEREQDATA;

struct tagCSPackageReq;
typedef struct tagCSPackageReq                     	CSPACKAGEREQ;
typedef struct tagCSPackageReq                     	*LPCSPACKAGEREQ;

struct tagCSRoleItem;
typedef struct tagCSRoleItem                       	CSROLEITEM;
typedef struct tagCSRoleItem                       	*LPCSROLEITEM;

struct tagCSItemChg;
typedef struct tagCSItemChg                        	CSITEMCHG;
typedef struct tagCSItemChg                        	*LPCSITEMCHG;

struct tagCSRoleArm;
typedef struct tagCSRoleArm                        	CSROLEARM;
typedef struct tagCSRoleArm                        	*LPCSROLEARM;

struct tagCSArmChg;
typedef struct tagCSArmChg                         	CSARMCHG;
typedef struct tagCSArmChg                         	*LPCSARMCHG;

struct tagRolePackageChg;
typedef struct tagRolePackageChg                   	ROLEPACKAGECHG;
typedef struct tagRolePackageChg                   	*LPROLEPACKAGECHG;

struct tagCSRolePet;
typedef struct tagCSRolePet                        	CSROLEPET;
typedef struct tagCSRolePet                        	*LPCSROLEPET;

struct tagPetPackageChg;
typedef struct tagPetPackageChg                    	PETPACKAGECHG;
typedef struct tagPetPackageChg                    	*LPPETPACKAGECHG;

struct tagCSBootyInfo;
typedef struct tagCSBootyInfo                      	CSBOOTYINFO;
typedef struct tagCSBootyInfo                      	*LPCSBOOTYINFO;

struct tagEtPkgNumChg;
typedef struct tagEtPkgNumChg                      	ETPKGNUMCHG;
typedef struct tagEtPkgNumChg                      	*LPETPKGNUMCHG;

union tagCSPackageInfoData;
typedef union  tagCSPackageInfoData                	CSPACKAGEINFODATA;
typedef union  tagCSPackageInfoData                	*LPCSPACKAGEINFODATA;

struct tagCSPackageInfo;
typedef struct tagCSPackageInfo                    	CSPACKAGEINFO;
typedef struct tagCSPackageInfo                    	*LPCSPACKAGEINFO;

struct tagCSKickoffInfo;
typedef struct tagCSKickoffInfo                    	CSKICKOFFINFO;
typedef struct tagCSKickoffInfo                    	*LPCSKICKOFFINFO;

struct tagMapTransInfo;
typedef struct tagMapTransInfo                     	MAPTRANSINFO;
typedef struct tagMapTransInfo                     	*LPMAPTRANSINFO;

struct tagCSTransList;
typedef struct tagCSTransList                      	CSTRANSLIST;
typedef struct tagCSTransList                      	*LPCSTRANSLIST;

struct tagCSTransUseItem;
typedef struct tagCSTransUseItem                   	CSTRANSUSEITEM;
typedef struct tagCSTransUseItem                   	*LPCSTRANSUSEITEM;

struct tagCSTransSelect;
typedef struct tagCSTransSelect                    	CSTRANSSELECT;
typedef struct tagCSTransSelect                    	*LPCSTRANSSELECT;

struct tagTeamInfo;
typedef struct tagTeamInfo                         	TEAMINFO;
typedef struct tagTeamInfo                         	*LPTEAMINFO;

struct tagCSTeamApply;
typedef struct tagCSTeamApply                      	CSTEAMAPPLY;
typedef struct tagCSTeamApply                      	*LPCSTEAMAPPLY;

struct tagCSTeamFollow;
typedef struct tagCSTeamFollow                     	CSTEAMFOLLOW;
typedef struct tagCSTeamFollow                     	*LPCSTEAMFOLLOW;

struct tagCSTeamApplyAccept;
typedef struct tagCSTeamApplyAccept                	CSTEAMAPPLYACCEPT;
typedef struct tagCSTeamApplyAccept                	*LPCSTEAMAPPLYACCEPT;

struct tagCSTeamApplyRefuse;
typedef struct tagCSTeamApplyRefuse                	CSTEAMAPPLYREFUSE;
typedef struct tagCSTeamApplyRefuse                	*LPCSTEAMAPPLYREFUSE;

struct tagCSTeamInvite;
typedef struct tagCSTeamInvite                     	CSTEAMINVITE;
typedef struct tagCSTeamInvite                     	*LPCSTEAMINVITE;

struct tagCSTeamInviteRefuse;
typedef struct tagCSTeamInviteRefuse               	CSTEAMINVITEREFUSE;
typedef struct tagCSTeamInviteRefuse               	*LPCSTEAMINVITEREFUSE;

struct tagCSTeamInviteAccept;
typedef struct tagCSTeamInviteAccept               	CSTEAMINVITEACCEPT;
typedef struct tagCSTeamInviteAccept               	*LPCSTEAMINVITEACCEPT;

struct tagCSTeamCaptainChg;
typedef struct tagCSTeamCaptainChg                 	CSTEAMCAPTAINCHG;
typedef struct tagCSTeamCaptainChg                 	*LPCSTEAMCAPTAINCHG;

struct tagCSTeamExit;
typedef struct tagCSTeamExit                       	CSTEAMEXIT;
typedef struct tagCSTeamExit                       	*LPCSTEAMEXIT;

struct tagCSTeamKick;
typedef struct tagCSTeamKick                       	CSTEAMKICK;
typedef struct tagCSTeamKick                       	*LPCSTEAMKICK;

struct tagCSTeamChgName;
typedef struct tagCSTeamChgName                    	CSTEAMCHGNAME;
typedef struct tagCSTeamChgName                    	*LPCSTEAMCHGNAME;

struct tagCSTeamChgBootyMode;
typedef struct tagCSTeamChgBootyMode               	CSTEAMCHGBOOTYMODE;
typedef struct tagCSTeamChgBootyMode               	*LPCSTEAMCHGBOOTYMODE;

struct tagCSTeamVoteKick;
typedef struct tagCSTeamVoteKick                   	CSTEAMVOTEKICK;
typedef struct tagCSTeamVoteKick                   	*LPCSTEAMVOTEKICK;

struct tagCSTeamSummonAnswer;
typedef struct tagCSTeamSummonAnswer               	CSTEAMSUMMONANSWER;
typedef struct tagCSTeamSummonAnswer               	*LPCSTEAMSUMMONANSWER;

struct tagCSTeamAdd;
typedef struct tagCSTeamAdd                        	CSTEAMADD;
typedef struct tagCSTeamAdd                        	*LPCSTEAMADD;

union tagCSTeamCltData;
typedef union  tagCSTeamCltData                    	CSTEAMCLTDATA;
typedef union  tagCSTeamCltData                    	*LPCSTEAMCLTDATA;

struct tagCSTeamClt;
typedef struct tagCSTeamClt                        	CSTEAMCLT;
typedef struct tagCSTeamClt                        	*LPCSTEAMCLT;

struct tagTeamApplyInfo;
typedef struct tagTeamApplyInfo                    	TEAMAPPLYINFO;
typedef struct tagTeamApplyInfo                    	*LPTEAMAPPLYINFO;

struct tagTeamFollowTick;
typedef struct tagTeamFollowTick                   	TEAMFOLLOWTICK;
typedef struct tagTeamFollowTick                   	*LPTEAMFOLLOWTICK;

struct tagTeamMsgSvr;
typedef struct tagTeamMsgSvr                       	TEAMMSGSVR;
typedef struct tagTeamMsgSvr                       	*LPTEAMMSGSVR;

struct tagCSTeamBootyModeInfo;
typedef struct tagCSTeamBootyModeInfo              	CSTEAMBOOTYMODEINFO;
typedef struct tagCSTeamBootyModeInfo              	*LPCSTEAMBOOTYMODEINFO;

struct tagTeamSummonAsk;
typedef struct tagTeamSummonAsk                    	TEAMSUMMONASK;
typedef struct tagTeamSummonAsk                    	*LPTEAMSUMMONASK;

struct tagTeamSummonCloseUi;
typedef struct tagTeamSummonCloseUi                	TEAMSUMMONCLOSEUI;
typedef struct tagTeamSummonCloseUi                	*LPTEAMSUMMONCLOSEUI;

union tagCSTeamSvrData;
typedef union  tagCSTeamSvrData                    	CSTEAMSVRDATA;
typedef union  tagCSTeamSvrData                    	*LPCSTEAMSVRDATA;

struct tagCSTeamSvr;
typedef struct tagCSTeamSvr                        	CSTEAMSVR;
typedef struct tagCSTeamSvr                        	*LPCSTEAMSVR;

struct tagFriendMsgGroup;
typedef struct tagFriendMsgGroup                   	FRIENDMSGGROUP;
typedef struct tagFriendMsgGroup                   	*LPFRIENDMSGGROUP;

struct tagCSAvatarReq;
typedef struct tagCSAvatarReq                      	CSAVATARREQ;
typedef struct tagCSAvatarReq                      	*LPCSAVATARREQ;

struct tagAddBlackReq;
typedef struct tagAddBlackReq                      	ADDBLACKREQ;
typedef struct tagAddBlackReq                      	*LPADDBLACKREQ;

struct tagAddEnemyReq;
typedef struct tagAddEnemyReq                      	ADDENEMYREQ;
typedef struct tagAddEnemyReq                      	*LPADDENEMYREQ;

struct tagCSMemNameReq;
typedef struct tagCSMemNameReq                     	CSMEMNAMEREQ;
typedef struct tagCSMemNameReq                     	*LPCSMEMNAMEREQ;

struct tagCSDelRelationReq;
typedef struct tagCSDelRelationReq                 	CSDELRELATIONREQ;
typedef struct tagCSDelRelationReq                 	*LPCSDELRELATIONREQ;

struct tagAddFriendReq;
typedef struct tagAddFriendReq                     	ADDFRIENDREQ;
typedef struct tagAddFriendReq                     	*LPADDFRIENDREQ;

struct tagAddTmpFriendReq;
typedef struct tagAddTmpFriendReq                  	ADDTMPFRIENDREQ;
typedef struct tagAddTmpFriendReq                  	*LPADDTMPFRIENDREQ;

struct tagAddTmpEnmeyReq;
typedef struct tagAddTmpEnmeyReq                   	ADDTMPENMEYREQ;
typedef struct tagAddTmpEnmeyReq                   	*LPADDTMPENMEYREQ;

struct tagCSAddFriendRes;
typedef struct tagCSAddFriendRes                   	CSADDFRIENDRES;
typedef struct tagCSAddFriendRes                   	*LPCSADDFRIENDRES;

struct tagCSEmotionReq;
typedef struct tagCSEmotionReq                     	CSEMOTIONREQ;
typedef struct tagCSEmotionReq                     	*LPCSEMOTIONREQ;

struct tagCSEmotionRes;
typedef struct tagCSEmotionRes                     	CSEMOTIONRES;
typedef struct tagCSEmotionRes                     	*LPCSEMOTIONRES;

struct tagCSBuddyInfoReq;
typedef struct tagCSBuddyInfoReq                   	CSBUDDYINFOREQ;
typedef struct tagCSBuddyInfoReq                   	*LPCSBUDDYINFOREQ;

struct tagCSBuddyInfoRes;
typedef struct tagCSBuddyInfoRes                   	CSBUDDYINFORES;
typedef struct tagCSBuddyInfoRes                   	*LPCSBUDDYINFORES;

struct tagCSSetGroupReq;
typedef struct tagCSSetGroupReq                    	CSSETGROUPREQ;
typedef struct tagCSSetGroupReq                    	*LPCSSETGROUPREQ;

union tagCSAddRelationData;
typedef union  tagCSAddRelationData                	CSADDRELATIONDATA;
typedef union  tagCSAddRelationData                	*LPCSADDRELATIONDATA;

struct tagCSAddRelation;
typedef struct tagCSAddRelation                    	CSADDRELATION;
typedef struct tagCSAddRelation                    	*LPCSADDRELATION;

struct tagCSPursueResClt;
typedef struct tagCSPursueResClt                   	CSPURSUERESCLT;
typedef struct tagCSPursueResClt                   	*LPCSPURSUERESCLT;

struct tagCSOathResClt;
typedef struct tagCSOathResClt                     	CSOATHRESCLT;
typedef struct tagCSOathResClt                     	*LPCSOATHRESCLT;

struct tagCSRemoveRelationReqClt;
typedef struct tagCSRemoveRelationReqClt           	CSREMOVERELATIONREQCLT;
typedef struct tagCSRemoveRelationReqClt           	*LPCSREMOVERELATIONREQCLT;

union tagCSInvolveMarryCltData;
typedef union  tagCSInvolveMarryCltData            	CSINVOLVEMARRYCLTDATA;
typedef union  tagCSInvolveMarryCltData            	*LPCSINVOLVEMARRYCLTDATA;

struct tagCSInvolveMarryClt;
typedef struct tagCSInvolveMarryClt                	CSINVOLVEMARRYCLT;
typedef struct tagCSInvolveMarryClt                	*LPCSINVOLVEMARRYCLT;

union tagCSRelationCltData;
typedef union  tagCSRelationCltData                	CSRELATIONCLTDATA;
typedef union  tagCSRelationCltData                	*LPCSRELATIONCLTDATA;

union tagCSRelationAttrData;
typedef union  tagCSRelationAttrData               	CSRELATIONATTRDATA;
typedef union  tagCSRelationAttrData               	*LPCSRELATIONATTRDATA;

struct tagRelationAttr;
typedef struct tagRelationAttr                     	RELATIONATTR;
typedef struct tagRelationAttr                     	*LPRELATIONATTR;

struct tagCSRelationChg;
typedef struct tagCSRelationChg                    	CSRELATIONCHG;
typedef struct tagCSRelationChg                    	*LPCSRELATIONCHG;

struct tagRelationClan;
typedef struct tagRelationClan                     	RELATIONCLAN;
typedef struct tagRelationClan                     	*LPRELATIONCLAN;

struct tagRelationClanInfo;
typedef struct tagRelationClanInfo                 	RELATIONCLANINFO;
typedef struct tagRelationClanInfo                 	*LPRELATIONCLANINFO;

struct tagRelationClanInfoList;
typedef struct tagRelationClanInfoList             	RELATIONCLANINFOLIST;
typedef struct tagRelationClanInfoList             	*LPRELATIONCLANINFOLIST;

struct tagCSRelationChgList;
typedef struct tagCSRelationChgList                	CSRELATIONCHGLIST;
typedef struct tagCSRelationChgList                	*LPCSRELATIONCHGLIST;

struct tagCSRelationAddFriendInfo;
typedef struct tagCSRelationAddFriendInfo          	CSRELATIONADDFRIENDINFO;
typedef struct tagCSRelationAddFriendInfo          	*LPCSRELATIONADDFRIENDINFO;

struct tagCSRelationAvatarInfo;
typedef struct tagCSRelationAvatarInfo             	CSRELATIONAVATARINFO;
typedef struct tagCSRelationAvatarInfo             	*LPCSRELATIONAVATARINFO;

struct tagCSRelationAddBlackRes;
typedef struct tagCSRelationAddBlackRes            	CSRELATIONADDBLACKRES;
typedef struct tagCSRelationAddBlackRes            	*LPCSRELATIONADDBLACKRES;

struct tagCSRelationDelRes;
typedef struct tagCSRelationDelRes                 	CSRELATIONDELRES;
typedef struct tagCSRelationDelRes                 	*LPCSRELATIONDELRES;

struct tagCSRelationMaxRes;
typedef struct tagCSRelationMaxRes                 	CSRELATIONMAXRES;
typedef struct tagCSRelationMaxRes                 	*LPCSRELATIONMAXRES;

struct tagCSRelationReject;
typedef struct tagCSRelationReject                 	CSRELATIONREJECT;
typedef struct tagCSRelationReject                 	*LPCSRELATIONREJECT;

struct tagCSPursueInfoInformSvr;
typedef struct tagCSPursueInfoInformSvr            	CSPURSUEINFOINFORMSVR;
typedef struct tagCSPursueInfoInformSvr            	*LPCSPURSUEINFOINFORMSVR;

struct tagCSOathUISvr;
typedef struct tagCSOathUISvr                      	CSOATHUISVR;
typedef struct tagCSOathUISvr                      	*LPCSOATHUISVR;

struct tagCSIntimateColorSvr;
typedef struct tagCSIntimateColorSvr               	CSINTIMATECOLORSVR;
typedef struct tagCSIntimateColorSvr               	*LPCSINTIMATECOLORSVR;

struct tagCSRemoveRelationSvr;
typedef struct tagCSRemoveRelationSvr              	CSREMOVERELATIONSVR;
typedef struct tagCSRemoveRelationSvr              	*LPCSREMOVERELATIONSVR;

struct tagCSLoginIntimateColor;
typedef struct tagCSLoginIntimateColor             	CSLOGININTIMATECOLOR;
typedef struct tagCSLoginIntimateColor             	*LPCSLOGININTIMATECOLOR;

struct tagCSRemoveRelationUI;
typedef struct tagCSRemoveRelationUI               	CSREMOVERELATIONUI;
typedef struct tagCSRemoveRelationUI               	*LPCSREMOVERELATIONUI;

struct tagCSCelebrationInfo;
typedef struct tagCSCelebrationInfo                	CSCELEBRATIONINFO;
typedef struct tagCSCelebrationInfo                	*LPCSCELEBRATIONINFO;

union tagCSInvolveMarrySvrData;
typedef union  tagCSInvolveMarrySvrData            	CSINVOLVEMARRYSVRDATA;
typedef union  tagCSInvolveMarrySvrData            	*LPCSINVOLVEMARRYSVRDATA;

struct tagCSInvolveMarrySvr;
typedef struct tagCSInvolveMarrySvr                	CSINVOLVEMARRYSVR;
typedef struct tagCSInvolveMarrySvr                	*LPCSINVOLVEMARRYSVR;

union tagCSRelationSvrData;
typedef union  tagCSRelationSvrData                	CSRELATIONSVRDATA;
typedef union  tagCSRelationSvrData                	*LPCSRELATIONSVRDATA;

struct tagCSRelationClt;
typedef struct tagCSRelationClt                    	CSRELATIONCLT;
typedef struct tagCSRelationClt                    	*LPCSRELATIONCLT;

struct tagCSRelationSvr;
typedef struct tagCSRelationSvr                    	CSRELATIONSVR;
typedef struct tagCSRelationSvr                    	*LPCSRELATIONSVR;

struct tagCSShopSell;
typedef struct tagCSShopSell                       	CSSHOPSELL;
typedef struct tagCSShopSell                       	*LPCSSHOPSELL;

struct tagCSShopRepairOne;
typedef struct tagCSShopRepairOne                  	CSSHOPREPAIRONE;
typedef struct tagCSShopRepairOne                  	*LPCSSHOPREPAIRONE;

struct tagCSShopBuy;
typedef struct tagCSShopBuy                        	CSSHOPBUY;
typedef struct tagCSShopBuy                        	*LPCSSHOPBUY;

struct tagCSShopBuySelled;
typedef struct tagCSShopBuySelled                  	CSSHOPBUYSELLED;
typedef struct tagCSShopBuySelled                  	*LPCSSHOPBUYSELLED;

union tagCSShopCltData;
typedef union  tagCSShopCltData                    	CSSHOPCLTDATA;
typedef union  tagCSShopCltData                    	*LPCSSHOPCLTDATA;

struct tagCSShopClt;
typedef struct tagCSShopClt                        	CSSHOPCLT;
typedef struct tagCSShopClt                        	*LPCSSHOPCLT;

struct tagCSShopCondition;
typedef struct tagCSShopCondition                  	CSSHOPCONDITION;
typedef struct tagCSShopCondition                  	*LPCSSHOPCONDITION;

struct tagShopSellItems;
typedef struct tagShopSellItems                    	SHOPSELLITEMS;
typedef struct tagShopSellItems                    	*LPSHOPSELLITEMS;

struct tagShopList;
typedef struct tagShopList                         	SHOPLIST;
typedef struct tagShopList                         	*LPSHOPLIST;

union tagCSShopSvrData;
typedef union  tagCSShopSvrData                    	CSSHOPSVRDATA;
typedef union  tagCSShopSvrData                    	*LPCSSHOPSVRDATA;

struct tagCSShopSvr;
typedef struct tagCSShopSvr                        	CSSHOPSVR;
typedef struct tagCSShopSvr                        	*LPCSSHOPSVR;

struct tagCSTaskAward;
typedef struct tagCSTaskAward                      	CSTASKAWARD;
typedef struct tagCSTaskAward                      	*LPCSTASKAWARD;

struct tagCSTaskAccept;
typedef struct tagCSTaskAccept                     	CSTASKACCEPT;
typedef struct tagCSTaskAccept                     	*LPCSTASKACCEPT;

struct tagCSTaskDrop;
typedef struct tagCSTaskDrop                       	CSTASKDROP;
typedef struct tagCSTaskDrop                       	*LPCSTASKDROP;

struct tagCSTaskFini;
typedef struct tagCSTaskFini                       	CSTASKFINI;
typedef struct tagCSTaskFini                       	*LPCSTASKFINI;

struct tagCSTaskShare;
typedef struct tagCSTaskShare                      	CSTASKSHARE;
typedef struct tagCSTaskShare                      	*LPCSTASKSHARE;

struct tagCSTaskRefuse;
typedef struct tagCSTaskRefuse                     	CSTASKREFUSE;
typedef struct tagCSTaskRefuse                     	*LPCSTASKREFUSE;

struct tagCSTaskItemRecycleOpen;
typedef struct tagCSTaskItemRecycleOpen            	CSTASKITEMRECYCLEOPEN;
typedef struct tagCSTaskItemRecycleOpen            	*LPCSTASKITEMRECYCLEOPEN;

struct tagCSTaskItemRecycleAccept;
typedef struct tagCSTaskItemRecycleAccept          	CSTASKITEMRECYCLEACCEPT;
typedef struct tagCSTaskItemRecycleAccept          	*LPCSTASKITEMRECYCLEACCEPT;

union tagCSTaskCltData;
typedef union  tagCSTaskCltData                    	CSTASKCLTDATA;
typedef union  tagCSTaskCltData                    	*LPCSTASKCLTDATA;

struct tagCSTaskClt;
typedef struct tagCSTaskClt                        	CSTASKCLT;
typedef struct tagCSTaskClt                        	*LPCSTASKCLT;

struct tagCSTaskRunOne;
typedef struct tagCSTaskRunOne                     	CSTASKRUNONE;
typedef struct tagCSTaskRunOne                     	*LPCSTASKRUNONE;

struct tagCSTaskRecycleInfo;
typedef struct tagCSTaskRecycleInfo                	CSTASKRECYCLEINFO;
typedef struct tagCSTaskRecycleInfo                	*LPCSTASKRECYCLEINFO;

struct tagCSTaskInfo;
typedef struct tagCSTaskInfo                       	CSTASKINFO;
typedef struct tagCSTaskInfo                       	*LPCSTASKINFO;

struct tagCSTaskDialog;
typedef struct tagCSTaskDialog                     	CSTASKDIALOG;
typedef struct tagCSTaskDialog                     	*LPCSTASKDIALOG;

struct tagCSTaskTimer;
typedef struct tagCSTaskTimer                      	CSTASKTIMER;
typedef struct tagCSTaskTimer                      	*LPCSTASKTIMER;

struct tagCSTaskItemRecycleUI;
typedef struct tagCSTaskItemRecycleUI              	CSTASKITEMRECYCLEUI;
typedef struct tagCSTaskItemRecycleUI              	*LPCSTASKITEMRECYCLEUI;

union tagCSTaskSvrData;
typedef union  tagCSTaskSvrData                    	CSTASKSVRDATA;
typedef union  tagCSTaskSvrData                    	*LPCSTASKSVRDATA;

struct tagCSTaskSvr;
typedef struct tagCSTaskSvr                        	CSTASKSVR;
typedef struct tagCSTaskSvr                        	*LPCSTASKSVR;

struct tagCSSkillReviveInfo;
typedef struct tagCSSkillReviveInfo                	CSSKILLREVIVEINFO;
typedef struct tagCSSkillReviveInfo                	*LPCSSKILLREVIVEINFO;

struct tagCSOnlineSvr;
typedef struct tagCSOnlineSvr                      	CSONLINESVR;
typedef struct tagCSOnlineSvr                      	*LPCSONLINESVR;

struct tagCSAutoFlyClt;
typedef struct tagCSAutoFlyClt                     	CSAUTOFLYCLT;
typedef struct tagCSAutoFlyClt                     	*LPCSAUTOFLYCLT;

struct tagCSCollectStart;
typedef struct tagCSCollectStart                   	CSCOLLECTSTART;
typedef struct tagCSCollectStart                   	*LPCSCOLLECTSTART;

struct tagCSCollectEnd;
typedef struct tagCSCollectEnd                     	CSCOLLECTEND;
typedef struct tagCSCollectEnd                     	*LPCSCOLLECTEND;

struct tagCSCollectCltData;
typedef struct tagCSCollectCltData                 	CSCOLLECTCLTDATA;
typedef struct tagCSCollectCltData                 	*LPCSCOLLECTCLTDATA;

struct tagCSCollectClt;
typedef struct tagCSCollectClt                     	CSCOLLECTCLT;
typedef struct tagCSCollectClt                     	*LPCSCOLLECTCLT;

struct tagCSSkillLearn;
typedef struct tagCSSkillLearn                     	CSSKILLLEARN;
typedef struct tagCSSkillLearn                     	*LPCSSKILLLEARN;

struct tagExchgItem;
typedef struct tagExchgItem                        	EXCHGITEM;
typedef struct tagExchgItem                        	*LPEXCHGITEM;

struct tagExchgPet;
typedef struct tagExchgPet                         	EXCHGPET;
typedef struct tagExchgPet                         	*LPEXCHGPET;

struct tagExchgData;
typedef struct tagExchgData                        	EXCHGDATA;
typedef struct tagExchgData                        	*LPEXCHGDATA;

struct tagExchgItemEntiy;
typedef struct tagExchgItemEntiy                   	EXCHGITEMENTIY;
typedef struct tagExchgItemEntiy                   	*LPEXCHGITEMENTIY;

struct tagExchgPetEntiy;
typedef struct tagExchgPetEntiy                    	EXCHGPETENTIY;
typedef struct tagExchgPetEntiy                    	*LPEXCHGPETENTIY;

struct tagExchgEntiy;
typedef struct tagExchgEntiy                       	EXCHGENTIY;
typedef struct tagExchgEntiy                       	*LPEXCHGENTIY;

struct tagCSExchgClt;
typedef struct tagCSExchgClt                       	CSEXCHGCLT;
typedef struct tagCSExchgClt                       	*LPCSEXCHGCLT;

struct tagCSExchgSvr;
typedef struct tagCSExchgSvr                       	CSEXCHGSVR;
typedef struct tagCSExchgSvr                       	*LPCSEXCHGSVR;

struct tagPworldSelect;
typedef struct tagPworldSelect                     	PWORLDSELECT;
typedef struct tagPworldSelect                     	*LPPWORLDSELECT;

struct tagCSDynPworldClt;
typedef struct tagCSDynPworldClt                   	CSDYNPWORLDCLT;
typedef struct tagCSDynPworldClt                   	*LPCSDYNPWORLDCLT;

struct tagCSDynPworldSvr;
typedef struct tagCSDynPworldSvr                   	CSDYNPWORLDSVR;
typedef struct tagCSDynPworldSvr                   	*LPCSDYNPWORLDSVR;

struct tagCSClanViewGetRes;
typedef struct tagCSClanViewGetRes                 	CSCLANVIEWGETRES;
typedef struct tagCSClanViewGetRes                 	*LPCSCLANVIEWGETRES;

struct tagCSClanCensorRole;
typedef struct tagCSClanCensorRole                 	CSCLANCENSORROLE;
typedef struct tagCSClanCensorRole                 	*LPCSCLANCENSORROLE;

struct tagCSClanCensorClan;
typedef struct tagCSClanCensorClan                 	CSCLANCENSORCLAN;
typedef struct tagCSClanCensorClan                 	*LPCSCLANCENSORCLAN;

struct tagCSClanMemberNickname;
typedef struct tagCSClanMemberNickname             	CSCLANMEMBERNICKNAME;
typedef struct tagCSClanMemberNickname             	*LPCSCLANMEMBERNICKNAME;

struct tagCSClanAnswer;
typedef struct tagCSClanAnswer                     	CSCLANANSWER;
typedef struct tagCSClanAnswer                     	*LPCSCLANANSWER;

struct tagCSClanViewPageCookie;
typedef struct tagCSClanViewPageCookie             	CSCLANVIEWPAGECOOKIE;
typedef struct tagCSClanViewPageCookie             	*LPCSCLANVIEWPAGECOOKIE;

struct tagCSClanViewPageByID;
typedef struct tagCSClanViewPageByID               	CSCLANVIEWPAGEBYID;
typedef struct tagCSClanViewPageByID               	*LPCSCLANVIEWPAGEBYID;

union tagCSClanFindReqKey;
typedef union  tagCSClanFindReqKey                 	CSCLANFINDREQKEY;
typedef union  tagCSClanFindReqKey                 	*LPCSCLANFINDREQKEY;

struct tagCSClanFindReq;
typedef struct tagCSClanFindReq                    	CSCLANFINDREQ;
typedef struct tagCSClanFindReq                    	*LPCSCLANFINDREQ;

struct tagCSClanStorageGridIdentifier;
typedef struct tagCSClanStorageGridIdentifier      	CSCLANSTORAGEGRIDIDENTIFIER;
typedef struct tagCSClanStorageGridIdentifier      	*LPCSCLANSTORAGEGRIDIDENTIFIER;

struct tagClanRunningProgressLite;
typedef struct tagClanRunningProgressLite          	CLANRUNNINGPROGRESSLITE;
typedef struct tagClanRunningProgressLite          	*LPCLANRUNNINGPROGRESSLITE;

struct tagClanRunningProgressTime;
typedef struct tagClanRunningProgressTime          	CLANRUNNINGPROGRESSTIME;
typedef struct tagClanRunningProgressTime          	*LPCLANRUNNINGPROGRESSTIME;

union tagCSClanProgressNotifyExtension;
typedef union  tagCSClanProgressNotifyExtension    	CSCLANPROGRESSNOTIFYEXTENSION;
typedef union  tagCSClanProgressNotifyExtension    	*LPCSCLANPROGRESSNOTIFYEXTENSION;

struct tagCSClanProgressNotify;
typedef struct tagCSClanProgressNotify             	CSCLANPROGRESSNOTIFY;
typedef struct tagCSClanProgressNotify             	*LPCSCLANPROGRESSNOTIFY;

struct tagCSClanResearch;
typedef struct tagCSClanResearch                   	CSCLANRESEARCH;
typedef struct tagCSClanResearch                   	*LPCSCLANRESEARCH;

struct tagCSClanCancelResearch;
typedef struct tagCSClanCancelResearch             	CSCLANCANCELRESEARCH;
typedef struct tagCSClanCancelResearch             	*LPCSCLANCANCELRESEARCH;

struct tagCSClanMake;
typedef struct tagCSClanMake                       	CSCLANMAKE;
typedef struct tagCSClanMake                       	*LPCSCLANMAKE;

struct tagCSClanCancelMaking;
typedef struct tagCSClanCancelMaking               	CSCLANCANCELMAKING;
typedef struct tagCSClanCancelMaking               	*LPCSCLANCANCELMAKING;

struct tagCSClanGrabMachine;
typedef struct tagCSClanGrabMachine                	CSCLANGRABMACHINE;
typedef struct tagCSClanGrabMachine                	*LPCSCLANGRABMACHINE;

struct tagCSClanCallbackMachine;
typedef struct tagCSClanCallbackMachine            	CSCLANCALLBACKMACHINE;
typedef struct tagCSClanCallbackMachine            	*LPCSCLANCALLBACKMACHINE;

struct tagCSClanMachineSupply;
typedef struct tagCSClanMachineSupply              	CSCLANMACHINESUPPLY;
typedef struct tagCSClanMachineSupply              	*LPCSCLANMACHINESUPPLY;

struct tagCSClanStorageGridLockSwitch;
typedef struct tagCSClanStorageGridLockSwitch      	CSCLANSTORAGEGRIDLOCKSWITCH;
typedef struct tagCSClanStorageGridLockSwitch      	*LPCSCLANSTORAGEGRIDLOCKSWITCH;

struct tagCSClanStorageGridDestroy;
typedef struct tagCSClanStorageGridDestroy         	CSCLANSTORAGEGRIDDESTROY;
typedef struct tagCSClanStorageGridDestroy         	*LPCSCLANSTORAGEGRIDDESTROY;

struct tagCSClanSetJobAndTitle;
typedef struct tagCSClanSetJobAndTitle             	CSCLANSETJOBANDTITLE;
typedef struct tagCSClanSetJobAndTitle             	*LPCSCLANSETJOBANDTITLE;

struct tagCSClanResearchSpeedup;
typedef struct tagCSClanResearchSpeedup            	CSCLANRESEARCHSPEEDUP;
typedef struct tagCSClanResearchSpeedup            	*LPCSCLANRESEARCHSPEEDUP;

struct tagCSClanMakingSpeedup;
typedef struct tagCSClanMakingSpeedup              	CSCLANMAKINGSPEEDUP;
typedef struct tagCSClanMakingSpeedup              	*LPCSCLANMAKINGSPEEDUP;

struct tagCSClanResourceLockSwitch;
typedef struct tagCSClanResourceLockSwitch         	CSCLANRESOURCELOCKSWITCH;
typedef struct tagCSClanResourceLockSwitch         	*LPCSCLANRESOURCELOCKSWITCH;

struct tagCSClanResourceGrabItem;
typedef struct tagCSClanResourceGrabItem           	CSCLANRESOURCEGRABITEM;
typedef struct tagCSClanResourceGrabItem           	*LPCSCLANRESOURCEGRABITEM;

struct tagCSSetClanColor;
typedef struct tagCSSetClanColor                   	CSSETCLANCOLOR;
typedef struct tagCSSetClanColor                   	*LPCSSETCLANCOLOR;

struct tagCSSetClanMapPos;
typedef struct tagCSSetClanMapPos                  	CSSETCLANMAPPOS;
typedef struct tagCSSetClanMapPos                  	*LPCSSETCLANMAPPOS;

struct tagCSClanSkillResearch;
typedef struct tagCSClanSkillResearch              	CSCLANSKILLRESEARCH;
typedef struct tagCSClanSkillResearch              	*LPCSCLANSKILLRESEARCH;

struct tagCSClanSkillLearn;
typedef struct tagCSClanSkillLearn                 	CSCLANSKILLLEARN;
typedef struct tagCSClanSkillLearn                 	*LPCSCLANSKILLLEARN;

struct tagCSClanSummonAnswer;
typedef struct tagCSClanSummonAnswer               	CSCLANSUMMONANSWER;
typedef struct tagCSClanSummonAnswer               	*LPCSCLANSUMMONANSWER;

struct tagCSClanSetGroup;
typedef struct tagCSClanSetGroup                   	CSCLANSETGROUP;
typedef struct tagCSClanSetGroup                   	*LPCSCLANSETGROUP;

struct tagCSClanSetGroupStrongMap;
typedef struct tagCSClanSetGroupStrongMap          	CSCLANSETGROUPSTRONGMAP;
typedef struct tagCSClanSetGroupStrongMap          	*LPCSCLANSETGROUPSTRONGMAP;

struct tagCSClanOpenGroup;
typedef struct tagCSClanOpenGroup                  	CSCLANOPENGROUP;
typedef struct tagCSClanOpenGroup                  	*LPCSCLANOPENGROUP;

struct tagCSClanKickCity;
typedef struct tagCSClanKickCity                   	CSCLANKICKCITY;
typedef struct tagCSClanKickCity                   	*LPCSCLANKICKCITY;

union tagCSClanCltData;
typedef union  tagCSClanCltData                    	CSCLANCLTDATA;
typedef union  tagCSClanCltData                    	*LPCSCLANCLTDATA;

struct tagCSClanClt;
typedef struct tagCSClanClt                        	CSCLANCLT;
typedef struct tagCSClanClt                        	*LPCSCLANCLT;

struct tagCSClanDart;
typedef struct tagCSClanDart                       	CSCLANDART;
typedef struct tagCSClanDart                       	*LPCSCLANDART;

struct tagCSClanSpend;
typedef struct tagCSClanSpend                      	CSCLANSPEND;
typedef struct tagCSClanSpend                      	*LPCSCLANSPEND;

struct tagCSClanViewGetResSvr;
typedef struct tagCSClanViewGetResSvr              	CSCLANVIEWGETRESSVR;
typedef struct tagCSClanViewGetResSvr              	*LPCSCLANVIEWGETRESSVR;

struct tagCSClanProfileId;
typedef struct tagCSClanProfileId                  	CSCLANPROFILEID;
typedef struct tagCSClanProfileId                  	*LPCSCLANPROFILEID;

struct tagCSClanApplyProfileId;
typedef struct tagCSClanApplyProfileId             	CSCLANAPPLYPROFILEID;
typedef struct tagCSClanApplyProfileId             	*LPCSCLANAPPLYPROFILEID;

struct tagCSClanDiplomatismSnapshot;
typedef struct tagCSClanDiplomatismSnapshot        	CSCLANDIPLOMATISMSNAPSHOT;
typedef struct tagCSClanDiplomatismSnapshot        	*LPCSCLANDIPLOMATISMSNAPSHOT;

struct tagCSClanInfo;
typedef struct tagCSClanInfo                       	CSCLANINFO;
typedef struct tagCSClanInfo                       	*LPCSCLANINFO;

struct tagCSClanAsk;
typedef struct tagCSClanAsk                        	CSCLANASK;
typedef struct tagCSClanAsk                        	*LPCSCLANASK;

struct tagCSClanMembers;
typedef struct tagCSClanMembers                    	CSCLANMEMBERS;
typedef struct tagCSClanMembers                    	*LPCSCLANMEMBERS;

struct tagCSClanMemberChg;
typedef struct tagCSClanMemberChg                  	CSCLANMEMBERCHG;
typedef struct tagCSClanMemberChg                  	*LPCSCLANMEMBERCHG;

struct tagCSClanView;
typedef struct tagCSClanView                       	CSCLANVIEW;
typedef struct tagCSClanView                       	*LPCSCLANVIEW;

struct tagCSClanViewPage;
typedef struct tagCSClanViewPage                   	CSCLANVIEWPAGE;
typedef struct tagCSClanViewPage                   	*LPCSCLANVIEWPAGE;

struct tagCSClanIDSnapshot;
typedef struct tagCSClanIDSnapshot                 	CSCLANIDSNAPSHOT;
typedef struct tagCSClanIDSnapshot                 	*LPCSCLANIDSNAPSHOT;

union tagClanViewChgData;
typedef union  tagClanViewChgData                  	CLANVIEWCHGDATA;
typedef union  tagClanViewChgData                  	*LPCLANVIEWCHGDATA;

struct tagCSClanViewChg;
typedef struct tagCSClanViewChg                    	CSCLANVIEWCHG;
typedef struct tagCSClanViewChg                    	*LPCSCLANVIEWCHG;

struct tagCSClanViewOfPage;
typedef struct tagCSClanViewOfPage                 	CSCLANVIEWOFPAGE;
typedef struct tagCSClanViewOfPage                 	*LPCSCLANVIEWOFPAGE;

struct tagCSClanApplyJoinList;
typedef struct tagCSClanApplyJoinList              	CSCLANAPPLYJOINLIST;
typedef struct tagCSClanApplyJoinList              	*LPCSCLANAPPLYJOINLIST;

struct tagCSClanDiplomatismStatus;
typedef struct tagCSClanDiplomatismStatus          	CSCLANDIPLOMATISMSTATUS;
typedef struct tagCSClanDiplomatismStatus          	*LPCSCLANDIPLOMATISMSTATUS;

struct tagCSClanFindRes;
typedef struct tagCSClanFindRes                    	CSCLANFINDRES;
typedef struct tagCSClanFindRes                    	*LPCSCLANFINDRES;

struct tagCSClanNotify;
typedef struct tagCSClanNotify                     	CSCLANNOTIFY;
typedef struct tagCSClanNotify                     	*LPCSCLANNOTIFY;

struct tagCSClanBulletin;
typedef struct tagCSClanBulletin                   	CSCLANBULLETIN;
typedef struct tagCSClanBulletin                   	*LPCSCLANBULLETIN;

struct tagCSClanPropertyNotify;
typedef struct tagCSClanPropertyNotify             	CSCLANPROPERTYNOTIFY;
typedef struct tagCSClanPropertyNotify             	*LPCSCLANPROPERTYNOTIFY;

struct tagCSClanAdvanceSnapshot;
typedef struct tagCSClanAdvanceSnapshot            	CSCLANADVANCESNAPSHOT;
typedef struct tagCSClanAdvanceSnapshot            	*LPCSCLANADVANCESNAPSHOT;

union tagClanStorageGridNotifyExtension;
typedef union  tagClanStorageGridNotifyExtension   	CLANSTORAGEGRIDNOTIFYEXTENSION;
typedef union  tagClanStorageGridNotifyExtension   	*LPCLANSTORAGEGRIDNOTIFYEXTENSION;

struct tagCSClanStorageGridNotify;
typedef struct tagCSClanStorageGridNotify          	CSCLANSTORAGEGRIDNOTIFY;
typedef struct tagCSClanStorageGridNotify          	*LPCSCLANSTORAGEGRIDNOTIFY;

struct tagClanBuildingBeginNotifier;
typedef struct tagClanBuildingBeginNotifier        	CLANBUILDINGBEGINNOTIFIER;
typedef struct tagClanBuildingBeginNotifier        	*LPCLANBUILDINGBEGINNOTIFIER;

union tagClanBuildingNotifyExtension;
typedef union  tagClanBuildingNotifyExtension      	CLANBUILDINGNOTIFYEXTENSION;
typedef union  tagClanBuildingNotifyExtension      	*LPCLANBUILDINGNOTIFYEXTENSION;

struct tagCSClanBuildingNotify;
typedef struct tagCSClanBuildingNotify             	CSCLANBUILDINGNOTIFY;
typedef struct tagCSClanBuildingNotify             	*LPCSCLANBUILDINGNOTIFY;

struct tagCSClanColorNotify;
typedef struct tagCSClanColorNotify                	CSCLANCOLORNOTIFY;
typedef struct tagCSClanColorNotify                	*LPCSCLANCOLORNOTIFY;

struct tagCSClanMapPosNotify;
typedef struct tagCSClanMapPosNotify               	CSCLANMAPPOSNOTIFY;
typedef struct tagCSClanMapPosNotify               	*LPCSCLANMAPPOSNOTIFY;

struct tagCSClanYesterdayClanTouchNotify;
typedef struct tagCSClanYesterdayClanTouchNotify   	CSCLANYESTERDAYCLANTOUCHNOTIFY;
typedef struct tagCSClanYesterdayClanTouchNotify   	*LPCSCLANYESTERDAYCLANTOUCHNOTIFY;

struct tagClanSummonAsk;
typedef struct tagClanSummonAsk                    	CLANSUMMONASK;
typedef struct tagClanSummonAsk                    	*LPCLANSUMMONASK;

struct tagClanSummonCloseUI;
typedef struct tagClanSummonCloseUI                	CLANSUMMONCLOSEUI;
typedef struct tagClanSummonCloseUI                	*LPCLANSUMMONCLOSEUI;

union tagCSClanSvrData;
typedef union  tagCSClanSvrData                    	CSCLANSVRDATA;
typedef union  tagCSClanSvrData                    	*LPCSCLANSVRDATA;

struct tagCSClanSvr;
typedef struct tagCSClanSvr                        	CSCLANSVR;
typedef struct tagCSClanSvr                        	*LPCSCLANSVR;

struct tagMailPostItem;
typedef struct tagMailPostItem                     	MAILPOSTITEM;
typedef struct tagMailPostItem                     	*LPMAILPOSTITEM;

struct tagMailSendCost;
typedef struct tagMailSendCost                     	MAILSENDCOST;
typedef struct tagMailSendCost                     	*LPMAILSENDCOST;

struct tagCSMailCltSend;
typedef struct tagCSMailCltSend                    	CSMAILCLTSEND;
typedef struct tagCSMailCltSend                    	*LPCSMAILCLTSEND;

struct tagCSMailGettingList;
typedef struct tagCSMailGettingList                	CSMAILGETTINGLIST;
typedef struct tagCSMailGettingList                	*LPCSMAILGETTINGLIST;

union tagCSMailCltData;
typedef union  tagCSMailCltData                    	CSMAILCLTDATA;
typedef union  tagCSMailCltData                    	*LPCSMAILCLTDATA;

struct tagCSMailClt;
typedef struct tagCSMailClt                        	CSMAILCLT;
typedef struct tagCSMailClt                        	*LPCSMAILCLT;

struct tagCSMailSvrHeadSnapshot;
typedef struct tagCSMailSvrHeadSnapshot            	CSMAILSVRHEADSNAPSHOT;
typedef struct tagCSMailSvrHeadSnapshot            	*LPCSMAILSVRHEADSNAPSHOT;

struct tagMailChgWIDs;
typedef struct tagMailChgWIDs                      	MAILCHGWIDS;
typedef struct tagMailChgWIDs                      	*LPMAILCHGWIDS;

struct tagCSMailHeadMod;
typedef struct tagCSMailHeadMod                    	CSMAILHEADMOD;
typedef struct tagCSMailHeadMod                    	*LPCSMAILHEADMOD;

union tagMailChgInfo;
typedef union  tagMailChgInfo                      	MAILCHGINFO;
typedef union  tagMailChgInfo                      	*LPMAILCHGINFO;

struct tagCSMailSvrChg;
typedef struct tagCSMailSvrChg                     	CSMAILSVRCHG;
typedef struct tagCSMailSvrChg                     	*LPCSMAILSVRCHG;

struct tagCSMailSvrGoodsChg;
typedef struct tagCSMailSvrGoodsChg                	CSMAILSVRGOODSCHG;
typedef struct tagCSMailSvrGoodsChg                	*LPCSMAILSVRGOODSCHG;

struct tagCSMailSvrSendRes;
typedef struct tagCSMailSvrSendRes                 	CSMAILSVRSENDRES;
typedef struct tagCSMailSvrSendRes                 	*LPCSMAILSVRSENDRES;

union tagCSMailSvrData;
typedef union  tagCSMailSvrData                    	CSMAILSVRDATA;
typedef union  tagCSMailSvrData                    	*LPCSMAILSVRDATA;

struct tagCSMailSvr;
typedef struct tagCSMailSvr                        	CSMAILSVR;
typedef struct tagCSMailSvr                        	*LPCSMAILSVR;

struct tagCSBulletinSnapshot;
typedef struct tagCSBulletinSnapshot               	CSBULLETINSNAPSHOT;
typedef struct tagCSBulletinSnapshot               	*LPCSBULLETINSNAPSHOT;

union tagCSBulletinSvrData;
typedef union  tagCSBulletinSvrData                	CSBULLETINSVRDATA;
typedef union  tagCSBulletinSvrData                	*LPCSBULLETINSVRDATA;

struct tagCSBulletinSvr;
typedef struct tagCSBulletinSvr                    	CSBULLETINSVR;
typedef struct tagCSBulletinSvr                    	*LPCSBULLETINSVR;

union tagCSRespactSvrData;
typedef union  tagCSRespactSvrData                 	CSRESPACTSVRDATA;
typedef union  tagCSRespactSvrData                 	*LPCSRESPACTSVRDATA;

struct tagCSRespactSvr;
typedef struct tagCSRespactSvr                     	CSRESPACTSVR;
typedef struct tagCSRespactSvr                     	*LPCSRESPACTSVR;

struct tagExtendedItemPos;
typedef struct tagExtendedItemPos                  	EXTENDEDITEMPOS;
typedef struct tagExtendedItemPos                  	*LPEXTENDEDITEMPOS;

struct tagExtendItemClt;
typedef struct tagExtendItemClt                    	EXTENDITEMCLT;
typedef struct tagExtendItemClt                    	*LPEXTENDITEMCLT;

struct tagExtendItemSave;
typedef struct tagExtendItemSave                   	EXTENDITEMSAVE;
typedef struct tagExtendItemSave                   	*LPEXTENDITEMSAVE;

struct tagExtendItemSvr;
typedef struct tagExtendItemSvr                    	EXTENDITEMSVR;
typedef struct tagExtendItemSvr                    	*LPEXTENDITEMSVR;

struct tagCSRuneEnableClt;
typedef struct tagCSRuneEnableClt                  	CSRUNEENABLECLT;
typedef struct tagCSRuneEnableClt                  	*LPCSRUNEENABLECLT;

struct tagCSRuneSetClt;
typedef struct tagCSRuneSetClt                     	CSRUNESETCLT;
typedef struct tagCSRuneSetClt                     	*LPCSRUNESETCLT;

struct tagCSRuneDelClt;
typedef struct tagCSRuneDelClt                     	CSRUNEDELCLT;
typedef struct tagCSRuneDelClt                     	*LPCSRUNEDELCLT;

union tagCSRuneCltExtension;
typedef union  tagCSRuneCltExtension               	CSRUNECLTEXTENSION;
typedef union  tagCSRuneCltExtension               	*LPCSRUNECLTEXTENSION;

struct tagCSRuneClt;
typedef struct tagCSRuneClt                        	CSRUNECLT;
typedef struct tagCSRuneClt                        	*LPCSRUNECLT;

struct tagCSRuneEnableSvr;
typedef struct tagCSRuneEnableSvr                  	CSRUNEENABLESVR;
typedef struct tagCSRuneEnableSvr                  	*LPCSRUNEENABLESVR;

struct tagCSRuneSetSvr;
typedef struct tagCSRuneSetSvr                     	CSRUNESETSVR;
typedef struct tagCSRuneSetSvr                     	*LPCSRUNESETSVR;

struct tagCSRuneDelSvr;
typedef struct tagCSRuneDelSvr                     	CSRUNEDELSVR;
typedef struct tagCSRuneDelSvr                     	*LPCSRUNEDELSVR;

union tagCSRuneSvrExtension;
typedef union  tagCSRuneSvrExtension               	CSRUNESVREXTENSION;
typedef union  tagCSRuneSvrExtension               	*LPCSRUNESVREXTENSION;

struct tagCSRuneSvr;
typedef struct tagCSRuneSvr                        	CSRUNESVR;
typedef struct tagCSRuneSvr                        	*LPCSRUNESVR;

struct tagTrustTaskItem;
typedef struct tagTrustTaskItem                    	TRUSTTASKITEM;
typedef struct tagTrustTaskItem                    	*LPTRUSTTASKITEM;

struct tagCSTrustContribute;
typedef struct tagCSTrustContribute                	CSTRUSTCONTRIBUTE;
typedef struct tagCSTrustContribute                	*LPCSTRUSTCONTRIBUTE;

struct tagCSTrustRoleList;
typedef struct tagCSTrustRoleList                  	CSTRUSTROLELIST;
typedef struct tagCSTrustRoleList                  	*LPCSTRUSTROLELIST;

union tagCSTrustCltData;
typedef union  tagCSTrustCltData                   	CSTRUSTCLTDATA;
typedef union  tagCSTrustCltData                   	*LPCSTRUSTCLTDATA;

struct tagCSTrustClt;
typedef struct tagCSTrustClt                       	CSTRUSTCLT;
typedef struct tagCSTrustClt                       	*LPCSTRUSTCLT;

struct tagTrustVersion;
typedef struct tagTrustVersion                     	TRUSTVERSION;
typedef struct tagTrustVersion                     	*LPTRUSTVERSION;

struct tagCSTrustVersionList;
typedef struct tagCSTrustVersionList               	CSTRUSTVERSIONLIST;
typedef struct tagCSTrustVersionList               	*LPCSTRUSTVERSIONLIST;

struct tagTrustTask;
typedef struct tagTrustTask                        	TRUSTTASK;
typedef struct tagTrustTask                        	*LPTRUSTTASK;

struct tagRoleTrustData;
typedef struct tagRoleTrustData                    	ROLETRUSTDATA;
typedef struct tagRoleTrustData                    	*LPROLETRUSTDATA;

struct tagCSTrustOrderList;
typedef struct tagCSTrustOrderList                 	CSTRUSTORDERLIST;
typedef struct tagCSTrustOrderList                 	*LPCSTRUSTORDERLIST;

union tagCSTrustSvrData;
typedef union  tagCSTrustSvrData                   	CSTRUSTSVRDATA;
typedef union  tagCSTrustSvrData                   	*LPCSTRUSTSVRDATA;

struct tagCSTrustSvr;
typedef struct tagCSTrustSvr                       	CSTRUSTSVR;
typedef struct tagCSTrustSvr                       	*LPCSTRUSTSVR;

struct tagStallItem;
typedef struct tagStallItem                        	STALLITEM;
typedef struct tagStallItem                        	*LPSTALLITEM;

struct tagStallPet;
typedef struct tagStallPet                         	STALLPET;
typedef struct tagStallPet                         	*LPSTALLPET;

struct tagStallData;
typedef struct tagStallData                        	STALLDATA;
typedef struct tagStallData                        	*LPSTALLDATA;

struct tagStallStartReq;
typedef struct tagStallStartReq                    	STALLSTARTREQ;
typedef struct tagStallStartReq                    	*LPSTALLSTARTREQ;

struct tagStallEndReq;
typedef struct tagStallEndReq                      	STALLENDREQ;
typedef struct tagStallEndReq                      	*LPSTALLENDREQ;

struct tagStallChgNameReq;
typedef struct tagStallChgNameReq                  	STALLCHGNAMEREQ;
typedef struct tagStallChgNameReq                  	*LPSTALLCHGNAMEREQ;

struct tagStallSeeReq;
typedef struct tagStallSeeReq                      	STALLSEEREQ;
typedef struct tagStallSeeReq                      	*LPSTALLSEEREQ;

struct tagStallAddGridReq;
typedef struct tagStallAddGridReq                  	STALLADDGRIDREQ;
typedef struct tagStallAddGridReq                  	*LPSTALLADDGRIDREQ;

struct tagStallBuyReq;
typedef struct tagStallBuyReq                      	STALLBUYREQ;
typedef struct tagStallBuyReq                      	*LPSTALLBUYREQ;

struct tagStallDownReq;
typedef struct tagStallDownReq                     	STALLDOWNREQ;
typedef struct tagStallDownReq                     	*LPSTALLDOWNREQ;

union tagStallUpData;
typedef union  tagStallUpData                      	STALLUPDATA;
typedef union  tagStallUpData                      	*LPSTALLUPDATA;

struct tagStallUpReq;
typedef struct tagStallUpReq                       	STALLUPREQ;
typedef struct tagStallUpReq                       	*LPSTALLUPREQ;

union tagCSStallDataClt;
typedef union  tagCSStallDataClt                   	CSSTALLDATACLT;
typedef union  tagCSStallDataClt                   	*LPCSSTALLDATACLT;

struct tagCSStallClt;
typedef struct tagCSStallClt                       	CSSTALLCLT;
typedef struct tagCSStallClt                       	*LPCSSTALLCLT;

struct tagStallStartRes;
typedef struct tagStallStartRes                    	STALLSTARTRES;
typedef struct tagStallStartRes                    	*LPSTALLSTARTRES;

struct tagStallEndRes;
typedef struct tagStallEndRes                      	STALLENDRES;
typedef struct tagStallEndRes                      	*LPSTALLENDRES;

struct tagStallChgNameRes;
typedef struct tagStallChgNameRes                  	STALLCHGNAMERES;
typedef struct tagStallChgNameRes                  	*LPSTALLCHGNAMERES;

struct tagStallItemEntity;
typedef struct tagStallItemEntity                  	STALLITEMENTITY;
typedef struct tagStallItemEntity                  	*LPSTALLITEMENTITY;

struct tagStallPetEntity;
typedef struct tagStallPetEntity                   	STALLPETENTITY;
typedef struct tagStallPetEntity                   	*LPSTALLPETENTITY;

struct tagStallSeeRes;
typedef struct tagStallSeeRes                      	STALLSEERES;
typedef struct tagStallSeeRes                      	*LPSTALLSEERES;

struct tagStallInfoChg;
typedef struct tagStallInfoChg                     	STALLINFOCHG;
typedef struct tagStallInfoChg                     	*LPSTALLINFOCHG;

struct tagStallBuyRes;
typedef struct tagStallBuyRes                      	STALLBUYRES;
typedef struct tagStallBuyRes                      	*LPSTALLBUYRES;

struct tagStallChgAdMsgRes;
typedef struct tagStallChgAdMsgRes                 	STALLCHGADMSGRES;
typedef struct tagStallChgAdMsgRes                 	*LPSTALLCHGADMSGRES;

struct tagStallDownRes;
typedef struct tagStallDownRes                     	STALLDOWNRES;
typedef struct tagStallDownRes                     	*LPSTALLDOWNRES;

struct tagStallUpRes;
typedef struct tagStallUpRes                       	STALLUPRES;
typedef struct tagStallUpRes                       	*LPSTALLUPRES;

struct tagStallShowAdMsgRes;
typedef struct tagStallShowAdMsgRes                	STALLSHOWADMSGRES;
typedef struct tagStallShowAdMsgRes                	*LPSTALLSHOWADMSGRES;

union tagCSStallDataSvr;
typedef union  tagCSStallDataSvr                   	CSSTALLDATASVR;
typedef union  tagCSStallDataSvr                   	*LPCSSTALLDATASVR;

struct tagCSStallSvr;
typedef struct tagCSStallSvr                       	CSSTALLSVR;
typedef struct tagCSStallSvr                       	*LPCSSTALLSVR;

struct tagArmLegendUp;
typedef struct tagArmLegendUp                      	ARMLEGENDUP;
typedef struct tagArmLegendUp                      	*LPARMLEGENDUP;

struct tagArmSkillRecastActive;
typedef struct tagArmSkillRecastActive             	ARMSKILLRECASTACTIVE;
typedef struct tagArmSkillRecastActive             	*LPARMSKILLRECASTACTIVE;

struct tagArmSkillRecastLock;
typedef struct tagArmSkillRecastLock               	ARMSKILLRECASTLOCK;
typedef struct tagArmSkillRecastLock               	*LPARMSKILLRECASTLOCK;

struct tagArmSkillRecastReset;
typedef struct tagArmSkillRecastReset              	ARMSKILLRECASTRESET;
typedef struct tagArmSkillRecastReset              	*LPARMSKILLRECASTRESET;

struct tagArmSkillActive;
typedef struct tagArmSkillActive                   	ARMSKILLACTIVE;
typedef struct tagArmSkillActive                   	*LPARMSKILLACTIVE;

struct tagArmBaseReSetSave;
typedef struct tagArmBaseReSetSave                 	ARMBASERESETSAVE;
typedef struct tagArmBaseReSetSave                 	*LPARMBASERESETSAVE;

struct tagArmBaseReSet;
typedef struct tagArmBaseReSet                     	ARMBASERESET;
typedef struct tagArmBaseReSet                     	*LPARMBASERESET;

struct tagArmStepUp;
typedef struct tagArmStepUp                        	ARMSTEPUP;
typedef struct tagArmStepUp                        	*LPARMSTEPUP;

struct tagSparCullData;
typedef struct tagSparCullData                     	SPARCULLDATA;
typedef struct tagSparCullData                     	*LPSPARCULLDATA;

struct tagSparInlayData;
typedef struct tagSparInlayData                    	SPARINLAYDATA;
typedef struct tagSparInlayData                    	*LPSPARINLAYDATA;

struct tagAddPowerStuff;
typedef struct tagAddPowerStuff                    	ADDPOWERSTUFF;
typedef struct tagAddPowerStuff                    	*LPADDPOWERSTUFF;

struct tagSparSorbData;
typedef struct tagSparSorbData                     	SPARSORBDATA;
typedef struct tagSparSorbData                     	*LPSPARSORBDATA;

struct tagGemAddPower;
typedef struct tagGemAddPower                      	GEMADDPOWER;
typedef struct tagGemAddPower                      	*LPGEMADDPOWER;

struct tagGemReSet;
typedef struct tagGemReSet                         	GEMRESET;
typedef struct tagGemReSet                         	*LPGEMRESET;

struct tagArmAttrMove;
typedef struct tagArmAttrMove                      	ARMATTRMOVE;
typedef struct tagArmAttrMove                      	*LPARMATTRMOVE;

struct tagGemReSetSave;
typedef struct tagGemReSetSave                     	GEMRESETSAVE;
typedef struct tagGemReSetSave                     	*LPGEMRESETSAVE;

struct tagArmAttrReSet;
typedef struct tagArmAttrReSet                     	ARMATTRRESET;
typedef struct tagArmAttrReSet                     	*LPARMATTRRESET;

struct tagArmUpData;
typedef struct tagArmUpData                        	ARMUPDATA;
typedef struct tagArmUpData                        	*LPARMUPDATA;

struct tagGemLevelUpData;
typedef struct tagGemLevelUpData                   	GEMLEVELUPDATA;
typedef struct tagGemLevelUpData                   	*LPGEMLEVELUPDATA;

struct tagGemInlayData;
typedef struct tagGemInlayData                     	GEMINLAYDATA;
typedef struct tagGemInlayData                     	*LPGEMINLAYDATA;

struct tagGemPickData;
typedef struct tagGemPickData                      	GEMPICKDATA;
typedef struct tagGemPickData                      	*LPGEMPICKDATA;

struct tagGemOpenHoleData;
typedef struct tagGemOpenHoleData                  	GEMOPENHOLEDATA;
typedef struct tagGemOpenHoleData                  	*LPGEMOPENHOLEDATA;

struct tagArmMoveStarData;
typedef struct tagArmMoveStarData                  	ARMMOVESTARDATA;
typedef struct tagArmMoveStarData                  	*LPARMMOVESTARDATA;

struct tagArmBindData;
typedef struct tagArmBindData                      	ARMBINDDATA;
typedef struct tagArmBindData                      	*LPARMBINDDATA;

struct tagArmUnBindData;
typedef struct tagArmUnBindData                    	ARMUNBINDDATA;
typedef struct tagArmUnBindData                    	*LPARMUNBINDDATA;

struct tagArmUnFengYinPre;
typedef struct tagArmUnFengYinPre                  	ARMUNFENGYINPRE;
typedef struct tagArmUnFengYinPre                  	*LPARMUNFENGYINPRE;

struct tagArmUnFengYin;
typedef struct tagArmUnFengYin                     	ARMUNFENGYIN;
typedef struct tagArmUnFengYin                     	*LPARMUNFENGYIN;

struct tagArmFenJie;
typedef struct tagArmFenJie                        	ARMFENJIE;
typedef struct tagArmFenJie                        	*LPARMFENJIE;

struct tagRecastArmInfo;
typedef struct tagRecastArmInfo                    	RECASTARMINFO;
typedef struct tagRecastArmInfo                    	*LPRECASTARMINFO;

struct tagArmRecastData;
typedef struct tagArmRecastData                    	ARMRECASTDATA;
typedef struct tagArmRecastData                    	*LPARMRECASTDATA;

struct tagArmSaveRecastData;
typedef struct tagArmSaveRecastData                	ARMSAVERECASTDATA;
typedef struct tagArmSaveRecastData                	*LPARMSAVERECASTDATA;

struct tagArmStarData;
typedef struct tagArmStarData                      	ARMSTARDATA;
typedef struct tagArmStarData                      	*LPARMSTARDATA;

struct tagArmStarSaveData;
typedef struct tagArmStarSaveData                  	ARMSTARSAVEDATA;
typedef struct tagArmStarSaveData                  	*LPARMSTARSAVEDATA;

struct tagArmWashData;
typedef struct tagArmWashData                      	ARMWASHDATA;
typedef struct tagArmWashData                      	*LPARMWASHDATA;

struct tagArmAttrActive;
typedef struct tagArmAttrActive                    	ARMATTRACTIVE;
typedef struct tagArmAttrActive                    	*LPARMATTRACTIVE;

struct tagArmWashSaveData;
typedef struct tagArmWashSaveData                  	ARMWASHSAVEDATA;
typedef struct tagArmWashSaveData                  	*LPARMWASHSAVEDATA;

struct tagArmLevelUP;
typedef struct tagArmLevelUP                       	ARMLEVELUP;
typedef struct tagArmLevelUP                       	*LPARMLEVELUP;

struct tagArmCheck;
typedef struct tagArmCheck                         	ARMCHECK;
typedef struct tagArmCheck                         	*LPARMCHECK;

struct tagArmBackUnreal;
typedef struct tagArmBackUnreal                    	ARMBACKUNREAL;
typedef struct tagArmBackUnreal                    	*LPARMBACKUNREAL;

union tagCSArmCltData;
typedef union  tagCSArmCltData                     	CSARMCLTDATA;
typedef union  tagCSArmCltData                     	*LPCSARMCLTDATA;

struct tagCSArmClt;
typedef struct tagCSArmClt                         	CSARMCLT;
typedef struct tagCSArmClt                         	*LPCSARMCLT;

struct tagCSArmSvr;
typedef struct tagCSArmSvr                         	CSARMSVR;
typedef struct tagCSArmSvr                         	*LPCSARMSVR;

struct tagCSChgNameClt;
typedef struct tagCSChgNameClt                     	CSCHGNAMECLT;
typedef struct tagCSChgNameClt                     	*LPCSCHGNAMECLT;

struct tagCSChgNameSvr;
typedef struct tagCSChgNameSvr                     	CSCHGNAMESVR;
typedef struct tagCSChgNameSvr                     	*LPCSCHGNAMESVR;

struct tagCSAuthClt;
typedef struct tagCSAuthClt                        	CSAUTHCLT;
typedef struct tagCSAuthClt                        	*LPCSAUTHCLT;

struct tagCSAuthSvr;
typedef struct tagCSAuthSvr                        	CSAUTHSVR;
typedef struct tagCSAuthSvr                        	*LPCSAUTHSVR;

struct tagCSQueInfo;
typedef struct tagCSQueInfo                        	CSQUEINFO;
typedef struct tagCSQueInfo                        	*LPCSQUEINFO;

struct tagCSMonSpeech;
typedef struct tagCSMonSpeech                      	CSMONSPEECH;
typedef struct tagCSMonSpeech                      	*LPCSMONSPEECH;

struct tagCSMonSpeechEx;
typedef struct tagCSMonSpeechEx                    	CSMONSPEECHEX;
typedef struct tagCSMonSpeechEx                    	*LPCSMONSPEECHEX;

struct tagCSVersionClt;
typedef struct tagCSVersionClt                     	CSVERSIONCLT;
typedef struct tagCSVersionClt                     	*LPCSVERSIONCLT;

struct tagCSVersionSvr;
typedef struct tagCSVersionSvr                     	CSVERSIONSVR;
typedef struct tagCSVersionSvr                     	*LPCSVERSIONSVR;

struct tagCSCancelStatus;
typedef struct tagCSCancelStatus                   	CSCANCELSTATUS;
typedef struct tagCSCancelStatus                   	*LPCSCANCELSTATUS;

struct tagCSWatchPlayerClt;
typedef struct tagCSWatchPlayerClt                 	CSWATCHPLAYERCLT;
typedef struct tagCSWatchPlayerClt                 	*LPCSWATCHPLAYERCLT;

struct tagCSWatchFriendClt;
typedef struct tagCSWatchFriendClt                 	CSWATCHFRIENDCLT;
typedef struct tagCSWatchFriendClt                 	*LPCSWATCHFRIENDCLT;

struct tagCSWatchPlayerSvr;
typedef struct tagCSWatchPlayerSvr                 	CSWATCHPLAYERSVR;
typedef struct tagCSWatchPlayerSvr                 	*LPCSWATCHPLAYERSVR;

struct tagWatchOne;
typedef struct tagWatchOne                         	WATCHONE;
typedef struct tagWatchOne                         	*LPWATCHONE;

struct tagCSOnlineAwardSvr;
typedef struct tagCSOnlineAwardSvr                 	CSONLINEAWARDSVR;
typedef struct tagCSOnlineAwardSvr                 	*LPCSONLINEAWARDSVR;

struct tagCSOnlineAwardClt;
typedef struct tagCSOnlineAwardClt                 	CSONLINEAWARDCLT;
typedef struct tagCSOnlineAwardClt                 	*LPCSONLINEAWARDCLT;

struct tagWeiXingPos;
typedef struct tagWeiXingPos                       	WEIXINGPOS;
typedef struct tagWeiXingPos                       	*LPWEIXINGPOS;

struct tagWeiXingAppeal;
typedef struct tagWeiXingAppeal                    	WEIXINGAPPEAL;
typedef struct tagWeiXingAppeal                    	*LPWEIXINGAPPEAL;

union tagWeiXingData;
typedef union  tagWeiXingData                      	WEIXINGDATA;
typedef union  tagWeiXingData                      	*LPWEIXINGDATA;

struct tagCSWeiXingSvr;
typedef struct tagCSWeiXingSvr                     	CSWEIXINGSVR;
typedef struct tagCSWeiXingSvr                     	*LPCSWEIXINGSVR;

struct tagCSWeiXingClt;
typedef struct tagCSWeiXingClt                     	CSWEIXINGCLT;
typedef struct tagCSWeiXingClt                     	*LPCSWEIXINGCLT;

struct tagCSFightSvr;
typedef struct tagCSFightSvr                       	CSFIGHTSVR;
typedef struct tagCSFightSvr                       	*LPCSFIGHTSVR;

union tagDesignationCltData;
typedef union  tagDesignationCltData               	DESIGNATIONCLTDATA;
typedef union  tagDesignationCltData               	*LPDESIGNATIONCLTDATA;

struct tagCSDesignationClt;
typedef struct tagCSDesignationClt                 	CSDESIGNATIONCLT;
typedef struct tagCSDesignationClt                 	*LPCSDESIGNATIONCLT;

struct tagCSDesignationSetRes;
typedef struct tagCSDesignationSetRes              	CSDESIGNATIONSETRES;
typedef struct tagCSDesignationSetRes              	*LPCSDESIGNATIONSETRES;

union tagDesignationSvrData;
typedef union  tagDesignationSvrData               	DESIGNATIONSVRDATA;
typedef union  tagDesignationSvrData               	*LPDESIGNATIONSVRDATA;

struct tagCSDesignationSvr;
typedef struct tagCSDesignationSvr                 	CSDESIGNATIONSVR;
typedef struct tagCSDesignationSvr                 	*LPCSDESIGNATIONSVR;

struct tagCSFairyClt;
typedef struct tagCSFairyClt                       	CSFAIRYCLT;
typedef struct tagCSFairyClt                       	*LPCSFAIRYCLT;

struct tagFairyData;
typedef struct tagFairyData                        	FAIRYDATA;
typedef struct tagFairyData                        	*LPFAIRYDATA;

union tagFairySvrData;
typedef union  tagFairySvrData                     	FAIRYSVRDATA;
typedef union  tagFairySvrData                     	*LPFAIRYSVRDATA;

struct tagCSFairySvr;
typedef struct tagCSFairySvr                       	CSFAIRYSVR;
typedef struct tagCSFairySvr                       	*LPCSFAIRYSVR;

struct tagRolePolyBaseInfo;
typedef struct tagRolePolyBaseInfo                 	ROLEPOLYBASEINFO;
typedef struct tagRolePolyBaseInfo                 	*LPROLEPOLYBASEINFO;

struct tagRolePolyAppendInfo;
typedef struct tagRolePolyAppendInfo               	ROLEPOLYAPPENDINFO;
typedef struct tagRolePolyAppendInfo               	*LPROLEPOLYAPPENDINFO;

struct tagAllRoleBaseInfo;
typedef struct tagAllRoleBaseInfo                  	ALLROLEBASEINFO;
typedef struct tagAllRoleBaseInfo                  	*LPALLROLEBASEINFO;

struct tagAllRoleInfo;
typedef struct tagAllRoleInfo                      	ALLROLEINFO;
typedef struct tagAllRoleInfo                      	*LPALLROLEINFO;

struct tagAllRoleBaseInfoList;
typedef struct tagAllRoleBaseInfoList              	ALLROLEBASEINFOLIST;
typedef struct tagAllRoleBaseInfoList              	*LPALLROLEBASEINFOLIST;

struct tagAllRoleInfoList;
typedef struct tagAllRoleInfoList                  	ALLROLEINFOLIST;
typedef struct tagAllRoleInfoList                  	*LPALLROLEINFOLIST;

union tagPolyFBInfo;
typedef union  tagPolyFBInfo                       	POLYFBINFO;
typedef union  tagPolyFBInfo                       	*LPPOLYFBINFO;

struct tagCSPolyFBInfo;
typedef struct tagCSPolyFBInfo                     	CSPOLYFBINFO;
typedef struct tagCSPolyFBInfo                     	*LPCSPOLYFBINFO;

struct tagCSItemSelfCool;
typedef struct tagCSItemSelfCool                   	CSITEMSELFCOOL;
typedef struct tagCSItemSelfCool                   	*LPCSITEMSELFCOOL;

struct tagCSItemSpeCool;
typedef struct tagCSItemSpeCool                    	CSITEMSPECOOL;
typedef struct tagCSItemSpeCool                    	*LPCSITEMSPECOOL;

struct tagCSItemCoolInfo;
typedef struct tagCSItemCoolInfo                   	CSITEMCOOLINFO;
typedef struct tagCSItemCoolInfo                   	*LPCSITEMCOOLINFO;

struct tagCSShoppingQueryTianYuanReq;
typedef struct tagCSShoppingQueryTianYuanReq       	CSSHOPPINGQUERYTIANYUANREQ;
typedef struct tagCSShoppingQueryTianYuanReq       	*LPCSSHOPPINGQUERYTIANYUANREQ;

struct tagCSShoppingQueryTianYuanRes;
typedef struct tagCSShoppingQueryTianYuanRes       	CSSHOPPINGQUERYTIANYUANRES;
typedef struct tagCSShoppingQueryTianYuanRes       	*LPCSSHOPPINGQUERYTIANYUANRES;

struct tagCSShoppingBuyReq;
typedef struct tagCSShoppingBuyReq                 	CSSHOPPINGBUYREQ;
typedef struct tagCSShoppingBuyReq                 	*LPCSSHOPPINGBUYREQ;

struct tagCSShoppingPackagePresentReq;
typedef struct tagCSShoppingPackagePresentReq      	CSSHOPPINGPACKAGEPRESENTREQ;
typedef struct tagCSShoppingPackagePresentReq      	*LPCSSHOPPINGPACKAGEPRESENTREQ;

struct tagCSShoppingPackagePresentRes;
typedef struct tagCSShoppingPackagePresentRes      	CSSHOPPINGPACKAGEPRESENTRES;
typedef struct tagCSShoppingPackagePresentRes      	*LPCSSHOPPINGPACKAGEPRESENTRES;

struct tagCSShoppingFreshRecordReq;
typedef struct tagCSShoppingFreshRecordReq         	CSSHOPPINGFRESHRECORDREQ;
typedef struct tagCSShoppingFreshRecordReq         	*LPCSSHOPPINGFRESHRECORDREQ;

struct tagCSShoppingFreshRecordRes;
typedef struct tagCSShoppingFreshRecordRes         	CSSHOPPINGFRESHRECORDRES;
typedef struct tagCSShoppingFreshRecordRes         	*LPCSSHOPPINGFRESHRECORDRES;

struct tagCSShoppingLimitFreshRecordRes;
typedef struct tagCSShoppingLimitFreshRecordRes    	CSSHOPPINGLIMITFRESHRECORDRES;
typedef struct tagCSShoppingLimitFreshRecordRes    	*LPCSSHOPPINGLIMITFRESHRECORDRES;

struct tagCSShoppingModifyRecordRes;
typedef struct tagCSShoppingModifyRecordRes        	CSSHOPPINGMODIFYRECORDRES;
typedef struct tagCSShoppingModifyRecordRes        	*LPCSSHOPPINGMODIFYRECORDRES;

struct tagCSShoppingModifyLimitRecordRes;
typedef struct tagCSShoppingModifyLimitRecordRes   	CSSHOPPINGMODIFYLIMITRECORDRES;
typedef struct tagCSShoppingModifyLimitRecordRes   	*LPCSSHOPPINGMODIFYLIMITRECORDRES;

struct tagCSShoppingQueryTradeSellReq;
typedef struct tagCSShoppingQueryTradeSellReq      	CSSHOPPINGQUERYTRADESELLREQ;
typedef struct tagCSShoppingQueryTradeSellReq      	*LPCSSHOPPINGQUERYTRADESELLREQ;

struct tagCSShoppingQueryTradeSellRes;
typedef struct tagCSShoppingQueryTradeSellRes      	CSSHOPPINGQUERYTRADESELLRES;
typedef struct tagCSShoppingQueryTradeSellRes      	*LPCSSHOPPINGQUERYTRADESELLRES;

struct tagCSShoppingQueryTradeBuyReq;
typedef struct tagCSShoppingQueryTradeBuyReq       	CSSHOPPINGQUERYTRADEBUYREQ;
typedef struct tagCSShoppingQueryTradeBuyReq       	*LPCSSHOPPINGQUERYTRADEBUYREQ;

struct tagCSShoppingQueryTradeBuyRes;
typedef struct tagCSShoppingQueryTradeBuyRes       	CSSHOPPINGQUERYTRADEBUYRES;
typedef struct tagCSShoppingQueryTradeBuyRes       	*LPCSSHOPPINGQUERYTRADEBUYRES;

struct tagCSShoppingTradeReq;
typedef struct tagCSShoppingTradeReq               	CSSHOPPINGTRADEREQ;
typedef struct tagCSShoppingTradeReq               	*LPCSSHOPPINGTRADEREQ;

struct tagCSShoppingTradeRes;
typedef struct tagCSShoppingTradeRes               	CSSHOPPINGTRADERES;
typedef struct tagCSShoppingTradeRes               	*LPCSSHOPPINGTRADERES;

struct tagCSShoppingSendTradeRecordReq;
typedef struct tagCSShoppingSendTradeRecordReq     	CSSHOPPINGSENDTRADERECORDREQ;
typedef struct tagCSShoppingSendTradeRecordReq     	*LPCSSHOPPINGSENDTRADERECORDREQ;

struct tagCSShoppingSendTradeRecordRes;
typedef struct tagCSShoppingSendTradeRecordRes     	CSSHOPPINGSENDTRADERECORDRES;
typedef struct tagCSShoppingSendTradeRecordRes     	*LPCSSHOPPINGSENDTRADERECORDRES;

struct tagCSShoppingQueryMyTradeRecordReq;
typedef struct tagCSShoppingQueryMyTradeRecordReq  	CSSHOPPINGQUERYMYTRADERECORDREQ;
typedef struct tagCSShoppingQueryMyTradeRecordReq  	*LPCSSHOPPINGQUERYMYTRADERECORDREQ;

struct tagCSShoppingQueryMyTradeRecordRes;
typedef struct tagCSShoppingQueryMyTradeRecordRes  	CSSHOPPINGQUERYMYTRADERECORDRES;
typedef struct tagCSShoppingQueryMyTradeRecordRes  	*LPCSSHOPPINGQUERYMYTRADERECORDRES;

struct tagCSShoppingDestroyTradeRecordReq;
typedef struct tagCSShoppingDestroyTradeRecordReq  	CSSHOPPINGDESTROYTRADERECORDREQ;
typedef struct tagCSShoppingDestroyTradeRecordReq  	*LPCSSHOPPINGDESTROYTRADERECORDREQ;

struct tagCSShoppingDestroyTradeRecordRes;
typedef struct tagCSShoppingDestroyTradeRecordRes  	CSSHOPPINGDESTROYTRADERECORDRES;
typedef struct tagCSShoppingDestroyTradeRecordRes  	*LPCSSHOPPINGDESTROYTRADERECORDRES;

struct tagCSShoppingGetXmlFileReq;
typedef struct tagCSShoppingGetXmlFileReq          	CSSHOPPINGGETXMLFILEREQ;
typedef struct tagCSShoppingGetXmlFileReq          	*LPCSSHOPPINGGETXMLFILEREQ;

struct tagCSShoppingGetXmlFileRes;
typedef struct tagCSShoppingGetXmlFileRes          	CSSHOPPINGGETXMLFILERES;
typedef struct tagCSShoppingGetXmlFileRes          	*LPCSSHOPPINGGETXMLFILERES;

struct tagCSShoppingQueryRecordByIDReq;
typedef struct tagCSShoppingQueryRecordByIDReq     	CSSHOPPINGQUERYRECORDBYIDREQ;
typedef struct tagCSShoppingQueryRecordByIDReq     	*LPCSSHOPPINGQUERYRECORDBYIDREQ;

struct tagCSShoppingQueryRecordByIDRes;
typedef struct tagCSShoppingQueryRecordByIDRes     	CSSHOPPINGQUERYRECORDBYIDRES;
typedef struct tagCSShoppingQueryRecordByIDRes     	*LPCSSHOPPINGQUERYRECORDBYIDRES;

struct tagCSShoppingMsgRes;
typedef struct tagCSShoppingMsgRes                 	CSSHOPPINGMSGRES;
typedef struct tagCSShoppingMsgRes                 	*LPCSSHOPPINGMSGRES;

struct tagCSShoppingOpenReq;
typedef struct tagCSShoppingOpenReq                	CSSHOPPINGOPENREQ;
typedef struct tagCSShoppingOpenReq                	*LPCSSHOPPINGOPENREQ;

struct tagCSShoppingQueryPropsDefReq;
typedef struct tagCSShoppingQueryPropsDefReq       	CSSHOPPINGQUERYPROPSDEFREQ;
typedef struct tagCSShoppingQueryPropsDefReq       	*LPCSSHOPPINGQUERYPROPSDEFREQ;

struct tagCSShoppingQueryPropsDefRes;
typedef struct tagCSShoppingQueryPropsDefRes       	CSSHOPPINGQUERYPROPSDEFRES;
typedef struct tagCSShoppingQueryPropsDefRes       	*LPCSSHOPPINGQUERYPROPSDEFRES;

struct tagCSShoppingQueryPropsGiftReq;
typedef struct tagCSShoppingQueryPropsGiftReq      	CSSHOPPINGQUERYPROPSGIFTREQ;
typedef struct tagCSShoppingQueryPropsGiftReq      	*LPCSSHOPPINGQUERYPROPSGIFTREQ;

struct tagCSShoppingQueryPropsGiftRes;
typedef struct tagCSShoppingQueryPropsGiftRes      	CSSHOPPINGQUERYPROPSGIFTRES;
typedef struct tagCSShoppingQueryPropsGiftRes      	*LPCSSHOPPINGQUERYPROPSGIFTRES;

struct tagCSShoppingSetPropsGiftReq;
typedef struct tagCSShoppingSetPropsGiftReq        	CSSHOPPINGSETPROPSGIFTREQ;
typedef struct tagCSShoppingSetPropsGiftReq        	*LPCSSHOPPINGSETPROPSGIFTREQ;

struct tagCSShoppingSetPropsGiftRes;
typedef struct tagCSShoppingSetPropsGiftRes        	CSSHOPPINGSETPROPSGIFTRES;
typedef struct tagCSShoppingSetPropsGiftRes        	*LPCSSHOPPINGSETPROPSGIFTRES;

struct tagCSShoppingExchangeReq;
typedef struct tagCSShoppingExchangeReq            	CSSHOPPINGEXCHANGEREQ;
typedef struct tagCSShoppingExchangeReq            	*LPCSSHOPPINGEXCHANGEREQ;

struct tagCSShoppingExchangeRes;
typedef struct tagCSShoppingExchangeRes            	CSSHOPPINGEXCHANGERES;
typedef struct tagCSShoppingExchangeRes            	*LPCSSHOPPINGEXCHANGERES;

struct tagCSShoppingShopDelRes;
typedef struct tagCSShoppingShopDelRes             	CSSHOPPINGSHOPDELRES;
typedef struct tagCSShoppingShopDelRes             	*LPCSSHOPPINGSHOPDELRES;

struct tagCSShoppingShopLimitDelRes;
typedef struct tagCSShoppingShopLimitDelRes        	CSSHOPPINGSHOPLIMITDELRES;
typedef struct tagCSShoppingShopLimitDelRes        	*LPCSSHOPPINGSHOPLIMITDELRES;

union tagCSShoppingReqData;
typedef union  tagCSShoppingReqData                	CSSHOPPINGREQDATA;
typedef union  tagCSShoppingReqData                	*LPCSSHOPPINGREQDATA;

union tagCSShoppingResData;
typedef union  tagCSShoppingResData                	CSSHOPPINGRESDATA;
typedef union  tagCSShoppingResData                	*LPCSSHOPPINGRESDATA;

struct tagCSShoppingReq;
typedef struct tagCSShoppingReq                    	CSSHOPPINGREQ;
typedef struct tagCSShoppingReq                    	*LPCSSHOPPINGREQ;

struct tagCSShoppingRes;
typedef struct tagCSShoppingRes                    	CSSHOPPINGRES;
typedef struct tagCSShoppingRes                    	*LPCSSHOPPINGRES;

struct tagCSStarStoneOpenReq;
typedef struct tagCSStarStoneOpenReq               	CSSTARSTONEOPENREQ;
typedef struct tagCSStarStoneOpenReq               	*LPCSSTARSTONEOPENREQ;

struct tagCSStarStoneOpenRes;
typedef struct tagCSStarStoneOpenRes               	CSSTARSTONEOPENRES;
typedef struct tagCSStarStoneOpenRes               	*LPCSSTARSTONEOPENRES;

struct tagCSStarDataRes;
typedef struct tagCSStarDataRes                    	CSSTARDATARES;
typedef struct tagCSStarDataRes                    	*LPCSSTARDATARES;

union tagCSStarData;
typedef union  tagCSStarData                       	CSSTARDATA;
typedef union  tagCSStarData                       	*LPCSSTARDATA;

struct tagCSStarDataClt;
typedef struct tagCSStarDataClt                    	CSSTARDATACLT;
typedef struct tagCSStarDataClt                    	*LPCSSTARDATACLT;

struct tagCSStarDataSvr;
typedef struct tagCSStarDataSvr                    	CSSTARDATASVR;
typedef struct tagCSStarDataSvr                    	*LPCSSTARDATASVR;

struct tagCSMudChatRoomListReq;
typedef struct tagCSMudChatRoomListReq             	CSMUDCHATROOMLISTREQ;
typedef struct tagCSMudChatRoomListReq             	*LPCSMUDCHATROOMLISTREQ;

struct tagCSMudChatRoomListRes;
typedef struct tagCSMudChatRoomListRes             	CSMUDCHATROOMLISTRES;
typedef struct tagCSMudChatRoomListRes             	*LPCSMUDCHATROOMLISTRES;

struct tagCSMudRoleLoginReq;
typedef struct tagCSMudRoleLoginReq                	CSMUDROLELOGINREQ;
typedef struct tagCSMudRoleLoginReq                	*LPCSMUDROLELOGINREQ;

struct tagCSRoomRoleInfo;
typedef struct tagCSRoomRoleInfo                   	CSROOMROLEINFO;
typedef struct tagCSRoomRoleInfo                   	*LPCSROOMROLEINFO;

struct tagCSMudEnterChatRoomReq;
typedef struct tagCSMudEnterChatRoomReq            	CSMUDENTERCHATROOMREQ;
typedef struct tagCSMudEnterChatRoomReq            	*LPCSMUDENTERCHATROOMREQ;

struct tagCSChatRoomInfo;
typedef struct tagCSChatRoomInfo                   	CSCHATROOMINFO;
typedef struct tagCSChatRoomInfo                   	*LPCSCHATROOMINFO;

struct tagCSMudEnterChatRoomRes;
typedef struct tagCSMudEnterChatRoomRes            	CSMUDENTERCHATROOMRES;
typedef struct tagCSMudEnterChatRoomRes            	*LPCSMUDENTERCHATROOMRES;

struct tagCSMudOutChatRoomReq;
typedef struct tagCSMudOutChatRoomReq              	CSMUDOUTCHATROOMREQ;
typedef struct tagCSMudOutChatRoomReq              	*LPCSMUDOUTCHATROOMREQ;

struct tagCSMudOutChatRoomRes;
typedef struct tagCSMudOutChatRoomRes              	CSMUDOUTCHATROOMRES;
typedef struct tagCSMudOutChatRoomRes              	*LPCSMUDOUTCHATROOMRES;

struct tagCSMudRoleDetail;
typedef struct tagCSMudRoleDetail                  	CSMUDROLEDETAIL;
typedef struct tagCSMudRoleDetail                  	*LPCSMUDROLEDETAIL;

struct tagCSMudRoleLoginRes;
typedef struct tagCSMudRoleLoginRes                	CSMUDROLELOGINRES;
typedef struct tagCSMudRoleLoginRes                	*LPCSMUDROLELOGINRES;

struct tagCSMudChatRoomEnterInfo;
typedef struct tagCSMudChatRoomEnterInfo           	CSMUDCHATROOMENTERINFO;
typedef struct tagCSMudChatRoomEnterInfo           	*LPCSMUDCHATROOMENTERINFO;

struct tagCSMudChatRoomLeaveInfo;
typedef struct tagCSMudChatRoomLeaveInfo           	CSMUDCHATROOMLEAVEINFO;
typedef struct tagCSMudChatRoomLeaveInfo           	*LPCSMUDCHATROOMLEAVEINFO;

struct tagCSMudRoleLogoutReq;
typedef struct tagCSMudRoleLogoutReq               	CSMUDROLELOGOUTREQ;
typedef struct tagCSMudRoleLogoutReq               	*LPCSMUDROLELOGOUTREQ;

struct tagCSMudRoleOfflineExp;
typedef struct tagCSMudRoleOfflineExp              	CSMUDROLEOFFLINEEXP;
typedef struct tagCSMudRoleOfflineExp              	*LPCSMUDROLEOFFLINEEXP;

union tagCSMudRoleAttrData;
typedef union  tagCSMudRoleAttrData                	CSMUDROLEATTRDATA;
typedef union  tagCSMudRoleAttrData                	*LPCSMUDROLEATTRDATA;

struct tagCSMudRoleAttrChg;
typedef struct tagCSMudRoleAttrChg                 	CSMUDROLEATTRCHG;
typedef struct tagCSMudRoleAttrChg                 	*LPCSMUDROLEATTRCHG;

struct tagCSMudChatChannelInfo;
typedef struct tagCSMudChatChannelInfo             	CSMUDCHATCHANNELINFO;
typedef struct tagCSMudChatChannelInfo             	*LPCSMUDCHATCHANNELINFO;

struct tagCSMudChatChannelSetReq;
typedef struct tagCSMudChatChannelSetReq           	CSMUDCHATCHANNELSETREQ;
typedef struct tagCSMudChatChannelSetReq           	*LPCSMUDCHATCHANNELSETREQ;

struct tagCSMudChatChannelSetRes;
typedef struct tagCSMudChatChannelSetRes           	CSMUDCHATCHANNELSETRES;
typedef struct tagCSMudChatChannelSetRes           	*LPCSMUDCHATCHANNELSETRES;

struct tagCSMudOfflineExpFullInfo;
typedef struct tagCSMudOfflineExpFullInfo          	CSMUDOFFLINEEXPFULLINFO;
typedef struct tagCSMudOfflineExpFullInfo          	*LPCSMUDOFFLINEEXPFULLINFO;

struct tagCSMudOfflineExpTakeReq;
typedef struct tagCSMudOfflineExpTakeReq           	CSMUDOFFLINEEXPTAKEREQ;
typedef struct tagCSMudOfflineExpTakeReq           	*LPCSMUDOFFLINEEXPTAKEREQ;

struct tagCSMudOfflineExpTakeRes;
typedef struct tagCSMudOfflineExpTakeRes           	CSMUDOFFLINEEXPTAKERES;
typedef struct tagCSMudOfflineExpTakeRes           	*LPCSMUDOFFLINEEXPTAKERES;

union tagCSPKCltData;
typedef union  tagCSPKCltData                      	CSPKCLTDATA;
typedef union  tagCSPKCltData                      	*LPCSPKCLTDATA;

struct tagCSPKClt;
typedef struct tagCSPKClt                          	CSPKCLT;
typedef struct tagCSPKClt                          	*LPCSPKCLT;

struct tagCSExitPworld;
typedef struct tagCSExitPworld                     	CSEXITPWORLD;
typedef struct tagCSExitPworld                     	*LPCSEXITPWORLD;

struct tagCSEnterClanCity;
typedef struct tagCSEnterClanCity                  	CSENTERCLANCITY;
typedef struct tagCSEnterClanCity                  	*LPCSENTERCLANCITY;

struct tagCSJoinQueue;
typedef struct tagCSJoinQueue                      	CSJOINQUEUE;
typedef struct tagCSJoinQueue                      	*LPCSJOINQUEUE;

struct tagCSApplyPworldQueue;
typedef struct tagCSApplyPworldQueue               	CSAPPLYPWORLDQUEUE;
typedef struct tagCSApplyPworldQueue               	*LPCSAPPLYPWORLDQUEUE;

struct tagCSExitPworldQueue;
typedef struct tagCSExitPworldQueue                	CSEXITPWORLDQUEUE;
typedef struct tagCSExitPworldQueue                	*LPCSEXITPWORLDQUEUE;

struct tagCSEnterPworldInst;
typedef struct tagCSEnterPworldInst                	CSENTERPWORLDINST;
typedef struct tagCSEnterPworldInst                	*LPCSENTERPWORLDINST;

struct tagCSPworldMatch;
typedef struct tagCSPworldMatch                    	CSPWORLDMATCH;
typedef struct tagCSPworldMatch                    	*LPCSPWORLDMATCH;

struct tagCSPworldApplyInvite;
typedef struct tagCSPworldApplyInvite              	CSPWORLDAPPLYINVITE;
typedef struct tagCSPworldApplyInvite              	*LPCSPWORLDAPPLYINVITE;

union tagCSPworldCltData;
typedef union  tagCSPworldCltData                  	CSPWORLDCLTDATA;
typedef union  tagCSPworldCltData                  	*LPCSPWORLDCLTDATA;

struct tagCSPworldClt;
typedef struct tagCSPworldClt                      	CSPWORLDCLT;
typedef struct tagCSPworldClt                      	*LPCSPWORLDCLT;

struct tagCSEnterPworldQueue;
typedef struct tagCSEnterPworldQueue               	CSENTERPWORLDQUEUE;
typedef struct tagCSEnterPworldQueue               	*LPCSENTERPWORLDQUEUE;

struct tagCSInviteEnterPworld;
typedef struct tagCSInviteEnterPworld              	CSINVITEENTERPWORLD;
typedef struct tagCSInviteEnterPworld              	*LPCSINVITEENTERPWORLD;

struct tagCSPworldMatchStatus;
typedef struct tagCSPworldMatchStatus              	CSPWORLDMATCHSTATUS;
typedef struct tagCSPworldMatchStatus              	*LPCSPWORLDMATCHSTATUS;

union tagCSPworldSvrData;
typedef union  tagCSPworldSvrData                  	CSPWORLDSVRDATA;
typedef union  tagCSPworldSvrData                  	*LPCSPWORLDSVRDATA;

struct tagCSPworldSvr;
typedef struct tagCSPworldSvr                      	CSPWORLDSVR;
typedef struct tagCSPworldSvr                      	*LPCSPWORLDSVR;

struct tagCSBattleSurvivalInfo;
typedef struct tagCSBattleSurvivalInfo             	CSBATTLESURVIVALINFO;
typedef struct tagCSBattleSurvivalInfo             	*LPCSBATTLESURVIVALINFO;

struct tagCSBattleAoShanInfo;
typedef struct tagCSBattleAoShanInfo               	CSBATTLEAOSHANINFO;
typedef struct tagCSBattleAoShanInfo               	*LPCSBATTLEAOSHANINFO;

struct tagCSBattleXuKongInfo;
typedef struct tagCSBattleXuKongInfo               	CSBATTLEXUKONGINFO;
typedef struct tagCSBattleXuKongInfo               	*LPCSBATTLEXUKONGINFO;

struct tagCSBattleClanWarInfo;
typedef struct tagCSBattleClanWarInfo              	CSBATTLECLANWARINFO;
typedef struct tagCSBattleClanWarInfo              	*LPCSBATTLECLANWARINFO;

union tagCSBattleFightInfo;
typedef union  tagCSBattleFightInfo                	CSBATTLEFIGHTINFO;
typedef union  tagCSBattleFightInfo                	*LPCSBATTLEFIGHTINFO;

struct tagCSBattleRoleInfo;
typedef struct tagCSBattleRoleInfo                 	CSBATTLEROLEINFO;
typedef struct tagCSBattleRoleInfo                 	*LPCSBATTLEROLEINFO;

struct tagCampInfo;
typedef struct tagCampInfo                         	CAMPINFO;
typedef struct tagCampInfo                         	*LPCAMPINFO;

struct tagCSBattleInfo;
typedef struct tagCSBattleInfo                     	CSBATTLEINFO;
typedef struct tagCSBattleInfo                     	*LPCSBATTLEINFO;

union tagCSBattleSvrData;
typedef union  tagCSBattleSvrData                  	CSBATTLESVRDATA;
typedef union  tagCSBattleSvrData                  	*LPCSBATTLESVRDATA;

struct tagCSBattleSvr;
typedef struct tagCSBattleSvr                      	CSBATTLESVR;
typedef struct tagCSBattleSvr                      	*LPCSBATTLESVR;

struct tagCSHeartBeatRes;
typedef struct tagCSHeartBeatRes                   	CSHEARTBEATRES;
typedef struct tagCSHeartBeatRes                   	*LPCSHEARTBEATRES;

struct tagCSGiftSvr;
typedef struct tagCSGiftSvr                        	CSGIFTSVR;
typedef struct tagCSGiftSvr                        	*LPCSGIFTSVR;

struct tagCSOnlineGiftSvr;
typedef struct tagCSOnlineGiftSvr                  	CSONLINEGIFTSVR;
typedef struct tagCSOnlineGiftSvr                  	*LPCSONLINEGIFTSVR;

struct tagAccGiftInfo;
typedef struct tagAccGiftInfo                      	ACCGIFTINFO;
typedef struct tagAccGiftInfo                      	*LPACCGIFTINFO;

struct tagAccGiftRes;
typedef struct tagAccGiftRes                       	ACCGIFTRES;
typedef struct tagAccGiftRes                       	*LPACCGIFTRES;

union tagAccGiftData;
typedef union  tagAccGiftData                      	ACCGIFTDATA;
typedef union  tagAccGiftData                      	*LPACCGIFTDATA;

struct tagCSAccGiftSvr;
typedef struct tagCSAccGiftSvr                     	CSACCGIFTSVR;
typedef struct tagCSAccGiftSvr                     	*LPCSACCGIFTSVR;

struct tagPropGiftInfo;
typedef struct tagPropGiftInfo                     	PROPGIFTINFO;
typedef struct tagPropGiftInfo                     	*LPPROPGIFTINFO;

struct tagPropGiftRes;
typedef struct tagPropGiftRes                      	PROPGIFTRES;
typedef struct tagPropGiftRes                      	*LPPROPGIFTRES;

struct tagPropsGiftAddCash;
typedef struct tagPropsGiftAddCash                 	PROPSGIFTADDCASH;
typedef struct tagPropsGiftAddCash                 	*LPPROPSGIFTADDCASH;

union tagPropGiftData;
typedef union  tagPropGiftData                     	PROPGIFTDATA;
typedef union  tagPropGiftData                     	*LPPROPGIFTDATA;

struct tagCSPropGiftSvr;
typedef struct tagCSPropGiftSvr                    	CSPROPGIFTSVR;
typedef struct tagCSPropGiftSvr                    	*LPCSPROPGIFTSVR;

struct tagGiftGroupOne;
typedef struct tagGiftGroupOne                     	GIFTGROUPONE;
typedef struct tagGiftGroupOne                     	*LPGIFTGROUPONE;

union tagGiftGroupData;
typedef union  tagGiftGroupData                    	GIFTGROUPDATA;
typedef union  tagGiftGroupData                    	*LPGIFTGROUPDATA;

struct tagCSOnlineGiftGroupSvr;
typedef struct tagCSOnlineGiftGroupSvr             	CSONLINEGIFTGROUPSVR;
typedef struct tagCSOnlineGiftGroupSvr             	*LPCSONLINEGIFTGROUPSVR;

struct tagContiGroup;
typedef struct tagContiGroup                       	CONTIGROUP;
typedef struct tagContiGroup                       	*LPCONTIGROUP;

struct tagPropGiftIDInfo;
typedef struct tagPropGiftIDInfo                   	PROPGIFTIDINFO;
typedef struct tagPropGiftIDInfo                   	*LPPROPGIFTIDINFO;

union tagCSGiftCltData;
typedef union  tagCSGiftCltData                    	CSGIFTCLTDATA;
typedef union  tagCSGiftCltData                    	*LPCSGIFTCLTDATA;

struct tagCSGiftClt;
typedef struct tagCSGiftClt                        	CSGIFTCLT;
typedef struct tagCSGiftClt                        	*LPCSGIFTCLT;

struct tagCSRangeCltPage;
typedef struct tagCSRangeCltPage                   	CSRANGECLTPAGE;
typedef struct tagCSRangeCltPage                   	*LPCSRANGECLTPAGE;

struct tagCSRangeCltWatchPlayer;
typedef struct tagCSRangeCltWatchPlayer            	CSRANGECLTWATCHPLAYER;
typedef struct tagCSRangeCltWatchPlayer            	*LPCSRANGECLTWATCHPLAYER;

struct tagCSRangeCltWatchPet;
typedef struct tagCSRangeCltWatchPet               	CSRANGECLTWATCHPET;
typedef struct tagCSRangeCltWatchPet               	*LPCSRANGECLTWATCHPET;

struct tagCSRangeCltJoinClan;
typedef struct tagCSRangeCltJoinClan               	CSRANGECLTJOINCLAN;
typedef struct tagCSRangeCltJoinClan               	*LPCSRANGECLTJOINCLAN;

struct tagCSRangeCltFind;
typedef struct tagCSRangeCltFind                   	CSRANGECLTFIND;
typedef struct tagCSRangeCltFind                   	*LPCSRANGECLTFIND;

union tagCSRangeCltData;
typedef union  tagCSRangeCltData                   	CSRANGECLTDATA;
typedef union  tagCSRangeCltData                   	*LPCSRANGECLTDATA;

struct tagCSRangeClt;
typedef struct tagCSRangeClt                       	CSRANGECLT;
typedef struct tagCSRangeClt                       	*LPCSRANGECLT;

struct tagCSRangeSvrTip;
typedef struct tagCSRangeSvrTip                    	CSRANGESVRTIP;
typedef struct tagCSRangeSvrTip                    	*LPCSRANGESVRTIP;

struct tagCSRangeSvrPage;
typedef struct tagCSRangeSvrPage                   	CSRANGESVRPAGE;
typedef struct tagCSRangeSvrPage                   	*LPCSRANGESVRPAGE;

struct tagCSRangeSvrFind;
typedef struct tagCSRangeSvrFind                   	CSRANGESVRFIND;
typedef struct tagCSRangeSvrFind                   	*LPCSRANGESVRFIND;

union tagCSRangeSvrData;
typedef union  tagCSRangeSvrData                   	CSRANGESVRDATA;
typedef union  tagCSRangeSvrData                   	*LPCSRANGESVRDATA;

struct tagCSRangeSvr;
typedef struct tagCSRangeSvr                       	CSRANGESVR;
typedef struct tagCSRangeSvr                       	*LPCSRANGESVR;

struct tagCSPworldLimitInfoDataAll;
typedef struct tagCSPworldLimitInfoDataAll         	CSPWORLDLIMITINFODATAALL;
typedef struct tagCSPworldLimitInfoDataAll         	*LPCSPWORLDLIMITINFODATAALL;

union tagCSPworldLimitInfoData;
typedef union  tagCSPworldLimitInfoData            	CSPWORLDLIMITINFODATA;
typedef union  tagCSPworldLimitInfoData            	*LPCSPWORLDLIMITINFODATA;

struct tagCSPworldLimitInfo;
typedef struct tagCSPworldLimitInfo                	CSPWORLDLIMITINFO;
typedef struct tagCSPworldLimitInfo                	*LPCSPWORLDLIMITINFO;

struct tagAutoTeamCltUI;
typedef struct tagAutoTeamCltUI                    	AUTOTEAMCLTUI;
typedef struct tagAutoTeamCltUI                    	*LPAUTOTEAMCLTUI;

struct tagAutoTeamCltTrans;
typedef struct tagAutoTeamCltTrans                 	AUTOTEAMCLTTRANS;
typedef struct tagAutoTeamCltTrans                 	*LPAUTOTEAMCLTTRANS;

union tagCSAutoTeamCltData;
typedef union  tagCSAutoTeamCltData                	CSAUTOTEAMCLTDATA;
typedef union  tagCSAutoTeamCltData                	*LPCSAUTOTEAMCLTDATA;

struct tagCSAutoTeamClt;
typedef struct tagCSAutoTeamClt                    	CSAUTOTEAMCLT;
typedef struct tagCSAutoTeamClt                    	*LPCSAUTOTEAMCLT;

struct tagCSAutoTeamPreMemInfo;
typedef struct tagCSAutoTeamPreMemInfo             	CSAUTOTEAMPREMEMINFO;
typedef struct tagCSAutoTeamPreMemInfo             	*LPCSAUTOTEAMPREMEMINFO;

struct tagCSAutoTeamPreAdd;
typedef struct tagCSAutoTeamPreAdd                 	CSAUTOTEAMPREADD;
typedef struct tagCSAutoTeamPreAdd                 	*LPCSAUTOTEAMPREADD;

struct tagCSAutoTeamClean;
typedef struct tagCSAutoTeamClean                  	CSAUTOTEAMCLEAN;
typedef struct tagCSAutoTeamClean                  	*LPCSAUTOTEAMCLEAN;

struct tagCSAutoTeamCancelSvr;
typedef struct tagCSAutoTeamCancelSvr              	CSAUTOTEAMCANCELSVR;
typedef struct tagCSAutoTeamCancelSvr              	*LPCSAUTOTEAMCANCELSVR;

struct tagCSAutoTeamPreDec;
typedef struct tagCSAutoTeamPreDec                 	CSAUTOTEAMPREDEC;
typedef struct tagCSAutoTeamPreDec                 	*LPCSAUTOTEAMPREDEC;

struct tagCSAutoTeamPreAgree;
typedef struct tagCSAutoTeamPreAgree               	CSAUTOTEAMPREAGREE;
typedef struct tagCSAutoTeamPreAgree               	*LPCSAUTOTEAMPREAGREE;

struct tagCSAutoTeamSucc;
typedef struct tagCSAutoTeamSucc                   	CSAUTOTEAMSUCC;
typedef struct tagCSAutoTeamSucc                   	*LPCSAUTOTEAMSUCC;

struct tagCSAutoTeamCreateSvr;
typedef struct tagCSAutoTeamCreateSvr              	CSAUTOTEAMCREATESVR;
typedef struct tagCSAutoTeamCreateSvr              	*LPCSAUTOTEAMCREATESVR;

struct tagCSAutoTeamCreateCancelSvr;
typedef struct tagCSAutoTeamCreateCancelSvr        	CSAUTOTEAMCREATECANCELSVR;
typedef struct tagCSAutoTeamCreateCancelSvr        	*LPCSAUTOTEAMCREATECANCELSVR;

struct tagCSAutoTeamEndSync;
typedef struct tagCSAutoTeamEndSync                	CSAUTOTEAMENDSYNC;
typedef struct tagCSAutoTeamEndSync                	*LPCSAUTOTEAMENDSYNC;

union tagCSAutoTeamSvrData;
typedef union  tagCSAutoTeamSvrData                	CSAUTOTEAMSVRDATA;
typedef union  tagCSAutoTeamSvrData                	*LPCSAUTOTEAMSVRDATA;

struct tagCSAutoTeamSvr;
typedef struct tagCSAutoTeamSvr                    	CSAUTOTEAMSVR;
typedef struct tagCSAutoTeamSvr                    	*LPCSAUTOTEAMSVR;

struct tagCSSecondarySkillRecipe;
typedef struct tagCSSecondarySkillRecipe           	CSSECONDARYSKILLRECIPE;
typedef struct tagCSSecondarySkillRecipe           	*LPCSSECONDARYSKILLRECIPE;

struct tagCSSecondarySkillResolve;
typedef struct tagCSSecondarySkillResolve          	CSSECONDARYSKILLRESOLVE;
typedef struct tagCSSecondarySkillResolve          	*LPCSSECONDARYSKILLRESOLVE;

struct tagCSSecondarySkillDel;
typedef struct tagCSSecondarySkillDel              	CSSECONDARYSKILLDEL;
typedef struct tagCSSecondarySkillDel              	*LPCSSECONDARYSKILLDEL;

union tagCSSecondarySkillCltData;
typedef union  tagCSSecondarySkillCltData          	CSSECONDARYSKILLCLTDATA;
typedef union  tagCSSecondarySkillCltData          	*LPCSSECONDARYSKILLCLTDATA;

struct tagCSSecondarySkillClt;
typedef struct tagCSSecondarySkillClt              	CSSECONDARYSKILLCLT;
typedef struct tagCSSecondarySkillClt              	*LPCSSECONDARYSKILLCLT;

struct tagCSSecondarySkillRecipeChg;
typedef struct tagCSSecondarySkillRecipeChg        	CSSECONDARYSKILLRECIPECHG;
typedef struct tagCSSecondarySkillRecipeChg        	*LPCSSECONDARYSKILLRECIPECHG;

struct tagCSSecondarySkillChg;
typedef struct tagCSSecondarySkillChg              	CSSECONDARYSKILLCHG;
typedef struct tagCSSecondarySkillChg              	*LPCSSECONDARYSKILLCHG;

struct tagCSSecondarySkillPre;
typedef struct tagCSSecondarySkillPre              	CSSECONDARYSKILLPRE;
typedef struct tagCSSecondarySkillPre              	*LPCSSECONDARYSKILLPRE;

struct tagCSSecondarySkillPreBrk;
typedef struct tagCSSecondarySkillPreBrk           	CSSECONDARYSKILLPREBRK;
typedef struct tagCSSecondarySkillPreBrk           	*LPCSSECONDARYSKILLPREBRK;

struct tagCSSecondarySkillSucc;
typedef struct tagCSSecondarySkillSucc             	CSSECONDARYSKILLSUCC;
typedef struct tagCSSecondarySkillSucc             	*LPCSSECONDARYSKILLSUCC;

union tagCSSecondarySkillSvrData;
typedef union  tagCSSecondarySkillSvrData          	CSSECONDARYSKILLSVRDATA;
typedef union  tagCSSecondarySkillSvrData          	*LPCSSECONDARYSKILLSVRDATA;

struct tagCSSecondarySkillSvr;
typedef struct tagCSSecondarySkillSvr              	CSSECONDARYSKILLSVR;
typedef struct tagCSSecondarySkillSvr              	*LPCSSECONDARYSKILLSVR;

struct tagCSPrepareAtkByHit;
typedef struct tagCSPrepareAtkByHit                	CSPREPAREATKBYHIT;
typedef struct tagCSPrepareAtkByHit                	*LPCSPREPAREATKBYHIT;

struct tagCSNormalAtkByHit;
typedef struct tagCSNormalAtkByHit                 	CSNORMALATKBYHIT;
typedef struct tagCSNormalAtkByHit                 	*LPCSNORMALATKBYHIT;

union tagCSPrepareAtkData;
typedef union  tagCSPrepareAtkData                 	CSPREPAREATKDATA;
typedef union  tagCSPrepareAtkData                 	*LPCSPREPAREATKDATA;

struct tagCSPrepareAtkInfo;
typedef struct tagCSPrepareAtkInfo                 	CSPREPAREATKINFO;
typedef struct tagCSPrepareAtkInfo                 	*LPCSPREPAREATKINFO;

struct tagMatchChgCareer;
typedef struct tagMatchChgCareer                   	MATCHCHGCAREER;
typedef struct tagMatchChgCareer                   	*LPMATCHCHGCAREER;

struct tagRegReq;
typedef struct tagRegReq                           	REGREQ;
typedef struct tagRegReq                           	*LPREGREQ;

struct tagBuChangReq;
typedef struct tagBuChangReq                       	BUCHANGREQ;
typedef struct tagBuChangReq                       	*LPBUCHANGREQ;

struct tagCharmReq;
typedef struct tagCharmReq                         	CHARMREQ;
typedef struct tagCharmReq                         	*LPCHARMREQ;

struct tagCSWorldBossInfoReq;
typedef struct tagCSWorldBossInfoReq               	CSWORLDBOSSINFOREQ;
typedef struct tagCSWorldBossInfoReq               	*LPCSWORLDBOSSINFOREQ;

struct tagCSWorldBossInfoOne;
typedef struct tagCSWorldBossInfoOne               	CSWORLDBOSSINFOONE;
typedef struct tagCSWorldBossInfoOne               	*LPCSWORLDBOSSINFOONE;

struct tagCSWorldBossInfoRes;
typedef struct tagCSWorldBossInfoRes               	CSWORLDBOSSINFORES;
typedef struct tagCSWorldBossInfoRes               	*LPCSWORLDBOSSINFORES;

struct tagCSPlayerClanEverydayPworldEnter;
typedef struct tagCSPlayerClanEverydayPworldEnter  	CSPLAYERCLANEVERYDAYPWORLDENTER;
typedef struct tagCSPlayerClanEverydayPworldEnter  	*LPCSPLAYERCLANEVERYDAYPWORLDENTER;

struct tagCSPlayerClanMachinePworldEnter;
typedef struct tagCSPlayerClanMachinePworldEnter   	CSPLAYERCLANMACHINEPWORLDENTER;
typedef struct tagCSPlayerClanMachinePworldEnter   	*LPCSPLAYERCLANMACHINEPWORLDENTER;

struct tagCSPlayerTakeCowAward;
typedef struct tagCSPlayerTakeCowAward             	CSPLAYERTAKECOWAWARD;
typedef struct tagCSPlayerTakeCowAward             	*LPCSPLAYERTAKECOWAWARD;

struct tagCSBaoXiangOpen;
typedef struct tagCSBaoXiangOpen                   	CSBAOXIANGOPEN;
typedef struct tagCSBaoXiangOpen                   	*LPCSBAOXIANGOPEN;

struct tagCSYangHaiBangAdd;
typedef struct tagCSYangHaiBangAdd                 	CSYANGHAIBANGADD;
typedef struct tagCSYangHaiBangAdd                 	*LPCSYANGHAIBANGADD;

struct tagCSPlayerTakeHangHaiAward;
typedef struct tagCSPlayerTakeHangHaiAward         	CSPLAYERTAKEHANGHAIAWARD;
typedef struct tagCSPlayerTakeHangHaiAward         	*LPCSPLAYERTAKEHANGHAIAWARD;

struct tagCSPlayerTakeClanWarAward;
typedef struct tagCSPlayerTakeClanWarAward         	CSPLAYERTAKECLANWARAWARD;
typedef struct tagCSPlayerTakeClanWarAward         	*LPCSPLAYERTAKECLANWARAWARD;

struct tagCSRongYanBossSelect;
typedef struct tagCSRongYanBossSelect              	CSRONGYANBOSSSELECT;
typedef struct tagCSRongYanBossSelect              	*LPCSRONGYANBOSSSELECT;

struct tagCSRongYanBeginSelect;
typedef struct tagCSRongYanBeginSelect             	CSRONGYANBEGINSELECT;
typedef struct tagCSRongYanBeginSelect             	*LPCSRONGYANBEGINSELECT;

struct tagCSPaoShangUiSelect;
typedef struct tagCSPaoShangUiSelect               	CSPAOSHANGUISELECT;
typedef struct tagCSPaoShangUiSelect               	*LPCSPAOSHANGUISELECT;

union tagPrecreateGiftVerifyData;
typedef union  tagPrecreateGiftVerifyData          	PRECREATEGIFTVERIFYDATA;
typedef union  tagPrecreateGiftVerifyData          	*LPPRECREATEGIFTVERIFYDATA;

struct tagCSPlayerPrecreateGiftVerify;
typedef struct tagCSPlayerPrecreateGiftVerify      	CSPLAYERPRECREATEGIFTVERIFY;
typedef struct tagCSPlayerPrecreateGiftVerify      	*LPCSPLAYERPRECREATEGIFTVERIFY;

struct tagCSDianFengGroupInfoC;
typedef struct tagCSDianFengGroupInfoC             	CSDIANFENGGROUPINFOC;
typedef struct tagCSDianFengGroupInfoC             	*LPCSDIANFENGGROUPINFOC;

struct tagCSDianFengBaoMing;
typedef struct tagCSDianFengBaoMing                	CSDIANFENGBAOMING;
typedef struct tagCSDianFengBaoMing                	*LPCSDIANFENGBAOMING;

struct tagCSDianFengTransmit;
typedef struct tagCSDianFengTransmit               	CSDIANFENGTRANSMIT;
typedef struct tagCSDianFengTransmit               	*LPCSDIANFENGTRANSMIT;

struct tagCSDianFengIfGuess;
typedef struct tagCSDianFengIfGuess                	CSDIANFENGIFGUESS;
typedef struct tagCSDianFengIfGuess                	*LPCSDIANFENGIFGUESS;

struct tagZJRongYanCall;
typedef struct tagZJRongYanCall                    	ZJRONGYANCALL;
typedef struct tagZJRongYanCall                    	*LPZJRONGYANCALL;

struct tagCSZJRongYanBossSelect;
typedef struct tagCSZJRongYanBossSelect            	CSZJRONGYANBOSSSELECT;
typedef struct tagCSZJRongYanBossSelect            	*LPCSZJRONGYANBOSSSELECT;

struct tagCSSculptChgClt;
typedef struct tagCSSculptChgClt                   	CSSCULPTCHGCLT;
typedef struct tagCSSculptChgClt                   	*LPCSSCULPTCHGCLT;

struct tagCSNewPeopleClt;
typedef struct tagCSNewPeopleClt                   	CSNEWPEOPLECLT;
typedef struct tagCSNewPeopleClt                   	*LPCSNEWPEOPLECLT;

struct tagCSClearShortCutSkill;
typedef struct tagCSClearShortCutSkill             	CSCLEARSHORTCUTSKILL;
typedef struct tagCSClearShortCutSkill             	*LPCSCLEARSHORTCUTSKILL;

union tagCSPlayerMiscCltData;
typedef union  tagCSPlayerMiscCltData              	CSPLAYERMISCCLTDATA;
typedef union  tagCSPlayerMiscCltData              	*LPCSPLAYERMISCCLTDATA;

struct tagCSPlayerMiscClt;
typedef struct tagCSPlayerMiscClt                  	CSPLAYERMISCCLT;
typedef struct tagCSPlayerMiscClt                  	*LPCSPLAYERMISCCLT;

struct tagMztLayerOne;
typedef struct tagMztLayerOne                      	MZTLAYERONE;
typedef struct tagMztLayerOne                      	*LPMZTLAYERONE;

struct tagUnrealExpLayerInfo;
typedef struct tagUnrealExpLayerInfo               	UNREALEXPLAYERINFO;
typedef struct tagUnrealExpLayerInfo               	*LPUNREALEXPLAYERINFO;

struct tagMztLayerInfo;
typedef struct tagMztLayerInfo                     	MZTLAYERINFO;
typedef struct tagMztLayerInfo                     	*LPMZTLAYERINFO;

struct tagClanPetNotify;
typedef struct tagClanPetNotify                    	CLANPETNOTIFY;
typedef struct tagClanPetNotify                    	*LPCLANPETNOTIFY;

struct tagContinueKill;
typedef struct tagContinueKill                     	CONTINUEKILL;
typedef struct tagContinueKill                     	*LPCONTINUEKILL;

struct tagCSContCoverGiftInfo;
typedef struct tagCSContCoverGiftInfo              	CSCONTCOVERGIFTINFO;
typedef struct tagCSContCoverGiftInfo              	*LPCSCONTCOVERGIFTINFO;

struct tagLostTotemActive;
typedef struct tagLostTotemActive                  	LOSTTOTEMACTIVE;
typedef struct tagLostTotemActive                  	*LPLOSTTOTEMACTIVE;

struct tagChuanChengPoint;
typedef struct tagChuanChengPoint                  	CHUANCHENGPOINT;
typedef struct tagChuanChengPoint                  	*LPCHUANCHENGPOINT;

struct tagWeekCharm;
typedef struct tagWeekCharm                        	WEEKCHARM;
typedef struct tagWeekCharm                        	*LPWEEKCHARM;

struct tagGoldRateRes;
typedef struct tagGoldRateRes                      	GOLDRATERES;
typedef struct tagGoldRateRes                      	*LPGOLDRATERES;

struct tagBuChangRes;
typedef struct tagBuChangRes                       	BUCHANGRES;
typedef struct tagBuChangRes                       	*LPBUCHANGRES;

struct tagCSNewGiftInfo;
typedef struct tagCSNewGiftInfo                    	CSNEWGIFTINFO;
typedef struct tagCSNewGiftInfo                    	*LPCSNEWGIFTINFO;

struct tagCSBuyHetong;
typedef struct tagCSBuyHetong                      	CSBUYHETONG;
typedef struct tagCSBuyHetong                      	*LPCSBUYHETONG;

struct tagCSPlayerMaxLevel;
typedef struct tagCSPlayerMaxLevel                 	CSPLAYERMAXLEVEL;
typedef struct tagCSPlayerMaxLevel                 	*LPCSPLAYERMAXLEVEL;

struct tagRegRes;
typedef struct tagRegRes                           	REGRES;
typedef struct tagRegRes                           	*LPREGRES;

struct tagCharmRes;
typedef struct tagCharmRes                         	CHARMRES;
typedef struct tagCharmRes                         	*LPCHARMRES;

struct tagCSWeather;
typedef struct tagCSWeather                        	CSWEATHER;
typedef struct tagCSWeather                        	*LPCSWEATHER;

struct tagCSBaoXiangAwardInfo;
typedef struct tagCSBaoXiangAwardInfo              	CSBAOXIANGAWARDINFO;
typedef struct tagCSBaoXiangAwardInfo              	*LPCSBAOXIANGAWARDINFO;

struct tagCSSvrRegInfoOne;
typedef struct tagCSSvrRegInfoOne                  	CSSVRREGINFOONE;
typedef struct tagCSSvrRegInfoOne                  	*LPCSSVRREGINFOONE;

struct tagCSSvrRegInfo;
typedef struct tagCSSvrRegInfo                     	CSSVRREGINFO;
typedef struct tagCSSvrRegInfo                     	*LPCSSVRREGINFO;

struct tagCsExpBuffInfo;
typedef struct tagCsExpBuffInfo                    	CSEXPBUFFINFO;
typedef struct tagCsExpBuffInfo                    	*LPCSEXPBUFFINFO;

struct tagCSMTGiftInfo;
typedef struct tagCSMTGiftInfo                     	CSMTGIFTINFO;
typedef struct tagCSMTGiftInfo                     	*LPCSMTGIFTINFO;

struct tagCSYangHaiBangUIInfo;
typedef struct tagCSYangHaiBangUIInfo              	CSYANGHAIBANGUIINFO;
typedef struct tagCSYangHaiBangUIInfo              	*LPCSYANGHAIBANGUIINFO;

struct tagCSRongYanUIInfo;
typedef struct tagCSRongYanUIInfo                  	CSRONGYANUIINFO;
typedef struct tagCSRongYanUIInfo                  	*LPCSRONGYANUIINFO;

struct tagCSRongYanBossInfo;
typedef struct tagCSRongYanBossInfo                	CSRONGYANBOSSINFO;
typedef struct tagCSRongYanBossInfo                	*LPCSRONGYANBOSSINFO;

struct tagZhengyiChg;
typedef struct tagZhengyiChg                       	ZHENGYICHG;
typedef struct tagZhengyiChg                       	*LPZHENGYICHG;

struct tagPaoShangRightUi;
typedef struct tagPaoShangRightUi                  	PAOSHANGRIGHTUI;
typedef struct tagPaoShangRightUi                  	*LPPAOSHANGRIGHTUI;

struct tagPaoShangLeftUi;
typedef struct tagPaoShangLeftUi                   	PAOSHANGLEFTUI;
typedef struct tagPaoShangLeftUi                   	*LPPAOSHANGLEFTUI;

struct tagCSPaoShangUIInfo;
typedef struct tagCSPaoShangUIInfo                 	CSPAOSHANGUIINFO;
typedef struct tagCSPaoShangUIInfo                 	*LPCSPAOSHANGUIINFO;

struct tagCSDaQiangDaoFenShu;
typedef struct tagCSDaQiangDaoFenShu               	CSDAQIANGDAOFENSHU;
typedef struct tagCSDaQiangDaoFenShu               	*LPCSDAQIANGDAOFENSHU;

struct tagCSDianFengFirstInfo;
typedef struct tagCSDianFengFirstInfo              	CSDIANFENGFIRSTINFO;
typedef struct tagCSDianFengFirstInfo              	*LPCSDIANFENGFIRSTINFO;

struct tagDFGroupInfo;
typedef struct tagDFGroupInfo                      	DFGROUPINFO;
typedef struct tagDFGroupInfo                      	*LPDFGROUPINFO;

struct tagCSDianFengGroupUIInfo;
typedef struct tagCSDianFengGroupUIInfo            	CSDIANFENGGROUPUIINFO;
typedef struct tagCSDianFengGroupUIInfo            	*LPCSDIANFENGGROUPUIINFO;

struct tagDianFengPiPeiSucceedUI;
typedef struct tagDianFengPiPeiSucceedUI           	DIANFENGPIPEISUCCEEDUI;
typedef struct tagDianFengPiPeiSucceedUI           	*LPDIANFENGPIPEISUCCEEDUI;

struct tagDianFengBaoMingUI;
typedef struct tagDianFengBaoMingUI                	DIANFENGBAOMINGUI;
typedef struct tagDianFengBaoMingUI                	*LPDIANFENGBAOMINGUI;

struct tagDianFengTransmitUI;
typedef struct tagDianFengTransmitUI               	DIANFENGTRANSMITUI;
typedef struct tagDianFengTransmitUI               	*LPDIANFENGTRANSMITUI;

struct tagCSDianFengGuessResSvr;
typedef struct tagCSDianFengGuessResSvr            	CSDIANFENGGUESSRESSVR;
typedef struct tagCSDianFengGuessResSvr            	*LPCSDIANFENGGUESSRESSVR;

struct tagSupportMingDan;
typedef struct tagSupportMingDan                   	SUPPORTMINGDAN;
typedef struct tagSupportMingDan                   	*LPSUPPORTMINGDAN;

struct tagCSDianFengGuessMingDan;
typedef struct tagCSDianFengGuessMingDan           	CSDIANFENGGUESSMINGDAN;
typedef struct tagCSDianFengGuessMingDan           	*LPCSDIANFENGGUESSMINGDAN;

struct tagCSBeachLowExpUI;
typedef struct tagCSBeachLowExpUI                  	CSBEACHLOWEXPUI;
typedef struct tagCSBeachLowExpUI                  	*LPCSBEACHLOWEXPUI;

struct tagZJRongYanInfo;
typedef struct tagZJRongYanInfo                    	ZJRONGYANINFO;
typedef struct tagZJRongYanInfo                    	*LPZJRONGYANINFO;

struct tagCSZJRongYanBossInfo;
typedef struct tagCSZJRongYanBossInfo              	CSZJRONGYANBOSSINFO;
typedef struct tagCSZJRongYanBossInfo              	*LPCSZJRONGYANBOSSINFO;

struct tagCSSculptChgSvr;
typedef struct tagCSSculptChgSvr                   	CSSCULPTCHGSVR;
typedef struct tagCSSculptChgSvr                   	*LPCSSCULPTCHGSVR;

struct tagCSWordPwdUI;
typedef struct tagCSWordPwdUI                      	CSWORDPWDUI;
typedef struct tagCSWordPwdUI                      	*LPCSWORDPWDUI;

struct tagCSEnterSpanMapNotify;
typedef struct tagCSEnterSpanMapNotify             	CSENTERSPANMAPNOTIFY;
typedef struct tagCSEnterSpanMapNotify             	*LPCSENTERSPANMAPNOTIFY;

struct tagPeopleInfo;
typedef struct tagPeopleInfo                       	PEOPLEINFO;
typedef struct tagPeopleInfo                       	*LPPEOPLEINFO;

struct tagCSNewPeopleInfo;
typedef struct tagCSNewPeopleInfo                  	CSNEWPEOPLEINFO;
typedef struct tagCSNewPeopleInfo                  	*LPCSNEWPEOPLEINFO;

union tagCSPlayerMiscSvrData;
typedef union  tagCSPlayerMiscSvrData              	CSPLAYERMISCSVRDATA;
typedef union  tagCSPlayerMiscSvrData              	*LPCSPLAYERMISCSVRDATA;

struct tagCSPlayerMiscSvr;
typedef struct tagCSPlayerMiscSvr                  	CSPLAYERMISCSVR;
typedef struct tagCSPlayerMiscSvr                  	*LPCSPLAYERMISCSVR;

struct tagCSRideOnMachine;
typedef struct tagCSRideOnMachine                  	CSRIDEONMACHINE;
typedef struct tagCSRideOnMachine                  	*LPCSRIDEONMACHINE;

struct tagCSLeaveMachine;
typedef struct tagCSLeaveMachine                   	CSLEAVEMACHINE;
typedef struct tagCSLeaveMachine                   	*LPCSLEAVEMACHINE;

struct tagCSMachineBack;
typedef struct tagCSMachineBack                    	CSMACHINEBACK;
typedef struct tagCSMachineBack                    	*LPCSMACHINEBACK;

struct tagCSMachineKick;
typedef struct tagCSMachineKick                    	CSMACHINEKICK;
typedef struct tagCSMachineKick                    	*LPCSMACHINEKICK;

struct tagCSMachinePassenger;
typedef struct tagCSMachinePassenger               	CSMACHINEPASSENGER;
typedef struct tagCSMachinePassenger               	*LPCSMACHINEPASSENGER;

struct tagCSMachineInvite;
typedef struct tagCSMachineInvite                  	CSMACHINEINVITE;
typedef struct tagCSMachineInvite                  	*LPCSMACHINEINVITE;

struct tagCSMachineInviteAccpet;
typedef struct tagCSMachineInviteAccpet            	CSMACHINEINVITEACCPET;
typedef struct tagCSMachineInviteAccpet            	*LPCSMACHINEINVITEACCPET;

struct tagCSMachineInviteRefuse;
typedef struct tagCSMachineInviteRefuse            	CSMACHINEINVITEREFUSE;
typedef struct tagCSMachineInviteRefuse            	*LPCSMACHINEINVITEREFUSE;

union tagCSRideMachineCltData;
typedef union  tagCSRideMachineCltData             	CSRIDEMACHINECLTDATA;
typedef union  tagCSRideMachineCltData             	*LPCSRIDEMACHINECLTDATA;

struct tagCSRideMachineCLt;
typedef struct tagCSRideMachineCLt                 	CSRIDEMACHINECLT;
typedef struct tagCSRideMachineCLt                 	*LPCSRIDEMACHINECLT;

struct tagCSMachineSvrInvite;
typedef struct tagCSMachineSvrInvite               	CSMACHINESVRINVITE;
typedef struct tagCSMachineSvrInvite               	*LPCSMACHINESVRINVITE;

union tagCSMachineSvrData;
typedef union  tagCSMachineSvrData                 	CSMACHINESVRDATA;
typedef union  tagCSMachineSvrData                 	*LPCSMACHINESVRDATA;

struct tagCSMachineSvr;
typedef struct tagCSMachineSvr                     	CSMACHINESVR;
typedef struct tagCSMachineSvr                     	*LPCSMACHINESVR;

struct tagCSMapChgLine;
typedef struct tagCSMapChgLine                     	CSMAPCHGLINE;
typedef struct tagCSMapChgLine                     	*LPCSMAPCHGLINE;

struct tagCSUpdateLineInfo;
typedef struct tagCSUpdateLineInfo                 	CSUPDATELINEINFO;
typedef struct tagCSUpdateLineInfo                 	*LPCSUPDATELINEINFO;

union tagCSMapCltData;
typedef union  tagCSMapCltData                     	CSMAPCLTDATA;
typedef union  tagCSMapCltData                     	*LPCSMAPCLTDATA;

struct tagCSMapClt;
typedef struct tagCSMapClt                         	CSMAPCLT;
typedef struct tagCSMapClt                         	*LPCSMAPCLT;

struct tagCSMapLineData;
typedef struct tagCSMapLineData                    	CSMAPLINEDATA;
typedef struct tagCSMapLineData                    	*LPCSMAPLINEDATA;

struct tagCSMapLineInfo;
typedef struct tagCSMapLineInfo                    	CSMAPLINEINFO;
typedef struct tagCSMapLineInfo                    	*LPCSMAPLINEINFO;

struct tagCSMapOreInfo;
typedef struct tagCSMapOreInfo                     	CSMAPOREINFO;
typedef struct tagCSMapOreInfo                     	*LPCSMAPOREINFO;

struct tagCSMapOreList;
typedef struct tagCSMapOreList                     	CSMAPORELIST;
typedef struct tagCSMapOreList                     	*LPCSMAPORELIST;

struct tagCSMapBigOreList;
typedef struct tagCSMapBigOreList                  	CSMAPBIGORELIST;
typedef struct tagCSMapBigOreList                  	*LPCSMAPBIGORELIST;

union tagCSMapSvrData;
typedef union  tagCSMapSvrData                     	CSMAPSVRDATA;
typedef union  tagCSMapSvrData                     	*LPCSMAPSVRDATA;

struct tagCSMapSvr;
typedef struct tagCSMapSvr                         	CSMAPSVR;
typedef struct tagCSMapSvr                         	*LPCSMAPSVR;

struct tagCSReportDataReq;
typedef struct tagCSReportDataReq                  	CSREPORTDATAREQ;
typedef struct tagCSReportDataReq                  	*LPCSREPORTDATAREQ;

struct tagCSReportDataRes;
typedef struct tagCSReportDataRes                  	CSREPORTDATARES;
typedef struct tagCSReportDataRes                  	*LPCSREPORTDATARES;

struct tagCSBattleLimitAll;
typedef struct tagCSBattleLimitAll                 	CSBATTLELIMITALL;
typedef struct tagCSBattleLimitAll                 	*LPCSBATTLELIMITALL;

union tagCSBattleLimitData;
typedef union  tagCSBattleLimitData                	CSBATTLELIMITDATA;
typedef union  tagCSBattleLimitData                	*LPCSBATTLELIMITDATA;

struct tagCSBattleLimit;
typedef struct tagCSBattleLimit                    	CSBATTLELIMIT;
typedef struct tagCSBattleLimit                    	*LPCSBATTLELIMIT;

struct tagCSRollUIInfo;
typedef struct tagCSRollUIInfo                     	CSROLLUIINFO;
typedef struct tagCSRollUIInfo                     	*LPCSROLLUIINFO;

union tagCSRollSvrData;
typedef union  tagCSRollSvrData                    	CSROLLSVRDATA;
typedef union  tagCSRollSvrData                    	*LPCSROLLSVRDATA;

struct tagCSRollSvr;
typedef struct tagCSRollSvr                        	CSROLLSVR;
typedef struct tagCSRollSvr                        	*LPCSROLLSVR;

struct tagCSRollClt;
typedef struct tagCSRollClt                        	CSROLLCLT;
typedef struct tagCSRollClt                        	*LPCSROLLCLT;

struct tagCSLeaveClt;
typedef struct tagCSLeaveClt                       	CSLEAVECLT;
typedef struct tagCSLeaveClt                       	*LPCSLEAVECLT;

struct tagCSMotionClt;
typedef struct tagCSMotionClt                      	CSMOTIONCLT;
typedef struct tagCSMotionClt                      	*LPCSMOTIONCLT;

struct tagCSFightObjInfo;
typedef struct tagCSFightObjInfo                   	CSFIGHTOBJINFO;
typedef struct tagCSFightObjInfo                   	*LPCSFIGHTOBJINFO;

struct tagCSValFightClt;
typedef struct tagCSValFightClt                    	CSVALFIGHTCLT;
typedef struct tagCSValFightClt                    	*LPCSVALFIGHTCLT;

struct tagCSValWatchClt;
typedef struct tagCSValWatchClt                    	CSVALWATCHCLT;
typedef struct tagCSValWatchClt                    	*LPCSVALWATCHCLT;

union tagCSValCltData;
typedef union  tagCSValCltData                     	CSVALCLTDATA;
typedef union  tagCSValCltData                     	*LPCSVALCLTDATA;

struct tagCSValClt;
typedef struct tagCSValClt                         	CSVALCLT;
typedef struct tagCSValClt                         	*LPCSVALCLT;

struct tagCSValWatchInfo;
typedef struct tagCSValWatchInfo                   	CSVALWATCHINFO;
typedef struct tagCSValWatchInfo                   	*LPCSVALWATCHINFO;

struct tagCSValFightSvr;
typedef struct tagCSValFightSvr                    	CSVALFIGHTSVR;
typedef struct tagCSValFightSvr                    	*LPCSVALFIGHTSVR;

union tagCSValSvrData;
typedef union  tagCSValSvrData                     	CSVALSVRDATA;
typedef union  tagCSValSvrData                     	*LPCSVALSVRDATA;

struct tagCSValSvr;
typedef struct tagCSValSvr                         	CSVALSVR;
typedef struct tagCSValSvr                         	*LPCSVALSVR;

struct tagCSDiffPworldEnter;
typedef struct tagCSDiffPworldEnter                	CSDIFFPWORLDENTER;
typedef struct tagCSDiffPworldEnter                	*LPCSDIFFPWORLDENTER;

struct tagCSDiffPworldSelectCard;
typedef struct tagCSDiffPworldSelectCard           	CSDIFFPWORLDSELECTCARD;
typedef struct tagCSDiffPworldSelectCard           	*LPCSDIFFPWORLDSELECTCARD;

struct tagCSDiffPworldSelectVipCard;
typedef struct tagCSDiffPworldSelectVipCard        	CSDIFFPWORLDSELECTVIPCARD;
typedef struct tagCSDiffPworldSelectVipCard        	*LPCSDIFFPWORLDSELECTVIPCARD;

union tagCSDiffPworldCltData;
typedef union  tagCSDiffPworldCltData              	CSDIFFPWORLDCLTDATA;
typedef union  tagCSDiffPworldCltData              	*LPCSDIFFPWORLDCLTDATA;

struct tagCSDiffPworldClt;
typedef struct tagCSDiffPworldClt                  	CSDIFFPWORLDCLT;
typedef struct tagCSDiffPworldClt                  	*LPCSDIFFPWORLDCLT;

struct tagCSDiffPworldUIInfo;
typedef struct tagCSDiffPworldUIInfo               	CSDIFFPWORLDUIINFO;
typedef struct tagCSDiffPworldUIInfo               	*LPCSDIFFPWORLDUIINFO;

struct tagDiffPworldTipInfo;
typedef struct tagDiffPworldTipInfo                	DIFFPWORLDTIPINFO;
typedef struct tagDiffPworldTipInfo                	*LPDIFFPWORLDTIPINFO;

struct tagCSDiffPworldCardMsg;
typedef struct tagCSDiffPworldCardMsg              	CSDIFFPWORLDCARDMSG;
typedef struct tagCSDiffPworldCardMsg              	*LPCSDIFFPWORLDCARDMSG;

struct tagCSDiffPworldTeamTips;
typedef struct tagCSDiffPworldTeamTips             	CSDIFFPWORLDTEAMTIPS;
typedef struct tagCSDiffPworldTeamTips             	*LPCSDIFFPWORLDTEAMTIPS;

struct tagDiffPworldCardInfo;
typedef struct tagDiffPworldCardInfo               	DIFFPWORLDCARDINFO;
typedef struct tagDiffPworldCardInfo               	*LPDIFFPWORLDCARDINFO;

struct tagCSDiffPworldAwardUI;
typedef struct tagCSDiffPworldAwardUI              	CSDIFFPWORLDAWARDUI;
typedef struct tagCSDiffPworldAwardUI              	*LPCSDIFFPWORLDAWARDUI;

struct tagCSDiffPworldUpdateCard;
typedef struct tagCSDiffPworldUpdateCard           	CSDIFFPWORLDUPDATECARD;
typedef struct tagCSDiffPworldUpdateCard           	*LPCSDIFFPWORLDUPDATECARD;

struct tagCSDiffPworldUpdateVipCard;
typedef struct tagCSDiffPworldUpdateVipCard        	CSDIFFPWORLDUPDATEVIPCARD;
typedef struct tagCSDiffPworldUpdateVipCard        	*LPCSDIFFPWORLDUPDATEVIPCARD;

struct tagCSDiffPworldSelectRes;
typedef struct tagCSDiffPworldSelectRes            	CSDIFFPWORLDSELECTRES;
typedef struct tagCSDiffPworldSelectRes            	*LPCSDIFFPWORLDSELECTRES;

union tagCSDiffPworldSvrData;
typedef union  tagCSDiffPworldSvrData              	CSDIFFPWORLDSVRDATA;
typedef union  tagCSDiffPworldSvrData              	*LPCSDIFFPWORLDSVRDATA;

struct tagCSDiffPworldSvr;
typedef struct tagCSDiffPworldSvr                  	CSDIFFPWORLDSVR;
typedef struct tagCSDiffPworldSvr                  	*LPCSDIFFPWORLDSVR;

struct tagCSCityBuildInfo;
typedef struct tagCSCityBuildInfo                  	CSCITYBUILDINFO;
typedef struct tagCSCityBuildInfo                  	*LPCSCITYBUILDINFO;

struct tagCSCityBuildCapture;
typedef struct tagCSCityBuildCapture               	CSCITYBUILDCAPTURE;
typedef struct tagCSCityBuildCapture               	*LPCSCITYBUILDCAPTURE;

struct tagCSCityAllBuild;
typedef struct tagCSCityAllBuild                   	CSCITYALLBUILD;
typedef struct tagCSCityAllBuild                   	*LPCSCITYALLBUILD;

struct tagCSCityBuildUI;
typedef struct tagCSCityBuildUI                    	CSCITYBUILDUI;
typedef struct tagCSCityBuildUI                    	*LPCSCITYBUILDUI;

struct tagCSCityBuildWarning;
typedef struct tagCSCityBuildWarning               	CSCITYBUILDWARNING;
typedef struct tagCSCityBuildWarning               	*LPCSCITYBUILDWARNING;

struct tagCSWorldCityInfo;
typedef struct tagCSWorldCityInfo                  	CSWORLDCITYINFO;
typedef struct tagCSWorldCityInfo                  	*LPCSWORLDCITYINFO;

struct tagCSCityMemInfo;
typedef struct tagCSCityMemInfo                    	CSCITYMEMINFO;
typedef struct tagCSCityMemInfo                    	*LPCSCITYMEMINFO;

struct tagCSCityMapPosInfo;
typedef struct tagCSCityMapPosInfo                 	CSCITYMAPPOSINFO;
typedef struct tagCSCityMapPosInfo                 	*LPCSCITYMAPPOSINFO;

struct tagCSCityFight;
typedef struct tagCSCityFight                      	CSCITYFIGHT;
typedef struct tagCSCityFight                      	*LPCSCITYFIGHT;

struct tagCSCityClanFightInfo;
typedef struct tagCSCityClanFightInfo              	CSCITYCLANFIGHTINFO;
typedef struct tagCSCityClanFightInfo              	*LPCSCITYCLANFIGHTINFO;

struct tagCSCityClanFightRange;
typedef struct tagCSCityClanFightRange             	CSCITYCLANFIGHTRANGE;
typedef struct tagCSCityClanFightRange             	*LPCSCITYCLANFIGHTRANGE;

struct tagCSCityKillInfo;
typedef struct tagCSCityKillInfo                   	CSCITYKILLINFO;
typedef struct tagCSCityKillInfo                   	*LPCSCITYKILLINFO;

union tagCSCitySvrData;
typedef union  tagCSCitySvrData                    	CSCITYSVRDATA;
typedef union  tagCSCitySvrData                    	*LPCSCITYSVRDATA;

struct tagCSCitySvr;
typedef struct tagCSCitySvr                        	CSCITYSVR;
typedef struct tagCSCitySvr                        	*LPCSCITYSVR;

struct tagCSCityBuildCreate;
typedef struct tagCSCityBuildCreate                	CSCITYBUILDCREATE;
typedef struct tagCSCityBuildCreate                	*LPCSCITYBUILDCREATE;

struct tagCSCityBuildLevelUP;
typedef struct tagCSCityBuildLevelUP               	CSCITYBUILDLEVELUP;
typedef struct tagCSCityBuildLevelUP               	*LPCSCITYBUILDLEVELUP;

union tagCSCityCltData;
typedef union  tagCSCityCltData                    	CSCITYCLTDATA;
typedef union  tagCSCityCltData                    	*LPCSCITYCLTDATA;

struct tagCSCityClt;
typedef struct tagCSCityClt                        	CSCITYCLT;
typedef struct tagCSCityClt                        	*LPCSCITYCLT;

struct tagCSActiveGameClanPworld;
typedef struct tagCSActiveGameClanPworld           	CSACTIVEGAMECLANPWORLD;
typedef struct tagCSActiveGameClanPworld           	*LPCSACTIVEGAMECLANPWORLD;

struct tagCSActiveGameGuCheng;
typedef struct tagCSActiveGameGuCheng              	CSACTIVEGAMEGUCHENG;
typedef struct tagCSActiveGameGuCheng              	*LPCSACTIVEGAMEGUCHENG;

struct tagCSActiveGameClanMachine;
typedef struct tagCSActiveGameClanMachine          	CSACTIVEGAMECLANMACHINE;
typedef struct tagCSActiveGameClanMachine          	*LPCSACTIVEGAMECLANMACHINE;

union tagCSActiveGameUIData;
typedef union  tagCSActiveGameUIData               	CSACTIVEGAMEUIDATA;
typedef union  tagCSActiveGameUIData               	*LPCSACTIVEGAMEUIDATA;

struct tagCSActiveGameUIInfo;
typedef struct tagCSActiveGameUIInfo               	CSACTIVEGAMEUIINFO;
typedef struct tagCSActiveGameUIInfo               	*LPCSACTIVEGAMEUIINFO;

struct tagCSActiveGameUIClose;
typedef struct tagCSActiveGameUIClose              	CSACTIVEGAMEUICLOSE;
typedef struct tagCSActiveGameUIClose              	*LPCSACTIVEGAMEUICLOSE;

union tagCSActiveGameSvrData;
typedef union  tagCSActiveGameSvrData              	CSACTIVEGAMESVRDATA;
typedef union  tagCSActiveGameSvrData              	*LPCSACTIVEGAMESVRDATA;

struct tagCSActiveGameSvr;
typedef struct tagCSActiveGameSvr                  	CSACTIVEGAMESVR;
typedef struct tagCSActiveGameSvr                  	*LPCSACTIVEGAMESVR;

struct tagCSActiveGameAward;
typedef struct tagCSActiveGameAward                	CSACTIVEGAMEAWARD;
typedef struct tagCSActiveGameAward                	*LPCSACTIVEGAMEAWARD;

union tagCSActiveGameCltData;
typedef union  tagCSActiveGameCltData              	CSACTIVEGAMECLTDATA;
typedef union  tagCSActiveGameCltData              	*LPCSACTIVEGAMECLTDATA;

struct tagCSActiveGameClt;
typedef struct tagCSActiveGameClt                  	CSACTIVEGAMECLT;
typedef struct tagCSActiveGameClt                  	*LPCSACTIVEGAMECLT;

struct tagCSRoleLtrInfo;
typedef struct tagCSRoleLtrInfo                    	CSROLELTRINFO;
typedef struct tagCSRoleLtrInfo                    	*LPCSROLELTRINFO;

struct tagCSSJTaskOpen;
typedef struct tagCSSJTaskOpen                     	CSSJTASKOPEN;
typedef struct tagCSSJTaskOpen                     	*LPCSSJTASKOPEN;

struct tagCSSJTaskRefreshTask;
typedef struct tagCSSJTaskRefreshTask              	CSSJTASKREFRESHTASK;
typedef struct tagCSSJTaskRefreshTask              	*LPCSSJTASKREFRESHTASK;

struct tagCSSJTaskRefreshStar;
typedef struct tagCSSJTaskRefreshStar              	CSSJTASKREFRESHSTAR;
typedef struct tagCSSJTaskRefreshStar              	*LPCSSJTASKREFRESHSTAR;

struct tagCSSJTaskAccpet;
typedef struct tagCSSJTaskAccpet                   	CSSJTASKACCPET;
typedef struct tagCSSJTaskAccpet                   	*LPCSSJTASKACCPET;

union tagCSSJTaskCltData;
typedef union  tagCSSJTaskCltData                  	CSSJTASKCLTDATA;
typedef union  tagCSSJTaskCltData                  	*LPCSSJTASKCLTDATA;

struct tagCSSJTaskClt;
typedef struct tagCSSJTaskClt                      	CSSJTASKCLT;
typedef struct tagCSSJTaskClt                      	*LPCSSJTASKCLT;

struct tagCSSJTaskUIInfo;
typedef struct tagCSSJTaskUIInfo                   	CSSJTASKUIINFO;
typedef struct tagCSSJTaskUIInfo                   	*LPCSSJTASKUIINFO;

struct tagCSSJTaskClose;
typedef struct tagCSSJTaskClose                    	CSSJTASKCLOSE;
typedef struct tagCSSJTaskClose                    	*LPCSSJTASKCLOSE;

struct tagCSSJTaskItem;
typedef struct tagCSSJTaskItem                     	CSSJTASKITEM;
typedef struct tagCSSJTaskItem                     	*LPCSSJTASKITEM;

union tagCSSJTaskSvrData;
typedef union  tagCSSJTaskSvrData                  	CSSJTASKSVRDATA;
typedef union  tagCSSJTaskSvrData                  	*LPCSSJTASKSVRDATA;

struct tagCSSJTaskSvr;
typedef struct tagCSSJTaskSvr                      	CSSJTASKSVR;
typedef struct tagCSSJTaskSvr                      	*LPCSSJTASKSVR;

struct tagCSAasSvr;
typedef struct tagCSAasSvr                         	CSAASSVR;
typedef struct tagCSAasSvr                         	*LPCSAASSVR;

struct tagCSAasIDInfo;
typedef struct tagCSAasIDInfo                      	CSAASIDINFO;
typedef struct tagCSAasIDInfo                      	*LPCSAASIDINFO;

union tagCSAasCltData;
typedef union  tagCSAasCltData                     	CSAASCLTDATA;
typedef union  tagCSAasCltData                     	*LPCSAASCLTDATA;

struct tagCSAasClt;
typedef struct tagCSAasClt                         	CSAASCLT;
typedef struct tagCSAasClt                         	*LPCSAASCLT;

struct tagCSGayAccept;
typedef struct tagCSGayAccept                      	CSGAYACCEPT;
typedef struct tagCSGayAccept                      	*LPCSGAYACCEPT;

struct tagCSGayReject;
typedef struct tagCSGayReject                      	CSGAYREJECT;
typedef struct tagCSGayReject                      	*LPCSGAYREJECT;

union tagCSGayCltData;
typedef union  tagCSGayCltData                     	CSGAYCLTDATA;
typedef union  tagCSGayCltData                     	*LPCSGAYCLTDATA;

struct tagCSGayClt;
typedef struct tagCSGayClt                         	CSGAYCLT;
typedef struct tagCSGayClt                         	*LPCSGAYCLT;

struct tagCSGayInvite;
typedef struct tagCSGayInvite                      	CSGAYINVITE;
typedef struct tagCSGayInvite                      	*LPCSGAYINVITE;

union tagCSGaySvrData;
typedef union  tagCSGaySvrData                     	CSGAYSVRDATA;
typedef union  tagCSGaySvrData                     	*LPCSGAYSVRDATA;

struct tagCSGaySvr;
typedef struct tagCSGaySvr                         	CSGAYSVR;
typedef struct tagCSGaySvr                         	*LPCSGAYSVR;

struct tagCSRoleChgMemID;
typedef struct tagCSRoleChgMemID                   	CSROLECHGMEMID;
typedef struct tagCSRoleChgMemID                   	*LPCSROLECHGMEMID;

struct tagCSTankRoleInfo;
typedef struct tagCSTankRoleInfo                   	CSTANKROLEINFO;
typedef struct tagCSTankRoleInfo                   	*LPCSTANKROLEINFO;

struct tagCSTankInfo;
typedef struct tagCSTankInfo                       	CSTANKINFO;
typedef struct tagCSTankInfo                       	*LPCSTANKINFO;

struct tagCSDoubleMonsterRoleInfo;
typedef struct tagCSDoubleMonsterRoleInfo          	CSDOUBLEMONSTERROLEINFO;
typedef struct tagCSDoubleMonsterRoleInfo          	*LPCSDOUBLEMONSTERROLEINFO;

struct tagCSDoubleMonsterEndInfo;
typedef struct tagCSDoubleMonsterEndInfo           	CSDOUBLEMONSTERENDINFO;
typedef struct tagCSDoubleMonsterEndInfo           	*LPCSDOUBLEMONSTERENDINFO;

struct tagCSDoubleMonsterInfo;
typedef struct tagCSDoubleMonsterInfo              	CSDOUBLEMONSTERINFO;
typedef struct tagCSDoubleMonsterInfo              	*LPCSDOUBLEMONSTERINFO;

struct tagCSMachineWarInfo;
typedef struct tagCSMachineWarInfo                 	CSMACHINEWARINFO;
typedef struct tagCSMachineWarInfo                 	*LPCSMACHINEWARINFO;

struct tagCSPolyBossPosition;
typedef struct tagCSPolyBossPosition               	CSPOLYBOSSPOSITION;
typedef struct tagCSPolyBossPosition               	*LPCSPOLYBOSSPOSITION;

union tagCSPolyInfoData;
typedef union  tagCSPolyInfoData                   	CSPOLYINFODATA;
typedef union  tagCSPolyInfoData                   	*LPCSPOLYINFODATA;

struct tagCSPolyPworldInfo;
typedef struct tagCSPolyPworldInfo                 	CSPOLYPWORLDINFO;
typedef struct tagCSPolyPworldInfo                 	*LPCSPOLYPWORLDINFO;

union tagCSPolyPworldSvrData;
typedef union  tagCSPolyPworldSvrData              	CSPOLYPWORLDSVRDATA;
typedef union  tagCSPolyPworldSvrData              	*LPCSPOLYPWORLDSVRDATA;

struct tagCSPolyPworldSvr;
typedef struct tagCSPolyPworldSvr                  	CSPOLYPWORLDSVR;
typedef struct tagCSPolyPworldSvr                  	*LPCSPOLYPWORLDSVR;

struct tagCSSpartaReadyRoleInfo;
typedef struct tagCSSpartaReadyRoleInfo            	CSSPARTAREADYROLEINFO;
typedef struct tagCSSpartaReadyRoleInfo            	*LPCSSPARTAREADYROLEINFO;

struct tagCSSpartaReadyUI;
typedef struct tagCSSpartaReadyUI                  	CSSPARTAREADYUI;
typedef struct tagCSSpartaReadyUI                  	*LPCSSPARTAREADYUI;

struct tagCSSpartaApplyInfo;
typedef struct tagCSSpartaApplyInfo                	CSSPARTAAPPLYINFO;
typedef struct tagCSSpartaApplyInfo                	*LPCSSPARTAAPPLYINFO;

struct tagCSSpartaFightRoleInfo;
typedef struct tagCSSpartaFightRoleInfo            	CSSPARTAFIGHTROLEINFO;
typedef struct tagCSSpartaFightRoleInfo            	*LPCSSPARTAFIGHTROLEINFO;

struct tagCSSpartaEndInfo;
typedef struct tagCSSpartaEndInfo                  	CSSPARTAENDINFO;
typedef struct tagCSSpartaEndInfo                  	*LPCSSPARTAENDINFO;

struct tagCSSpartaFightInfo;
typedef struct tagCSSpartaFightInfo                	CSSPARTAFIGHTINFO;
typedef struct tagCSSpartaFightInfo                	*LPCSSPARTAFIGHTINFO;

struct tagCSSpartaRoleSpartaInfo;
typedef struct tagCSSpartaRoleSpartaInfo           	CSSPARTAROLESPARTAINFO;
typedef struct tagCSSpartaRoleSpartaInfo           	*LPCSSPARTAROLESPARTAINFO;

union tagCSSpartaSvrData;
typedef union  tagCSSpartaSvrData                  	CSSPARTASVRDATA;
typedef union  tagCSSpartaSvrData                  	*LPCSSPARTASVRDATA;

struct tagCSSpartaSvr;
typedef struct tagCSSpartaSvr                      	CSSPARTASVR;
typedef struct tagCSSpartaSvr                      	*LPCSSPARTASVR;

struct tagCSSpartaCltReady;
typedef struct tagCSSpartaCltReady                 	CSSPARTACLTREADY;
typedef struct tagCSSpartaCltReady                 	*LPCSSPARTACLTREADY;

union tagCSSpartaCltData;
typedef union  tagCSSpartaCltData                  	CSSPARTACLTDATA;
typedef union  tagCSSpartaCltData                  	*LPCSSPARTACLTDATA;

struct tagCSSpartaClt;
typedef struct tagCSSpartaClt                      	CSSPARTACLT;
typedef struct tagCSSpartaClt                      	*LPCSSPARTACLT;

struct tagCSSchoolInvite;
typedef struct tagCSSchoolInvite                   	CSSCHOOLINVITE;
typedef struct tagCSSchoolInvite                   	*LPCSSCHOOLINVITE;

struct tagCSSchoolAccept;
typedef struct tagCSSchoolAccept                   	CSSCHOOLACCEPT;
typedef struct tagCSSchoolAccept                   	*LPCSSCHOOLACCEPT;

struct tagCSSchoolMemInfoReq;
typedef struct tagCSSchoolMemInfoReq               	CSSCHOOLMEMINFOREQ;
typedef struct tagCSSchoolMemInfoReq               	*LPCSSCHOOLMEMINFOREQ;

struct tagCSSchoolReject;
typedef struct tagCSSchoolReject                   	CSSCHOOLREJECT;
typedef struct tagCSSchoolReject                   	*LPCSSCHOOLREJECT;

struct tagCSSchoolDel;
typedef struct tagCSSchoolDel                      	CSSCHOOLDEL;
typedef struct tagCSSchoolDel                      	*LPCSSCHOOLDEL;

struct tagCSSchoolXinDe;
typedef struct tagCSSchoolXinDe                    	CSSCHOOLXINDE;
typedef struct tagCSSchoolXinDe                    	*LPCSSCHOOLXINDE;

struct tagCSSchoolAwardXinDe;
typedef struct tagCSSchoolAwardXinDe               	CSSCHOOLAWARDXINDE;
typedef struct tagCSSchoolAwardXinDe               	*LPCSSCHOOLAWARDXINDE;

union tagCSSchoolCltData;
typedef union  tagCSSchoolCltData                  	CSSCHOOLCLTDATA;
typedef union  tagCSSchoolCltData                  	*LPCSSCHOOLCLTDATA;

struct tagCSSchoolClt;
typedef struct tagCSSchoolClt                      	CSSCHOOLCLT;
typedef struct tagCSSchoolClt                      	*LPCSSCHOOLCLT;

struct tagCSRoleTeacherInfo;
typedef struct tagCSRoleTeacherInfo                	CSROLETEACHERINFO;
typedef struct tagCSRoleTeacherInfo                	*LPCSROLETEACHERINFO;

struct tagCSRoleStudentInfo;
typedef struct tagCSRoleStudentInfo                	CSROLESTUDENTINFO;
typedef struct tagCSRoleStudentInfo                	*LPCSROLESTUDENTINFO;

struct tagCSRoleTeacher;
typedef struct tagCSRoleTeacher                    	CSROLETEACHER;
typedef struct tagCSRoleTeacher                    	*LPCSROLETEACHER;

struct tagCSRoleStudent;
typedef struct tagCSRoleStudent                    	CSROLESTUDENT;
typedef struct tagCSRoleStudent                    	*LPCSROLESTUDENT;

union tagCSSchoolJobInfo;
typedef union  tagCSSchoolJobInfo                  	CSSCHOOLJOBINFO;
typedef union  tagCSSchoolJobInfo                  	*LPCSSCHOOLJOBINFO;

struct tagCSSchoolAllInfo;
typedef struct tagCSSchoolAllInfo                  	CSSCHOOLALLINFO;
typedef struct tagCSSchoolAllInfo                  	*LPCSSCHOOLALLINFO;

struct tagCSSchoolJoinUI;
typedef struct tagCSSchoolJoinUI                   	CSSCHOOLJOINUI;
typedef struct tagCSSchoolJoinUI                   	*LPCSSCHOOLJOINUI;

union tagCSSchoolMemData;
typedef union  tagCSSchoolMemData                  	CSSCHOOLMEMDATA;
typedef union  tagCSSchoolMemData                  	*LPCSSCHOOLMEMDATA;

struct tagCSSchoolMemInfo;
typedef struct tagCSSchoolMemInfo                  	CSSCHOOLMEMINFO;
typedef struct tagCSSchoolMemInfo                  	*LPCSSCHOOLMEMINFO;

struct tagCSSchoolOnlineUpdate;
typedef struct tagCSSchoolOnlineUpdate             	CSSCHOOLONLINEUPDATE;
typedef struct tagCSSchoolOnlineUpdate             	*LPCSSCHOOLONLINEUPDATE;

struct tagCSSchoolAddStudent;
typedef struct tagCSSchoolAddStudent               	CSSCHOOLADDSTUDENT;
typedef struct tagCSSchoolAddStudent               	*LPCSSCHOOLADDSTUDENT;

union tagCSSchoolSvrData;
typedef union  tagCSSchoolSvrData                  	CSSCHOOLSVRDATA;
typedef union  tagCSSchoolSvrData                  	*LPCSSCHOOLSVRDATA;

struct tagCSSchoolSvr;
typedef struct tagCSSchoolSvr                      	CSSCHOOLSVR;
typedef struct tagCSSchoolSvr                      	*LPCSSCHOOLSVR;

struct tagCSSecondPwdSet;
typedef struct tagCSSecondPwdSet                   	CSSECONDPWDSET;
typedef struct tagCSSecondPwdSet                   	*LPCSSECONDPWDSET;

struct tagCSSecondPwdInput;
typedef struct tagCSSecondPwdInput                 	CSSECONDPWDINPUT;
typedef struct tagCSSecondPwdInput                 	*LPCSSECONDPWDINPUT;

struct tagCSSecondPwdClt;
typedef struct tagCSSecondPwdClt                   	CSSECONDPWDCLT;
typedef struct tagCSSecondPwdClt                   	*LPCSSECONDPWDCLT;

struct tagSecondPwdClt;
typedef struct tagSecondPwdClt                     	SECONDPWDCLT;
typedef struct tagSecondPwdClt                     	*LPSECONDPWDCLT;

struct tagSecondPwdSvr;
typedef struct tagSecondPwdSvr                     	SECONDPWDSVR;
typedef struct tagSecondPwdSvr                     	*LPSECONDPWDSVR;

struct tagBackItemPos;
typedef struct tagBackItemPos                      	BACKITEMPOS;
typedef struct tagBackItemPos                      	*LPBACKITEMPOS;

struct tagCSBackLevelUP;
typedef struct tagCSBackLevelUP                    	CSBACKLEVELUP;
typedef struct tagCSBackLevelUP                    	*LPCSBACKLEVELUP;

struct tagCSBackChg;
typedef struct tagCSBackChg                        	CSBACKCHG;
typedef struct tagCSBackChg                        	*LPCSBACKCHG;

union tagCSBackCltData;
typedef union  tagCSBackCltData                    	CSBACKCLTDATA;
typedef union  tagCSBackCltData                    	*LPCSBACKCLTDATA;

struct tagCSBackClt;
typedef struct tagCSBackClt                        	CSBACKCLT;
typedef struct tagCSBackClt                        	*LPCSBACKCLT;

struct tagCSBackLevelUPSucc;
typedef struct tagCSBackLevelUPSucc                	CSBACKLEVELUPSUCC;
typedef struct tagCSBackLevelUPSucc                	*LPCSBACKLEVELUPSUCC;

struct tagCSBackChgTypeSucc;
typedef struct tagCSBackChgTypeSucc                	CSBACKCHGTYPESUCC;
typedef struct tagCSBackChgTypeSucc                	*LPCSBACKCHGTYPESUCC;

union tagCSBackSvrData;
typedef union  tagCSBackSvrData                    	CSBACKSVRDATA;
typedef union  tagCSBackSvrData                    	*LPCSBACKSVRDATA;

struct tagCSBackSvr;
typedef struct tagCSBackSvr                        	CSBACKSVR;
typedef struct tagCSBackSvr                        	*LPCSBACKSVR;

struct tagCSCardBoxOpen;
typedef struct tagCSCardBoxOpen                    	CSCARDBOXOPEN;
typedef struct tagCSCardBoxOpen                    	*LPCSCARDBOXOPEN;

struct tagCSCardBoxSelect;
typedef struct tagCSCardBoxSelect                  	CSCARDBOXSELECT;
typedef struct tagCSCardBoxSelect                  	*LPCSCARDBOXSELECT;

union tagCSCardBoxCltData;
typedef union  tagCSCardBoxCltData                 	CSCARDBOXCLTDATA;
typedef union  tagCSCardBoxCltData                 	*LPCSCARDBOXCLTDATA;

struct tagCSCardBoxClt;
typedef struct tagCSCardBoxClt                     	CSCARDBOXCLT;
typedef struct tagCSCardBoxClt                     	*LPCSCARDBOXCLT;

struct tagBoxOneCardInfo;
typedef struct tagBoxOneCardInfo                   	BOXONECARDINFO;
typedef struct tagBoxOneCardInfo                   	*LPBOXONECARDINFO;

struct tagCSCardBoxInfo;
typedef struct tagCSCardBoxInfo                    	CSCARDBOXINFO;
typedef struct tagCSCardBoxInfo                    	*LPCSCARDBOXINFO;

struct tagCSCardBoxSelectInfo;
typedef struct tagCSCardBoxSelectInfo              	CSCARDBOXSELECTINFO;
typedef struct tagCSCardBoxSelectInfo              	*LPCSCARDBOXSELECTINFO;

union tagCSCardBoxSvrData;
typedef union  tagCSCardBoxSvrData                 	CSCARDBOXSVRDATA;
typedef union  tagCSCardBoxSvrData                 	*LPCSCARDBOXSVRDATA;

struct tagCSCardBoxSvr;
typedef struct tagCSCardBoxSvr                     	CSCARDBOXSVR;
typedef struct tagCSCardBoxSvr                     	*LPCSCARDBOXSVR;

union tagCSPkgBody;
typedef union  tagCSPkgBody                        	CSPKGBODY;
typedef union  tagCSPkgBody                        	*LPCSPKGBODY;

struct tagCSMsgHead;
typedef struct tagCSMsgHead                        	CSMSGHEAD;
typedef struct tagCSMsgHead                        	*LPCSMSGHEAD;

struct tagCSMsg;
typedef struct tagCSMsg                            	CSMSG;
typedef struct tagCSMsg                            	*LPCSMSG;

struct tagCSPkg;
typedef struct tagCSPkg                            	CSPKG;
typedef struct tagCSPkg                            	*LPCSPKG;

struct tagPDUBase;
typedef struct tagPDUBase                          	PDUBASE;
typedef struct tagPDUBase                          	*LPPDUBASE;

struct tagPDUExtChgSkey;
typedef struct tagPDUExtChgSkey                    	PDUEXTCHGSKEY;
typedef struct tagPDUExtChgSkey                    	*LPPDUEXTCHGSKEY;

struct tagPDUExtQueInfo;
typedef struct tagPDUExtQueInfo                    	PDUEXTQUEINFO;
typedef struct tagPDUExtQueInfo                    	*LPPDUEXTQUEINFO;

struct tagWebSignInfoHex;
typedef struct tagWebSignInfoHex                   	WEBSIGNINFOHEX;
typedef struct tagWebSignInfoHex                   	*LPWEBSIGNINFOHEX;

struct tagAuthInfo;
typedef struct tagAuthInfo                         	AUTHINFO;
typedef struct tagAuthInfo                         	*LPAUTHINFO;

struct tagSigInfo;
typedef struct tagSigInfo                          	SIGINFO;
typedef struct tagSigInfo                          	*LPSIGINFO;

struct tagAuthJC;
typedef struct tagAuthJC                           	AUTHJC;
typedef struct tagAuthJC                           	*LPAUTHJC;

union tagPDUExtAuthData;
typedef union  tagPDUExtAuthData                   	PDUEXTAUTHDATA;
typedef union  tagPDUExtAuthData                   	*LPPDUEXTAUTHDATA;

struct tagPDUExtAuthInfo;
typedef struct tagPDUExtAuthInfo                   	PDUEXTAUTHINFO;
typedef struct tagPDUExtAuthInfo                   	*LPPDUEXTAUTHINFO;

struct tagPDUIdentInfo;
typedef struct tagPDUIdentInfo                     	PDUIDENTINFO;
typedef struct tagPDUIdentInfo                     	*LPPDUIDENTINFO;

struct tagPDUExtIdent;
typedef struct tagPDUExtIdent                      	PDUEXTIDENT;
typedef struct tagPDUExtIdent                      	*LPPDUEXTIDENT;

struct tagPDUExtRelay;
typedef struct tagPDUExtRelay                      	PDUEXTRELAY;
typedef struct tagPDUExtRelay                      	*LPPDUEXTRELAY;

struct tagPDUExtStop;
typedef struct tagPDUExtStop                       	PDUEXTSTOP;
typedef struct tagPDUExtStop                       	*LPPDUEXTSTOP;

struct tagPDUSynInfo;
typedef struct tagPDUSynInfo                       	PDUSYNINFO;
typedef struct tagPDUSynInfo                       	*LPPDUSYNINFO;

struct tagPDUExtSyn;
typedef struct tagPDUExtSyn                        	PDUEXTSYN;
typedef struct tagPDUExtSyn                        	*LPPDUEXTSYN;

struct tagPDUExtSynAck;
typedef struct tagPDUExtSynAck                     	PDUEXTSYNACK;
typedef struct tagPDUExtSynAck                     	*LPPDUEXTSYNACK;

union tagPDUExt;
typedef union  tagPDUExt                           	PDUEXT;
typedef union  tagPDUExt                           	*LPPDUEXT;

struct tagPDUHead;
typedef struct tagPDUHead                          	PDUHEAD;
typedef struct tagPDUHead                          	*LPPDUHEAD;

struct tagPDUFrame;
typedef struct tagPDUFrame                         	PDUFRAME;
typedef struct tagPDUFrame                         	*LPPDUFRAME;



/*   Define structs/unions.   */

#pragma pack(1)

struct tagHomePut
{
    int GridIdx;                         	/*   杂物包第几个格子 */
    int Dir;                             	/*   摆放朝向 */
    RESPOS Pos;                             	/*   摆放坐标 */
};

struct tagHomeNew
{
    int New;                             	/*   此字段暂时无效 */
};

struct tagHomeZhongzhi
{
    int Idx;                             	/*   第几块地 */
    int GridIdx;                         	/*   用背包哪个玩意种植 */
};

struct tagHomePet
{
    int Type;                            	/*    Bind Macrosgroup:HOME_PET_OP,*/
    int GridIdx;                         	/*   更换宠物要填 */
};

struct tagHomePage
{
    int Idx;                             	/*   第几页 */
};

struct tagHomeSetName
{
    int Id;                              	/*   哪个home */
    char Name[NAME_LEN];                  	/*   新名字 */
};

struct tagHomeSetStat
{
    int Id;                              	/*   哪个home */
    int Stat;                            	/*   状态 Bind Macrosgroup:HOME_STAT,*/
};

struct tagHomeEnter
{
    int Id;                              	/*   哪个home */
};

struct tagHomeMsg
{
    int Id;                              	/*   哪个home */
    char Msg[HOME_MAX_LIUYAN_TEXT];       	/*   留言 */
};

struct tagHomeDestory
{
    int Id;                              	/*   哪个home */
};

struct tagHomeSale
{
    int Id;                              	/*   哪个home */
    int Money;                          
};

struct tagHomeBuy
{
    int Id;                              	/*   哪个home */
};

struct tagJiaJuAdjustInfo
{
    int MonID;                           	/*   家具id */
    int Dir;                             	/*   摆放朝向 */
    RESPOS Pos;                             	/*   摆放坐标 */
};

struct tagHomeJiaJuAdjust
{
    JIAJUADJUSTINFO Old;                             	/*   原来的家具信息 */
    JIAJUADJUSTINFO New;                             	/*   新的家具调整信息 */
};

union tagCltHome
{
    HOMENEW New;                             	/* HOME_CLT_OP_NEW,   */
    HOMEPAGE Page;                            	/* HOME_CLT_OP_PAGE,   */
    HOMESETNAME SetName;                         	/* HOME_CLT_OP_SET_NAME,   */
    HOMESETSTAT SetStat;                         	/* HOME_CLT_OP_SET_STAT,   */
    HOMEENTER Enter;                           	/* HOME_CLT_OP_ENTER,   */
    HOMEMSG Msg;                             	/* HOME_CLT_OP_MSG_BOARD,   */
    HOMEDESTORY Destory;                         	/* HOME_CLT_OP_DESTORY,   */
    HOMESALE Sale;                            	/* HOME_CLT_OP_SALE,   */
    HOMEBUY Buy;                             	/* HOME_CLT_OP_BUY,   */
    HOMEPET Pet;                             	/* HOME_CLT_OP_PET,   */
    HOMEPUT Put;                             	/* HOME_CLT_OP_JIAJU_PUT,   */
    HOMEZHONGZHI Zhongzhi;                        	/* HOME_CLT_OP_ZHONGZHI,   */
    HOMEJIAJUADJUST JiaJuAdjust;                     	/* HOME_CLT_OP_JIAJU_ADJUST, Ver.2557  */
};

struct tagCSHomeClt
{
    char Cmd;                             	/*    Bind Macrosgroup:HOME_CLT_OP,*/
    char Res[3];                         
    CLTHOME Data;                           
};

struct tagHomeSvrPage
{
    char CountPage;                       	/*   总页数 */
    char Page;                            	/*   第几页 */
    int CountHome;                       	/*  Ver.2531  */
    char Num;                             	/*   当前页有多少个 */
    HOME Homes[HOME_PAGE_MAX];           
};

struct tagHomeSvrSingle
{
    HOME Home;                           
};

struct tagHomeSvrFarm
{
    HOMESIOL Farm;                           
};

struct tagHomeSvrHouse
{
    HOMEHOUSE House;                          
};

struct tagHomeSvrDel
{
    int ID;                             
};

struct tagHomeSvrPet
{
    HOMEMON Pet;                            
};

struct tagHomeSvrNameChg
{
    unsigned int ID;                             
    char Name[NAME_LEN];                  	/*   新名字 */
};

struct tagHomeSvrStatChg
{
    unsigned int ID;                             
    int Stat;                           
};

struct tagHomeSvrLiuyanChg
{
    unsigned int ID;                             
    HOMELIUYAN Liuyan;                         
};

struct tagHomeSvrSaleChg
{
    unsigned int ID;                             
    int Sale;                           
};

struct tagHomeSvrBuy
{
    unsigned int ID;                             
    char Name[NAME_LEN];                  	/*   新主人名字 */
};

union tagSvrHome
{
    HOMESVRPAGE Page;                            	/* HOME_SVR_OP_PAGE,   */
    HOMESVRSINGLE Single;                          	/* HOME_SVR_OP_SINGLE,   */
    HOMESVRNAMECHG Name;                            	/* HOME_SVR_OP_NAME_CHG,   */
    HOMESVRSTATCHG Stat;                            	/* HOME_SVR_OP_STAT_CHG,   */
    HOMESVRLIUYANCHG Liuyan;                          	/* HOME_SVR_OP_LIUYAN_CHG,   */
    HOMESVRSALECHG Sale;                            	/* HOME_SVR_OP_SALE,   */
    HOMESVRBUY Buy;                             	/* HOME_SVR_OP_BUY,   */
    HOMESVRDEL Del;                             	/* HOME_SVR_OP_DEL,   */
    HOMESVRPET Pet;                             	/* HOME_SVR_OP_PET,   */
    HOMESVRHOUSE House;                           	/* HOME_SVR_OP_HOUSE_INFO,   */
    HOMESVRFARM Farm;                            	/* HOME_SVR_OP_FARM,   */
};

struct tagCSHomeSvr
{
    char Cmd;                             	/*    Bind Macrosgroup:HOME_SVR_OP,*/
    char Res[3];                         
    SVRHOME Data;                           
};

struct tagCSEnterApplyQueue
{
    int PworldID;                       
};

struct tagCSInviteEnter
{
    int PworldID;                       
};

struct tagCSExitShiKongQueue
{
    int PworldID;                       
    int type;                            	/*   1代表报名队列，2代表等待队列 Bind Macrosgroup:SHIKONG_QUEUE_TYPE,*/
};

union tagSvrShiKong
{
    CSENTERAPPLYQUEUE EnterApplyQueue;                 	/* SHIKONG_SVR_OP_ENTER_APPLY_QUEUE,   */
    CSINVITEENTER InviteEnter;                     	/* SHIKONG_SVR_OP_INVITE_ENTER,   */
    CSEXITSHIKONGQUEUE ExitShiKongQueue;                	/* SHIKONG_SVR_OP_EXIT_SHIKONG_QUEUE,   */
};

struct tagCSShiKongSvr
{
    char Cmd;                             	/*    Bind Macrosgroup:SHIKONG_SVR_OP,*/
    char Res[3];                         
    SVRSHIKONG Data;                           
};

struct tagCSExitApplyQueue
{
    int PworldID;                       
};

struct tagCSEnterShikongPworld
{
    int PworldID;                       
};

union tagCltShiKong
{
    CSEXITAPPLYQUEUE ExitApplyQueue;                  	/* SHIKONG_CLT_EXIT_APPLY_QUEUE,   */
    CSENTERSHIKONGPWORLD EnterShikongPworld;              	/* SHIKONG_CLT_ENTER_PWORLD,   */
};

struct tagCSShiKongClt
{
    unsigned char CltType;                         	/*    Bind Macrosgroup:SHIKONG_CLT_OP,*/
    char Res[3];                         
    CLTSHIKONG CltData;                        
};

struct tagSpanStrongSale
{
    int Money;                          
    int StrongID;                       
};

struct tagSpanStrongClanAward
{
    int StrongID;                        	/*   这个字段无意义 */
};

struct tagSpanStrongGroup
{
    int Group;                           	/*   第几个战团 */
    int StrongID;                        	/*   据点ID */
};

struct tagSpanStrongEnter
{
    int StrongID;                       
};

struct tagSpanStrongInfo
{
    int Invalid;                        
};

union tagCltSpanStrong
{
    SPANSTRONGSALE Sale;                            	/* SPAN_STRONG_CLT_OP_SALE,   */
    SPANSTRONGENTER Enter;                           	/* SPAN_STRONG_CLT_OP_ENTER,   */
    SPANSTRONGINFO Info;                            	/* SPAN_STRONG_CLT_OP_INFO_REQ,   */
    SPANSTRONGGROUP Group;                           	/* SPAN_STRONG_CLT_OP_GROUP, Ver.2427  */
    SPANSTRONGCLANAWARD Award;                           	/* SPAN_STRONG_CLT_OP_AWARD, Ver.2431  */
};

struct tagCSSpanStrongClt
{
    char Cmd;                             	/*    Bind Macrosgroup:SPAN_STRONG_CLT_OP,*/
    char Res[3];                         
    CLTSPANSTRONG Data;                           
};

struct tagCsSpanStrongPworld
{
    int DefRes;                         
    int AtkRes;                         
    int DefSvrID;                       
    int AtkSvrID;                       
    char DefClanName[NAME_LEN];          
    char AtkClanName[NAME_LEN];          
    int MonNum;                         
    SPANSTRONGMON Mon[MAX_SPAN_STRONG_RES_MON];   
};

struct tagCsSpanStrongInfoAll
{
    RSTRONGINFO All;                            
};

struct tagRStrongOwnerOcc
{
    int StrongID;                       
    RSTRONGOWNER Owner;                          
};

struct tagRStrongSaleOcc
{
    int StrongID;                       
    RSTRONGSALE Sale;                           
};

struct tagCsSpanStrongOcc
{
    char MaxLvl;                          	/*   本服占领据点最高等级 */
    char MaxExp;                          	/*  Ver.2444 本服打怪经验加成 */
    int MaxBindGold;                     	/*  Ver.2444 本服每日最多获得绑金数 */
    int MaxBull;                         	/*  Ver.2444 本服每日最多获得绑银数 */
    int Num;                            
    RSTRONGOWNEROCC Occ[MAX_SPAN_STRONG_NUM];        	/*  Ver.2458  */
    int iSale;                          
    RSTRONGSALEOCC Sale[MAX_SPAN_STRONG_NUM];       	/*  Ver.2458  */
};

struct tagCsSpanStrongInfoOne
{
    RSTRONGONE One;                            
};

struct tagCsSpanStrongWarOne
{
    char RoleName[NAME_LEN];             
    char Career;                         
    unsigned short ResGet;                         
    unsigned short CountKill;                      
    unsigned short MaxContinueKill;                
    unsigned short AssitNum;                       
    unsigned short CurrContinueKill;               
    int MapID;                          
    int Die;                            
    unsigned int EnterTime;                      
    char ClanName[NAME_LEN];             
    int Camp;                            	/*  Ver.2426  */
};

struct tagCsSpanStrongWarAll
{
    int End;                            
    int WinCamp;                         	/*  Ver.2446  */
    int Num;                            
    CSSPANSTRONGWARONE Ones[STRONG_PLAYER_MAX];        
};

union tagSvrSpanStrong
{
    CSSPANSTRONGINFOALL AllInfo;                         	/* SPAN_STRONG_SVR_ALL_INFO,   */
    CSSPANSTRONGINFOONE OneInfo;                         	/* SPAN_STRONG_SVR_INFO_ONE,   */
    CSSPANSTRONGPWORLD Pworld;                          	/* SPAN_STRONG_SVR_PWORLD_INFO, Ver.2414  */
    CSSPANSTRONGWARONE WarOne;                          	/* SPAN_STRONG_SVR_WAR_ONE, Ver.2425  */
    CSSPANSTRONGWARALL WarALL;                          	/* SPAN_STRONG_SVR_WAR_ALL, Ver.2425  */
    CSSPANSTRONGOCC Occ;                             	/* SPAN_STRONG_SVR_OCC_INFO, Ver.2431  */
};

struct tagCSSpanStrongSvr
{
    char Cmd;                             	/*    Bind Macrosgroup:SPAN_STRONG_SVR_OP,*/
    char Res[3];                         
    SVRSPANSTRONG Data;                           
};

struct tagCsClanPetJiYang
{
    int Idx;                             	/*   寄养到第几个栏位 */
    int Hour;                            	/*   寄养几个小时 */
    int Flag;                            	/*  Ver.2406 1-高级寄养 */
    tdr_ulonglong WID;                             	/*   宠物wid */
};

struct tagCsClanPetJiYangEnd
{
    tdr_ulonglong WID;                            
    int Idx;                            
};

struct tagCsClanPetClear
{
    tdr_ulonglong WID;                            
    int Idx;                            
};

struct tagCsClanPetWanShua
{
    tdr_ulonglong WID;                            
    int Idx;                            
    int Type;                            	/*   1-道具 2-银币 */
    int GridIdx;                         	/*   哪个道具 */
};

struct tagCsClanPetTou
{
    int Idx;                            
    tdr_ulonglong WID;                            
};

struct tagCsClanPetEat
{
    tdr_ulonglong WID;                            
    int GridIdx;                         	/*   哪个道具 */
    int Idx;                            
};

struct tagCsClanPetWork
{
    tdr_ulonglong WID;                            
    int Idx;                            
};

struct tagCsClanPetWorkAward
{
    tdr_ulonglong WID;                            
    int Idx;                            
};

union tagCltClanPetData
{
    CSCLANPETJIYANG JiYang;                          	/* CLAN_PET_CLT_OP_JIYANG,   */
    CSCLANPETJIYANGEND JiYangEnd;                       	/* CLAN_PET_CLT_OP_JIYANG_END,   */
    CSCLANPETWANSHUA Wanshua;                         	/* CLAN_PET_CLT_OP_WANSHUA,   */
    CSCLANPETTOU Tou;                             	/* CLAN_PET_CLT_OP_TOU,   */
    CSCLANPETEAT Eat;                             	/* CLAN_PET_CLT_OP_EAT,   */
    CSCLANPETWORK Work;                            	/* CLAN_PET_CLT_OP_WORK,   */
    CSCLANPETWORKAWARD WorkAward;                       	/* CLAN_PET_CLT_OP_WORK_AWARD,   */
    CSCLANPETCLEAR Clear;                           	/* CLAN_PET_CLT_OP_CLEAR,   */
};

struct tagCSClanPetClt
{
    char Cmd;                             	/*    Bind Macrosgroup:CLAN_PET_CLT_OP,*/
    char Res[3];                         
    CLTCLANPETDATA Data;                           
};

struct tagCSClanPetAll
{
    int ClanID;                          	/*  Ver.2297  */
    CLANPET All;                            
};

struct tagCSClanPetOne
{
    CLANPETONE One;                            
};

struct tagCSClanPetGaojiSec
{
    int Sec;                            
};

struct tagCSClanPetGrid
{
    int MaxNum;                          	/*   公会总寄养栏位 */
    int FreeNum;                         	/*   免费栏位 */
};

struct tagCSClanPetBox
{
    int Type;                           
    tdr_ulonglong Wid;                            
    int Idx;                            
};

union tagSvrClanPetData
{
    CSCLANPETALL All;                             	/* CLAN_PET_SVR_OP_ALL,   */
    CSCLANPETONE One;                             	/* CLAN_PET_SVR_OP_ONE,   */
    CSCLANPETGRID Grid;                            	/* CLAN_PET_SVR_OP_GRID,   */
    CSCLANPETBOX Box;                             	/* CLAN_PET_SVR_OP_BOX,   */
    CSCLANPETGAOJISEC Sec;                             	/* CLAN_PET_SVR_OP_GAOJI_SEC, Ver.2406  */
};

struct tagCSClanPetSvr
{
    char Cmd;                             	/*    Bind Macrosgroup:CLAN_PET_SVR_OP,*/
    char Res[3];                         
    SVRCLANPETDATA Data;                           
};

struct tagCltStoreSearch
{
    char KeyWorlds[STORE_SEARCH_LEN];    
};

struct tagCltStoreUI
{
    int Invalid;                         	/*   无效的字段，占位 */
};

struct tagCltStorePos
{
    int ID;                             
};

struct tagStoreOpen
{
    char StoreName[NAME_LEN];            
};

struct tagStoreChgName
{
    char StoreName[NAME_LEN];            
};

struct tagStoreUp
{
    int GridIdx;                        
    int Price;                          
    int Num;                             	/*  Ver.2146  */
};

struct tagStoreDown
{
    int GridIdx;                        
    tdr_ulonglong WID;                             	/*  Ver.2121  */
};

struct tagStoreMoneyIn
{
    int Money;                          
    int Flag;                            	/*  Ver.2121 0-取 1-存 */
};

struct tagStoreClose
{
    int ID;                             
};

struct tagStoreView
{
    int ID;                             
};

struct tagStorePage
{
    int Idx;                            
};

struct tagStoreAddGrid
{
    int Idx;                            
};

struct tagStoreDecGrid
{
    int Idx;                            
};

struct tagStoreBuy
{
    int ID;                             
    int GridIdx;                        
    int Money;                          
    int Num;                             	/*  Ver.2140  */
    tdr_ulonglong WID;                             	/*  Ver.2121  */
};

union tagCltStoreData
{
    STOREOPEN Open;                            	/* STORE_CLT_OP_OPEN,   */
    STOREUP Up;                              	/* STORE_CLT_OP_UP,   */
    STOREDOWN Down;                            	/* STORE_CLT_OP_DOWN,   */
    STOREMONEYIN MoneyIn;                         	/* STORE_CLT_OP_MONEY_IN,   */
    STORECLOSE Close;                           	/* STORE_CLT_OP_CLOSE,   */
    STOREVIEW View;                            	/* STORE_CLT_OP_VIEW,   */
    STOREPAGE Page;                            	/* STORE_CLT_OP_PAGE,   */
    STOREADDGRID AddGrid;                         	/* STORE_CLT_OP_ADD_GRID,   */
    STOREBUY Buy;                             	/* STORE_CLT_OP_BUY,   */
    STOREDECGRID DecGrid;                         	/* STORE_CLT_OP_DEC_GRID, Ver.2121  */
    CLTSTOREPOS Pos;                             	/* STORE_CLT_OP_POS, Ver.2149  */
    CLTSTOREUI UI;                              	/* STORE_CLT_OP_OPEN_UI, Ver.2226  */
    CLTSTORESEARCH Search;                          	/* STORE_CLT_OP_SEARCH, Ver.2272  */
    STORECHGNAME ChgName;                         	/* STORE_CLT_OP_CHG_NAME, Ver.2275  */
};

struct tagCSStoreClt
{
    char Cmd;                             	/*    Bind Macrosgroup:STORE_CLT_OP,*/
    char Res[3];                         
    CLTSTOREDATA Data;                           
};

struct tagSvrStoreSaerch
{
    int Num;                            
    int IDs[MAX_STORE_NUM];             
};

struct tagSvrStorePos
{
    int ID;                             
    int Pos;                            
    unsigned int Exchg;                           	/*  Ver.2153  */
};

struct tagStorePageOne
{
    int ID;                             
    char StoreName[NAME_LEN];            
    char RoleName[NAME_LEN];              	/*  Ver.2121  */
};

struct tagStorePageSvr
{
    int Page;                            	/*   第几页,0开始 */
    int PageCount;                       	/*   一共几页 */
    int Num;                            
    STOREPAGEONE PageOne[STORE_PAGE_MAX];        
};

struct tagStoreOpenUI
{
    STORE Store;                           	/*   自己的商铺信息,StoreID为0表示没有商铺 */
    STOREPAGESVR StorePageSvr;                    	/*   当前页信息 */
    int NpcID;                          
};

struct tagStoreOne
{
    STORE Store;                          
    int Self;                            	/*   1-自己的商铺 */
};

struct tagStoreGridChg
{
    int ID;                             
    int Max;                            
};

struct tagStoreMoneyChg
{
    int ID;                             
    int Money;                          
};

struct tagStoreItemChg
{
    int ID;                             
    STOREGRID StoreGrid;                      
};

struct tagStoreCloseSvr
{
    int ID;                             
};

struct tagStoreOpenSvr
{
    int Succ;                            	/*   0-成功 */
    int ID;                             
    char StoreName[NAME_LEN];            
};

union tagSvrStoreData
{
    STOREONE One;                             	/* STORE_SVR_OP_ONE_INFO,   */
    STOREPAGESVR Page;                            	/* STORE_SVR_OP_PAGE,   */
    STOREGRIDCHG GridChg;                         	/* STORE_SVR_OP_GRID_CHG,   */
    STOREMONEYCHG MoneyChg;                        	/* STORE_SVR_OP_MONEY_CHG,   */
    STOREITEMCHG ItemChg;                         	/* STORE_SVR_OP_ITEM_CHG,   */
    STORECLOSESVR Close;                           	/* STORE_SVR_OP_CLOSE,   */
    STOREOPENSVR Open;                            	/* STORE_SVR_OP_OPEN,   */
    STOREOPENUI OpenUI;                          	/* STORE_SVR_OP_OPEN_UI, Ver.2124  */
    SVRSTOREPOS Pos;                             	/* STORE_SVR_OP_POS, Ver.2149  */
    SVRSTORESAERCH Search;                          	/* STORE_SVR_OP_SEARCH, Ver.2272  */
};

struct tagCSStoreSvr
{
    char Cmd;                             	/*    Bind Macrosgroup:STORE_SVR_OP,*/
    char Res[3];                         
    SVRSTOREDATA Data;                           
};

struct tagCSBoonGet
{
    int Money;                          
    int Flag;                            	/*  Ver.2067 0-领会长工资 */
};

struct tagCSBoonAssign
{
    int Office;                         
    BOONASSIGNPOS AssignBindGlod[BOON_GET_MAX];    	/*   金券分配细节 */
};

union tagCltBoonData
{
    CSBOONGET Get;                             	/* BOON_CLT_OP_GET,   */
    CSBOONASSIGN Assign;                          	/* BOON_CLT_OP_ASSIGN,   */
};

struct tagCSBoonClt
{
    char Cmd;                             	/*    Bind Macrosgroup:BOON_CLT_OP,*/
    char Res[3];                         
    CLTBOONDATA Data;                           
};

struct tagCSSvrBoonAssign
{
    BOONASSIGN Assign;                         
};

struct tagCSSvrBoonChg
{
    BOONCOND Cond;                           
};

struct tagCSSvrBoonAll
{
    CLANBOON ClanBoon;                       
};

union tagSvrBoonData
{
    CSSVRBOONASSIGN Assign;                          	/* BOON_SVR_OP_ASSIGN,   */
    CSSVRBOONCHG Chg;                             	/* BOON_SVR_OP_CHG,   */
    CSSVRBOONALL All;                             	/* BOON_SVR_OP_ALL,   */
};

struct tagCSBoonSvr
{
    char Cmd;                             	/*    Bind Macrosgroup:BOON_SVR_OP,*/
    char Res[3];                         
    SVRBOONDATA Data;                           
};

struct tagCSBusyFini
{
    unsigned char ID;                             
    unsigned char Type;                            	/*    Bind Macrosgroup:BUSY_FINI_TYPE,*/
    unsigned char UseItem;                         	/*   0-不使用经验果1-1.5倍2-2倍 */
};

union tagCSBusyCltData
{
    CSBUSYFINI Fini;                            	/* BUSY_CLT_OP_FINI,   */
};

struct tagCSBusyClt
{
    char Cmd;                             	/*    Bind Macrosgroup:BUSY_CLT_OP,*/
    char Res[3];                         
    CSBUSYCLTDATA Data;                           
};

struct tagCSBusyUI
{
    int ID;                             
    int NpcID;                          
};

struct tagCSBusyFiniAction
{
    int ID;                             
};

union tagCSBusySvrData
{
    BUSYINFO Info;                            	/* BUSY_SVR_OP_DAY_NUM,   */
    CSBUSYUI BusyUI;                          	/* BUSY_SVR_OP_UI,   */
    CSBUSYFINIACTION FiniAction;                      	/* BUSY_SVR_OP_FINI_ACTION, Ver.1904  */
};

struct tagCSBusySvr
{
    char Cmd;                             	/*    Bind Macrosgroup:BUSY_SVR_OP,*/
    char Res[3];                         
    CSBUSYSVRDATA Data;                           
};

struct tagGuniusUpClt
{
    int Type;                            	/*   天赋类型 */
    int AttrID;                         
    int Lvl;                            
    int Flag;                            	/*  Ver.2506 是否使用n%经验但不消耗money的方式,1表示是,0表示不是 */
};

union tagCsGuniusClt
{
    GUNIUSUPCLT Up;                              	/* GUNIUS_CLT_OP_UP,   */
};

struct tagGuniusClt
{
    char Cmd;                             	/*    Bind Macrosgroup:GUNIUS_CLT_OP,*/
    char Res[3];                         
    CSGUNIUSCLT Data;                           
};

struct tagGuniusOneClt
{
    int Type;                           
    GENIUSSUBONE One;                            
};

struct tagGuniusAllClt
{
    GENIUSINFO All;                            
};

union tagCsGuniusSvr
{
    GUNIUSONECLT One;                             	/* GUNIUS_SVR_OP_ONE,   */
    GUNIUSALLCLT All;                             	/* GUNIUS_SVR_OP_ALL,   */
};

struct tagGuniusSvr
{
    char Cmd;                             	/*    Bind Macrosgroup:GUNIUS_SVR_OP,*/
    char Res[3];                         
    CSGUNIUSSVR Data;                           
};

struct tagFzLvlUpClt
{
    int Lvl;                             	/*   方舟当期等级,服务器用来验证 */
};

struct tagFzAttrUpClt
{
    int Idx;                             	/*   第几个格子 */
    int Lvl;                             	/*   当前格子属性等级,服务器用来验证 */
};

union tagCsFzClt
{
    FZLVLUPCLT LvlUp;                           	/* FZ_CLT_OP_LVL_UP,   */
    FZATTRUPCLT AttrUp;                          	/* FZ_CLT_OP_ATTR_UP,   */
};

struct tagFzClt
{
    char Cmd;                             	/*    Bind Macrosgroup:FZ_CLT_OP,*/
    char Res[3];                         
    CSFZCLT Data;                           
};

struct tagFzOneSvr
{
    FZONE One;                             	/*   一个fz格子信息变化 */
};

struct tagFzListSvr
{
    FZINFO List;                            	/*   所有格子信息 */
};

struct tagCSDaoBa
{
    tdr_ulonglong ClanWid;                        
    unsigned int End;                            
    char Name[NAME_LEN];                 
};

union tagCsFzSvr
{
    FZONESVR One;                             	/* FZ_SVR_OP_ONE,   */
    FZLISTSVR List;                            	/* FZ_SVR_OP_LIST,   */
};

struct tagFzSvr
{
    char Cmd;                             	/*    Bind Macrosgroup:FZ_SVR_OP,*/
    char Res[3];                         
    CSFZSVR Data;                           
};

struct tagResetStartClt
{
    int GridIdx;                         	/*   杂物包哪个格子 */
};

struct tagResetBreakClt
{
    int ItemID;                          	/*   杂物包炉子ID */
};

struct tagResetEndClt
{
    int GridIdx;                         	/*   杂物包哪个格子 */
    int RongluID;                        	/*   Startres中服务器回复的ID */
};

union tagCsRongluClt
{
    RESETSTARTCLT Start;                           	/* RONGLU_CLT_OP_RESET_START,   */
    RESETENDCLT End;                             	/* RONGLU_CLT_OP_RESET_END,   */
    RESETBREAKCLT Break;                           	/* RONGLU_CLT_OP_RESET_BREAK, Ver.1938  */
};

struct tagRongluClt
{
    char Cmd;                             	/*    Bind Macrosgroup:RONGLU_CLT_OP,*/
    char Res[3];                         
    CSRONGLUCLT Data;                           
};

struct tagRongluStartRes
{
    int ItemID;                          	/*   熔炉ID */
};

struct tagRongluOne
{
    int ItemID;                          	/*   熔炉ID */
    int TaskID;                          	/*   任务ID */
    int LvlGrade;                        	/*   接任务时角色等级段 */
};

struct tagRongluKillNumChg
{
    int MonMemID;                        	/*   哪个怪 */
    int Num;                             	/*   计数器 */
    int KillMonMemID;                    	/*   被杀的怪的ID */
    int Type;                            	/*  Ver.2141 0-熔炉 1-失落图腾 */
};

union tagCsRongluSvr
{
    RONGLUONE One;                             	/* RONGLU_SVR_OP_ONE,   */
    RONGLUKILLNUMCHG Kill;                            	/* RONGLU_SVR_OP_KILL_NUM_CHG,   */
    RONGLUSTARTRES Start;                           	/* RONGLU_SVR_OP_START_RES,   */
};

struct tagRongluSvr
{
    char Cmd;                             	/*    Bind Macrosgroup:RONGLU_SVR_OP,*/
    char Res[3];                         
    CSRONGLUSVR Data;                           
};

struct tagAccGetRoleInfo
{
    char AccountName[ACCOUNT_LOGIN_NAME_LEN];
    int Rand;                           
    int SigLen;                         
    char Sig[AUTH_LEN];                  
};

struct tagAccGetRoleClt
{
    char Enc[RSA_ENC_LEN];               
};

struct tagAccRoleInfo
{
    char RoleName[NAME_LEN];             
    int Level;                          
    int WorldID;                        
    int LastLogout;                     
};

struct tagAccGetRoleSvr
{
    int Succ;                            	/*   1-成功 */
    int RegionID;                        	/*   大区id */
    int Num;                            
    ACCROLEINFO RoleInfo[ACC_ROLE_MAX];         
};

struct tagActiveTrans
{
    int ActiveID;                        	/*   活动助手ID */
};

union tagCSActiveClt
{
    ACTIVETRANS Trans;                           	/* ACTIVE_CLT_OP_TRANS,   */
};

struct tagActiveClt
{
    char Cmd;                             	/*    Bind Macrosgroup:ACTIVE_CLT_OP,*/
    char Res[3];                         
    CSACTIVECLT Data;                           
};

struct tagAutoPworldAgree
{
    int Agree;                           	/*   1-同意 0-不同意 */
};

struct tagAutoPworldUIReq
{
    int Invalid;                         	/*   无意义的字段 */
};

struct tagAutoPworldEnterReq
{
    int PworldID;                       
    int DiffPworldID;                    	/*  Ver.1671  */
};

union tagCSAutoPworldClt
{
    AUTOPWORLDUIREQ UI;                              	/* AUTOPWORLD_CLT_OP_UI, Ver.1617  */
    AUTOPWORLDENTERREQ Enter;                           	/* AUTOPWORLD_CLT_OP_ENTER,   */
    AUTOPWORLDAGREE Agree;                           	/* AUTOPWORLD_CLT_OP_AGREE, Ver.1671  */
};

struct tagAutoPworldClt
{
    char Cmd;                             	/*    Bind Macrosgroup:AUTOPWORLD_CLT_OP,*/
    char Res[3];                         
    CSAUTOPWORLDCLT Data;                           
};

struct tagAutoPworldSvrUI
{
    int PworldID;                        	/*   0-面板 |非0-进入副本ID */
    int Level;                           	/*   动态副本等级 */
    int EffectFlag;                      	/*  Ver.1630  */
};

struct tagAutoPworldTeamInfo
{
    int MemID;                          
    int Ready;                          
};

struct tagAutoPworldSvrEnter
{
    int PworldID;                       
    int CancelFlag;                      	/*  Ver.1671 0-弹出面板 1-取消面板 */
    int TeamMemNum;                      	/*  Ver.1671  */
    AUTOPWORLDTEAMINFO TeamInfo[MAX_TEAM_MEMBER];       	/*  Ver.1671  */
    unsigned int StartTM;                         	/*  Ver.1675  */
};

union tagCSAutoPworldSvr
{
    AUTOPWORLDSVRUI UI;                              	/* AUTOPWORLD_SVR_OP_UI, Ver.1617  */
    AUTOPWORLDSVRENTER EnterTransmit;                   	/* AUTOPWORLD_SVR_OP_ENTER,   */
};

struct tagAutoPworldSvr
{
    char Cmd;                             	/*    Bind Macrosgroup:AUTOPWORLD_SVR_OP,*/
    char Res[3];                         
    CSAUTOPWORLDSVR Data;                           
};

struct tagStrongAwardReq
{
    int StrongID;                        	/*   0-时间城争霸战,非0表示据点ID */
    int Type;                            	/*   1-公会资金 2-经验3-buff  4-公会贡献度 */
};

struct tagStrongInfoAllReq
{
    int Invalid;                         	/*   无效的字段 */
};

struct tagStrongEnterReq
{
    int StrongID;                       
};

struct tagStrongSale
{
    int MapID;                          
    int Money;                          
};

struct tagStrongEnter
{
    int MapID;                          
};

struct tagStrongBannerXuanyan
{
    int MapID;                          
    char XuanYan[STRONG_XUANYAN_LEN];    
};

struct tagStrongSetBanner
{
    int MapID;                           	/*   哪个据点 */
    int NpcID;                           	/*   哪个Npc */
    int Style;                           	/*   形状子类型 */
    int Back;                            	/*   底纹子类型 */
    int Sign;                            	/*   标记子类型 */
};

union tagCSStrongClt
{
    STRONGSALE Sale;                            	/* STRONG_CLT_OP_SALE,   */
    STRONGSETBANNER SetBanner;                       	/* STRONG_CLT_OP_SET_BANNER, Ver.1593  */
    STRONGBANNERXUANYAN SetXuanyan;                      	/* STRONG_CLT_OP_SET_BANNER_XUANYAN, Ver.1597  */
    STRONGINFOALLREQ InfoAllReq;                      	/* STRONG_CLT_OP_INFO_ALL, Ver.1638  */
    STRONGAWARDREQ AwardReq;                        	/* STRONG_CLT_OP_AWARD, Ver.1638  */
    STRONGENTERREQ EnterReq;                        	/* STRONG_CLT_OP_ENTER, Ver.1638  */
};

struct tagStrongClt
{
    char Cmd;                             	/*    Bind Macrosgroup:STRONG_CLT_OP,*/
    char Res[3];                         
    CSSTRONGCLT Data;                           
};

struct tagStrongIDInfo
{
    int ID;                             
};

struct tagGloryOne
{
    int MapID;                          
    int Open;                           
    int EndTime;                        
    int StartTime;                      
    int x;                              
    int y;                              
};

struct tagStrongGlory
{
    int Num;                             	/*  Ver.2226  */
    GLORYONE Glory[MAX_STRONG_POINT];         	/*  Ver.2226  */
};

struct tagStrongSaleInfo
{
    int NpcID;                          
    int MapID;                           	/*  Ver.1563  */
    int SaleStat;                       
    int ClanJoin;                       
    int ClanPostion;                    
    int ClanMoney;                      
    int AtkClanMoney;                   
    tdr_ulonglong AtkClanWid;                     
};

struct tagStrongWarOne
{
    char RoleName[NAME_LEN];             
    char Career;                         
    unsigned short ResGet;                         
    unsigned short CountKill;                      
    unsigned short MaxContinueKill;                
    unsigned short AssitNum;                       
    unsigned short CurrContinueKill;                	/*  Ver.1835  */
    int MapID;                           	/*  Ver.1844  */
    int Die;                             	/*  Ver.2258  */
    unsigned int EnterTime;                      
    tdr_ulonglong ClanWID;                        
};

struct tagStrongWarAll
{
    int End;                            
    int Num;                            
    STRONGWARONE Ones[STRONG_PLAYER_MAX];        
};

struct tagStrongInfoOne
{
    int MapID;                          
    int IsOpen;                          	/*  Ver.1613 0-未开启 1-开启 */
    tdr_ulonglong ClanWid;                        
};

struct tagStrongAllInfoOne
{
    STRONGSALEINFO SaleInfo;                        	/*   竞拍信息 */
    STRONGINFOONE OccupInfo;                       	/*   占领信息 */
};

struct tagStrongAllInfo
{
    int Num;                            
    STRONGALLINFOONE AllInfoOnes[MAX_STRONG_POINT];  
    int CityStat;                        	/*  Ver.1654 时间城争霸战状态 */
};

struct tagStrongActive
{
    int Num;                            
    int MapIDs[MAX_STRONG_POINT];       
};

struct tagBannerChg
{
    int MapID;                          
    int MemID;                          
    int Style;                           	/*   形状子类型 */
    int Back;                            	/*   底纹子类型 */
    int Sign;                            	/*   标记子类型 */
    char XuanYan[STRONG_XUANYAN_LEN];     	/*  Ver.1597  */
    int Effect;                          	/*  Ver.1935  */
};

struct tagStrongPointInfos
{
    int Num;                            
    STRONGINFOONE StrongInfos[MAX_STRONG_POINT];  
};

struct tagStrongPworldInfo
{
    int DefRes;                         
    int AtkRes;                         
    tdr_ulonglong DefClanWid;                     
    tdr_ulonglong AtkClanWid;                     
    int MonNum;                         
    STRONGMON Mon[MAX_RES_MON];               
};

union tagCSStrongSvr
{
    STRONGSALEINFO SaleInfo;                        	/* STRONG_SVR_OP_SALE_INFO,   */
    STRONGPOINTINFOS StrongPointInfo;                 	/* STRONG_SVR_OP_STRONG_INFO,   */
    STRONGPWORLDINFO StrongPworldInfo;                	/* STRONG_SVR_OP_PWORLD_INFO,   */
    BANNERCHG BannerChg;                       	/* STRONG_SVR_OP_BANNER_CHG, Ver.1593  */
    STRONGACTIVE Active;                          	/* STRONG_SVR_OP_STRONG_ACTIVE, Ver.1613  */
    STRONGALLINFO AllInfo;                         	/* STRONG_SVR_OP_ALL_INFO, Ver.1638  */
    STRONGWARONE WarOne;                          	/* STRONG_SVR_OP_WAR_ONE, Ver.1808  */
    STRONGWARALL WarAll;                          	/* STRONG_SVR_OP_WAR_ALL, Ver.1808  */
    STRONGIDINFO StrongID;                        	/* STRONG_SVR_OP_STRONGID, Ver.1869  */
    STRONGGLORY StrongGlory;                     	/* STRONG_SVR_OP_STRONGLORY, Ver.1903  */
};

struct tagStrongSvr
{
    char Cmd;                             	/*    Bind Macrosgroup:STRONG_SVR_OP,*/
    char Res[3];                         
    CSSTRONGSVR Data;                           
};

struct tagSubJectJoin
{
    int Join;                            	/*   此字段无意义 */
};

struct tagSubJectExit
{
    int Exit;                            	/*   此字段无意义 */
};

struct tagSubJectCommit
{
    int ID;                              	/*   题库ID,服务器用来验证 */
    int Idx;                             	/*   第几道题,服务器用来验证 */
    int KeyIdx;                          	/*   答案索引0-3  */
    int IsStar;                          	/*   是否使用灵感之星1-是 */
};

union tagCSSubJectClt
{
    SUBJECTJOIN Join;                            	/* SUBJECT_CLT_OP_JOIN,   */
    SUBJECTEXIT Exit;                            	/* SUBJECT_CLT_OP_EXIT,   */
    SUBJECTCOMMIT Commit;                          	/* SUBJECT_CLT_OP_COMMIT,   */
};

struct tagSubJectClt
{
    char Cmd;                             	/*    Bind Macrosgroup:SUBJECT_CLT_OP,*/
    char Res[3];                         
    CSSUBJECTCLT Data;                           
};

struct tagSubJectInvite
{
    int Invite;                          	/*   此字段无意义 */
    int StartTime;                       	/*  Ver.1530 开始答题时间,客户端要倒计时|秒 */
};

struct tagSubJectSelf
{
    char Succ;                            	/*   答对数 */
    char Star;                            	/*   灵感之星数量 */
    unsigned short Top;                             	/*   自己排名 */
    int Integ;                           	/*   自己积分 */
    int CurrIdx;                         	/*  Ver.1542 大于0表示当前题已经答过了,值为玩家答案索引|从1开始 */
};

struct tagSubJectTopOne
{
    unsigned short Top;                            
    int Integ;                           	/*   积分 */
    char RoleName[ROLE_NAME_LEN_SAVE];    	/*   角色名 */
};

struct tagSubJectTop
{
    int Num;                            
    SUBJECTTOPONE Tops[SUBJECT_MAX_TOP];          
};

struct tagSubJectPloy
{
    char Already;                         	/*   服务器已经出题数,第几道题 */
    char Odd;                             	/*   服务器剩余出题数 */
    int ID;                              	/*   题库ID */
    int ReqEnd;                          	/*   邀请结束时间|大于0表示要显示开始比赛倒计时 */
    int ResEnd;                          	/*   答题结束时间 */
    int LockEnd;                         	/*   阅题结束时间 */
};

struct tagSubJectAward
{
    int Top;                             	/*   排名奖励 */
    int Base;                            	/*   基础奖励 */
    int Add;                             	/*   额外奖励 */
};

struct tagSubJectFlush
{
    SUBJECTSELF Self;                            	/*   自己的信息 */
    SUBJECTTOP Top;                             	/*   前20名的信息 */
    SUBJECTPLOY Ploy;                            	/*   答题活动信息 */
    SUBJECTAWARD Award;                           	/*   奖励信息|此结构任何一字段有值表示活动结束 */
};

union tagCSSubJectSvr
{
    SUBJECTINVITE Invite;                          	/* SUBJECT_SVR_OP_INVITE,   */
    SUBJECTFLUSH Flush;                           	/* SUBJECT_SVR_OP_FLUSH,   */
};

struct tagSubJectSvr
{
    char Cmd;                             	/*    Bind Macrosgroup:SUBJECT_SVR_OP,*/
    char Res[3];                         
    CSSUBJECTSVR Data;                           
};

struct tagUnrealEnter
{
    int Layer;                          
};

struct tagUnrealSave
{
    int Save;                           
};

struct tagUnrealTeamOne
{
    char CaptainName[ROLE_NAME_LEN];     
    unsigned char Level;                          
    unsigned char Num;                            
    unsigned char Layer;                          
};

struct tagUnrealTeamInfo
{
    int NpcID;                           	/*  Ver.1228  */
    int TeamNum;                         	/*   服务器最大发10个队伍信息 */
    UNREALTEAMONE TeamInfos[UNREAL_TEAM_INFO_MAX];
};

struct tagBossInfo
{
    int ID;                             
    int MapID;                          
    RESPOS Pos;                            
};

struct tagUnrealMonInfo
{
    int Layer;                          
    int MonCount;                       
    int MonKill;                        
};

struct tagUnrealBossInfos
{
    int NpcID;                           	/*  Ver.1228  */
    int Num;                            
    BOSSINFO BossInfo[UNREAL_MAX_BOSS];      
};

union tagCSUnrealClt
{
    UNREALENTER Enter;                           	/* UNREAL_CLT_OP_ENTER,   */
};

union tagCSUnrealSvr
{
    UNREALSAVE Save;                            	/* UNREAL_SVR_OP_SAVE_INFO,   */
    UNREALMONINFO Mon;                             	/* UNREAL_SVR_OP_MON_INFO,   */
    UNREALTEAMINFO Team;                            	/* UNREAL_SVR_OP_TEAM_INFO,   */
    UNREALBOSSINFOS Boss;                            	/* UNREAL_SVR_OP_BOSS_INFO, Ver.1196  */
};

struct tagUnrealSvr
{
    char Cmd;                             	/*    Bind Macrosgroup:UNREAL_SVR_OP,*/
    char Res[3];                         
    CSUNREALSVR Data;                           
};

struct tagUnrealClt
{
    char Cmd;                             	/*    Bind Macrosgroup:UNREAL_CLT_OP,*/
    char Res[3];                         
    CSUNREALCLT Data;                           
};

struct tagCsGoldRaffleSvr
{
    int RaffleNum;                       	/*   角色上线通知金券商城抽奖次数 */
};

struct tagCsRaffleClt
{
    int Idx;                             	/*   RndAwdDef中索引 */
    int Type;                            	/*    Bind Macrosgroup:RND_AWD_TYPE,*/
    int StartFlag;                       	/*   0-开始  1-结束 */
};

struct tagCsRaffleSvr
{
    int Idx;                             	/*   RndAwdDef中第几个物品,从0开始 */
    int Type;                            	/*  Ver.1012 那种类型抽奖 */
};

struct tagCsUnDel
{
    tdr_ulonglong RoleID;                         
};

struct tagCsCDkeySvr
{
    int Succ;                            	/*    Bind Macrosgroup:CDKEY_FAIL,*/
};

struct tagFengYinArm
{
    int Num;                            
    int Items[MAX_FENGYIN_ARM];         
};

struct tagCSReviveInfo
{
    int ReviveNum;                       	/*   原地复活次数 */
    int PerfectReviveNum;                	/*   完美复活次数 */
    int DayReviveNum;                    	/*  Ver.1676  */
    int DayPerfectReviveNum;             	/*  Ver.1676  */
    int PerfectReviveMoney;              	/*  Ver.1967  */
};

struct tagDieSvr
{
    int End;                             	/*  Ver.455  */
    char KillerName[ROLE_NAME_LEN];      
    DIEDROP DieDrop;                        
    int AutoReviveTime;                  	/*  Ver.505 倒计时多少秒之后自动发送复活协议(只显示倒计时面板) */
    FENGYINARM FengYinArm;                      	/*  Ver.969  */
    CSREVIVEINFO Revive;                          	/*  Ver.1632  */
    int NiXi;                            	/*  Ver.1821  */
    DAOBAINFO DaoBaInfo;                       	/*  Ver.1930  */
};

struct tagSafeLockActive
{
    char PassWD[SAFE_LOCK_PASSWD_LEN];   
};

struct tagSafeLockModify
{
    char OldPassWD[SAFE_LOCK_PASSWD_LEN];
    char NewPassWD[SAFE_LOCK_PASSWD_LEN];
};

struct tagCSSafeLockClt
{
    char LockCancel[SAFE_LOCK_PASSWD_LEN]; 	/* SAFE_LOCK_CANCEL,   */
    char LockActive[SAFE_LOCK_PASSWD_LEN]; 	/* SAFE_LOCK_ACTIVE,   */
    char LockPass[SAFE_LOCK_PASSWD_LEN];  	/* SAFE_LOCK_PASS,   */
    SAFELOCKMODIFY LockModify;                      	/* SAFE_LOCK_MODIFY,   */
    int LockReDo;                        	/* SAFE_LOCK_REDO, Ver.871  */
};

struct tagSafeLockClt
{
    int Cmd;                             	/*    Bind Macrosgroup:SAFE_LOCK_CMD,*/
    CSSAFELOCKCLT SafeLock;                       
};

struct tagSafeLockSvr
{
    int LockFlag;                       
};

struct tagGPRSClt
{
    int Flag;                            	/*   0---点击定位按钮   1---10秒一次的即时定位 */
    char RoleName[ROLE_NAME_LEN];        
};

struct tagGPRSSvr
{
    unsigned char Head;                            	/*  Ver.406  */
    unsigned char Hair;                            	/*  Ver.406  */
    unsigned char Face;                            	/*  Ver.406  */
    unsigned char Career;                          	/*  Ver.406  */
    int Level;                           	/*  Ver.406  */
    int Map;                            
    int X;                              
    int Y;                              
    int Team;                           
    int GPRSEnd;                        
    int Gender;                          	/*  Ver.472  */
    char RoleName[ROLE_NAME_LEN];        
    char ClanName[ROLE_NAME_LEN];        
};

struct tagTestInvite
{
    char RoleName[ROLE_NAME_LEN];        
};

struct tagTestRes
{
    int Flag;                            	/*   0-同意  1-拒绝 */
    char RoleName[ROLE_NAME_LEN];        
};

struct tagTestSvrRes
{
    int x;                              
    int y;                              
    TESTRES TestRes;                        
};

union tagCSInviteTestClt
{
    TESTINVITE TestInvite;                      	/* TEST_CLT_INVITE,   */
    TESTRES TestCltRes;                      	/* TEST_CLT_RES,   */
};

union tagCSInviteTestSvr
{
    TESTINVITE TestInvite;                      	/* TEST_SVR_INFO,   */
    TESTSVRRES TestSvrRes;                      	/* TEST_SVR_RES, Ver.423  */
    int TestMemID;                       	/* TEST_SVR_CANCEL, Ver.491  */
};

struct tagInviteClt
{
    int Cmd;                             	/*    Bind Macrosgroup:TEST_CLT,*/
    char Res[3];                         
    CSINVITETESTCLT InviteTestClt;                  
};

struct tagInviteSvr
{
    int Cmd;                             	/*    Bind Macrosgroup:TEST_SVR,*/
    char Res[3];                         
    CSINVITETESTSVR InviteTestSvr;                  
};

struct tagBctEnter
{
    unsigned char StartLayer;                      	/*   开始层数 */
    unsigned char UseItem;                         	/*   是否使用道具进入 */
    unsigned short PworldID;                       
};

struct tagBctContinue
{
    unsigned char NextLayer;                       	/*   下一层层数 */
};

struct tagBctRaffleStart
{
    int Index;                          
};

struct tagBctAward
{
    int Layer;                           	/*   第几层 */
};

struct tagBctRaffleEnd
{
    int Index;                          
};

struct tagBctExit
{
    int PworldID;                       
};

struct tagBctTopInfo
{
    int Layer;                          
};

struct tagBctAgain
{
    int Layer;                          
};

union tagCSBctClt
{
    BCTENTER BctEnter;                        	/* BCT_CMD_CLT_ENTER,   */
    BCTCONTINUE BctContinue;                     	/* BCT_CMD_CLT_CONTINUE,   */
    BCTRAFFLESTART BctRaffleStart;                  	/* BCT_CMD_CLT_RAFFLE_START, Ver.288  */
    BCTEXIT BctExit;                         	/* BCT_CMD_CLT_EXIT,   */
    BCTRAFFLEEND BctRaffleEnd;                    	/* BCT_CMD_CLT_RAFFLE_END, Ver.288  */
    BCTTOPINFO BctTopInfo;                      	/* BCT_CMD_CLT_LAYER_TOP, Ver.303  */
    BCTAGAIN BctAgain;                        	/* BCT_CMD_CLT_AGAIN, Ver.499  */
    BCTAWARD BctAward;                        	/* BCT_CMD_CLT_AWARD, Ver.2194  */
};

struct tagCSBctReq
{
    int Cmd;                             	/*    Bind Macrosgroup:BCT_CMD_CLT,*/
    char Res[3];                         
    CSBCTCLT CltData;                        
};

struct tagBctLayerHistory
{
    int Layer;                          
    int TopUseTime;                      	/*   本层历史用时最高记录 */
    int TopUseTimeMs;                    	/*  Ver.1472 本层历史用时最高记录|百分秒 */
    int SelfTopUseTime;                  	/*   自己用时的记录 */
    int SelfTopUseTimeMs;                	/*  Ver.1472 自己用时的记录|百分秒 */
    int SelfTopRecordTime;               	/*   记录时间 */
    int NextTopUseTime;                  	/*   下层历史用时最高记录 */
    int NextTopUseTimeMs;                	/*  Ver.1472 下层历史用时最高记录|百分秒 */
    char TopName[NAME_LEN];               	/*   最高记录保持者 */
    char NextTopName[NAME_LEN];           	/*   下层最高记录保持者 */
};

struct tagBctSelfTop
{
    int Layer;                           	/*   自己闯关最好记录 */
    unsigned int LayerAward[MAX_AWARD_LAYER];     	/*  Ver.2194 各层领奖信息 */
};

struct tagBctInfo
{
    int StartLayer;                     
    int CurrLayer;                      
    int PassLayer;                      
};

struct tagSvrRaffleStart
{
    int Index;                           	/*   表里面第几个物品 */
};

struct tagBctStopTm
{
    int Layer;                          
};

struct tagBctPass
{
    int Layer;                          
};

struct tagBctFail
{
    int Layer;                          
    int CurrMonHp;                       	/*  Ver.292  */
    int HistoryMonHp;                    	/*  Ver.292  */
    int LayerMonHp;                      	/*  Ver.292 本层怪物总血量 */
};

struct tagRaffleAward
{
    int Idx;                             	/*   随机奖励表索引 */
    RANDAWARD RandIAwards;                     	/*   随机奖励表的哪个物品 */
};

struct tagBctSvrExit
{
    int CurrPassNum;                     	/*   本次闯关层数 */
    int CurrPassLayer;                   	/*   本次最高层数 */
    int TotalExp;                       
    int TotalMoney;                     
    char PassItemNum;                     	/*   本次BCT获得道具数 */
    PASSITEM PassItems[MAX_PASS_ITEM_NUM];   
    char RaffleNum;                       	/*   抽奖数 */
};

union tagCSBctSvr
{
    BCTLAYERHISTORY BctLayerHistory;                 	/* BCT_CMD_SVR_HISTORY,   */
    BCTSELFTOP BctSelfTop;                      	/* BCT_CMD_SVR_TOP,   */
    BCTSVREXIT BctSvrExit;                      	/* BCT_CMD_SVR_EXIT,   */
    BCTFAIL BctFail;                         	/* BCT_CMD_SVR_FAIL, Ver.288  */
    BCTPASS BctPass;                         	/* BCT_CMD_SVR_PASS, Ver.288  */
    SVRRAFFLESTART BctRaffleStart;                  	/* BCT_CMD_SVR_RAFFLE_START, Ver.288  */
    BCTSTOPTM BctStopTm;                       	/* BCT_CMD_SVR_PASS_STOP_TIME, Ver.290  */
    BCTINFO BctInfo;                         	/* BCT_CMD_SVR_INFO, Ver.292  */
};

struct tagCSBctRes
{
    int Cmd;                             	/*    Bind Macrosgroup:BCT_CMD_SVR,*/
    char Res[3];                         
    CSBCTSVR SvrData;                        
};

struct tagCSPkgHead
{
    unsigned short Magic;                          
    unsigned short Cmd;                             	/*    Bind Macrosgroup:CSCmd,*/
    unsigned short HeadLen;                        
    unsigned short BodyLen;                        
    unsigned short Ver;                            
    unsigned short Res;                            
};

struct tagCSAccLoginReq
{
    int Uin;                            
    unsigned short CltProtoVer;                    
    char AccountLoginName[ACCOUNT_LOGIN_NAME_LEN]; 	/*  Ver.102  */
    int CltVer;                          	/*  Ver.186 客户端版本号 */
    char MacAdd[MAC_ADDR_LEN];            	/*  Ver.460  */
    int CltType;                         	/*  Ver.1220 客户端类型 Bind Macrosgroup:CLT_TYPE,*/
    int AuthFlag;                        	/*  Ver.1220 标志位 AUTH_FLAG_QUICK */
};

struct tagCSAccLoginRes
{
    short Result;                          	/*    Bind Macrosgroup:LoginResultGrp,*/
    unsigned short SvrProtoVer;                    
};

struct tagRoleInfo
{
    char Gender;                          	/*    Bind Macrosgroup:GENDER_TYPE,*/
    char Career;                          	/*    Bind Macrosgroup:CAREER_TYPE,*/
    unsigned char Head;                           
    unsigned char Face;                           
    tdr_ulonglong RoleID;                         
    char RoleName[ROLE_NAME_LEN];        
    ROLEAVATARPROF Avatar;                          	/*  Ver.8  */
    unsigned char Hair;                            	/*  Ver.10  */
    unsigned char Level;                           	/*  Ver.51  */
    int Map;                             	/*  Ver.97  */
    unsigned int LastLogin;                       	/*  Ver.126  */
    int DelTime;                         	/*  Ver.867  */
    unsigned char ShowFlag;                        	/*  Ver.878 时装勾选 */
};

struct tagCSRoleList
{
    CSTIME SvrTime;                         	/*  Ver.871  */
    unsigned int RoleNum;                        
    ROLEINFO RoleList[ROLE_MAX_NUM];         
};

struct tagCSRoleLoginReq
{
    tdr_ulonglong RoleID;                         
};

struct tagCSPworldInfo
{
    int LeftTime;                        	/*   地图所在副本的剩余时间，单位秒 */
    int PworldInstID;                    	/*  Ver.388 副本实例id */
    int SelectGrade;                     	/*  Ver.713 副本难度 */
    int StartTime;                       	/*  Ver.715 副本开启时间 */
};

struct tagCSEnterMap
{
    int Map;                            
    int RealMap;                         	/*  Ver.43  */
    int x;                              
    int y;                              
    int InitMoveSeq;                    
    int MapEndTime;                      	/*  Ver.1187 玩家能在此地图呆的时间(秒)|对应MapDef中EnterTime */
    short Effect;                         
    unsigned char Dir;                            
    unsigned char CameraDir;                       	/*  Ver.83  */
    unsigned char PworldInfoFlag;                  	/*  Ver.17 0 没有副本信息，1 有副本信息 */
    CSPWORLDINFO PworldInfo;                      	/*  Ver.17  */
    int Span;                            	/*  Ver.1768  Bind Macrosgroup:MAP_SPAN_TYPE,*/
};

struct tagCSSkillData
{
    unsigned short SkillID;                        
    unsigned char SkillLevel;                     
    int CollectNum;                      	/*   积累数 */
    int CollectNumMax;                   	/*   积累数上限 */
    unsigned int CoolLeft;                        	/*  Ver.28 剩余冷却，单位100ms */
    int SkillUseNum;                     	/*  Ver.334 技能使用次数|天赋 技能使用次数 触发BUFf */
    char RuneSlotEnabled;                 	/*  Ver.554 符文槽是否可用 */
    char RuneSlot;                        	/*  Ver.554 符文槽 Bind Macrosgroup:RUNE_TYPE,*/
    int RuneItemID;                      	/*  Ver.554 符文物品ID */
    int RuneNum;                         	/*  Ver.1188 符文镶嵌数 */
    RUNEINFO RuneInfo[RUNE_TYPE_NUM];         	/*  Ver.1188 符文技能ID和等级,包括未镶嵌 */
};

struct tagCSSkillList
{
    unsigned char SkillNum;                       
    unsigned char Res[3];                         
    CSSKILLDATA Skills[MAX_ROLE_SKILL];         
};

struct tagCSPkInfo
{
    int PkMode;                          	/*    Bind Macrosgroup:PK_MODE_TYPE,*/
    int PkVal;                          
    int PkTime;                          	/*  Ver.569 剩余灰名时间 */
};

struct tagCSRoleDetail
{
    char Gender;                         
    char Career;                         
    unsigned char Level;                          
    unsigned char Head;                           
    ROLETMPSYS TmpSys;                          	/*  Ver.26 临时系统系统 */
    CSPLAYERATTRVAL PlayerAttrVal;                  
    DIATHESISINFO DiathesisList;                   	/*  Ver.4  */
    CSSTATUSINFO StatusList;                      	/*  Ver.5 状态信息 */
    ROLEWEAR Wear;                            	/*  Ver.8 穿带的装备 */
    CSSKILLLIST SkillList;                      
    unsigned char Face;                           
    unsigned char Hair;                            	/*  Ver.10  */
    unsigned char ShowFlag;                        	/*  Ver.40  */
    unsigned char AutoFlyPath;                     	/*  Ver.42  */
    int State;                           	/*  Ver.49  */
    ROLERIDELIST RideList;                        	/*  Ver.49  */
    tdr_longlong RoleID;                          	/*  Ver.80  */
    CSPKINFO PkInfo;                          	/*  Ver.174  */
};

struct tagCSEnterWorld
{
    CSENTERMAP EnterMap;                       
    short MoveSpeed;                      
    char RoleDetailFlag;                 
    unsigned short ClintOptLen;                    
    char ClintOptContent[MAX_OPT_LEN];   
    CSROLEDETAIL RoleDetail;                     
    unsigned char SvrConfig;                       	/*  Ver.1653 服务器配置标记 */
};

struct tagCSRoleLoginRes
{
    short Result;                          	/*    Bind Macrosgroup:LoginResultGrp,*/
    short EnterFlag;                       	/*   login succ this flag is 1,otherwise 0 */
    int RoleMemID;                      
    CSENTERWORLD Enter;                          
    CSTIME BenchTime;                      
    short LoginFlag;                       	/*  Ver.272 1从db登陆,2从world到battle,3从battle到world */
    unsigned short WorldID;                         	/*  Ver.801 服id */
    char Perm;                            	/*  Ver.832 gm权限 */
    char CtrlFlag;                        	/*  Ver.1129  */
    unsigned char MaxLevel;                        	/*  Ver.1791 系统当前限制的最大等级 */
    char LevelFengChg;                    	/*  Ver.1820  */
    GLOBALLEVELFENG LevelFeng;                       	/*  Ver.1813  */
    int IP;                              	/*  Ver.1862  */
    int PingCheck;                       	/*  Ver.1862  */
};

struct tagCSRoleNewReq
{
    char Gender;                          	/*    Bind Macrosgroup:GENDER_TYPE,*/
    char Career;                          	/*    Bind Macrosgroup:CAREER_TYPE,*/
    unsigned char Head;                            	/*   头型 */
    unsigned char Face;                            	/*   脸型 */
    unsigned char Hair;                            	/*  Ver.10 发型 */
    unsigned char ApperalSelect;                   	/*  Ver.659 选择BirthItemDef表中填的第几件衣服,从0开始 */
    char RoleName[ROLE_NAME_LEN_CLT];    
};

struct tagCSRoleNewRes
{
    int Result;                          	/*    Bind Macrosgroup:RoleNewResultGrp,*/
    ROLEINFO RoleInfo;                       
};

struct tagCSRoleDelReq
{
    tdr_ulonglong RoleID;                         
};

struct tagCSRoleDelRes
{
    int Result;                          	/*    Bind Macrosgroup:RoleDelResultGrp,*/
    tdr_ulonglong RoleID;                         
};

struct tagCSHeartBeatReq
{
    CSTIME SvrTime;                        
};

struct tagCSBroadcastReq
{
    unsigned int Len;                            
    char Content[1];                     
};

struct tagCSBroadcastRes
{
    unsigned int Len;                            
    char Content[1];                     
};

struct tagCSRoleLogoutReq
{
    tdr_ulonglong RoleID;                         
};

struct tagCSAccLogoutReq
{
    int Uin;                            
    int LogoutFor;                       	/*  Ver.895  Bind Macrosgroup:LogoutForType,*/
};

struct tagCSAccLogoutRes
{
    int Result;                          	/*    Bind Macrosgroup:LogoutResultGrp,*/
    int Uin;                            
};

struct tagCSDirReq
{
    int LastVersion;                     	/*   客户端保存的目录信息的版本 */
};

struct tagCSDirWorldInfo
{
    char WorldName[WORLD_NAME_LEN];      
    char IP[48];                         
    int IP_Bak1;                         	/*  Ver.1595  */
    int IP_Bak2;                         	/*  Ver.1595  */
    unsigned short Port;                            	/*   网络字节序的接入Port */
    unsigned short WorldID;                        
    unsigned char BigWorldIdx;                    
    unsigned char StatFlag;                        	/*   高4位表示是否推荐，低4位是繁忙标志 */
    unsigned char RegionID;                        	/*  Ver.166 属于哪个大区 */
    char AuthIP[48];                      	/*  Ver.166 连接auth_svr IP */
    unsigned short AuthPort;                        	/*  Ver.166 连接auth_svr Port */
    int AuthIP_Bak1;                     	/*  Ver.1595  */
    int AuthIP_Bak2;                     	/*  Ver.1595  */
    unsigned short MudPort;                         	/*  Ver.207 mud_conn 网络字节序的接入Port */
    char MudIP[48];                       	/*  Ver.207 mud_conn 网络字节序的接入IP */
    int MudIP_Bak1;                      	/*  Ver.1595  */
    int MudIP_Bak2;                      	/*  Ver.1595  */
    unsigned char MudStatFlag;                     	/*  Ver.207 高4位表示是否推荐，低4位是繁忙标志 */
};

struct tagCSDirBigWorld
{
    char BigWorldName[WORLD_NAME_LEN];   
    char URL[REGION_UPDATA_URL_LEN];      	/*  Ver.103  */
    unsigned int StatFlag;                        	/*  Ver.543 位标志 */
};

struct tagCSDirWorldList
{
    int LastVersion;                     	/*   标识除了StatFlag外其他信息是否变化 */
    int BigWorldNum;                    
    CSDIRBIGWORLD BigWorldList[MAX_BIGWORLD_NUM]; 
    int WorldNum;                       
    CSDIRWORLDINFO ListInfoList[MAX_WORLD_NUM];    
};

struct tagCSDirLatestInfo
{
    unsigned short WorldID;                        
    unsigned char StatFlag;                        	/*   高4位表示是否推荐，低4位是繁忙标志 */
    char Res;                            
    char IP[48];                          	/*  Ver.45 网络字节序的接入IP */
    int IP_Bak1;                         	/*  Ver.1595  */
    int IP_Bak2;                         	/*  Ver.1595  */
    unsigned short Port;                            	/*  Ver.45 网络字节序的接入Port */
    unsigned char RegionID;                        	/*  Ver.166 属于哪个大区 */
    char AuthIP[48];                      	/*  Ver.166 连接auth_svr IP */
    int AuthIP_Bak1;                     	/*  Ver.1595  */
    int AuthIP_Bak2;                     	/*  Ver.1595  */
    unsigned short AuthPort;                        	/*  Ver.166 连接auth_svr Port */
    unsigned short MudPort;                         	/*  Ver.207 mud_conn 网络字节序的接入Port */
    char MudIP[48];                       	/*  Ver.207 mud_conn 网络字节序的接入IP */
    int MudIP_Bak1;                      	/*  Ver.1595  */
    int MudIP_Bak2;                      	/*  Ver.1595  */
    unsigned char MudStatFlag;                     	/*  Ver.207 高4位表示是否推荐，低4位是繁忙标志 */
};

struct tagCSDirLatest
{
    int WorldNum;                       
    CSDIRLATESTINFO LatestList[MAX_WORLD_NUM];      
};

struct tagCSDirErr
{
    char ErrMsg[DESC_LEN];               
};

union tagCSDirInfo
{
    CSDIRWORLDLIST WorldList;                       	/* DIR_SUCC,   */
    CSDIRLATEST DirLatest;                       	/* DIR_LATEST,   */
    CSDIRERR Err;                             	/* DIR_ERR,   */
};

struct tagCSDirRes
{
    int Result;                          	/*    Bind Macrosgroup:DirResultGrp,*/
    CSDIRINFO DirInfo;                        
};

struct tagSysMsgLinkPos
{
    int LinkFlag;                       
    int MapID;                          
    int X;                              
    int Y;                              
};

struct tagCSSysMsg
{
    char Type;                            	/*   消息类型 Bind Macrosgroup:SysMsgType,*/
    unsigned char Times;                           	/*   公告显示次数，0不限制 */
    unsigned char Interval;                        	/*   公告显示间隔 */
    unsigned short LinkLen;                         	/*  Ver.32  */
    unsigned char LinkContent[MAX_SYS_LINK];       	/*  Ver.32  */
    char Msg[SYS_MSG_LEN];               
};

struct tagCSPoint
{
    int x;                              
    int y;                              
};

struct tagCSWalk
{
    char Total;                          
    char Res[3];                         
    CSPOINT Points[CS_MAX_MOVEPOINTS];      
};

struct tagCSTurn
{
    unsigned char Dir;                            
};

union tagCSMoveData
{
    CSWALK Walk;                            	/* CS_MOVE_WALK,   */
    CSTURN Turn;                            	/* CS_MOVE_TURN,   */
};

struct tagCSMoveC
{
    int MoveSeq;                        
    int x;                              
    int y;                              
    CSTIME SvrTime;                        
    char Res[3];                         
    char MoveType;                        	/*    Bind Macrosgroup:CSMoveType,*/
    CSMOVEDATA Data;                           
};

struct tagCSelectBirthLocS
{
    int BirthMapNum;                    
    int MapIDList[MAX_BIRTH_MAP];       
    int Busy[MAX_BIRTH_MAP];             	/*  Ver.42  */
};

struct tagCSelectBirthLocC
{
    int MapID;                          
};

struct tagAdjustTime
{
    int BenchTimeMs;                    
};

struct tagCSMoveStop
{
    int MoveSeq;                        
    int x;                              
    int y;                              
    int BenchTimeMs;                    
    unsigned char Dir;                            
};

struct tagCSOneMspd
{
    unsigned short MoveSpd;                        
    unsigned short Res;                            
    CSTIME SvrTime;                         	/*   速度改变生效的时间 */
};

struct tagCSMspdInfo
{
    unsigned short MoveSpdCurr;                     	/*   当前速度 */
    unsigned char Res;                            
    unsigned char NextNum;                         	/*   0 没有下一个速度，1 有下一个速度 */
    CSONEMSPD MoveSpdNext;                    
};

struct tagCSMoveOther
{
    int ID;                             
    int x;                              
    int y;                              
    char Res[3];                         
    char MoveType;                        	/*    Bind Macrosgroup:CSMoveType,*/
    CSMOVEDATA Data;                           
    CSMSPDINFO MspdInfo;                        	/*  Ver.5  */
};

struct tagCSLock
{
    char LockType;                        	/*    Bind Macrosgroup:LOCK_TYPE,*/
    int LockVal;                        
    int SkillID;                        
};

struct tagCSPetView
{
    unsigned short PetID;                          
    tdr_ulonglong PetWID;                          	/*  Ver.120  */
    unsigned char XieDaiPos;                      
    unsigned char Level;                           	/*  Ver.110  */
    unsigned char HetiFlag;                        	/*  Ver.1155 合体标记|非零表示合体 */
    char PetName[PET_NAME_LEN_CLT];      
    unsigned int Power;                          
    unsigned int MaxPower;                       
    unsigned char StrengthenLevel;                 	/*  Ver.151 强化等级 */
    char Passive;                         	/*  Ver.248 宠物目前是否处于被动模式，0：主动模式；1：被动模式 */
    char DiathesisNum;                    	/*  Ver.248 宠物目前的素质总数 */
    CSPETDIATHESISVIEW Diathesis[MAX_PET_SKILL_GRID];   	/*  Ver.248 宠物目拥有的素质 */
    unsigned char GoodStatusNum;                   	/*  Ver.255  */
    unsigned char Res[3];                          	/*  Ver.255  */
    CSROLESTATUS GoodStatusList[MAX_PET_GOOD_STATUS]; 	/*  Ver.255  */
    int Genius;                          	/*  Ver.386 资质 */
    char Zhanchong;                       	/*  Ver.2196  */
    unsigned short GeniusSkillID;                   	/*  Ver.2338  */
    unsigned short GeniusSkillLvl;                  	/*  Ver.2338  */
};

struct tagCSRolePetView
{
    unsigned char PetNum;                         
    unsigned char Res[3];                          	/*  Ver.145  */
    CSPETVIEW PetView[PET_MAX_FIGHT_SHI];     
};

struct tagCSRoleFairyView
{
    unsigned int FairyID;                        
    unsigned int FairyLV;                        
};

struct tagCSRoleClanView
{
    unsigned char Position;                        	/*   公会职务 Bind Macrosgroup:CLAN_POSITION,*/
    char Name[NAME_LEN];                  	/*   公会名字 */
    tdr_ulonglong GID;                             	/*  Ver.182 公会ID,全局范围内有效 */
    int Group;                           	/*  Ver.1958  */
};

struct tagCSRoleRideView
{
    unsigned int OwnerID;                         	/*   骑乘拥有者ID */
    unsigned int PassengerNum;                    	/*   乘客数量 */
    unsigned int PassengerID[MAX_RIDE_PASSENGER]; 	/*   乘客列表 */
};

struct tagCSRoleMachineInfo
{
    unsigned int MachineID;                       	/*   机械MemID */
    unsigned int MachineDefIdx;                   	/*   怪物机械定义ID */
    unsigned int HP;                              	/*  Ver.562 机械血量 */
    unsigned int MaxHP;                           	/*  Ver.562 机械最大血量 */
};

/* 人物的吟唱信息 */
struct tagCSViewPrepareInfo
{
    int PrepareSec;                      	/*   吟唱了多少秒 */
    int PrepareUSec;                     	/*   吟唱了多少微秒 */
    unsigned short SkillID;                         	/*   技能id */
    unsigned char Level;                           	/*   技能等级 */
    RESPOS AtkPos;                          	/*   目标的位置 */
};

struct tagCSRoleItemView
{
    int PreItemID;                      
    int PreTargetID;                    
};

struct tagCSPlayer
{
    char Name[ROLE_NAME_LEN];            
    char Gender;                          	/*    Bind Macrosgroup:GENDER_TYPE,*/
    char Career;                          	/*    Bind Macrosgroup:CAREER_TYPE,*/
    short Res;                            
    int Stat;                            	/*  Ver.49  Bind Macrosgroup:CSState,*/
    CSSTATUSINFO StatusInfo;                      	/*  Ver.5  */
    ROLEAVATARPROF Avatar;                          	/*  Ver.8  */
    unsigned char Head;                           
    unsigned char Level;                          
    unsigned char Face;                           
    CSLOCK Lock;                            	/*  Ver.7  */
    unsigned char Hair;                            	/*  Ver.10  */
    char TeamName[ROLE_NAME_LEN];         	/*  Ver.13  */
    tdr_ulonglong TeamID;                          	/*  Ver.735 队伍唯一标识 */
    unsigned int TmpItem;                         	/*  Ver.27  */
    unsigned int HP;                              	/*  Ver.29  */
    unsigned int HPMax;                           	/*  Ver.29  */
    unsigned int MP;                              	/*  Ver.29  */
    unsigned int MPMax;                           	/*  Ver.29  */
    unsigned int RideItemID;                      	/*  Ver.49  */
    unsigned int RideLevel;                       	/*  Ver.132  */
    unsigned char AutoFlyPath;                     	/*  Ver.42  */
    CSROLEPETVIEW PetView;                         	/*  Ver.54  */
    CSROLECLANVIEW ClanView;                        	/*  Ver.89  */
    unsigned char ViewFlag;                        	/*  Ver.16  */
    unsigned char TeamNum;                         	/*  Ver.89  */
    char MiscName[ROLE_NAME_LEN];         	/*  Ver.116  */
    unsigned int DesignationID;                   	/*  Ver.129 当前使用的称号ID，0表示没有使用称号 */
    CSROLERIDEVIEW RideView;                        	/*  Ver.136 骑乘状态下乘客列表和骑乘主人信息 */
    CSROLEFAIRYVIEW FairyView;                       	/*  Ver.136  */
    CSPKINFO PkInfo;                          	/*  Ver.174  */
    unsigned char CampIdx;                         	/*  Ver.202  */
    int LogicArea;                       	/*  Ver.371  */
    int RoleTest;                        	/*  Ver.371 切磋对方memid */
    int QiecuoX;                         	/*  Ver.483 切磋旗子坐标 */
    int QiecuoY;                         	/*  Ver.483  */
    CSROLEMACHINEINFO MachineInfo;                     	/*  Ver.398  */
    unsigned char PrepareInfoFlag;                 	/*  Ver.476  */
    CSVIEWPREPAREINFO PrepareInfo;                     	/*  Ver.412  */
    int LeaveState;                      	/*  Ver.651  Bind Macrosgroup:LEAVE_CLT_STAT,*/
    MOTIONINFO MotionInfo;                      	/*  Ver.672 动作表情 */
    int SelectTargetID;                  	/*  Ver.773 目标 */
    CSROLEITEMVIEW ItemView;                        	/*  Ver.794 使用物品吟唱信息 */
    unsigned char ShowFlag;                        	/*  Ver.878 时装勾选 */
    tdr_ulonglong HetiPetID;                       	/*  Ver.1155 合体宠物WID */
    unsigned char ShamDead;                        	/*  Ver.1536  */
    CSDAOBA DaoBa;                           	/*  Ver.1906  */
    int VipFlag;                         	/*  Ver.1909  */
    int SpartaFightVal;                  	/*  Ver.2017  */
    int XuKongEnergy;                    	/*  Ver.2069  */
};

/* 图腾怪物pk模式的改变 */
struct tagCSMonPKModeChg
{
    int Index;                           	/*   怪物的索引 */
    int OwnerPKMode;                     	/*   所属类型MON_PK_TYPE_PLAYER 时此值才有效 */
    tdr_ulonglong OwnerClanID;                     	/*   所属类型MON_PK_TYPE_PLAYER 时此值才有效，工会id */
    int PKInfoType;                      	/*  Ver.1007 怪物PK信息，所属类型 Bind Macrosgroup:MON_PK_TYPE,*/
    tdr_ulonglong PkID;                            	/*  Ver.1007 所属ID */
};

struct tagCSMonFactoryInfo
{
    int BuildTime;                       	/*   建造时间，建造结束时间 */
    tdr_ulonglong ClanGID;                         	/*   工会id */
};

/* 怪物的吟唱攻击信息,SkillType=2时有用 */
struct tagCSMonPrepareAtkInfo
{
    int sec;                             	/*   吟唱攻击结束时秒 */
    int usec;                            	/*   吟唱攻击结束微秒 */
    unsigned short SkillID;                         	/*   技能id */
    unsigned char Level;                           	/*   技能等级 */
    RESPOS AtkPos;                          	/*   目标的位置 */
};

struct tagCSMonRongluinfo
{
    unsigned short Num;                             	/*   熔炉杀怪计数 */
    unsigned short Max;                             	/*   熔炉杀怪计数总数 */
};

struct tagCSMonLostTotem
{
    int Num;                            
    int Max;                            
};

struct tagCSMonster
{
    int Index;                          
    CSSTATUSINFO StatusInfo;                      	/*  Ver.5  */
    short Stat;                            	/*  Ver.2  Bind Macrosgroup:CSState,*/
    unsigned char BirthTimeLeft;                   	/*  Ver.25 出生剩余时间，单位秒 */
    unsigned char Level;                           	/*  Ver.56 怪物等级 */
    unsigned int HP;                             
    unsigned int HPMax;                          
    char OwnerName[ROLE_NAME_LEN_SAVE];   	/*  Ver.51  */
    unsigned int OwnerID;                         	/*  Ver.127 图腾地雷的拥有者 */
    tdr_ulonglong OwnerTeamID;                     	/*  Ver.188 队伍拥有WID */
    int LifeEndTime;                     	/*  Ver.221 存活剩余时间，单位秒, -1则无效 */
    unsigned char MonPkFlag;                       	/*  Ver.476  */
    CSMONPKMODECHG MonPkModeChg;                    	/*  Ver.306 图腾怪物的阵营信息 */
    unsigned char PrepareAtkFlag;                  	/*  Ver.340  */
    CSMONPREPAREATKINFO MonPrepareAtkInfo;               	/*  Ver.340  */
    int BootyOwner;                      	/*  Ver.347 战利品拥有者MemID */
    unsigned char MachineFlag;                     	/*  Ver.476 机械信息标记 */
    MONMACHINEINFO MachineInfo;                     	/*  Ver.398 机械信息 */
    int CampIdx;                         	/*  Ver.499 怪物的阵营信息 */
    int BootyOwnerType;                  	/*  Ver.758  Bind Macrosgroup:MON_BOOTY_OWNER_TYPE,*/
    tdr_longlong BootyOwnerWid;                   	/*  Ver.758 RollID 或者 TeamWid */
    int HitTargetID;                     	/*  Ver.758 攻击目标 */
    unsigned char FactoryFlag;                     	/*  Ver.904 资源工厂信息标记 */
    CSMONFACTORYINFO FactoryInfo;                     	/*  Ver.904 资源工厂信息 */
    char TopName[ROLE_NAME_LEN_SAVE];     	/*  Ver.1044 显示用的头顶名字 */
    int CityBuildFlag;                   	/*  Ver.1044 攻城城市建筑怪 */
    int PatrolID;                        	/*  Ver.1488  */
    VIEWBANNER BannerInfo;                      	/*  Ver.1593  */
    CSMONRONGLUINFO Rongluinfo;                      	/*  Ver.1748  */
    CSMONLOSTTOTEM LostToteminfo;                   	/*  Ver.2141  */
};

struct tagCSNpc
{
    int Index;                          
    int PatrolID;                        	/*  Ver.492  */
    int CampIdx;                         	/*  Ver.499 NPC的阵营信息 */
    int NpcPkFlag;                       	/*  Ver.1105  */
    CSMONPKMODECHG PKModeChg;                       	/*  Ver.1105 Npc的pk模式 */
};

struct tagCSDropItem
{
    int Index;                          
    unsigned char Flag;                            	/*  Ver.31  */
    unsigned char Res[3];                          	/*  Ver.229  */
    int FromID;                          	/*  Ver.229  */
    char OwnerName[ROLE_NAME_LEN_SAVE];   	/*  Ver.242  */
    int TmpEnerge;                       	/*  Ver.337 如果是临时机械 这个值是负数的时候 要冒烟效果 */
    tdr_ulonglong RoleID;                          	/*  Ver.338 所有者RoleID */
    unsigned char DropType;                        	/*  Ver.338 掉落方式 Bind Macrosgroup:VIEW_DROP_TYPE,*/
    int PickLimitTime;                   	/*  Ver.389 拾取限制时间，限制时间内只有所有者可以拾取 */
    int ItemNum;                         	/*  Ver.413 掉落物品数量或掉落金钱的数量 */
    int Roll;                            	/*  Ver.583 是否需要Roll点。超过PickLimitTime限制时间则不需要显示Roll点 Bind Macrosgroup:ITEM_ROLL_STAT,*/
    int CollectTime;                     	/*  Ver.623 采集类道具的拾取时间，单位秒 */
    tdr_ulonglong TeamID;                          	/*  Ver.758 所有者Team 唯一ID */
    int DropItemType;                    	/*  Ver.1215  Bind Macrosgroup:DROP_ITEM_TYPE,*/
    unsigned char ShowFlag;                        	/*  Ver.1219 客户端物品掉落动画表现形式（0延迟播放；1立即播放） */
    int ArmStar;                         	/*  Ver.1310  */
    tdr_ulonglong ClanGID;                         	/*  Ver.1932 所有者公会 唯一ID */
};

union tagCSObject
{
    int Unknow;                          	/* OBJ_UNKNOW,   */
    CSPLAYER Player;                          	/* OBJ_PLAYER,   */
    CSMONSTER Monster;                         	/* OBJ_MONSTER,   */
    CSMONSTER Npc;                             	/* OBJ_NPC,   */
    CSDROPITEM Item;                            	/* OBJ_ITEM,   */
};

struct tagCSEnterView
{
    int ID;                             
    int x;                              
    int y;                              
    char Res[2];                         
    unsigned char Dir;                            
    unsigned char Type;                            	/*    Bind Macrosgroup:ObjType,*/
    CSOBJECT Object;                         
};

struct tagHomeData
{
    RESPOS Pos;                            
    unsigned short Speed;                          
};

struct tagCSLeaveView
{
    int ID;                             
    unsigned char HomeFlag;                        	/*  Ver.11  */
    HOMEDATA HomeData;                        	/*  Ver.11  */
};

struct tagCSActionCmdRet
{
    char CmdType;                         	/*   客户端执行指令后返回 Bind Macrosgroup:CLIENT_CMD_TYPE,*/
    char CmdRet;                         
};

struct tagCSActionTakeDailyGoalAward
{
    int TakeAward;                       	/*   领取奖励的阶段,最左边为1,后面递加1 */
};

struct tagCSRuneItem
{
    char ListType;                        	/*   哪个包 */
    unsigned char Res1[3];                        
    unsigned short GridIdx;                         	/*   哪个位置 */
    unsigned char Res2[2];                        
    tdr_ulonglong WID;                             	/*   物品唯一ID */
};

struct tagCSActionRuneLevelUp
{
    CSRUNEITEM LevelUpItem;                     	/*   符文升级道具 */
    CSRUNEITEM RuneItem[MAX_RUNE_STUFF_NUM];    	/*   符文 */
};

struct tagCSActionResetRuneEx
{
    int RuneType;                        	/*   RUNE_TYPE符文类型 1红 2蓝 3绿 */
    int OpType;                          	/*   操作类型 0 普通重置 1金卷重置 2保存 Bind Macrosgroup:RUNE_RESET_OP_TYPE,*/
};

struct tagCSActionRunneSkillChg
{
    int RuneType;                        	/*   符文颜色 Bind Macrosgroup:RUNE_TYPE,*/
    int SkillID;                         	/*  Ver.1190 技能ID */
};

union tagCSActionDataC
{
    unsigned char StandDir;                        	/* ACTION_STAND,   */
    unsigned char RunDir;                          	/* ACTION_RUN,   */
    unsigned char SitDir;                          	/* ACTION_SIT,   */
    CSACTIONCMDRET CmdRet;                          	/* ACTION_CMD_RET,   */
    CSACTIONTAKEDAILYGOALAWARD TakeDailyGoalAward;              	/* ACTION_TAKE_DAILY_GOAL_AWARD,   */
    CSACTIONRUNELEVELUP RuneLevelUp;                     	/* ACTION_RUNE_LEVEL_UP, Ver.1165  */
    CSACTIONRESETRUNEEX ResetRuneEx;                     	/* ACTION_RESET_RUNE_EX, Ver.1165  */
    CSACTIONRUNNESKILLCHG RunneSkillChg;                   	/* ACTION_RUNNE_SKILL_CHG, Ver.1188  */
};

struct tagCSActionReq
{
    char ActionID;                        	/*    Bind Macrosgroup:ActionTypeC,*/
    char Res[3];                         
    CSACTIONDATAC Data;                           
};

struct tagCSHeti
{
    tdr_ulonglong PetID;                           	/*   替身宠物WID */
    int Flag;                            	/*  Ver.1156 0-开始合体 非0结束合体 */
    int PetGenius;                       	/*  Ver.1594 资质 */
    char Zhanchong;                       	/*  Ver.2196  */
};

struct tagCSTest
{
    char Flag;                            	/*   0进入 1离开  */
    char Victory;                         	/*  Ver.423 0-失败 1-胜利   当flag为1是 此字段有效 */
};

struct tagCSLogicArea
{
    char Flag;                            	/*   0进入 1离开  */
    char Type;                           
};

struct tagCSActionFly
{
    char Type;                            	/*   0起飞 1降落  */
};

struct tagCSActionSkillLearn
{
    char Type;                            	/*    Bind Macrosgroup:LEARN_TYPE,*/
    int ID;                             
    int Level;                          
};

struct tagCSActionState
{
    int x;                              
    int y;                              
    short State;                          
    unsigned char Dir;                            
};

struct tagCSActionDead
{
    int x;                              
    int y;                              
};

struct tagCSActionDestroy
{
    int x;                              
    int y;                              
};

struct tagCSActionRevive
{
    int x;                              
    int y;                              
    unsigned int HP;                             
};

struct tagCSHurt
{
    char HurtType;                        	/*    Bind Macrosgroup:HURT_TYPE,*/
    unsigned char Res[3];                         
    int Value;                          
};

struct tagCSDoBack
{
    RESPOS Pos;                             	/*   震退后的位置 */
};

struct tagCSOneHit
{
    int ID;                             
    unsigned int HP;                             
    unsigned char TotalHurt;                      
    unsigned char DeadFlag;                        	/*  Ver.19  */
    unsigned char StatusFlag;                      	/*  Ver.19  */
    unsigned char HitBackFlag;                     	/*  Ver.19  */
    unsigned char TiShenFlag;                      	/*  Ver.1155 非0表示替身|ID为宠物时有效 */
    unsigned char Res[3];                         
    CSHURT Hurts[MAX_HURT];                
    CSSTATUSINFO Status;                          	/*  Ver.19  */
    CSDOBACK HitBack;                         	/*  Ver.19  */
};

struct tagCSHits
{
    unsigned short SkillID;                        
    unsigned char Level;                           	/*  Ver.18  */
    unsigned char SelfDead;                        	/*  Ver.19  */
    RESPOS AtkPos;                          	/*  Ver.19  */
    unsigned short DirFace;                         	/*  Ver.557 怪物面向攻击点的朝向偏移,用来做背击 */
    int SkillSeq;                        	/*  Ver.19  */
    unsigned char Res[2];                         
    unsigned char SelfPosChgFlag;                  	/*  Ver.24  */
    unsigned char TotalHit;                       
    RESPOS SelfPosChg;                      	/*  Ver.24  */
    CSONEHIT Hits[MAX_SKILL_TARGET];         
    unsigned int Flags;                           	/*  Ver.493 标志 */
    unsigned short RuneTransferedID;                	/*  Ver.554 被符文转换后的技能ID */
    int RealMemID;                       	/*  Ver.595 实际释放这个技能的对象(用于怪物机械释放技能) */
    int FromID;                          	/*  Ver.596  */
    RESPOS FromPos;                         	/*  Ver.936  */
};

struct tagCSBallisticAtk
{
    unsigned short SkillID;                        
    unsigned char Level;                          
    RESPOS AtkPos;                         
    int SkillSeq;                       
    int SelfPosChgFlag;                 
    RESPOS SelfPosChg;                     
    unsigned short RuneTransferedID;                	/*   被符文转换后的技能ID */
    int TargetNum;                      
    int TargetIDs[MAX_SKILL_TARGET];    
};

struct tagCSUIInfo
{
    short UIType;                          	/*    Bind Macrosgroup:UI_TYPE,*/
};

struct tagCSPakEnlarge
{
    unsigned char ListType;                        	/*    Bind Macrosgroup:LIST_TYPE,*/
    unsigned short Num;                            
};

struct tagCSTeamAction
{
    unsigned char Type;                            	/*   0 进入队伍 1 退出队伍 */
    char TeamName[NAME_LEN];             
    unsigned char Captain;                         	/*  Ver.16  */
    unsigned char TeamNum;                         	/*  Ver.89  */
    tdr_ulonglong TeamID;                          	/*  Ver.714 队伍唯一标识 */
    unsigned char Res[3];                         
};

struct tagCSUseItem
{
    unsigned int ItemID;                         
};

struct tagCSEffect
{
    char EffectStr[SHORT_DESC_LEN];      
};

struct tagCSTaskAction
{
    unsigned short TaskID;                         
    unsigned short TaskStat;                       
};

struct tagCSAutoFly
{
    unsigned char AutoPathIdx;                    
};

struct tagCSCollectAction
{
    int MonID;                          
    int MonCurrHP;                      
    unsigned char Flag;                            	/*   0 开始采集，1 结束采集 */
};

struct tagCSActionQianXin
{
    unsigned char Flag;                            	/*   1 进入隐身状态 0 清除隐身状态 */
};

struct tagCSActionRide
{
    unsigned int RideItemID;                      	/*   骑乘道具ID */
    unsigned int RideLevel;                       	/*  Ver.132 骑乘道具等级 */
    unsigned char RideFlag;                        	/*   1 骑乘上马 0 下马 2表示是打断吟唱 */
};

struct tagCSActionRideLearn
{
    unsigned int RideItemID;                      	/*   学习骑乘道具ID */
    unsigned int RideLevel;                       	/*  Ver.132 骑乘道具等级 */
};

struct tagCSActionRidePre
{
    unsigned int RideItemID;                      	/*   骑乘吟唱广播 */
    unsigned int RideLevel;                       	/*  Ver.132 骑乘道具等级 */
};

struct tagCSActionQiYue
{
    unsigned int QiYueID;                         	/*   设置契约ID */
};

struct tagCSActionStall
{
    unsigned int Flag;                            	/*   0--摆摊   1---收摊 */
    char StallName[STALL_MAX_NAME_LEN];  
    unsigned char InView;                          	/*  Ver.1668 0--不在服务器视野   1---在服务器视野 */
};

struct tagCSActionSit
{
    unsigned int Flag;                            	/*   0--普通打坐   1---高级打坐 2---结束打坐 */
};

struct tagCSHPChg
{
    int ChgHP;                           	/*   每次变化的血，小于0表示debuff减少的血，大于0表示buff增加的血 */
    unsigned int CurrHP;                          	/*   当前血量 */
    unsigned int CurrMaxHP;                       	/*  Ver.145 当前血量上限 */
    int ChgMP;                           	/*  Ver.172 每次变化的MP，小于0表示debuff减少的MP，大于0表示buff增加的MP */
    unsigned int CurrMP;                          	/*  Ver.172 当前MP */
    unsigned int CurrMaxMP;                       	/*  Ver.172 当前MP上限 */
    unsigned int ApplyID;                         	/*  Ver.209 施加这个效果的角色MEMID */
};

struct tagCSClanCityUpgrade
{
    CLANCITY CurrCity;                        	/*   当前公会城市状态 */
    CLANPROF CurrClan;                        	/*   当前公会状态 */
};

struct tagCSClanCityBuildingUpgrade
{
    CLANCITY CurrCity;                        	/*   当前公会城市状态 */
    CLANPROF CurrClan;                        	/*   当前公会状态 */
    int BuildingID;                      	/*   当前公会城市建筑ID */
};

union tagClanExtraUIData
{
    CSCLANCITYUPGRADE CurrCityInfo;                    	/* UI_TYPE_UPGRADE_CLAN_CITY,  升级城市需要的信息 */
    CSCLANCITYBUILDINGUPGRADE CurrBuildingInfo;                	/* UI_TYPE_UPGRADE_CLAN_CITY_BUILDING, Ver.124 升级建筑需要的信息 */
    CLANPROF CurrClanInfo;                    	/* UI_TYPE_UPGRADE_CLAN,  当前公会状态 */
};

struct tagCSClanExtraUI
{
    char UIType;                          	/*   UI类型 Bind Macrosgroup:UI_TYPE,*/
    CLANEXTRAUIDATA Data;                           
};

struct tagCSDesignationChg
{
    unsigned int DesignationID;                   	/*   称号ID，0表示没有使用称号 */
};

struct tagCSActionFight
{
    unsigned char FightStatus;                     	/*   0--退出战斗  1--进入战斗 */
};

struct tagCSRideOnInfo
{
    unsigned int OwnerID;                         	/*   骑乘拥有者ID */
    unsigned short RideID;                          	/*  Ver.136 骑乘物ID */
    unsigned short RideLevel;                       	/*  Ver.136 骑乘物等级 */
    unsigned int PassengerNum;                    	/*   乘客数量 */
    unsigned int PassengerID[MAX_RIDE_PASSENGER]; 	/*   乘客列表 */
    RESPOS Pos;                             	/*   上马后的坐标 */
};

struct tagCSRoleFairyAction
{
    char Flag;                            	/*   0--出征  1--收回 */
    unsigned int ID;                             
    unsigned int LV;                             
};

struct tagCSPKModeChg
{
    int Mode;                            	/*    Bind Macrosgroup:PK_MODE_TYPE,*/
};

struct tagCSPKValChg
{
    int PKVal;                          
};

struct tagCSActionObjEnterMap
{
    int DefID;                          
    int x;                              
    int y;                              
    unsigned char Type;                            	/*    Bind Macrosgroup:ObjType,*/
    char Res[3];                         
};

struct tagCSActionObjLeaveMap
{
    int DefID;                          
    unsigned char Type;                            	/*    Bind Macrosgroup:ObjType,*/
    char Res[3];                         
};

struct tagCSActionMonLife
{
    int LifeEndTime;                     	/*   生存剩余 时间 ，单位 秒 ，-1 无效 */
};

struct tagCSActionGetXp
{
    int ObjType;                         	/*   目标类型 */
    int ID;                              	/*   目标ID   |红魂从这个目标飞到角色 */
    int Xp;                              	/*   Xp值 */
};

struct tagCSActionCareerChg
{
    char Career;                          	/*   转职后的职业类型 */
    COLLECTSKILLINFO CollectSkillInfo;                	/*   积累数技能信息 */
};

struct tagCSActionTmpEnergeMax
{
    unsigned short TmpEnergeMax;                    	/*   临时机械的最大能量槽上限 */
};

struct tagCSActionBlockMskPoint
{
    RESPOS Point;                           	/*   半动态阻挡的建议点 */
};

struct tagCSActionMonBootyFirst
{
    int MemID;                           	/*   所有者ID(队伍或者个人) */
    int BootyOwnerType;                  	/*  Ver.755  Bind Macrosgroup:MON_BOOTY_OWNER_TYPE,*/
    tdr_longlong BootyOwnerWid;                   	/*  Ver.755 RollID 或者 TeamWid */
};

struct tagCSActionRideOnMachine
{
    int MachineID;                       	/*   怪物机械MemID */
    int MachineDefID;                    	/*   怪物机械定义ID */
    RESPOS RolePos;                         	/*   上车后的位置 */
    int SeatIdx;                         	/*  Ver.516 座位 */
};

struct tagCSActionLeaveMachine
{
    RESPOS RolePos;                         	/*   下车后的位置 */
};

struct tagCSActionMachineAttrChg
{
    int AttrType;                        	/*   改变的属性 */
    int CurrVal;                         	/*   当前值 */
};

struct tagCSActionCloseDialog
{
    int Type;                            	/*   0 关闭角色与NPC对话时打开的物品提交对话框,1 关闭NPC 对话面板 */
};

struct tagCSActionPetCampaignPre
{
    tdr_longlong PetID;                           	/*   召唤的宠物ID */
};

struct tagMachinePassengerUIInfo
{
    int PassengerID;                    
    unsigned char Level;                          
    unsigned char Career;                         
    unsigned char Head;                           
    unsigned char Hair;                           
    unsigned char Face;                           
    unsigned char Gender;                         
    char RoleName[NAME_LEN];             
    char ClanName[NAME_LEN];             
};

struct tagCSActionMachinePassengerInfo
{
    int MaxPassenger;                    	/*   最大携带乘客数量 */
    MACHINEPASSENGERUIINFO Passengers[MAX_MON_MACHINE_PASSENGER]; 	/*  Ver.747 乘客 信息 */
};

struct tagCSActionBeginLeaveMap
{
    int LeaveMap;                       
};

struct tagCSActionPKTime
{
    int PkTime;                          	/*   剩余灰名时间 */
};

struct tagCSActionDropItemUpdate
{
    int PickLimitTime;                   	/*   剩余限制时间 */
    int OwnerRoleID;                     	/*   所有者 */
    int Roll;                            	/*   roll状态 Bind Macrosgroup:ITEM_ROLL_STAT,*/
};

struct tagCSActionTmpItem
{
    int TmpItemID;                       	/*   临时道具id */
    int OperType;                        	/*   相关位操作,1表示临时机械有路径 */
    int MemIndex;                        	/*  Ver.1048 内存id */
};

struct tagCSActionClanItem
{
    int ClanItemID;                      	/*   工会道具id 0表示清理掉道具技能栏 */
};

struct tagCSActionPrepareAddByHit
{
    unsigned short SkillID;                         	/*   技能id */
    unsigned short Level;                           	/*   技能等级 */
    tdr_ulonglong PrepareTimeUse;                  	/*   吟唱已经读了多少毫秒 */
    CSTIME SvrTime;                        
};

struct tagCSActionLeaveState
{
    int LeaveState;                      	/*    Bind Macrosgroup:LEAVE_CLT_STAT,*/
};

struct tagCSActionMotion
{
    int MotionID;                        	/*   动作表情ID, 为0则打断当前动作 */
    int TargetID;                       
};

struct tagCSActionTarget
{
    int TargetID;                       
};

struct tagCSActionUseItemPre
{
    int ItemID;                         
    int TargetID;                       
    char ListType;                        	/*    Bind Macrosgroup:LIST_TYPE,*/
    unsigned short GridIdx;                        
};

struct tagCSActionCatchPet
{
    int TargetID;                       
    int Succ;                           
};

struct tagCSActionMachineItemLockInfo
{
    tdr_ulonglong LockItemWid;                     	/*   锁定的物品WID */
};

struct tagCSActionMachineLeavePre
{
    int MachineID;                       	/*   怪物机械memid */
};

struct tagCSActionMachineLeaveBrk
{
    int MachineID;                       	/*   怪物机械memid */
};

struct tagCSAutoMoveData
{
    int MapID;                           	/*   地图id */
    int X;                               	/*   坐标X */
    int Y;                               	/*   坐标Y */
    int Stop;                            	/*  Ver.945 到了终点停止,0否,1是 */
};

union tagCSActionClientCmdData
{
    int SnapShoot;                       	/* CLIENT_CMD_SNAPSHOOT,  占位,无实际用处 */
    CSAUTOMOVEDATA AutoMove;                        	/* CLIENT_CMD_AUTO_MOVE,   */
};

struct tagCSActionClientCmd
{
    int CmdType;                         	/*   指令类型 Bind Macrosgroup:CLIENT_CMD_TYPE,*/
    CSACTIONCLIENTCMDDATA CmdData;                         	/*  Ver.941 指令带的数据 */
};

struct tagCSActionFakeStatus
{
    int ID;                              	/*   状态ID */
    int Level;                           	/*   等级 */
    int OpType;                          	/*   操作类型,0删除,1添加,2更新 Bind Macrosgroup:FAKE_STATUS_OP_TYPE,*/
    int DynValueNum;                     	/*  Ver.1140 动态效果值数量 */
    int DynValue[MAX_FAKE_STATUS_DYN_VALUE]; 	/*  Ver.1140 动态效果值 */
};

struct tagCSActionBattleLimitTime
{
    int BeginTime;                       	/*   周期开始时间 */
    int Num;                             	/*   周期内进入次数 */
    int MaxNum;                          	/*   周期内最多进入次数 */
};

struct tagCSActionMapPos
{
    char Name[NAME_LEN];                  	/*   名称 */
    RESPOS Pos;                             	/*   位置 */
    int ShowType;                        	/*   显示类型,1显示(包括位置更新),0消失(Name[0]可能为0) */
};

struct tagCSActionFenJiePre
{
    int PreFlag;                         	/*   1 吟唱 0 打断 */
    int Type;                            	/*   0-装备  1-宝石 */
    ARMDETAILDATA ArmData;                         	/*  Ver.1101 装备信息（位置及wId） */
};

struct tagCSActionFenJie
{
    int Succ;                            	/*   1 成功 0 失败，无论成功失败这次分解吟唱都应该结束 */
    int Type;                            	/*  Ver.1131 0-装备 1-宝石2-提炼 */
    int GridIdx;                         	/*  Ver.1889 杂物包第几个格子 Type为2有效 */
};

struct tagCSActionClanCityUpdate
{
    int ClanID;                          	/*   公会id */
    CLANCITY ClanCity;                        	/*   城市信息 */
    int PlayerClanID;                    	/*  Ver.1524 玩家自己的公会id */
};

struct tagCSActionDailyGoalInfo
{
    int MinLevel;                        	/*   当天角色最小等级 */
    int TaskNum;                         	/*   今日目标任务完成数 */
    int TakeAwardFlag;                   	/*   领取的阶段奖励标志位 */
};

struct tagCSActionDynActiveInfo
{
    int ActiveHelpID;                    	/*   活动助手表中的ID */
    int Stauts;                          	/*   状态,0未开启,1进行中,2结束了 Bind Macrosgroup:ACTIVE_STATUS_TYPE,*/
};

struct tagCSRecastInfo
{
    char Succ;                            	/*   装备重铸是否成功 */
    RECASTINFO RecastInfo;                     
};

struct tagCSActionResetRuneExRes
{
    int RuneType;                        	/*   RUNE_TYPE符文类型 1红 2蓝 3绿 */
    int RuneExID;                        	/*   重置获得的属性ID */
};

struct tagCSActionRuneExEnableInfo
{
    RUNEEXENABLEINFO RuneExEnableInfo[MAX_RUNE_EX];   	/*   符文额外属性激活信息 */
};

struct tagCSActionDoRuneEx
{
    int RuneExID;                       
};

struct tagCSActionArmStar
{
    int Succ;                            	/*   0 失败 1成功 */
    int Star;                            	/*   第几星的成功信息 */
    int MulIdx;                          	/*   提升比率的列索引，表ArmStarDef */
};

struct tagCSActionAccDeQuick
{
    int Result;                          	/*   结果 0成功 其他失败 */
};

struct tagCSActionAchievementNew
{
    int AchievementID;                   	/*   新完成的id */
};

struct tagCSActionAchievementList
{
    int Num;                             	/*   数量 */
    int AchievementID[MAX_ACHIEVEMENT];  	/*   已完成的id */
};

struct tagCSActionArmWash
{
    int Succ;                            	/*   0 失败 1成功 */
    unsigned char AddAttrNum;                     
    ADDATTRINST AddAttr[MAX_ARM_ADD_ATTR];      
    unsigned char WashAttrNum;                    
    ADDATTRINST WashAddAttr[MAX_ARM_WASH_ADD_ATTR];
};

struct tagCSActionYesterdayInfo
{
    int ClanEveryDayPworldScore;         	/*   昨日驱逐活动提交50分的次数 */
};

struct tagCSActionCountDown
{
    int Sec;                             	/*   倒计时秒数 */
    char Title[32];                       	/*   倒计时标题,用来区分倒计时 */
};

struct tagCSActionViewFlagChg
{
    int ViewFlag;                        	/*   显示相关的标记信息 */
};

struct tagCSActionDailyBull
{
    int Bull;                            	/*   每日使用的绑银 */
};

struct tagCSActionRunneSkillChgRet
{
    int SkillID;                         	/*   技能ID */
    int RuneType;                        	/*   符文颜色 Bind Macrosgroup:RUNE_TYPE,*/
};

struct tagCSActionClanMachinePworld
{
    int WaveNum;                         	/*   普通波次 */
    int WaveTimer;                       	/*   普通波次倒计时,单位秒 */
    int RaiderTimer;                     	/*   奇袭倒计时 */
    int Flag;                            	/*  Ver.1966 标识：副本结束标识[1] */
    unsigned int PworldDefId;                     	/*  Ver.2099 副本id */
};

struct tagCSActionShamDead
{
    int Dead;                            	/*   1 死了，0跳起来了 */
};

struct tagCSActionColorFontLimit
{
    int ColorFontEnd;                    	/*   彩色字体到期时间 */
};

struct tagCSActionMotionLimit
{
    int MotionEnd;                       	/*   新增动作表情到期时间 */
};

struct tagCSActionCowFinalRange
{
    int OpType;                          	/*   操作类型|0打开ui 1更新信息 */
    COWFINALRANGE CowFinalRange;                   	/*   排行榜信息 */
};

struct tagCSHangHaiRange
{
    int OpType;                          	/*   操作类型|0打开ui 1更新信息 */
    HANGHAIRANGE HangHaiRange;                    	/*   排行榜信息 */
};

struct tagCSActionClanDonateLog
{
    CLANDONATELOGENTRY ClanDonateLogEntry;              	/*   公会捐献日志 */
};

struct tagCSActionClanSkillInfo
{
    CLANSKILLINFO ClanSkillInfo;                   	/*   公会技能信息 */
};

struct tagCSActionPlayerClanSkillInfo
{
    PLAYERCLANSKILLINFO ClanSkillInfo;                   	/*   玩家身上公会技能信息 */
};

struct tagCSActionArmLevelUP
{
    int Succ;                            	/*   升级成功标记 */
    tdr_ulonglong NextWID;                         	/*   升级成功后获得的装备WID */
};

struct tagActionLevelFeng
{
    GLOBALLEVELFENG LevelFeng;                      
    int LevelFengChg;                    	/*  Ver.1820 是否有封印等级变化 */
};

struct tagActionWorshipEggify
{
    int Flower;                         
};

struct tagActionBeachInfo
{
    int Sec;                            
};

struct tagActionVipInfo
{
    int VipFlag;                        
};

struct tagActionBeachBuff
{
    int In;                             
    int BuffSec;                        
};

struct tagActionXuKongEnergy
{
    int EnergyStat;                     
};

struct tagCSActionClanWarAwardInfo
{
    CLANWARAWARDINFO AwardInfo;                       	/*   跨服战奖励信息 */
};

/* 地图上显示怪物阵营 */
struct tagMapShowMonCamp
{
    int CampID;                          	/*   阵营id */
    int MonsterID;                       	/*   怪物DefID */
    int HP;                              	/*   血量 */
};

union tagCSMapShowData
{
    MAPSHOWMONCAMP MapShowMonCamp;                  	/* MAP_SHOW_DATA_MON_CAMP,  地图上显示怪物阵营 */
};

struct tagCSActionMapShow
{
    int OpType;                          	/*   操作类型|2变更，1进入，0离开 Bind Macrosgroup:MAP_SHOW_OP_TYPE,*/
    int MemID;                           	/*   memory id */
    RESPOS Pos;                             	/*   坐标 */
    int MapID;                           	/*  Ver.2195 地图id */
    int DataType;                        	/*   地图显示类型 Bind Macrosgroup:MAP_SHOW_DATA_TYPE,*/
    CSMAPSHOWDATA Data;                           
};

struct tagCSActionClanBattleApplyInfo
{
    int BattleID;                        	/*   公会已开启的BattleID|0表示关闭 */
    int OpType;                          	/*  Ver.2176 0表示关闭|1表示开启 */
};

/* 短信验证码操作对应信息 */
union tagActionPrecreateGiftVerifyData
{
    char Open;                            	/* ACTION_PRECREATE_GIFT_VERIFY_OP_OPEN,  打开ui|占位 */
    int NewSN;                           	/* ACTION_PRECREATE_GIFT_VERIFY_OP_SN,  新短信验证码序号 */
    int Result;                          	/* ACTION_PRECREATE_GIFT_VERIFY_OP_RESULT,  认证结果 Bind Macrosgroup:PRECREATE_GIFT_VERIFY_RESULT,*/
};

/* 短信验证码操作对应信息 */
struct tagCSActionPrecreateGiftVerify
{
    int OpType;                          	/*   操作类型 Bind Macrosgroup:ACTION_PRECREATE_GIFT_VERIFY_OP,*/
    ACTIONPRECREATEGIFTVERIFYDATA Data;                            	/*   短信验证码操作对应信息 */
};

/* 结婚系统相关称号操作 */
struct tagCSActionWeddingDsn
{
    char MiscName[STALL_MAX_NAME_LEN];   
    int ShowFlag;                        	/*  Ver.2411 0表示不显示，1表示显示 */
};

/* 造型变更 */
struct tagCSActionSculptChg
{
    unsigned char Head;                            	/*   发色 */
    unsigned char Face;                            	/*   脸型 */
    unsigned char Hair;                            	/*   发型 */
};

union tagCSActionDataS
{
    CSACTIONSTATE Stat;                            	/* ACTION_STATE,   */
    CSACTIONDEAD Dead;                            	/* ACTION_DEAD,   */
    CSACTIONREVIVE Revive;                          	/* ACTION_REVIVE,   */
    CSHITS Hit;                             	/* ACTION_HIT,   */
    CSDOBACK DoBack;                          	/* ACTION_DOBACK_BAK,   */
    CSSTATUSINFO Status;                          	/* ACTION_STATUS, Ver.5  */
    CSMSPDINFO MspdChg;                         	/* ACTION_MSPD_CHG, Ver.5  */
    CSUIINFO UI;                              	/* ACTION_UI, Ver.6  */
    int TmpPackTime;                     	/* ACTION_TMP_PAK_TIME, Ver.6  */
    CSPAKENLARGE PakEnlarge;                      	/* ACTION_PAK_ENLARGE, Ver.6  */
    CSLOCK Lock;                            	/* ACTION_LOCK, Ver.7  */
    ROLEAVATARPROF Avatar;                          	/* ACTION_AVATAR, Ver.8  */
    AMMMAP Amm;                             	/* ACTION_AMM, Ver.8  */
    CSTEAMACTION Team;                            	/* ACTION_TEAM, Ver.13  */
    unsigned char Level;                           	/* ACTION_LEVEL, Ver.22  */
    CSACTIONTMPITEM TmpItem;                         	/* ACTION_TMP, Ver.619  */
    CSUSEITEM UseItem;                         	/* ACTION_USE_ITEM, Ver.30  */
    CSEFFECT Effect;                          	/* ACTION_EFFECT, Ver.38  */
    CSTASKACTION Task;                            	/* ACTION_TASK, Ver.40  */
    CSAUTOFLY AutoFly;                         	/* ACTION_AUTOFLY, Ver.42  */
    CSCOLLECTACTION Collect;                         	/* ACTION_COLLECT, Ver.44  */
    CSACTIONSKILLLEARN SkillLearn;                      	/* ACTION_SKILL_LEARN, Ver.47  */
    CSACTIONQIANXIN QianXin;                         	/* ACTION_QIANXIN, Ver.48  */
    CSACTIONFLY Fly;                             	/* ACTION_FLY, Ver.48  */
    CSACTIONRIDE Ride;                            	/* ACTION_RIDE, Ver.49  */
    CSACTIONRIDELEARN RideLearn;                       	/* ACTION_RIDE_LEARN, Ver.49  */
    CSACTIONRIDEPRE RidePre;                         	/* ACTION_RIDE_PRE, Ver.54  */
    CSROLEPETVIEW PetView;                         	/* ACTION_PET_VIEW, Ver.141  */
    CSACTIONQIYUE QiYue;                           	/* ACTION_QIYUE, Ver.67  */
    CSACTIONSTALL Stall;                           	/* ACTION_STALL, Ver.76  */
    CSACTIONSIT Sit;                             	/* ACTION_SIT_DOWN, Ver.83  */
    CSROLECLANVIEW ClanChg;                         	/* ACTION_CLAN_CHG, Ver.89  */
    CSHPCHG HPChg;                           	/* ACTION_HP_CHG, Ver.92  */
    unsigned char Jump;                            	/* ACTION_JUMP, Ver.106  */
    CSCLANEXTRAUI ClanExtraUI;                     	/* ACTION_CLAN_EXTRA_UI, Ver.121  */
    CSDESIGNATIONCHG DesignationChg;                  	/* ACTION_DESIGNATION_CHG, Ver.129  */
    CSACTIONFIGHT Fight;                           	/* ACTION_FIGHT, Ver.129  */
    CSRIDEONINFO HitchRide;                       	/* ACTION_HITCH_RIDE, Ver.135  */
    CSRIDEONINFO LeaveRide;                       	/* ACTION_LEAVE_RIDE, Ver.135  */
    CSROLEFAIRYACTION FairyAct;                        	/* ACTION_FAIRY_VIEW, Ver.136  */
    CSPKMODECHG PkModeChg;                       	/* ACTION_PK_MODE_CHG, Ver.174  */
    CSPKVALCHG PkValChg;                        	/* ACTION_PK_VAL_CHG, Ver.174  */
    CSACTIONDESTROY Destroy;                         	/* ACTION_DESTROY, Ver.213  */
    CSACTIONOBJENTERMAP ObjEnterMap;                     	/* ACTION_OBJ_ENTER_MAP, Ver.220  */
    CSACTIONOBJLEAVEMAP ObjLeaveMap;                     	/* ACTION_OBJ_LEAVE_MAP, Ver.220  */
    CSACTIONMONLIFE MonLife;                         	/* ACTION_MON_LIFE, Ver.222  */
    CSACTIONGETXP GetXp;                           	/* ACTION_GET_XP, Ver.224  */
    CSMONPKMODECHG MonPkModeChg;                    	/* ACTION_MON_PK_MODE_CHG, Ver.305  */
    CSACTIONCAREERCHG CareerChg;                       	/* ACTION_CAREER_CHG, Ver.317  */
    CSACTIONTMPENERGEMAX TmpEnergeMax;                    	/* ACTION_TMPENERGE_MAX, Ver.337  */
    CSACTIONBLOCKMSKPOINT BlockMskPoint;                   	/* ACTION_BLOCKMSK_POINT, Ver.341  */
    CSACTIONMONBOOTYFIRST MonBootyFirst;                   	/* ACTION_MON_BOOTY_FIRST, Ver.345  */
    CSLOGICAREA LogicArea;                       	/* ACTION_LOGIC_AREA, Ver.371  */
    CSTEST RoleTest;                        	/* ACTION_TEST, Ver.371  */
    CSACTIONRIDEONMACHINE RideOnMachine;                   	/* ACTION_RIDE_ON_MACHINE, Ver.393  */
    CSACTIONLEAVEMACHINE LeaveMachine;                    	/* ACTION_LEAVE_MACHINE, Ver.393  */
    CSACTIONMACHINEATTRCHG MachineAttrChg;                  	/* ACTION_MACHINE_ATTR_CHG, Ver.397  */
    int InPworldSafeTimeDown;            	/* ACTION_INPWORD_SAFETIME_DOWN, Ver.422  */
    CSACTIONCLOSEDIALOG CloseDialog;                     	/* ACTION_CLOSE_DIALOG, Ver.452  */
    CSACTIONPETCAMPAIGNPRE PetCampaignPre;                  	/* ACTION_PET_CAMPAIGN_PRE, Ver.476  */
    CSACTIONMACHINEPASSENGERINFO PassengerInfo;                   	/* ACTION_MACHINE_PASSENGER_INFO, Ver.516  */
    CSACTIONBEGINLEAVEMAP BeginLeaveMap;                   	/* ACTION_BEGIN_LEAVE_MAP, Ver.544  */
    HIDETASKINFO HideTaskInfo;                    	/* ACTION_HIDE_TASK_INFO, Ver.545  */
    CSOFFLINEEXPINFO OfflineExpInfo;                  	/* ACTION_OFFLINE_EXP, Ver.619  */
    CSACTIONPKTIME PKTime;                          	/* ACTION_PK_TIME, Ver.569  */
    CSACTIONDROPITEMUPDATE DropItemUpdate;                  	/* ACTION_DROP_ITEM_UPDATE, Ver.583  */
    CSACTIONPREPAREADDBYHIT PrepareAddbyHit;                 	/* ACTION_PREPARE_ADD_BY_HIT, Ver.627  */
    CSACTIONLEAVESTATE LeaveState;                      	/* ACTION_LEAVE_STAT, Ver.651  */
    CSACTIONMOTION Motion;                          	/* ACTION_MOTION, Ver.672  */
    CSACTIONTARGET Target;                          	/* ACTION_TARGET, Ver.756  */
    CSACTIONUSEITEMPRE UseItemPre;                      	/* ACTION_USE_ITEM_PRE, Ver.794  */
    CSACTIONCATCHPET CatchPet;                        	/* ACTION_CATCH_PET, Ver.806  */
    CSACTIONCLANITEM ClanItem;                        	/* ACTION_CLAN_ITEM, Ver.867  */
    CSACTIONMACHINEITEMLOCKINFO MachineItemLock;                 	/* ACTION_MACHINE_ITEM_LOCK, Ver.874  */
    CSACTIONMACHINELEAVEPRE MachineLeavePre;                 	/* ACTION_MACHINE_LEAVE_PRE, Ver.874  */
    CSACTIONMACHINELEAVEBRK MachineLeaveBrk;                 	/* ACTION_MACHINE_LEAVE_PRE_BRK, Ver.874  */
    CSACTIONCLIENTCMD ClientCmd;                       	/* ACTION_CLIENT_CMD, Ver.902  */
    CSACTIONFAKESTATUS FakeStatus;                      	/* ACTION_FAKE_STATUS, Ver.956  */
    CSACTIONBATTLELIMITTIME BattleLimitTime;                 	/* ACTION_BATTLE_LIMIT_TIME, Ver.1077  */
    CSACTIONMAPPOS MapPos;                          	/* ACTION_MAP_POS, Ver.1081  */
    CSACTIONFENJIEPRE FenJiePre;                       	/* ACTION_ARM_FENJIE_PRE, Ver.1084  */
    CSACTIONFENJIE FenJie;                          	/* ACTION_ARM_FENJIE, Ver.1084  */
    CSBALLISTICATK BallisticAtk;                    	/* ACTION_BALLISTIC_ATK, Ver.1107  */
    CSACTIONCLANCITYUPDATE ClanCityUpdate;                  	/* ACTION_CLAN_CITY_UPDATE, Ver.1128  */
    CSRECASTINFO Recast;                          	/* ACTION_ARM_RECAST, Ver.1156  */
    CSACTIONDAILYGOALINFO DailyGoalInfo;                   	/* ACTION_DAILY_GOAL_INFO, Ver.1151  */
    CSHETI Heti;                            	/* ACTION_PET_HETI, Ver.1155  */
    CSACTIONDYNACTIVEINFO DynActiveInfo;                   	/* ACTION_DYN_ACTIVE_INFO, Ver.1158  */
    CSACTIONRESETRUNEEXRES ResetRuneExRes;                  	/* ACTION_RESET_RUNE_EX_RES, Ver.1168  */
    CSACTIONRUNEEXENABLEINFO RuneExEnableInfo;                	/* ACTION_RUNE_EX_ENABLE_INFO, Ver.1168  */
    CSACTIONDORUNEEX DoRuneEx;                        	/* ACTION_DO_RUNE_EX, Ver.1170  */
    CSACTIONARMSTAR ArmStar;                         	/* ACTION_ARM_STAR, Ver.1186  */
    CSACTIONACCDEQUICK AccDeQuick;                      	/* ACTION_ACC_DE_QUICK, Ver.1224  */
    CSACTIONACHIEVEMENTNEW AchievementNew;                  	/* ACTION_ACHIEVEMENT_NEW, Ver.1228  */
    CSACTIONACHIEVEMENTLIST AchievementList;                 	/* ACTION_ACHIEVEMENT_LIST, Ver.1228  */
    CSACTIONARMWASH ArmWash;                         	/* ACTION_ARM_WASH, Ver.1230  */
    CSACTIONYESTERDAYINFO YesterdayInfo;                   	/* ACTION_YESTERDAY_INFO, Ver.1367  */
    CSACTIONCOUNTDOWN CountDown;                       	/* ACTION_COUNT_DOWN, Ver.1403  */
    CSACTIONVIEWFLAGCHG ViewFlagChg;                     	/* ACTION_VIEW_FLAG_CHG, Ver.1464  */
    CSACTIONDAILYBULL DailyBull;                       	/* ACTION_DAILY_BULL, Ver.1472  */
    CSACTIONRUNNESKILLCHGRET RunneSkillChgRet;                	/* ACTION_RUNNE_SKILL_CHG_RET, Ver.1487  */
    CSACTIONCLANMACHINEPWORLD ClanMachinePworld;               	/* ACTION_CLAN_MACHINE_PWORLD, Ver.1526  */
    CSACTIONSHAMDEAD ShamDead;                        	/* ACTION_SHAM_DEAD, Ver.1536  */
    CSACTIONCOLORFONTLIMIT ColorFontLimit;                  	/* ACTION_COLOR_FONT_LIMIT, Ver.1539  */
    CSACTIONMOTIONLIMIT MotionLimit;                     	/* ACTION_MOTION_LIMIT, Ver.1539  */
    CSACTIONCOWFINALRANGE CowFinalRange;                   	/* ACTION_COW_FINAL_RANGE, Ver.1554  */
    CSACTIONCLANDONATELOG ClanDonateLog;                   	/* ACTION_CLAN_DONATE_LOG, Ver.1562  */
    CSACTIONCLANSKILLINFO ClanSkillInfo;                   	/* ACTION_CLAN_SKILL_INFO, Ver.1562  */
    CSACTIONPLAYERCLANSKILLINFO PlayerClanSkillInfo;             	/* ACTION_PLAYER_CLAN_SKILL_INFO, Ver.1562  */
    ACTIONLEVELFENG LevelFeng;                       	/* ACTION_LEVEL_FENG, Ver.1813  */
    CSACTIONARMLEVELUP ArmLevelUP;                      	/* ACTION_ARM_LEVELUP, Ver.1819  */
    ACTIONWORSHIPEGGIFY WorshipEggify;                   	/* ACTION_WORSHIP_EFFIGY, Ver.1840  */
    ACTIONBEACHINFO BeachInfo;                       	/* ACTION_BEACH_INFO, Ver.1864  */
    ACTIONVIPINFO VipInfo;                         	/* ACTION_VIP_INFO, Ver.1904  */
    CSDAOBA DaoBa;                           	/* ACTION_DAOBA_INFO, Ver.1906  */
    ACTIONBEACHBUFF BeachBuff;                       	/* ACTION_BEACH_BUFF, Ver.1922  */
    ACTIONXUKONGENERGY XuKongEnergy;                    	/* ACTION_XUKONG_ENERGY, Ver.2068  */
    CSHANGHAIRANGE HangHaiRange;                    	/* ACTION_HANG_HAI_RANGE, Ver.2113  */
    CSACTIONCLANWARAWARDINFO ClanWarAwardInfo;                	/* ACTION_CLAN_WAR_AWARD_INFO, Ver.2165  */
    CSACTIONMAPSHOW MapShow;                         	/* ACTION_MAP_SHOW, Ver.2165  */
    CSACTIONCLANBATTLEAPPLYINFO ClanBattleApplyInfo;             	/* ACTION_CLAN_BATTLE_APPLY_INFO, Ver.2174  */
    CSACTIONPRECREATEGIFTVERIFY PrecreateGiftVerify;             	/* ACTION_PRECREATE_GIFT_VERIFY, Ver.2227  */
    CSACTIONWEDDINGDSN WeddingDsn;                      	/* ACTION_WEDDING_DSN, Ver.2393  */
    CSACTIONSCULPTCHG SculptChg;                       	/* ACTION_SCULPT_CHG, Ver.2461  */
};

struct tagCSActionRes
{
    int ID;                             
    char ActionID;                        	/*    Bind Macrosgroup:ActionTypeS,*/
    char Res[3];                         
    CSACTIONDATAS Data;                           
};

struct tagCSChatReq
{
    char Type;                            	/*    Bind Macrosgroup:CHAT_TYPE,*/
    char Res;                             	/*   客户端使用了此字段,判断是否需要回显 */
    unsigned short LinkLen;                        
    char ToName[NAME_LEN];               
    char Content[CLT_MSG_LEN];           
    unsigned char LinkContent[MAX_LINK];          
    short ListType;                        	/*  Ver.275 消耗道具的背包栏位 Bind Macrosgroup:LIST_TYPE,*/
    unsigned short GridIdx;                         	/*  Ver.275 消耗道具的栏位格子 */
    unsigned char OnlineType;                      	/*  Ver.578 接收者的在线类型 Bind Macrosgroup:ONLINE_TYPE,*/
    int Vip;                             	/*  Ver.898  */
    int IsCluster;                       	/*  Ver.1418 1-群发 */
};

struct tagCSChatRes
{
    char Type;                            	/*    Bind Macrosgroup:CHAT_TYPE,*/
    char Res;                            
    unsigned short LinkLen;                        
    char From[NAME_LEN];                 
    char Content[CLT_MSG_LEN];           
    unsigned char LinkContent[MAX_LINK];          
    unsigned char OnlineType;                      	/*  Ver.578 发送者的在线类型 Bind Macrosgroup:ONLINE_TYPE,*/
    int Vip;                             	/*  Ver.896  */
    int IsCluster;                       	/*  Ver.1450 1-群发 */
    int WorldID;                         	/*  Ver.1884  */
};

struct tagSkillCool
{
    unsigned int SkillID;                        
    char SkillType;                       	/*    Bind Macrosgroup:SKILL_COOL_TYPE,*/
};

struct tagSetSkillCDTime
{
    unsigned int SkillID;                        
    unsigned short SkillCDTime;                     	/*   用这个时间,来cd，这个技能. 只用一次 */
};

union tagCSSkillInfoData
{
    CSSKILLLIST SkillChg;                        	/* SKILL_INFO_CHANGE,   */
    unsigned int SkillDelID;                      	/* SKILL_INFO_DEL,   */
    SKILLCOOL SkillCool;                       	/* SKILL_COOL_CLEAN, Ver.138  */
    SETSKILLCDTIME SetSkillCDTime;                  	/* SKILL_COOL_TIME, Ver.296  */
};

struct tagCSSkillInfo
{
    char Type;                            	/*    Bind Macrosgroup:SKILL_INFO_TYPE,*/
    char Res[3];                         
    CSSKILLINFODATA Data;                           
};

struct tagCSSkillPre
{
    int SkillSeq;                       
    int x;                              
    int y;                              
    CSTIME SvrTime;                        
    unsigned short SkillID;                        
    RESPOS AtkPos;                          	/*  Ver.3  */
};

struct tagCSSkillPreS
{
    int ID;                             
    unsigned short SkillID;                        
    unsigned char SkillLevel;                      	/*  Ver.21  */
    char Res;                            
    RESPOS AtkPos;                          	/*  Ver.3  */
    unsigned short RuneTransferedID;                	/*  Ver.554 被符文转换后的技能ID */
    int AtkeeID;                         	/*  Ver.2150 吟唱技能目标memid */
};

struct tagCSSkillBrk
{
    unsigned short SkillID;                        
};

union tagCSSkillBrkData
{
    int NoUse;                           	/* SKILL_BRK_NORMAL,   */
    tdr_longlong LeftCdTime;                      	/* SKILL_BRK_CD,   */
    RESPOS CurrPos;                         	/* SKILL_BRK_POS,   */
};

struct tagCSSkillBrkS
{
    int ID;                             
    int SkillSeq;                       
    int BenchTimeMs;                    
    int SkillCltSeq;                     	/*  Ver.456  */
    tdr_longlong LeftCdTime;                      	/*  Ver.1032 该技能的冷却时间单位ms */
    char Type;                            	/*  Ver.1030  Bind Macrosgroup:SKILL_BRK_TYPE,*/
    CSSKILLBRKDATA Data;                            	/*  Ver.1030  */
};

struct tagCSSkillAtk
{
    int SkillSeq;                       
    RESPOS RolePos;                        
    CSTIME SvrTime;                        
    RESPOS AtkPos;                         
    unsigned short SkillID;                        
    unsigned char TargetNum;                      
    int TargetIDs[MAX_SKILL_TARGET];    
    int CollectPowerNum;                 	/*  Ver.236 集气格数 */
    int MonID;                           	/*  Ver.908 自己的技能怪物id */
};

struct tagCSSkillAtkS
{
    int ID;                             
    RESPOS AtkPos;                         
    unsigned short SkillID;                        
    unsigned char Res;                            
    unsigned char TargetNum;                      
    int TargetIDs[MAX_SKILL_TARGET];    
};

struct tagCSRidePre
{
    unsigned int RideItemID;                     
    CSTIME SvrTime;                        
    RESPOS RidePos;                        
};

struct tagCSRidePreS
{
    unsigned int RideItemID;                     
};

struct tagCSRideOn
{
    unsigned int RideItemID;                     
    CSTIME SvrTime;                        
    RESPOS RidePos;                        
};

struct tagCSRideBrk
{
    unsigned int RideItemID;                     
};

struct tagCSRideListChg
{
    ROLERIDELIST RideList;                       
};

struct tagCSRideDrop
{
    unsigned int RideItemID;                     
};

struct tagCSRideApply
{
    unsigned int RideOwnerID;                     	/*   骑乘 拥有者ID */
};

struct tagCSRideApplyAccpet
{
    unsigned int RideApplyID;                     	/*   申请者ID */
};

struct tagCSRideInvite
{
    unsigned int RideInviteID;                    	/*   邀请对象ID */
};

struct tagCSRideInviteAccpet
{
    unsigned int RideOwnerID;                     	/*   骑乘 拥有者ID */
};

struct tagCSRideNpcSelect
{
    unsigned char SelectType;                      	/*   选择哪个NPC选项 Bind Macrosgroup:RIDE_NPC_SELECT_TYPE,*/
};

struct tagCSRideLevelUp
{
    int RideID;                          	/*   强化骑乘 */
    short ListType;                        	/*  Ver.275 材料的背包栏位 Bind Macrosgroup:LIST_TYPE,*/
    unsigned short GridIdx;                         	/*  Ver.275 材料的栏位格子 */
};

struct tagCSRideApplyRefuse
{
    int RideApplyID;                     	/*   申请对象ID */
    int RefuseType;                      	/*  Ver.168  Bind Macrosgroup:RIDE_REFUSE_TYPE,*/
};

struct tagCSRideInviteRefuse
{
    int RideOwnerID;                     	/*   骑乘 拥有者ID */
    int RefuseType;                      	/*  Ver.168  Bind Macrosgroup:RIDE_REFUSE_TYPE,*/
};

struct tagCSRideKick
{
    int MemID;                           	/*   被T的乘客 MemID */
};

struct tagCSRideMoveLevel
{
    int ScrRideID;                       	/*   移等级骑乘 */
    int DstRideID;                       	/*   目标坐骑骑乘 */
};

union tagCSRideCltData
{
    CSRIDEDROP RideDrop;                        	/* RIDE_DROP,   */
    CSRIDEAPPLY RideApply;                       	/* RIDE_APPLY, Ver.132  */
    CSRIDEAPPLYACCPET RideApplyAccpet;                 	/* RIDE_APPLY_ACCEPT, Ver.132  */
    CSRIDEINVITE RideInvite;                      	/* RIDE_INVITE, Ver.132  */
    CSRIDEINVITEACCPET RideInviteAccpet;                	/* RIDE_INVITE_ACCEPT, Ver.132  */
    CSRIDENPCSELECT NpcSelect;                       	/* RIDE_NPC_SELECT, Ver.136  */
    CSRIDELEVELUP RideLevelUp;                     	/* RIDE_LEVEL_UP, Ver.136  */
    CSRIDEAPPLYREFUSE RideApplyRefuse;                 	/* RIDE_APPLY_REFUSE, Ver.136  */
    CSRIDEINVITEREFUSE RideInviteRefuse;                	/* RIDE_INVITE_REFUSE, Ver.136  */
    CSRIDEKICK RideKick;                        	/* RIDE_KICK_PASSENGER, Ver.150  */
    CSRIDEMOVELEVEL MoveLevel;                       	/* RIDE_MOVE_LEVEL, Ver.1704  */
};

struct tagCSRideClt
{
    char Type;                            	/*    Bind Macrosgroup:RIDE_CLT_TYPE,*/
    char Res[3];                         
    CSRIDECLTDATA Data;                           
};

struct tagRideApplyInfo
{
    unsigned int MemID;                          
    char RoleName[NAME_LEN];             
};

union tagCSRideSvrData
{
    RIDEAPPLYINFO ApplyInfo;                       	/* RIDE_SVR_ACCEPT,   */
    RIDEAPPLYINFO InviteInfo;                      	/* RIDE_SVR_INVITE,   */
};

struct tagCSRideSvr
{
    char Type;                            	/*    Bind Macrosgroup:RIDE_SVR_TYPE,*/
    char Res[3];                         
    CSRIDESVRDATA Data;                           
};

struct tagCSPetAttrHP
{
    unsigned int HP;                             
    char XieDaiPos;                      
};

struct tagCSPetAttrMaxHP
{
    unsigned int HP;                             
    char XieDaiPos;                      
};

union tagCSPetAttrValue
{
    char ChgName[ROLE_NAME_LEN_CLT];      	/* PET_CHG_NAME,   */
    unsigned int ChgExp;                          	/* PET_CHG_EXP,  宠物经验值 */
    CSPETATTRHP ChgHP;                           	/* PET_CHG_HP,  HP */
    CSPETATTRMAXHP ChgMaxHP;                        	/* PET_CHG_MAXHP,  最大HP */
    unsigned char ChgLevel;                        	/* PET_CHG_LEVEL,   */
    unsigned int ChgLoveVal;                      	/* PET_CHG_LOVE_VAL,  忠诚度 */
    unsigned char ChgBreedNum;                     	/* PET_CHG_BREEDNUM,  繁殖的次数 */
    unsigned char ChgStatFlag;                     	/* PET_CHG_STAT,  状态 Bind Macrosgroup:PET_STAT,*/
};

struct tagCSPetAttrChg
{
    tdr_ulonglong Wid;                            
    unsigned char Type;                            	/*    Bind Macrosgroup:PET_CHG_TYPE,*/
    char Res[3];                         
    CSPETATTRVALUE AttrValue;                      
};

struct tagCSPetSvrStrengthen
{
    tdr_ulonglong Wid;                            
    char Res[2];                         
    unsigned char SuccFlag;                        	/*   0 失败，否则成功 */
    char StrenLvl;                        	/*  Ver.838 强化哪个等级 */
};

struct tagCSPetSvrFightAttr
{
    tdr_ulonglong PetWID;                         
    PETFIGHTATTR Attr;                            	/*   宠物战斗相关属性 */
};

struct tagCSPetWatchInfo
{
    char RoleName[NAME_LEN];             
    ROLEPET Pet;                             	/*   宠物 */
};

struct tagCSPetFuseInviteInfo
{
    unsigned int MemID;                           	/*   目标宠物id */
    char RoleName[NAME_LEN];             
    ROLEPET Pet;                             	/*   宠物 */
};

struct tagCSPetFuseUI
{
    char RoleName[NAME_LEN];             
    ROLEPET Pet;                             	/*   宠物 */
};

struct tagCSPetFuseReject
{
    unsigned int MemID;                           	/*   对方角色MemID */
};

struct tagCSPetFuseAccept
{
    unsigned int MemID;                           	/*   对方角色MemID */
};

struct tagCSPetFuseCancel
{
    unsigned int MemID;                           	/*   无用 */
};

struct tagCSPetFuseDeal
{
    unsigned int MemID;                           	/*   对方角色MemID */
};

struct tagCSPetFuseBaby
{
    unsigned int MemID;                           	/*   所有者 */
    ROLEPET Pet;                             	/*   宠物 */
    unsigned int OtherMemID;                      	/*   所有者 */
    ROLEPET OtherPet;                        	/*   宠物 */
};

struct tagCSPetFuseSucc
{
    int Succ;                            	/*   0 失败 1成功 */
    CSPETFUSEBABY Baby;                            	/*  Ver.593 融合产物成功附带信息 */
};

struct tagCSPetWashGeniusInfo
{
    int Succ;                            	/*   1成功，0失败出错 */
    tdr_ulonglong PetWid;                          	/*   宠物WID */
    int Genius;                          	/*   品质 Bind Macrosgroup:PET_GENIUS_TYPE,*/
    int AtkGenius;                       	/*   攻击资质 */
    int PhsicDefGenius;                  	/*   物理防御资质 */
    int IceDefGenius;                    	/*   魔法防御资质 */
    int HPGenius;                        	/*   血量资质 */
    int HitRateGenius;                   	/*   命中资质 */
    int FleeGenius;                      	/*   闪避资质 */
};

struct tagCSPetActInfo
{
    int Type;                            	/*    Bind Macrosgroup:PET_SVR_ACT_TYPE,*/
};

struct tagCSResetSkillSucc
{
    int Succ;                            	/*   0 失败 1成功 */
    tdr_ulonglong Wid;                             	/*   宠物wid */
};

struct tagCSPetMoveStarSucc
{
    int Succ;                            	/*   0 失败 1成功 */
};

struct tagCSPetEatSucc
{
    int Succ;                            	/*   0 失败 1成功 */
};

struct tagCSPetStepUpSucc
{
    int Succ;                            	/*   0 失败 1成功 */
    tdr_ulonglong Wid;                             	/*   宠物wid */
};

struct tagCSPetImpUpSucc
{
    int Succ;                            	/*   0 失败 1成功 */
    tdr_ulonglong Wid;                             	/*   宠物wid */
};

struct tagCSPetGeniusLearnSucc
{
    int Succ;                            	/*   0 失败 1成功 */
    tdr_ulonglong Wid;                             	/*   宠物wid */
};

struct tagCSPetWashHighSucc
{
    int Succ;                            	/*   0 失败 1成功 */
    tdr_ulonglong Wid;                             	/*   宠物wid */
};

struct tagCSPetDelInfo
{
    tdr_ulonglong Wid;                             	/*   宠物wid */
    int Flag;                            	/*   0 放生 1非放生无特效 */
};

struct tagCSPetUnbindSvr
{
    int Succ;                            	/*   0 失败 1成功 */
    tdr_ulonglong Wid;                             	/*   宠物wid */
};

union tagCSPetSvrData
{
    ROLEPET PetInfo;                         	/* PET_INFO_CHG,   */
    CSPETATTRCHG AttrChg;                         	/* PET_ATTR_CHG,   */
    CSPETDELINFO Del;                             	/* PET_SVR_DEL,   */
    CSPETSVRSTRENGTHEN Strengthen;                      	/* PET_SVR_STRENGTHEN,   */
    CSPETSVRFIGHTATTR PetFightAttr;                    	/* PET_SVR_FIGHT_ATTR, Ver.148  */
    CSPETWATCHINFO WatchInfo;                       	/* PET_SVR_WATCH, Ver.148  */
    CSPETACTINFO PetActInfo;                      	/* PET_SVR_ACT, Ver.386  */
    CSPETFUSEINVITEINFO FuseInvite;                      	/* PET_SVR_FUSE_INVITE, Ver.552  */
    CSPETFUSEREJECT FuseReject;                      	/* PET_SVR_FUSE_REJECT, Ver.552  */
    CSPETFUSECANCEL FuseCancel;                      	/* PET_SVR_FUSE_CANCEL, Ver.552  */
    CSPETFUSEDEAL FuseDeal;                        	/* PET_SVR_FUSE_DEAL, Ver.552  */
    CSPETFUSEUI FuseUI;                          	/* PET_SVR_FUSE_UI, Ver.552  */
    CSPETFUSESUCC FuseSucc;                        	/* PET_SVR_FUSE_SUCC, Ver.552  */
    CSPETWASHGENIUSINFO WashGeniusInfo;                  	/* PET_SVR_WASH_GENIUS, Ver.1217  */
    CSRESETSKILLSUCC ResetSkillSucc;                  	/* PET_SVR_RESET_SKILL, Ver.1264  */
    CSPETMOVESTARSUCC PetMoveStarSucc;                 	/* PET_SVR_MOVE_STAR_SUCC, Ver.1952  */
    CSPETEATSUCC PetEatSucc;                      	/* PET_SVR_EAT_SUCC, Ver.1952  */
    CSPETSTEPUPSUCC PetStepUp;                       	/* PET_SVR_STEP_UP, Ver.1973  */
    CSPETIMPUPSUCC PetImpUp;                        	/* PET_SVR_IMP_UP, Ver.2299  */
    CSPETGENIUSLEARNSUCC PetGeniusLearn;                  	/* PET_SVR_GENIUS_LEARN, Ver.2334  */
    CSPETWASHHIGHSUCC PetWashHighSucc;                 	/* PET_SVR_WASH_HIGH, Ver.2350  */
    CSPETUNBINDSVR PetUnbindSvr;                    	/* PET_SVR_UNBIND, Ver.2445  */
};

struct tagCSPetSvr
{
    unsigned char PetSvrType;                      	/*    Bind Macrosgroup:PET_SVR_TYPE,*/
    char Res[3];                         
    CSPETSVRDATA PetSvrData;                     
};

struct tagCSPetAct
{
    unsigned char ActTpye;                         	/*    Bind Macrosgroup:PET_ACT_TYPE,*/
    char Res[3];                         
    tdr_ulonglong PetWid;                         
};

struct tagCSPetImpUp
{
    tdr_ulonglong PetWid;                         
};

struct tagCSPetHetiEnd
{
    tdr_ulonglong PetWid;                         
};

struct tagCSPetSkillUp
{
    tdr_ulonglong PetWid;                         
    unsigned short SkillID;                        
    unsigned short SkillLevel;                     
    char Res[3];                         
    unsigned char SkillGridIdx;                   
    STUFFIDXDATA StuffData;                       	/*  Ver.184  */
};

struct tagCSPetSkillLearn
{
    tdr_ulonglong PetWid;                         
    unsigned char SkillGridIdx;                   
    char Res[3];                         
    STUFFIDXDATA StuffData;                       	/*  Ver.184  */
};

struct tagCSPetWashSkillGrid
{
    tdr_ulonglong PetWid;                         
    STUFFIDXDATA StuffData;                       	/*  Ver.184  */
    char Res[3];                         
    unsigned char SkillGridIdx;                   
};

struct tagCSPetStrengthen
{
    tdr_ulonglong PetWid;                         
    STUFFIDXDATA SafeData;                        	/*  Ver.184  */
    int StuffNum;                        	/*  Ver.549  */
    char StrenLvl;                        	/*  Ver.838 强化哪个等级 */
};

struct tagCSPetReStren
{
    tdr_ulonglong PetWid;                         
    char StrenLvl;                        	/*   重新强化哪个等级 */
};

struct tagCSPetChgName
{
    tdr_ulonglong PetWid;                         
    char PetName[ROLE_NAME_LEN_CLT];     
};

struct tagCSPetLockSkill
{
    tdr_ulonglong PetWid;                         
    char Idx;                             	/*   技能格子索引|从0开始 */
    char Lock;                            	/*   0-解锁 非0-加锁 */
    char UseType;                         	/*  Ver.1160 0-金券 非0-金币,客户端在第一次锁的时候发过来即可 */
};

struct tagCSPetSkillReset
{
    tdr_ulonglong PetWid;                         
};

struct tagCSPetSkillUpDate
{
    tdr_ulonglong PetWid;                         
    char Idx;                             	/*   技能格子索引|从0开始 */
    int SkillID;                         	/*   技能ID */
};

struct tagCSPetCltWatch
{
    unsigned int MemID;                          
};

struct tagCSPetAddSkillGrid
{
    tdr_ulonglong PetWid;                         
};

struct tagCSPetStepUp
{
    tdr_ulonglong PetWid;                         
};

struct tagCSPetFuseInvite
{
    unsigned int MemID;                           	/*   目标宠物id */
};

struct tagCSPetStrengthenSave
{
    unsigned int PetID;                           	/*   宠物ID */
    tdr_ulonglong PetWid;                          	/*   宠物WID */
    int Val;                             	/*   保存的值 */
    char StrenLvl;                        	/*  Ver.838 强化哪个等级 */
};

struct tagCSPetWashGenius
{
    tdr_ulonglong PetWid;                          	/*   宠物WID */
    int MoneyType;                       	/*   保存的值 Bind Macrosgroup:PET_WASH_MONEY_TYPE,*/
    int LockFlag;                        	/*   锁定信息 */
    int ItemID;                          	/*   材料 */
};

struct tagCSPetWashGeniusSave
{
    tdr_ulonglong PetWid;                          	/*   宠物WID */
};

struct tagPetChgMode
{
    char Passive;                         	/*   模式：0：主动模式；1：被动模式 */
    tdr_ulonglong PetWID;                          	/*   宠物wid表示哪只宠物 */
};

struct tagCSPetLoveLevelUp
{
    tdr_ulonglong PetWid;                          	/*   宠物WID */
};

struct tagCSPetMoveStar
{
    tdr_ulonglong SrcPetWid;                       	/*   被转移的宠物WID */
    tdr_ulonglong DstPetWid;                       	/*   转移到的宠物WID */
};

struct tagCSPetEat
{
    tdr_ulonglong SrcPetWid;                       	/*   被吞噬的宠物WID */
    tdr_ulonglong DstPetWid;                       	/*   成长的宠物WID */
};

struct tagCSPetGeniusLearn
{
    tdr_ulonglong PetWid;                         
    int GridIdx;                         	/*   天赋书 */
};

struct tagCSPetUnbind
{
    tdr_ulonglong PetWid;                          	/*   宠物WID */
};

union tagCSPetCltData
{
    CSPETACT PetAct;                          	/* PET_CLT_ACT,   */
    CSPETSKILLUPDATE PetSkillUp;                      	/* PET_CLT_SKILL_UP, Ver.1157  */
    CSPETCHGNAME ChgName;                         	/* PET_CLT_CHG_NAME,   */
    tdr_ulonglong PetWid;                          	/* PET_CLT_DROP, Ver.143  */
    CSPETSTRENGTHEN PetStrengthen;                   	/* PET_CLT_STRENGTHEN, Ver.143  */
    CSPETWASHSKILLGRID WashSkillGrid;                   	/* PET_CLT_WASH_SKILL_GRID, Ver.143  */
    CSPETCLTWATCH Watch;                           	/* PET_CLT_WATCH, Ver.148  */
    CSPETSKILLLEARN SkillLearn;                      	/* PET_CLT_SKILL_LEARN, Ver.164  */
    PETCHGMODE ChgMode;                         	/* PET_CLT_SET_PASSIVE, Ver.1366  */
    CSPETADDSKILLGRID AddSkillGrid;                    	/* PET_CLT_ADD_SKILL_GRID, Ver.552  */
    CSPETFUSEINVITE FuseInvite;                      	/* PET_CLT_FUSE_INVITE, Ver.552  */
    CSPETFUSEREJECT FuseReject;                      	/* PET_CLT_FUSE_REJECT, Ver.552  */
    CSPETFUSEACCEPT FuseAccept;                      	/* PET_CLT_FUSE_ACCEPT, Ver.552  */
    CSPETFUSECANCEL FuseCancel;                      	/* PET_CLT_FUSE_CANCEL, Ver.552  */
    CSPETFUSEDEAL FuseDeal;                        	/* PET_CLT_FUSE_DEAL, Ver.552  */
    CSPETSTRENGTHENSAVE PetStrengthenSave;               	/* PET_CLT_STRENGTHEN_SAVE, Ver.803  */
    CSPETRESTREN PetReStren;                      	/* PET_CLT_RESTREN, Ver.838  */
    CSPETLOCKSKILL PetLockSkill;                    	/* PET_CLT_LOCK_SKILL, Ver.1157  */
    CSPETSKILLRESET PetSkillReset;                   	/* PET_CLT_SKILL_RESET, Ver.1157  */
    CSPETWASHGENIUS PetWashGenius;                   	/* PET_CLT_WASH_GENIUS, Ver.1217  */
    CSPETWASHGENIUSSAVE PetWashGeniusSave;               	/* PET_CLT_WASH_GENIUS_SAVE, Ver.1217  */
    CSPETHETIEND PetHetiEnd;                      	/* PET_CLT_HETI_END, Ver.1360  */
    CSPETLOVELEVELUP PetLoveLevelUp;                  	/* PET_CLT_LOVE_LEVEL_UP, Ver.1747  */
    CSPETMOVESTAR PetMoveStar;                     	/* PET_CLT_MOVE_STAR, Ver.1952  */
    CSPETEAT PetEat;                          	/* PET_CLT_EAT, Ver.1952  */
    CSPETSTEPUP PetStepUp;                       	/* PET_CLT_STEP_UP, Ver.1973  */
    CSPETIMPUP PetImpUp;                        	/* PET_CLT_IMP_UP, Ver.2289  */
    CSPETGENIUSLEARN PetGeniusLearn;                  	/* PET_CLT_GENIUS_LEARN, Ver.2334  */
    CSPETUNBIND PetUnbind;                       	/* PET_CLT_UNBIND, Ver.2445  */
};

struct tagCSPetClt
{
    unsigned char PetCltType;                      	/*    Bind Macrosgroup:PET_CLT_TYPE,*/
    char Res[3];                         
    CSPETCLTDATA PetCltData;                     
};

struct tagCSChangeCoinInto
{
    unsigned char WhichWay;                        	/*   兑换类新 Bind Macrosgroup:CHANGE_COIN_INTO_WAYS,*/
    char Res[3];                         
    int From;                            	/*   兑换数量(卖出的货币数量) */
    int NpcID;                          
};

struct tagCSReviveAcceptSkill
{
    int HelperRoleID;                   
    int SkillID;                        
};

union tagCSReviveData
{
    unsigned char Normal;                          	/* REVIVE_NORMAL,   */
    CSREVIVEACCEPTSKILL AcceptSkill;                     	/* REVIVE_ACCEPT_SKILL,   */
};

struct tagCSRevive
{
    char ReviveType;                      	/*    Bind Macrosgroup:REVIVE_TYPE,*/
    char Flag;                            	/*  Ver.2316 金币完美复活标记 1-是 */
    char Res[2];                         
    CSREVIVEDATA Data;                           
};

union tagDlgDataC
{
    char Close;                           	/* DLG_TYPE_CLOSE,   */
    char Input[DLG_INPUT_LEN];            	/* DLG_TYPE_INPUT,   */
};

struct tagCSDlgC
{
    int NpcID;                           	/*   物品触发对话时值为DLG_NPC_ID_INVALID */
    char Type;                            	/*    Bind Macrosgroup:DLG_CLTTYPE,*/
    unsigned char Res[3];                         
    DLGDATAC Dlg;                            
    RESPOS RolePos;                         	/*  Ver.9  */
    CSTIME SvrTime;                         	/*  Ver.9  */
};

struct tagDlgOneOpt
{
    char Opt[DLG_OPT_LEN];               
};

struct tagDlgOptS
{
    char Sentence[DLG_STR_LEN];          
    unsigned char Total;                          
    unsigned char Res[3];                         
    DLGONEOPT OneOpt[MAX_DLG_OPT];            
};

struct tagDlgAnswer
{
    unsigned char Next;                            	/*   后面是否还有对话内容 */
    unsigned char Res[3];                         
    char Answer[DLG_STR_LEN];            
};

struct tagCSDlgCommit
{
    char Answer[DLG_STR_LEN];            
    int CommitNum;                       	/*  Ver.903 提交选项的数量 */
};

union tagDlgDataS
{
    DLGANSWER DlgAnswer;                       	/* DLG_TYPE_ANSWER,   */
    DLGOPTS DlgOpt;                          	/* DLG_TYPE_OPT,   */
    char DlgLast[DLG_STR_LEN];            	/* DLG_TYPE_LAST,   */
    CSDLGCOMMIT DlgCommit;                       	/* DLG_TYPE_COMMIT_OPT, Ver.401  */
};

struct tagCSDlgS
{
    int NpcID;                          
    char Type;                            	/*    Bind Macrosgroup:DLG_TYPE,*/
    char DlgStyleType;                    	/*  Ver.69  Bind Macrosgroup:DLG_STYLE_TYPE,*/
    unsigned char Res[2];                         
    DLGDATAS Dlg;                            
};

struct tagCSChooseS
{
    char BindType;                        	/*   绑定类型,区分MemID Bind Macrosgroup:BIND_TYPE,*/
    int MemID;                           	/*   绑定的Memid,npcID或者itemID,以BindType区分 */
    char Tips[CHOOSE_STR_LEN];            	/*   提示的文字 */
    int Timer;                           	/*  Ver.1078 倒计时器,单位秒,0表示不显示 */
};

struct tagCSChooseC
{
    char BindType;                        	/*   绑定类型,区分MemID Bind Macrosgroup:BIND_TYPE,*/
    int MemID;                           	/*   绑定的Memid,npcID或者itemID,以BindType区分 */
    char ChooseType;                      	/*    Bind Macrosgroup:CHOOSE_TYPE,*/
};

struct tagCSMovieStartS
{
    char MovieFilePath[256];              	/*   播放一段视频 */
};

struct tagCSOpenItemMap
{
    int MapID;                           	/*   地图id */
    int ItemID;                         
    RESPOS Pos;                            
};

struct tagCSAdjustUI
{
    char UIType;                          	/*    Bind Macrosgroup:UI_TYPE,*/
};

struct tagCSWear
{
    unsigned int ArmDefID;                        	/*   穿脱装备的装备ID */
    char WearPos;                         	/*   相关的穿戴位置,只有戒指的穿脱需要这个值指定WEAR_POS_RING1到WEAR_POS_RING3 Bind Macrosgroup:WEAR_POS,*/
    char ListType;                        	/*   相关的背包栏位 Bind Macrosgroup:LIST_TYPE,*/
    unsigned short GridIdx;                         	/*   相关的栏位格子 */
    tdr_ulonglong PetWID;                          	/*  Ver.53 宠物WID,大于零表示给宠物穿装备 */
};

struct tagCSAmm
{
    unsigned int AmmID;                           	/*   弹药ID */
};

struct tagCSAddFitGrid
{
    unsigned int SkillID;                         	/*   技能ID */
};

struct tagCSSelectFashionSuit
{
    int SelectIdx;                       	/*   选择第几个套，0-2 */
};

union tagCSAdjustDataC
{
    int Level;                           	/* ADJUST_TYPE_LEVEL,   */
    CSPLAYERATTRVAL Attr;                            	/* ADJUST_TYPE_ATTR,   */
    CSADJUSTUI UI;                              	/* ADJUST_TYPE_UI, Ver.6  */
    CSLOCK Lock;                            	/* ADJUST_TYPE_LOCK, Ver.7  */
    CSWEAR Wear;                            	/* ADJUST_TYPE_WEAR, Ver.8  */
    CSWEAR UnWear;                          	/* ADJUST_TYPE_UNWEAR, Ver.8  */
    CSAMM Amm;                             	/* ADJUST_TYPE_AMM, Ver.8  */
    unsigned char ShowHead;                        	/* ADJUST_SHOW_HEAD, Ver.39  */
    unsigned char ShowFashion;                     	/* ADJUST_SHOW_FASHION, Ver.39  */
    unsigned char ShowBack;                        	/* ADJUST_SHOW_BACK, Ver.1447  */
    CSSELECTFASHIONSUIT SelectFashionSuit;               	/* ADJUST_SELECT_FASHION_SUIT, Ver.2006  */
    unsigned char ShowFace;                        	/* ADJUST_SHOW_FACE, Ver.2251  */
    unsigned char ShowWeddingDsn;                  	/* ADJUST_SHOW_WEDDING_DSN, Ver.2411  */
};

struct tagCSAdjustC
{
    char Type;                            	/*    Bind Macrosgroup:ADJUST_TYPE,*/
    unsigned char Res[3];                         
    CSADJUSTDATAC AdjustData;                     
};

struct tagCSGeniusInfo
{
    unsigned short UsedGeniusPoint;                
    unsigned short LearnGeniusPoint;               
};

struct tagCSSkillReduceCdTime
{
    unsigned short SkillID;                        
    unsigned short ReduceCDTime;                    	/*   减少的正在冷却的该技能cd时间 */
};

struct tagCSSkillReduceCdTimeArr
{
    unsigned short MaxSkillNum;                    
    unsigned short ChgNum;                         
    CSSKILLREDUCECDTIME CSSkillReduceCdTime[MAX_CHG_SKILL_CD_NUM]; 	/*   减少的正在冷却的该技能cd时间 */
};

union tagCSDiathesisInfoData
{
    DIATHESISINFO DiathesisChg;                    	/* DIATHESIS_INFO_CHG,   */
    CSGENIUSINFO GeniusInfo;                      	/* GENIUS_INFO_CHG, Ver.189  */
    DIATHESISINFO DiathesisInfo;                   	/* DIATHESIS_ALL_DATA, Ver.189  */
    CSSKILLREDUCECDTIMEARR SkillReduceCdTime;               	/* SKILL_REDUCE_CD_TIME, Ver.190  */
};

struct tagCSDiathesisInfo
{
    char Type;                            	/*    Bind Macrosgroup:DIATHESIS_INFO_TYPE,*/
    unsigned char Res[3];                         
    CSDIATHESISINFODATA DiathesisInfoData;              
};

struct tagCSPackageMove
{
    char SrcListType;                     	/*    Bind Macrosgroup:LIST_TYPE,*/
    char DstListType;                     	/*    Bind Macrosgroup:LIST_TYPE,*/
    unsigned short SrcGridIdx;                     
    unsigned short SrcGridNum;                     
    unsigned short DstGridIdx;                     
};

struct tagCSPackageMoney
{
    unsigned char SrcMoneyAttrID;                 
    unsigned char DstMoneyAttrID;                 
    short Res;                            
    unsigned int MoneyNum;                       
};

struct tagCSPackageUse
{
    char SrcListType;                     	/*    Bind Macrosgroup:LIST_TYPE,*/
    unsigned short SrcGridIdx;                     
    tdr_ulonglong WID;                             	/*  Ver.52  */
    unsigned int SubIndex;                        	/*  Ver.147 对象的子对象的索引 */
    char UseType;                         	/*  Ver.1435 使用类型 Bind Macrosgroup:PACKAGE_USE_TYPE,*/
};

struct tagCSPackageArrange
{
    char ListType;                        	/*    Bind Macrosgroup:LIST_TYPE,*/
};

struct tagCSPackagePick
{
    int ID;                             
};

struct tagCSPackagePickSelect
{
    int ID;                             
    char Idx;                             	/*   选择第几个战利品，从0开始，-1表示全部收取 */
};

struct tagCSPackageTmpDrop
{
    char Res;                            
};

struct tagCSPackageInlay
{
    char ArrNum;                          	/*   数组的有用大小 */
    CSPACKAGEUSE ItemUse[MAX_ITEM_INLAY_NUM];     	/*   物品镶嵌 */
};

struct tagCSPackageFittingsPick
{
    unsigned int SkillID;                        
    unsigned int SubIndex;                        	/*   配件的索引 */
};

struct tagCSPackageMoveAllShopping
{
    char ListType;                        	/*   商品的背包类型 */
};

struct tagCSPackageCangBaoTuReset
{
    unsigned int ItemID;                          	/*   重置藏宝图ID,5062000 5062003 5062009 */
};

struct tagPackageUseBrk
{
    unsigned int ItemID;                         
};

union tagCSPackageReqData
{
    char PackageAll;                      	/* PACKAGE_REQ_ALL,   */
    CSPACKAGEMOVE PackageMove;                     	/* PACKAGE_REQ_MOVE,   */
    CSPACKAGEARRANGE PackageArrange;                  	/* PACKAGE_REQ_ARRANGE,   */
    CSPACKAGEMONEY PackageMoney;                    	/* PACKAGE_REQ_MONEY,   */
    CSPACKAGEUSE PackageUse;                      	/* PACKAGE_REQ_USE, Ver.14  */
    CSPACKAGEPICK PackagePick;                     	/* PACKAGE_REQ_PICK, Ver.22  */
    CSPACKAGEPICKSELECT PackagePickSelect;               	/* PACKAGE_REQ_BOOTY_SELECT, Ver.22  */
    CSPACKAGETMPDROP PackageTmpDrop;                  	/* PACKAGE_REQ_TMPDROP, Ver.26  */
    CSPACKAGEINLAY PackageFittingsInlay;            	/* PACKAGE_REQ_FITTINGS_INLAY, Ver.149  */
    CSPACKAGEFITTINGSPICK PackageFittingsPick;             	/* PACKAGE_REQ_FITTINGS_PICK, Ver.395  */
    CSPACKAGEMOVEALLSHOPPING PackageMoveAllShopping;          	/* PACKAGE_REQ_MOVE_ALL_SHOPPING, Ver.162  */
    CSPACKAGECANGBAOTURESET PackageCangBaoTuReset;           	/* PACKAGE_REQ_CANGBAOTU_RESET, Ver.348  */
    CSPACKAGEUSE PackageUsePre;                   	/* PACKAGE_REQ_USE_PRE, Ver.471  */
    int StashEtNum;                      	/* PACKAGE_REQ_ADD_STASH_ET, Ver.676  */
    PACKAGEUSEBRK PackageUseBrk;                   	/* PACKAGE_REQ_USE_PRE_BRK, Ver.794  */
};

struct tagCSPackageReq
{
    char Type;                            	/*    Bind Macrosgroup:PACKAGE_REQ_TYPE,*/
    unsigned char Res[3];                         
    CSPACKAGEREQDATA PackageReqData;                 
};

struct tagCSRoleItem
{
    char ListType;                        	/*    Bind Macrosgroup:LIST_TYPE,*/
    unsigned char Res[3];                         
    ROLEITEM Item;                           
};

struct tagCSItemChg
{
    unsigned char ChgNum;                         
    unsigned char Res[3];                         
    CSROLEITEM Items[MAX_CHG_NUM];             
};

struct tagCSRoleArm
{
    char ListType;                        	/*    Bind Macrosgroup:LIST_TYPE,*/
    unsigned char Res[3];                         
    ROLEARM Arm;                            
};

struct tagCSArmChg
{
    unsigned char ChgNum;                         
    unsigned char Res[3];                         
    CSROLEARM Arms[MAX_CHG_NUM];              
};

struct tagRolePackageChg
{
    CSITEMCHG ItemChg;                        
    CSARMCHG ArmChg;                         
};

struct tagCSRolePet
{
    char ListType;                        	/*    Bind Macrosgroup:LIST_TYPE,*/
    unsigned char Res[3];                         
    ROLEPET Pet;                            
};

struct tagPetPackageChg
{
    unsigned char ChgNum;                         
    unsigned char Res[3];                         
    CSROLEPET Pets[MAX_PET_PACKAGE];          
};

struct tagCSBootyInfo
{
    int ID;                             
    unsigned char Num;                            
    unsigned char Res[3];                         
    ROLEGRID Items[MAX_MONBOOTY_ITEM];       
};

struct tagEtPkgNumChg
{
    int PkgType;                         	/*   1-扩充杂物包  2-扩充仓库 */
    int MaxNum;                          	/*   多少个 */
    int StuffNum;                        	/*   如果PkgType为1  此字段有效  表示扩充材料包格子数量 */
};

union tagCSPackageInfoData
{
    ROLEPACKAGE PackageAll;                      	/* PACKAGE_INFO_ALL,   */
    ROLEPACKAGECHG PackageChg;                      	/* PACKAGE_INFO_CHG,   */
    CSBOOTYINFO PackageBooty;                    	/* PACKAGE_INFO_BOOTY, Ver.22  */
    unsigned short SundriesNum;                     	/* PACKAGE_SUNDRIES_NUM_CHG, Ver.106  */
    unsigned short StuffNum;                        	/* PACKAGE_STUFF_NUM_CHG, Ver.106  */
    unsigned short TaskNum;                         	/* PACKAGE_TASK_NUM_CHG, Ver.106  */
    unsigned int DropBootyID;                     	/* PACKAGE_NOTIFY_ITEM_VIEW, Ver.185  */
    CANGBAOTUINFO CangBaoTuInfo;                   	/* PACKAGE_CANGBAOTU_RESET, Ver.351  */
    unsigned short StashNum;                        	/* PACKAGE_STASH_NUM_CHG, Ver.399  */
    ETPKGNUMCHG EtPkgNum;                        	/* PACKAGE_ET_NUM, Ver.406  */
    PACKAGEUSEBRK UsePreBrk;                       	/* PACKAGE_USE_PRE_BRK, Ver.471  */
    unsigned short SparNum;                         	/* PACKAGE_SPAR_NUM_CHG, Ver.1243  */
};

struct tagCSPackageInfo
{
    char Type;                            	/*    Bind Macrosgroup:PACKAGE_INFO_TYPE,*/
    unsigned char Res[3];                         
    CSPACKAGEINFODATA PackageInfoData;                
};

struct tagCSKickoffInfo
{
    char Msg[DESC_LEN];                  
};

struct tagMapTransInfo
{
    int TransID;                         	/*   地图传送ID */
    int ToMapID;                         	/*   目标地图ID(多线时为主线地图ID) */
    int Money;                           	/*   传送费 */
    int Condition;                       	/*  Ver.1049 传送条件 Bind Macrosgroup:TRANS_CONDITION_TYPE,*/
};

struct tagCSTransList
{
    int NpcID;                           	/*   npc Mem ID */
    int FromMapID;                       	/*   当前地图ID */
    unsigned short Count;                          
    MAPTRANSINFO TransList[MAX_TRANS];           
};

struct tagCSTransUseItem
{
    char SrcListType;                     	/*    Bind Macrosgroup:LIST_TYPE,*/
    unsigned short SrcGridIdx;                     
};

struct tagCSTransSelect
{
    int NpcID;                          
    CSTRANSUSEITEM UseItem;                         	/*  Ver.2142  */
    int TransIDNum;                      	/*   传送id数量 */
    int TransID[MAX_TRANS];              	/*   传送id列表 */
};

struct tagTeamInfo
{
    tdr_ulonglong TeamID;                          	/*   队伍唯一标识 */
    char TeamName[NAME_LEN];             
    unsigned char MemberNum;                      
    unsigned char Res;                            
    TEAMMEMBER TeamMember[MAX_TEAM_MEMBER];    
    unsigned int QiYue;                           	/*  Ver.58  */
    unsigned int TeamMonID;                       	/*  Ver.176  */
    int TeamBootyMode;                   	/*  Ver.585  Bind Macrosgroup:TEAM_BOOTY_MODE,*/
    int KickVoteStartTime;               	/*  Ver.1054 发起踢人的时间,0表示不处理相关逻辑 */
    int KickMemberUin;                   	/*  Ver.1054 被踢人的标识 */
};

struct tagCSTeamApply
{
    char CaptainName[NAME_LEN];          
};

struct tagCSTeamFollow
{
    char Flag;                            	/*   0-队长要求跟随, 1-队员跟随,2-取消跟随 */
};

struct tagCSTeamApplyAccept
{
    tdr_ulonglong RoleID;                         
};

struct tagCSTeamApplyRefuse
{
    tdr_ulonglong RoleID;                         
};

struct tagCSTeamInvite
{
    char MemberName[NAME_LEN];           
};

struct tagCSTeamInviteRefuse
{
    char CaptainName[NAME_LEN];          
    char Reason;                          	/*  Ver.1423 1-请求超时 */
};

struct tagCSTeamInviteAccept
{
    char CaptainName[NAME_LEN];          
};

struct tagCSTeamCaptainChg
{
    char MemberName[NAME_LEN];           
};

struct tagCSTeamExit
{
    unsigned char Res;                            
};

struct tagCSTeamKick
{
    char MemberName[NAME_LEN];           
};

struct tagCSTeamChgName
{
    char TeamName[NAME_LEN];             
};

struct tagCSTeamChgBootyMode
{
    int TeamBootyMode;                   	/*    Bind Macrosgroup:TEAM_BOOTY_MODE,*/
};

struct tagCSTeamVoteKick
{
    char VoteFlag;                        	/*   1赞成 2不赞成 */
};

struct tagCSTeamSummonAnswer
{
    int SummonMemID;                     	/*   召唤发起人的MemID */
    char Yes;                             	/*   0-拒绝, 1-同意 */
};

struct tagCSTeamAdd
{
    char MemberName[NAME_LEN];           
};

union tagCSTeamCltData
{
    CSTEAMAPPLY TeamApply;                       	/* TEAM_OP_APPLY,   */
    CSTEAMAPPLYACCEPT TeamApplyAccept;                 	/* TEAM_OP_APPLY_ACCEPT,   */
    CSTEAMAPPLYREFUSE TeamApplyRefuse;                 	/* TEAM_OP_APPLY_REFUSE,   */
    unsigned char TeamApplyClear;                  	/* TEAM_OP_APPLY_CLEAR,   */
    CSTEAMINVITE TeamInvite;                      	/* TEAM_OP_INVITE,   */
    CSTEAMINVITEACCEPT TeamInviteAccept;                	/* TEAM_OP_INVITE_ACCEPT,   */
    CSTEAMINVITEREFUSE TeamInviteRefuse;                	/* TEAM_OP_INVITE_REFUSE,   */
    unsigned char TeamInviteClear;                 	/* TEAM_OP_INVITE_CLEAR,   */
    CSTEAMCAPTAINCHG TeamCaptainChg;                  	/* TEAM_OP_CAPTAIN_CHG,   */
    CSTEAMEXIT TeamExit;                        	/* TEAM_OP_EXIT,   */
    CSTEAMKICK TeamKick;                        	/* TEAM_OP_KICK,   */
    unsigned char TeamDestroy;                     	/* TEAM_OP_DESTROY,   */
    CSTEAMCHGNAME TeamChgName;                     	/* TEAM_OP_CHGNAME,   */
    char TeamSwitchQiYueName[NAME_LEN];   	/* TEAM_OP_SWITCH_QIYUE,   */
    unsigned int TeamUserSetQieYue;               	/* TEAM_OP_USER_SET_QIYUE,  设置当前使用的契约 */
    unsigned int TeamUserDelQieYue;               	/* TEAM_OP_USER_DEL_QIYUE,  填要删除的契约id */
    CSTEAMCHGBOOTYMODE ChgBootyMode;                    	/* TEAM_OP_CHG_BOOTY_MODE, Ver.589  */
    CSTEAMVOTEKICK TeamVoteKick;                    	/* TEAM_OP_VOTE_KICK, Ver.1055  */
    CSTEAMFOLLOW TeamFollow;                      	/* TEAM_OP_FOLLOW, Ver.1397  */
    CSTEAMSUMMONANSWER TeamSummonAnswer;                	/* TEAM_OP_SUMMON_ANSWER, Ver.1406  */
    CSTEAMADD TeamAdd;                         	/* TEAM_OP_ADD, Ver.1752  */
};

struct tagCSTeamClt
{
    char OpType;                          	/*    Bind Macrosgroup:TEAM_OP_TYPE,*/
    unsigned char Res[3];                         
    CSTEAMCLTDATA TeamCltData;                    
};

struct tagTeamApplyInfo
{
    tdr_ulonglong RoleID;                         
    char RoleName[NAME_LEN];             
    unsigned char Career;                         
    unsigned char Level;                          
    unsigned char Gender;                         
    char ClanName[NAME_LEN];              	/*  Ver.1086  */
};

struct tagTeamFollowTick
{
    int Map;                            
    int X;                              
    int Y;                              
    int MapLine;                         	/*   第几线 */
};

struct tagTeamMsgSvr
{
    char Msg[CLT_MSG_LEN];               
};

struct tagCSTeamBootyModeInfo
{
    int TeamBootyMode;                   	/*    Bind Macrosgroup:TEAM_BOOTY_MODE,*/
};

struct tagTeamSummonAsk
{
    int SummonMemID;                     	/*   召唤发起人的MemID */
    int Map;                             	/*   地图ID */
    int X;                               	/*   坐标x */
    int Y;                               	/*   坐标y */
    int OverTime;                        	/*   过期倒计时,单位秒 */
};

struct tagTeamSummonCloseUi
{
    char Res;                            
};

union tagCSTeamSvrData
{
    TEAMINFO TeamInfo;                        	/* TEAM_SVR_TEAMINFO,   */
    TEAMAPPLYINFO ApplyInfo;                       	/* TEAM_SVR_APPLY,   */
    TEAMINFO InviteInfo;                      	/* TEAM_SVR_INVITE,   */
    TEAMMSGSVR TeamMsg;                         	/* TEAM_SVR_MSG,   */
    QIYUEINFO UserQiYueList;                   	/* TEAM_USER_QIYUELIST, Ver.134  */
    CSTEAMBOOTYMODEINFO BootyModeInfo;                   	/* TEAM_SVR_BOOTY_MODE, Ver.589  */
    int TeamSvrFollow;                   	/* TEAM_SVR_FOLLOW, Ver.1397  */
    TEAMFOLLOWTICK TeamFollowTick;                  	/* TEAM_SVR_FOLLOW_TICK, Ver.1397  */
    TEAMSUMMONASK TeamSummonAsk;                   	/* TEAM_SVR_SUMMON_ASK, Ver.1406  */
    TEAMSUMMONCLOSEUI TeamSummonCloseUi;               	/* TEAM_SVR_SUMMON_CLOSE_UI, Ver.1406  */
};

struct tagCSTeamSvr
{
    char OpType;                          	/*    Bind Macrosgroup:TEAM_SVR_TYPE,*/
    unsigned char Res[3];                         
    CSTEAMSVRDATA TeamSvrData;                    
};

struct tagFriendMsgGroup
{
    int iGroup;                          	/*   多少个组 */
    int iMud;                            	/*  Ver.1489 有多少人在MudSvr */
    tdr_ulonglong Muds[MAX_BUDDY_FRIEND];          	/*  Ver.1489  */
    int Groups[MAX_FIREND_GROUP];       
    CSCHATREQ ChatReq;                        
};

struct tagCSAvatarReq
{
    char Name[NAME_LEN];                 
};

struct tagAddBlackReq
{
    char Name[NAME_LEN];                 
};

struct tagAddEnemyReq
{
    char Name[NAME_LEN];                 
    tdr_ulonglong RoleID;                         
};

struct tagCSMemNameReq
{
    char Name[NAME_LEN];                 
    char MEMNAME[NAME_LEN];               	/*   备注名字 */
};

struct tagCSDelRelationReq
{
    tdr_ulonglong RoleID;                         
    int Type;                            	/*    Bind Macrosgroup:RELATION_TYPE,*/
};

struct tagAddFriendReq
{
    char Name[NAME_LEN];                 
    char ReqInfo[SHORT_DESC_LEN];         	/*   附加信息 */
    int OnlineType;                      	/*  Ver.599 在线类型,zone或mud  Bind Macrosgroup:ONLINE_TYPE,*/
};

struct tagAddTmpFriendReq
{
    char Name[NAME_LEN];                 
};

struct tagAddTmpEnmeyReq
{
    char Name[NAME_LEN];                 
};

struct tagCSAddFriendRes
{
    char ReqName[NAME_LEN];              
    unsigned char Accept;                          	/*   是否接受 */
    unsigned char AddOther;                        	/*   是否加对方为好友 */
    unsigned char Reason;                          	/*  Ver.1423 1-请求超时 */
    int OnlineType;                      	/*  Ver.599 在线类型,zone或mud  Bind Macrosgroup:ONLINE_TYPE,*/
};

struct tagCSEmotionReq
{
    char Emotion[EMOTION_LEN];           
};

struct tagCSEmotionRes
{
    char Emotion[EMOTION_LEN];           
};

struct tagCSBuddyInfoReq
{
    char ReqName[NAME_LEN];              
    int OnlineType;                      	/*  Ver.605 在线类型,zone或mud  Bind Macrosgroup:ONLINE_TYPE,*/
};

struct tagCSBuddyInfoRes
{
    unsigned char Level;                          
    unsigned char Career;                         
    unsigned char Head;                           
    unsigned char Hair;                           
    unsigned char Face;                           
    unsigned char Gender;                         
    char RoleName[NAME_LEN];             
    char ClanName[NAME_LEN];             
    tdr_ulonglong ClanWid;                         	/*  Ver.1418 公会wid */
    RESPOS Pos;                             	/*  Ver.1418  */
    int Map;                             	/*  Ver.1418  */
    int FriendVal;                       	/*  Ver.1418  */
    unsigned char TeamRoleNum;                     	/*  Ver.1418 队伍人数,0表示没有team */
    char Emotion[EMOTION_LEN];            	/*  Ver.1418  */
    int Span;                            	/*  Ver.1776  */
    unsigned int Charm;                           	/*  Ver.2055  */
};

struct tagCSSetGroupReq
{
    char RoleName[NAME_LEN];             
    int GroupID;                        
};

union tagCSAddRelationData
{
    ADDFRIENDREQ AddFriend;                       	/* RELATION_TYPE_FRIEND,   */
    ADDENEMYREQ AddEnemy;                        	/* RELATION_TYPE_ENEMY,   */
    ADDBLACKREQ AddBlack;                        	/* RELATION_TYPE_BLACK,   */
    ADDTMPFRIENDREQ AddTmpFriend;                    	/* RELATION_TYPE_TMPFRIEND, Ver.170  */
    ADDTMPENMEYREQ AddTmpEnemy;                     	/* RELATION_TYPE_TMPENEMY, Ver.170  */
};

struct tagCSAddRelation
{
    int Type;                            	/*    Bind Macrosgroup:RELATION_TYPE,*/
    CSADDRELATIONDATA AddRelationData;                
};

struct tagCSPursueResClt
{
    char PursueName[ROLE_NAME_LEN_SAVE];  	/*   表白者名字 */
    int Accept;                          	/*   0代表拒绝，1代表接受 */
};

struct tagCSOathResClt
{
    char OtherName[ROLE_NAME_LEN_SAVE];   	/*   对方的名字 */
    int Accept;                          	/*   0代表拒绝，1代表愿意 */
};

struct tagCSRemoveRelationReqClt
{
    char ReceiveName[ROLE_NAME_LEN_SAVE]; 	/*   接收方名字 */
};

union tagCSInvolveMarryCltData
{
    CSPURSUERESCLT PursueResClt;                    	/* TYPE_PURSUE_RES_CLT,   */
    CSREMOVERELATIONREQCLT RemoveRelationReqClt;            	/* TYPE_REMOVE_RELATION_REQ_CLT,   */
    CSOATHRESCLT OathResClt;                      	/* TYPE_OATH_RES_CLT,   */
};

struct tagCSInvolveMarryClt
{
    int Type;                            	/*    Bind Macrosgroup:INVOLVE_MARRY_TYPE,*/
    CSINVOLVEMARRYCLTDATA InvolveMarryCltData;            
};

union tagCSRelationCltData
{
    CSADDRELATION AddRelationReq;                  	/* RELATION_OP_TYPE_ADDRELATION_REQ,   */
    CSADDFRIENDRES AddFriendRes;                    	/* RELATION_OP_TYPE_ADDFRIEND_RES,   */
    CSEMOTIONREQ EmotionReq;                      	/* RELATION_OP_TYPE_EMOTION_REQ,   */
    CSMEMNAMEREQ MemNameReq;                      	/* RELATION_OP_TYPE_MEMNAME_REQ,   */
    CSDELRELATIONREQ DelRelationReq;                  	/* RELATION_OP_TYPE_DELRELATION_REQ,   */
    CSAVATARREQ AvatarReq;                       	/* RELATION_OP_TYPE_AVATAR_REQ,   */
    CSBUDDYINFOREQ BuddyInfoReq;                    	/* RELATION_OP_TYPE_INFO_REQ, Ver.467  */
    CSSETGROUPREQ SetGroupReq;                     	/* RELATION_OP_TYPE_SET_GROUP, Ver.1418  */
    FRIENDMSGGROUP FriendMsgGroup;                  	/* RELATION_OP_TYPE_MSG_GROUP, Ver.1450  */
    CSINVOLVEMARRYCLT InvolveMarryClt;                 	/* RELATION_OP_TYPE_INVOLVE_MARRY_CLT, Ver.2364  */
};

union tagCSRelationAttrData
{
    char Name[NAME_LEN];                  	/* RELATION_ATTR_NAME,   */
    unsigned char Gender;                          	/* RELATION_ATTR_GENDER,   */
    unsigned char Level;                           	/* RELATION_ATTR_LEVEL,   */
    unsigned short BuddyVal;                        	/* RELATION_ATTR_BUDDYVAL,   */
    int Head;                            	/* RELATION_ATTR_HEAD,   */
    unsigned char Career;                          	/* RELATION_ATTR_CAREER,   */
    char Emotion[EMOTION_LEN];            	/* RELATION_ATTR_EMOTION,   */
    char MemName[NAME_LEN];               	/* RELATION_ATTR_MEMNAME,   */
    unsigned char IsOnline;                        	/* RELATION_ATTR_ONLINE,  0不在线 1在线 */
    int GprsEnd;                         	/* RELATION_ATTR_GPRSEND, Ver.477  */
    unsigned char GroupID;                         	/* RELATION_ATTR_GROUP, Ver.1418  */
};

struct tagRelationAttr
{
    unsigned char RelationAttrID;                 
    unsigned char Res[3];                         
    CSRELATIONATTRDATA RelationAttrData;                	/*  Ver.85  */
};

struct tagCSRelationChg
{
    tdr_ulonglong RoleID;                         
    unsigned short RelationType;                   
    unsigned char RelationAttrNum;                
    unsigned char Res;                            
    RELATIONATTR RelationAttrs[RELATION_ATTR_MAX];
};

struct tagRelationClan
{
    unsigned int ClanID;                         
    char ClanName[NAME_LEN];             
};

struct tagRelationClanInfo
{
    tdr_ulonglong RoleID;                         
    RELATIONCLAN RelationClan;                   
};

struct tagRelationClanInfoList
{
    int Num;                            
    RELATIONCLANINFO RelationClanInfo[RELATION_MAX]; 
};

struct tagCSRelationChgList
{
    unsigned short Num;                            
    unsigned char Res[2];                         
    CSRELATIONCHG ChgList[RELATION_MAX];          
};

struct tagCSRelationAddFriendInfo
{
    char ReqName[NAME_LEN];              
    char ReqInfo[SHORT_DESC_LEN];         	/*   附加信息 */
    int OnlineType;                      	/*  Ver.599 在线类型,zone或mud  Bind Macrosgroup:ONLINE_TYPE,*/
};

struct tagCSRelationAvatarInfo
{
    tdr_ulonglong RoleID;                         
    ROLEAVATARPROF RoleAvatar;                     
};

struct tagCSRelationAddBlackRes
{
    tdr_ulonglong RoleID;                         
    char BlackName[NAME_LEN];            
};

struct tagCSRelationDelRes
{
    int Type;                            	/*    Bind Macrosgroup:RELATION_TYPE,*/
    tdr_ulonglong RoleID;                         
};

struct tagCSRelationMaxRes
{
    int FriendNum;                      
};

struct tagCSRelationReject
{
    int Type;                            	/*    Bind Macrosgroup:RELATION_TYPE,*/
    tdr_ulonglong RoleID;                         
    char RejectName[NAME_LEN];            	/*  Ver.131  */
};

struct tagCSPursueInfoInformSvr
{
    char PursueName[ROLE_NAME_LEN_SAVE];  	/*   表白者名字 */
};

struct tagCSOathUISvr
{
    char OrderName[ROLE_NAME_LEN_SAVE];   	/*   订制婚礼套餐的名字 */
    char Name[ROLE_NAME_LEN_SAVE];        	/*   对方名字 */
    unsigned char Gender;                          	/*   对方性别 Bind Macrosgroup:GENDER_TYPE,*/
    unsigned char WeddingMeal;                     	/*   订制了哪个婚礼套餐:1代表裸婚套餐，2代表简约，3代表豪华 */
};

struct tagCSIntimateColorSvr
{
    tdr_ulonglong RoleID;                          	/*   角色ID */
    unsigned char IntimateColorType;               	/*   在朋友列表中才有亲密度，表示当前关系 Bind Macrosgroup:INTIMATE_COLOR_TYPE,*/
};

struct tagCSRemoveRelationSvr
{
    char InitiativeName[ROLE_NAME_LEN_SAVE]; 	/*   提出方名字 */
};

struct tagCSLoginIntimateColor
{
    tdr_ulonglong RoleID;                          	/*   角色ID */
    unsigned char IntimateColorType;               	/*   在朋友列表中才有亲密度，表示当前关系 Bind Macrosgroup:INTIMATE_COLOR_TYPE,*/
};

struct tagCSRemoveRelationUI
{
    unsigned char IntimateColorType;               	/*   当前关系 Bind Macrosgroup:INTIMATE_COLOR_TYPE,*/
};

struct tagCSCelebrationInfo
{
    char FirstName[ROLE_NAME_LEN_SAVE];   	/*   名字 */
    char SecondName[ROLE_NAME_LEN_SAVE];  	/*   名字2 */
    int EndTime;                         	/*   婚礼庆典到期的时间 */
    RESPOS Pos;                             	/*   地点 */
};

union tagCSInvolveMarrySvrData
{
    CSINTIMATECOLORSVR IntimateColorSvr;                	/* TYPE_INTIMATE_COLOR_SVR,   */
    CSPURSUEINFOINFORMSVR PursueInfoInformSvr;             	/* TYPE_PURSUE_INFO_INFORM_SVR,   */
    CSREMOVERELATIONSVR RemoveRelationSvr;               	/* TYPE_REMOVE_RELATION_INFORM_SVR,   */
    CSOATHUISVR OathUISvr;                       	/* TYPE_OATH_UI_SVR,   */
    CSLOGININTIMATECOLOR LoginIntimateColor;              	/* TYPE_LOGIN_INTIMATE_COLOR,   */
    CSREMOVERELATIONUI RemoveRelationUI;                	/* TYPE_REMOVE_RELATION_UI,   */
    CSCELEBRATIONINFO CelebrationInfo;                 	/* TYPE_CELEBRATION_INFO,   */
};

struct tagCSInvolveMarrySvr
{
    int Type;                            	/*    Bind Macrosgroup:INVOLVE_MARRY_TYPE,*/
    CSINVOLVEMARRYSVRDATA InvolveMarrySvrData;            
};

union tagCSRelationSvrData
{
    CSRELATIONCHG RelationChg;                     	/* RELATION_OP_TYPE_CHG,   */
    CSRELATIONCHGLIST RelationChgList;                 	/* RELATION_OP_TYPE_CHGLIST,   */
    CSRELATIONADDFRIENDINFO RelationAddFriendInfo;           	/* RELATION_OP_TYPE_ADDFRIEND_INFO,   */
    CSRELATIONAVATARINFO RelationAvatarInfo;              	/* RELATION_OP_TYPE_AVATAR_RES,   */
    CSRELATIONDELRES RelationDelRes;                  	/* RELATION_OP_TYPE_DELRELATION_RES,   */
    CSEMOTIONRES EmotionRes;                      	/* RELATION_OP_TYPE_EMOTION_RES,   */
    RELATIONCLANINFO RelationClanInfo;                	/* RELATION_OP_TYPE_CHG_CLAN,   */
    RELATIONCLANINFOLIST RelationClanInfoList;            	/* RELATION_OP_TYPE_CHGLIST_CLAN,   */
    CSRELATIONREJECT RelationReject;                  	/* RELATION_OP_TYPE_REJECT, Ver.128  */
    CSBUDDYINFORES BuddyInfoRes;                    	/* RELATION_OP_TYPE_INFO_RES, Ver.467  */
    CSRELATIONMAXRES BuddyMax;                        	/* RELATION_OP_TYPE_MAX_FRIEND, Ver.1418  */
    CSINVOLVEMARRYSVR InvolveMarrySvr;                 	/* RELATION_OP_TYPE_INVOLVE_MARRY_SVR, Ver.2364  */
};

struct tagCSRelationClt
{
    char OpType;                          	/*    Bind Macrosgroup:RELATION_OP_TYPE,*/
    unsigned char Res[3];                         
    CSRELATIONCLTDATA RelationCltData;                
};

struct tagCSRelationSvr
{
    char OpType;                          	/*    Bind Macrosgroup:RELATION_OP_TYPE,*/
    unsigned char Res[3];                         
    CSRELATIONSVRDATA RelationSvrData;                
};

struct tagCSShopSell
{
    char SrcListType;                     	/*    Bind Macrosgroup:LIST_TYPE,*/
    unsigned char Res[3];                         
    unsigned short SrcGridIdx;                     
    unsigned short SrcGridNum;                     
};

struct tagCSShopRepairOne
{
    char SrcListType;                     	/*    Bind Macrosgroup:LIST_TYPE,*/
    unsigned char Res;                            
    unsigned short SrcGridIdx;                     
    int ItemID;                         
};

struct tagCSShopBuy
{
    unsigned short Idx;                            
    unsigned short GoodsType;                      
    unsigned int GoodsID;                        
    unsigned short Num;                            
};

struct tagCSShopBuySelled
{
    unsigned short Idx;                            
    tdr_ulonglong WID;                            
};

union tagCSShopCltData
{
    CSSHOPBUY ShopBuy;                         	/* SHOP_BUY,   */
    CSSHOPBUYSELLED ShopBuySelled;                   	/* SHOP_BUY_SELLED,   */
    CSSHOPSELL ShopSell;                        	/* SHOP_SELL,   */
    CSSHOPREPAIRONE ShopRepairOne;                   	/* SHOP_REPAIR_ONE,   */
    unsigned char ShopRepairAll;                   	/* SHOP_REPAIR_ALL,   */
};

struct tagCSShopClt
{
    int NpcID;                          
    char OpType;                          	/*    Bind Macrosgroup:NPC_SHOP_OP,*/
    unsigned char Res[3];                         
    CSSHOPCLTDATA ShopCltData;                    
};

struct tagCSShopCondition
{
    int GridIdx;                        
    SHOPCONDITION Condition;                      
};

struct tagShopSellItems
{
    unsigned int GoodsType;                       	/*    Bind Macrosgroup:SHOP_ITEM_TYPE,*/
    unsigned int GoodsID;                        
    unsigned int Price;                          
    unsigned int SpecialMoneyType;                	/*  Ver.2120  */
};

struct tagShopList
{
    int NpcID;                           	/*  Ver.35  */
    unsigned short ShopItemNum;                    
    unsigned short SellListID;                      	/*  Ver.2120  */
    SHOPSELLITEMS ShopSellItems[MAX_SELL_GOODS];  
    ITEMSELLSAVE ItemSellSave;                   
    unsigned short ConditionNum;                    	/*  Ver.870  */
    CSSHOPCONDITION Conditions[MAX_SELL_GOODS];      	/*  Ver.870  */
    unsigned int RebateCount;                     	/*  Ver.974 总折扣 */
    char RebateTypeNum;                   	/*  Ver.974 折扣类型数量 */
    char RebateTypes[REBATE_TYPE_MAX_NUM]; 	/*  Ver.974 折扣类型数组 */
};

union tagCSShopSvrData
{
    unsigned char ShopRepairAll;                   	/* SHOP_REPAIR_ALL,   */
    SHOPLIST ShopList;                        	/* SHOP_LIST,   */
    ITEMSELLSAVE ShopSelledList;                  	/* SHOP_SELLED_LIST,   */
};

struct tagCSShopSvr
{
    char OpType;                          	/*    Bind Macrosgroup:NPC_SHOP_OP,*/
    unsigned char Res[3];                         
    CSSHOPSVRDATA ShopSvrData;                    
};

struct tagCSTaskAward
{
    unsigned int NpcID;                          
    unsigned int TaskID;                         
    unsigned int SelectItemID;                   
};

struct tagCSTaskAccept
{
    unsigned int NpcID;                          
    unsigned int TaskID;                         
};

struct tagCSTaskDrop
{
    unsigned short TaskID;                         
};

struct tagCSTaskFini
{
    unsigned short TaskID;                         
};

struct tagCSTaskShare
{
    unsigned short TaskID;                         
};

struct tagCSTaskRefuse
{
    unsigned short TaskID;                         
};

struct tagCSTaskItemRecycleOpen
{
    char ListType;                        	/*    Bind Macrosgroup:LIST_TYPE,*/
    char GridIdx;                        
};

struct tagCSTaskItemRecycleAccept
{
    char ListType;                        	/*    Bind Macrosgroup:LIST_TYPE,*/
    char GridIdx;                        
    int TaskID;                         
};

union tagCSTaskCltData
{
    unsigned char GetTaskInfo;                     	/* TASK_INFO,   */
    CSTASKACCEPT TaskAccept;                      	/* TASK_ACCEPT,   */
    CSTASKAWARD GetTaskAward;                    	/* TASK_AWARD,   */
    CSTASKDROP TaskDrop;                        	/* TASK_DROP,   */
    CSTASKFINI TaskFini;                        	/* TASK_FINI,   */
    CSTASKSHARE TaskShare;                       	/* TASK_SHARE, Ver.95  */
    CSTASKREFUSE TaskRefuse;                      	/* TASK_REFUSE, Ver.95  */
    CSTASKITEMRECYCLEOPEN ItemRecycleOpen;                 	/* TASK_ITEM_RECYCLE_OPEN, Ver.2049  */
    CSTASKITEMRECYCLEACCEPT ItemRecycleAccept;               	/* TASK_ITEM_RECYCLE_ACCEPT, Ver.2049  */
};

struct tagCSTaskClt
{
    char OpType;                          	/*    Bind Macrosgroup:TASK_OP,*/
    unsigned char Res[3];                         
    CSTASKCLTDATA TaskCltData;                    
};

struct tagCSTaskRunOne
{
    unsigned short TaskID;                         
    unsigned char TaskStat;                        	/*    Bind Macrosgroup:TASK_STAT,*/
    unsigned char TaskCycleIdx;                    	/*   环形任务的环数索引，从0开始 */
    unsigned short CycleID;                         	/*  Ver.981  */
    TASKMONTRACE TaskMonTrace;                   
    unsigned int TaskEndTime;                     	/*  Ver.59  */
    TASKGENERICPROGRESS TaskGenericProgress;             	/*  Ver.270  */
    TASKITEMTRACE TaskItemTrace;                   	/*  Ver.1402  */
    int SJTaskStar;                      	/*  Ver.1419 赏金任务星级 */
};

struct tagCSTaskRecycleInfo
{
    unsigned short TaskRecycleID;                  
    unsigned short TaskID;                         
    int TaskCycleIdx;                    	/*   环形任务的环数索引，从0开始 */
    unsigned int TaskRecycleGetTime;             
};

struct tagCSTaskInfo
{
    unsigned char TaskRunNum;                     
    unsigned char TaskOneDayNum;                   	/*  Ver.79  */
    unsigned short TaskFiniNum;                     	/*  Ver.45  */
    CSTASKRUNONE TaskRuns[MAX_TASK_RUN];         
    unsigned short TaskFinis[MAX_TASK_FINI];        	/*  Ver.45  */
    TASKONEDAYINFO TaskOneDayInfo[MAX_TASK_ONEDAY]; 	/*  Ver.79  */
    TASKCYCLEONEDAY TaskCycleOneDay;                 	/*  Ver.119  */
    GROUPONEDAY GroupOneDay;                     	/*  Ver.121  */
    int TaskRecycleNum;                  	/*  Ver.264  */
    CSTASKRECYCLEINFO TaskRecycleInfo[MAX_TASK_RUN];   	/*  Ver.264  */
    HIDETASKINFO HideTaskInfo;                    	/*  Ver.548  */
    TASKCYCLEWEEK CycleWeek;                       	/*  Ver.2194  */
    GROUPWEEK GroupWeek;                       	/*  Ver.2379  */
};

struct tagCSTaskDialog
{
    unsigned int NpcID;                          
    unsigned short TaskID;                         
    unsigned char Type;                            	/*    Bind Macrosgroup:TASK_DIALOG_TYPE,*/
    unsigned char TaskCycleIdx;                    	/*  Ver.117 环形任务的环数索引，从0开始 */
    unsigned short CycleID;                         	/*  Ver.981  */
};

struct tagCSTaskTimer
{
    unsigned short TaskID;                         
    unsigned short TimerMode;                       	/*   计时方式: 0 正计时，1 倒计时 */
    int Time;                            	/*   计时时间单位秒 */
};

struct tagCSTaskItemRecycleUI
{
    char ListType;                        	/*    Bind Macrosgroup:LIST_TYPE,*/
    char GridIdx;                        
    int TaskRecycleID;                  
    int TaskID;                         
};

union tagCSTaskSvrData
{
    CSTASKINFO GetTaskInfo;                     	/* TASK_INFO,   */
    CSTASKRUNONE GetTaskChg;                      	/* TASK_CHG,   */
    CSTASKDIALOG TaskDialog;                      	/* TASK_DIALOG,   */
    CSTASKTIMER TaskTimer;                       	/* TASK_TIMER, Ver.277  */
    CSTASKITEMRECYCLEUI ItemRecycleUI;                   	/* TASK_ITEM_RECYCLE_UI, Ver.2049  */
};

struct tagCSTaskSvr
{
    char OpType;                          	/*    Bind Macrosgroup:TASK_OP,*/
    unsigned char Res[3];                         
    CSTASKSVRDATA TaskSvrData;                    
};

struct tagCSSkillReviveInfo
{
    char RoleName[NAME_LEN];             
    int PlayerID;                       
    unsigned int SkillID;                        
    unsigned int DropMoney;                       	/*  Ver.917 掉了多少钱 */
    unsigned int ReviveMoney;                     	/*  Ver.917 能恢复多少钱 */
    unsigned int DropExp;                         	/*  Ver.917 掉了多少exp */
    unsigned int ReviveExp;                       	/*  Ver.917 能恢复多少exp */
};

struct tagCSOnlineSvr
{
    char RoleName[NAME_LEN];              	/*  Ver.137  */
    tdr_ulonglong RoleID;                         
    unsigned char Online;                         
};

struct tagCSAutoFlyClt
{
    unsigned char AutoFlyEnd;                     
    RESPOS EndPos;                         
};

struct tagCSCollectStart
{
    int MonID;                          
};

struct tagCSCollectEnd
{
    int MonID;                          
};

struct tagCSCollectCltData
{
    CSCOLLECTSTART CollectStart;                    	/* COLLECT_START,   */
    CSCOLLECTEND CollectEnd;                      	/* COLLECT_END,   */
};

struct tagCSCollectClt
{
    char OpType;                          	/*    Bind Macrosgroup:COLLECT_OP,*/
    unsigned char Res[3];                         
    CSCOLLECTCLTDATA CollectCltData;                 
};

struct tagCSSkillLearn
{
    char type;                            	/*    Bind Macrosgroup:LEARN_TYPE,*/
    int ID;                             
    int NpcID;                          
    unsigned char Level;                          
};

struct tagExchgItem
{
    int DefID;                          
    tdr_ulonglong WID;                            
    char ListType;                       
    char GridIdx;                        
    int Pos;                            
    char ExchgGridIdx;                   
    int Num;                            
};

struct tagExchgPet
{
    int DefID;                          
    tdr_ulonglong WID;                            
    char ListType;                       
    char GridIdx;                        
    char ExchgGridIdx;                   
    int Pos;                            
};

struct tagExchgData
{
    int Money;                          
    unsigned char ItemNum;                        
    EXCHGITEM ItemData[EXCHG_MAX_ITEM_NUM];   
    unsigned char PetNum;                         
    EXCHGPET PetData[EXCHG_MAX_PET_NUM];     
};

struct tagExchgItemEntiy
{
    char ExchgGridIdx;                   
    ROLEGRID RoleGrid;                       
};

struct tagExchgPetEntiy
{
    char ExchgGridIdx;                   
    char PetType;                        
    ROLEPET RolePet;                        
};

struct tagExchgEntiy
{
    int Money;                          
    unsigned char ItemNum;                        
    EXCHGITEMENTIY ItemEntiy[EXCHG_MAX_ITEM_NUM];  
    unsigned char PetNum;                         
    EXCHGPETENTIY PetEntiy[EXCHG_MAX_PET_NUM];    
};

struct tagCSExchgClt
{
    char type;                            	/*    Bind Macrosgroup:EXCHG_TYPE,*/
    unsigned char Reason;                          	/*  Ver.168  Bind Macrosgroup:REJECT_REASON,*/
    char RoleName[NAME_LEN];             
    EXCHGDATA ExchgData;                      
};

struct tagCSExchgSvr
{
    char type;                            	/*    Bind Macrosgroup:EXCHG_TYPE,*/
    char RoleName[NAME_LEN];             
    EXCHGENTIY ExchgEntiy;                     
};

struct tagPworldSelect
{
    unsigned char PworldDifficulty;                	/*   普通、精英 Bind Macrosgroup:PWORLD_DIFFICULTY_TYPE,*/
    unsigned char PworldGrade;                     	/*   S A B C D Bind Macrosgroup:PWORLD_GRADE_TYPE,*/
    unsigned char LevelType;                       	/*   等级高低平均 Bind Macrosgroup:PWORLD_LEVEL_TYPE,*/
    unsigned char Layer;                           	/*  Ver.1187 幻境层数|暂时只有这个用处 */
};

struct tagCSDynPworldClt
{
    int PworldID;                       
    PWORLDSELECT DynPworldSelect;                
};

struct tagCSDynPworldSvr
{
    int PworldID;                       
    unsigned char MapNum;                         
    int MapID[MAX_PWORLD_MAP];          
};

struct tagCSClanViewGetRes
{
    int Page;                            	/*   第几页 */
};

struct tagCSClanCensorRole
{
    ROLEMEMBER ID;                              	/*   申请者的ID信息 */
    unsigned char Vote;                            	/*   审查投票，0表示反对，1表示同意 */
    unsigned char Res[3];                         
};

struct tagCSClanCensorClan
{
    CLANID ID;                              	/*   申请者的ID信息 */
    unsigned char Vote;                            	/*   审查投票，0表示反对，1表示同意 */
    unsigned char Res[3];                         
};

struct tagCSClanMemberNickname
{
    tdr_ulonglong RoleID;                         
    char Nickname[CLAN_NICK_IN_LEN];     
};

struct tagCSClanAnswer
{
    CLANID ID;                             
    char HostName[NAME_LEN];             
    unsigned char ACK;                            
    unsigned char Res[3];                         
};

struct tagCSClanViewPageCookie
{
    unsigned short PageNo;                          	/*   当前页号 */
    int ListVersion;                     	/*   这个列表的Cookie */
    unsigned char RowNum;                         
    unsigned char Res;                            
    int RowVersion[CLAN_MAX_VIEW_PAGE_ROW]; 	/*   每一行的Cookie */
};

struct tagCSClanViewPageByID
{
    unsigned char Num;                            
    unsigned char Res[3];                         
    unsigned int IDs[CLAN_MAX_VIEW_PAGE_ROW];     	/*   每一行的公会ID */
};

union tagCSClanFindReqKey
{
    int ID;                              	/* FIND_CLAN_BY_ID,  用此ID精确查找 */
    char Name[CLAN_NAME_IN_LEN];          	/* FIND_CLAN_BY_NAME,  查找公会名带此字符串的公会 */
};

struct tagCSClanFindReq
{
    char ByWhat;                          	/*   何种查找方式 Bind Macrosgroup:FIND_CLAN_BY_WHAT,*/
    char Res[3];                         
    CSCLANFINDREQKEY Key;                            
};

struct tagCSClanStorageGridIdentifier
{
    char Category;                        	/*   哪个仓库 Bind Macrosgroup:CLAN_STORAGE_CATEGORY,*/
    char Res1[3];                        
    int GridPos;                         	/*   格子位置 */
};

struct tagClanRunningProgressLite
{
    char Category;                        	/*   类型 */
    char Res1[3];                        
    int Pos;                             	/*   索引 */
};

struct tagClanRunningProgressTime
{
    CLANRUNNINGPROGRESSLITE Identifier;                      	/*   标识 */
    int BeginTime;                       	/*   新的开始时间 */
    int EndTime;                         	/*   新的结束时间 */
};

union tagCSClanProgressNotifyExtension
{
    CLANRUNNINGPROGRESS Started;                         	/* CLAN_PROGRESS_STARTED,  开始 */
    CLANRUNNINGPROGRESSLITE Canceled;                        	/* CLAN_PROGRESS_CANCELED, Ver.446 被取消 */
    CLANRUNNINGPROGRESSLITE Finished;                        	/* CLAN_PROGRESS_FINISHED, Ver.446 完成 */
    CLANRUNNINGPROGRESSTIME Shifted;                         	/* CLAN_PROGRESS_SHIFTED, Ver.503 变速 */
};

struct tagCSClanProgressNotify
{
    char What;                            	/*   通知 Bind Macrosgroup:CLAN_PROGRESS_NOTIFY,*/
    char Res1[3];                        
    CSCLANPROGRESSNOTIFYEXTENSION Data;                            	/*   通知的数据 */
};

struct tagCSClanResearch
{
    char Category;                        	/*   科技类别 Bind Macrosgroup:CLAN_TECH_CATEGORY,*/
    char Res1[3];                        
    char Level;                           	/*   科技等级 */
    char Res2[3];                        
};

struct tagCSClanCancelResearch
{
    int ProgressPos;                     	/*   被取消的研发 */
};

struct tagCSClanMake
{
    char Category;                        	/*   类别 Bind Macrosgroup:CLAN_MAKE_FOR,*/
    char Res1[3];                        
    int ItemOrMachineID;                 	/*   被制造的物品/机械ID */
    int Num;                             	/*   预订制造数量;只有被制造的是物品,这个值才有效 */
};

struct tagCSClanCancelMaking
{
    char Category;                        	/*   类别 Bind Macrosgroup:CLAN_MAKE_FOR,*/
    char Res1[3];                        
    int ProgressPos;                     	/*   被取消的制造 */
};

struct tagCSClanGrabMachine
{
    int StorageGridPos;                  	/*   被提取的机械在公会仓库中的格子位置 */
};

struct tagCSClanCallbackMachine
{
    int StorageGridPos;                  	/*   被召回的机械在公会仓库中的格子位置 */
};

struct tagCSClanMachineSupply
{
    char SupplyFor;                       	/*   进行何种类型补给 Bind Macrosgroup:CLAN_MACHINE_SUPPLY_FOR,*/
    char Res1[3];                        
    int StorageGridPos;                  	/*   被补给的采矿车在公会仓库中的格子位置 */
};

struct tagCSClanStorageGridLockSwitch
{
    CSCLANSTORAGEGRIDIDENTIFIER GridIdentifier;                  	/*   哪个格子 */
    char LockState;                       	/*   锁定状态 Bind Macrosgroup:CLAN_STORAGE_GRID_STATE,*/
    char Res1[3];                        
};

struct tagCSClanStorageGridDestroy
{
    CSCLANSTORAGEGRIDIDENTIFIER GridIdentifier;                  	/*   被摧毁物品/机械所在的格子 */
};

struct tagCSClanSetJobAndTitle
{
    tdr_ulonglong RoleID;                          	/*   被设置职位的角色ID */
    char Position;                        	/*   被设置的职位 Bind Macrosgroup:CLAN_POSITION,*/
    char Res1[3];                        
    char Title[CLAN_MEM_TITLE_LEN];       	/*   被设置的封号名 */
};

struct tagCSClanResearchSpeedup
{
    int ProgressPos;                     	/*   被加速的研发 */
    int DecreasingTime;                  	/*   加速时间(秒) */
};

struct tagCSClanMakingSpeedup
{
    char Category;                        	/*    Bind Macrosgroup:CLAN_MAKE_FOR,*/
    char Res1[3];                        
    int ProgressPos;                     	/*   被加速的制造 */
    int DecreasingTime;                  	/*   加速时间(秒) */
};

struct tagCSClanResourceLockSwitch
{
    int ResourceID;                      	/*   位置索引(原为资源物品id) */
    char LockState;                       	/*   锁定状态 Bind Macrosgroup:CLAN_STORAGE_GRID_STATE,*/
};

struct tagCSClanResourceGrabItem
{
    int ResourceID;                      	/*   位置索引(原为资源物品id) */
    int Num;                             	/*   数量 */
};

struct tagCSSetClanColor
{
    CLANCOLOR Set;                             	/*   Set.Color等于0表示取消颜色设置 */
};

struct tagCSSetClanMapPos
{
    int Type;                            	/*   会标类型 Bind Macrosgroup:CLAN_MAP_POS_TYPE,*/
    int MapID;                           	/*   地图 */
    RESPOS Pos;                             	/*   位置 */
};

struct tagCSClanSkillResearch
{
    int SkillID;                         	/*   技能ID */
    int Level;                           	/*   等级 */
};

struct tagCSClanSkillLearn
{
    int SkillID;                         	/*   技能ID */
    int Level;                           	/*   等级 */
};

struct tagCSClanSummonAnswer
{
    int SummonMemID;                     	/*   召唤发起人的MemID */
    char Yes;                             	/*   0-拒绝, 1-同意 */
};

struct tagCSClanSetGroup
{
    tdr_ulonglong RoleID;                          	/*   被设置/取消的角色ID */
    int Group;                           	/*   设置/取消成员为第几战团 */
    int Set;                             	/*   0取消1设置 */
};

struct tagCSClanSetGroupStrongMap
{
    int Group;                           	/*   第几战团 */
    int Map;                            
};

struct tagCSClanOpenGroup
{
    int Group;                           	/*   第几战团 */
};

struct tagCSClanKickCity
{
    char RoleName[NAME_LEN];             
};

union tagCSClanCltData
{
    char ClanCreateClanName[CLAN_NAME_IN_LEN]; 	/* CLAN_OP_CREATE,   */
    char ClanInviteName[NAME_LEN];        	/* CLAN_OP_INVITE_JOIN_CLAN,   */
    ROLEMEMBER ClanDelMemberGID;                	/* CLAN_OP_DEL_MEMBER,   */
    ROLEMEMBER ClanUpPosRoleID;                 	/* CLAN_OP_UP_POSITION,   */
    ROLEMEMBER ClanDownPosRoleID;               	/* CLAN_OP_DOWN_POSITION,   */
    char ClanBulletinText[SHORT_DESC_LEN]; 	/* CLAN_OP_EDIT_BULLETIN,   */
    char ClanManifestoText[CLAN_MANIFESTO_IN_LEN]; 	/* CLAN_OP_EDIT_MANIFESTO,   */
    ROLEMEMBER ClanDemiseJobRoleID;             	/* CLAN_OP_DEMISE_JOB,   */
    CLANID ClanJoinID;                      	/* CLAN_OP_APPLY_JOIN_CLAN,   */
    CSCLANCENSORROLE ClanCensorJoinClan;              	/* CLAN_OP_CENSOR_JOIN_CLAN,   */
    CSCLANMEMBERNICKNAME ClanMemberNickname;              	/* CLAN_OP_SET_MEMBER_NICKNAME,   */
    CLANID ClanJoinUnionCustomID;           	/* CLAN_OP_INVITE_JOIN_UNION,  被邀请的公会GID */
    CLANID ClanJoinUnionHostID;             	/* CLAN_OP_APPLY_JOIN_UNION,   */
    CLANID ClanExitUnionID;                 	/* CLAN_OP_EXIT_UNION,   */
    CLANID ClanJoinEnemyHostID;             	/* CLAN_OP_APPLY_JOIN_ENEMY,   */
    CLANID ClanExitEnemyID;                 	/* CLAN_OP_EXIT_ENEMY,   */
    CSCLANANSWER ClanAnswerJoinClan;              	/* CLAN_OP_ANSWER_JOIN_CLAN,   */
    CSCLANANSWER ClanAnswerJoinUnio;              	/* CLAN_OP_ANSWER_JOIN_UNION,   */
    CSCLANANSWER ClanAnswerJoinEnemy;             	/* CLAN_OP_ANSWER_JOIN_ENEMY,   */
    unsigned int ClanKeyID;                       	/* CLAN_OP_SEARCH,   */
    CSCLANCENSORCLAN ClanCensorJoinUnion;             	/* CLAN_OP_CENSOR_JOIN_UNION,   */
    CSCLANCENSORCLAN ClanCensorJoinEnemy;             	/* CLAN_OP_CENSOR_JOIN_ENEMY,   */
    char ClanCityName[CLAN_MAX_CITY_NAME_LEN]; 	/* CLAN_OP_ENABLE_CITY, Ver.121  */
    unsigned int ClanCityBuildingID;              	/* CLAN_OP_UPGRADE_CITY_BUILDING, Ver.121  Bind Macrosgroup:CLAN_CONSTRUCTION_INDEX,*/
    int ClanPayWhat;                     	/* CLAN_OP_PAY,   Bind Macrosgroup:CLAN_CLT_PAY_WHAT,*/
    CSCLANFINDREQ ClanFindReq;                     	/* CLAN_OP_FIND_REQ, Ver.175  */
    CSCLANVIEWPAGEBYID ClanViewPageByID;                	/* CLAN_OP_VIEW_PAGE_BY_ID, Ver.367  */
    CSCLANRESEARCH ClanResearch;                    	/* CLAN_OP_RESEARCH, Ver.407  */
    CSCLANCANCELRESEARCH ClanCancelResearch;              	/* CLAN_OP_CANCEL_RESEARCH, Ver.407  */
    CSCLANMAKE ClanMake;                        	/* CLAN_OP_MAKE, Ver.407  */
    CSCLANCANCELMAKING ClanCancelMaking;                	/* CLAN_OP_CANCEL_MAKING, Ver.407  */
    CSCLANGRABMACHINE ClanGrabMachine;                 	/* CLAN_OP_GRAB_MACHINE, Ver.407  */
    CSCLANCALLBACKMACHINE ClanCallbackMachine;             	/* CLAN_OP_CALLBACK_MACHINE, Ver.407  */
    CSCLANMACHINESUPPLY ClanMachineSupply;               	/* CLAN_OP_MACHINE_SUPPLY, Ver.407  */
    CSCLANSTORAGEGRIDLOCKSWITCH ClanStorageGridLockSwitch;       	/* CLAN_OP_STORAGE_GRID_LOCK_SWITCH, Ver.407  */
    CSCLANSTORAGEGRIDDESTROY ClanStorageGridDestroy;          	/* CLAN_OP_STORAGE_GRID_DESTROY, Ver.407  */
    CSCLANANSWER ClanAnswerExitEnemy;             	/* CLAN_OP_ANSWER_EXIT_ENEMY, Ver.481  */
    CSCLANSETJOBANDTITLE ClanSetJobAndTitle;              	/* CLAN_OP_SET_JOB_AND_TITLE, Ver.498  */
    CSCLANRESEARCHSPEEDUP ClanResearchSpeedup;             	/* CLAN_OP_RESEARCH_SPEEDUP, Ver.502  */
    CSCLANMAKINGSPEEDUP ClanMakingSpeedup;               	/* CLAN_OP_MAKING_SPEEDUP, Ver.502  */
    CSCLANRESOURCELOCKSWITCH ClanResourceLockSwitch;          	/* CLAN_OP_RESOURCE_LOCK_SWITCH, Ver.877  */
    CSCLANRESOURCEGRABITEM ClanResourceGrabItem;            	/* CLAN_OP_RESOURCE_GRAB_ITEM, Ver.877  */
    CSSETCLANCOLOR ClanSetColor;                    	/* CLAN_OP_SET_COLOR, Ver.948  */
    CSSETCLANMAPPOS ClanSetMapPos;                   	/* CLAN_OP_SET_MAP_POS, Ver.1123  */
    CSCLANSKILLRESEARCH ClanSkillResearch;               	/* CLAN_OP_SKILL_RESEARCH, Ver.1562  */
    CSCLANSKILLLEARN ClanSkillLearn;                  	/* CLAN_OP_SKILL_LEARN, Ver.1562  */
    CSCLANVIEWGETRES ViewGetResClt;                   	/* CLAN_OP_VIEW_GETRES_INFO, Ver.1634  */
    CSCLANSUMMONANSWER SummonAnswer;                    	/* CLAN_OP_CLAN_SUMMON_ANSWER, Ver.1887  */
    CSCLANSETGROUP ClanSetGroup;                    	/* CLAN_OP_SET_GROUP, Ver.1958  */
    CSCLANSETGROUPSTRONGMAP ClanSetGroupStrongMap;           	/* CLAN_OP_SET_GROUP_STRONG_MAP, Ver.1959  */
    CSCLANOPENGROUP ClanOpenGroup;                   	/* CLAN_OP_OPEN_GROUP, Ver.1970  */
    CSCLANKICKCITY KickCity;                        	/* CLAN_OP_KICK_CITY, Ver.2030  */
};

struct tagCSClanClt
{
    char Operation;                       	/*    Bind Macrosgroup:CLAN_CLT_OPERATON,*/
    unsigned char Res[3];                         
    CSCLANCLTDATA ClanCltData;                    
};

struct tagCSClanDart
{
    int EndTime;                         	/*   结束时间 0-关闭 */
};

struct tagCSClanSpend
{
    int LastTime;                        	/*   上一次扣费时间 */
    int NextTime;                        	/*   下一次扣费时间 */
};

struct tagCSClanViewGetResSvr
{
    int PageCount;                       	/*   一共有多少页 */
    int PageCurr;                        	/*   当前第几页 */
    int InfoNum;                        
    GETRESINFOONE GetResInfos[CLAN_VIEW_GETRES_NUM];
};

struct tagCSClanProfileId
{
    CLANID ClanID;                          	/*   公会标识 */
    char Leader[ROLE_NAME_LEN_SAVE];      	/*   会长 */
    int Time;                            	/*  Ver.686 时间 */
};

struct tagCSClanApplyProfileId
{
    CLANID ClanID;                          	/*   公会标识 */
    char Leader[ROLE_NAME_LEN_SAVE];      	/*   会长 */
    int ApplyTime;                       	/*   申请时间 */
};

struct tagCSClanDiplomatismSnapshot
{
    unsigned char FriendNum;                       	/*   盟友数量 */
    char Res1[3];                        
    CSCLANPROFILEID Friends[CLAN_MAX_FRIEND];        	/*  Ver.341  */
    unsigned char EnemyNum;                        	/*   敌人数量 */
    char Res2[3];                        
    CSCLANPROFILEID Enemys[CLAN_MAX_ENEMY];          	/*  Ver.341  */
};

struct tagCSClanInfo
{
    CLANPROF ProfInfo;                        	/*   概要信息 */
    ROLEMEMBER PresidentID;                     	/*   会长 */
    char BulletinText[SHORT_DESC_LEN];    	/*   公告信息 */
    int BulletinTextLastEditTime;        	/*  Ver.329 最后一次修改公告的时间 */
};

struct tagCSClanAsk
{
    CLANID ID;                             
    char HostName[NAME_LEN];              	/*   发起人的名字 */
};

struct tagCSClanMembers
{
    CLANID ID;                             
    unsigned short MemNum;                         
    unsigned char Res[2];                         
    CLANMEM Members[CLAN_MAX_MEM];          
};

struct tagCSClanMemberChg
{
    unsigned char Code;                            	/*    Bind Macrosgroup:CLAN_MEMBER_CHG_CODE,*/
    unsigned char Res[3];                         
    CLANMEM MemInfo;                        
};

struct tagCSClanView
{
    CLANPROF ProfInfo;                       
    CLANBRIEF BriefInfo;                      
    CLANCITYPROF CityInfo;                        	/*  Ver.119  */
};

struct tagCSClanViewPage
{
    unsigned short TotalClanNum;                    	/*   服务器中所有公会数量 */
    unsigned char Res[2];                         
    CSCLANVIEWPAGECOOKIE Cookie;                         
    CSCLANVIEW ClanView[CLAN_MAX_VIEW_PAGE_ROW]; 	/*   公会概况 */
};

struct tagCSClanIDSnapshot
{
    unsigned short Num;                            
    short Res;                            
    unsigned int IDs[CLAN_MAX_NUM_HARD];         
};

union tagClanViewChgData
{
    CSCLANVIEW Added;                           	/* CLAN_VIEW_CHG_ADD,   */
    unsigned int Deleted;                         	/* CLAN_VIEW_CHG_DEL,   */
    CSCLANVIEW Modified;                        	/* CLAN_VIEW_CHG_MOD,   */
};

struct tagCSClanViewChg
{
    char What;                            	/*    Bind Macrosgroup:CLAN_VIEW_CHG_CODE,*/
    char Res[3];                         
    CLANVIEWCHGDATA Data;                           
};

struct tagCSClanViewOfPage
{
    unsigned char Num;                            
    unsigned char Res[3];                         
    CSCLANVIEW View[CLAN_MAX_VIEW_PAGE_ROW];    	/*   每一行的公会信息 */
};

struct tagCSClanApplyJoinList
{
    CLANID ClanID;                         
    unsigned char RoleNum;                        
    unsigned char Res[3];                         
    CLANAPPLY ApplyRoles[CLAN_MAX_APPLY];     
};

struct tagCSClanDiplomatismStatus
{
    CLANID ID;                             
    unsigned char FriendNum;                      
    unsigned char EnemyNum;                       
    unsigned char ApplyFriendNum;                 
    unsigned char ApplyEnemyNum;                  
    CSCLANPROFILEID Friends[CLAN_MAX_FRIEND];        	/*  Ver.341  */
    CSCLANPROFILEID Enemys[CLAN_MAX_ENEMY];          	/*  Ver.341  */
    CSCLANAPPLYPROFILEID ApplyFriends[CLAN_MAX_APPLY_FRIEND]; 	/*  Ver.341  */
    CSCLANAPPLYPROFILEID ApplyEnemys[CLAN_MAX_APPLY_ENEMY]; 	/*  Ver.341  */
};

struct tagCSClanFindRes
{
    char Num;                             	/*   查询结果的数量 */
    char Res1[3];                        
    char HasRemain;                       	/*   是否还有更多结果 */
    char Res2[3];                        
    CSCLANVIEW ClanView[CLAN_MAX_VIEW_PAGE_ROW]; 	/*   结果数据 */
};

struct tagCSClanNotify
{
    char Code;                            	/*   消息代码 Bind Macrosgroup:CLAN_NOTIFY_CODE,*/
    char Res[3];                         
};

struct tagCSClanBulletin
{
    char BulletinText[SHORT_DESC_LEN];   
    int BulletinLastWrite;              
};

struct tagCSClanPropertyNotify
{
    char Which;                           	/*   哪个属性 Bind Macrosgroup:CLAN_PROPERTY_TYPE,*/
    char Res1[3];                        
    int Value;                           	/*   值 */
};

struct tagCSClanAdvanceSnapshot
{
    CLANADVANCE Snapshot;                        	/*   公会高级信息 */
};

union tagClanStorageGridNotifyExtension
{
    CLANSTORAGEGRID Added;                           	/* CLAN_STORAGE_GRID_ADD,  增加了一个物品/机械 */
    int Deleted;                         	/* CLAN_STORAGE_GRID_DEL,  减少了一个物品/机械 */
    CLANSTORAGEGRID Modified;                        	/* CLAN_STORAGE_GRID_MOD,  一个格子中的物品/机械发生了变化 */
};

struct tagCSClanStorageGridNotify
{
    char What;                            	/*   格子发生了哪种改变 Bind Macrosgroup:CLAN_STORAGE_GRID_CHANGE,*/
    char Res1[3];                        
    char Which;                           	/*   哪个仓库发生了变化 Bind Macrosgroup:CLAN_STORAGE_CATEGORY,*/
    char Res2[3];                        
    CLANSTORAGEGRIDNOTIFYEXTENSION Data;                            	/*   变化的数据 */
};

struct tagClanBuildingBeginNotifier
{
    char Idx;                             	/*   建筑的索引 Bind Macrosgroup:CLAN_CONSTRUCTION_INDEX,*/
    char Res1[3];                        
    int BeginTime;                       	/*   开始建造的时间 */
    int EndTime;                         	/*   完成建造的时间 */
};

union tagClanBuildingNotifyExtension
{
    CLANBUILDINGBEGINNOTIFIER Begin;                           	/* CLAN_BUILDING_BEGIN,  建造/升级开始 */
    int Completed;                       	/* CLAN_BUILDING_COMPLETED,  建造/升级完成 Bind Macrosgroup:CLAN_CONSTRUCTION_INDEX,*/
};

struct tagCSClanBuildingNotify
{
    char What;                            	/*   建筑发生了那种变化 Bind Macrosgroup:CLAN_BUILDING_NOTIFY,*/
    char Res1[3];                        
    CLANBUILDINGNOTIFYEXTENSION Data;                            	/*   变化的数据 */
};

struct tagCSClanColorNotify
{
    SETCLANCOLOR Set;                            
};

struct tagCSClanMapPosNotify
{
    CLANMAPPOS Info;                           
};

struct tagCSClanYesterdayClanTouchNotify
{
    int Num;                             	/*   公会昨日摸宝次数 */
};

struct tagClanSummonAsk
{
    int SummonMemID;                     	/*   召唤发起人的MemID */
    int Map;                             	/*   地图ID */
    int X;                               	/*   坐标x */
    int Y;                               	/*   坐标y */
    int OverTime;                        	/*   过期倒计时,单位秒 */
    char RoleName[NAME_LEN];              	/*  Ver.1907  */
    int Postion;                         	/*  Ver.1907  */
};

struct tagClanSummonCloseUI
{
    char Res;                            
};

union tagCSClanSvrData
{
    CSCLANASK ClanAskJoinClan;                 	/* CLAN_SVR_ASK_JOIN_CLAN,   */
    CSCLANASK ClanAskJoinUnion;                	/* CLAN_SVR_ASK_JOIN_UNION,   */
    CSCLANASK ClanAskJoinEnemy;                	/* CLAN_SVR_ASK_JOIN_ENEMY,   */
    CSCLANINFO ClanInfo;                        	/* CLAN_SVR_INFO,   */
    CSCLANMEMBERS ClanMemberSnapshot;              	/* CLAN_SVR_MEMBER_SNAPSHOT,   */
    CSCLANMEMBERCHG ClanMemberChg;                   	/* CLAN_SVR_MEMBER_CHG,   */
    CSCLANVIEWPAGE ClanViewPage;                    	/* CLAN_SVR_CLAN_VIEW_PAGE,   */
    CSCLANAPPLYJOINLIST ClanApplyJoinList;               	/* CLAN_SVR_APPLY_JOIN_LIST,   */
    CSCLANDIPLOMATISMSTATUS ClanDiplomatismStatus;           	/* CLAN_SVR_DIPLOMATISM_STATUS,   */
    char ClanMsgText[CLT_MSG_LEN];        	/* CLAN_SVR_MSG,   */
    char ClanManifestoText[SHORT_DESC_LEN]; 	/* CLAN_SVR_MANIFESTO,   */
    char ClanName[NAME_LEN];              	/* CLAN_SVR_CREATE,   */
    CSCLANBULLETIN ClanBulletin;                    	/* CLAN_SVR_BULLETIN, Ver.346  */
    CLANCITY ClanCityInfo;                    	/* CLAN_SVR_CITY_INFO, Ver.121  */
    CSCLANFINDRES ClanFindRes;                     	/* CLAN_SVR_FIND_RES, Ver.175  */
    CSCLANDIPLOMATISMSNAPSHOT ClanDiplomatismSnapshot;         	/* CLAN_SVR_DIPLOMATISM_CHG, Ver.182  */
    CSCLANNOTIFY ClanNotify;                      	/* CLAN_SVR_NOTIFY, Ver.304  */
    CSCLANIDSNAPSHOT ClanIDSnapshot;                  	/* CLAN_SVR_ID_SNAPSHOT, Ver.367  */
    CSCLANVIEWCHG ClanViewChg;                     	/* CLAN_SVR_VIEW_CHG, Ver.367  */
    CSCLANVIEWOFPAGE ClanViewOfPage;                  	/* CLAN_SVR_VIEW_PAGE, Ver.367  */
    CSCLANADVANCESNAPSHOT ClanAdvanceSnapshot;             	/* CLAN_SVR_ADVANCE_SNAPSHOT, Ver.407  */
    CSCLANPROGRESSNOTIFY ClanResearchNotify;              	/* CLAN_SVR_RESEARCH_NOTIFY, Ver.407  */
    CSCLANPROGRESSNOTIFY ClanMakingNotify;                	/* CLAN_SVR_MAKING_NOTIFY, Ver.407  */
    CSCLANSTORAGEGRIDNOTIFY ClanStorageGridNotify;           	/* CLAN_SVR_STORAGE_GRID_NOTIFY, Ver.407  */
    CSCLANPROPERTYNOTIFY ClanPropertyNotify;              	/* CLAN_SVR_PROPERTY_NOTIFY, Ver.451  */
    CSCLANBUILDINGNOTIFY ClanBuildingNotify;              	/* CLAN_SVR_BUILDING_NOTIFY, Ver.466  */
    CSCLANASK ClanAskExitEnemy;                	/* CLAN_SVR_ASK_EXIT_ENEMY, Ver.481  */
    CLANRESOURCEINFO ClanResourceNotify;              	/* CLAN_SVR_RESOURCE_NOTIFY, Ver.870  */
    CSCLANCOLORNOTIFY ClanColorNotify;                 	/* CLAN_SVR_COLOR_NOTIFY, Ver.948  */
    CSCLANMAPPOSNOTIFY MapPosInfo;                      	/* CLAN_SVR_MAP_POS_NOTIFY, Ver.1123  */
    CSCLANYESTERDAYCLANTOUCHNOTIFY YesterdayClanTouchNotify;        	/* CLAN_SVR_YESTERDAY_CLAN_TOUCH_NOTIFY, Ver.1185  */
    CSCLANVIEWGETRESSVR ViewGetResSvr;                   	/* CLAN_SVR_GETRES_INFO, Ver.1634  */
    CLANSUMMONASK SummonAsk;                       	/* CLAN_SVR_SUMMON_ASK, Ver.1887  */
    CLANSUMMONCLOSEUI SummonCloseUi;                   	/* CLAN_SVR_SUMMON_UI_CLOSE, Ver.1887  */
    CLANGROUPINFO ClanGroupInfo;                   	/* CLAN_SVR_GROUP_INFO, Ver.1959  */
    CSCLANDART ClanDart;                        	/* CLAN_SVR_DART_INFO, Ver.2138  */
    CSCLANSPEND ClanSpend;                       	/* CLAN_SVR_SPEND_INFO, Ver.2301  */
};

struct tagCSClanSvr
{
    char Operation;                       	/*    Bind Macrosgroup:CLAN_SVR_OPERATON,*/
    unsigned char Res[3];                         
    CSCLANSVRDATA ClanSvrData;                    
};

struct tagMailPostItem
{
    char ListType;                        	/*   哪个包 */
    unsigned char Res1[3];                        
    unsigned short GridIdx;                         	/*   哪个位置 */
    unsigned char Res2[2];                        
    unsigned short GridNum;                         	/*   堆叠个数 */
    unsigned char Res3[2];                        
    tdr_ulonglong WID;                             	/*   物品唯一ID */
};

struct tagMailSendCost
{
    char ListType;                        	/*   哪个包 */
    unsigned char Res1[3];                        
    unsigned short GridIdx;                         	/*   哪个位置 */
    unsigned char Res2[2];                        
    tdr_ulonglong WID;                             	/*   物品唯一ID */
};

struct tagCSMailCltSend
{
    char To[ROLE_NAME_LEN_SAVE];          	/*   收件人 */
    char Title[MAIL_MAX_TITLE_LEN];       	/*   标题 */
    unsigned char Res1[3];                        
    char Text[SHORT_DESC_LEN];            	/*   正文 */
    unsigned char ItemNum;                         	/*   邮寄的物品数量 */
    unsigned char Res2[3];                        
    MAILPOSTITEM Items[MAIL_MAX_ITEM];            	/*   邮寄的物品 */
    unsigned int Gold;                            	/*   邮寄的金币 */
    MAILSENDCOST Cost;                            	/*  Ver.218 邮寄物品的消耗品 */
};

struct tagCSMailGettingList
{
    tdr_ulonglong WID;                             	/*   邮件的WID */
    char How;                             	/*   如何收取物品 Bind Macrosgroup:MAIL_GETTING_OPERATON,*/
    unsigned char Res[3];                         
    tdr_ulonglong ItemWID;                         	/*   物品的WID */
    int NoDel;                           	/*  Ver.2037  */
};

union tagCSMailCltData
{
    tdr_ulonglong MailWIDForRead;                  	/* MAIL_CLT_READ,  需阅读的邮件WID */
    tdr_ulonglong MailWIDForDelete;                	/* MAIL_CLT_DELETE,  需删除的邮件WID */
    CSMAILCLTSEND MailCltSend;                     	/* MAIL_CLT_SEND,  发送的邮件数据 */
    CSMAILGETTINGLIST MailGettingList;                 	/* MAIL_CLT_GET,  收取邮件物品的清单 */
};

struct tagCSMailClt
{
    char Operation;                       	/*    Bind Macrosgroup:MAIL_CLT_OPERATON,*/
    unsigned char Res[3];                         
    CSMAILCLTDATA MailCltData;                    
};

struct tagCSMailSvrHeadSnapshot
{
    unsigned char Num;                             	/*   邮件头总数 */
    unsigned char Res[3];                         
    MAILHEAD Heads[MAIL_MAX_HEAD_NUM];        	/*   本页的邮件头信息 */
};

struct tagMailChgWIDs
{
    unsigned char Num;                             	/*   WID列表的数目 */
    unsigned char Res[3];                         
    tdr_ulonglong WIDs[MAIL_MAX_NUM];              	/*   变化的WID列表 */
};

struct tagCSMailHeadMod
{
    tdr_ulonglong WID;                             	/*   邮件全局唯一ID */
    int Flags;                           	/*   按位取值的标志，请见MAIL_FLAG宏定义 */
};

union tagMailChgInfo
{
    MAILHEAD AddedHead;                       	/* MAIL_CHG_ADD,  增加的邮件 */
    MAILCHGWIDS DeletedWIDs;                     	/* MAIL_CHG_DEL,  被删除的邮件WID */
    CSMAILHEADMOD ModHead;                         	/* MAIL_CHG_MOD, Ver.2037 修改邮件 */
};

struct tagCSMailSvrChg
{
    unsigned char What;                            	/*   何种变化 Bind Macrosgroup:MAIL_CHG,*/
    unsigned char Res[3];                         
    MAILCHGINFO ChgInfo;                         	/*   变化的数据 */
};

struct tagCSMailSvrGoodsChg
{
    tdr_ulonglong WID;                             	/*   邮件WID */
    unsigned int Money;                           	/*   邮件中减少的金钱数 */
    unsigned char Num;                             	/*   邮件中减少的物品数量 */
    unsigned char Res[3];                         
    tdr_ulonglong ItemWIDs[MAIL_MAX_ITEM];         	/*   邮件中减少的物品WID */
};

struct tagCSMailSvrSendRes
{
    char Succeeded;                       	/*   0:失败，否则成功 */
};

union tagCSMailSvrData
{
    CSMAILSVRCHG MailChgData;                     	/* MAIL_SVR_HEAD_CHG,  变化的邮件数据 */
    CSMAILSVRHEADSNAPSHOT MailHeadSnapshot;                	/* MAIL_SVR_HEAD_SNAPSHOT,  邮件头快照 */
    MAIL MailContent;                     	/* MAIL_SVR_CONTENT,  一封邮件的全部数据 */
    CSMAILSVRGOODSCHG MailGoodsChgData;                	/* MAIL_SVR_GOODS_CHG,  邮件货物变化数据 */
    CSMAILSVRSENDRES MailSendRes;                     	/* MAIL_SVR_SEND_RES, Ver.107 发送邮件结果 */
};

struct tagCSMailSvr
{
    char Operation;                       	/*    Bind Macrosgroup:MAIL_SVR_OPERATON,*/
    unsigned char Res[3];                         
    CSMAILSVRDATA MailSvrData;                    
};

struct tagCSBulletinSnapshot
{
    char Num;                            
    char Res[3];                         
    BULLETINENTRY BulletinArray[MAX_BULLETIN_NUM];
};

union tagCSBulletinSvrData
{
    CSBULLETINSNAPSHOT BulletinSnapshot;                	/* BULLETIN_SVR_SNAPSHOT,  公告快照 */
    BULLETINENTRY BulletinAdded;                   	/* BULLETIN_SVR_CHG_ADD,  增加一个公告 */
    int BulletinDeletedID;               	/* BULLETIN_SVR_CHG_DEL,  减少一个公告 */
};

struct tagCSBulletinSvr
{
    char Operation;                       	/*    Bind Macrosgroup:BULLETIN_SVR_OPERATON,*/
    char Res[3];                         
    CSBULLETINSVRDATA BulletinSvrData;                
};

union tagCSRespactSvrData
{
    RESPACTINFO RespactInfo;                     	/* RESPACT_SVR_INFO,  所有声望信息 */
    RESPACTENTRY RespactChg;                      	/* RESPACT_SVR_CHG,  某一个声望的变化 */
};

struct tagCSRespactSvr
{
    char Operation;                       	/*    Bind Macrosgroup:RESPACT_SVR_OPERATON,*/
    char Res[3];                         
    CSRESPACTSVRDATA RespactSvrData;                 
};

struct tagExtendedItemPos
{
    char ListType;                        	/*   哪个包 */
    unsigned char Res1[3];                        
    unsigned short GridIdx;                         	/*   哪个位置 */
    unsigned char Res2[2];                        
    tdr_ulonglong WID;                             	/*   物品唯一ID */
};

struct tagExtendItemClt
{
    EXTENDEDITEMPOS BeExtended;                      	/*   哪件装备被附魔 */
    EXTENDEDITEMPOS BeUsed;                          	/*   被使用的附魔卷轴 */
};

struct tagExtendItemSave
{
    EXTENDEDITEMPOS BeExtended;                      	/*   哪件装备被附魔 */
    int FromItemID;                      	/*   验证一下 */
    EXTENDEDRESULT Result;                         
};

struct tagExtendItemSvr
{
    EXTENDEDITEMPOS BeExtended;                      	/*   哪件装备被附魔 */
    char Succeeded;                       	/*   附魔是否成功 */
    char Res[3];                         
    int FromItemID;                      	/*  Ver.2050  */
    EXTENDEDRESULT Result;                          	/*  Ver.2050  */
};

struct tagCSRuneEnableClt
{
    unsigned short SkillID;                         	/*   指定激活的技能ID */
};

struct tagCSRuneSetClt
{
    unsigned short SkillID;                         	/*   指定被镶嵌的技能ID */
    CSRUNEITEM RuneItem;                        	/*   符文物品 */
};

struct tagCSRuneDelClt
{
    unsigned short SkillID;                         	/*   指定被遗忘的技能ID */
    CSRUNEITEM RuneItem;                        	/*   符文遗忘卷轴 */
};

union tagCSRuneCltExtension
{
    CSRUNEENABLECLT RuneEnable;                      	/* RUNE_CLT_ENABLE,   */
    CSRUNESETCLT RuneSet;                         	/* RUNE_CLT_SET,   */
    CSRUNEDELCLT RuneDel;                         	/* RUNE_CLT_DEL, Ver.559  */
};

struct tagCSRuneClt
{
    char Operation;                       	/*    Bind Macrosgroup:RUNE_CLT_OPERATION,*/
    unsigned char Res[3];                         
    CSRUNECLTEXTENSION Extension;                      
};

struct tagCSRuneEnableSvr
{
    char Succeeded;                       	/*   结果:0失败,否则成功 */
    char Res[3];                         
    unsigned short SkillID;                         	/*   指定激活的技能ID */
};

struct tagCSRuneSetSvr
{
    char Succeeded;                       	/*   结果:0失败,否则成功 */
    char Res[3];                         
    unsigned short SkillID;                         	/*   指定被镶嵌的技能ID */
};

struct tagCSRuneDelSvr
{
    char Succeeded;                       	/*   结果:0失败,否则成功 */
    char Res[3];                         
    unsigned short SkillID;                         	/*   指定被摘取的技能ID */
};

union tagCSRuneSvrExtension
{
    CSRUNEENABLESVR RuneEnable;                      	/* RUNE_SVR_ENABLE,   */
    CSRUNESETSVR RuneSet;                         	/* RUNE_SVR_SET,   */
    CSRUNEDELSVR RuneDel;                         	/* RUNE_SVR_DEL, Ver.559  */
};

struct tagCSRuneSvr
{
    char Operation;                       	/*    Bind Macrosgroup:RUNE_SVR_OPERATION,*/
    unsigned char Res[3];                         
    CSRUNESVREXTENSION Extension;                      
};

struct tagTrustTaskItem
{
    unsigned int ItemID;                         
    unsigned short Num;                            
};

struct tagCSTrustContribute
{
    tdr_ulonglong RoleID;                         
    unsigned int TaskID;                         
    unsigned char ItemNum;                        
    TRUSTTASKITEM TrustItem[MAX_TASK_ITEM];       
};

struct tagCSTrustRoleList
{
    unsigned char RoleNum;                        
    tdr_ulonglong RoleID[MAX_BUDDY];              
};

union tagCSTrustCltData
{
    unsigned char TrustOpen;                       	/* TRUST_OPEN_FACE,  打开委托挂单 */
    CSTRUSTROLELIST TrustRoleList;                   	/* TRUST_ROLE_ORDER,  请求角色挂单信息 */
    CSTRUSTCONTRIBUTE TrustContribute;                 	/* TRUST_CONTRIBUTE, Ver.86 赠送委托物品 */
    unsigned int OrderTrustID;                    	/* TRUST_ORDER,  发布挂单 */
    unsigned int CancelTrustID;                   	/* TRUST_CANCEL_ORDER,  取消挂单 */
};

struct tagCSTrustClt
{
    char TrustCltType;                    	/*    Bind Macrosgroup:TRUST_CLT_TYPE,*/
    CSTRUSTCLTDATA TrustCltData;                   
};

struct tagTrustVersion
{
    tdr_ulonglong RoleID;                         
    short RoleTrustVersion;               
};

struct tagCSTrustVersionList
{
    unsigned char RoleNum;                        
    TRUSTVERSION RoleVersionList[MAX_BUDDY];     
};

struct tagTrustTask
{
    unsigned int TaskID;                         
    unsigned char ItemNum;                        
    TRUSTTASKITEM TrustItem[MAX_TASK_ITEM];       
};

struct tagRoleTrustData
{
    tdr_ulonglong RoleID;                         
    short RoleTrustVersion;               
    unsigned char TrustNum;                       
    TRUSTTASK TrustTaskData[MAX_TRUST_ORDER]; 
};

struct tagCSTrustOrderList
{
    unsigned char RoleNum;                        
    ROLETRUSTDATA RoleTrust[MAX_BUDDY];           
};

union tagCSTrustSvrData
{
    CSTRUSTVERSIONLIST TrustVerList;                    	/* TRUST_VER_LIST,  角色版本信息列表  */
    CSTRUSTORDERLIST TrustOrderList;                  	/* TRUST_ORDER_LIST,  角色挂单信息列表 */
    char TrustContributeMsg[SHORT_DESC_LEN]; 	/* TRUST_CONTRIBUTE_MSG,  赠送信息 */
};

struct tagCSTrustSvr
{
    char TrustSvrType;                    	/*    Bind Macrosgroup:TRUST_SVR_TYPE,*/
    CSTRUSTSVRDATA TrustSvrData;                   
};

struct tagStallItem
{
    int DefID;                          
    tdr_ulonglong WID;                            
    char ListType;                       
    char GridIdx;                        
    char StallGridIdx;                   
    int Num;                            
    unsigned int Price;                           	/*   单价 */
    tdr_ulonglong GirdGID;                         	/*  Ver.558 客户端不用填写这个字段 */
};

struct tagStallPet
{
    int DefID;                          
    tdr_ulonglong WID;                            
    char ListType;                       
    char GridIdx;                        
    char StallGridIdx;                   
    unsigned int Price;                           	/*   单价 */
    tdr_ulonglong GirdGID;                         	/*  Ver.558 客户端不用填写这个字段 */
};

struct tagStallData
{
    char StallName[STALL_MAX_NAME_LEN];  
    char StallAdMsg[STALL_MAX_NAME_LEN];  	/*  Ver.210 摊位的广告消息,30秒发一次，每次显示5秒 */
    unsigned char ItemNum;                        
    STALLITEM ItemData[STALL_MAX_ITEM];       
    unsigned char PetNum;                         
    STALLPET PetData[STALL_MAX_PET];         
};

struct tagStallStartReq
{
    STALLDATA CSStallData;                    
};

struct tagStallEndReq
{
    char Res;                            
};

struct tagStallChgNameReq
{
    char StallName[STALL_MAX_NAME_LEN];  
};

struct tagStallSeeReq
{
    int MemID;                           	/*   摊主内存ID */
};

struct tagStallAddGridReq
{
    char Res;                            
};

struct tagStallBuyReq
{
    char RoleName[NAME_LEN];              	/*   摊主 */
    tdr_ulonglong WID;                            
    tdr_ulonglong GirdGID;                         	/*  Ver.558 此字段在SeeReq回复中通知客服端 */
    unsigned int Num;                            
    char StallGridIdx;                   
    char StallType;                       	/*    Bind Macrosgroup:STALL_TYPE,*/
};

struct tagStallDownReq
{
    char StallType;                       	/*   宠物还是道具  Bind Macrosgroup:STALL_TYPE,*/
    tdr_ulonglong WID;                            
    char StallGridIdx;                   
};

union tagStallUpData
{
    STALLITEM StallItem;                       	/* STALL_TYPE_ITEM,   */
    STALLPET StallPet;                        	/* STALL_TYPE_PET,   */
};

struct tagStallUpReq
{
    char Type;                            	/*    Bind Macrosgroup:STALL_TYPE,*/
    unsigned char Res[3];                         
    STALLUPDATA StallUpData;                    
};

union tagCSStallDataClt
{
    STALLSTARTREQ StallStartClt;                   	/* CLT_STALL_START,   */
    STALLENDREQ StallEndClt;                     	/* CLT_STALL_END,   */
    STALLCHGNAMEREQ StallChgNameClt;                 	/* CLT_STALL_CHANGE_NAME,   */
    STALLSEEREQ StallSeeClt;                     	/* CLT_STALL_SEE,   */
    STALLBUYREQ StallBuyClt;                     	/* CLT_STALL_BUY,   */
    STALLADDGRIDREQ StallAddGridClt;                 	/* CLT_STALL_ADD_GRID,   */
    STALLCHGNAMEREQ StallChgAdMsgClt;                	/* CLT_STALL_CHANGE_ADMSG,   */
    STALLDOWNREQ StallDownClt;                    	/* CLT_STALL_DOWN, Ver.558  */
    STALLUPREQ StallUpClt;                      	/* CLT_STALL_UP, Ver.558  */
};

struct tagCSStallClt
{
    char Type;                            	/*    Bind Macrosgroup:STALL_CLT_TYPE,*/
    unsigned char Res[3];                         
    CSSTALLDATACLT StallCltData;                   
};

struct tagStallStartRes
{
    char StallName[STALL_MAX_NAME_LEN];  
};

struct tagStallEndRes
{
    tdr_ulonglong RoleID;                         
};

struct tagStallChgNameRes
{
    char StallName[STALL_MAX_NAME_LEN];  
};

struct tagStallItemEntity
{
    unsigned char StallGridIdx;                   
    unsigned int Price;                          
    ROLEGRID RoleGrid;                       
    tdr_ulonglong GridGID;                         	/*  Ver.558 每个格子全局唯一ID  玩家Buy请求要传入此ID */
};

struct tagStallPetEntity
{
    char StallGridIdx;                   
    ROLEPET RolePet;                        
    unsigned int Price;                          
    tdr_ulonglong GridGID;                         	/*  Ver.558 每个格子全局唯一ID  玩家Buy请求要传入此ID */
};

struct tagStallSeeRes
{
    char RoleName[NAME_LEN];              	/*   摊主 */
    char StallName[STALL_MAX_NAME_LEN];  
    unsigned char ItemNum;                        
    STALLITEMENTITY ItemEntity[STALL_MAX_ITEM];     
    unsigned char PetNum;                         
    STALLPETENTITY PetEntity[STALL_MAX_PET];       
};

struct tagStallInfoChg
{
    char BuyName[NAME_LEN];               	/*   买家 */
    char StallType;                       	/*    Bind Macrosgroup:STALL_TYPE,*/
    char StallGridIdx;                   
    int Num;                            
    tdr_ulonglong WID;                            
};

struct tagStallBuyRes
{
    STALLINFOCHG StallInfoBuy;                   
};

struct tagStallChgAdMsgRes
{
    int iSucc;                           	/*   0-fail  1-succ */
};

struct tagStallDownRes
{
    char StallType;                       	/*  Ver.586  Bind Macrosgroup:STALL_TYPE,*/
    char StallGridIdx;                    	/*  Ver.586  */
    int Succ;                            	/*   0-失败  1-成功 */
};

struct tagStallUpRes
{
    char StallType;                       	/*  Ver.586  Bind Macrosgroup:STALL_TYPE,*/
    char StallGridIdx;                    	/*  Ver.586  */
    int Succ;                            	/*   0-失败  1-成功 */
};

struct tagStallShowAdMsgRes
{
    int WID;                             	/*   玩家的全局的id */
    char StallShowAdMsg[STALL_MAX_NAME_LEN]; 	/*   显示的广告信息 */
    unsigned int ShowTime;                        	/*   显示的持续时间,单位秒 */
};

union tagCSStallDataSvr
{
    STALLSTARTRES StallStartSvr;                   	/* SVR_STALL_START,   */
    STALLENDRES StallEndSvr;                     	/* SVR_STALL_END,   */
    STALLCHGNAMERES StallChgNameSvr;                 	/* SVR_STALL_CHANGE_NAME,   */
    STALLSEERES StallSeeSvr;                     	/* SVR_STALL_SEE,   */
    STALLBUYRES StallBuySvr;                     	/* SVR_STALL_BUY,   */
    STALLINFOCHG StallInfoChg;                    	/* SVR_STALL_INFO_CHG,   */
    unsigned char StallGridNum;                    	/* SVR_STALL_GRID_NUM,   */
    STALLSHOWADMSGRES StallShowAdMsgSvr;               	/* SVR_STAL_SHOW_ADMSG, Ver.210  */
    STALLUPRES StallUpRes;                      	/* SVR_STAL_UP_RES, Ver.558  */
    STALLDOWNRES StallDownRes;                    	/* SVR_STAL_DOWN_RES, Ver.558  */
    STALLCHGADMSGRES StallChgAdMsgRes;                	/* SVR_STAL_CHG_ADMSG_RES, Ver.600  */
};

struct tagCSStallSvr
{
    char Type;                            	/*    Bind Macrosgroup:STALL_SVR_TYPE,*/
    unsigned char Res[3];                         
    CSSTALLDATASVR StallCltData;                   
};

struct tagArmLegendUp
{
    ARMIDXDATA SrcArm;                         
    ARMIDXDATA SrcScroll;                      
    char Num;                             	/*   继承几条 */
    char Idxs[ARM_LEGEND_MAX];            	/*   继承索引 */
};

struct tagArmSkillRecastActive
{
    ARMIDXDATA Src;                             	/*   哪个装备 */
};

struct tagArmSkillRecastLock
{
    int Idx;                             	/*   第几条 */
    ARMIDXDATA Src;                             	/*   哪个装备 */
};

struct tagArmSkillRecastReset
{
    ARMIDXDATA Src;                             	/*   哪个装备 */
    ARMIDXDATA Stuff;                           	/*   哪个材料 */
};

struct tagArmSkillActive
{
    int Idx;                             	/*   第几条 */
    ARMIDXDATA Src;                             	/*   激活装备 */
    ARMIDXDATA Use;                             	/*   激活石 */
};

struct tagArmBaseReSetSave
{
    ARMIDXDATA Src;                             	/*   重置装备 */
};

struct tagArmBaseReSet
{
    ARMIDXDATA Src;                             	/*   重置装备 */
    ARMIDXDATA UseItem;                         	/*   使用道具 */
    int ArmNum;                         
    ARMIDXDATA ArmStuffs[ARM_BASE_ATTR_RESET_MAX]; 	/*   消耗的装备  */
};

struct tagArmStepUp
{
    ARMIDXDATA Src;                             	/*   升阶装备 */
    int ArmNum;                         
    ARMIDXDATA ArmStuffs[ARM_STEP_UP_STUFF];    	/*   消耗的装备  */
};

struct tagSparCullData
{
    ARMIDXDATA Src;                             	/*   源位置  */
    ARMIDXDATA Dsc;                             	/*   目标位置  */
};

struct tagSparInlayData
{
    ARMIDXDATA Src;                             	/*   源位置  */
    ARMIDXDATA Dsc;                             	/*   目标位置  */
};

struct tagAddPowerStuff
{
    short ItemNum;                        
    short ListType;                        	/*    Bind Macrosgroup:LIST_TYPE,*/
    int GridIdx;                        
    int ItemID;                         
};

struct tagSparSorbData
{
    ARMIDXDATA Src;                             	/*   源位置  */
    unsigned char StuffNum;                        	/*   材料数量 */
    ADDPOWERSTUFF StuffData[MAX_SPAR_SORB_STUFF];  	/*   材料列表 */
};

struct tagGemAddPower
{
    int OpType;                          	/*  Ver.1150 0-普通充能1-vip充能 */
    int UseType;                         	/*  Ver.1150 0-金券1-金币 */
    int ArmHoleIdx;                      	/*   装备上第几个宝石,如果是背包忽略此字段 */
    ARMIDXDATA ArmData;                        
    unsigned char StuffNum;                        	/*   材料数量 */
    ADDPOWERSTUFF StuffData[GEM_ADD_POWER_LIST];   	/*   材料列表 */
};

struct tagGemReSet
{
    int ArmHoleIdx;                      	/*   装备上第几个宝石 */
    int UseType;                         	/*   玩家选择消耗金币还是金券 0-金券 1-金币 */
    ARMIDXDATA ArmData;                        
};

struct tagArmAttrMove
{
    char Type;                            	/*  Ver.2203 0-基础属性 1-装备技能 */
    ARMIDXDATA SrcData;                         	/*   源装备 */
    ARMIDXDATA DstData;                         	/*   目标装备 */
    ARMIDXDATA UseData;                         	/*   消耗道具 */
};

struct tagGemReSetSave
{
    ARMIDXDATA ArmData;                        
};

struct tagArmAttrReSet
{
    ARMIDXDATA ArmData;                        
    int Idx;                            
    int UseItemID;                      
    int Bind;                           
};

struct tagArmUpData
{
    ARMIDXDATA ArmData;                        
    unsigned char StuffNum;                        	/*   材料数量 */
    STUFFIDXDATA StuffData[MAX_ARM_STUFF];        	/*  Ver.183 材料列表 */
    STUFFIDXDATA SafeData;                        	/*  Ver.183 保险符 */
};

struct tagGemLevelUpData
{
    unsigned char GemNum;                          	/*   材料数量 */
    STUFFIDXDATA GemData[MAX_UP_GEM_LIST];        	/*  Ver.183 材料列表 */
    STUFFIDXDATA StuffData;                       	/*  Ver.183 宝石升级符 */
    unsigned char IfBaoXian;                       	/*  Ver.2312 是否买保险 Bind Macrosgroup:IF_BAO_TYPE,*/
};

struct tagGemInlayData
{
    ARMIDXDATA ArmData;                        
    unsigned char ArmHoleIdx;                      	/*   镶嵌位置  */
    STUFFIDXDATA GemData;                         	/*  Ver.183 镶嵌宝石 */
    STUFFIDXDATA SafeData;                        	/*  Ver.183 宝石镶嵌所需道具 */
};

struct tagGemPickData
{
    ARMIDXDATA ArmData;                        
    unsigned char ArmHoleIdx;                      	/*   摘取位置  */
    STUFFIDXDATA StuffData;                       	/*  Ver.183 宝石镶嵌符ID */
};

struct tagGemOpenHoleData
{
    ARMIDXDATA ArmData;                        
    unsigned char ArmHoleIdx;                      	/*   装备开孔位置, 起始为1  */
};

/* 品质转移 */
struct tagArmMoveStarData
{
    ARMIDXDATA SrcArmData;                     
    ARMIDXDATA DstArmData;                     
    int Bind;                            	/*  Ver.1198 使用的宝石材料是否绑定（0、非绑定;1、绑定;） */
};

struct tagArmBindData
{
    ARMIDXDATA ArmData;                        
};

struct tagArmUnBindData
{
    ARMIDXDATA ArmData;                        
    STUFFIDXDATA StuffData;                       	/*   取消绑定消耗的道具,没有的话，就扣钱了 */
};

struct tagArmUnFengYinPre
{
    ARMIDXDATA ArmData;                        
};

struct tagArmUnFengYin
{
    ARMIDXDATA ArmData;                        
};

struct tagArmFenJie
{
    int Type;                            	/*  Ver.1127 0-装备 1-宝石2-提炼 */
    ARMDETAILDATA ArmData;                         	/*   装备信息（位置及wId） */
    ARMDETAILDATA TiLianData;                      	/*  Ver.1886 提炼道具信息 */
};

struct tagRecastArmInfo
{
    unsigned short Idx;                            
    unsigned short ListType;                        	/*    Bind Macrosgroup:LIST_TYPE,*/
};

struct tagArmRecastData
{
    RECASTARMINFO ArmInfo;                         	/*   装备信息 */
    char OperateType;                     	/*    Bind Macrosgroup:OPERATE_TYPE,*/
    int ItemID;                          	/*   普通重铸消耗的材料ID */
    char ConsumeType;                     	/*   消费类型：金币OR金券 Bind Macrosgroup:CONSUME_TYPE,*/
    int Bind;                            	/*  Ver.1289 使用的重铸石是否绑定（0、非绑定;1、绑定;） */
    int Idx;                             	/*  Ver.1953 单条属性重铸索引 */
    int Must;                            	/*  Ver.2116  */
};

struct tagArmSaveRecastData
{
    RECASTARMINFO ArmInfo;                         	/*   装备信息 */
    int selectIdx;                       	/*   选择结果索引（即选择第几个结果） */
};

struct tagArmStarData
{
    ARMIDXDATA ArmData;                        
    int SelectStar;                      	/*   强化哪一颗星，1-12 */
    int Bind;                            	/*   选择哪种类型强化石，0绑定的1绑定的 */
    int Must;                            	/*  Ver.2116  */
};

struct tagArmStarSaveData
{
    ARMIDXDATA ArmData;                        
    int SelectStar;                      	/*   保存哪一颗星，1-12 */
    int MulIdx;                          	/*   保存比率列索引 */
};

struct tagArmWashData
{
    ARMIDXDATA ArmData;                        
    int ItemID;                          	/*   洗炼道具 */
    int Bind;                            	/*   选择哪种类型洗炼道具，0绑定的1绑定的 */
    int LockFlag;                        	/*  Ver.1931 洗练锁标记|位操作,天生关键字从低位开始 */
    int SafeFlag;                        	/*  Ver.1956 1-保护洗练 */
    int Must;                            	/*  Ver.2116  */
};

struct tagArmAttrActive
{
    ARMIDXDATA ArmData;                        
    int Idx;                             	/*   第几条洗练关键字从0开始 */
};

struct tagArmWashSaveData
{
    ARMIDXDATA ArmData;                        
};

struct tagArmLevelUP
{
    ARMIDXDATA ArmData;                        
};

struct tagArmCheck
{
    ARMIDXDATA Arm;                             	/*   装备 */
    ARMIDXDATA UseItem;                         	/*   鉴定道具 */
};

struct tagArmBackUnreal
{
    ARMIDXDATA Src;                             	/*   源位置:幻化背饰 */
    ARMIDXDATA Dsc;                             	/*   目标位置:目标背饰 */
};

union tagCSArmCltData
{
    ARMSTARDATA ArmStar;                         	/* ARM_ACT_STAR,   */
    ARMUPDATA ArmLevel;                        	/* ARM_ACT_LEVEL,   */
    ARMUPDATA ArmFight;                        	/* ARM_ACT_FIGHT,   */
    ARMIDXDATA ArmIdentifiability;              	/* ARM_ACT_IDENTIFIABILITY,   */
    GEMLEVELUPDATA GemLevelUp;                      	/* GEM_ACT_LEVEL_UP,   */
    GEMINLAYDATA GemInlay;                        	/* GEM_ACT_INLAY,   */
    GEMPICKDATA GemPick;                         	/* GEM_ACT_PICK,   */
    GEMOPENHOLEDATA GemOpenHole;                     	/* GEM_ACT_OPEN_HOLE, Ver.435  */
    ARMMOVESTARDATA ArmMoveStar;                     	/* ARM_MOVE_STAR, Ver.642  */
    ARMBINDDATA ArmBind;                         	/* ARM_BIND, Ver.645  */
    ARMUNBINDDATA ArmUnBind;                       	/* ARM_UNBIND, Ver.645  */
    ARMUNFENGYINPRE ArmUnFengYinPre;                 	/* ARM_UNFENGYIN_PRE, Ver.944  */
    ARMUNFENGYIN ArmUnFengYin;                    	/* ARM_UNFENGYIN, Ver.944  */
    ARMFENJIE ArmFenJie;                       	/* ARM_FENJIE, Ver.1041 物品分解 */
    ARMFENJIE ArmFenJiePre;                    	/* ARM_FENJIE_PRE, Ver.1084 物品分解吟唱 */
    int ArmFenJiePreBrk;                 	/* ARM_FENJIE_PRE_BRK, Ver.1084 物品分解吟唱打断 */
    GEMADDPOWER GemAddPower;                     	/* GEM_ADD_POWER, Ver.1127  */
    GEMRESET GemReSet;                        	/* GEM_RESET_ATTR, Ver.1127  */
    ARMRECASTDATA ArmRecast;                       	/* ARM_RECAST, Ver.1152 装备重铸信息 */
    ARMSAVERECASTDATA ArmRecastSave;                   	/* ARM_RECAST_SAVE, Ver.1147 保存装备重铸信息 */
    ARMSTARSAVEDATA ArmStarSave;                     	/* ARM_STAR_SAVE, Ver.1186 保存强化 */
    GEMRESETSAVE GemReSetSave;                    	/* GEM_RESET_ATTR_SAVE, Ver.1218 保存宝石重置 */
    ARMWASHDATA ArmWash;                         	/* ARM_WASH_ADDATTR, Ver.1230  */
    ARMWASHSAVEDATA ArmWashSave;                     	/* ARM_WASH_ADDATTR_SAVE, Ver.1230  */
    SPARINLAYDATA SparInlay;                       	/* SPAR_INLAY, Ver.1243  */
    SPARSORBDATA SparSorb;                        	/* SPAR_SORB, Ver.1243  */
    ARMLEVELUP LevelUP;                         	/* ARM_LEVEL_UP, Ver.1817  */
    ARMATTRMOVE AttrMove;                        	/* ARM_ADDATTR_MOVE, Ver.1953  */
    ARMATTRRESET AttrReSet;                       	/* ARM_ATTR_RESET, Ver.1953  */
    ARMATTRACTIVE AttrActive;                      	/* ARM_ATTR_ACTIVE, Ver.1956  */
    ARMCHECK ArmCheck;                        	/* ARM_ACT_CHECK, Ver.1964  */
    ARMSTEPUP StepUp;                          	/* ARM_ACT_STEP_UP, Ver.2151  */
    ARMBASERESET BaseReSet;                       	/* ARM_BASE_ATTR_RESET, Ver.2164  */
    ARMBASERESETSAVE BaseReSetSave;                   	/* ARM_BASE_ATTR_RESET_SAVE, Ver.2164  */
    ARMSKILLACTIVE SkillActive;                     	/* ARM_SKILL_ACTIVE, Ver.2168  */
    ARMLEGENDUP LegendUp;                        	/* ARM_LEGEND_UP, Ver.2226  */
    ARMBACKUNREAL BackUnreal;                      	/* ARM_BACK_UNREAL, Ver.2429  */
    ARMSKILLRECASTACTIVE RecastActive;                    	/* ARM_SKILL_RECAST_ACTIVE, Ver.2502  */
    ARMSKILLRECASTLOCK RecastLock;                      	/* ARM_SKILL_RECAST_LOCK, Ver.2502  */
    ARMSKILLRECASTRESET RecastReset;                     	/* ARM_SKILL_RECAST_RESET, Ver.2502  */
};

struct tagCSArmClt
{
    char ArmCltType;                      	/*    Bind Macrosgroup:ARM_ACT_TYPE,*/
    unsigned char Res[3];                         
    CSARMCLTDATA ArmCltData;                     
};

struct tagCSArmSvr
{
    char ArmSvrType;                      	/*    Bind Macrosgroup:ARM_ACT_TYPE,*/
    unsigned char Res[3];                         
    unsigned char Flag;                            	/*   操作成功失败标志。0失败 1成功 2完美镶嵌 */
    unsigned int IndexID;                         	/*  Ver.453 成功升级时,宝石的id,镶嵌的话就是格子的索引 */
    char RoleName[NAME_LEN];              	/*  Ver.944 封印者名字 */
    char ValIdx;                          	/*  Ver.1218 数值索引|宝石重置有效 */
    char AttrIdx;                         	/*  Ver.1218 属性索引|宝石重置有效 */
    tdr_ulonglong WID;                             	/*  Ver.1951 加工道具的WID */
    unsigned char AttrNum;                         	/*  Ver.2164  */
    ADDATTRINST AddAttr[MAX_ARM_ADD_ATTR];       	/*  Ver.2164  */
    char Mul;                             	/*  Ver.2210  */
};

struct tagCSChgNameClt
{
    int Flag;                            	/*    Bind Macrosgroup:CHG_NAME_TYPE,*/
    char NewName[NAME_LEN];              
};

struct tagCSChgNameSvr
{
    int Flag;                            	/*    Bind Macrosgroup:CHG_NAME_TYPE,*/
    tdr_ulonglong WID;                            
    unsigned int ID;                             
    char NewName[NAME_LEN];              
    char OldName[NAME_LEN];               	/*  Ver.525  */
};

struct tagCSAuthClt
{
    char RandK1[KEY_LEN];                
    char Enc[RSA_ENC_LEN];               
    char ActiveFlag;                      	/*  Ver.165 0激活码无效,1表示有效 */
    char ActiveCode[INFORMER_ACTIVECODE_LEN]; 	/*  Ver.165 激活码 */
    int CltType;                         	/*  Ver.1220 客户端类型 Bind Macrosgroup:CLT_TYPE,*/
    int AuthFlag;                        	/*  Ver.1220 标志位 AUTH_FLAG_QUICK */
    PASSWDCARDAUTHINFO PasswdCardAuthInfo;              	/*  Ver.1792 密保卡验证信息 */
    int IP;                              	/*  Ver.2147 客户端ip,sign_service用,微端赋值0 */
};

struct tagCSAuthSvr
{
    int AuthLen;                        
    char Auth[AUTH_LEN];                 
    PASSWDCARDAUTHSVR PasswdCardAuthSvr;               	/*  Ver.1792 密保卡验证信息 */
};

struct tagCSQueInfo
{
    int Pos;                             	/*   前面还有多少人 */
    int Max;                             	/*   目前一共有多少人排队 */
};

struct tagCSMonSpeech
{
    unsigned int MonsterID;                      
    int MemID;                          
    char RoleName[NAME_LEN];              	/*  Ver.126  */
    unsigned char Career;                          	/*  Ver.126  */
    unsigned char Gender;                          	/*  Ver.126  */
    unsigned char SpeechType;                      	/*   呐喊类型 Bind Macrosgroup:SPEECH_CONDITION_TYPE,*/
    unsigned char SpeechIdx;                       	/*   攻击或背击呐喊内容索引 */
};

struct tagCSMonSpeechEx
{
    unsigned int MonsterID;                      
    int MemID;                          
    char RoleName[NAME_LEN];             
    unsigned char Career;                         
    unsigned char Gender;                         
    unsigned char SpeechType;                      	/*   呐喊类型 Bind Macrosgroup:SPEECH_CONDITION_TYPE,*/
    char Content[SPEECH_DESC_LEN];        	/*   说话内容 */
};

struct tagCSVersionClt
{
    unsigned int VersionNum;                      	/*   客户端当前版本号 */
};

struct tagCSVersionSvr
{
    char IsUp;                            	/*   是否需要升级0--不需要升级 1--需要升级 2--版本太旧 Bind Macrosgroup:VERSION_UP,*/
    unsigned int VersionFrom;                     	/*   客户端当前版本号 */
    unsigned int VersionTo;                       	/*   升级的版本号 */
    unsigned int UpSize;                          	/*   升级版本大小 */
    char UpName[UPNAME_LEN];              	/*   升级包的名字 */
    char MD5[MAX_MD5_LEN];               
    char UpAddr[UPADDR_LEN];              	/*  Ver.103  */
    unsigned int VersionNew;                      	/*  Ver.260 当前最新的版本 */
};

struct tagCSCancelStatus
{
    int StatusBeCanceledID;              	/*   被取消的status的ID */
    int Index;                           	/*  Ver.148 在Status中的索引 */
    int RemainTime;                      	/*  Ver.148 Status剩余的时间 */
};

struct tagCSWatchPlayerClt
{
    int PlayerMemID;                     	/*   要查看玩家的MemID */
};

struct tagCSWatchFriendClt
{
    char FriendName[NAME_LEN];            	/*   要查看好友的名字 */
};

struct tagCSWatchPlayerSvr
{
    int PlayerMemID;                     	/*   要查看玩家的MemID */
    char RoleName[NAME_LEN];              	/*   角色名 */
    int RoleLevel;                       	/*   角色等级 */
    int RoleGender;                      	/*  Ver.267 角色性别 */
    int RoleCareer;                      	/*  Ver.267 角色职业 */
    int RoleHead;                        	/*  Ver.267 角色头像 */
    int RoleHair;                        	/*  Ver.267 角色头发 */
    int RoleFace;                        	/*  Ver.267 角色脸 */
    CSPLAYERATTRVAL RoleAttrVal;                     	/*   角色属性值 */
    ROLEWEAR RoleWear;                        	/*   角色的装备信息 */
    CSPLAYERATTRVAL RoleBaseAttrVal;                 	/*  Ver.428 角色基础属性值白字参考值 */
    int RoleMiscFlag;                    	/*  Ver.702 位标志,装备是否显示问题 */
    SPARPKG SparPkg;                         	/*  Ver.1337 晶石 */
    tdr_ulonglong ClanWID;                         	/*  Ver.1419 公会WID */
    int WorldID;                         	/*  Ver.1752 服ID */
    int Genius;                          	/*  Ver.1910 天赋点 */
    DAOBAINFO DaoBaInfo;                       	/*  Ver.1924 刀疤信息 */
    GENIUSINFO GeniusInfo;                      	/*  Ver.1924 天赋信息 */
    int SelectFashion;                   	/*  Ver.2014  */
};

/*  */
struct tagWatchOne
{
    char RoleName[ROLE_NAME_LEN_SAVE];    	/*   角色名 */
    CSWATCHPLAYERSVR Player;                         
    PETPACKAGE Pets;                           
};

struct tagCSOnlineAwardSvr
{
    int AwardTime;                       	/*   单位:秒 多少秒后领取奖励 */
    int AwardItemID;                     	/*   奖励物品ID */
};

struct tagCSOnlineAwardClt
{
    int AwardItemID;                    
};

struct tagWeiXingPos
{
    int Map;                             	/*   被尾行玩家map */
    int X;                               	/*   被尾行玩家X,Y坐标 */
    int Y;                              
    int MapLine;                         	/*  Ver.836  */
};

struct tagWeiXingAppeal
{
    int MemID;                           	/*   队长MemID */
    char RoleName[NAME_LEN];              	/*  Ver.890 角色名 */
};

union tagWeiXingData
{
    WEIXINGPOS WeiXingPos;                      	/* WEIXING_SVR_POS,   */
    WEIXINGAPPEAL WeiXingAppeal;                   	/* WEIXING_SVR_APPEAL,   */
};

struct tagCSWeiXingSvr
{
    char WeiXingOp;                       	/*  Ver.122  Bind Macrosgroup:WEIXING_SVR_OP,*/
    WEIXINGDATA WeiXingData;                     	/*  Ver.122  */
};

struct tagCSWeiXingClt
{
    int Flag;                            	/*   0--尾行  1--解除尾行 */
    int MemID;                           	/*   被尾行玩家内存ID */
    int CapInvite;                       	/*  Ver.535 是否队长邀请的 1-是 此字段只有Flag为0时有效 */
    char RoleName[NAME_LEN];              	/*  Ver.890 角色名 */
    int Type;                            	/*  Ver.1399 0-人 非0-镖车 */
};

struct tagCSFightSvr
{
    unsigned char FightStatus;                     	/*   0--退出战斗  1--进入战斗 Bind Macrosgroup:FIGHT_SVR_TYPE,*/
};

union tagDesignationCltData
{
    unsigned int DesignationSetID;                	/* DESIGNATION_CLT_SET,  被设置的称号ID，0表示取消当前称号 */
};

struct tagCSDesignationClt
{
    char DesignationOp;                   	/*    Bind Macrosgroup:DESIGNATION_CLT_OP,*/
    char Res[3];                         
    DESIGNATIONCLTDATA DesignationData;                
};

struct tagCSDesignationSetRes
{
    char Succeeded;                       	/*   设置称号是否成功，0失败，否则成功 */
    char Res[3];                         
    unsigned int DesignationID;                   	/*   当前的称号ID，如果设置称号成功，将会是新设置的称号ID */
    int LastUseTime;                     	/*  Ver.136 最后一次使用的时间 */
};

union tagDesignationSvrData
{
    CSDESIGNATIONSETRES DesignationSetRes;               	/* DESIGNATION_SVR_SET_RES,   */
    DESIGNATIONENTRY DesignationAdd;                  	/* DESIGNATION_SVR_ADD,   */
    ROLEDESIGNATIONS DesignationInfo;                 	/* DESIGNATION_SVR_INFO,   */
};

struct tagCSDesignationSvr
{
    char DesignationOp;                   	/*    Bind Macrosgroup:DESIGNATION_SVR_OP,*/
    char Res[3];                         
    DESIGNATIONSVRDATA DesignationData;                
};

struct tagCSFairyClt
{
    char OpType;                          	/*    Bind Macrosgroup:FAIRY_CLT_OP,*/
    char Grididx;                        
    tdr_ulonglong WID;                            
    int IntoExp;                         	/*  Ver.191  */
    FAIRYSTARSTUFF StarUpStuff;                     	/*  Ver.539 品质升级材料 */
};

struct tagFairyData
{
    unsigned int FairyID;                        
    unsigned char FairyLv;                        
    char Grididx;                        
    tdr_ulonglong WID;                            
    unsigned char Stat;                           
    unsigned int EvolveLeftTM;                   
    unsigned int Exp;                             	/*  Ver.191  */
    char Star;                            	/*  Ver.539  */
    char TraitID;                         	/*  Ver.539  */
    char IsKeyin;                         	/*  Ver.539  */
};

union tagFairySvrData
{
    tdr_ulonglong WID;                             	/* FAIRY_RES_TYPE_PRE_BRK,   */
    FAIRYDATA FairyData;                       	/* FAIRY_RES_TYPE_DATA,   */
};

struct tagCSFairySvr
{
    char FairyResType;                    	/*    Bind Macrosgroup:FAIRY_RES_TYPE,*/
    char Res[3];                         
    FAIRYSVRDATA FairySvrData;                   
};

struct tagRolePolyBaseInfo
{
    int Crystal;                         	/*   水晶 */
    int Ore;                             	/*   矿石 */
    unsigned short MaxKill;                         	/*   最大杀人数 */
    unsigned short MaxContinueKill;                 	/*   最大连杀数 */
    unsigned short DieNum;                          	/*   死亡数 */
    int MaxLife;                         	/*   最大生存时间 */
    int Career;                          	/*  Ver.230  */
    int CampIdx;                         	/*  Ver.206 阵营 */
    char RoleName[NAME_LEN];              	/*  Ver.206  */
    char ClanName[NAME_LEN];              	/*  Ver.206  */
};

struct tagRolePolyAppendInfo
{
    unsigned int PolyFraction;                    	/*   活动积分 */
    int LifeAwardItemID;                 	/*   生存奖章物品ID */
    unsigned short LifeAwardNum;                    	/*   生存奖章物品数量 */
    int VictoryAwardItemID;              	/*   优胜者奖章物品ID */
    unsigned short VictoryAwardNum;                 	/*   优胜者奖章物品数量 */
};

struct tagAllRoleBaseInfo
{
    int PlayerID;                       
    ROLEPOLYBASEINFO BaseInfo;                       
};

struct tagAllRoleInfo
{
    int PlayerID;                       
    ROLEPOLYBASEINFO BaseInfo;                       
    ROLEPOLYAPPENDINFO AppendInfo;                     
};

struct tagAllRoleBaseInfoList
{
    unsigned short RoleNum;                        
    ALLROLEBASEINFO AllRoleBaseInfos[MAX_BATTLE_PWORLD_MEMBER];
};

struct tagAllRoleInfoList
{
    unsigned short RoleNum;                        
    ALLROLEINFO AllRoleInfos[MAX_BATTLE_PWORLD_MEMBER];
};

union tagPolyFBInfo
{
    ROLEPOLYBASEINFO SelfInfo;                        	/* SELF_RES_CHG,   */
    ALLROLEBASEINFOLIST AllRoleBaseInfo;                 	/* FB_ROLE_INFO_NOT_SORT,   */
    ALLROLEINFOLIST AllRoleInfo;                     	/* FB_ROLE_INFO_SORT,   */
};

struct tagCSPolyFBInfo
{
    char Type;                            	/*    Bind Macrosgroup:POLY_FB_OP_TYPE,*/
    unsigned char Res[3];                         
    POLYFBINFO PolyFBInfo;                     
};

struct tagCSItemSelfCool
{
    unsigned int ItemID;                         
    int Left;                            	/*   剩余多少秒 */
};

struct tagCSItemSpeCool
{
    unsigned char ItemCoolType;                   
    int Left;                            	/*   剩余多少秒 */
};

struct tagCSItemCoolInfo
{
    unsigned char ItemSelfCoolNum;                
    CSITEMSELFCOOL ItemSelfCools[MAX_ITEM_SELFCOOL_NUM];
    unsigned char ItemSpeCoolNum;                 
    CSITEMSPECOOL ItemSpeCools[MAX_ITEM_SPECOOL_NUM];
};

struct tagCSShoppingQueryTianYuanReq
{
    tdr_ulonglong RoleID;                          	/*   自己的角色id */
};

struct tagCSShoppingQueryTianYuanRes
{
    char Pass9Account[INFORMER_ACCOUNT_LOGIN_NAME_LEN]; 	/*   登录名 */
    unsigned int ServerID;                        	/*   充值到的大区编号 */
    tdr_ulonglong Amount;                          	/*   充值金额 */
    tdr_ulonglong Points;                          	/*   充值点数 */
    tdr_ulonglong Bonus;                           	/*   奖励点数 */
    tdr_ulonglong FreezePoint;                     	/*   冻结的点数,显示时要减去这个值,才是用户可用的点券 */
};

struct tagCSShoppingBuyReq
{
    tdr_ulonglong RoleID;                          	/*   自己的角色id */
    unsigned int ShoppingID;                      	/*   商品的id */
    unsigned int ShoppingNum;                     	/*   商品的个数 */
    char BuyFlag;                         	/*  Ver.408 0表示先放商品背包,1表示先放杂物背包 */
    char GiftFlag;                        	/*   赠送标志位 0表示不要,1表示要赠送 */
    char GiftToPlayerName[ROLE_NAME_LEN]; 	/*   收件人的名字 */
    tdr_ulonglong GiftToRoleID;                    	/*   好友的角色id */
    char GiftToDesc[SHORT_DESC_LEN];      	/*   送礼时的祝福语 */
};

struct tagCSShoppingPackagePresentReq
{
    char SrcListType;                     	/*   当前只支持商品背包的赠送 Bind Macrosgroup:LIST_TYPE,*/
    unsigned short SrcGridIdx;                     
    unsigned int ItemNum;                         	/*   这次要赠送的物品个数 */
    char GiftFlag;                        	/*   赠送标志位 1表示要赠送,0表示不要 */
    char GiftToPlayerName[ROLE_NAME_LEN]; 	/*   收件人的名字 */
    tdr_ulonglong GiftToRoleID;                    	/*   好友的角色id */
    char GiftToDesc[SHORT_DESC_LEN];      	/*   送礼时的祝福语 */
};

struct tagCSShoppingPackagePresentRes
{
    unsigned short Result;                          	/*   操作的结果 */
};

/* 每次登录时拉取得商品配置 */
struct tagCSShoppingFreshRecordReq
{
    unsigned int ShopTbVersion;                   	/*   客户端的商品表的版本号,暂时填0 */
};

/* 每次登录时拉取得商品配置 */
struct tagCSShoppingFreshRecordRes
{
    unsigned int ShopTbVersion;                   	/*   客户端的商品表的版本号,暂时填0 */
    unsigned int PkgTotal;                        	/*   总的包数量 */
    unsigned int CurrPkg;                         	/*   当前包的数量 */
    unsigned int RecordNum;                       	/*   当前记录的条数 */
    SHOPDEF ShopRecord[MAX_PKG_RECORD];      	/*   商品记录的数据 */
};

/* 每次登录时拉取得商品配置 */
struct tagCSShoppingLimitFreshRecordRes
{
    unsigned int ShopTbVersion;                   	/*   客户端的商品表的版本号,暂时填0 */
    unsigned int PkgTotal;                        	/*   总的包数量 */
    unsigned int CurrPkg;                         	/*   当前包的数量 */
    unsigned int RecordNum;                       	/*   当前记录的条数 */
    SHOPLIMITDEF ShopRecord[MAX_PKG_RECORD];      	/*   商品记录的数据 */
};

/* 每次有修改的记录,增量更新 */
struct tagCSShoppingModifyRecordRes
{
    unsigned int RecordNum;                       	/*   当前记录的条数 */
    SHOPDEF ShopRecord[MAX_PKG_RECORD];      	/*   商品记录的数据 */
};

/* 每次有修改的记录,增量更新 */
struct tagCSShoppingModifyLimitRecordRes
{
    unsigned int RecordNum;                       	/*   当前记录的条数 */
    SHOPLIMITDEF ShopLimitRecord[MAX_PKG_RECORD]; 	/*   商品记录的数据 */
};

/* 查询出售的列表 */
struct tagCSShoppingQueryTradeSellReq
{
    unsigned int QueryBeginNum;                   	/*   查询纪录的开始,第一页开始是0 */
    unsigned int QueryTotalNum;                   	/*   这次要查询的个数,以2-3页的量为宜 */
};

/* 查询出售的列表应答 */
struct tagCSShoppingQueryTradeSellRes
{
    unsigned int RecordNum;                       	/*   当前记录的条数 */
    TRADERECORD TradeRecord[MAX_TRADE_RECORD];   	/*   商品记录的数据 */
    unsigned int SvrCurrTotalNum;                 	/*  Ver.179 服务器的总记录条数 */
};

/* 查询求购的列表 */
struct tagCSShoppingQueryTradeBuyReq
{
    unsigned int QueryBeginNum;                   	/*   查询纪录的开始,第一页开始是0 */
    unsigned int QueryTotalNum;                   	/*   这次要查询的个数,以2-3页的量为宜 */
};

/* 查询求购的列表应答 */
struct tagCSShoppingQueryTradeBuyRes
{
    unsigned int RecordNum;                       	/*   当前记录的条数 */
    TRADERECORD TradeRecord[MAX_TRADE_RECORD];   	/*   商品记录的数据 */
    unsigned int SvrCurrTotalNum;                 	/*  Ver.179 服务器的总记录条数 */
};

/* 交易点券请求 */
struct tagCSShoppingTradeReq
{
    char TradeType;                       	/*   交易的类型 0表示出售的列表,1表示求购的列表 */
    tdr_ulonglong TradeID;                         	/*   交易的账单编号 */
};

/* 交易点券应答 */
struct tagCSShoppingTradeRes
{
    short Result;                          	/*   0成功,其他失败,提示内容服务器发sys_tip */
};

/* 发布交易请求 */
struct tagCSShoppingSendTradeRecordReq
{
    char TradeType;                       	/*   发布交易的类型 0表示出售的列表,1表示求购的列表 */
    unsigned int Money;                           	/*   相关的银币 */
    unsigned int Gold;                            	/*   相关的金币 */
    unsigned int Time;                            	/*   挂单的持续时间 小时 最大 MAX_TRADE_SHOE_TIME  */
    char NotAnonymous;                    	/*   0 匿名 1 非匿名 */
};

/* 发布交易应答 */
struct tagCSShoppingSendTradeRecordRes
{
    short Result;                          	/*   0成功,其他失败,提示内容服务器发sys_tip */
    TRADERECORD TradeRecord;                     	/*   成功时的商品记录数据 */
};

/* 查询自己的发布的交易请求 */
struct tagCSShoppingQueryMyTradeRecordReq
{
    unsigned int QueryBeginNum;                   	/*   查询纪录的开始,第一页开始是0 */
    unsigned int QueryTotalNum;                   	/*   这次要查询的个数,以2-3页的量为宜 */
};

/* 查询自己的发布的交易 */
struct tagCSShoppingQueryMyTradeRecordRes
{
    unsigned int RecordNum;                       	/*   当前记录的条数 */
    TRADERECORD TradeRecord[MAX_TRADE_RECORD];   	/*   TradeType这字段表示是出售还是求购 */
};

/* 撤销交易请求 */
struct tagCSShoppingDestroyTradeRecordReq
{
    char TradeType;                       	/*   交易的类型 0表示出售的列表,1表示求购的列表 */
    tdr_ulonglong TradeID;                         	/*   交易的账单编号 */
};

/* 撤销发布的交易 */
struct tagCSShoppingDestroyTradeRecordRes
{
    unsigned int Result;                          	/*   结果 */
    char TradeType;                       	/*   交易的类型 0表示出售的列表,1表示求购的列表 */
    tdr_ulonglong TradeID;                         	/*   交易的账单编号 */
};

/* 获取商城的配置文件请求 */
struct tagCSShoppingGetXmlFileReq
{
    unsigned int Version;                         	/*   配置文件里面有个版本号,如过有就填下,否则就弄成0 */
};

/* 获取商城的配置文件请求应答 */
struct tagCSShoppingGetXmlFileRes
{
    unsigned int FileLen;                         	/*   文件大小 */
    char FileBuff[MAX_SHOPPING_XML_FILE_SIZE]; 	/*   文件大小 */
};

/* 通过id查询记录 */
struct tagCSShoppingQueryRecordByIDReq
{
    char TradeType;                       	/*   交易的类型 0表示出售的列表,1表示求购的列表 */
    tdr_ulonglong TradeID;                         	/*   交易的账单编号 */
};

/* 通过id查询记录应答 */
struct tagCSShoppingQueryRecordByIDRes
{
    short Result;                          	/*   0成功,其他失败,提示内容服务器发sys_tip */
    TRADERECORD TradeRecord;                     	/*   成功时的商品记录数据 */
    short OperType;                        	/*  Ver.177 操作类型0 表示客户端查询,1表示更新数据,2表示删除数据TradeRecord里type和id有效 */
};

/* 商城公告信息 */
struct tagCSShoppingMsgRes
{
    SHOPMSGDEF ShopMsgDef;                     
};

/* 打开商城 */
struct tagCSShoppingOpenReq
{
    unsigned int OperType;                        	/*   先填0,暂时不用 */
};

/* 查询积分送礼品定义 */
struct tagCSShoppingQueryPropsDefReq
{
    char OperType;                        	/*   0 服务器查询,1表示用户查询 */
};

/* 查询积分送礼品定义 */
struct tagCSShoppingQueryPropsDefRes
{
    PROPSDEF PropsDef[NEW_PROPSDEF_RECORD_MAX]; 	/*   0 服务器查询,1表示用户查询 */
};

/* 查询自己的积分礼包情况 */
struct tagCSShoppingQueryPropsGiftReq
{
    int memid;                          
};

/* 查询自己的积分礼包情况 */
struct tagCSShoppingQueryPropsGiftRes
{
    PROPSGIFT PropsGift;                      
};

/* 领取积分 */
struct tagCSShoppingSetPropsGiftReq
{
    short GetType;                         	/*  Ver.375 领取的类型,1表示定义的冲值礼包,2表示9c那边的积分礼包 */
    short Index;                           	/*  Ver.375 领取的哪个冲值礼包索引,定义索引或9c礼包的索引 */
    unsigned int PropsID;                         	/*   领取的哪个冲值礼包id,如果是领取9c礼包,这个是0 */
    GIFTITEM GiftItem;                        	/*  Ver.375 如果领取的是9c的积分礼包,请把这个项的物品id,物品个数传上来 */
};

/* 领取积分 */
struct tagCSShoppingSetPropsGiftRes
{
    int Result;                          	/*   0成功,非0失败 */
    unsigned int PropsID;                         	/*   领取的哪个冲值礼包id */
    PROPSGIFT PropsGift;                      
};

struct tagCSShoppingExchangeReq
{
    tdr_ulonglong RoleID;                          	/*   自己的角色id */
    char RoleName[NAME_LEN];             
    unsigned int PointNum;                        	/*   要兑换的点券数额 */
    int RoleLevel;                       	/*  Ver.1448  */
};

struct tagCSShoppingExchangeRes
{
    int Result;                          	/*   0成功,非0失败 */
    int LeftPoint;                       	/*  Ver.1561 剩余点券，Result 为 0 或 BILL_DEC_NO_ENOUGH_CASH 时有效 */
};

struct tagCSShoppingShopDelRes
{
    int DelNum;                         
    int ShopIDs[MAX_SHOP_DEF_LINES];    
};

struct tagCSShoppingShopLimitDelRes
{
    int DelNum;                         
    int ShopIDs[MAX_SHOP_DEF_LINES];    
};

union tagCSShoppingReqData
{
    CSSHOPPINGBUYREQ ShppingBuyReq;                   	/* SHOPPING_BUY_REQ,   */
    CSSHOPPINGFRESHRECORDREQ ShoppingFreshRecordReq;          	/* SHOPPING_FRESH_REQ, Ver.155  */
    CSSHOPPINGQUERYTIANYUANREQ ShoppingQueryTianYuanReq;        	/* SHOPPING_QUERY_TIANYUAN_REQ, Ver.158  */
    CSSHOPPINGPACKAGEPRESENTREQ ShoppingPackagePresentReq;       	/* SHOPPING_PACKAGE_PRESENT_REQ, Ver.169  */
    CSSHOPPINGQUERYTRADESELLREQ ShoppingQueryTradeSellReq;       	/* SHOPPING_QUERY_TRADESELL_REQ, Ver.167  */
    CSSHOPPINGQUERYTRADEBUYREQ ShoppingQueryTradeBuyReq;        	/* SHOPPING_QUERY_TRADEBUY_REQ, Ver.167  */
    CSSHOPPINGTRADEREQ ShoppingTradeReq;                	/* SHOPPING_TRADE_REQ, Ver.167  */
    CSSHOPPINGSENDTRADERECORDREQ ShoppingSendTradeRecordReq;      	/* SHOPPING_SEND_TRADERECORD_REQ, Ver.167  */
    CSSHOPPINGQUERYMYTRADERECORDREQ ShoppingQueryMyTradeRecordReq;   	/* SHOPPING_QUERY_MY_TRADERECORD_REQ, Ver.167  */
    CSSHOPPINGDESTROYTRADERECORDREQ ShoppingDestroyTradeRecordReq;   	/* SHOPPING_DESTROY_TRADERECORD_REQ, Ver.167  */
    CSSHOPPINGGETXMLFILEREQ ShoppingGetXmlFileReq;           	/* SHOPPING_GET_XML_FILE_REQ, Ver.167  */
    CSSHOPPINGQUERYRECORDBYIDREQ ShoppingQueryRecordByIDReq;      	/* SHOPPING_QUERY_RECORD_BY_ID_REQ, Ver.171  */
    CSSHOPPINGOPENREQ ShoppingOpenReq;                 	/* SHOPPING_OPEN_REQ, Ver.316  */
    CSSHOPPINGQUERYPROPSDEFREQ ShoppingQueryPropsDefReq;        	/* SHOPPING_QUERY_PROPSDEF_REQ, Ver.364  */
    CSSHOPPINGQUERYPROPSGIFTREQ ShoppingQueryPropsGiftReq;       	/* SHOPPING_QUERY_PROPSGIFT_REQ, Ver.364  */
    CSSHOPPINGSETPROPSGIFTREQ ShoppingSetPropsGiftReq;         	/* SHOPPING_SET_PROPSGIFT_REQ, Ver.364  */
    CSSHOPPINGEXCHANGEREQ ShoppingExchangeReq;             	/* SHOPPING_EXCHANGE_POINT_REQ, Ver.602  */
};

union tagCSShoppingResData
{
    CSSHOPPINGFRESHRECORDRES ShoppingFreshRecordRes;          	/* SHOPPING_FRESH_RES, Ver.155  */
    CSSHOPPINGMODIFYRECORDRES ShoppingModifyRecordRes;         	/* SHOPPING_MODIFY_RES, Ver.155  */
    CSSHOPPINGQUERYTIANYUANRES ShoppingQueryTianYuanRes;        	/* SHOPPING_QUERY_TIANYUAN_RES, Ver.158  */
    CSSHOPPINGPACKAGEPRESENTRES ShoppingPackagePresentRes;       	/* SHOPPING_PACKAGE_PRESENT_RES, Ver.169  */
    CSSHOPPINGMSGRES ShoppingMsgRes;                  	/* SHOPPING_SHOW_MSG_RES, Ver.161  */
    CSSHOPPINGQUERYTRADESELLRES ShoppingQueryTradeSellRes;       	/* SHOPPING_QUERY_TRADESELL_RES, Ver.167  */
    CSSHOPPINGQUERYTRADEBUYRES ShoppingQueryTradeBuyRes;        	/* SHOPPING_QUERY_TRADEBUY_RES, Ver.167  */
    CSSHOPPINGTRADERES ShoppingTradeRes;                	/* SHOPPING_TRADE_RES, Ver.167  */
    CSSHOPPINGSENDTRADERECORDRES ShoppingSendTradeRecordRes;      	/* SHOPPING_SEND_TRADERECORD_RES, Ver.167  */
    CSSHOPPINGQUERYMYTRADERECORDRES ShoppingQueryMyTradeRecordRes;   	/* SHOPPING_QUERY_MY_TRADERECORD_RES, Ver.167  */
    CSSHOPPINGDESTROYTRADERECORDRES ShoppingDestroyTradeRecordRes;   	/* SHOPPING_DESTROY_TRADERECORD_RES, Ver.167  */
    CSSHOPPINGGETXMLFILERES ShoppingGetXmlFileRes;           	/* SHOPPING_GET_XML_FILE_RES, Ver.167  */
    CSSHOPPINGQUERYRECORDBYIDRES ShoppingQueryRecordByIDRes;      	/* SHOPPING_QUERY_RECORD_BY_ID_RES, Ver.171  */
    CSSHOPPINGMODIFYLIMITRECORDRES ShoppingModifyLimitRecordRes;    	/* SHOPPING_MODIFY_LIMIT_RES, Ver.212  */
    CSSHOPPINGLIMITFRESHRECORDRES ShoppingLimitFreshRecordRes;     	/* SHOPPING_LIMIT_FRESH_RES, Ver.212  */
    CSSHOPPINGQUERYPROPSDEFRES ShoppingQueryPropsDefRes;        	/* SHOPPING_QUERY_PROPSDEF_RES, Ver.364  */
    CSSHOPPINGQUERYPROPSGIFTRES ShoppingQueryPropsGiftRes;       	/* SHOPPING_QUERY_PROPSGIFT_RES, Ver.364  */
    CSSHOPPINGSETPROPSGIFTRES ShoppingSetPropsGiftRes;         	/* SHOPPING_SET_PROPSGIFT_RES, Ver.364  */
    CSSHOPPINGEXCHANGERES ShoppingExchangeRes;             	/* SHOPPING_EXCHANGE_POINT_RES, Ver.602  */
    CSSHOPPINGSHOPDELRES ShoppingShopDelRes;              	/* SHOPPING_SHOP_DEL_RES, Ver.1249  */
    CSSHOPPINGSHOPLIMITDELRES ShoppingShopLimitDelRes;         	/* SHOPPING_SHOPLIMIT_DEL_RES, Ver.1249  */
};

struct tagCSShoppingReq
{
    char Type;                            	/*    Bind Macrosgroup:SHOPPING_REQ_TYPE,*/
    unsigned char Res[3];                         
    CSSHOPPINGREQDATA ShoppingReqData;                
};

struct tagCSShoppingRes
{
    char Type;                            	/*    Bind Macrosgroup:SHOPPING_REQ_TYPE,*/
    unsigned char Res[3];                         
    CSSHOPPINGRESDATA ShoppingResData;                
};

struct tagCSStarStoneOpenReq
{
    unsigned int StarStoneID;                     	/*   开钻的id, StarStoneDef的id */
    unsigned int OpenTimeType;                    	/*   1表示7天 2表示30天 3表示180天 */
};

struct tagCSStarStoneOpenRes
{
    int Result;                          	/*   0成功 1失败 */
    unsigned int StarStoneID;                     	/*   开钻的id, StarStoneDef的id */
    VIPDATA VipData;                        
};

struct tagCSStarDataRes
{
    VIPDATA VipData;                         	/*   下发星级相关数据,有数据改变就会下发 */
};

union tagCSStarData
{
    CSSTARSTONEOPENREQ StarStoneOpenReq;                	/* STARDATA_OPEN_STONE_REQ,   */
    CSSTARSTONEOPENRES StarStoneOpenRes;                	/* STARDATA_OPEN_STONE_RES,   */
    CSSTARDATARES StarDataRes;                     	/* STARDATA_SYNC_RES,   */
};

struct tagCSStarDataClt
{
    char Type;                            	/*    Bind Macrosgroup:STARDATA_TYPE,*/
    unsigned char Res[3];                         
    CSSTARDATA StarDataClt;                    
};

struct tagCSStarDataSvr
{
    char Type;                            	/*    Bind Macrosgroup:STARDATA_TYPE,*/
    unsigned char Res[3];                         
    CSSTARDATA StarDataSvr;                    
};

struct tagCSMudChatRoomListReq
{
    char Res;                             	/*   预留 */
};

struct tagCSMudChatRoomListRes
{
    char RoomNum;                        
    unsigned char Res[3];                         
    int RoomPlayerNum[MAX_MUD_CHAT_ROOM];
};

struct tagCSMudRoleLoginReq
{
    tdr_ulonglong RoleID;                          	/*   角色id */
};

struct tagCSRoomRoleInfo
{
    tdr_ulonglong RoleID;                          	/*   角色id */
    char RoleName[NAME_LEN];             
    unsigned char Career;                         
    unsigned char Level;                          
    unsigned char Gender;                         
    unsigned char Res;                            
};

struct tagCSMudEnterChatRoomReq
{
    char ChatRoomIdx;                     	/*   房间号 */
};

struct tagCSChatRoomInfo
{
    char ChatRoomIdx;                     	/*   房间号 */
    unsigned char Res[3];                         
    int PlayerNum;                      
    CSROOMROLEINFO ChatRoomRoleInfo[MAX_CHAT_ROOM_PLAYER]; 	/*   角色信息 */
};

struct tagCSMudEnterChatRoomRes
{
    char Result;                          	/*  Ver.716 结果:0成功,1失败 */
    CSCHATROOMINFO ChatRoomInfo;                    	/*   房间信息 */
};

struct tagCSMudOutChatRoomReq
{
    char Res;                             	/*   占位 */
};

struct tagCSMudOutChatRoomRes
{
    char Result;                          	/*   结果:0成功,1失败 */
};

struct tagCSMudRoleDetail
{
    tdr_longlong RoleID;                         
    CSPLAYERATTRVAL PlayerAttrVal;                  
    ROLEWEAR Wear;                            	/*   穿带的装备 */
    char Gender;                         
    char Career;                         
    unsigned char Level;                          
    unsigned char Head;                           
    unsigned char Face;                           
    unsigned char Hair;                           
    CSPLAYERATTRVAL BaseAttrVal;                     	/*   白字属性 */
};

struct tagCSMudRoleLoginRes
{
    CSMUDROLEDETAIL RoleDetail;                      	/*  Ver.164  */
    int OfflineExp;                      	/*   离线经验 */
    int MaxOfflineExp;                   	/*   角色当前等级对应的最大离线经验 */
};

struct tagCSMudChatRoomEnterInfo
{
    CSROOMROLEINFO RoleInfo;                       
};

struct tagCSMudChatRoomLeaveInfo
{
    tdr_longlong RoleID;                         
    char RoleName[NAME_LEN];             
};

struct tagCSMudRoleLogoutReq
{
    tdr_longlong RoleID;                         
};

struct tagCSMudRoleOfflineExp
{
    int OfflineExp;                      	/*   离线补偿经验值 */
};

union tagCSMudRoleAttrData
{
    CSMUDROLEOFFLINEEXP RoleOfflineExp;                  	/* MUD_ROLE_OFFLINE_EXP,   */
};

struct tagCSMudRoleAttrChg
{
    tdr_longlong RoleID;                         
    char AttrType;                        	/*    Bind Macrosgroup:MUD_ROLE_ATTR_TYPE,*/
    char Res[3];                         
    CSMUDROLEATTRDATA AttrData;                       
};

struct tagCSMudChatChannelInfo
{
    int ChatType;                        	/*    Bind Macrosgroup:CHAT_TYPE,*/
    char Silence;                         	/*   0开启频道,1屏蔽频道 */
};

struct tagCSMudChatChannelSetReq
{
    CSMUDCHATCHANNELINFO MudChatChannelInfo;              	/*   频道信息 */
};

struct tagCSMudChatChannelSetRes
{
    CSMUDCHATCHANNELINFO MudChatChannelInfo;              	/*   频道信息 */
};

struct tagCSMudOfflineExpFullInfo
{
    tdr_longlong RoleID;                         
    char RoleName[NAME_LEN];             
    char Type;                            	/*   0为经验不满已经被偷不能再偷,1为经验满了可以偷 */
};

struct tagCSMudOfflineExpTakeReq
{
    tdr_longlong RoleID;                         
    char RoleName[NAME_LEN];             
};

struct tagCSMudOfflineExpTakeRes
{
    char Result;                          	/*   0为成功,其他失败有tip提示 */
};

union tagCSPKCltData
{
    int PKMode;                          	/* PK_MODE_CHG,   */
};

struct tagCSPKClt
{
    unsigned char PKCltType;                       	/*    Bind Macrosgroup:PK_CLT_TYPE,*/
    char Res[3];                         
    CSPKCLTDATA PKCltData;                      
};

struct tagCSExitPworld
{
    int PworldID;                       
};

struct tagCSEnterClanCity
{
    int ClanID;                         
    int ClanSpyTransDefID;               	/*  Ver.1453 公会刺探活动时选择的位置ID */
};

struct tagCSJoinQueue
{
    int BattleID;                       
    int TeamJoin;                        	/*  Ver.672  Bind Macrosgroup:TEAM_JOIN_TYPE,*/
};

struct tagCSApplyPworldQueue
{
    int PworldID;                       
};

struct tagCSExitPworldQueue
{
    int PworldID;                       
    int TeamJoin;                        	/*  Ver.2197  Bind Macrosgroup:TEAM_JOIN_TYPE,*/
};

struct tagCSEnterPworldInst
{
    int PworldID;                       
};

struct tagCSPworldMatch
{
    int PworldID;                        	/*   副本id */
};

struct tagCSPworldApplyInvite
{
    int BattleID;                        	/*   战场id */
    char RoleName[ROLE_NAME_LEN];         	/*   发起人名字 */
};

union tagCSPworldCltData
{
    CSEXITPWORLDQUEUE ExitPworldQueue;                 	/* PWORLD_CLT_EXIT_QUEUE,   */
    CSENTERPWORLDINST EnterPworldInst;                 	/* PWORLD_CLT_ENTER_PWORLD,   */
    CSEXITPWORLD ExitPworld;                      	/* PWORLD_CLT_EXIT_PWORLD,   */
    CSJOINQUEUE JoinQueue;                       	/* PWORLD_CLT_JOIN_QUEUE, Ver.499  */
    CSENTERCLANCITY EnterClanCity;                   	/* PWORLD_CLT_ENTER_CLAN_CITY, Ver.1105  */
    CSPWORLDMATCH Match;                           	/* PWORLD_CLT_MATCH, Ver.2165  */
    CSPWORLDMATCH MatchCancel;                     	/* PWORLD_CLT_MATCH_CANCEL, Ver.2165  */
    CSPWORLDAPPLYINVITE ApplyInvite;                     	/* PWORLD_CLT_APPLY_INVITE, Ver.2165  */
};

struct tagCSPworldClt
{
    unsigned char CltType;                         	/*    Bind Macrosgroup:PWORLD_CLT_TYPE,*/
    char Res[3];                         
    CSPWORLDCLTDATA CltData;                        
};

struct tagCSEnterPworldQueue
{
    int PworldID;                       
};

struct tagCSInviteEnterPworld
{
    int PworldID;                       
    int PworldIdx;                       	/*  Ver.224  */
};

struct tagCSPworldMatchStatus
{
    int PworldID;                        	/*   副本id */
    int PlayerNum;                       	/*   报名人数 */
    int MatchStatus;                     	/*   匹配状态 Bind Macrosgroup:PWORLD_SVR_MATCH_STATUS,*/
};

union tagCSPworldSvrData
{
    CSENTERPWORLDQUEUE EnterPworldQueue;                	/* PWORLD_SVR_ENTER_QUEUE,   */
    CSINVITEENTERPWORLD InviteEnterPworld;               	/* PWORLD_SVR_INVITE_ENTER_PWORLD,   */
    CSEXITPWORLDQUEUE ExitPworldQueue;                 	/* PWORLD_SVR_EXIT_PWORLD_QUEUE,   */
    CSPWORLDMATCHSTATUS MatchStatus;                     	/* PWORLD_SVR_MATCH, Ver.2165  */
    CSPWORLDAPPLYINVITE ApplyInvite;                     	/* PWORLD_SVR_APPLY_INVITE, Ver.2165  */
};

struct tagCSPworldSvr
{
    unsigned char SvrType;                         	/*    Bind Macrosgroup:PWORLD_SVR_TYPE,*/
    char Res[3];                         
    CSPWORLDSVRDATA SvrData;                        
};

struct tagCSBattleSurvivalInfo
{
    int Crystal;                         	/*   水晶 */
    int Ore;                             	/*   矿石 */
    unsigned short MaxKill;                         	/*   最大杀人数 */
    unsigned short MaxContinueKill;                 	/*   最大连杀数 */
    unsigned short DieNum;                          	/*   死亡数 */
    int MaxLife;                         	/*   最大生存时间 */
    unsigned int PolyFraction;                    	/*   活动积分 */
    int Exp;                             	/*  Ver.907 奖励经验 */
    int FirstWinExp;                     	/*  Ver.907 首胜奖励经验 */
    BATTLEAWD BattleAwd;                       	/*  Ver.1059 奖励 */
    unsigned int AssistKill;                      	/*  Ver.1599 助攻 */
    int CurrKill;                        	/*  Ver.2015 当前连杀 */
};

struct tagCSBattleAoShanInfo
{
    int Kill;                            	/*  Ver.542 杀人数 */
    unsigned short MaxContinueKill;                 	/*  Ver.652 最大连杀数 */
    unsigned short DieNum;                          	/*  Ver.652 死亡数 */
    unsigned int AssistKill;                      	/*  Ver.652 助攻 */
    unsigned int PolyFraction;                    	/*  Ver.652 活动积分 */
    int Exp;                             	/*  Ver.907 奖励经验 */
    int FirstWinExp;                     	/*  Ver.907 首胜奖励经验 */
    BATTLEAWD BattleAwd;                       	/*  Ver.1059 奖励 */
    int CurrKill;                        	/*  Ver.2015 当前连杀 */
};

struct tagCSBattleXuKongInfo
{
    int Contri;                          	/*   贡献能量 */
    int Kill;                            	/*   杀人数 */
    int CurrKill;                        	/*   当前连杀 */
    unsigned short MaxContinueKill;                 	/*   最大连杀数 */
    unsigned short DieNum;                          	/*   死亡数 */
    unsigned int AssistKill;                      	/*   助攻 */
    unsigned int PolyFraction;                    	/*   活动积分 */
    int Exp;                             	/*   奖励经验 */
    int FirstWinExp;                     	/*   首胜奖励经验 */
    BATTLEAWD BattleAwd;                       	/*   奖励 */
};

struct tagCSBattleClanWarInfo
{
    int Kill;                            	/*   杀人数 */
    unsigned short MaxContinueKill;                 	/*   最大连杀数 */
    unsigned int AssistKill;                      	/*   助攻 */
    unsigned int PolyFraction;                    	/*   活动积分 */
    int Exp;                             	/*   奖励经验 */
    int Bull;                            	/*   奖励绑银 */
    BATTLEAWD BattleAwd;                       	/*   奖励 */
    int CurrKill;                        	/*   当前连杀 */
};

union tagCSBattleFightInfo
{
    CSBATTLEAOSHANINFO AoShanInfo;                      	/* BATTLE_FIGHT_TYPE_AOSHAN,   */
    CSBATTLESURVIVALINFO CampLiftInfo;                    	/* BATTLE_FIGHT_TYPE_CAMP_LIFT,   */
    CSBATTLESURVIVALINFO RandLiftInfo;                    	/* BATTLE_FIGHT_TYPE_RAND_LIFT,   */
    CSBATTLEXUKONGINFO XuKongInfo;                      	/* BATTLE_FIGHT_TYPE_XUKONG, Ver.2066  */
    CSBATTLECLANWARINFO ClanWarInfo;                     	/* BATTLE_FIGHT_TYPE_CLAN_WAR, Ver.2165  */
};

struct tagCSBattleRoleInfo
{
    int MemID;                          
    int Career;                         
    int CampIdx;                         	/*   阵营 */
    char RoleName[NAME_LEN];             
    char ClanName[NAME_LEN];             
    int TimeLimitEnd;                    	/*  Ver.1059  */
    char FightType;                       	/*    Bind Macrosgroup:BATTLE_FIGHT_TYPE,*/
    unsigned char Res[3];                         
    CSBATTLEFIGHTINFO FightInfo;                      
    unsigned int EnterTime;                       	/*  Ver.1102  */
};

/* 公会跨服战玩家自己的信息 */
struct tagCampInfo
{
    int CampID;                          	/*   阵营id */
    int CampVal;                         	/*   阵营气势 */
    char CampName[NAME_LEN];              	/*   阵营名称 */
};

struct tagCSBattleInfo
{
    unsigned char OpType;                          	/*    Bind Macrosgroup:BATTLE_OP_TYPE,*/
    unsigned char VCamp;                           	/*  Ver.499 胜利方正营 */
    int XuKongVal1;                      	/*  Ver.2069 虚空能量结晶阵营1 */
    int XuKongVal2;                      	/*  Ver.2069 虚空能量结晶阵营2 */
    unsigned char RoleNum;                        
    unsigned char Res;                            
    CSBATTLEROLEINFO RoleList[MAX_BATTLE_PWORLD_MEMBER];
    int CampNum;                         	/*  Ver.2165 阵营数量 */
    CAMPINFO CampInfo[MAX_CAMP_NUM];          	/*  Ver.2165 信息 */
};

union tagCSBattleSvrData
{
    CSBATTLEINFO BattleInfo;                      	/* BATTLE_SVR_INFO,   */
};

struct tagCSBattleSvr
{
    unsigned char SvrType;                         	/*    Bind Macrosgroup:BATTLE_SVR_TYPE,*/
    char Res[3];                         
    CSBATTLESVRDATA SvrData;                        
};

struct tagCSHeartBeatRes
{
    CSTIME CltTime;                        
    CSTIME ConnectTime;                    
};

struct tagCSGiftSvr
{
    ROLEGIFTINFO GiftInfo;                       
    char PreCreateGift;                   	/*  Ver.1129  */
    int UserType;                        	/*  Ver.1146 取值为GIFT_USER_TYPE */
};

struct tagCSOnlineGiftSvr
{
    MISCCONTONLINEINFO ContOnlineInfo;                 
};

struct tagAccGiftInfo
{
    int Count;                          
    ACCGIFT AccGifts[MAX_ACC_GIFT];         
};

struct tagAccGiftRes
{
    int ID;                             
};

union tagAccGiftData
{
    ACCGIFTINFO AccGiftInfo;                     	/* SVR_ACC_GIFT_TYPE_ALL,   */
    ACCGIFTRES AccGiftRes;                      	/* SVR_ACC_GIFT_TYPE_ONE,   */
};

struct tagCSAccGiftSvr
{
    int Type;                            	/*    Bind Macrosgroup:SVR_ACC_GIFT_TYPE,*/
    ACCGIFTDATA AccGiftData;                    
};

struct tagPropGiftInfo
{
    int DefCount;                        	/*   礼包Def数量 */
    PROPSDEF PropsDef[NEW_PROPSDEF_RECORD_MAX];
    int Count;                           	/*   礼包数量 */
    PROPSGIFT PropsGift[PROPS_LIMIT_MONTH];   
};

struct tagPropGiftRes
{
    int ID;                              	/*   礼包GroupID */
    tdr_ulonglong CashUp;                          	/*   领取的礼包对应的CashUp */
};

struct tagPropsGiftAddCash
{
    int GroupID;                         	/*   礼包GroupID */
    int AddCash;                         	/*   增加的充值点数 */
};

union tagPropGiftData
{
    PROPGIFTINFO GiftInfo;                        	/* SVR_PROP_GIFT_TYPE_ALL,   */
    PROPSGIFT GiftRes;                         	/* SVR_PROP_GIFT_TYPE_ONE,   */
    PROPSGIFTADDCASH PropsGiftAddCash;                	/* SVR_PROP_GIFT_TYPE_ADD,   */
    PROPSGIFT GiftNotice;                      	/* SVR_PROP_GIFT_TYPE_NOTICE,   */
};

struct tagCSPropGiftSvr
{
    int Type;                            	/*    Bind Macrosgroup:SVR_PROP_GIFT_TYPE,*/
    PROPGIFTDATA PropGiftData;                   
};

struct tagGiftGroupOne
{
    int ID;                             
    int Day;                            
};

union tagGiftGroupData
{
    GIFTGROUPONE GiftGroupOne;                    	/* SVR_GIFT_GROUP_TYPE_ONE,   */
    GIFTGROUPONE GiftGroupRes;                    	/* SVR_GIFT_GROUP_TYPE_RES,   */
};

struct tagCSOnlineGiftGroupSvr
{
    int Type;                            	/*    Bind Macrosgroup:SVR_GIFT_GROUP_TYPE,*/
    GIFTGROUPDATA GiftGroupData;                  
};

struct tagContiGroup
{
    int ID;                             
    int Day;                            
};

/* 充值礼包ID信息 */
struct tagPropGiftIDInfo
{
    int GroupID;                         	/*   礼包所在组id */
    tdr_ulonglong CashUp;                          	/*   礼包对应的充值点数 */
};

union tagCSGiftCltData
{
    int LV;                              	/* GIFT_TYPE_LV,   */
    int GiftID;                          	/* GIFT_TYPE_ONEDAY,   */
    int ContGiftID;                      	/* GIFT_TYPE_CONTI, Ver.486  */
    int AccGiftID;                       	/* GIFT_TYPE_ACCGIFT, Ver.618  */
    PROPGIFTIDINFO PropGiftIDInfo;                  	/* GIFT_TYPE_PROPGIFT, Ver.1836  */
    CONTIGROUP ContiGroup;                      	/* GIFT_TYPE_CONTI_GROUP, Ver.640  */
    char CDkey[CDKEY_LEN];                	/* GIFT_TYPE_CDKEY, Ver.787  */
    int ID;                              	/* GIFT_TYPE_NEW_ROLE, Ver.2083  */
    int ContinueDay;                     	/* GIFT_TYPE_CONT_COVER, Ver.2083  */
};

struct tagCSGiftClt
{
    int GiftType;                        	/*    Bind Macrosgroup:GIFT_TYPE,*/
    CSGIFTCLTDATA CltData;                        
};

struct tagCSRangeCltPage
{
    int MainType;                       
    int SubType;                        
    int PageIdx;                         	/*   页号，从1开始 */
    int PageVersion;                     	/*   页版本 */
};

struct tagCSRangeCltWatchPlayer
{
    char RoleName[ROLE_NAME_LEN];        
};

struct tagCSRangeCltWatchPet
{
    char OwnerName[ROLE_NAME_LEN];       
    tdr_ulonglong WID;                             	/*   宠物的wid */
};

struct tagCSRangeCltJoinClan
{
    tdr_ulonglong ClanWID;                        
};

struct tagCSRangeCltFind
{
    int MainType;                       
    int SubType;                        
    int Flag;                            	/*   0 模糊查询，1 页面首次查询 */
    char Name[NAME_LEN];                 
};

union tagCSRangeCltData
{
    CSRANGECLTPAGE RangeCltPage;                    	/* RANGE_CLT_PAGE,   */
    CSRANGECLTWATCHPLAYER RangeCltWatchPlayer;             	/* RANGE_CLT_WATCH_PLAYER,   */
    CSRANGECLTWATCHPET RangeCltWatchPet;                	/* RANGE_CLT_WATCH_PET,   */
    CSRANGECLTJOINCLAN RangeCltJoinClan;                	/* RANGE_CLT_JOIN_CLAN,   */
    CSRANGECLTFIND RangeCltFind;                    	/* RANGE_CLT_FIND,   */
};

struct tagCSRangeClt
{
    int RangeCltOp;                      	/*    Bind Macrosgroup:RANGE_CLT_OP,*/
    CSRANGECLTDATA RangeCltData;                   
};

struct tagCSRangeSvrTip
{
    int MainType;                       
    int SubType;                        
    int LastRange;                       	/*   上次排名, -1表示落榜 */
    int CurrRange;                       	/*   现在排名, -1表示落榜 */
};

struct tagCSRangeSvrPage
{
    int MainType;                       
    int SubType;                        
    int TotalNum;                        	/*  Ver.260  */
    int PageIdx;                         	/*   页号，从1开始 */
    int PageVersion;                     	/*   页版本 */
    int EntryNum;                        	/*   本页有多少记录 */
    TOPRANGE Entrys[RANGE_MAX_PAGE_ENTRY];   
};

struct tagCSRangeSvrFind
{
    CSRANGECLTFIND CltFind;                        
    int EntryNum;                       
    TOPRANGE Entrys[RANGE_ONE_NUM];          
};

union tagCSRangeSvrData
{
    CSRANGESVRTIP RangeSvrTip;                     	/* RANGE_SVR_TIP,   */
    CSRANGESVRPAGE RangeSvrPage;                    	/* RANGE_SVR_PAGE,   */
    CSRANGESVRFIND RangeSvrFind;                    	/* RANGE_SVR_FIND,   */
};

struct tagCSRangeSvr
{
    int RangeSvrOp;                      	/*    Bind Macrosgroup:RANGE_SVR_OP,*/
    CSRANGESVRDATA RangeSvrData;                   
};

struct tagCSPworldLimitInfoDataAll
{
    unsigned char LimitPworldNum;                  	/*   每天限次副本的个数 */
    LIMITPWORLD LimitPworld[MAX_LIMIT_PWORLD_NUM]; 	/*   限次副本信息 */
};

union tagCSPworldLimitInfoData
{
    CSPWORLDLIMITINFODATAALL All;                             	/* PWORLD_LIMIT_TYPE_ALL,   */
    LIMITPWORLD Chg;                             	/* PWORLD_LIMIT_TYPE_CHG,   */
};

struct tagCSPworldLimitInfo
{
    int Type;                            	/*    Bind Macrosgroup:PWORLD_LIMIT_TYPE,*/
    CSPWORLDLIMITINFODATA PworldLimitInfoData;            
};

struct tagAutoTeamCltUI
{
    unsigned char UIOp;                            	/*    Bind Macrosgroup:AUTOTEAM_UI_OP,*/
};

struct tagAutoTeamCltTrans
{
    int PworldID;                        	/*   副本id */
    int New;                             	/*  Ver.1380 队长第一次点传送 */
};

union tagCSAutoTeamCltData
{
    AUTOTEAMAPPLYINFO Apply;                           	/* AUTOTEAM_CLT_OP_APPLY,   */
    AUTOTEAMCLTUI UIOp;                            	/* AUTOTEAM_CLT_OP_UI,   */
    AUTOTEAMCLTTRANS Trans;                           	/* AUTOTEAM_CLT_OP_TRANS,   */
};

struct tagCSAutoTeamClt
{
    int AutoTeamCltOp;                   	/*    Bind Macrosgroup:AUTOTEAM_CLT_OP,*/
    CSAUTOTEAMCLTDATA AutoTeamCltData;                
};

struct tagCSAutoTeamPreMemInfo
{
    char RoleName[NAME_LEN];             
    unsigned char Gender;                         
    unsigned char Career;                         
    unsigned char Head;                           
    unsigned char Face;                           
    unsigned char Hair;                           
    unsigned char Level;                          
    unsigned char CreatedTeamMem;                  	/*  Ver.307 0 非已建队伍成员，1 已建队伍成员 */
    unsigned char AgreeStat;                       	/*   0 未同意，1 已同意 */
    AUTOTEAMAPPLYINFO AutoTeamApplyInfo;              
};

struct tagCSAutoTeamPreAdd
{
    int AutoTeamID;                     
    int CreatedTeam;                    
    int Replace;                         	/*   0 增量，1 重排 */
    int Num;                             	/*   加入的人数 */
    CSAUTOTEAMPREMEMINFO PreMemInfos[MAX_TEAM_MEMBER];   
};

struct tagCSAutoTeamClean
{
    int Uin;                            
};

struct tagCSAutoTeamCancelSvr
{
    int CancelFlag;                      	/*   0 表示不返回上一界面，1 表示返回上一界面 */
};

struct tagCSAutoTeamPreDec
{
    char RoleName[NAME_LEN];             
};

struct tagCSAutoTeamPreAgree
{
    char RoleName[NAME_LEN];             
};

struct tagCSAutoTeamSucc
{
    int AutoTeamID;                     
    int OperType;                        	/*  Ver.893 0表示正常流程 1表示tick */
    int PworldGrade;                     	/*  Ver.307 副本难度，0 容易，1 普通，2 困难 */
    int Num;                             	/*   加入的人数 */
    CSAUTOTEAMPREMEMINFO PreMemInfos[MAX_TEAM_MEMBER];   
};

struct tagCSAutoTeamCreateSvr
{
    char RoleName[NAME_LEN];              	/*   希望完成创建的角色名 */
};

struct tagCSAutoTeamCreateCancelSvr
{
    char RoleName[NAME_LEN];              	/*   拒绝的角色名 */
};

/* 自动组队成功结束后的数据 */
struct tagCSAutoTeamEndSync
{
    int iTeamIdx;                       
    int AutoTeamID;                     
    int PworldGrade;                     	/*   副本难度，0 容易，1 普通，2 困难 */
};

union tagCSAutoTeamSvrData
{
    CSAUTOTEAMPREADD PreAdd;                          	/* AUTOTEAM_SVR_OP_PRE_ADD,   */
    CSAUTOTEAMPREDEC PreDec;                          	/* AUTOTEAM_SVR_OP_PRE_DEC,   */
    CSAUTOTEAMPREAGREE PreAgree;                        	/* AUTOTEAM_SVR_OP_PRE_AGREE,   */
    CSAUTOTEAMCANCELSVR CancelSvr;                       	/* AUTOTEAM_SVR_OP_CANCEL,   */
    CSAUTOTEAMSUCC Succ;                            	/* AUTOTEAM_SVR_OP_SUCC,   */
    CSAUTOTEAMCREATESVR Create;                          	/* AUTOTEAM_SVR_OP_CREATE,   */
    CSAUTOTEAMCREATECANCELSVR CreateCancel;                    	/* AUTOTEAM_SVR_OP_CREATE_CANCEL,   */
    CSAUTOTEAMENDSYNC AutoTeamEndSync;                 	/* AUTOTEAM_SVR_OP_INFO_SYNC, Ver.427  */
    CSAUTOTEAMCLEAN AutoTeamClean;                   	/* AUTOTEAM_SVR_OP_CLEAN, Ver.804  */
};

struct tagCSAutoTeamSvr
{
    int AutoTeamSvrOp;                   	/*    Bind Macrosgroup:AUTOTEAM_SVR_OP,*/
    CSAUTOTEAMSVRDATA AutoTeamSvrData;                
};

struct tagCSSecondarySkillRecipe
{
    unsigned short SkillType;                       	/*   技能类型: 采矿采药等等 Bind Macrosgroup:SECONDARY_SKILL_TYPE,*/
    unsigned short RecipeID;                        	/*   配方ID */
};

struct tagCSSecondarySkillResolve
{
    unsigned short GridIdx;                        
    unsigned short ListType;                        	/*    Bind Macrosgroup:LIST_TYPE,*/
};

struct tagCSSecondarySkillDel
{
    unsigned short SkillType;                       	/*   技能类型: 采矿采药等等 Bind Macrosgroup:SECONDARY_SKILL_TYPE,*/
};

union tagCSSecondarySkillCltData
{
    CSSECONDARYSKILLRECIPE LearnRecipe;                     	/* SECONDARY_SKILL_CLT_LEARN_RECIPE,   */
    CSSECONDARYSKILLRECIPE RecipePre;                       	/* SECONDARY_SKILL_CLT_RECIPE_PRE,   */
    CSSECONDARYSKILLRECIPE RecipePreBrk;                    	/* SECONDARY_SKILL_CLT_RECIPE_PRE_BRK,   */
    CSSECONDARYSKILLRESOLVE Resolve;                         	/* SECONDARY_SKILL_CLT_RECIPE_RESOLVE,   */
    CSSECONDARYSKILLRECIPE Blacksmithing;                   	/* SECONDARY_SKILL_CLT_RECIPE_BLACKSMITHING,   */
    CSSECONDARYSKILLRECIPE Alchemy;                         	/* SECONDARY_SKILL_CLT_RECIPE_ALCHEMY,   */
    CSSECONDARYSKILLRECIPE Enchant;                         	/* SECONDARY_SKILL_CLT_RECIPE_ENCHANT,   */
    CSSECONDARYSKILLRECIPE Engineering;                     	/* SECONDARY_SKILL_CLT_RECIPE_ENGINEERING,   */
    CSSECONDARYSKILLDEL DelSkill;                        	/* SECONDARY_SKILL_CLT_DEL_SKILL,   */
    CSSECONDARYSKILLRECIPE Mining;                          	/* SECONDARY_SKILL_CLT_RECIPE_MINING, Ver.315  */
    CSSECONDARYSKILLRECIPE Herbalism;                       	/* SECONDARY_SKILL_CLT_RECIPE_HERBALISM, Ver.315  */
};

struct tagCSSecondarySkillClt
{
    int CltOp;                           	/*    Bind Macrosgroup:SECONDARY_SKILL_CLT_OP,*/
    CSSECONDARYSKILLCLTDATA CltData;                        
};

struct tagCSSecondarySkillRecipeChg
{
    unsigned short SkillType;                       	/*   技能类型: 采矿采药等等 Bind Macrosgroup:SECONDARY_SKILL_TYPE,*/
    unsigned short RecipeID;                        	/*   配方ID */
    int CoolDownTime;                    	/*   冷却结束时间单位秒 */
};

struct tagCSSecondarySkillChg
{
    unsigned short SkillType;                       	/*   技能类型: 采矿采药等等 Bind Macrosgroup:SECONDARY_SKILL_TYPE,*/
    unsigned short SkillLevel;                      	/*   技能等级 */
    int SkillVal;                        	/*   熟练度 */
};

struct tagCSSecondarySkillPre
{
    int MemID;                           	/*   角色实例ID */
    unsigned short SkillType;                       	/*   技能类型: 采矿采药等等 Bind Macrosgroup:SECONDARY_SKILL_TYPE,*/
    unsigned short RecipeID;                        	/*   配方ID */
};

struct tagCSSecondarySkillPreBrk
{
    int MemID;                           	/*   角色实例ID */
};

struct tagCSSecondarySkillSucc
{
    int MemID;                           	/*   角色实例ID */
    unsigned short SkillType;                       	/*   技能类型: 采矿采药等等 Bind Macrosgroup:SECONDARY_SKILL_TYPE,*/
    unsigned short RecipeID;                        	/*   配方ID */
    unsigned int ItemID;                          	/*   获得物品 */
    int ItemNum;                         	/*   获得的物品数量 */
};

union tagCSSecondarySkillSvrData
{
    SECONDARYSKILLMISCINFO AllInfo;                         	/* SECONDARY_SKILL_SVR_INFO,   */
    CSSECONDARYSKILLRECIPECHG RecipeChg;                       	/* SECONDARY_SKILL_SVR_RECIPE_CHG,   */
    CSSECONDARYSKILLDEL DelSkill;                        	/* SECONDARY_SKILL_SVR_DEL_SKILL,   */
    CSSECONDARYSKILLCHG SkillChg;                        	/* SECONDARY_SKILL_SVR_SKILL_CHG,   */
    CSSECONDARYSKILLPRE SkillPre;                        	/* SECONDARY_SKILL_SVR_RECIPE_PRE,   */
    CSSECONDARYSKILLPREBRK SkillPreBrk;                     	/* SECONDARY_SKILL_SVR_RECIPE_PRE_BRK,   */
    CSSECONDARYSKILLSUCC SuccInfo;                        	/* SECONDARY_SKILL_SVR_RECIPE_SUCC,   */
};

struct tagCSSecondarySkillSvr
{
    int SvrOp;                           	/*    Bind Macrosgroup:SECONDARY_SKILL_SVR_OP,*/
    CSSECONDARYSKILLSVRDATA SvrData;                        
};

struct tagCSPrepareAtkByHit
{
    int AtkerID;                         	/*   怪物的内存id */
    unsigned short SkillID;                         	/*   怪物当前释放的吟唱技能id */
};

struct tagCSNormalAtkByHit
{
    int AtkerID;                         	/*   怪物的内存id */
    int HitTarget;                       	/*   怪物攻击对象的id,可以是宠物id */
};

union tagCSPrepareAtkData
{
    CSPREPAREATKBYHIT PrepareAtkByHit;                 	/* PREPAREATK_OP_AKEE,   */
    CSNORMALATKBYHIT NormalAtkByHit;                  	/* NORMALATK_OP_AKEE, Ver.520  */
};

struct tagCSPrepareAtkInfo
{
    int PrepareAtkOp;                    	/*    Bind Macrosgroup:PREPAREATK_CLT_OP,*/
    CSPREPAREATKDATA PrepareAtkData;                 
};

struct tagMatchChgCareer
{
    int Career;                         
    int GridIdx;                        
};

struct tagRegReq
{
    char Msg[MAX_REG_MSG];               
};

struct tagBuChangReq
{
    int Day;                            
};

struct tagCharmReq
{
    char Flag;                            	/*   0-鲜花 1-鸡蛋 */
    char Type;                            	/*   取值为0-2，依次对应3个类型 */
    char Accept[ROLE_NAME_LEN];           	/*   接收方 */
    int Num;                             	/*   数量 */
};

struct tagCSWorldBossInfoReq
{
    char Res;                             	/*   占位,未使用 */
};

struct tagCSWorldBossInfoOne
{
    int MonID;                          
    int Stat;                            	/*   1-已出现 */
    int FreshTime;                       	/*   预计刷新时间 */
};

struct tagCSWorldBossInfoRes
{
    int Num;                            
    CSWORLDBOSSINFOONE One[MAX_WORLD_BOSS_NUM];        
};

struct tagCSPlayerClanEverydayPworldEnter
{
    char Res;                             	/*   占位,未使用 */
};

struct tagCSPlayerClanMachinePworldEnter
{
    char Res;                             	/*   占位,未使用 */
    int ClanID;                          	/*  Ver.2254  */
};

struct tagCSPlayerTakeCowAward
{
    char Res;                             	/*   占位,未使用 */
};

struct tagCSBaoXiangOpen
{
    unsigned short GridIdx;                        
    unsigned short ListType;                        	/*    Bind Macrosgroup:LIST_TYPE,*/
};

struct tagCSYangHaiBangAdd
{
    int Num;                            
};

struct tagCSPlayerTakeHangHaiAward
{
    char Res;                             	/*   占位,未使用 */
};

struct tagCSPlayerTakeClanWarAward
{
    char Res;                             	/*   占位,未使用 */
};

struct tagCSRongYanBossSelect
{
    int iSelect;                         	/*   0代表未选择，1代表已经选择 */
};

struct tagCSRongYanBeginSelect
{
    int iBeginSelectMul;                 	/*   刚开始选泽的倍数索引，只能取1,2,3,4 */
};

struct tagCSPaoShangUiSelect
{
    int ItemID;                          	/*   道具id */
    int Price;                           	/*   界面价格 */
    int Num;                             	/*   数量 */
    int BuySellType;                     	/*   买卖类型 Bind Macrosgroup:PAOSHANG_CLT_OP,*/
};

/* 短信验证码操作对应信息 */
union tagPrecreateGiftVerifyData
{
    char GetSmsMobile[NAME_LEN];          	/* PRECREATE_GIFT_VERIFY_OP_GET_SMS,  获取验证码|手机号 */
    int Verify;                          	/* PRECREATE_GIFT_VERIFY_OP_VERIFY,  认证验证码|6位整数 */
};

/* 短信验证码操作对应信息 */
struct tagCSPlayerPrecreateGiftVerify
{
    int OpType;                          	/*   操作类型 Bind Macrosgroup:PRECREATE_GIFT_VERIFY_OP,*/
    PRECREATEGIFTVERIFYDATA Data;                            	/*   短信验证码操作对应信息 */
};

struct tagCSDianFengGroupInfoC
{
    char WhichOne;                        	/*   需要服务器下发给客户端哪一组，1代表征服者，2守护，3驭雷，4圣佑，5猎杀，6毁灭，7炼魂，8聚能 Bind Macrosgroup:DIANFENG_JOB_TYPE,*/
    int DFversion;                      
};

struct tagCSDianFengBaoMing
{
    int BaoMingReq;                      	/*   无用 */
};

struct tagCSDianFengTransmit
{
    int TransmitReq;                     	/*   无用 */
};

struct tagCSDianFengIfGuess
{
    int IfGuessReq;                      	/*   无用 */
};

struct tagZJRongYanCall
{
    int Req;                             	/*   保留 */
};

struct tagCSZJRongYanBossSelect
{
    int iSelect;                         	/*   0代表未选择，1代表已经选择 */
};

struct tagCSSculptChgClt
{
    unsigned char Head;                            	/*   发色 */
    unsigned char Face;                            	/*   脸型 */
    unsigned char Hair;                            	/*   发型 */
};

struct tagCSNewPeopleClt
{
    int Req;                             	/*   保留 */
};

struct tagCSClearShortCutSkill
{
    int res;                             	/*   1代表清除完毕 */
};

union tagCSPlayerMiscCltData
{
    int CarrerChgType;                   	/* PLAYER_CAREER_CHG_CLT,  转值的类型 */
    int CleanStatusID;                   	/* PLAYER_CLEAN_SAFETIME_STATUSID_CLT, Ver.421 清楚保护状态id */
    CSCHOOSEC ChooseC;                         	/* PLAYER_CHOOSE_CLT, Ver.482  */
    unsigned int TargetID;                        	/* PLAYER_SELECT_TARGET_CLT, Ver.773  */
    unsigned int ClanItemID;                      	/* PLAYER_DROP_CLAN_ITEM, Ver.867  */
    CSPLAYERCLANEVERYDAYPWORLDENTER ClanEverydayPworldEnter;         	/* PLAYER_CLAN_EVERYDAY_PWORLD_ENTER, Ver.1365  */
    CSPLAYERCLANMACHINEPWORLDENTER ClanMachinePworldEnter;          	/* PLAYER_CLAN_MACHINE_PWORLD_ENTER, Ver.1526  */
    int ShamDeadBrk;                     	/* PLAYER_SHAM_DEAD_BRK, Ver.1538  */
    CSPLAYERTAKECOWAWARD TakeCowAward;                    	/* PLAYER_TAKE_COW_AWARD, Ver.1556  */
    int ExpBuffAward;                    	/* PLAYER_EXP_BUFF_AWARD, Ver.1702  */
    CSBAOXIANGOPEN BaoXiangOpen;                    	/* PLAYER_BAOXIANG_OPEN, Ver.1775  */
    CSWORLDBOSSINFOREQ BossInfoReq;                     	/* PLAYER_WORLD_BOSS_INFO_REQ, Ver.1818  */
    CHARMREQ CharmReq;                        	/* PLAYER_CHARM_REQ, Ver.2055  */
    REGREQ RegReq;                          	/* PLAYER_REG_REQ, Ver.2065  */
    BUCHANGREQ BuChangReq;                      	/* PLAYER_BUCHANG_REQ, Ver.2088  */
    int AwardMTGift;                     	/* PLAYER_MT_GIFT_AWARD, Ver.2095  */
    CSYANGHAIBANGADD YangHaiBangAdd;                  	/* PLAYER_YANGHAIBANG_ADD, Ver.2110  */
    int YangHaiBangAward;                	/* PLAYER_YANGHAIBANG_AWARD, Ver.2110  */
    CSPLAYERTAKEHANGHAIAWARD TakeHangHaiAward;                	/* PLAYER_TAKE_HANG_HAI_AWARD, Ver.2113  */
    CSPLAYERTAKECLANWARAWARD TakeClanWarAward;                	/* PLAYER_TAKE_CLAN_WAR_AWARD, Ver.2165  */
    CSRONGYANBOSSSELECT RongYanBossSelect;               	/* PLAYER_RONGYAN_BOSS_SELECT, Ver.2166  */
    CSRONGYANBEGINSELECT RongYanBeginSelect;              	/* PLAYER_RONGYAN_BEGIN_SELECT, Ver.2166  */
    CSPAOSHANGUISELECT PaoShangUiSelect;                	/* PLAYER_PAOSHANG_UI_SELECT, Ver.2201  */
    CSPLAYERPRECREATEGIFTVERIFY PrecreateGiftVerify;             	/* PLAYER_PRECREATE_GIFT_VERIFY, Ver.2227  */
    CSDIANFENGGROUPINFOC DianFengGroupInfoC;              	/* PLAYER_DIANFENG_GROUP_INFO_C, Ver.2292  */
    GUESSINFOS DianFengJingCai;                 	/* PLAYER_DIANFENG_JING_CAI, Ver.2292  */
    CSDIANFENGBAOMING DianFengBaoMing;                 	/* PLAYER_DIANFENG_BAOMING_CLT, Ver.2292  */
    CSDIANFENGTRANSMIT DianFengTransmit;                	/* PLAYER_DIANFENG_TRANSMIT_CLT, Ver.2292  */
    CSDIANFENGIFGUESS DianFengIfGuess;                 	/* PLAYER_DIANFENG_IF_GUESS_CLT, Ver.2295  */
    MATCHCHGCAREER MatchChgCareer;                  	/* PLAYER_MATCH_CHG_CAREER, Ver.2328  */
    ZJRONGYANCALL ZJRongYanCall;                   	/* PLAYER_ZJ_RONGYAN_CALL, Ver.2407  */
    CSZJRONGYANBOSSSELECT ZJRongYanBossSelect;             	/* PLAYER_ZJ_RONGYAN_BOSS_SELECT, Ver.2413  */
    CSSCULPTCHGCLT SculptChgClt;                    	/* PLAYER_SCULPT_CHG_CLT, Ver.2461  */
    CSNEWPEOPLECLT NewPeopleClt;                    	/* PLAYER_NEW_PEOPLE_CLT, Ver.2498  */
    CSCLEARSHORTCUTSKILL ClearShortCutSkill;              	/* PLAYER_SHORTCUT_SKILL_CLEAR, Ver.2505  */
};

struct tagCSPlayerMiscClt
{
    unsigned int PlayerMiscType;                  	/*    Bind Macrosgroup:PLAYER_MISC_CLT_TYPE,*/
    CSPLAYERMISCCLTDATA PlayerMiscCltData;              
};

struct tagMztLayerOne
{
    int Layer;                          
    char Name[ROLE_NAME_LEN];            
};

struct tagUnrealExpLayerInfo
{
    int Layer;                          
};

struct tagMztLayerInfo
{
    int Num;                            
    MZTLAYERONE Ones[MAX_TEAM_MEMBER];          
};

struct tagClanPetNotify
{
    PETJIYANGINFO Notify;                         
};

struct tagContinueKill
{
    int Continue;                       
};

struct tagCSContCoverGiftInfo
{
    int ItemID;                          	/*   抽到的东东,如果为0表示非抽奖时发给客户端的 */
    int ItemNum;                        
    CONTCOVERGIFTINFO ContCoverGiftInfo;              
};

struct tagLostTotemActive
{
    char Active;                          	/*   1-激活 0-取消 */
    tdr_ulonglong WID;                             	/*   道具Wid */
};

struct tagChuanChengPoint
{
    int Point;                          
};

struct tagWeekCharm
{
    int Charm;                          
};

struct tagGoldRateRes
{
    unsigned int GoldRate;                       
};

struct tagBuChangRes
{
    int Succ;                            	/*   0-成功 */
};

struct tagCSNewGiftInfo
{
    NEWROLEGIFTINFO NewRoleGiftInfo;                
};

struct tagCSBuyHetong
{
    int HetongID;                        	/*   合同ID */
};

struct tagCSPlayerMaxLevel
{
    int Level;                           	/*   最高等级 */
};

struct tagRegRes
{
    int Succ;                            	/*   0-成功 */
};

struct tagCharmRes
{
    char Flag;                            	/*   0-鲜花 1-鸡蛋 */
    char Type;                            	/*   取值为0-2，依次对应3个类型 */
    char Accept[ROLE_NAME_LEN];           	/*   接收方 */
    char Send[ROLE_NAME_LEN];             	/*   赠送方 */
    int Num;                             	/*   数量 */
};

struct tagCSWeather
{
    int WeatherType;                     	/*   当前天气 */
    int Master;                          	/*   1-人为改变 */
};

struct tagCSBaoXiangAwardInfo
{
    int Succ;                           
    tdr_ulonglong ItemWID;                        
    int ItemID;                         
    int BaoXiangItemID;                  	/*   继续开哪个宝箱的ID */
    int Num;                             	/*   2153 */
};

struct tagCSSvrRegInfoOne
{
    REGONE RegOne;                         
    unsigned char Lvl;                            
    unsigned char Career;                         
    unsigned char Gender;                         
    tdr_ulonglong ClanWID;                        
};

struct tagCSSvrRegInfo
{
    int Num;                            
    int NpcID;                           	/*  Ver.2098  */
    CSSVRREGINFOONE RegInfoOne[MAX_REG_NUM];        
};

struct tagCsExpBuffInfo
{
    int Exp;                            
    int Day;                            
};

struct tagCSMTGiftInfo
{
    int EndTime;                        
    int AwardTime;                      
    int AwardMoneyVal;                  
};

struct tagCSYangHaiBangUIInfo
{
    int EndTime;                        
    int Level;                          
    int Val;                            
    int tLifeEnd;                        	/*  Ver.2145 海蚌的生存时间 */
};

struct tagCSRongYanUIInfo
{
    int CurLayer;                        	/*   当前第几层 */
    int BeginSelectMul;                  	/*   当初选择的倍数索引，只能取1,2,3,4 */
};

struct tagCSRongYanBossInfo
{
    int CurLayer;                        	/*   当前第几层 */
    int BeginSelectMul;                  	/*   当初选择的倍数索引，只能取1,2,3,4 */
};

struct tagZhengyiChg
{
    int DayCount;                        	/*   今天已经获得了多少正义点 */
    int DayCountLimit;                   	/*   今天正义点上限 */
};

/* 跑商道具右边的ui */
struct tagPaoShangRightUi
{
    int RightItemID;                    
    int UserSellPrice;                   	/*   现在用户卖出的价格 */
    int HaveItemNum;                     	/*   用户拥有该物品的数量 */
    int SellTotalPrice;                  	/*   卖出的总价 */
    int CostPrice;                       	/*   成本价 */
};

/* 跑商道具左边的ui */
struct tagPaoShangLeftUi
{
    int LeftItemID;                     
    int UserBuyPrice;                    	/*   现在用户购买需要的价格 */
    int BuyRemainNum;                    	/*   还剩多少数量 */
};

struct tagCSPaoShangUIInfo
{
    int iNpcPaoShangID;                  	/*  Ver.2208 npc跑商商人的memid */
    int YinPiao;                         	/*   银票余额 */
    int JiaoPiao;                        	/*   交票金额 */
    int RightNum;                        	/*   右边ui道具数量 */
    PAOSHANGRIGHTUI PaoShangRightUi[MAX_PAOSHANG_DAOJU_NUM]; 	/*   右边道具列表 */
    int LeftNum;                         	/*   左边ui道具数量 */
    PAOSHANGLEFTUI PaoShangLeftUi[MAX_PAOSHANG_NPC_SHELL_ITEM_NUM]; 	/*   左边道具列表 */
};

struct tagCSDaQiangDaoFenShu
{
    int iFenShu;                         	/*   逆往之间（打强盗）分数 */
};

struct tagCSDianFengFirstInfo
{
    char Type;                            	/*    Bind Macrosgroup:DIANFENG_FIRST_TYPE,*/
    int ActiveTimeS;                     	/*   活动开启时间 */
    int IfBaoMing;                       	/*   是否报名，0没报名，1表示报名 */
    char Status;                          	/*   报名参赛按键处该如何显示 Bind Macrosgroup:DIANFENG_BAOMING,*/
    char WhichOne;                        	/*   当Type为FIRST_EFFIGY，才有效，表示雕像雕哪一个,0表示全部 Bind Macrosgroup:DIANFENG_JOB_TYPE,*/
    DFFIRST DFZFZFirstInfo;                  	/*   征服者冠军和雕像信息,看Type */
    DFFIRST DFSHZFirstInfo;                  	/*   守护者冠军和雕像信息,看Type */
    DFFIRST DFYLSFirstInfo;                  	/*   驭雷师冠军和雕像信息,同理 */
    DFFIRST DFSYZFirstInfo;                  	/*   圣佑者冠军和雕像信息 */
    DFFIRST DFLSZFirstInfo;                  	/*   猎杀者冠军和雕像信息 */
    DFFIRST DFHMZFirstInfo;                  	/*   毁灭者冠军和雕像信息 */
    DFFIRST DFLHSFirstInfo;                  	/*   炼魂师冠军和雕像信息 */
    DFFIRST DFJNZFirstInfo;                  	/*   聚能者冠军和雕像信息 */
};

/* 职业组信息 */
struct tagDFGroupInfo
{
    int MemNum;                          	/*   人数量 */
    GROUPINFO GroupMemInfo[MAX_DIANFENG_EVERY_GROUP_MEM_NUM]; 	/*   组员信息 */
};

struct tagCSDianFengGroupUIInfo
{
    char WhichOne;                        	/*   下发给客户端哪一组，1代表征服者，以此类推 Bind Macrosgroup:DIANFENG_JOB_TYPE,*/
    int DFversion;                      
    DFGROUPINFO DFGroupInfo;                     	/*   职业组信息 */
};

struct tagDianFengPiPeiSucceedUI
{
    int res;                             	/*   1表示打开，2表示关闭 */
};

struct tagDianFengBaoMingUI
{
    int Res;                             	/*   0的话打开报名提示框，1的话报名成功，2的话报名失败 */
};

struct tagDianFengTransmitUI
{
    int Res;                             	/*   0的话表示弹出传送提示框，1表示传送成功，2表示传送失败 */
};

struct tagCSDianFengGuessResSvr
{
    int Res;                             	/*   1表示竞猜成功，2表示竞猜失败,3表示已经竞猜过了，4表示没有竞猜过 */
    GUESSINFOS DianFengJingCai;                 	/*  Ver.2295 Res为1或为3，这才有值 */
    tdr_longlong AllMoneyNum;                     	/*  Ver.2298 本届竞猜奖池银币数量 */
};

/* 支持信息 */
struct tagSupportMingDan
{
    char Name[ROLE_NAME_LEN];             	/*   支持的角色名 */
};

struct tagCSDianFengGuessMingDan
{
    char GuessRoleName[ROLE_NAME_LEN];    	/*   参与竞猜玩家的角色名 */
    int Num;                             	/*   选择支持者的人数 */
    SUPPORTMINGDAN SupportMingDan[MAX_SUPPORT_MEM_NUM]; 	/*   支持的人 */
};

/* 询问是否突破获取经验限制对话框 */
struct tagCSBeachLowExpUI
{
    int iReq;                            	/*   保留 */
};

/* 终极熔岩巨兽UI */
struct tagZJRongYanInfo
{
    int Type;                            	/*   0表示是倒数召唤提示窗口，1表示等级奖励窗口 */
    int DaoJiShi;                        	/*   倒计时间,当Type等于0的时候有用,单位s */
    int ExpMul;                          	/*   经验倍数 */
    tdr_longlong CurExp;                          	/*   当前奖励 */
    int Level;                           	/*   怪物等级 */
    int NextExpMul;                      	/*   下一阶奖励倍数 */
};

struct tagCSZJRongYanBossInfo
{
    int Type;                            	/*   0表示打开，1表示关闭 */
    int NextExpMul;                      	/*   下一阶奖励倍数 */
};

struct tagCSSculptChgSvr
{
    int Res;                             	/*   0表示失败，1表示成功 */
};

/* 文字密码提示UI */
struct tagCSWordPwdUI
{
    int Type;                            	/*   0 表示是词语准备中提示窗口，1表示请答题窗口 */
    int DaoJiShi;                        	/*   倒计时间，单位s */
    int Num;                             	/*   第几题 */
};

struct tagCSEnterSpanMapNotify
{
    int CampIdx;                         	/*   自己的阵营 */
};

struct tagPeopleInfo
{
    char RoleName[ROLE_NAME_LEN];         	/*   角色名 */
    char Gender;                          	/*   性别 */
    unsigned char Level;                          
};

struct tagCSNewPeopleInfo
{
    int Num;                             	/*   数量 */
    PEOPLEINFO PeopleInfo[MAX_NEW_PEOPLE_NUM];  	/*   新人栏具体信息 */
};

/* 返回的相关数据 */
union tagCSPlayerMiscSvrData
{
    CSACTIONCAREERCHG ActionCareerChg;                 	/* PLAYER_CAREER_CHG_SVR,  转值的类型 */
    CSCHOOSES ChooseS;                         	/* PLAYER_CHOOSE_SVR, Ver.482  */
    CSMOVIESTARTS MovieStartS;                     	/* PLAYER_MOVIE_START_SVR, Ver.522  */
    CSOPENITEMMAP OpenItemMap;                     	/* PLAYER_OPEN_ITEM_MAP, Ver.1052  */
    CSEXPBUFFINFO ExpBuffInfo;                     	/* PLAYER_EXP_BUFF_INFO, Ver.2088  */
    CSPLAYERMAXLEVEL MaxLevel;                        	/* PLAYER_WORLD_MAX_LEVEL, Ver.1704  */
    CSBAOXIANGAWARDINFO BaoXiangAwardInfo;               	/* PLAYER_BAOXIANG_AWARD_INFO, Ver.1775  */
    CSWORLDBOSSINFORES BossInfoRes;                     	/* PLAYER_BOSS_INFO_RES, Ver.1818  */
    CSWEATHER Weather;                         	/* WEATHER_CHG_NOTIFY, Ver.1837  */
    CHARMRES CharmRes;                        	/* PLAYER_CHARM_RES, Ver.2055  */
    REGRES RegRes;                          	/* PLAYER_REG_RES, Ver.2065  */
    CSSVRREGINFO SvrRegInfo;                      	/* PLAYER_SVR_REG_INFO, Ver.2065  */
    CSBUYHETONG BuyHetong;                       	/* PLAYER_SVR_BUY_HETONG, Ver.2080  */
    CSNEWGIFTINFO NewGiftInfo;                     	/* PLAYER_SVR_NEW_GIFT_INFO, Ver.2083  */
    CSCONTCOVERGIFTINFO ContCoverGiftInfo;               	/* PLAYER_SVR_CONT_COVER_INFO, Ver.2083  */
    BUCHANGRES BuChangRes;                      	/* PLAYER_BUCHANG_RES, Ver.2088  */
    CSMTGIFTINFO MTGiftInfo;                      	/* PLAYER_MT_GIFT_INFO, Ver.2095  */
    CSYANGHAIBANGUIINFO YangHaiBangUIInfo;               	/* PLAYER_YANGHAIBANG_UI_INFO, Ver.2110  */
    GOLDRATERES GoldRateRes;                     	/* PLAYER_GOLD_RATE, Ver.2121  */
    LOSTTOTEMACTIVE TotemActive;                     	/* PLAYER_TOTEM_ACTIVE, Ver.2143  */
    CSRONGYANUIINFO RongYanUIInfo;                   	/* PLAYER_RONGYAN_MOVE_UI, Ver.2166  */
    CSRONGYANBOSSINFO RongYanBossInfo;                 	/* PLAYER_RONGYAN_BOSS_TRUE_FALSE_UI, Ver.2166  */
    ZHENGYICHG ZhengyiChg;                      	/* ZHENGYI_LIMIT_CHG, Ver.2170  */
    CHUANCHENGPOINT ChuanChengPoint;                 	/* CHUAN_CHENG_CHG, Ver.2180  */
    CSPAOSHANGUIINFO PaoShangUIInfo;                  	/* PLAYER_OPEN_PAOSHANG_UI_SVR, Ver.2201  */
    CSDAQIANGDAOFENSHU DaQiangDaoFenShu;                	/* PLAYER_DAQIAGNDAO_FENSHU, Ver.2212  */
    WEEKCHARM WeekCharm;                       	/* PLAYER_WEEK_CHARM, Ver.2240  */
    CSDIANFENGFIRSTINFO DianFengFirstInfo;               	/* PLAYER_DIANFENG_FIRST_INFO, Ver.2292  */
    CSDIANFENGGROUPUIINFO DianFengGroupUIInfo;             	/* PLAYER_DIANFENG_GROUP_UI_INFO, Ver.2292  */
    DIANFENGPIPEISUCCEEDUI DianFengPiPeiSucceedUI;          	/* PLAYER_DIANFENG_PIPEI_SUCCEED_UI, Ver.2292  */
    DIANFENGWINLOSSUI DianFengWinLossUI;               	/* PLAYER_DIANFENG_WIN_LOSS_UI, Ver.2292  */
    DIANFENGBAOMINGUI DianFengBaoMingUI;               	/* PLAYER_DIANFENG_BAOMING_UI_SVR, Ver.2292  */
    DIANFENGTRANSMITUI DianFengTransmitUI;              	/* PLAYER_DIANFENG_TRANSMIT_UI_SVR, Ver.2292  */
    CSDIANFENGGUESSRESSVR DianFengGuessResSvr;             	/* PLAYER_DIANFENG_GUESS_RES_SVR, Ver.2292  */
    CSDIANFENGGUESSMINGDAN DianFengGuessMingDan;            	/* PLAYER_DIANFENG_GUESS_MINGDAN, Ver.2299  */
    CONTINUEKILL ContinueKill;                    	/* CONTINUE_KILL_TANK, Ver.2315  */
    CLANPETNOTIFY ClanPetNotify;                   	/* PLAYER_CLAN_PET_NOTIFY, Ver.2315  */
    CSBEACHLOWEXPUI BeachLowExpUI;                   	/* PLAYER_BEACH_LOW_EXP_SVR, Ver.2327  */
    MZTLAYERINFO MztLayerInfo;                    	/* PLAYER_TEAM_MZT_LAYER_NOTIFY, Ver.2331  */
    UNREALEXPLAYERINFO UnrealExpLayerInfo;              	/* PLAYER_UNREAL_EXP_LAYER_NOTIFY, Ver.2336  */
    ZJRONGYANINFO ZJRongYanInfo;                   	/* PLAYER_ZJ_RONGYAN_SVR, Ver.2407  */
    CSZJRONGYANBOSSINFO ZJRongYanBossInfo;               	/* PLAYER_ZJ_RONGYAN_TRUE_FALSE_UI, Ver.2413  */
    CSSCULPTCHGSVR SculptChgSvr;                    	/* PLAYER_SCULPT_CHG_SVR, Ver.2461  */
    CSWORDPWDUI WordPwdUI;                       	/* PLAYER_WORD_PWD_UI, Ver.2464  */
    CSENTERSPANMAPNOTIFY EnterSpanMapNotify;              	/* PLAYER_ENTER_SPAN_MAP_NOTIFY, Ver.2492  */
    CSNEWPEOPLEINFO NewPeopleInfo;                   	/* PLAYER_NEW_PEOPLE_INFO, Ver.2498  */
};

struct tagCSPlayerMiscSvr
{
    unsigned int PlayerMiscType;                  	/*    Bind Macrosgroup:PLAYER_MISC_SVR_TYPE,*/
    CSPLAYERMISCSVRDATA PlayerMiscSvrData;              
};

struct tagCSRideOnMachine
{
    int MachineID;                       	/*   骑乘的怪物MemID */
    int SitIdx;                          	/*  Ver.513 选择座位 */
};

struct tagCSLeaveMachine
{
    int MachineID;                       	/*   骑乘的怪物MemID */
};

struct tagCSMachineBack
{
    int MachineID;                       	/*   骑乘的怪物MemID */
};

struct tagCSMachineKick
{
    int KickID;                          	/*   被踢掉的人的MemID */
};

struct tagCSMachinePassenger
{
    int MachineID;                       	/*   骑乘的怪物MemID */
};

struct tagCSMachineInvite
{
    unsigned int MachineInviteID;                 	/*   邀请对象ID */
};

struct tagCSMachineInviteAccpet
{
    unsigned int MachineOwnerID;                  	/*   机械拥有者ID */
};

struct tagCSMachineInviteRefuse
{
    int MachineOwnerID;                  	/*   机械拥有者ID */
    int RefuseType;                      	/*    Bind Macrosgroup:MACHINE_REFUSE_TYPE,*/
};

union tagCSRideMachineCltData
{
    CSRIDEONMACHINE Ride;                            	/* RIDE_MACHINE_CLT_RIDE,   */
    CSLEAVEMACHINE Leave;                           	/* RIDE_MACHINE_CLT_LEAVE,   */
    CSMACHINEBACK Back;                            	/* RIDE_MACHINE_CLT_BACK, Ver.452  */
    CSMACHINEKICK Kick;                            	/* RIDE_MACHINE_CLT_KICK, Ver.523  */
    CSMACHINEPASSENGER Passenger;                       	/* RIDE_MACHINE_CLT_PASSENGER_UI, Ver.524  */
    CSLEAVEMACHINE LeavePre;                        	/* RIDE_MACHINE_CLT_LEAVE_PRE, Ver.874  */
    CSLEAVEMACHINE LeavePreBrk;                     	/* RIDE_MACHINE_CLT_LEAVE_PRE_BRK, Ver.901  */
    CSMACHINEINVITE Invite;                          	/* RIDE_MACHINE_CLT_INVITE, Ver.1039  */
    CSMACHINEINVITEACCPET InviteAccpet;                    	/* RIDE_MACHINE_CLT_INVITE_ACCPET, Ver.1039  */
    CSMACHINEINVITEREFUSE InviteRefuse;                    	/* RIDE_MACHINE_CLT_INVITE_REFUSE, Ver.1039  */
};

struct tagCSRideMachineCLt
{
    int CltOp;                           	/*    Bind Macrosgroup:RIDE_MACHINE_CLT_OP,*/
    CSRIDEMACHINECLTDATA Data;                           
};

struct tagCSMachineSvrInvite
{
    unsigned int MachineInviteID;                 	/*   邀请者ID */
    char RoleName[NAME_LEN];              	/*   邀请者名字 */
};

union tagCSMachineSvrData
{
    CSMACHINESVRINVITE Invite;                          	/* MACHINE_SVR_INVITE_INFO,   */
};

struct tagCSMachineSvr
{
    int SvrOp;                           	/*    Bind Macrosgroup:MACHINE_SVR_OP,*/
    CSMACHINESVRDATA Data;                           
};

struct tagCSMapChgLine
{
    int MapID;                           	/*   需要换的线的定义ID */
};

struct tagCSUpdateLineInfo
{
    int MapID;                           	/*   当前地图ID */
};

union tagCSMapCltData
{
    CSMAPCHGLINE ChgLine;                         	/* MAP_CLT_CHANGE_LINE,   */
    CSUPDATELINEINFO UpdateLineInfo;                  	/* MAP_CLT_UPDATE_LINE_INFO,   */
};

struct tagCSMapClt
{
    int CltOp;                           	/*    Bind Macrosgroup:MAP_CLT_OP,*/
    CSMAPCLTDATA Data;                           
};

struct tagCSMapLineData
{
    int MapID;                          
    int Busy;                            	/*    Bind Macrosgroup:MAP_BUSY_TYPE,*/
};

struct tagCSMapLineInfo
{
    int LineNum;                        
    CSMAPLINEDATA MapInfo[MAX_MAP_LINE];          
};

struct tagCSMapOreInfo
{
    int ID;                             
    int MemID;                           	/*  Ver.1266  */
    int Map;                            
    RESPOS Pos;                            
};

struct tagCSMapOreList
{
    int OreNum;                         
    CSMAPOREINFO OreInfo[MAX_MAP_ORE];           
};

struct tagCSMapBigOreList
{
    int OreNum;                         
    CSMAPOREINFO OreInfo[MAX_WORLD_ORE];         
};

union tagCSMapSvrData
{
    CSMAPLINEINFO MapLineInfo;                     	/* MAP_SVR_LINE_INFO,   */
    CSMAPORELIST OreList;                         	/* MAP_SVR_ORE_INFO, Ver.1247  */
    CSMAPBIGORELIST BigOreList;                      	/* MAP_SVR_BIG_ORE_INFO, Ver.1247  */
};

struct tagCSMapSvr
{
    int SvrOp;                           	/*    Bind Macrosgroup:MAP_SVR_OP,*/
    CSMAPSVRDATA Data;                           
};

struct tagCSReportDataReq
{
    int Num;                            
    char Req[MAX_REPORT_DATA_REQ];       
};

struct tagCSReportDataRes
{
    int Num;                            
    char Res[MAX_REPORT_DATA_RES];       
};

struct tagCSBattleLimitAll
{
    int LimitBattleNum;                 
    LIMITBATTLE LimitBattle[MAX_LIMIT_BATTLE_NUM];
};

union tagCSBattleLimitData
{
    CSBATTLELIMITALL All;                             	/* BATTLE_LIMIT_TYPE_ALL,   */
    LIMITBATTLE Chg;                             	/* BATTLE_LIMIT_TYPE_CHG,   */
};

struct tagCSBattleLimit
{
    int Type;                            	/*    Bind Macrosgroup:BATTLE_LIMIT_TYPE,*/
    CSBATTLELIMITDATA BattleLimitData;                
};

struct tagCSRollUIInfo
{
    int BootyID;                         	/*   掉落物MemID */
    ROLEGRID BootyInfo;                      
    int EndTime;                         	/*  Ver.590 倒计时剩余秒数 */
};

union tagCSRollSvrData
{
    CSROLLUIINFO RollUIInfo;                      	/* ROLL_SVR_UI,   */
};

struct tagCSRollSvr
{
    int Type;                            	/*    Bind Macrosgroup:ROLL_SVR_TYPE,*/
    CSROLLSVRDATA Data;                           
};

struct tagCSRollClt
{
    int Roll;                            	/*    Bind Macrosgroup:ROLL_CLT_TYPE,*/
    int BootyID;                         	/*   战利品MemID */
};

struct tagCSLeaveClt
{
    int LeaveState;                      	/*    Bind Macrosgroup:LEAVE_CLT_STAT,*/
};

struct tagCSMotionClt
{
    int MotionID;                        	/*   动作表情ID, 为0则打断当前动作 */
    int TargetID;                       
};

struct tagCSFightObjInfo
{
    int MemID;                           	/*   MemID */
    int AtkLevelMul;                     	/*   攻击系数 */
    int DefLevelMul;                     	/*   防御系数 */
    CSPLAYERATTRVAL FightAttrVal;                    	/*   属性值 */
};

struct tagCSValFightClt
{
    int AtkerID;                         	/*   攻击方MemID */
    CSFIGHTOBJINFO ObjInfo[MAX_FIGHT_OBJ_NUM];      	/*   双方属性 */
    int SkillID;                         	/*   攻击技能 */
    int SkillLevel;                      	/*   攻击技能等级 */
    int Count;                           	/*   攻击次数 */
};

struct tagCSValWatchClt
{
    int MemID;                           	/*   MemID */
};

union tagCSValCltData
{
    CSVALWATCHCLT Watch;                           	/* VAL_CLT_WATCH,   */
    CSVALFIGHTCLT Fight;                           	/* VAL_CLT_FIGHT,   */
};

struct tagCSValClt
{
    int Type;                            	/*    Bind Macrosgroup:VAL_CLT_TYPE,*/
    CSVALCLTDATA Data;                           
};

struct tagCSValWatchInfo
{
    int MemID;                           	/*   MemID */
    char Name[RES_NAME_LEN];             
    int AtkLevelMul;                     	/*   攻击系数 */
    int DefLevelMul;                     	/*   防御系数 */
    CSPLAYERATTRVAL FightAttrVal;                    	/*   属性值 */
};

struct tagCSValFightSvr
{
    int AtkCount;                        	/*   攻击次数 */
    int Miss;                            	/*   未命中次数 */
    int Hit;                             	/*   命中次数 */
    int TotalHurt;                       	/*   总伤害 */
    int AvgHurt;                         	/*   平均伤害 */
    int HeavyHit;                        	/*   暴击次数 */
    int MaxHeavyHitVal;                  	/*   暴击最大伤害 */
    int MinHeavyHitVal;                  	/*   暴击最小伤害 */
    int AvgHeavyHitVal;                  	/*   暴击平均伤害 */
    int MaxHitVal;                       	/*   未暴击最大伤害 */
    int MinHitVal;                       	/*   未暴击最小伤害 */
    int AvgHitVal;                       	/*   未暴击平均伤害 */
};

union tagCSValSvrData
{
    CSVALWATCHINFO WatchInfo;                       	/* VAL_SVR_WATCH_INFO,   */
    CSVALFIGHTSVR FightInfo;                       	/* VAL_SVR_FIGHT_INFO,   */
};

struct tagCSValSvr
{
    int Type;                            	/*    Bind Macrosgroup:VAL_SVR_TYPE,*/
    CSVALSVRDATA Data;                           
};

struct tagCSDiffPworldEnter
{
    int DiffPworldID;                    	/*   难度副本ID，DiffPworldDef */
    int PworldID;                        	/*   副本ID，选择的难度 */
    int EnterFlag;                       	/*   0 表示检查队友是否可进入， 1表示继续进入，不在提示队友情况 */
    int NpcID;                           	/*  Ver.901 对话的NPCID */
};

struct tagCSDiffPworldSelectCard
{
    int GridIdx;                         	/*   位置 */
};

struct tagCSDiffPworldSelectVipCard
{
    int GridIdx;                         	/*   位置 */
};

union tagCSDiffPworldCltData
{
    CSDIFFPWORLDENTER Enter;                           	/* DIFF_PWORLD_CLT_ENTER,   */
    CSDIFFPWORLDSELECTCARD Select;                          	/* DIFF_PWORLD_CLT_SELECT_CARD, Ver.839  */
    CSDIFFPWORLDSELECTVIPCARD VipSelect;                       	/* DIFF_PWORLD_CLT_SELECT_VIP_CARD, Ver.1950  */
};

struct tagCSDiffPworldClt
{
    int Type;                            	/*    Bind Macrosgroup:DIFF_PWORLD_CLT_TYPE,*/
    CSDIFFPWORLDCLTDATA Data;                           
};

struct tagCSDiffPworldUIInfo
{
    int DiffPworldID;                    	/*   难度副本ID，DiffPworldDef */
    int TeamCreateID;                    	/*   队伍已经创建的此难度副本的对应PworldID, >0则只显示这个副本可进 */
    int DynLevel;                        	/*   动态等级 */
    int NpcID;                           	/*  Ver.901 对话的NPCID */
};

struct tagDiffPworldTipInfo
{
    char RoleName[NAME_LEN];             
    char Msg[MAX_DIFF_PWORLD_TIP_LEN];    	/*   队员不符合条件提示信息 */
};

struct tagCSDiffPworldCardMsg
{
    char Msg[MAX_DIFF_PWORLD_TIP_LEN];    	/*   翻牌时候背包空间不足的提示 */
};

struct tagCSDiffPworldTeamTips
{
    int DiffPworldID;                    	/*   难度副本ID，DiffPworldDef */
    int PworldID;                        	/*   副本ID，选择的难度 */
    int Num;                             	/*   提示信息数量 */
    DIFFPWORLDTIPINFO Tips[MAX_TEAM_MEMBER];           	/*   队友进副本的检查情况 */
};

struct tagDiffPworldCardInfo
{
    char RoleName[NAME_LEN];              	/*   归属者 */
    ROLEGRID Grid;                            	/*   战利品 */
    int GridIdx;                         	/*   位置 */
};

struct tagCSDiffPworldAwardUI
{
    int DiffPworldID;                    	/*   难度副本ID，DiffPworldDef */
    int PworldID;                        	/*   副本ID，选择的难度 */
    int NormalVal;                       	/*   普通怪物得分 */
    int JingVal;                         	/*   精英怪物得分 */
    int BossVal;                         	/*   BOSS得分 */
    int TimeVal;                         	/*   时间得分 */
    int TimeSec;                         	/*   通关时间 */
    int DieVal;                          	/*   死亡扣分 */
    int DieNum;                          	/*  Ver.842 死亡次数 */
    int TotalVal;                        	/*   总分 */
    int ValGrade;                        	/*   评价级别 Bind Macrosgroup:PWORLD_AWARD_VAL_TYPE,*/
    int Exp;                             	/*   经验 */
    int Money;                           	/*   金钱 */
    int GradeExp;                        	/*   评价经验 */
    int DiffExp;                         	/*   难度经验 */
    int FriendExp;                       	/*   好友经验 */
    int ClanExp;                         	/*   公会经验 */
    int CardNum;                         	/*   牌的数量 */
    DIFFPWORLDCARDINFO CardsInfo[MAX_PWORLD_AWARD_CARD]; 	/*   牌对应的物品 */
    int OffExp;                          	/*  Ver.911 活动副本补偿经验 */
    int NormalNum;                       	/*  Ver.947 普通怪物 */
    int JingNum;                         	/*  Ver.947 精英怪物 */
    int BossNum;                         	/*  Ver.947 BOSS */
    int VipCardNum;                      	/*  Ver.1950 牌的数量 */
    DIFFPWORLDCARDINFO VipCardsInfo[MAX_PWORLD_VIP_AWARD_CARD]; 	/*  Ver.1950 牌对应的物品 */
};

struct tagCSDiffPworldUpdateCard
{
    int CardNum;                         	/*   牌的数量 */
    DIFFPWORLDCARDINFO CardsInfo[MAX_PWORLD_AWARD_CARD]; 	/*   牌对应的物品 */
};

struct tagCSDiffPworldUpdateVipCard
{
    int CardNum;                         	/*   牌的数量 */
    DIFFPWORLDCARDINFO CardsInfo[MAX_PWORLD_VIP_AWARD_CARD]; 	/*   牌对应的物品 */
};

struct tagCSDiffPworldSelectRes
{
    int Succ;                            	/*   翻牌成功失败的标记 */
};

union tagCSDiffPworldSvrData
{
    CSDIFFPWORLDUIINFO UIInfo;                          	/* DIFF_PWORLD_SVR_UI,   */
    CSDIFFPWORLDTEAMTIPS Tips;                            	/* DIFF_PWORLD_SVR_TIPS,   */
    CSDIFFPWORLDAWARDUI AwardUI;                         	/* DIFF_PWORLD_SVR_AWARD_UI, Ver.839  */
    CSDIFFPWORLDUPDATECARD Cards;                           	/* DIFF_PWORLD_SVR_UPDATE_CARD, Ver.839  */
    CSDIFFPWORLDCARDMSG CardMsg;                         	/* DIFF_PWORLD_SVR_CARD_MSG, Ver.839  */
    CSDIFFPWORLDSELECTRES Select;                          	/* DIFF_PWORLD_SVR_SELECT, Ver.854  */
    CSDIFFPWORLDUPDATEVIPCARD VipCards;                        	/* DIFF_PWORLD_SVR_UPDATE_VIP_CARD, Ver.1950  */
    CSDIFFPWORLDSELECTRES VipSelect;                       	/* DIFF_PWORLD_SVR_SELECT_VIP, Ver.1950  */
};

struct tagCSDiffPworldSvr
{
    int Type;                            	/*    Bind Macrosgroup:DIFF_PWORLD_SVR_TYPE,*/
    CSDIFFPWORLDSVRDATA Data;                           
};

struct tagCSCityBuildInfo
{
    int State;                           	/*    Bind Macrosgroup:CITY_BUILD_STAT,*/
    int DefID;                          
    int Type;                            	/*    Bind Macrosgroup:WORLD_CITY_BUILD_TYPE,*/
    int MemID;                          
    int BuildIdx;                        	/*   建筑列表索引 */
    int BuildLevel;                     
    int HP;                             
    int MaxHP;                          
    int Energy;                         
    int MaxEnergy;                      
    tdr_ulonglong ClanGID;                         	/*   公会全局唯一ID */
    char ClanName[NAME_LEN];              	/*   公会名字 */
    int WarnEndTime;                     	/*   告知被攻击闪烁结束时间 */
};

struct tagCSCityBuildCapture
{
    int CaptureEndTime;                  	/*   占领倒计时 */
    char ClanName[NAME_LEN];              	/*   公会名字 */
};

struct tagCSCityAllBuild
{
    int Stat;                            	/*  Ver.1044  Bind Macrosgroup:WORLD_CITY_STAT,*/
    CSCITYBUILDCAPTURE CaptureInfo;                     	/*   占领倒计时 */
    int BuildNum;                       
    CSCITYBUILDINFO BuildList[MAX_WORLD_CITY_BUILD];
};

struct tagCSCityBuildUI
{
    int NpcID;                          
    int BuildNum;                       
    CSCITYBUILDINFO BuildList[MAX_WORLD_CITY_BUILD];
};

struct tagCSCityBuildWarning
{
    int DefID;                           	/*   表WorldCityBuildDef的ID */
    tdr_ulonglong ClanGID;                         	/*   公会全局唯一ID */
    int WarnEndTime;                     	/*   告知被攻击闪烁结束时间 */
};

struct tagCSWorldCityInfo
{
    tdr_ulonglong ClanGID;                         	/*   公会全局唯一ID */
    unsigned int ClanId;                          	/*   公会本地ID */
    int KeepNum;                         	/*   连续防守成功次数 */
    WORLDCITYEFFIGY Effigy;                          	/*  Ver.1036 城主雕像 */
    int FightEnableStat;                 	/*  Ver.1250 争霸战激活状态 Bind Macrosgroup:WORLD_CITY_ENABLE_STAT,*/
    int Stat;                            	/*  Ver.1596 战争状态 Bind Macrosgroup:WORLD_CITY_STAT,*/
};

struct tagCSCityMemInfo
{
    int MemID;                           	/*   MemID */
    RESPOS Pos;                             	/*   位置 */
};

struct tagCSCityMapPosInfo
{
    int MemNum;                          	/*   人数 */
    CSCITYMEMINFO Members[CLAN_MAX_MEM];           	/*   个人地图位置信息 */
};

struct tagCSCityFight
{
    int Stat;                            	/*    Bind Macrosgroup:WORLD_CITY_STAT,*/
};

struct tagCSCityClanFightInfo
{
    CLANID ClanId;                         
    int ReviveBuild;                    
    int ControlBuild;                   
    int BuffBuild;                      
    int DoorBuild;                      
    int DefBuild;                       
    int Total;                          
    int Time;                            	/*  Ver.2038  */
};

struct tagCSCityClanFightRange
{
    int End;                            
    int Num;                            
    CSCITYCLANFIGHTINFO ClanList[MAX_WORLD_CITY_CLAN_RANGE];
    int MoneyType;                      
    int Money;                          
    int SelfClanTop;                    
    int EnterTime;                       	/*   进入时的服务器时间 */
};

struct tagCSCityKillInfo
{
    int ContinueKill;                   
};

union tagCSCitySvrData
{
    CSCITYALLBUILD MapInfo;                         	/* CITY_SVR_MAP_INFO,   */
    CSCITYBUILDUI UIInfo;                          	/* CITY_SVR_BUILD_UI_INFO,   */
    CSCITYBUILDWARNING Warning;                         	/* CITY_SVR_BUILD_WARNING,   */
    CSCITYBUILDCAPTURE Capture;                         	/* CITY_SVR_BUILD_CAPTURE,   */
    CSWORLDCITYINFO CoreInfo;                        	/* CITY_SVR_CORE_INFO, Ver.1031  */
    CSCITYFIGHT Fight;                           	/* CITY_SVR_FIGHT, Ver.1044  */
    CSCITYMAPPOSINFO MapPosInfo;                      	/* CITY_SVR_MAP_MEM_POS, Ver.1108  */
    CSCITYCLANFIGHTRANGE ClanFightRange;                  	/* CITY_SVR_FIGHT_RANGE, Ver.1809  */
    CSCITYKILLINFO KillInfo;                        	/* CITY_SVR_KILL_INFO, Ver.1809  */
};

struct tagCSCitySvr
{
    int Type;                            	/*    Bind Macrosgroup:CITY_SVR_TYPE,*/
    CSCITYSVRDATA Data;                           
};

struct tagCSCityBuildCreate
{
    int DefID;                          
    int BuildListIdx;                    	/*   选择建造哪一个建筑的索引 */
};

struct tagCSCityBuildLevelUP
{
    int DefID;                          
};

union tagCSCityCltData
{
    CSCITYBUILDCREATE Create;                          	/* CITY_CLT_BUILD_CREATE,   */
    CSCITYBUILDLEVELUP LevelUP;                         	/* CITY_CLT_BUILD_LEVELUP,   */
    CSCITYBUILDLEVELUP Repair;                          	/* CITY_CLT_BUILD_REPAIR,   */
    CSCITYBUILDLEVELUP Energy;                          	/* CITY_CLT_BUILD_ADD_ENERGY,   */
    CSCITYBUILDLEVELUP Del;                             	/* CITY_CLT_BUILD_DEL,   */
    int MapMemPos;                       	/* CITY_CLT_MAP_MEM_POS,   */
};

struct tagCSCityClt
{
    int Type;                            	/*    Bind Macrosgroup:CITY_CLT_TYPE,*/
    CSCITYCLTDATA Data;                           
};

struct tagCSActiveGameClanPworld
{
    int Val;                             	/*   个人积分 */
    int ClanVal;                         	/*   公会积分 */
    int ClanMaxVal;                      	/*   公会积分上限 */
    int ClanMoney;                       	/*   公会资金 */
    int ClanContri;                      	/*   个人贡献度 */
    int PlayerMoney;                     	/*  Ver.1338 个人奖励银币 */
    int PlayerExp;                       	/*  Ver.1364 奖励给个人的经验 */
    int EndTime;                         	/*   结束时间，服务器时间 */
    int BossLife;                        	/*  Ver.1822 BOSS显示开关 */
};

struct tagCSActiveGameGuCheng
{
    int Invaild;                         	/*   预留，无效的字段 */
    int Award;                           	/*  Ver.2277 领取标记 */
};

struct tagCSActiveGameClanMachine
{
    int ClanID;                         
    int Wave;                           
    int Flag;                            	/*   1-联合模式 */
};

union tagCSActiveGameUIData
{
    CSACTIVEGAMECLANPWORLD ClanPworld;                      	/* ACTIVE_UI_TYPE_CLAN_PWORLD,   */
    CSACTIVEGAMECLANMACHINE ClanMachine;                     	/* ACTIVE_UI_TYPE_CLAN_MACHINE_PWORLD, Ver.2254  */
    CSACTIVEGAMEGUCHENG GuCheng;                         	/* ACTIVE_UI_TYPE_GUCHENG, Ver.2272  */
};

struct tagCSActiveGameUIInfo
{
    int UIType;                          	/*    Bind Macrosgroup:ACTIVE_GAME_UI_TYPE,*/
    CSACTIVEGAMEUIDATA Data;                           
};

struct tagCSActiveGameUIClose
{
    int UIType;                          	/*    Bind Macrosgroup:ACTIVE_GAME_UI_TYPE,*/
};

union tagCSActiveGameSvrData
{
    CSACTIVEGAMEUIINFO UIInfo;                          	/* ACTIVE_GAME_SVR_TYPE_UI_INFO,   */
    CSACTIVEGAMEUICLOSE UIClose;                         	/* ACTIVE_GAME_SVR_TYPE_UI_CLOSE,   */
};

struct tagCSActiveGameSvr
{
    int Type;                            	/*    Bind Macrosgroup:ACTIVE_GAME_SVR_TYPE,*/
    CSACTIVEGAMESVRDATA Data;                           
};

struct tagCSActiveGameAward
{
    int UIType;                          	/*    Bind Macrosgroup:ACTIVE_GAME_UI_TYPE,*/
};

union tagCSActiveGameCltData
{
    CSACTIVEGAMEAWARD Award;                           	/* ACTIVE_GAME_CLT_TYPE_AWARD,   */
};

struct tagCSActiveGameClt
{
    int Type;                            	/*    Bind Macrosgroup:ACTIVE_GAME_CLT_TYPE,*/
    CSACTIVEGAMECLTDATA Data;                           
};

struct tagCSRoleLtrInfo
{
    ROLELTRINFO RoleLtrData;                     	/*   角色媒体次数礼包信息,有数据改变就会下发 */
};

struct tagCSSJTaskOpen
{
    int ItemID;                         
};

struct tagCSSJTaskRefreshTask
{
    int SJID;                           
};

struct tagCSSJTaskRefreshStar
{
    int SJID;                           
    int RefreshFlag;                     	/*  Ver.2379 1-道具刷新 */
};

struct tagCSSJTaskAccpet
{
    int SJID;                           
    int TaskID;                         
    int ItemID;                         
};

union tagCSSJTaskCltData
{
    CSSJTASKOPEN Open;                            	/* SJ_TASK_CLT_TYPE_OPEN,   */
    CSSJTASKREFRESHTASK RefreshTask;                     	/* SJ_TASK_CLT_TYPE_REFRESH_TASK,   */
    CSSJTASKREFRESHSTAR RefreshStar;                     	/* SJ_TASK_CLT_TYPE_REFRESH_STAR,   */
    CSSJTASKACCPET Accpet;                          	/* SJ_TASK_CLT_TYPE_ACCPET,   */
};

struct tagCSSJTaskClt
{
    int Type;                            	/*    Bind Macrosgroup:SJ_TASK_CLT_TYPE,*/
    CSSJTASKCLTDATA Data;                           
};

struct tagCSSJTaskUIInfo
{
    SJTASKONEINFO SJTaskInfo;                     
};

struct tagCSSJTaskClose
{
    int SJID;                           
};

struct tagCSSJTaskItem
{
    int Num;                            
};

union tagCSSJTaskSvrData
{
    CSSJTASKUIINFO TaskUIInfo;                      	/* SJ_TASK_CLT_TYPE_OPEN,   */
    CSSJTASKCLOSE TaskClose;                       	/* SJ_TASK_SVR_TYPE_CLOSE,   */
    CSSJTASKITEM TaskItem;                        	/* SJ_TASK_SVR_ITEM_CHG, Ver.2379  */
};

struct tagCSSJTaskSvr
{
    int Type;                            	/*    Bind Macrosgroup:SJ_TASK_SVR_TYPE,*/
    CSSJTASKSVRDATA Data;                           
};

struct tagCSAasSvr
{
    int Type;                            	/*    Bind Macrosgroup:AAS_SVR_TYPE,*/
};

struct tagCSAasIDInfo
{
    char Name[NAME_LEN];                  	/*   姓名 */
    char IDCard[AAS_ID_CARD_LEN];         	/*   身份证 */
    char eMail[ACCOUNT_REGIST_EMAIL_LEN]; 	/*   邮箱 */
};

union tagCSAasCltData
{
    CSAASIDINFO IDInfo;                          	/* AAS_CLT_ADD_ID_INFO,   */
};

struct tagCSAasClt
{
    int Type;                            	/*    Bind Macrosgroup:AAS_CLT_TYPE,*/
    CSAASCLTDATA Data;                           
};

struct tagCSGayAccept
{
    char RoleName[NAME_LEN];              	/*   申请人姓名 */
};

struct tagCSGayReject
{
    char RoleName[NAME_LEN];              	/*   拒绝者姓名 */
    int Flag;                            	/*   0 拒绝 1超时 */
};

union tagCSGayCltData
{
    CSGAYACCEPT Accept;                          	/* GAY_CLT_ACCEPT,   */
    CSGAYREJECT Reject;                          	/* GAY_CLT_REJECT,   */
};

struct tagCSGayClt
{
    int Type;                            	/*    Bind Macrosgroup:GAY_CLT_TYPE,*/
    CSGAYCLTDATA Data;                           
};

struct tagCSGayInvite
{
    char RoleName[NAME_LEN];              	/*   申请人姓名 */
};

union tagCSGaySvrData
{
    CSGAYINVITE Invite;                          	/* GAY_SVR_INVITE,   */
};

struct tagCSGaySvr
{
    int Type;                            	/*    Bind Macrosgroup:GAY_SVR_TYPE,*/
    CSGAYSVRDATA Data;                           
};

struct tagCSRoleChgMemID
{
    int MemID;                           	/*   内存ID */
};

struct tagCSTankRoleInfo
{
    int MemID;                          
    int Career;                         
    int CampIdx;                         	/*   阵营 */
    char RoleName[NAME_LEN];             
    char ClanName[NAME_LEN];             
    int KillMonster;                    
    int Exp;                            
    int Money;                          
};

struct tagCSTankInfo
{
    int KillCamp1;                       	/*   阵容1杀敌数 */
    int KillCamp2;                       	/*   阵容2杀敌数 */
    int StartTime;                      
    int VCamp;                           	/*   胜利方 */
    int RoleNum;                        
    CSTANKROLEINFO RoleList[MAX_BATTLE_PWORLD_MEMBER];
};

struct tagCSDoubleMonsterRoleInfo
{
    int MemID;                          
    int Career;                         
    int CampIdx;                         	/*   阵营 */
    char RoleName[NAME_LEN];             
    char ClanName[NAME_LEN];             
    int KillMonster;                    
    int Exp;                            
    int Money;                           	/*  Ver.1970  */
};

struct tagCSDoubleMonsterEndInfo
{
    int RoleNum;                        
    CSDOUBLEMONSTERROLEINFO RoleList[MAX_BATTLE_PWORLD_MEMBER];
};

struct tagCSDoubleMonsterInfo
{
    int MonsterCamp1;                   
    int MonsterCamp2;                   
    int StartTime;                      
    int VCamp;                          
    CSDOUBLEMONSTERENDINFO MonsterEndInfo;                  	/*  Ver.1955 结束信息 */
};

struct tagCSMachineWarInfo
{
    int Human;                           	/*   人类数量 */
    int Titan;                           	/*   巨人数量 */
    int Monster;                         	/*   怪兽数量 */
    int ToTalExp;                        	/*   总计获得经验 */
    int StartTime;                       	/*   副本真正开始时间 */
    int SelfCamp;                        	/*   自己的阵营 */
    int VCamp;                           	/*   胜利方阵营 */
    int EndExp;                          	/*   结束胜负奖励的经验 */
};

struct tagCSPolyBossPosition
{
    RESPOS Machine;                        
    RESPOS Titan;                          
};

union tagCSPolyInfoData
{
    CSDOUBLEMONSTERINFO DoubleMonster;                   	/* POLY_OP_DOUBLE_MONSTER,   */
    CSMACHINEWARINFO MachineWar;                      	/* POLY_OP_MACHINE_WAR, Ver.1937  */
    CSTANKINFO TankInfo;                        	/* POLY_OP_TANK, Ver.2315  */
};

struct tagCSPolyPworldInfo
{
    unsigned char End;                            
    unsigned char OpType;                          	/*    Bind Macrosgroup:POLY_PWORLD_OP_TYPE,*/
    CSPOLYINFODATA Data;                           
};

union tagCSPolyPworldSvrData
{
    CSPOLYPWORLDINFO PolyPworldInfo;                  	/* POLY_SVR_TYPE_INFO,   */
    CSPOLYBOSSPOSITION BossPosition;                    	/* POLY_SVR_TYPE_BOSS_POSITION, Ver.1996  */
};

struct tagCSPolyPworldSvr
{
    unsigned char SvrType;                         	/*    Bind Macrosgroup:POLY_SVR_TYPE,*/
    char Res[3];                         
    CSPOLYPWORLDSVRDATA SvrData;                        
};

struct tagCSSpartaReadyRoleInfo
{
    char RoleName[NAME_LEN];             
    int Ready;                          
};

struct tagCSSpartaReadyUI
{
    CSSPARTAREADYROLEINFO RoleInfo[MAX_SPARTA_ROLE];      
};

struct tagCSSpartaApplyInfo
{
    int Succ;                           
};

struct tagCSSpartaFightRoleInfo
{
    char RoleName[NAME_LEN];             
    int Camp;                           
    int SpartaGlory;                    
    int Leave;                          
    int FightVal;                       
    int ChgFightVal;                    
};

struct tagCSSpartaEndInfo
{
    CSSPARTAFIGHTROLEINFO RoleInfo[MAX_SPARTA_ROLE];      
};

struct tagCSSpartaFightInfo
{
    tdr_ulonglong Team1ID;                        
    int Team1Kill;                      
    tdr_ulonglong Team2ID;                        
    int Team2Kill;                      
    int VCamp;                          
    int End;                            
    CSSPARTAENDINFO EndInfo;                        
};

struct tagCSSpartaRoleSpartaInfo
{
    int FightVal;                       
    int Victory;                        
    int RunAway;                        
    int Defeat;                         
};

union tagCSSpartaSvrData
{
    CSSPARTAREADYUI ReadyUI;                         	/* SPARTA_SVR_READY_UI,   */
    CSSPARTAAPPLYINFO Apply;                           	/* SPARTA_SVR_APPLY_INFO,   */
    int ExitQueue;                       	/* SPARTA_SVR_EXIT_QUEUE,   */
    CSSPARTAFIGHTINFO FightInfo;                       	/* SPARTA_SVR_FIGHT_INFO,   */
    CSSPARTAROLESPARTAINFO SprataInfo;                      	/* SPARTA_SVR_ROLE_SPARTA_INFO,   */
};

struct tagCSSpartaSvr
{
    unsigned char Type;                            	/*    Bind Macrosgroup:SPARTA_SVR_TYPE,*/
    char Res[3];                         
    CSSPARTASVRDATA Data;                           
};

struct tagCSSpartaCltReady
{
    int Ready;                          
};

union tagCSSpartaCltData
{
    CSSPARTACLTREADY Ready;                           	/* SPARTA_CLT_READY,   */
    int Apply;                           	/* SPARTA_CLT_APPLY,   */
    int Exit;                            	/* SPARTA_CLT_EXIT_APPLY,   */
};

struct tagCSSpartaClt
{
    unsigned char Type;                            	/*    Bind Macrosgroup:SPARTA_CLT_TYPE,*/
    char Res[3];                         
    CSSPARTACLTDATA Data;                           
};

struct tagCSSchoolInvite
{
    char RoleName[NAME_LEN];             
};

struct tagCSSchoolAccept
{
    char RoleName[NAME_LEN];             
};

struct tagCSSchoolMemInfoReq
{
    char RoleName[NAME_LEN];             
};

struct tagCSSchoolReject
{
    char RoleName[NAME_LEN];              	/*   拒绝者姓名 */
    int Flag;                            	/*   0 拒绝 1超时 */
};

struct tagCSSchoolDel
{
    tdr_ulonglong RoleID;                         
    char RoleName[NAME_LEN];             
};

struct tagCSSchoolXinDe
{
    tdr_ulonglong RoleID;                          	/*   学生 */
    char RoleName[NAME_LEN];             
};

struct tagCSSchoolAwardXinDe
{
    tdr_ulonglong RoleID;                          	/*   导师 */
};

union tagCSSchoolCltData
{
    CSSCHOOLINVITE Invite;                          	/* SCHOOL_CLT_INVITE,   */
    CSSCHOOLACCEPT Accept;                          	/* SCHOOL_CLT_ACCEPT,   */
    CSSCHOOLMEMINFOREQ MemInfoReq;                      	/* SCHOOL_CLT_MEM_INFO_REQ,   */
    CSSCHOOLREJECT Reject;                          	/* SCHOOL_CLT_REJECT,   */
    CSSCHOOLDEL Del;                             	/* SCHOOL_CLT_DEL,   */
    CSSCHOOLXINDE XinDe;                           	/* SCHOOL_CLT_XINDE,   */
    CSSCHOOLAWARDXINDE AwardXinDe;                      	/* SCHOOL_CLT_AWARD_XINDE,   */
};

struct tagCSSchoolClt
{
    unsigned char Type;                            	/*    Bind Macrosgroup:SCHOOL_CLT_TYPE,*/
    char Res[3];                         
    CSSCHOOLCLTDATA Data;                           
};

struct tagCSRoleTeacherInfo
{
    tdr_ulonglong RoleID;                         
    char RoleName[ROLE_NAME_LEN_SAVE];   
    unsigned char Level;                          
    unsigned char Head;                           
    unsigned char Face;                           
    unsigned char Hair;                           
    char Gender;                         
    char Career;                         
    int JoinLevel;                      
    int JoinTime;                       
    int MeiLi;                          
    int Online;                         
    int Map;                            
    int TeamNum;                        
    char ClanName[NAME_LEN];              	/*  Ver.2091 公会名字 */
};

struct tagCSRoleStudentInfo
{
    tdr_ulonglong RoleID;                         
    char RoleName[ROLE_NAME_LEN_SAVE];   
    unsigned char Level;                          
    unsigned char Head;                           
    unsigned char Face;                           
    unsigned char Hair;                           
    char Gender;                         
    char Career;                         
    int JoinLevel;                      
    int DayTime;                        
    int JoinTime;                       
    int MeiLi;                          
    int Online;                         
    int Map;                            
    int TeamNum;                        
    char ClanName[NAME_LEN];              	/*  Ver.2091 公会名字 */
};

struct tagCSRoleTeacher
{
    int Num;                            
    CSROLESTUDENTINFO Students[MAX_ROLE_STUDENT];     
};

struct tagCSRoleStudent
{
    CSROLETEACHERINFO Teacher;                        
    int Exp;                             	/*   当前未领取的经验值 */
    int Val;                             	/*   领取后给导师增加的声望 */
    int AwardCount;                     
    int TotalCount;                     
};

union tagCSSchoolJobInfo
{
    int None;                            	/* ROLE_SCHOOL_TYPE_NONE,   */
    CSROLETEACHER Teacher;                         	/* ROLE_SCHOOL_TYPE_TEACHER,   */
    CSROLESTUDENT Student;                         	/* ROLE_SCHOOL_TYPE_STUDENT,   */
};

struct tagCSSchoolAllInfo
{
    int JobType;                         	/*    Bind Macrosgroup:ROLE_SCHOOL_TYPE,*/
    CSSCHOOLJOBINFO Data;                           
};

struct tagCSSchoolJoinUI
{
    char RoleName[ROLE_NAME_LEN_SAVE];   
};

union tagCSSchoolMemData
{
    CSROLETEACHERINFO Teacher;                         	/* SCHOOL_MEM_TYPE_TEACHER,   */
    CSROLESTUDENTINFO Student;                         	/* SCHOOL_MEM_TYPE_STUDENT,   */
};

struct tagCSSchoolMemInfo
{
    int Type;                            	/*    Bind Macrosgroup:SCHOOL_MEM_TYPE,*/
    CSSCHOOLMEMDATA Data;                           
};

struct tagCSSchoolOnlineUpdate
{
    tdr_ulonglong RoleID;                         
    char RoleName[ROLE_NAME_LEN_SAVE];   
    int Online;                         
};

struct tagCSSchoolAddStudent
{
    tdr_ulonglong RoleID;                         
    char RoleName[ROLE_NAME_LEN_SAVE];   
    tdr_ulonglong TeacherRoleID;                  
    char TeacherRoleName[ROLE_NAME_LEN_SAVE];
};

union tagCSSchoolSvrData
{
    CSSCHOOLALLINFO AllInfo;                         	/* SCHOOL_SVR_ALL_INFO,   */
    int InviteUI;                        	/* SCHOOL_SVR_INVITE_UI,   */
    CSSCHOOLJOINUI JoinUI;                          	/* SCHOOL_SVR_JOIN_UI,   */
    CSSCHOOLMEMINFO MemInfo;                         	/* SCHOOL_SVR_MEM_INFO,   */
    CSSCHOOLONLINEUPDATE Online;                          	/* SCHOOL_SVR_ONLINE_UPDATE,   */
    CSSCHOOLADDSTUDENT AddStudent;                      	/* SCHOOL_SVR_ADD_STUDENT_ACTION,   */
};

struct tagCSSchoolSvr
{
    unsigned char Type;                            	/*    Bind Macrosgroup:SCHOOL_SVR_TYPE,*/
    char Res[3];                         
    CSSCHOOLSVRDATA Data;                           
};

struct tagCSSecondPwdSet
{
    char PassWDSet[SECOND_PWD_LEN];      
};

struct tagCSSecondPwdInput
{
    char PassWDInput[SECOND_PWD_LEN];    
};

struct tagCSSecondPwdClt
{
    CSSECONDPWDSET SecondPwdSet;                    	/* SECOND_PWD_SET,   */
    CSSECONDPWDINPUT SecondPwdInput;                  	/* SECOND_PWD_INPUT,   */
};

struct tagSecondPwdClt
{
    int Cmd;                             	/*    Bind Macrosgroup:SECOND_PWD_CMD,*/
    CSSECONDPWDCLT SecondPwd;                      
};

struct tagSecondPwdSvr
{
    int Result;                          	/*    Bind Macrosgroup:SecondPwdResultGrp,*/
    int Flag;                            	/*   弹出什么界面  Bind Macrosgroup:SECOND_PWD_CMD_SVR,*/
};

struct tagBackItemPos
{
    int ListType;                        	/*   哪个包 */
    int GridIdx;                         	/*   哪个位置 */
    tdr_ulonglong WID;                             	/*   物品唯一ID */
};

struct tagCSBackLevelUP
{
    BACKITEMPOS Back;                            	/*   背饰 */
    BACKITEMPOS BeUsed;                          	/*   卷轴 */
};

struct tagCSBackChg
{
    BACKITEMPOS Back;                            	/*   背饰 */
    BACKITEMPOS BeUsed;                          	/*   卷轴 */
};

union tagCSBackCltData
{
    CSBACKLEVELUP LevelUP;                         	/* BACK_CLT_LEVELUP,   */
    CSBACKCHG ChgType;                         	/* BACK_CLT_CHG_TYPE,   */
};

struct tagCSBackClt
{
    unsigned char Type;                            	/*    Bind Macrosgroup:BACK_CLT_TYPE,*/
    char Res[3];                         
    CSBACKCLTDATA Data;                           
};

struct tagCSBackLevelUPSucc
{
    int Succ;                            	/*   0失败 1成功 */
    tdr_ulonglong NewItemWID;                      	/*   升级后的背饰WID */
};

struct tagCSBackChgTypeSucc
{
    int Succ;                            	/*   0失败 1成功 */
    tdr_ulonglong NewItemWID;                      	/*   改变类型后的背饰WID */
};

union tagCSBackSvrData
{
    CSBACKLEVELUPSUCC LevelUPSucc;                     	/* BACK_SVR_LEVELUP_SUCC,   */
    CSBACKCHGTYPESUCC ChgTypeSucc;                     	/* BACK_SVR_CHGTYPE_SUCC,   */
};

struct tagCSBackSvr
{
    unsigned char Type;                            	/*    Bind Macrosgroup:BACK_SVR_TYPE,*/
    char Res[3];                         
    CSBACKSVRDATA Data;                           
};

struct tagCSCardBoxOpen
{
    int ListType;                       
    int GridIdx;                        
};

struct tagCSCardBoxSelect
{
    int GridIdx;                        
};

union tagCSCardBoxCltData
{
    CSCARDBOXOPEN Open;                            	/* CARDBOX_CLT_TYPE_OPEN,   */
    CSCARDBOXSELECT Select;                          	/* CARDBOX_CLT_TYPE_SELECT,   */
    int Next;                            	/* CARDBOX_CLT_TYPE_NEXT,   */
    int Close;                           	/* CARDBOX_CLT_TYPE_CLOSE,   */
    int Wash;                            	/* CARDBOX_CLT_TYPE_WASH,   */
};

struct tagCSCardBoxClt
{
    unsigned char Type;                            	/*    Bind Macrosgroup:CARDBOX_CLT_TYPE,*/
    char Res[3];                         
    CSCARDBOXCLTDATA Data;                           
};

struct tagBoxOneCardInfo
{
    int Select;                         
    int GridIdx;                         	/*   位置 */
    int ItemID;                         
    int Num;                            
};

struct tagCSCardBoxInfo
{
    int ID;                              	/*   箱子ID */
    int CostCount;                       	/*   花了几次钱 */
    int SelectCount;                     	/*   抽了几次 */
    int Wash;                            	/*   洗牌了几次 */
    int CardNum;                        
    BOXONECARDINFO CardInfo[MAX_CARD_BOX_CARD_NUM];
};

struct tagCSCardBoxSelectInfo
{
    int ID;                              	/*   箱子ID */
    int Count;                           	/*   第几次 */
    BOXONECARDINFO SelectInfo;                      	/*   先翻开抽到的 */
    int CardNum;                        
    BOXONECARDINFO CardInfo[MAX_CARD_BOX_CARD_NUM];
};

union tagCSCardBoxSvrData
{
    CSCARDBOXINFO CardBoxInfo;                     	/* CARDBOX_SVR_TYPE_BOX_INFO,   */
    CSCARDBOXSELECTINFO SelectInfo;                      	/* CARDBOX_SVR_TYPE_SELECT_INFO,   */
    int Close;                           	/* CARDBOX_SVR_TYPE_CLOSE,   */
};

struct tagCSCardBoxSvr
{
    unsigned char Type;                            	/*    Bind Macrosgroup:CARDBOX_SVR_TYPE,*/
    char Res[3];                         
    CSCARDBOXSVRDATA Data;                           
};

union tagCSPkgBody
{
    char MaxBody[CS_MAX_BODY];           
    CSDIRREQ DirReq;                          	/* DIR_REQ,   */
    CSDIRRES DirRes;                          	/* DIR_RES,   */
    CSACCLOGINREQ AccLoginReq;                     	/* ACC_LOGIN_REQ,   */
    CSACCLOGINRES AccLoginRes;                     	/* ACC_LOGIN_RES,   */
    CSROLELIST RoleList;                        	/* ROLE_LIST,   */
    CSROLELOGINREQ RoleLoginReq;                    	/* ROLE_LOGIN_REQ,   */
    CSROLELOGINRES RoleLoginRes;                    	/* ROLE_LOGIN_RES,   */
    CSROLENEWREQ RoleNewReq;                      	/* ROLE_NEW_REQ,   */
    CSROLENEWRES RoleNewRes;                      	/* ROLE_NEW_RES,   */
    CSROLEDELREQ RoleDelReq;                      	/* ROLE_DEL_REQ,   */
    CSROLEDELRES RoleDelRes;                      	/* ROLE_DEL_RES,   */
    CSHEARTBEATREQ HeartBeatReq;                    	/* HEARTBEAT_REQ,   */
    CSROLELOGOUTREQ RoleLogoutReq;                   	/* ROLE_LOGOUT_REQ,   */
    CSACCLOGOUTREQ AccLogoutReq;                    	/* ACC_LOGOUT_REQ,   */
    CSACCLOGOUTRES AccLogoutRes;                    	/* ACC_LOGOUT_RES,   */
    CSSYSMSG SysMsg;                          	/* SYS_MSG,   */
    CSMOVEC MoveReq;                         	/* MOVE_CLT,   */
    CSMOVESTOP MoveStop;                        	/* MOVE_STOP,   */
    CSMOVEOTHER MoveOther;                       	/* MOVE_OTHER,   */
    CSELECTBIRTHLOCS SelectBirthLocS;                 	/* SELECT_BIRTH_LOCATION_SVR,   */
    CSELECTBIRTHLOCC SelectBirthLocC;                 	/* SELECT_BIRTH_LOCATION_CLT,   */
    ADJUSTTIME AdjustTime;                      	/* ADJUST_TIME,   */
    CSENTERVIEW EnterView;                       	/* ENTER_VIEW,   */
    CSLEAVEVIEW LeaveView;                       	/* LEAVE_VIEW,   */
    CSACTIONREQ ActionReq;                       	/* ACTION_REQ, Ver.1158  */
    CSACTIONRES ActionRes;                       	/* ACTION_RES,   */
    CSENTERMAP EnterMap;                        	/* ENTER_MAP,   */
    CSCHATREQ ChatReq;                         	/* CHAT_REQ,   */
    CSCHATRES ChatRes;                         	/* CHAT_RES,   */
    CLIENTOPT ClientOpt;                       	/* CLT_OPT,   */
    CSPLAYERATTRVAL AttrChg;                         	/* ATTR_CHG,   */
    CSSKILLINFO SkillInfo;                       	/* SKILL_INFO,   */
    CSSKILLPRE SkillPre;                        	/* SKILL_PREPARE,   */
    CSSKILLPRES SkillPreS;                       	/* SKILL_PREPARE_SVR,   */
    CSSKILLBRK SkillBrk;                        	/* SKILL_BRK,   */
    CSSKILLBRKS SkillBrkS;                       	/* SKILL_BRK_SVR,   */
    CSSKILLATK SkillAtk;                        	/* SKILL_ATK,   */
    CSSKILLATKS SkillAtkS;                       	/* SKILL_ATK_SVR_BAK,   */
    CSSKILLATK SkillHit;                        	/* SKILL_HIT,   */
    CSREVIVE Revive;                          	/* REVIVE,   */
    CSHITS Hits;                            	/* SKILL_HIT_SVR_BAK,   */
    CSDLGC DlgC;                            	/* DLG_CLT,   */
    CSDLGS DlgS;                            	/* DLG_SVR,   */
    CSADJUSTC AdjustC;                         	/* ADJUST_CLT, Ver.4  */
    CSDIATHESISINFO DiathesisInfo;                   	/* DIATHESIS_INFO, Ver.4  */
    CSPACKAGEREQ PackageReq;                      	/* PACKAGE_REQ, Ver.6  */
    CSPACKAGEINFO PackageInfo;                     	/* PACKAGE_INFO, Ver.6  */
    CSKICKOFFINFO KickoffInfo;                     	/* KICKOFF_INFO, Ver.12  */
    CSTRANSLIST TransList;                       	/* TRANS_LIST, Ver.1005  */
    CSTRANSSELECT TransSelect;                     	/* TRANS_SELECT, Ver.12  */
    CSTEAMCLT TeamClt;                         	/* TEAM_CLT, Ver.14  */
    CSTEAMSVR TeamSvr;                         	/* TEAM_SVR, Ver.13  */
    CSRELATIONCLT RelationClt;                     	/* RELATION_CLT, Ver.44  */
    CSRELATIONSVR RelationSvr;                     	/* RELATION_SVR, Ver.85  */
    CSSHOPCLT ShopClt;                         	/* SHOP_CLT, Ver.32  */
    CSSHOPSVR ShopSvr;                         	/* SHOP_SVR, Ver.32  */
    CSTASKCLT TaskClt;                         	/* TASK_CLT, Ver.38  */
    CSTASKSVR TaskSvr;                         	/* TASK_SVR, Ver.38  */
    CSSKILLREVIVEINFO SkillReviveInfo;                 	/* SKILL_REVIVE_INFO, Ver.40  */
    CSONLINESVR OnlineInfo;                      	/* ONLINE_INFO, Ver.41  */
    CSAUTOFLYCLT AutoFlyClt;                      	/* AUTO_FLY_CLT, Ver.42  */
    CSCOLLECTCLT CollectClt;                      	/* COLLECT_CLT, Ver.44  */
    CSSKILLLEARN SkillLearn;                      	/* LEARN_CLT, Ver.44  */
    CSRIDEPRE RidePre;                         	/* RIDE_PRE, Ver.49  */
    CSRIDEPRES RidePreS;                        	/* RIDE_PRE_RES, Ver.49  */
    CSRIDEON RideOn;                          	/* RIDE_ON, Ver.49  */
    CSRIDEBRK RideBrk;                         	/* RIDE_BRK, Ver.49  */
    CSRIDELISTCHG RideListChg;                     	/* RIDE_LIST_CHG, Ver.49  */
    CSPETSVR PetSvr;                          	/* PET_SVR, Ver.142  */
    CSPETCLT PetClt;                          	/* PET_CLT, Ver.142  */
    CSEXCHGSVR ExchgSvr;                        	/* EXCHG_SVR, Ver.61  */
    CSEXCHGCLT ExchgClt;                        	/* EXCHG_CLT, Ver.61  */
    CSDYNPWORLDSVR DynPworldSvr;                    	/* DYN_PWORLD_SVR, Ver.66  */
    CSDYNPWORLDCLT DynPworldClt;                    	/* DYN_PWORLD_CLT, Ver.65  */
    CSCLANSVR ClanSvr;                         	/* CLAN_SVR, Ver.67  */
    CSCLANCLT ClanClt;                         	/* CLAN_CLT, Ver.66  */
    CSTRUSTCLT TrustClt;                        	/* TRUST_CLT, Ver.70  */
    CSTRUSTSVR TrustSvr;                        	/* TRUST_SVR, Ver.70  */
    CSSHOPPINGREQ ShoppingClt;                     	/* SHOPPING_CLT, Ver.152  */
    CSSHOPPINGRES ShoppingSvr;                     	/* SHOPPING_SVR, Ver.156  */
    CSMAILCLT MailClt;                         	/* MAIL_CLT, Ver.85  */
    CSMAILSVR MailSvr;                         	/* MAIL_SVR, Ver.85  */
    CSSTALLCLT StallClt;                        	/* STALL_CLT, Ver.84  */
    CSSTALLSVR StallSvr;                        	/* STALL_SVR, Ver.84  */
    CSARMCLT ArmClt;                          	/* ARM_CLT, Ver.81  */
    CSARMSVR ArmSvr;                          	/* ARM_SVR, Ver.81  */
    int PetPreBrk;                       	/* PET_CAMPAIGN_BRK_SVR, Ver.87  */
    unsigned char CancelLogout;                    	/* CANCEL_ROLE_LOGOUT, Ver.87  */
    CSCHGNAMECLT ChgNameClt;                      	/* CHGNAME_CLT, Ver.91  */
    CSCHGNAMESVR ChgNameSvr;                      	/* CHGNAME_SVR, Ver.91  */
    CSAUTHCLT AuthClt;                         	/* AUTH_CLT, Ver.96  */
    CSAUTHSVR AuthSvr;                         	/* AUTH_SVR, Ver.96  */
    CSQUEINFO QueInfo;                         	/* QUE_INFO, Ver.99  */
    CSMONSPEECH MonSpeech;                       	/* MON_SPEECH, Ver.101  */
    CSVERSIONCLT VersionClt;                      	/* VERSION_CLT, Ver.102  */
    CSVERSIONSVR VersionSvr;                      	/* VERSION_SVR, Ver.102  */
    CSCANCELSTATUS CancelStatus;                    	/* CANCEL_STATUS, Ver.105  */
    unsigned char Jump;                            	/* PLAYER_JUMP, Ver.106  */
    CSBULLETINSVR BulletinSvr;                     	/* BULLETIN_SVR, Ver.112  */
    CSRIDECLT RideClt;                         	/* RIDE_CLT, Ver.113  */
    CSWATCHPLAYERCLT WatchPlayerClt;                  	/* WATCH_PLAYER_CLT, Ver.115  */
    CSWATCHPLAYERSVR WatchPlayerSvr;                  	/* WATCH_PLAYER_SVR, Ver.115  */
    CSONLINEAWARDCLT OnlineAwardClt;                  	/* ONLINE_AWARD_CLT, Ver.118  */
    CSONLINEAWARDSVR OnlineAwardSvr;                  	/* ONLINE_AWARD_SVR, Ver.118  */
    CSWEIXINGCLT WeiXingClt;                      	/* WEI_XING_CLT, Ver.120  */
    CSWEIXINGSVR WeiXingSvr;                      	/* WEI_XING_SVR, Ver.120  */
    CSFIGHTSVR Fight;                           	/* PLAYER_FIGHT_SVR, Ver.123  */
    CSDESIGNATIONCLT DesignationClt;                  	/* DESIGNATION_CLT, Ver.129  */
    CSDESIGNATIONSVR DesignationSvr;                  	/* DESIGNATION_SVR, Ver.129  */
    CSRESPACTSVR RespactSvr;                      	/* RESPACT_SVR, Ver.130  */
    CSRIDESVR RideSvr;                         	/* RIDE_SVR, Ver.132  */
    CSWATCHFRIENDCLT WatchFriendClt;                  	/* WATCH_FRIEND_CLT, Ver.132  */
    CSFAIRYSVR FairySvr;                        	/* FAIRY_SVR, Ver.136  */
    CSFAIRYCLT FairyClt;                        	/* FAIRY_CLT, Ver.136  */
    CSITEMCOOLINFO ItemCoolInfo;                    	/* ITEM_COOL_INFO, Ver.146  */
    CSMUDROLELOGINREQ MudRoleLoginReq;                 	/* MUD_ROLE_LOGIN_REQ, Ver.163  */
    CSMUDROLELOGINRES MudRoleLoginRes;                 	/* MUD_ROLE_LOGIN_RES, Ver.163  */
    CSMUDCHATROOMLISTREQ MudChatRoomListReq;              	/* MUD_CHAT_ROOM_LIST_REQ, Ver.597  */
    CSMUDCHATROOMLISTRES MudChatRoomListRes;              	/* MUD_CHAT_ROOM_LIST_RES, Ver.578  */
    CSMUDENTERCHATROOMREQ MudEnterChatRoomReq;             	/* MUD_ENTER_CHAT_ROOM_REQ, Ver.578  */
    CSMUDENTERCHATROOMRES MudEnterChatRoomRes;             	/* MUD_ENTER_CHAT_ROOM_RES, Ver.578  */
    CSMUDROLELOGOUTREQ MudRoleLogoutReq;                	/* MUD_ROLE_LOGOUT_REQ, Ver.164  */
    CSMUDROLEATTRCHG MudRoleAttrChg;                  	/* MUD_ROLE_ATTR_CHG, Ver.567  */
    CSPKCLT PKClt;                           	/* PK_CLT, Ver.174  */
    CSMONSPEECHEX MonSpeechEx;                     	/* MON_SPEECH_EX, Ver.189  */
    CSRANGECLT RangeClt;                        	/* RANGE_CLT, Ver.256  */
    CSPOLYFBINFO PolyFBInfo;                      	/* PLOY_FB_INFO_SVR, Ver.192  */
    CSPWORLDCLT PworldClt;                       	/* PWORLD_CLT, Ver.200  */
    CSPWORLDSVR PworldSvr;                       	/* PWORLD_SVR, Ver.200  */
    CSHEARTBEATRES HeartBeatRes;                    	/* HEARTBEAT_RES, Ver.214  */
    CSCHANGECOININTO ChangeCoinInto;                  	/* CHANGE_COIN_INTO, Ver.226  */
    CSGIFTSVR GiftSvr;                         	/* GIFT_SVR, Ver.235  */
    CSGIFTCLT GiftClt;                         	/* GIFT_CLT, Ver.235  */
    CSRANGESVR RangeSvr;                        	/* RANGE_SVR, Ver.256  */
    CSPWORLDLIMITINFO PworldLimitInfo;                 	/* PWORLD_LIMIT_INFO, Ver.279  */
    CSBCTREQ BctReq;                          	/* BCT_CLT, Ver.284  */
    CSBCTRES BctRes;                          	/* BCT_SVR, Ver.284  */
    CSAUTOTEAMCLT AutoTeamClt;                     	/* AUTOTEAM_CLT, Ver.287  */
    CSAUTOTEAMSVR AutoTeamSvr;                     	/* AUTOTEAM_SVR, Ver.287  */
    CSSECONDARYSKILLCLT SecondarySkillClt;               	/* SECONDARY_SKILL_CLT, Ver.296  */
    CSSECONDARYSKILLSVR SecondarySkillSvr;               	/* SECONDARY_SKILL_SVR, Ver.296  */
    EXTENDITEMCLT ExtendItemClt;                   	/* EXTEND_ITEM_CLT, Ver.322  */
    EXTENDITEMSVR ExtendItemSvr;                   	/* EXTEND_ITEM_SVR, Ver.322  */
    CSPREPAREATKINFO PrepareAtkInfo;                  	/* PREPAREATK_CLT, Ver.340  */
    INVITECLT InviteClt;                       	/* INVITE_TEST_CLT, Ver.371  */
    INVITESVR InviteSvr;                       	/* INVITE_TEST_SVR, Ver.371  */
    CSPLAYERMISCCLT PlayerMiscClt;                   	/* PLAYER_MISC_CLT, Ver.373  */
    CSPLAYERMISCSVR PlayerMiscSvr;                   	/* PLAYER_MISC_SVR, Ver.373  */
    GPRSCLT GPRSClt;                         	/* GPRS_CLT, Ver.391  */
    GPRSSVR GPRSSvr;                         	/* GPRS_SVR, Ver.391  */
    CSRIDEMACHINECLT RideMachineClt;                  	/* RIDE_MACHINE_CLT, Ver.393  */
    SAFELOCKCLT SafeLockClt;                     	/* SAFE_LOCK_CLT, Ver.397  */
    SAFELOCKSVR SafeLockSvr;                     	/* SAFE_LOCK_SVR, Ver.397  */
    DIESVR DieSvr;                          	/* DIE_INFO_SVR, Ver.428  */
    CSPLAYERATTRVAL BaseAttrChg;                     	/* BASE_ATTR_CHG, Ver.428  */
    CSMAPCLT MapClt;                          	/* MAP_CLT, Ver.484  */
    CSMAPSVR MapSvr;                          	/* MAP_SVR, Ver.484  */
    CSONLINEGIFTSVR OnlineGiftSvr;                   	/* CONTI_GIFT_SVR, Ver.486  */
    CSBATTLESVR BattleSvr;                       	/* BATTLE_SVR, Ver.498  */
    CSREPORTDATAREQ ReportDataReq;                   	/* REPORT_DATA_REQ, Ver.505  */
    CSREPORTDATARES ReportDataRes;                   	/* REPORT_DATA_RES, Ver.505  */
    EXTENDITEMCLT KeyinItemClt;                    	/* KEYIN_ITEM_CLT, Ver.546  */
    EXTENDITEMSVR KeyinItemSvr;                    	/* KEYIN_ITEM_SVR, Ver.546  */
    CSRUNECLT RuneClt;                         	/* RUNE_CLT, Ver.554  */
    CSRUNESVR RuneSvr;                         	/* RUNE_SVR, Ver.554  */
    CSBATTLELIMIT BattleLimit;                     	/* BATTLE_LIMIT_INFO, Ver.575  */
    CSMUDCHATROOMENTERINFO MudChatRoomEnterInfo;            	/* MUD_CHAT_ROOM_ENTER_INFO, Ver.578  */
    CSMUDCHATROOMLEAVEINFO MudChatRoomLeaveInfo;            	/* MUD_CHAT_ROOM_LEAVE_INFO, Ver.578  */
    CSMUDCHATCHANNELSETREQ MudChatChannelSetReq;            	/* MUD_CHAT_CHANNEL_SET_REQ, Ver.578  */
    CSMUDCHATCHANNELSETRES MudChatChannelSetRes;            	/* MUD_CHAT_CHANNEL_SET_RES, Ver.578  */
    CSMUDOFFLINEEXPFULLINFO MudOfflineExpFullInfo;           	/* MUD_OFFLINE_EXP_FULL_INFO, Ver.578  */
    CSMUDOFFLINEEXPTAKEREQ MudOfflineExpTakeReq;            	/* MUD_OFFLINE_EXP_TAKE_REQ, Ver.578  */
    CSMUDOFFLINEEXPTAKERES MudOfflineExpTakeRes;            	/* MUD_OFFLINE_EXP_TAKE_RES, Ver.578  */
    CSROLLCLT RollClt;                         	/* ROLL_CLT, Ver.580  */
    CSROLLSVR RollSvr;                         	/* ROLL_SVR, Ver.580  */
    CSACCGIFTSVR AccGiftSvr;                      	/* ACCGIFT_SVR, Ver.618  */
    CSPROPGIFTSVR PropGiftSvr;                     	/* PROPS_SVR, Ver.624  */
    CSONLINEGIFTGROUPSVR OnlineGiftGroupSvr;              	/* ONLINEGIFT_GROUP_SVR, Ver.640  */
    CSLEAVECLT LeaveClt;                        	/* LEAVE_CLT, Ver.651  */
    CSMOTIONCLT Motion;                          	/* MOTION_CLT, Ver.672  */
    CSVALCLT ValClt;                          	/* VAL_CLT, Ver.748  */
    CSVALSVR ValSvr;                          	/* VAL_SVR, Ver.748  */
    CSDIFFPWORLDCLT DiffPworldClt;                   	/* DIFF_PWORLD_CLT, Ver.785  */
    CSDIFFPWORLDSVR DiffPworldSvr;                   	/* DIFF_PWORLD_SVR, Ver.785  */
    CSCDKEYSVR CDKeySvr;                        	/* CDKEY_SVR, Ver.787  */
    CSUNDEL CsUnDel;                         	/* ROLE_UNDEL_REQ, Ver.867  */
    CSMUDOUTCHATROOMREQ MudOutChatRoomReq;               	/* MUD_OUT_CHAT_ROOM_REQ, Ver.951  */
    CSMUDOUTCHATROOMRES MudOutChatRoomRes;               	/* MUD_OUT_CHAT_ROOM_RES, Ver.951  */
    CSRAFFLECLT CsRaffleClt;                     	/* RAFFLE_CLT, Ver.990  */
    CSRAFFLESVR CsRaffleSvr;                     	/* RAFFLE_SVR, Ver.990  */
    CSGOLDRAFFLESVR GoldRaffleSvr;                   	/* GOLD_RAFFLE_SVR, Ver.999  */
    CSSTARDATACLT StarDataClt;                     	/* STARDATA_CLT, Ver.1008  */
    CSSTARDATASVR StarDataSvr;                     	/* STARDATA_SVR, Ver.1008  */
    CSCITYCLT CityClt;                         	/* CITY_CLT, Ver.1028  */
    CSCITYSVR CitySvr;                         	/* CITY_SVR, Ver.1015  */
    CSMACHINESVR MachineSvr;                      	/* MACHINE_SVR, Ver.1039  */
    CSACTIVEGAMECLT ActiveGameClt;                   	/* ACTIVE_GAME_CLT, Ver.1080  */
    CSACTIVEGAMESVR ActiveGameSvr;                   	/* ACTIVE_GAME_SVR, Ver.1080  */
    CSROLELTRINFO LtrInfoSvr;                      	/* LTRINFO_SVR, Ver.1141  */
    UNREALCLT UnrealClt;                       	/* UNREAL_CLT, Ver.1186  */
    UNREALSVR UnrealSvr;                       	/* UNREAL_SVR, Ver.1186  */
    CSSJTASKCLT SJTaskClt;                       	/* SJ_TASK_CLT, Ver.1402  */
    CSSJTASKSVR SJTaskSvr;                       	/* SJ_TASK_SVR, Ver.1402  */
    CSAASCLT AasClt;                          	/* AAS_CLT, Ver.1465  */
    CSAASSVR AasSvr;                          	/* AAS_SVR, Ver.1465  */
    SUBJECTCLT SubJectClt;                      	/* SUBJECT_CLT, Ver.1529  */
    SUBJECTSVR SubJectSvr;                      	/* SUBJECT_SVR, Ver.1529  */
    CSGAYCLT GayClt;                          	/* GAY_CLT, Ver.1530  */
    CSGAYSVR GaySvr;                          	/* GAY_SVR, Ver.1530  */
    STRONGCLT StrongClt;                       	/* STRONG_CLT, Ver.1561  */
    STRONGSVR StrongSvr;                       	/* STRONG_SVR, Ver.1561  */
    AUTOPWORLDCLT AutoPworldClt;                   	/* AUTOPWORLD_CLT, Ver.1615  */
    AUTOPWORLDSVR AutoPworldSvr;                   	/* AUTOPWORLD_SVR, Ver.1615  */
    CSROLECHGMEMID RoleChgMem;                      	/* ROLE_CHG_MEMID, Ver.1652  */
    ACTIVECLT ActiveClt;                       	/* ACTIVE_CLT, Ver.1653  */
    ACCGETROLECLT AccGetRoleClt;                   	/* ACC_GET_ROLE_CLT, Ver.1744  */
    ACCGETROLESVR AccGetRoleSvr;                   	/* ACC_GET_ROLE_SVR, Ver.1744  */
    RONGLUCLT RongluClt;                       	/* RONGLU_CLT, Ver.1746  */
    RONGLUSVR RongluSvr;                       	/* RONGLU_SVR, Ver.1746  */
    FZCLT FzClt;                           	/* FZ_CLT, Ver.1767  */
    FZSVR FzSvr;                           	/* FZ_SVR, Ver.1767  */
    GUNIUSCLT GuniusClt;                       	/* GUNIUS_CLT, Ver.1773  */
    GUNIUSSVR GuniusSvr;                       	/* GUNIUS_SVR, Ver.1773  */
    APEXDATA ApexClt;                         	/* APEX_CLT, Ver.1835  */
    APEXDATA ApexSvr;                         	/* APEX_SVR, Ver.1835  */
    CSBUSYCLT BusyClt;                         	/* BUSY_CLT, Ver.1849  */
    CSBUSYSVR BusySvr;                         	/* BUSY_SVR, Ver.1849  */
    CSPOLYPWORLDSVR PolyPworldSvr;                   	/* POLY_PWORLD_SVR, Ver.1901  */
    CSSPARTASVR SpartaSvr;                       	/* SPARTA_SVR, Ver.1996  */
    CSSPARTACLT SpartaClt;                       	/* SPARTA_CLT, Ver.1996  */
    CSBOONSVR BoonSvr;                         	/* BOON_SVR, Ver.2002  */
    CSBOONCLT BoonClt;                         	/* BOON_CLT, Ver.2002  */
    EXTENDITEMSAVE ExtendItemSave;                  	/* EXTEND_ITEM_SAVE, Ver.2050  */
    CSSCHOOLSVR SchoolSvr;                       	/* SCHOOL_SVR, Ver.2051  */
    CSSCHOOLCLT SchoolClt;                       	/* SCHOOL_CLT, Ver.2051  */
    SECONDPWDCLT SecondPwdClt;                    	/* SECOND_PWD_CLT, Ver.2053  */
    SECONDPWDSVR SecondPwdSvr;                    	/* SECOND_PWD_SVR, Ver.2053  */
    CSBACKCLT BackClt;                         	/* BACK_CLT, Ver.2064  */
    CSBACKSVR BackSvr;                         	/* BACK_SVR, Ver.2064  */
    CSCARDBOXCLT CardBoxClt;                      	/* CARD_BOX_CLT, Ver.2085  */
    CSCARDBOXSVR CardBoxSvr;                      	/* CARD_BOX_SVR, Ver.2085  */
    CSSTORECLT StoreClt;                        	/* STORE_CLT, Ver.2117  */
    CSSTORESVR StoreSvr;                        	/* STORE_SVR, Ver.2117  */
    CSCLANPETCLT ClanPetClt;                      	/* CLAN_PET_CLT, Ver.2289  */
    CSCLANPETSVR ClanPetSvr;                      	/* CLAN_PET_SVR, Ver.2289  */
    CSSPANSTRONGCLT SpanStrongClt;                   	/* SPAN_STRONG_CLT, Ver.2409  */
    CSSPANSTRONGSVR SpanStrongSvr;                   	/* SPAN_STRONG_SVR, Ver.2409  */
    CSHOMECLT HomeClt;                         	/* HOME_CLT, Ver.2495  */
    CSHOMESVR HomeSvr;                         	/* HOME_SVR, Ver.2495  */
    CSSHIKONGCLT ShiKongClt;                      	/* SHIKONG_CLT, Ver.2532  */
    CSSHIKONGSVR ShiKongSvr;                      	/* SHIKONG_SVR, Ver.2532  */
};

struct tagCSMsgHead
{
    unsigned short Cmd;                            
    unsigned short HeadLen;                        
    unsigned short BodyLen;                        
};

struct tagCSMsg
{
    CSMSGHEAD Head;                           
    char Body[1];                        
};

struct tagCSPkg
{
    CSPKGHEAD Head;                           
    CSPKGBODY Body;                           
};

struct tagPDUBase
{
    unsigned char Magic;                          
    unsigned char Version;                        
    unsigned char Cmd;                            
    unsigned char HeadLen;                        
    int BodyLen;                        
};

struct tagPDUExtChgSkey
{
    short Type;                           
    short Len;                            
    char EncryptSkey[PDU_MAX_ENCRYPTSKEY_LEN];
};

struct tagPDUExtQueInfo
{
    int Pos;                            
    int Max;                            
};

/* 网站签名信息的hex格式 */
struct tagWebSignInfoHex
{
    char Sign[MAX_WEB_SIGN_HEX_LEN];      	/*   WebSignInfo结构的hex格式 */
};

struct tagAuthInfo
{
    char RandK1[KEY_LEN];                
    char AccountLoginName[ACCOUNT_LOGIN_NAME_LEN];
    char AccountLoginPasswd[ACCOUNT_LOGIN_PASSWD_LEN];
    char CertID[ACCOUNT_REGIST_CERTID_LEN]; 	/*  Ver.402  */
    char RealName[ACCOUNT_REGIST_REALNAME_LEN]; 	/*  Ver.402  */
    char eMail[ACCOUNT_REGIST_EMAIL_LEN]; 	/*  Ver.402  */
    char Mobile[ACCOUNT_REGIST_MOBILE_LEN]; 	/*  Ver.402  */
    char Birthday[BIRTHDAY_LEN];          	/*  Ver.2147  */
    int WebUin;                          	/*  Ver.2147  */
    int AuthInfoType;                    	/*  Ver.2147 验证信息类型 Bind Macrosgroup:AUTH_INFO_TYPE,*/
};

struct tagSigInfo
{
    int TimeStamp;                      
    int Uin;                            
    int UinFlag;                        
    char BirthDay[BIRTHDAY_LEN];         
    char GameKey[KEY_LEN];               
    int AccSilenceEnd;                   	/*  Ver.111  */
};

struct tagAuthJC
{
    int Uin;                            
    int SigLen;                         
    char Sig[AUTH_LEN];                  
};

union tagPDUExtAuthData
{
    AUTHJC AuthJC;                          	/* AUTH_JC,   */
};

struct tagPDUExtAuthInfo
{
    int AuthType;                        	/*    Bind Macrosgroup:AUTH,*/
    PDUEXTAUTHDATA AuthData;                       
};

struct tagPDUIdentInfo
{
    int Pos;                            
    char Ident[IDENT_LEN];               
};

struct tagPDUExtIdent
{
    int Len;                            
    char EncryptIdent[PDU_MAX_ENCRYPTIDENT_LEN];
};

struct tagPDUExtRelay
{
    int RelayType;                      
    int OldPos;                         
    int Len;                            
    char EncryptIdent[PDU_MAX_ENCRYPTIDENT_LEN];
};

struct tagPDUExtStop
{
    int StopReason;                      	/*    Bind Macrosgroup:PDU_STOP_REASON,*/
};

struct tagPDUSynInfo
{
    char Randstr[IDENT_LEN];             
};

struct tagPDUExtSyn
{
    unsigned char Len;                            
    char EncryptSynInfo[PDU_MAX_ENCRYPTSYN_LEN];
};

struct tagPDUExtSynAck
{
    unsigned char Len;                            
    unsigned char EncryptSynInfo[PDU_MAX_ENCRYPTSYNACK_LEN];
};

union tagPDUExt
{
    PDUEXTCHGSKEY ChgSkey;                         	/* PDU_CMD_CHGSKEY,   */
    PDUEXTQUEINFO QueInfo;                         	/* PDU_CMD_QUEINFO,   */
    PDUEXTAUTHINFO AuthInfo;                        	/* PDU_CMD_AUTH,   */
    PDUEXTIDENT Ident;                           	/* PDU_CMD_IDENT,   */
    PDUEXTRELAY Relay;                           	/* PDU_CMD_RELAY,   */
    PDUEXTSTOP Stop;                            	/* PDU_CMD_STOP,   */
    PDUEXTSYN Syn;                             	/* PDU_CMD_SYN,   */
    PDUEXTSYNACK SynAck;                          	/* PDU_CMD_SYNACK,   */
};

struct tagPDUHead
{
    PDUBASE Base;                           
    PDUEXT Ext;                            
};

struct tagPDUFrame
{
    PDUHEAD Head;                           
    char Body[1];                        
};


#pragma pack()

#ifdef __cplusplus
}
#endif


#endif /* PROTO_CS_H */
