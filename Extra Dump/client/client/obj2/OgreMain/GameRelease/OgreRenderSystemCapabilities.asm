; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\OgreMain\OgreRenderSystemCapabilities.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG5713
_DATA	ENDS
CONST	SEGMENT
$SG5713	DB	'bad allocation', 00H
CONST	ENDS
PUBLIC	?setNumWorldMatricies@RenderSystemCapabilities@Ogre@@QAEXG@Z ; Ogre::RenderSystemCapabilities::setNumWorldMatricies
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrerendersystemcapabilities.h
;	COMDAT ?setNumWorldMatricies@RenderSystemCapabilities@Ogre@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 2
?setNumWorldMatricies@RenderSystemCapabilities@Ogre@@QAEXG@Z PROC ; Ogre::RenderSystemCapabilities::setNumWorldMatricies, COMDAT
; _this$ = ecx

; 148  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 			mNumWorldMatrices = num;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _num$[ebp]
	mov	WORD PTR [eax], cx

; 150  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setNumWorldMatricies@RenderSystemCapabilities@Ogre@@QAEXG@Z ENDP ; Ogre::RenderSystemCapabilities::setNumWorldMatricies
_TEXT	ENDS
PUBLIC	?setNumTextureUnits@RenderSystemCapabilities@Ogre@@QAEXG@Z ; Ogre::RenderSystemCapabilities::setNumTextureUnits
; Function compile flags: /Odtp
;	COMDAT ?setNumTextureUnits@RenderSystemCapabilities@Ogre@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 2
?setNumTextureUnits@RenderSystemCapabilities@Ogre@@QAEXG@Z PROC ; Ogre::RenderSystemCapabilities::setNumTextureUnits, COMDAT
; _this$ = ecx

; 153  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 154  : 			mNumTextureUnits = num;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _num$[ebp]
	mov	WORD PTR [eax+2], cx

; 155  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setNumTextureUnits@RenderSystemCapabilities@Ogre@@QAEXG@Z ENDP ; Ogre::RenderSystemCapabilities::setNumTextureUnits
_TEXT	ENDS
PUBLIC	?setStencilBufferBitDepth@RenderSystemCapabilities@Ogre@@QAEXG@Z ; Ogre::RenderSystemCapabilities::setStencilBufferBitDepth
; Function compile flags: /Odtp
;	COMDAT ?setStencilBufferBitDepth@RenderSystemCapabilities@Ogre@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 2
?setStencilBufferBitDepth@RenderSystemCapabilities@Ogre@@QAEXG@Z PROC ; Ogre::RenderSystemCapabilities::setStencilBufferBitDepth, COMDAT
; _this$ = ecx

; 158  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 159  : 			mStencilBufferBitDepth = num;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _num$[ebp]
	mov	WORD PTR [eax+4], cx

; 160  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setStencilBufferBitDepth@RenderSystemCapabilities@Ogre@@QAEXG@Z ENDP ; Ogre::RenderSystemCapabilities::setStencilBufferBitDepth
_TEXT	ENDS
PUBLIC	?setNumVertexBlendMatrices@RenderSystemCapabilities@Ogre@@QAEXG@Z ; Ogre::RenderSystemCapabilities::setNumVertexBlendMatrices
; Function compile flags: /Odtp
;	COMDAT ?setNumVertexBlendMatrices@RenderSystemCapabilities@Ogre@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 2
?setNumVertexBlendMatrices@RenderSystemCapabilities@Ogre@@QAEXG@Z PROC ; Ogre::RenderSystemCapabilities::setNumVertexBlendMatrices, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			mNumVertexBlendMatrices = num;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _num$[ebp]
	mov	WORD PTR [eax+6], cx

; 165  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setNumVertexBlendMatrices@RenderSystemCapabilities@Ogre@@QAEXG@Z ENDP ; Ogre::RenderSystemCapabilities::setNumVertexBlendMatrices
_TEXT	ENDS
PUBLIC	?setNumMultiRenderTargets@RenderSystemCapabilities@Ogre@@QAEXG@Z ; Ogre::RenderSystemCapabilities::setNumMultiRenderTargets
; Function compile flags: /Odtp
;	COMDAT ?setNumMultiRenderTargets@RenderSystemCapabilities@Ogre@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 2
?setNumMultiRenderTargets@RenderSystemCapabilities@Ogre@@QAEXG@Z PROC ; Ogre::RenderSystemCapabilities::setNumMultiRenderTargets, COMDAT
; _this$ = ecx

; 169  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 			mNumMultiRenderTargets = num;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _num$[ebp]
	mov	WORD PTR [eax+80], cx

; 171  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setNumMultiRenderTargets@RenderSystemCapabilities@Ogre@@QAEXG@Z ENDP ; Ogre::RenderSystemCapabilities::setNumMultiRenderTargets
_TEXT	ENDS
PUBLIC	?getNumWorldMatricies@RenderSystemCapabilities@Ogre@@QBEGXZ ; Ogre::RenderSystemCapabilities::getNumWorldMatricies
; Function compile flags: /Odtp
;	COMDAT ?getNumWorldMatricies@RenderSystemCapabilities@Ogre@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumWorldMatricies@RenderSystemCapabilities@Ogre@@QBEGXZ PROC ; Ogre::RenderSystemCapabilities::getNumWorldMatricies, COMDAT
; _this$ = ecx

; 174  : 		{ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 			return mNumWorldMatrices;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax]

; 176  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumWorldMatricies@RenderSystemCapabilities@Ogre@@QBEGXZ ENDP ; Ogre::RenderSystemCapabilities::getNumWorldMatricies
_TEXT	ENDS
PUBLIC	?getNumTextureUnits@RenderSystemCapabilities@Ogre@@QBEGXZ ; Ogre::RenderSystemCapabilities::getNumTextureUnits
; Function compile flags: /Odtp
;	COMDAT ?getNumTextureUnits@RenderSystemCapabilities@Ogre@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumTextureUnits@RenderSystemCapabilities@Ogre@@QBEGXZ PROC ; Ogre::RenderSystemCapabilities::getNumTextureUnits, COMDAT
; _this$ = ecx

; 191  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 			return mNumTextureUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+2]

; 193  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumTextureUnits@RenderSystemCapabilities@Ogre@@QBEGXZ ENDP ; Ogre::RenderSystemCapabilities::getNumTextureUnits
_TEXT	ENDS
PUBLIC	?getStencilBufferBitDepth@RenderSystemCapabilities@Ogre@@QBEGXZ ; Ogre::RenderSystemCapabilities::getStencilBufferBitDepth
; Function compile flags: /Odtp
;	COMDAT ?getStencilBufferBitDepth@RenderSystemCapabilities@Ogre@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStencilBufferBitDepth@RenderSystemCapabilities@Ogre@@QBEGXZ PROC ; Ogre::RenderSystemCapabilities::getStencilBufferBitDepth, COMDAT
; _this$ = ecx

; 202  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 			return mStencilBufferBitDepth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+4]

; 204  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getStencilBufferBitDepth@RenderSystemCapabilities@Ogre@@QBEGXZ ENDP ; Ogre::RenderSystemCapabilities::getStencilBufferBitDepth
_TEXT	ENDS
PUBLIC	?numVertexBlendMatrices@RenderSystemCapabilities@Ogre@@QBEGXZ ; Ogre::RenderSystemCapabilities::numVertexBlendMatrices
; Function compile flags: /Odtp
;	COMDAT ?numVertexBlendMatrices@RenderSystemCapabilities@Ogre@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?numVertexBlendMatrices@RenderSystemCapabilities@Ogre@@QBEGXZ PROC ; Ogre::RenderSystemCapabilities::numVertexBlendMatrices, COMDAT
; _this$ = ecx

; 209  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 			return mNumVertexBlendMatrices;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+6]

; 211  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?numVertexBlendMatrices@RenderSystemCapabilities@Ogre@@QBEGXZ ENDP ; Ogre::RenderSystemCapabilities::numVertexBlendMatrices
_TEXT	ENDS
PUBLIC	?numMultiRenderTargets@RenderSystemCapabilities@Ogre@@QBEGXZ ; Ogre::RenderSystemCapabilities::numMultiRenderTargets
; Function compile flags: /Odtp
;	COMDAT ?numMultiRenderTargets@RenderSystemCapabilities@Ogre@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?numMultiRenderTargets@RenderSystemCapabilities@Ogre@@QBEGXZ PROC ; Ogre::RenderSystemCapabilities::numMultiRenderTargets, COMDAT
; _this$ = ecx

; 215  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 			return mNumMultiRenderTargets;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+80]

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?numMultiRenderTargets@RenderSystemCapabilities@Ogre@@QBEGXZ ENDP ; Ogre::RenderSystemCapabilities::numMultiRenderTargets
_TEXT	ENDS
PUBLIC	?setCapability@RenderSystemCapabilities@Ogre@@QAEXW4Capabilities@2@@Z ; Ogre::RenderSystemCapabilities::setCapability
; Function compile flags: /Odtp
;	COMDAT ?setCapability@RenderSystemCapabilities@Ogre@@QAEXW4Capabilities@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 4
?setCapability@RenderSystemCapabilities@Ogre@@QAEXW4Capabilities@2@@Z PROC ; Ogre::RenderSystemCapabilities::setCapability, COMDAT
; _this$ = ecx

; 222  : 		{ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 223  : 			mCapabilities |= c;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 224  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setCapability@RenderSystemCapabilities@Ogre@@QAEXW4Capabilities@2@@Z ENDP ; Ogre::RenderSystemCapabilities::setCapability
_TEXT	ENDS
PUBLIC	?hasCapability@RenderSystemCapabilities@Ogre@@QBE_NW4Capabilities@2@@Z ; Ogre::RenderSystemCapabilities::hasCapability
; Function compile flags: /Odtp
;	COMDAT ?hasCapability@RenderSystemCapabilities@Ogre@@QBE_NW4Capabilities@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 4
?hasCapability@RenderSystemCapabilities@Ogre@@QBE_NW4Capabilities@2@@Z PROC ; Ogre::RenderSystemCapabilities::hasCapability, COMDAT
; _this$ = ecx

; 229  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 230  : 			if(mCapabilities & c)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR _c$[ebp]
	je	SHORT $LN2@hasCapabil

; 231  : 			{
; 232  : 				return true;

	mov	al, 1
	jmp	SHORT $LN3@hasCapabil

; 233  : 			}
; 234  : 			else

	jmp	SHORT $LN3@hasCapabil
$LN2@hasCapabil:

; 235  : 			{
; 236  : 				return false;

	xor	al, al
$LN3@hasCapabil:

; 237  : 			}
; 238  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?hasCapability@RenderSystemCapabilities@Ogre@@QBE_NW4Capabilities@2@@Z ENDP ; Ogre::RenderSystemCapabilities::hasCapability
_TEXT	ENDS
PUBLIC	?getMaxVertexProgramVersion@RenderSystemCapabilities@Ogre@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Ogre::RenderSystemCapabilities::getMaxVertexProgramVersion
; Function compile flags: /Odtp
;	COMDAT ?getMaxVertexProgramVersion@RenderSystemCapabilities@Ogre@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxVertexProgramVersion@RenderSystemCapabilities@Ogre@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Ogre::RenderSystemCapabilities::getMaxVertexProgramVersion, COMDAT
; _this$ = ecx

; 241  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 242  : 			return mMaxVertexProgramVersion;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH

; 243  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxVertexProgramVersion@RenderSystemCapabilities@Ogre@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Ogre::RenderSystemCapabilities::getMaxVertexProgramVersion
_TEXT	ENDS
PUBLIC	?getMaxFragmentProgramVersion@RenderSystemCapabilities@Ogre@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Ogre::RenderSystemCapabilities::getMaxFragmentProgramVersion
; Function compile flags: /Odtp
;	COMDAT ?getMaxFragmentProgramVersion@RenderSystemCapabilities@Ogre@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxFragmentProgramVersion@RenderSystemCapabilities@Ogre@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Ogre::RenderSystemCapabilities::getMaxFragmentProgramVersion, COMDAT
; _this$ = ecx

; 246  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 247  : 			return mMaxFragmentProgramVersion;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H

; 248  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxFragmentProgramVersion@RenderSystemCapabilities@Ogre@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Ogre::RenderSystemCapabilities::getMaxFragmentProgramVersion
_TEXT	ENDS
PUBLIC	?getVertexProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QBEGXZ ; Ogre::RenderSystemCapabilities::getVertexProgramConstantFloatCount
; Function compile flags: /Odtp
;	COMDAT ?getVertexProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVertexProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QBEGXZ PROC ; Ogre::RenderSystemCapabilities::getVertexProgramConstantFloatCount, COMDAT
; _this$ = ecx

; 251  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 			return mVertexProgramConstantFloatCount;           

	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+68]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getVertexProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QBEGXZ ENDP ; Ogre::RenderSystemCapabilities::getVertexProgramConstantFloatCount
_TEXT	ENDS
PUBLIC	?getVertexProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QBEGXZ ; Ogre::RenderSystemCapabilities::getVertexProgramConstantIntCount
; Function compile flags: /Odtp
;	COMDAT ?getVertexProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVertexProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QBEGXZ PROC ; Ogre::RenderSystemCapabilities::getVertexProgramConstantIntCount, COMDAT
; _this$ = ecx

; 256  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 			return mVertexProgramConstantIntCount;           

	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+70]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getVertexProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QBEGXZ ENDP ; Ogre::RenderSystemCapabilities::getVertexProgramConstantIntCount
_TEXT	ENDS
PUBLIC	?getVertexProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QBEGXZ ; Ogre::RenderSystemCapabilities::getVertexProgramConstantBoolCount
; Function compile flags: /Odtp
;	COMDAT ?getVertexProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVertexProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QBEGXZ PROC ; Ogre::RenderSystemCapabilities::getVertexProgramConstantBoolCount, COMDAT
; _this$ = ecx

; 261  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 262  : 			return mVertexProgramConstantBoolCount;           

	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+72]

; 263  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getVertexProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QBEGXZ ENDP ; Ogre::RenderSystemCapabilities::getVertexProgramConstantBoolCount
_TEXT	ENDS
PUBLIC	?getFragmentProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QBEGXZ ; Ogre::RenderSystemCapabilities::getFragmentProgramConstantFloatCount
; Function compile flags: /Odtp
;	COMDAT ?getFragmentProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFragmentProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QBEGXZ PROC ; Ogre::RenderSystemCapabilities::getFragmentProgramConstantFloatCount, COMDAT
; _this$ = ecx

; 266  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 			return mFragmentProgramConstantFloatCount;           

	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+74]

; 268  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getFragmentProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QBEGXZ ENDP ; Ogre::RenderSystemCapabilities::getFragmentProgramConstantFloatCount
_TEXT	ENDS
PUBLIC	?getFragmentProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QBEGXZ ; Ogre::RenderSystemCapabilities::getFragmentProgramConstantIntCount
; Function compile flags: /Odtp
;	COMDAT ?getFragmentProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFragmentProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QBEGXZ PROC ; Ogre::RenderSystemCapabilities::getFragmentProgramConstantIntCount, COMDAT
; _this$ = ecx

; 271  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 272  : 			return mFragmentProgramConstantIntCount;           

	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+76]

; 273  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getFragmentProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QBEGXZ ENDP ; Ogre::RenderSystemCapabilities::getFragmentProgramConstantIntCount
_TEXT	ENDS
PUBLIC	?getFragmentProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QBEGXZ ; Ogre::RenderSystemCapabilities::getFragmentProgramConstantBoolCount
; Function compile flags: /Odtp
;	COMDAT ?getFragmentProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFragmentProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QBEGXZ PROC ; Ogre::RenderSystemCapabilities::getFragmentProgramConstantBoolCount, COMDAT
; _this$ = ecx

; 276  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 			return mFragmentProgramConstantBoolCount;           

	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+78]

; 278  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getFragmentProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QBEGXZ ENDP ; Ogre::RenderSystemCapabilities::getFragmentProgramConstantBoolCount
_TEXT	ENDS
PUBLIC	?setMaxVertexProgramVersion@RenderSystemCapabilities@Ogre@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Ogre::RenderSystemCapabilities::setMaxVertexProgramVersion
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ?setMaxVertexProgramVersion@RenderSystemCapabilities@Ogre@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ver$ = 8						; size = 4
?setMaxVertexProgramVersion@RenderSystemCapabilities@Ogre@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Ogre::RenderSystemCapabilities::setMaxVertexProgramVersion, COMDAT
; _this$ = ecx

; 284  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 			mMaxVertexProgramVersion = ver;

	mov	eax, DWORD PTR _ver$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 286  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setMaxVertexProgramVersion@RenderSystemCapabilities@Ogre@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Ogre::RenderSystemCapabilities::setMaxVertexProgramVersion
_TEXT	ENDS
PUBLIC	?setMaxFragmentProgramVersion@RenderSystemCapabilities@Ogre@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Ogre::RenderSystemCapabilities::setMaxFragmentProgramVersion
; Function compile flags: /Odtp
;	COMDAT ?setMaxFragmentProgramVersion@RenderSystemCapabilities@Ogre@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ver$ = 8						; size = 4
?setMaxFragmentProgramVersion@RenderSystemCapabilities@Ogre@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Ogre::RenderSystemCapabilities::setMaxFragmentProgramVersion, COMDAT
; _this$ = ecx

; 289  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 			mMaxFragmentProgramVersion = ver;

	mov	eax, DWORD PTR _ver$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 291  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setMaxFragmentProgramVersion@RenderSystemCapabilities@Ogre@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Ogre::RenderSystemCapabilities::setMaxFragmentProgramVersion
_TEXT	ENDS
PUBLIC	?setVertexProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QAEXG@Z ; Ogre::RenderSystemCapabilities::setVertexProgramConstantFloatCount
; Function compile flags: /Odtp
;	COMDAT ?setVertexProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?setVertexProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QAEXG@Z PROC ; Ogre::RenderSystemCapabilities::setVertexProgramConstantFloatCount, COMDAT
; _this$ = ecx

; 294  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 295  : 			mVertexProgramConstantFloatCount = c;           

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax+68], cx

; 296  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setVertexProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QAEXG@Z ENDP ; Ogre::RenderSystemCapabilities::setVertexProgramConstantFloatCount
_TEXT	ENDS
PUBLIC	?setVertexProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QAEXG@Z ; Ogre::RenderSystemCapabilities::setVertexProgramConstantIntCount
; Function compile flags: /Odtp
;	COMDAT ?setVertexProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?setVertexProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QAEXG@Z PROC ; Ogre::RenderSystemCapabilities::setVertexProgramConstantIntCount, COMDAT
; _this$ = ecx

; 299  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 300  : 			mVertexProgramConstantIntCount = c;           

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax+70], cx

; 301  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setVertexProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QAEXG@Z ENDP ; Ogre::RenderSystemCapabilities::setVertexProgramConstantIntCount
_TEXT	ENDS
PUBLIC	?setVertexProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QAEXG@Z ; Ogre::RenderSystemCapabilities::setVertexProgramConstantBoolCount
; Function compile flags: /Odtp
;	COMDAT ?setVertexProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?setVertexProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QAEXG@Z PROC ; Ogre::RenderSystemCapabilities::setVertexProgramConstantBoolCount, COMDAT
; _this$ = ecx

; 304  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 305  : 			mVertexProgramConstantBoolCount = c;           

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax+72], cx

; 306  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setVertexProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QAEXG@Z ENDP ; Ogre::RenderSystemCapabilities::setVertexProgramConstantBoolCount
_TEXT	ENDS
PUBLIC	?setFragmentProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QAEXG@Z ; Ogre::RenderSystemCapabilities::setFragmentProgramConstantFloatCount
; Function compile flags: /Odtp
;	COMDAT ?setFragmentProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?setFragmentProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QAEXG@Z PROC ; Ogre::RenderSystemCapabilities::setFragmentProgramConstantFloatCount, COMDAT
; _this$ = ecx

; 309  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 310  : 			mFragmentProgramConstantFloatCount = c;           

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax+74], cx

; 311  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setFragmentProgramConstantFloatCount@RenderSystemCapabilities@Ogre@@QAEXG@Z ENDP ; Ogre::RenderSystemCapabilities::setFragmentProgramConstantFloatCount
_TEXT	ENDS
PUBLIC	?setFragmentProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QAEXG@Z ; Ogre::RenderSystemCapabilities::setFragmentProgramConstantIntCount
; Function compile flags: /Odtp
;	COMDAT ?setFragmentProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?setFragmentProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QAEXG@Z PROC ; Ogre::RenderSystemCapabilities::setFragmentProgramConstantIntCount, COMDAT
; _this$ = ecx

; 314  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 			mFragmentProgramConstantIntCount = c;           

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax+76], cx

; 316  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setFragmentProgramConstantIntCount@RenderSystemCapabilities@Ogre@@QAEXG@Z ENDP ; Ogre::RenderSystemCapabilities::setFragmentProgramConstantIntCount
_TEXT	ENDS
PUBLIC	?setFragmentProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QAEXG@Z ; Ogre::RenderSystemCapabilities::setFragmentProgramConstantBoolCount
; Function compile flags: /Odtp
;	COMDAT ?setFragmentProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?setFragmentProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QAEXG@Z PROC ; Ogre::RenderSystemCapabilities::setFragmentProgramConstantBoolCount, COMDAT
; _this$ = ecx

; 319  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 320  : 			mFragmentProgramConstantBoolCount = c;           

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax+78], cx

; 321  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setFragmentProgramConstantBoolCount@RenderSystemCapabilities@Ogre@@QAEXG@Z ENDP ; Ogre::RenderSystemCapabilities::setFragmentProgramConstantBoolCount
_TEXT	ENDS
PUBLIC	?setMaxPointSize@RenderSystemCapabilities@Ogre@@QAEXM@Z ; Ogre::RenderSystemCapabilities::setMaxPointSize
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
;	COMDAT ?setMaxPointSize@RenderSystemCapabilities@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?setMaxPointSize@RenderSystemCapabilities@Ogre@@QAEXM@Z PROC ; Ogre::RenderSystemCapabilities::setMaxPointSize, COMDAT
; _this$ = ecx

; 324  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 325  : 			mMaxPointSize = s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [eax+84]

; 326  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setMaxPointSize@RenderSystemCapabilities@Ogre@@QAEXM@Z ENDP ; Ogre::RenderSystemCapabilities::setMaxPointSize
_TEXT	ENDS
PUBLIC	?getMaxPointSize@RenderSystemCapabilities@Ogre@@QBEMXZ ; Ogre::RenderSystemCapabilities::getMaxPointSize
; Function compile flags: /Odtp
;	COMDAT ?getMaxPointSize@RenderSystemCapabilities@Ogre@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxPointSize@RenderSystemCapabilities@Ogre@@QBEMXZ PROC ; Ogre::RenderSystemCapabilities::getMaxPointSize, COMDAT
; _this$ = ecx

; 329  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 330  : 			return mMaxPointSize;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+84]

; 331  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxPointSize@RenderSystemCapabilities@Ogre@@QBEMXZ ENDP ; Ogre::RenderSystemCapabilities::getMaxPointSize
_TEXT	ENDS
PUBLIC	?setNonPOW2TexturesLimited@RenderSystemCapabilities@Ogre@@QAEX_N@Z ; Ogre::RenderSystemCapabilities::setNonPOW2TexturesLimited
; Function compile flags: /Odtp
;	COMDAT ?setNonPOW2TexturesLimited@RenderSystemCapabilities@Ogre@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_l$ = 8							; size = 1
?setNonPOW2TexturesLimited@RenderSystemCapabilities@Ogre@@QAEX_N@Z PROC ; Ogre::RenderSystemCapabilities::setNonPOW2TexturesLimited, COMDAT
; _this$ = ecx

; 334  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 335  : 			mNonPOW2TexturesLimited = l;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _l$[ebp]
	mov	BYTE PTR [eax+88], cl

; 336  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setNonPOW2TexturesLimited@RenderSystemCapabilities@Ogre@@QAEX_N@Z ENDP ; Ogre::RenderSystemCapabilities::setNonPOW2TexturesLimited
_TEXT	ENDS
PUBLIC	?getNonPOW2TexturesLimited@RenderSystemCapabilities@Ogre@@QBE_NXZ ; Ogre::RenderSystemCapabilities::getNonPOW2TexturesLimited
; Function compile flags: /Odtp
;	COMDAT ?getNonPOW2TexturesLimited@RenderSystemCapabilities@Ogre@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNonPOW2TexturesLimited@RenderSystemCapabilities@Ogre@@QBE_NXZ PROC ; Ogre::RenderSystemCapabilities::getNonPOW2TexturesLimited, COMDAT
; _this$ = ecx

; 346  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 347  : 			return mNonPOW2TexturesLimited;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+88]

; 348  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getNonPOW2TexturesLimited@RenderSystemCapabilities@Ogre@@QBE_NXZ ENDP ; Ogre::RenderSystemCapabilities::getNonPOW2TexturesLimited
_TEXT	ENDS
PUBLIC	?setNumVertexTextureUnits@RenderSystemCapabilities@Ogre@@QAEXG@Z ; Ogre::RenderSystemCapabilities::setNumVertexTextureUnits
; Function compile flags: /Odtp
;	COMDAT ?setNumVertexTextureUnits@RenderSystemCapabilities@Ogre@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 2
?setNumVertexTextureUnits@RenderSystemCapabilities@Ogre@@QAEXG@Z PROC ; Ogre::RenderSystemCapabilities::setNumVertexTextureUnits, COMDAT
; _this$ = ecx

; 352  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 353  : 			mNumVertexTextureUnits = n;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _n$[ebp]
	mov	WORD PTR [eax+90], cx

; 354  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setNumVertexTextureUnits@RenderSystemCapabilities@Ogre@@QAEXG@Z ENDP ; Ogre::RenderSystemCapabilities::setNumVertexTextureUnits
_TEXT	ENDS
PUBLIC	?getNumVertexTextureUnits@RenderSystemCapabilities@Ogre@@QBEGXZ ; Ogre::RenderSystemCapabilities::getNumVertexTextureUnits
; Function compile flags: /Odtp
;	COMDAT ?getNumVertexTextureUnits@RenderSystemCapabilities@Ogre@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumVertexTextureUnits@RenderSystemCapabilities@Ogre@@QBEGXZ PROC ; Ogre::RenderSystemCapabilities::getNumVertexTextureUnits, COMDAT
; _this$ = ecx

; 357  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 358  : 			return mNumVertexTextureUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+90]

; 359  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumVertexTextureUnits@RenderSystemCapabilities@Ogre@@QBEGXZ ENDP ; Ogre::RenderSystemCapabilities::getNumVertexTextureUnits
_TEXT	ENDS
PUBLIC	?setVertexTextureUnitsShared@RenderSystemCapabilities@Ogre@@QAEX_N@Z ; Ogre::RenderSystemCapabilities::setVertexTextureUnitsShared
; Function compile flags: /Odtp
;	COMDAT ?setVertexTextureUnitsShared@RenderSystemCapabilities@Ogre@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_shared$ = 8						; size = 1
?setVertexTextureUnitsShared@RenderSystemCapabilities@Ogre@@QAEX_N@Z PROC ; Ogre::RenderSystemCapabilities::setVertexTextureUnitsShared, COMDAT
; _this$ = ecx

; 362  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 363  : 			mVertexTextureUnitsShared = shared;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _shared$[ebp]
	mov	BYTE PTR [eax+92], cl

; 364  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setVertexTextureUnitsShared@RenderSystemCapabilities@Ogre@@QAEX_N@Z ENDP ; Ogre::RenderSystemCapabilities::setVertexTextureUnitsShared
_TEXT	ENDS
PUBLIC	?getVertexTextureUnitsShared@RenderSystemCapabilities@Ogre@@QBE_NXZ ; Ogre::RenderSystemCapabilities::getVertexTextureUnitsShared
; Function compile flags: /Odtp
;	COMDAT ?getVertexTextureUnitsShared@RenderSystemCapabilities@Ogre@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVertexTextureUnitsShared@RenderSystemCapabilities@Ogre@@QBE_NXZ PROC ; Ogre::RenderSystemCapabilities::getVertexTextureUnitsShared, COMDAT
; _this$ = ecx

; 367  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 368  : 			return mVertexTextureUnitsShared;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+92]

; 369  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getVertexTextureUnitsShared@RenderSystemCapabilities@Ogre@@QBE_NXZ ENDP ; Ogre::RenderSystemCapabilities::getVertexTextureUnitsShared
_TEXT	ENDS
PUBLIC	??0RenderSystemCapabilities@Ogre@@QAE@ABV01@@Z	; Ogre::RenderSystemCapabilities::RenderSystemCapabilities
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RenderSystemCapabilities@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RenderSystemCapabilities@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0RenderSystemCapabilities@Ogre@@QAE@ABV01@@Z$1
__ehfuncinfo$??0RenderSystemCapabilities@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0RenderSystemCapabilities@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0RenderSystemCapabilities@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0RenderSystemCapabilities@Ogre@@QAE@ABV01@@Z PROC	; Ogre::RenderSystemCapabilities::RenderSystemCapabilities, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RenderSystemCapabilities@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax+2], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx+6]
	mov	WORD PTR [eax+6], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+68]
	mov	WORD PTR [edx+68], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+70]
	mov	WORD PTR [edx+70], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+72]
	mov	WORD PTR [edx+72], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+74]
	mov	WORD PTR [edx+74], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+76]
	mov	WORD PTR [edx+76], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+78]
	mov	WORD PTR [edx+78], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+80]
	mov	WORD PTR [edx+80], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+84]
	fstp	DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+88]
	mov	BYTE PTR [ecx+88], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx+90]
	mov	WORD PTR [ecx+90], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+92]
	mov	BYTE PTR [ecx+92], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RenderSystemCapabilities@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$??0RenderSystemCapabilities@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0RenderSystemCapabilities@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RenderSystemCapabilities@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RenderSystemCapabilities@Ogre@@QAE@ABV01@@Z ENDP	; Ogre::RenderSystemCapabilities::RenderSystemCapabilities
PUBLIC	??4RenderSystemCapabilities@Ogre@@QAEAAV01@ABV01@@Z ; Ogre::RenderSystemCapabilities::operator=
; Function compile flags: /Odtp
;	COMDAT ??4RenderSystemCapabilities@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4RenderSystemCapabilities@Ogre@@QAEAAV01@ABV01@@Z PROC ; Ogre::RenderSystemCapabilities::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax+2], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx+6]
	mov	WORD PTR [eax+6], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+68]
	mov	WORD PTR [edx+68], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+70]
	mov	WORD PTR [edx+70], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+72]
	mov	WORD PTR [edx+72], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+74]
	mov	WORD PTR [edx+74], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+76]
	mov	WORD PTR [edx+76], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+78]
	mov	WORD PTR [edx+78], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+80]
	mov	WORD PTR [edx+80], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+84]
	fstp	DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+88]
	mov	BYTE PTR [ecx+88], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx+90]
	mov	WORD PTR [ecx+90], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+92]
	mov	BYTE PTR [ecx+92], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4RenderSystemCapabilities@Ogre@@QAEAAV01@ABV01@@Z ENDP ; Ogre::RenderSystemCapabilities::operator=
_TEXT	ENDS
PUBLIC	??0RenderSystemCapabilities@Ogre@@QAE@XZ	; Ogre::RenderSystemCapabilities::RenderSystemCapabilities
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
xdata$x	SEGMENT
__unwindtable$??0RenderSystemCapabilities@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RenderSystemCapabilities@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0RenderSystemCapabilities@Ogre@@QAE@XZ$1
__ehfuncinfo$??0RenderSystemCapabilities@Ogre@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0RenderSystemCapabilities@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrerendersystemcapabilities.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0RenderSystemCapabilities@Ogre@@QAE@XZ PROC		; Ogre::RenderSystemCapabilities::RenderSystemCapabilities
; _this$ = ecx

; 38   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RenderSystemCapabilities@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+4], cx
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+6], ax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+80], ax
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+88], 0

; 39   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0RenderSystemCapabilities@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$??0RenderSystemCapabilities@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0RenderSystemCapabilities@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RenderSystemCapabilities@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RenderSystemCapabilities@Ogre@@QAE@XZ ENDP		; Ogre::RenderSystemCapabilities::RenderSystemCapabilities
PUBLIC	??1RenderSystemCapabilities@Ogre@@QAE@XZ	; Ogre::RenderSystemCapabilities::~RenderSystemCapabilities
xdata$x	SEGMENT
__unwindtable$??1RenderSystemCapabilities@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1RenderSystemCapabilities@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1RenderSystemCapabilities@Ogre@@QAE@XZ$1
__ehfuncinfo$??1RenderSystemCapabilities@Ogre@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1RenderSystemCapabilities@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1RenderSystemCapabilities@Ogre@@QAE@XZ PROC		; Ogre::RenderSystemCapabilities::~RenderSystemCapabilities
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1RenderSystemCapabilities@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 43   : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1RenderSystemCapabilities@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$??1RenderSystemCapabilities@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1RenderSystemCapabilities@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1RenderSystemCapabilities@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1RenderSystemCapabilities@Ogre@@QAE@XZ ENDP		; Ogre::RenderSystemCapabilities::~RenderSystemCapabilities
END
