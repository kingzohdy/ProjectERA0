; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\OgreMain\OgreDummyNode.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG5717
_DATA	ENDS
CONST	SEGMENT
$SG5717	DB	'bad allocation', 00H
	ORG $+1
_MAX_FLOAT DD	07f7fffffr			; 3.40282e+038
_ONE_PI	DD	040490fd0r			; 3.14159
_EPSILON DD	03727c5acr			; 1e-005
_RADS_PER_DEG DD 03c8efa35r			; 0.0174533
_DEGS_PER_RAD DD 042652ee1r			; 57.2958
$SG62834 DB	'DummyNode', 00H
CONST	ENDS
PUBLIC	??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDelegation::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDelegation::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDelegation::operator=
_TEXT	ENDS
PUBLIC	?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ	; Ogre::RuntimeClass::getBaseClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebaseobject.h
;	COMDAT ?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ PROC	; Ogre::RuntimeClass::getBaseClass, COMDAT
; _this$ = ecx

; 20   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 21   : 			return m_pBaseClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 22   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ ENDP	; Ogre::RuntimeClass::getBaseClass
_TEXT	ENDS
PUBLIC	?getClassName@RuntimeClass@Ogre@@QBEPBDXZ	; Ogre::RuntimeClass::getClassName
; Function compile flags: /Odtp
;	COMDAT ?getClassName@RuntimeClass@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ PROC		; Ogre::RuntimeClass::getClassName, COMDAT
; _this$ = ecx

; 25   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 26   : 			return m_pClassName; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ ENDP		; Ogre::RuntimeClass::getClassName
_TEXT	ENDS
PUBLIC	?getVersion@RuntimeClass@Ogre@@QBEHXZ		; Ogre::RuntimeClass::getVersion
; Function compile flags: /Odtp
;	COMDAT ?getVersion@RuntimeClass@Ogre@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVersion@RuntimeClass@Ogre@@QBEHXZ PROC		; Ogre::RuntimeClass::getVersion, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Version;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getVersion@RuntimeClass@Ogre@@QBEHXZ ENDP		; Ogre::RuntimeClass::getVersion
_TEXT	ENDS
PUBLIC	?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ; Ogre::RuntimeClass::newObject
; Function compile flags: /Odtp
;	COMDAT ?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ PROC ; Ogre::RuntimeClass::newObject, COMDAT
; _this$ = ecx

; 35   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 			return (*m_pNewFunc)();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx

; 37   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ENDP ; Ogre::RuntimeClass::newObject
_TEXT	ENDS
PUBLIC	??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::RuntimeClass::operator=
; Function compile flags: /Odtp
;	COMDAT ??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::RuntimeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::RuntimeClass::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::BaseObject::getRTTI
EXTRN	?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::BaseObject::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::BaseObject::getRTTI, COMDAT
; _this$ = ecx

; 56   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 			return &m_RTTI;

	mov	eax, OFFSET ?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B ; Ogre::BaseObject::m_RTTI

; 58   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::BaseObject::getRTTI
_TEXT	ENDS
PUBLIC	?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ; Ogre::BaseObject::isExactKindOf
; Function compile flags: /Odtp
;	COMDAT ?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_prtti$ = 8						; size = 4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z PROC ; Ogre::BaseObject::isExactKindOf, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			return (getRTTI() == prtti);

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	xor	ecx, ecx
	cmp	eax, DWORD PTR _prtti$[ebp]
	sete	cl
	mov	al, cl

; 63   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ENDP ; Ogre::BaseObject::isExactKindOf
_TEXT	ENDS
PUBLIC	?release@BaseObject@Ogre@@UAEXXZ		; Ogre::BaseObject::release
; Function compile flags: /Odtp
;	COMDAT ?release@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?release@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::release, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			m_RefCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 70   : 			if(m_RefCount <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN2@release

; 71   : 			{
; 72   : 				deleteThis();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
$LN2@release:

; 73   : 			}
; 74   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?release@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::release
_TEXT	ENDS
PUBLIC	?addRef@BaseObject@Ogre@@UAEXXZ			; Ogre::BaseObject::addRef
; Function compile flags: /Odtp
;	COMDAT ?addRef@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?addRef@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::addRef, COMDAT
; _this$ = ecx

; 77   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 			m_RefCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 79   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?addRef@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::addRef
_TEXT	ENDS
PUBLIC	?getRefCount@BaseObject@Ogre@@UAEHXZ		; Ogre::BaseObject::getRefCount
; Function compile flags: /Odtp
;	COMDAT ?getRefCount@BaseObject@Ogre@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRefCount@BaseObject@Ogre@@UAEHXZ PROC		; Ogre::BaseObject::getRefCount, COMDAT
; _this$ = ecx

; 82   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 			return m_RefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 84   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRefCount@BaseObject@Ogre@@UAEHXZ ENDP		; Ogre::BaseObject::getRefCount
_TEXT	ENDS
PUBLIC	?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::BaseObject::_serialize
; Function compile flags: /Odtp
;	COMDAT ?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z PROC	; Ogre::BaseObject::_serialize, COMDAT
; _this$ = ecx

; 87   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ENDP	; Ogre::BaseObject::_serialize
_TEXT	ENDS
PUBLIC	??_7BaseObject@Ogre@@6B@			; Ogre::BaseObject::`vftable'
PUBLIC	??0BaseObject@Ogre@@IAE@XZ			; Ogre::BaseObject::BaseObject
PUBLIC	??_R4BaseObject@Ogre@@6B@			; Ogre::BaseObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBaseObject@Ogre@@@8			; Ogre::BaseObject `RTTI Type Descriptor'
PUBLIC	??_R3BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BaseObject@Ogre@@8		; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVMemoryDelegation@Ogre@@@8		; Ogre::MemoryDelegation `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`vector deleting destructor'
PUBLIC	?deleteThis@BaseObject@Ogre@@MAEXXZ		; Ogre::BaseObject::deleteThis
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDelegation@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDelegation@Ogre@@8 DD 00H			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDelegation@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDelegation@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDelegation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDelegation@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R13?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BaseObject@Ogre@@8 DD FLAT:??_R0?AVBaseObject@Ogre@@@8 ; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R2BaseObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8 ; Ogre::BaseObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R3BaseObject@Ogre@@8 DD 00H				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBaseObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVBaseObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::BaseObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBaseObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BaseObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4BaseObject@Ogre@@6B@ DD 00H			; Ogre::BaseObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBaseObject@Ogre@@@8
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7BaseObject@Ogre@@6B@
CONST	SEGMENT
??_7BaseObject@Ogre@@6B@ DD FLAT:??_R4BaseObject@Ogre@@6B@ ; Ogre::BaseObject::`vftable'
	DD	FLAT:?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EBaseObject@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0BaseObject@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BaseObject@Ogre@@IAE@XZ PROC				; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx

; 92   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 1

; 93   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BaseObject@Ogre@@IAE@XZ ENDP				; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??1BaseObject@Ogre@@MAE@XZ			; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
;	COMDAT ??1BaseObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BaseObject@Ogre@@MAE@XZ PROC				; Ogre::BaseObject::~BaseObject, COMDAT
; _this$ = ecx

; 96   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1BaseObject@Ogre@@MAE@XZ ENDP				; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deleteThis@BaseObject@Ogre@@MAEXXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T72966 = -8						; size = 4
$T72965 = -4						; size = 4
?deleteThis@BaseObject@Ogre@@MAEXXZ PROC		; Ogre::BaseObject::deleteThis, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 			delete this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72966[ebp], eax
	mov	ecx, DWORD PTR $T72966[ebp]
	mov	DWORD PTR $T72965[ebp], ecx
	cmp	DWORD PTR $T72965[ebp], 0
	je	SHORT $LN3@deleteThis
	push	1
	mov	edx, DWORD PTR $T72965[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T72965[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN1@deleteThis
$LN3@deleteThis:
	mov	DWORD PTR tv70[ebp], 0
$LN1@deleteThis:

; 102  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?deleteThis@BaseObject@Ogre@@MAEXXZ ENDP		; Ogre::BaseObject::deleteThis
_TEXT	ENDS
PUBLIC	??0BaseObject@Ogre@@QAE@ABV01@@Z		; Ogre::BaseObject::BaseObject
; Function compile flags: /Odtp
;	COMDAT ??0BaseObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0BaseObject@Ogre@@QAE@ABV01@@Z PROC			; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@BaseObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@BaseObject
$LN3@BaseObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@BaseObject:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BaseObject@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BaseObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BaseObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BaseObject::operator=
_TEXT	ENDS
PUBLIC	??_GBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`scalar deleting destructor'
EXTRN	??3MemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VMemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_EBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1BaseObject@Ogre@@MAE@XZ	; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7DataStream@Ogre@@6B@			; Ogre::DataStream::`vftable'
PUBLIC	??0DataStream@Ogre@@QAE@XZ			; Ogre::DataStream::DataStream
PUBLIC	??_R4DataStream@Ogre@@6B@			; Ogre::DataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStream@Ogre@@@8			; Ogre::DataStream `RTTI Type Descriptor'
PUBLIC	??_R3DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStream@Ogre@@8		; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`vector deleting destructor'
PUBLIC	?size@DataStream@Ogre@@UBEIXZ			; Ogre::DataStream::size
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__purecall:PROC
EXTRN	?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::readLine
EXTRN	?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; Ogre::DataStream::getLine
EXTRN	?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; Ogre::DataStream::getAsString
EXTRN	?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::skipLine
;	COMDAT ??_R1A@?0A@EA@DataStream@Ogre@@8
; File i:\svnroot\client\ogremain\ogredatastream.h
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStream@Ogre@@8 DD FLAT:??_R0?AVDataStream@Ogre@@@8 ; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStream@Ogre@@8
rdata$r	SEGMENT
??_R2DataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8 ; Ogre::DataStream::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStream@Ogre@@8
rdata$r	SEGMENT
??_R3DataStream@Ogre@@8 DD 00H				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::DataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStream@Ogre@@6B@ DD 00H			; Ogre::DataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStream@Ogre@@@8
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStream@Ogre@@6B@
CONST	SEGMENT
??_7DataStream@Ogre@@6B@ DD FLAT:??_R4DataStream@Ogre@@6B@ ; Ogre::DataStream::`vftable'
	DD	FLAT:??_EDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0DataStream@Ogre@@QAE@XZ PROC				; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 68   : 		DataStream() : mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@XZ ENDP				; Ogre::DataStream::DataStream
PUBLIC	??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Ogre::DataStream::DataStream
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 70   : 		DataStream(const String& name) : mName(name), mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Ogre::DataStream::DataStream
PUBLIC	?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Ogre::DataStream::getName
; Function compile flags: /Odtp
;	COMDAT ?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Ogre::DataStream::getName, COMDAT
; _this$ = ecx

; 72   : 		const String& getName(void) { return mName; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Ogre::DataStream::getName
_TEXT	ENDS
PUBLIC	??1DataStream@Ogre@@UAE@XZ			; Ogre::DataStream::~DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1DataStream@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0
__ehfuncinfo$??1DataStream@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1DataStream@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1DataStream@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DataStream@Ogre@@UAE@XZ PROC				; Ogre::DataStream::~DataStream, COMDAT
; _this$ = ecx

; 73   : 		virtual ~DataStream() {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1DataStream@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1DataStream@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1DataStream@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1DataStream@Ogre@@UAE@XZ ENDP				; Ogre::DataStream::~DataStream
; Function compile flags: /Odtp
;	COMDAT ?size@DataStream@Ogre@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@DataStream@Ogre@@UBEIXZ PROC			; Ogre::DataStream::size, COMDAT
; _this$ = ecx

; 157  : 		virtual size_t size(void) const { return mSize; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?size@DataStream@Ogre@@UBEIXZ ENDP			; Ogre::DataStream::size
_TEXT	ENDS
PUBLIC	??0DataStream@Ogre@@QAE@ABV01@@Z		; Ogre::DataStream::DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV01@@Z PROC			; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::DataStream::DataStream
PUBLIC	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::DataStream::operator=
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::DataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::DataStream::operator=
_TEXT	ENDS
PUBLIC	??_GDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`scalar deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp
;	COMDAT ??_EDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1DataStream@Ogre@@UAE@XZ	; Ogre::DataStream::~DataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	36					; 00000024H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@2
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ		; Ogre::MemoryDataStream::getPtr
; Function compile flags: /Odtp
;	COMDAT ?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC		; Ogre::MemoryDataStream::getPtr, COMDAT
; _this$ = ecx

; 267  : 		uchar* getPtr(void) { return mData; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP		; Ogre::MemoryDataStream::getPtr
_TEXT	ENDS
PUBLIC	?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ	; Ogre::MemoryDataStream::getCurrentPtr
; Function compile flags: /Odtp
;	COMDAT ?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC	; Ogre::MemoryDataStream::getCurrentPtr, COMDAT
; _this$ = ecx

; 270  : 		uchar* getCurrentPtr(void) { return mPos; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP	; Ogre::MemoryDataStream::getCurrentPtr
_TEXT	ENDS
PUBLIC	?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ	; Ogre::MemoryDataStream::getMemoryImage
; Function compile flags: /Odtp
;	COMDAT ?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ PROC	; Ogre::MemoryDataStream::getMemoryImage, COMDAT
; _this$ = ecx

; 307  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 			return mData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]

; 309  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ ENDP	; Ogre::MemoryDataStream::getMemoryImage
_TEXT	ENDS
PUBLIC	?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ; Ogre::MemoryDataStream::setFreeOnClose
; Function compile flags: /Odtp
;	COMDAT ?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_freeOnClose$ = 8					; size = 4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z PROC ; Ogre::MemoryDataStream::setFreeOnClose, COMDAT
; _this$ = ecx

; 313  : 		void setFreeOnClose(void (*freeOnClose)(void *)) { mFreeOnClose = freeOnClose; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _freeOnClose$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ENDP ; Ogre::MemoryDataStream::setFreeOnClose
_TEXT	ENDS
PUBLIC	??_7MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`vftable'
PUBLIC	??0MemoryDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??_R4MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMemoryDataStream@Ogre@@@8		; Ogre::MemoryDataStream `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDataStream@Ogre@@8		; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`vector deleting destructor'
EXTRN	?read@MemoryDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::MemoryDataStream::read
EXTRN	?write@MemoryDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::MemoryDataStream::write
EXTRN	?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::readLine
EXTRN	?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::skipLine
EXTRN	?skip@MemoryDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::MemoryDataStream::skip
EXTRN	?seek@MemoryDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::MemoryDataStream::seek
EXTRN	?tell@MemoryDataStream@Ogre@@UBEIXZ:PROC	; Ogre::MemoryDataStream::tell
EXTRN	?eof@MemoryDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::MemoryDataStream::eof
EXTRN	?close@MemoryDataStream@Ogre@@UAEXXZ:PROC	; Ogre::MemoryDataStream::close
;	COMDAT ??_R1A@?0A@EA@MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 DD FLAT:??_R0?AVMemoryDataStream@Ogre@@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDataStream@Ogre@@8 DD 00H			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MemoryDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4MemoryDataStream@Ogre@@6B@ DD 00H			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMemoryDataStream@Ogre@@@8
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7MemoryDataStream@Ogre@@6B@
CONST	SEGMENT
??_7MemoryDataStream@Ogre@@6B@ DD FLAT:??_R4MemoryDataStream@Ogre@@6B@ ; Ogre::MemoryDataStream::`vftable'
	DD	FLAT:??_EMemoryDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@MemoryDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@MemoryDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@MemoryDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@MemoryDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@MemoryDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@MemoryDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@MemoryDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::MemoryDataStream::MemoryDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7MemoryDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+44], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+48], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+44], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+48], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`scalar deleting destructor'
EXTRN	??1MemoryDataStream@Ogre@@UAE@XZ:PROC		; Ogre::MemoryDataStream::~MemoryDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@3
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`vftable'
PUBLIC	??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??_R4FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileStreamDataStream@Ogre@@@8		; Ogre::FileStreamDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8	; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`vector deleting destructor'
EXTRN	?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileStreamDataStream::read
EXTRN	?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileStreamDataStream::write
EXTRN	?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::FileStreamDataStream::readLine
EXTRN	?skip@FileStreamDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileStreamDataStream::skip
EXTRN	?seek@FileStreamDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileStreamDataStream::seek
EXTRN	?tell@FileStreamDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileStreamDataStream::tell
EXTRN	?eof@FileStreamDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileStreamDataStream::eof
EXTRN	?close@FileStreamDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileStreamDataStream::close
EXTRN	?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileStreamDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 DD FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileStreamDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileStreamDataStream@Ogre@@8 DD 00H		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileStreamDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileStreamDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileStreamDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileStreamDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileStreamDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileStreamDataStream@Ogre@@6B@ DD 00H		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileStreamDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileStreamDataStream@Ogre@@6B@ DD FLAT:??_R4FileStreamDataStream@Ogre@@6B@ ; Ogre::FileStreamDataStream::`vftable'
	DD	FLAT:??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileStreamDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileStreamDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileStreamDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileStreamDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileStreamDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileStreamDataStream::FileStreamDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileStreamDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+40]
	mov	BYTE PTR [edx+40], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileStreamDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileStreamDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+40]
	mov	BYTE PTR [ecx+40], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileStreamDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`scalar deleting destructor'
EXTRN	??1FileStreamDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileStreamDataStream::~FileStreamDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@4
	push	OFFSET ??1FileStreamDataStream@Ogre@@UAE@XZ ; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@4
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@4
$LN3@vector@4:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@4:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`vftable'
PUBLIC	??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??_R4FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileHandleDataStream@Ogre@@@8		; Ogre::FileHandleDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8	; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`vector deleting destructor'
EXTRN	?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileHandleDataStream::read
EXTRN	?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileHandleDataStream::write
EXTRN	?skip@FileHandleDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileHandleDataStream::skip
EXTRN	?seek@FileHandleDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileHandleDataStream::seek
EXTRN	?tell@FileHandleDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileHandleDataStream::tell
EXTRN	?eof@FileHandleDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileHandleDataStream::eof
EXTRN	?close@FileHandleDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileHandleDataStream::close
EXTRN	?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileHandleDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 DD FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileHandleDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileHandleDataStream@Ogre@@8 DD 00H		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileHandleDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileHandleDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileHandleDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileHandleDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileHandleDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileHandleDataStream@Ogre@@6B@ DD 00H		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileHandleDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileHandleDataStream@Ogre@@6B@ DD FLAT:??_R4FileHandleDataStream@Ogre@@6B@ ; Ogre::FileHandleDataStream::`vftable'
	DD	FLAT:??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileHandleDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileHandleDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileHandleDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileHandleDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileHandleDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileHandleDataStream::FileHandleDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileHandleDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileHandleDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileHandleDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileHandleDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`scalar deleting destructor'
EXTRN	??1FileHandleDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileHandleDataStream::~FileHandleDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@5
	push	OFFSET ??1FileHandleDataStream@Ogre@@UAE@XZ ; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@5
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@5
$LN3@vector@5:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@5:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`vftable'
PUBLIC	??1DataStreamObject@Ogre@@MAE@XZ		; Ogre::DataStreamObject::~DataStreamObject
PUBLIC	??_R4DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStreamObject@Ogre@@@8		; Ogre::DataStreamObject `RTTI Type Descriptor'
PUBLIC	??_R3DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStreamObject@Ogre@@8		; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStreamObject@Ogre@@8 DD FLAT:??_R0?AVDataStreamObject@Ogre@@@8 ; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R2DataStreamObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStreamObject@Ogre@@8 ; Ogre::DataStreamObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R3DataStreamObject@Ogre@@8 DD 00H			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStreamObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStreamObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::DataStreamObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStreamObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStreamObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStreamObject@Ogre@@6B@ DD 00H			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStreamObject@Ogre@@@8
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStreamObject@Ogre@@6B@
CONST	SEGMENT
??_7DataStreamObject@Ogre@@6B@ DD FLAT:??_R4DataStreamObject@Ogre@@6B@ ; Ogre::DataStreamObject::`vftable'
	DD	FLAT:??_EDataStreamObject@Ogre@@MAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??1DataStreamObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DataStreamObject@Ogre@@MAE@XZ PROC			; Ogre::DataStreamObject::~DataStreamObject, COMDAT
; _this$ = ecx

; 445  : 		virtual ~DataStreamObject(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1DataStreamObject@Ogre@@MAE@XZ ENDP			; Ogre::DataStreamObject::~DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@XZ		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DataStreamObject@Ogre@@QAE@XZ PROC			; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DataStreamObject@Ogre@@QAE@XZ ENDP			; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@ABV01@@Z		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z PROC		; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::DataStreamObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::DataStreamObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::DataStreamObject::operator=
_TEXT	ENDS
PUBLIC	??_GDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@6
	push	OFFSET ??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@6
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@6
$LN3@vector@6:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@6:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`vftable'
PUBLIC	??0ObjectDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??_R4ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVObjectDataStream@Ogre@@@8		; Ogre::ObjectDataStream `RTTI Type Descriptor'
PUBLIC	??_R3ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ObjectDataStream@Ogre@@8		; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`vector deleting destructor'
EXTRN	?read@ObjectDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::ObjectDataStream::read
EXTRN	?write@ObjectDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::ObjectDataStream::write
EXTRN	?skip@ObjectDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::ObjectDataStream::skip
EXTRN	?seek@ObjectDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::ObjectDataStream::seek
EXTRN	?tell@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::tell
EXTRN	?eof@ObjectDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::ObjectDataStream::eof
EXTRN	?size@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::size
EXTRN	?close@ObjectDataStream@Ogre@@UAEXXZ:PROC	; Ogre::ObjectDataStream::close
EXTRN	?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::ObjectDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 DD FLAT:??_R0?AVObjectDataStream@Ogre@@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2ObjectDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3ObjectDataStream@Ogre@@8 DD 00H			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVObjectDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVObjectDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::ObjectDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVObjectDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ObjectDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4ObjectDataStream@Ogre@@6B@ DD 00H			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVObjectDataStream@Ogre@@@8
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7ObjectDataStream@Ogre@@6B@
CONST	SEGMENT
??_7ObjectDataStream@Ogre@@6B@ DD FLAT:??_R4ObjectDataStream@Ogre@@6B@ ; Ogre::ObjectDataStream::`vftable'
	DD	FLAT:??_EObjectDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@ObjectDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@ObjectDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@ObjectDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@ObjectDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@ObjectDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@ObjectDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::ObjectDataStream::ObjectDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ObjectDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::ObjectDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::ObjectDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::ObjectDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`scalar deleting destructor'
EXTRN	??1ObjectDataStream@Ogre@@UAE@XZ:PROC		; Ogre::ObjectDataStream::~ObjectDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@7
	push	OFFSET ??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@7
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@7
$LN3@vector@7:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@7:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Archive@Ogre@@6B@				; Ogre::Archive::`vftable'
PUBLIC	??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z	; Ogre::Archive::Archive
PUBLIC	??_R4Archive@Ogre@@6B@				; Ogre::Archive::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVArchive@Ogre@@@8			; Ogre::Archive `RTTI Type Descriptor'
PUBLIC	??_R3Archive@Ogre@@8				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Archive@Ogre@@8				; Ogre::Archive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Archive@Ogre@@8			; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Archive@Ogre@@8
; File i:\svnroot\client\ogremain\ogrearchive.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Archive@Ogre@@8 DD FLAT:??_R0?AVArchive@Ogre@@@8 ; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Archive@Ogre@@8
rdata$r	SEGMENT
??_R2Archive@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Archive@Ogre@@8 ; Ogre::Archive::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Archive@Ogre@@8
rdata$r	SEGMENT
??_R3Archive@Ogre@@8 DD 00H				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVArchive@Ogre@@@8
_DATA	SEGMENT
??_R0?AVArchive@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Archive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArchive@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Archive@Ogre@@6B@
rdata$r	SEGMENT
??_R4Archive@Ogre@@6B@ DD 00H				; Ogre::Archive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArchive@Ogre@@@8
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Archive@Ogre@@6B@
CONST	SEGMENT
??_7Archive@Ogre@@6B@ DD FLAT:??_R4Archive@Ogre@@6B@	; Ogre::Archive::`vftable'
	DD	FLAT:??_EArchive@Ogre@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstream$ = 8						; size = 4
_mode$ = 12						; size = 4
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z PROC		; Ogre::Archive::Archive, COMDAT
; _this$ = ecx

; 22   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pstream$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 23   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z ENDP		; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??1Archive@Ogre@@UAE@XZ				; Ogre::Archive::~Archive
; Function compile flags: /Odtp
;	COMDAT ??1Archive@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Archive@Ogre@@UAE@XZ PROC				; Ogre::Archive::~Archive, COMDAT
; _this$ = ecx

; 26   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1Archive@Ogre@@UAE@XZ ENDP				; Ogre::Archive::~Archive
_TEXT	ENDS
PUBLIC	?isLoading@Archive@Ogre@@QAE_NXZ		; Ogre::Archive::isLoading
; Function compile flags: /Odtp
;	COMDAT ?isLoading@Archive@Ogre@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isLoading@Archive@Ogre@@QAE_NXZ PROC			; Ogre::Archive::isLoading, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Mode==MODE_LOAD;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+8], 1
	sete	cl
	mov	al, cl

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?isLoading@Archive@Ogre@@QAE_NXZ ENDP			; Ogre::Archive::isLoading
_TEXT	ENDS
PUBLIC	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z	; Ogre::Archive::serialize
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAD@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAD@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 108  : 		SERIALIZE_PRIMITIVE_FUNC(char)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAD@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAF@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAF@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 109  : 		SERIALIZE_PRIMITIVE_FUNC(short)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAF@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAH@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAH@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 110  : 		SERIALIZE_PRIMITIVE_FUNC(int)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAH@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_J@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_J@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 111  : 		SERIALIZE_PRIMITIVE_FUNC(int64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_J@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAE@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAE@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 112  : 		SERIALIZE_PRIMITIVE_FUNC(uchar)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAE@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAG@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAG@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 113  : 		SERIALIZE_PRIMITIVE_FUNC(ushort)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAG@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAI@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAI@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 114  : 		SERIALIZE_PRIMITIVE_FUNC(uint)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAI@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_K@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_K@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 115  : 		SERIALIZE_PRIMITIVE_FUNC(uint64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_K@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_N@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_N@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 116  : 		SERIALIZE_PRIMITIVE_FUNC(bool)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_N@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAM@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAM@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 117  : 		SERIALIZE_PRIMITIVE_FUNC(float)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAM@Z ENDP			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z PROC		; Ogre::Archive::serialize, COMDAT
; _this$ = ecx

; 155  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 			if(isLoading()) m_pStream->read(pbuf, len);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@serialize
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	jmp	SHORT $LN1@serialize
$LN2@serialize:

; 157  : 			else m_pStream->write(pbuf, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN1@serialize:

; 158  : 
; 159  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 160  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ENDP		; Ogre::Archive::serialize
_TEXT	ENDS
PUBLIC	?read@Archive@Ogre@@QAEXPAXI@Z			; Ogre::Archive::read
; Function compile flags: /Odtp
;	COMDAT ?read@Archive@Ogre@@QAEXPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?read@Archive@Ogre@@QAEXPAXI@Z PROC			; Ogre::Archive::read, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			m_pStream->read(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 165  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?read@Archive@Ogre@@QAEXPAXI@Z ENDP			; Ogre::Archive::read
_TEXT	ENDS
PUBLIC	?write@Archive@Ogre@@QAEXPBXI@Z			; Ogre::Archive::write
; Function compile flags: /Odtp
;	COMDAT ?write@Archive@Ogre@@QAEXPBXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?write@Archive@Ogre@@QAEXPBXI@Z PROC			; Ogre::Archive::write, COMDAT
; _this$ = ecx

; 168  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 			m_pStream->write(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 170  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?write@Archive@Ogre@@QAEXPBXI@Z ENDP			; Ogre::Archive::write
_TEXT	ENDS
PUBLIC	??0Archive@Ogre@@QAE@ABV01@@Z			; Ogre::Archive::Archive
; Function compile flags: /Odtp
;	COMDAT ??0Archive@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Archive@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Archive::Archive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Archive@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??4Archive@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Archive::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Archive@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Archive::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Archive::operator=
_TEXT	ENDS
PUBLIC	??_GArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@8
	push	OFFSET ??1Archive@Ogre@@UAE@XZ		; Ogre::Archive::~Archive
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@8
$LN3@vector@8:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@8:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@XZ				; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ??0Vector3@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector3@Ogre@@QAE@XZ PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 49   : 		Vector3(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@Ogre@@QAE@XZ ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@ABV01@@Z			; Ogre::Vector3::Vector3
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0Vector3@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 50   : 		Vector3(const Vector3 &rhs)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		{
; 52   : 			x = rhs.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 53   : 			y = rhs.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 54   : 			z = rhs.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 55   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@MMM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
??0Vector3@Ogre@@QAE@MMM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 56   : 		Vector3( float x1, float y1, float z1 ) : x(x1), y(y1), z(z1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector3@Ogre@@QAE@MMM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@M@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@M@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 57   : 		Vector3(float v) : x(v), y(v), z(v){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@M@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@PAM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@PAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@PAM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 58   : 		Vector3(float* v) : x(v[0]), y(v[1]), z(v[2]){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@PAM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??4Vector3@Ogre@@QAEABV01@ABV01@@Z		; Ogre::Vector3::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Vector3@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z PROC			; Ogre::Vector3::operator=, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			x = vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 63   : 			y = vec.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 64   : 			z = vec.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 65   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 66   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z ENDP			; Ogre::Vector3::operator=
_TEXT	ENDS
PUBLIC	??YVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??YVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator+=, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			x += vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 70   : 			y += vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 71   : 			z += vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 72   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator+=
_TEXT	ENDS
PUBLIC	??ZVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??ZVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator-=, COMDAT
; _this$ = ecx

; 74   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 			x -= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 76   : 			y -= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 77   : 			z -= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 78   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator-=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XVector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 81   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 			x *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 83   : 			y *= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 84   : 			z *= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 85   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??XVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 88   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 			x *= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 90   : 			y *= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 91   : 			z *= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 92   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??_0Vector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator/=
; Function compile flags: /Odtp
;	COMDAT ??_0Vector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??_0Vector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator/=, COMDAT
; _this$ = ecx

; 95   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 			x /= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 97   : 			y /= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fdiv	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 98   : 			z /= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fdiv	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 99   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??_0Vector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator/=
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QAEPAMXZ			; Ogre::Vector3::operator float *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QAEPAMXZ PROC				; Ogre::Vector3::operator float *, COMDAT
; _this$ = ecx

; 101  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 103  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QAEPAMXZ ENDP				; Ogre::Vector3::operator float *
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QBEPBMXZ			; Ogre::Vector3::operator float const *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QBEPBMXZ PROC				; Ogre::Vector3::operator float const *, COMDAT
; _this$ = ecx

; 105  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 107  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QBEPBMXZ ENDP				; Ogre::Vector3::operator float const *
_TEXT	ENDS
PUBLIC	??HVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator+
; Function compile flags: /Odtp
;	COMDAT ??HVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??HVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator+, COMDAT
; _this$ = ecx

; 109  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??HVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator+
_TEXT	ENDS
PUBLIC	??GVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator-
; Function compile flags: /Odtp
;	COMDAT ??GVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??GVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator-, COMDAT
; _this$ = ecx

; 113  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 			return Vector3(-x, -y, -z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 115  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??GVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator-
_TEXT	ENDS
PUBLIC	??8Vector3@Ogre@@QBE_NABV01@@Z			; Ogre::Vector3::operator==
; Function compile flags: /Odtp
;	COMDAT ??8Vector3@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??8Vector3@Ogre@@QBE_NABV01@@Z PROC			; Ogre::Vector3::operator==, COMDAT
; _this$ = ecx

; 117  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 			return (x==vec.x && y==vec.y && z==vec.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv77[ebp]

; 119  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector3@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::Vector3::operator==
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXMMM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
?setElement@Vector3@Ogre@@QAEXMMM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			x = x1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]

; 123  : 			y = y1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]

; 124  : 			z = z1;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]

; 125  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setElement@Vector3@Ogre@@QAEXMMM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXPAM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXPAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?setElement@Vector3@Ogre@@QAEXPAM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 127  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 			x = p[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 129  : 			y = p[1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 130  : 			z = p[2];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 131  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setElement@Vector3@Ogre@@QAEXPAM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?Sqrt@Ogre@@YAMM@Z				; Ogre::Sqrt
PUBLIC	?length@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::length
; Function compile flags: /Odtp
;	COMDAT ?length@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?length@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::length, COMDAT
; _this$ = ecx

; 133  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 			return (float)Sqrt(x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@Ogre@@YAMM@Z			; Ogre::Sqrt
	add	esp, 4

; 135  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::length
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
;	COMDAT ?Sqrt@Ogre@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Sqrt@Ogre@@YAMM@Z PROC					; Ogre::Sqrt, COMDAT

; 59   : 	{

	push	ebp
	mov	ebp, esp

; 60   : 		return (float)sqrt(x);

	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 61   : 	}

	pop	ebp
	ret	0
?Sqrt@Ogre@@YAMM@Z ENDP					; Ogre::Sqrt
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?lengthSqr@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::lengthSqr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ?lengthSqr@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?lengthSqr@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::lengthSqr, COMDAT
; _this$ = ecx

; 137  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 			return (x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]

; 139  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?lengthSqr@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::lengthSqr
_TEXT	ENDS
PUBLIC	??0WorldPos@Ogre@@QAE@XZ			; Ogre::WorldPos::WorldPos
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreworldpos.h
;	COMDAT ??0WorldPos@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0WorldPos@Ogre@@QAE@XZ PROC				; Ogre::WorldPos::WorldPos, COMDAT
; _this$ = ecx

; 18   : 		WorldPos()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 19   : 		{
; 20   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0WorldPos@Ogre@@QAE@XZ ENDP				; Ogre::WorldPos::WorldPos
_TEXT	ENDS
PUBLIC	??0WorldPos@Ogre@@QAE@HHH@Z			; Ogre::WorldPos::WorldPos
; Function compile flags: /Odtp
;	COMDAT ??0WorldPos@Ogre@@QAE@HHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0WorldPos@Ogre@@QAE@HHH@Z PROC			; Ogre::WorldPos::WorldPos, COMDAT
; _this$ = ecx

; 23   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __x$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __y$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __z$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 24   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0WorldPos@Ogre@@QAE@HHH@Z ENDP			; Ogre::WorldPos::WorldPos
_TEXT	ENDS
PUBLIC	__real@4024000000000000
PUBLIC	??0WorldPos@Ogre@@QAE@ABVVector3@1@@Z		; Ogre::WorldPos::WorldPos
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0WorldPos@Ogre@@QAE@ABVVector3@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??0WorldPos@Ogre@@QAE@ABVVector3@1@@Z PROC		; Ogre::WorldPos::WorldPos, COMDAT
; _this$ = ecx

; 26   : 		WorldPos( const Vector3 &vec )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 27   : 		{
; 28   : 			x = (WPOS_T)(vec.x * UNIT);

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 29   : 			y = (WPOS_T)(vec.y * UNIT);

	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 30   : 			z = (WPOS_T)(vec.z * UNIT);

	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 31   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0WorldPos@Ogre@@QAE@ABVVector3@1@@Z ENDP		; Ogre::WorldPos::WorldPos
_TEXT	ENDS
PUBLIC	??4WorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z	; Ogre::WorldPos::operator=
; Function compile flags: /Odtp
;	COMDAT ??4WorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??4WorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z PROC		; Ogre::WorldPos::operator=, COMDAT
; _this$ = ecx

; 34   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 			x = (WPOS_T)(vec.x * UNIT);

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 36   : 			y = (WPOS_T)(vec.y * UNIT);

	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 37   : 			z = (WPOS_T)(vec.z * UNIT);

	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 38   : 
; 39   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 40   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4WorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z ENDP		; Ogre::WorldPos::operator=
_TEXT	ENDS
PUBLIC	??YWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z	; Ogre::WorldPos::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??YWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z PROC		; Ogre::WorldPos::operator+=, COMDAT
; _this$ = ecx

; 43   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 			x += (WPOS_T)(vec.x * UNIT);

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 45   : 			y += (WPOS_T)(vec.y * UNIT);

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 46   : 			z += (WPOS_T)(vec.z * UNIT);

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 47   : 
; 48   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 49   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z ENDP		; Ogre::WorldPos::operator+=
_TEXT	ENDS
PUBLIC	??YWorldPos@Ogre@@QAEABV01@ABV01@@Z		; Ogre::WorldPos::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YWorldPos@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
??YWorldPos@Ogre@@QAEABV01@ABV01@@Z PROC		; Ogre::WorldPos::operator+=, COMDAT
; _this$ = ecx

; 52   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 			x += pos.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 54   : 			y += pos.y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			z += pos.z;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 56   : 
; 57   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 58   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YWorldPos@Ogre@@QAEABV01@ABV01@@Z ENDP		; Ogre::WorldPos::operator+=
_TEXT	ENDS
PUBLIC	??ZWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z	; Ogre::WorldPos::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??ZWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z PROC		; Ogre::WorldPos::operator-=, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			x -= (WPOS_T)(vec.x * UNIT);

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 63   : 			y -= (WPOS_T)(vec.y * UNIT);

	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 64   : 			z -= (WPOS_T)(vec.z * UNIT);

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 65   : 
; 66   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 67   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z ENDP		; Ogre::WorldPos::operator-=
_TEXT	ENDS
PUBLIC	??ZWorldPos@Ogre@@QAEABV01@ABV01@@Z		; Ogre::WorldPos::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZWorldPos@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
??ZWorldPos@Ogre@@QAEABV01@ABV01@@Z PROC		; Ogre::WorldPos::operator-=, COMDAT
; _this$ = ecx

; 70   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 			x -= pos.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 72   : 			y -= pos.y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 73   : 			z -= pos.z;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 74   : 
; 75   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 76   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZWorldPos@Ogre@@QAEABV01@ABV01@@Z ENDP		; Ogre::WorldPos::operator-=
_TEXT	ENDS
PUBLIC	??HWorldPos@Ogre@@QBE?AV01@ABV01@@Z		; Ogre::WorldPos::operator+
; Function compile flags: /Odtp
;	COMDAT ??HWorldPos@Ogre@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pos$ = 12						; size = 4
??HWorldPos@Ogre@@QBE?AV01@ABV01@@Z PROC		; Ogre::WorldPos::operator+, COMDAT
; _this$ = ecx

; 79   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 			return WorldPos(x+pos.x, y+pos.y, z+pos.z);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pos$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pos$[ebp]
	add	ecx, DWORD PTR [edx+4]
	push	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0WorldPos@Ogre@@QAE@HHH@Z		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??HWorldPos@Ogre@@QBE?AV01@ABV01@@Z ENDP		; Ogre::WorldPos::operator+
_TEXT	ENDS
PUBLIC	??GWorldPos@Ogre@@QBE?AV01@ABV01@@Z		; Ogre::WorldPos::operator-
; Function compile flags: /Odtp
;	COMDAT ??GWorldPos@Ogre@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pos$ = 12						; size = 4
??GWorldPos@Ogre@@QBE?AV01@ABV01@@Z PROC		; Ogre::WorldPos::operator-, COMDAT
; _this$ = ecx

; 84   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 			return WorldPos(x-pos.x, y-pos.y, z-pos.z);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0WorldPos@Ogre@@QAE@HHH@Z		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 86   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??GWorldPos@Ogre@@QBE?AV01@ABV01@@Z ENDP		; Ogre::WorldPos::operator-
_TEXT	ENDS
PUBLIC	??HWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z	; Ogre::WorldPos::operator+
; Function compile flags: /Odtp
;	COMDAT ??HWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pos$ = 12						; size = 4
??HWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z PROC		; Ogre::WorldPos::operator+, COMDAT
; _this$ = ecx

; 89   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 			return WorldPos(x+(WPOS_T)(pos.x*UNIT), y+(WPOS_T)(pos.y*UNIT), z+(WPOS_T)(pos.z*UNIT));

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0WorldPos@Ogre@@QAE@HHH@Z		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 91   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??HWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z ENDP		; Ogre::WorldPos::operator+
_TEXT	ENDS
PUBLIC	??GWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z	; Ogre::WorldPos::operator-
; Function compile flags: /Odtp
;	COMDAT ??GWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pos$ = 12						; size = 4
??GWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z PROC		; Ogre::WorldPos::operator-, COMDAT
; _this$ = ecx

; 94   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 			return WorldPos(x-(WPOS_T)(pos.x*UNIT), y-(WPOS_T)(pos.y*UNIT), z-(WPOS_T)(pos.z*UNIT));

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, eax
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0WorldPos@Ogre@@QAE@HHH@Z		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 96   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??GWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z ENDP		; Ogre::WorldPos::operator-
_TEXT	ENDS
PUBLIC	??DWorldPos@Ogre@@QBE?AV01@H@Z			; Ogre::WorldPos::operator*
; Function compile flags: /Odtp
;	COMDAT ??DWorldPos@Ogre@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
??DWorldPos@Ogre@@QBE?AV01@H@Z PROC			; Ogre::WorldPos::operator*, COMDAT
; _this$ = ecx

; 99   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 			return WorldPos((WPOS_T)(x*s), (WPOS_T)(y*s), (WPOS_T)(z*s));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0WorldPos@Ogre@@QAE@HHH@Z		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 101  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??DWorldPos@Ogre@@QBE?AV01@H@Z ENDP			; Ogre::WorldPos::operator*
_TEXT	ENDS
PUBLIC	??DWorldPos@Ogre@@QBE?AV01@M@Z			; Ogre::WorldPos::operator*
; Function compile flags: /Odtp
;	COMDAT ??DWorldPos@Ogre@@QBE?AV01@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
??DWorldPos@Ogre@@QBE?AV01@M@Z PROC			; Ogre::WorldPos::operator*, COMDAT
; _this$ = ecx

; 104  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 			return WorldPos((WPOS_T)(x*s), (WPOS_T)(y*s), (WPOS_T)(z*s));

	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax+8]
	fmul	DWORD PTR _s$[ebp]
	call	__ftol2_sse
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	fild	DWORD PTR [ecx+4]
	fmul	DWORD PTR _s$[ebp]
	call	__ftol2_sse
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	fild	DWORD PTR [edx]
	fmul	DWORD PTR _s$[ebp]
	call	__ftol2_sse
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0WorldPos@Ogre@@QAE@HHH@Z		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 106  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??DWorldPos@Ogre@@QBE?AV01@M@Z ENDP			; Ogre::WorldPos::operator*
_TEXT	ENDS
PUBLIC	??KWorldPos@Ogre@@QBE?AV01@H@Z			; Ogre::WorldPos::operator/
; Function compile flags: /Odtp
;	COMDAT ??KWorldPos@Ogre@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
??KWorldPos@Ogre@@QBE?AV01@H@Z PROC			; Ogre::WorldPos::operator/, COMDAT
; _this$ = ecx

; 109  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 			return WorldPos((WPOS_T)(x/s), (WPOS_T)(y/s), (WPOS_T)(z/s));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	cdq
	idiv	DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cdq
	idiv	DWORD PTR _s$[ebp]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cdq
	idiv	DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0WorldPos@Ogre@@QAE@HHH@Z		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??KWorldPos@Ogre@@QBE?AV01@H@Z ENDP			; Ogre::WorldPos::operator/
_TEXT	ENDS
PUBLIC	??8WorldPos@Ogre@@QBE_NABV01@@Z			; Ogre::WorldPos::operator==
; Function compile flags: /Odtp
;	COMDAT ??8WorldPos@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??8WorldPos@Ogre@@QBE_NABV01@@Z PROC			; Ogre::WorldPos::operator==, COMDAT
; _this$ = ecx

; 114  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 115  : 			return x==rhs.x && y==rhs.y && z==rhs.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN3@operator@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@operator@2
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN4@operator@2
$LN3@operator@2:
	mov	DWORD PTR tv71[ebp], 0
$LN4@operator@2:
	mov	al, BYTE PTR tv71[ebp]

; 116  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8WorldPos@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::WorldPos::operator==
_TEXT	ENDS
PUBLIC	??9WorldPos@Ogre@@QBE_NABV01@@Z			; Ogre::WorldPos::operator!=
; Function compile flags: /Odtp
;	COMDAT ??9WorldPos@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??9WorldPos@Ogre@@QBE_NABV01@@Z PROC			; Ogre::WorldPos::operator!=, COMDAT
; _this$ = ecx

; 119  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 			return x!=rhs.x || y!=rhs.y || z!=rhs.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator@3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN3@operator@3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@operator@3
	mov	DWORD PTR tv71[ebp], 0
	jmp	SHORT $LN4@operator@3
$LN3@operator@3:
	mov	DWORD PTR tv71[ebp], 1
$LN4@operator@3:
	mov	al, BYTE PTR tv71[ebp]

; 121  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9WorldPos@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::WorldPos::operator!=
_TEXT	ENDS
PUBLIC	?inverse@WorldPos@Ogre@@QAEXXZ			; Ogre::WorldPos::inverse
; Function compile flags: /Odtp
;	COMDAT ?inverse@WorldPos@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?inverse@WorldPos@Ogre@@QAEXXZ PROC			; Ogre::WorldPos::inverse, COMDAT
; _this$ = ecx

; 124  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 			x = -x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 126  : 			y = -y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	neg	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 127  : 			z = -z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	neg	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 128  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?inverse@WorldPos@Ogre@@QAEXXZ ENDP			; Ogre::WorldPos::inverse
_TEXT	ENDS
PUBLIC	?normalize@WorldPos@Ogre@@QBE?AVVector3@2@XZ	; Ogre::WorldPos::normalize
; Function compile flags: /Odtp
;	COMDAT ?normalize@WorldPos@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
tv133 = -48						; size = 4
tv131 = -44						; size = 4
tv129 = -40						; size = 4
_this$ = -36						; size = 4
_fy$ = -32						; size = 8
_fz$ = -24						; size = 8
_len$ = -16						; size = 8
_fx$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
?normalize@WorldPos@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::WorldPos::normalize, COMDAT
; _this$ = ecx

; 131  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 132  : 			double fx = double(x);

	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax]
	fstp	QWORD PTR _fx$[ebp]

; 133  : 			double fy = double(y);

	mov	ecx, DWORD PTR _this$[ebp]
	fild	DWORD PTR [ecx+4]
	fstp	QWORD PTR _fy$[ebp]

; 134  : 			double fz = double(z);

	mov	edx, DWORD PTR _this$[ebp]
	fild	DWORD PTR [edx+8]
	fstp	QWORD PTR _fz$[ebp]

; 135  : 			double len = sqrt( fx*fx + fy*fy + fz*fz );

	fld	QWORD PTR _fx$[ebp]
	fmul	QWORD PTR _fx$[ebp]
	fld	QWORD PTR _fy$[ebp]
	fmul	QWORD PTR _fy$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _fz$[ebp]
	fmul	QWORD PTR _fz$[ebp]
	faddp	ST(1), ST(0)
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR _len$[ebp]

; 136  : 
; 137  : 			return Vector3( float(fx/len), float(fy/len), float(fz/len) );

	fld	QWORD PTR _fz$[ebp]
	fdiv	QWORD PTR _len$[ebp]
	fstp	DWORD PTR tv129[ebp]
	fld	DWORD PTR tv129[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	QWORD PTR _fy$[ebp]
	fdiv	QWORD PTR _len$[ebp]
	fstp	DWORD PTR tv131[ebp]
	fld	DWORD PTR tv131[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	QWORD PTR _fx$[ebp]
	fdiv	QWORD PTR _len$[ebp]
	fstp	DWORD PTR tv133[ebp]
	fld	DWORD PTR tv133[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 138  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?normalize@WorldPos@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::WorldPos::normalize
_TEXT	ENDS
PUBLIC	?subtract@WorldPos@Ogre@@QBE?AVVector3@2@ABV12@@Z ; Ogre::WorldPos::subtract
PUBLIC	?toVector3@WorldPos@Ogre@@QBE?AVVector3@2@XZ	; Ogre::WorldPos::toVector3
EXTRN	?m_Origin@WorldPos@Ogre@@2V12@A:BYTE		; Ogre::WorldPos::m_Origin
; Function compile flags: /Odtp
;	COMDAT ?toVector3@WorldPos@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?toVector3@WorldPos@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::WorldPos::toVector3, COMDAT
; _this$ = ecx

; 141  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 142  : 			return subtract(m_Origin);

	push	OFFSET ?m_Origin@WorldPos@Ogre@@2V12@A	; Ogre::WorldPos::m_Origin
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?subtract@WorldPos@Ogre@@QBE?AVVector3@2@ABV12@@Z ; Ogre::WorldPos::subtract
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 143  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?toVector3@WorldPos@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::WorldPos::toVector3
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?subtract@WorldPos@Ogre@@QBE?AVVector3@2@ABV12@@Z
_TEXT	SEGMENT
tv130 = -28						; size = 4
tv129 = -24						; size = 4
tv93 = -20						; size = 4
tv92 = -16						; size = 4
tv88 = -12						; size = 4
tv87 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pos$ = 12						; size = 4
?subtract@WorldPos@Ogre@@QBE?AVVector3@2@ABV12@@Z PROC	; Ogre::WorldPos::subtract, COMDAT
; _this$ = ecx

; 146  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 			return Vector3( float(double(x-pos.x)/UNIT), float(double(y-pos.y)/UNIT), float(double(z-pos.z)/UNIT) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv87[ebp], edx
	fild	DWORD PTR tv87[ebp]
	fdiv	QWORD PTR __real@4024000000000000
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv92[ebp], edx
	fild	DWORD PTR tv92[ebp]
	fdiv	QWORD PTR __real@4024000000000000
	fstp	DWORD PTR tv93[ebp]
	fld	DWORD PTR tv93[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv129[ebp], edx
	fild	DWORD PTR tv129[ebp]
	fdiv	QWORD PTR __real@4024000000000000
	fstp	DWORD PTR tv130[ebp]
	fld	DWORD PTR tv130[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 148  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?subtract@WorldPos@Ogre@@QBE?AVVector3@2@ABV12@@Z ENDP	; Ogre::WorldPos::subtract
_TEXT	ENDS
PUBLIC	?Flt2Fix@WorldPos@Ogre@@SAHM@Z			; Ogre::WorldPos::Flt2Fix
; Function compile flags: /Odtp
;	COMDAT ?Flt2Fix@WorldPos@Ogre@@SAHM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Flt2Fix@WorldPos@Ogre@@SAHM@Z PROC			; Ogre::WorldPos::Flt2Fix, COMDAT

; 151  : 		{

	push	ebp
	mov	ebp, esp

; 152  : 			return (WPOS_T)(x*UNIT);

	fld	DWORD PTR _x$[ebp]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse

; 153  : 		}

	pop	ebp
	ret	0
?Flt2Fix@WorldPos@Ogre@@SAHM@Z ENDP			; Ogre::WorldPos::Flt2Fix
_TEXT	ENDS
PUBLIC	?Fix2Flt@WorldPos@Ogre@@SAMH@Z			; Ogre::WorldPos::Fix2Flt
; Function compile flags: /Odtp
;	COMDAT ?Fix2Flt@WorldPos@Ogre@@SAMH@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_x$ = 8							; size = 4
?Fix2Flt@WorldPos@Ogre@@SAMH@Z PROC			; Ogre::WorldPos::Fix2Flt, COMDAT

; 156  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx

; 157  : 			return float(double(x)/UNIT);

	fild	DWORD PTR _x$[ebp]
	fdiv	QWORD PTR __real@4024000000000000
	fstp	DWORD PTR tv67[ebp]
	fld	DWORD PTR tv67[ebp]

; 158  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?Fix2Flt@WorldPos@Ogre@@SAMH@Z ENDP			; Ogre::WorldPos::Fix2Flt
_TEXT	ENDS
PUBLIC	??4WorldPos@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::WorldPos::operator=
; Function compile flags: /Odtp
;	COMDAT ??4WorldPos@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4WorldPos@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::WorldPos::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4WorldPos@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::WorldPos::operator=
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__real@00000000
PUBLIC	??0Quaternion@Ogre@@QAE@XZ			; Ogre::Quaternion::Quaternion
;	COMDAT __real@3f800000
; File i:\svnroot\client\ogremain\ogrequaternion.h
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0Quaternion@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Quaternion@Ogre@@QAE@XZ PROC				; Ogre::Quaternion::Quaternion, COMDAT
; _this$ = ecx

; 54   : 		Quaternion():x(0), y(0), z(0), w(1.0f){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Quaternion@Ogre@@QAE@XZ ENDP				; Ogre::Quaternion::Quaternion
_TEXT	ENDS
PUBLIC	??0Quaternion@Ogre@@QAE@MMMM@Z			; Ogre::Quaternion::Quaternion
; Function compile flags: /Odtp
;	COMDAT ??0Quaternion@Ogre@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
_w1$ = 20						; size = 4
??0Quaternion@Ogre@@QAE@MMMM@Z PROC			; Ogre::Quaternion::Quaternion, COMDAT
; _this$ = ecx

; 55   : 		Quaternion( float x1, float y1, float z1, float w1 ) : x(x1), y(y1), z(z1), w(w1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w1$[ebp]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Quaternion@Ogre@@QAE@MMMM@Z ENDP			; Ogre::Quaternion::Quaternion
_TEXT	ENDS
PUBLIC	??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Quaternion::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_quat$ = 8						; size = 4
??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::Quaternion::operator=, COMDAT
; _this$ = ecx

; 59   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 			x = quat.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 61   : 			y = quat.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 62   : 			z = quat.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 63   : 			w = quat.w;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]

; 64   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 65   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::Quaternion::operator=
_TEXT	ENDS
PUBLIC	??XQuaternion@Ogre@@QAEXM@Z			; Ogre::Quaternion::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XQuaternion@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XQuaternion@Ogre@@QAEXM@Z PROC			; Ogre::Quaternion::operator*=, COMDAT
; _this$ = ecx

; 67   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 			x *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 69   : 			y *= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 70   : 			z *= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 71   : 			w *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 72   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XQuaternion@Ogre@@QAEXM@Z ENDP			; Ogre::Quaternion::operator*=
_TEXT	ENDS
PUBLIC	?norm@Quaternion@Ogre@@QAEMXZ			; Ogre::Quaternion::norm
; Function compile flags: /Odtp
;	COMDAT ?norm@Quaternion@Ogre@@QAEMXZ
_TEXT	SEGMENT
tv94 = -8						; size = 4
_this$ = -4						; size = 4
?norm@Quaternion@Ogre@@QAEMXZ PROC			; Ogre::Quaternion::norm, COMDAT
; _this$ = ecx

; 74   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 			return x*x+y*y+z*z+w*w;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv94[ebp]
	fld	DWORD PTR tv94[ebp]

; 76   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?norm@Quaternion@Ogre@@QAEMXZ ENDP			; Ogre::Quaternion::norm
_TEXT	ENDS
PUBLIC	?identity@Quaternion@Ogre@@QAEXXZ		; Ogre::Quaternion::identity
; Function compile flags: /Odtp
;	COMDAT ?identity@Quaternion@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?identity@Quaternion@Ogre@@QAEXXZ PROC			; Ogre::Quaternion::identity, COMDAT
; _this$ = ecx

; 78   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 79   : 			x = y = z = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx]

; 80   : 			w = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+12]

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?identity@Quaternion@Ogre@@QAEXXZ ENDP			; Ogre::Quaternion::identity
_TEXT	ENDS
PUBLIC	?inverse@Quaternion@Ogre@@QAEXXZ		; Ogre::Quaternion::inverse
; Function compile flags: /Odtp
;	COMDAT ?inverse@Quaternion@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?inverse@Quaternion@Ogre@@QAEXXZ PROC			; Ogre::Quaternion::inverse, COMDAT
; _this$ = ecx

; 83   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 			x = -x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fchs
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 85   : 			y = -y;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fchs
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 86   : 			z = -z;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fchs
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 87   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?inverse@Quaternion@Ogre@@QAEXXZ ENDP			; Ogre::Quaternion::inverse
_TEXT	ENDS
PUBLIC	?inverse@Quaternion@Ogre@@QBEXAAV12@@Z		; Ogre::Quaternion::inverse
; Function compile flags: /Odtp
;	COMDAT ?inverse@Quaternion@Ogre@@QBEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_quat$ = 8						; size = 4
?inverse@Quaternion@Ogre@@QBEXAAV12@@Z PROC		; Ogre::Quaternion::inverse, COMDAT
; _this$ = ecx

; 89   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 			quat.x = -x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fchs
	mov	ecx, DWORD PTR _quat$[ebp]
	fstp	DWORD PTR [ecx]

; 91   : 			quat.y = -y;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fchs
	mov	eax, DWORD PTR _quat$[ebp]
	fstp	DWORD PTR [eax+4]

; 92   : 			quat.z = -z;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fchs
	mov	edx, DWORD PTR _quat$[ebp]
	fstp	DWORD PTR [edx+8]

; 93   : 			quat.w = w;

	mov	eax, DWORD PTR _quat$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]

; 94   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?inverse@Quaternion@Ogre@@QBEXAAV12@@Z ENDP		; Ogre::Quaternion::inverse
_TEXT	ENDS
PUBLIC	?setElement@Quaternion@Ogre@@QAEXMMMM@Z		; Ogre::Quaternion::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Quaternion@Ogre@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
_w1$ = 20						; size = 4
?setElement@Quaternion@Ogre@@QAEXMMMM@Z PROC		; Ogre::Quaternion::setElement, COMDAT
; _this$ = ecx

; 96   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 			x = x1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]

; 98   : 			y = y1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]

; 99   : 			z = z1;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]

; 100  : 			w = w1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w1$[ebp]
	fstp	DWORD PTR [eax+12]

; 101  : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?setElement@Quaternion@Ogre@@QAEXMMMM@Z ENDP		; Ogre::Quaternion::setElement
_TEXT	ENDS
PUBLIC	??9Quaternion@Ogre@@QBE_NABV01@@Z		; Ogre::Quaternion::operator!=
EXTRN	??8Quaternion@Ogre@@QBE_NABV01@@Z:PROC		; Ogre::Quaternion::operator==
; Function compile flags: /Odtp
;	COMDAT ??9Quaternion@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_quat$ = 8						; size = 4
??9Quaternion@Ogre@@QBE_NABV01@@Z PROC			; Ogre::Quaternion::operator!=, COMDAT
; _this$ = ecx

; 105  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 			return !operator==(quat);

	mov	eax, DWORD PTR _quat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8Quaternion@Ogre@@QBE_NABV01@@Z	; Ogre::Quaternion::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 107  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9Quaternion@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::Quaternion::operator!=
_TEXT	ENDS
PUBLIC	?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix3::getRow3
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix3.h
;	COMDAT ?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z PROC		; Ogre::Matrix3::getRow3, COMDAT
; _this$ = ecx

; 67   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 			return Vector3(m[i][0], m[i][1], m[i][2]);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax+8]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx+4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 69   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z ENDP		; Ogre::Matrix3::getRow3
_TEXT	ENDS
PUBLIC	?identity@Matrix3@Ogre@@QAEXXZ			; Ogre::Matrix3::identity
; Function compile flags: /Odtp
;	COMDAT ?identity@Matrix3@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?identity@Matrix3@Ogre@@QAEXXZ PROC			; Ogre::Matrix3::identity, COMDAT
; _this$ = ecx

; 71   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 72   : 			_11=1.0f, _12=0.0f, _13=0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+8]

; 73   : 			_21=0.0f, _22=1.0f, _23=0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+20]

; 74   : 			_31=0.0f, _32=0.0f, _33=1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [edx+32]

; 75   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?identity@Matrix3@Ogre@@QAEXXZ ENDP			; Ogre::Matrix3::identity
_TEXT	ENDS
PUBLIC	?setRow@Matrix3@Ogre@@QAEXIMMM@Z		; Ogre::Matrix3::setRow
; Function compile flags: /Odtp
;	COMDAT ?setRow@Matrix3@Ogre@@QAEXIMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?setRow@Matrix3@Ogre@@QAEXIMMM@Z PROC			; Ogre::Matrix3::setRow, COMDAT
; _this$ = ecx

; 77   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 			m[i][0] = x;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [ecx+eax]

; 79   : 			m[i][1] = y;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+edx+4]

; 80   : 			m[i][2] = z;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [edx+ecx+8]

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?setRow@Matrix3@Ogre@@QAEXIMMM@Z ENDP			; Ogre::Matrix3::setRow
_TEXT	ENDS
PUBLIC	?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix3::getColumn
; Function compile flags: /Odtp
;	COMDAT ?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z PROC	; Ogre::Matrix3::getColumn, COMDAT
; _this$ = ecx

; 84   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 			return Vector3(m[0][i], m[1][i], m[2][i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4+24]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx*4+12]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx*4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 86   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z ENDP	; Ogre::Matrix3::getColumn
_TEXT	ENDS
PUBLIC	?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z		; Ogre::Matrix3::makeScaleMatrix
EXTRN	?makeScaleMatrix@Matrix3@Ogre@@QAEXABVVector3@2@@Z:PROC ; Ogre::Matrix3::makeScaleMatrix
; Function compile flags: /Odtp
;	COMDAT ?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T73288 = -12						; size = 12
_s$ = 8							; size = 4
?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z PROC		; Ogre::Matrix3::makeScaleMatrix, COMDAT
; _this$ = ecx

; 93   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 94   : 			makeScaleMatrix(Vector3(s, s, s));

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T73288[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?makeScaleMatrix@Matrix3@Ogre@@QAEXABVVector3@2@@Z ; Ogre::Matrix3::makeScaleMatrix

; 95   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z ENDP		; Ogre::Matrix3::makeScaleMatrix
_TEXT	ENDS
PUBLIC	??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Matrix3::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Matrix3::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, DWORD PTR ___that$[ebp]
	mov	ecx, 9
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Matrix3::operator=
_TEXT	ENDS
PUBLIC	??AMatrix4@Ogre@@QBEPBMI@Z			; Ogre::Matrix4::operator[]
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.h
;	COMDAT ??AMatrix4@Ogre@@QBEPBMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_irow$ = 8						; size = 4
??AMatrix4@Ogre@@QBEPBMI@Z PROC				; Ogre::Matrix4::operator[], COMDAT
; _this$ = ecx

; 88   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 			return &m[irow][0];

	mov	eax, DWORD PTR _irow$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]

; 90   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@Ogre@@QBEPBMI@Z ENDP				; Ogre::Matrix4::operator[]
_TEXT	ENDS
PUBLIC	??AMatrix4@Ogre@@QAEPAMI@Z			; Ogre::Matrix4::operator[]
; Function compile flags: /Odtp
;	COMDAT ??AMatrix4@Ogre@@QAEPAMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_irow$ = 8						; size = 4
??AMatrix4@Ogre@@QAEPAMI@Z PROC				; Ogre::Matrix4::operator[], COMDAT
; _this$ = ecx

; 92   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 			return &m[irow][0];

	mov	eax, DWORD PTR _irow$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]

; 94   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@Ogre@@QAEPAMI@Z ENDP				; Ogre::Matrix4::operator[]
_TEXT	ENDS
PUBLIC	?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z		; Ogre::Matrix4::makeScaleMatrix
EXTRN	?makeScaleMatrix@Matrix4@Ogre@@QAEXABVVector3@2@@Z:PROC ; Ogre::Matrix4::makeScaleMatrix
; Function compile flags: /Odtp
;	COMDAT ?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T73297 = -12						; size = 12
_s$ = 8							; size = 4
?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z PROC		; Ogre::Matrix4::makeScaleMatrix, COMDAT
; _this$ = ecx

; 101  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 			makeScaleMatrix(Vector3(s, s, s));

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T73297[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?makeScaleMatrix@Matrix4@Ogre@@QAEXABVVector3@2@@Z ; Ogre::Matrix4::makeScaleMatrix

; 103  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z ENDP		; Ogre::Matrix4::makeScaleMatrix
_TEXT	ENDS
PUBLIC	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z		; Ogre::Matrix4::setRow
; Function compile flags: /Odtp
;	COMDAT ?setRow@Matrix4@Ogre@@QAEXIMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_w$ = 24						; size = 4
?setRow@Matrix4@Ogre@@QAEXIMMMM@Z PROC			; Ogre::Matrix4::setRow, COMDAT
; _this$ = ecx

; 133  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 			m[i][0] = x;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [ecx+eax]

; 135  : 			m[i][1] = y;

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+edx+4]

; 136  : 			m[i][2] = z;

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [edx+ecx+8]

; 137  : 			m[i][3] = w;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [ecx+eax+12]

; 138  : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?setRow@Matrix4@Ogre@@QAEXIMMMM@Z ENDP			; Ogre::Matrix4::setRow
_TEXT	ENDS
PUBLIC	?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z		; Ogre::Matrix4::setColumn
; Function compile flags: /Odtp
;	COMDAT ?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_w$ = 24						; size = 4
?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z PROC		; Ogre::Matrix4::setColumn, COMDAT
; _this$ = ecx

; 140  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 			m[0][i] = x;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [ecx+eax*4]

; 142  : 			m[1][i] = y;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+edx*4+16]

; 143  : 			m[2][i] = z;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [edx+ecx*4+32]

; 144  : 			m[3][i] = w;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [ecx+eax*4+48]

; 145  : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z ENDP		; Ogre::Matrix4::setColumn
_TEXT	ENDS
PUBLIC	?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix4::getRow3
; Function compile flags: /Odtp
;	COMDAT ?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z PROC		; Ogre::Matrix4::getRow3, COMDAT
; _this$ = ecx

; 147  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 			return Vector3(m[i][0], m[i][1], m[i][2]);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax+8]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx+4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 149  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z ENDP		; Ogre::Matrix4::getRow3
_TEXT	ENDS
PUBLIC	?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix4::getColumn3
; Function compile flags: /Odtp
;	COMDAT ?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z PROC	; Ogre::Matrix4::getColumn3, COMDAT
; _this$ = ecx

; 151  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 			return Vector3(m[0][i], m[1][i], m[2][i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4+32]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx*4+16]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx*4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 153  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z ENDP	; Ogre::Matrix4::getColumn3
_TEXT	ENDS
PUBLIC	??0Vector4@Ogre@@QAE@MMMM@Z			; Ogre::Vector4::Vector4
PUBLIC	?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z	; Ogre::Matrix4::getRow4
; Function compile flags: /Odtp
;	COMDAT ?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z PROC		; Ogre::Matrix4::getRow4, COMDAT
; _this$ = ecx

; 155  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 			return Vector4(m[i][0], m[i][1], m[i][2], m[i][3]);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax+12]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx+8]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx+4]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector4@Ogre@@QAE@MMMM@Z		; Ogre::Vector4::Vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 157  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z ENDP		; Ogre::Matrix4::getRow4
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector4.h
_TEXT	ENDS
;	COMDAT ??0Vector4@Ogre@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
_w1$ = 20						; size = 4
??0Vector4@Ogre@@QAE@MMMM@Z PROC			; Ogre::Vector4::Vector4, COMDAT
; _this$ = ecx

; 44   : 		Vector4( float x1, float y1, float z1, float w1 ) : x(x1), y(y1), z(z1), w(w1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w1$[ebp]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Vector4@Ogre@@QAE@MMMM@Z ENDP			; Ogre::Vector4::Vector4
_TEXT	ENDS
PUBLIC	?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z	; Ogre::Matrix4::getColumn4
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.h
;	COMDAT ?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z PROC	; Ogre::Matrix4::getColumn4, COMDAT
; _this$ = ecx

; 159  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 			return Vector4(m[0][i], m[1][i], m[2][i], m[3][i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4+48]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx*4+32]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx*4+16]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector4@Ogre@@QAE@MMMM@Z		; Ogre::Vector4::Vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z ENDP	; Ogre::Matrix4::getColumn4
_TEXT	ENDS
PUBLIC	?setTranslate@Matrix4@Ogre@@QAEXMMM@Z		; Ogre::Matrix4::setTranslate
; Function compile flags: /Odtp
;	COMDAT ?setTranslate@Matrix4@Ogre@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?setTranslate@Matrix4@Ogre@@QAEXMMM@Z PROC		; Ogre::Matrix4::setTranslate, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			setRow( 3, x, y, z, 1.0f );

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 165  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setTranslate@Matrix4@Ogre@@QAEXMMM@Z ENDP		; Ogre::Matrix4::setTranslate
_TEXT	ENDS
PUBLIC	?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z	; Ogre::Matrix4::setTranslate
; Function compile flags: /Odtp
;	COMDAT ?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z PROC	; Ogre::Matrix4::setTranslate, COMDAT
; _this$ = ecx

; 167  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 			setTranslate( pos.x, pos.y, pos.z );

	mov	eax, DWORD PTR _pos$[ebp]
	push	ecx
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _pos$[ebp]
	push	ecx
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setTranslate@Matrix4@Ogre@@QAEXMMM@Z	; Ogre::Matrix4::setTranslate

; 169  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z ENDP	; Ogre::Matrix4::setTranslate
_TEXT	ENDS
PUBLIC	?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ	; Ogre::Matrix4::getTranslate
; Function compile flags: /Odtp
;	COMDAT ?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::Matrix4::getTranslate, COMDAT
; _this$ = ecx

; 171  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 172  : 			return getRow3(3);

	push	3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z ; Ogre::Matrix4::getRow3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 173  : 		};

	mov	esp, ebp
	pop	ebp
	ret	4
?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::Matrix4::getTranslate
_TEXT	ENDS
PUBLIC	?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z ; Ogre::Matrix4::transformCoord
; Function compile flags: /Odtp
;	COMDAT ?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z
_TEXT	SEGMENT
tv182 = -16						; size = 4
tv174 = -12						; size = 4
tv166 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_vec$ = 12						; size = 4
?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z PROC ; Ogre::Matrix4::transformCoord, COMDAT
; _this$ = ecx

; 233  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 		return Vector3( vec.x*_11 + vec.y*_21 + vec.z*_31 + _41,
; 235  : 			vec.x*_12 + vec.y*_22 + vec.z*_32 + _42,
; 236  : 			vec.x*_13 + vec.y*_23 + vec.z*_33 + _43 );

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+24]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+40]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+56]
	fstp	DWORD PTR tv166[ebp]
	fld	DWORD PTR tv166[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+20]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+36]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+52]
	fstp	DWORD PTR tv174[ebp]
	fld	DWORD PTR tv174[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+16]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+32]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [edx+48]
	fstp	DWORD PTR tv182[ebp]
	fld	DWORD PTR tv182[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 237  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z ENDP ; Ogre::Matrix4::transformCoord
_TEXT	ENDS
PUBLIC	??0BoxBound@Ogre@@QAE@XZ			; Ogre::BoxBound::BoxBound
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebounding.h
;	COMDAT ??0BoxBound@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BoxBound@Ogre@@QAE@XZ PROC				; Ogre::BoxBound::BoxBound, COMDAT
; _this$ = ecx

; 14   : 		BoxBound() : m_isValid(false){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BoxBound@Ogre@@QAE@XZ ENDP				; Ogre::BoxBound::BoxBound
_TEXT	ENDS
PUBLIC	??0BoxBound@Ogre@@QAE@ABVVector3@1@0@Z		; Ogre::BoxBound::BoxBound
; Function compile flags: /Odtp
;	COMDAT ??0BoxBound@Ogre@@QAE@ABVVector3@1@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_minpos$ = 8						; size = 4
_maxpos$ = 12						; size = 4
??0BoxBound@Ogre@@QAE@ABVVector3@1@0@Z PROC		; Ogre::BoxBound::BoxBound, COMDAT
; _this$ = ecx

; 15   : 		BoxBound(const Vector3 &minpos, const Vector3 &maxpos) : m_MinPos(minpos), m_MaxPos(maxpos), m_isValid(true){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _minpos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _maxpos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+24], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0BoxBound@Ogre@@QAE@ABVVector3@1@0@Z ENDP		; Ogre::BoxBound::BoxBound
_TEXT	ENDS
PUBLIC	??0BoxBound@Ogre@@QAE@ABV01@@Z			; Ogre::BoxBound::BoxBound
; Function compile flags: /Odtp
;	COMDAT ??0BoxBound@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0BoxBound@Ogre@@QAE@ABV01@@Z PROC			; Ogre::BoxBound::BoxBound, COMDAT
; _this$ = ecx

; 16   : 		BoxBound(const BoxBound &rhs) : m_MinPos(rhs.m_MinPos), m_MaxPos(rhs.m_MaxPos), m_isValid(rhs.m_isValid){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	cl, BYTE PTR [eax+24]
	mov	BYTE PTR [edx+24], cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BoxBound@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::BoxBound::BoxBound
_TEXT	ENDS
PUBLIC	??$Max@M@Ogre@@YAMABM0@Z			; Ogre::Max<float>
PUBLIC	??$Min@M@Ogre@@YAMABM0@Z			; Ogre::Min<float>
PUBLIC	??YBoxBound@Ogre@@QAEAAV01@ABVVector3@1@@Z	; Ogre::BoxBound::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YBoxBound@Ogre@@QAEAAV01@ABVVector3@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Other$ = 8						; size = 4
??YBoxBound@Ogre@@QAEAAV01@ABVVector3@1@@Z PROC		; Ogre::BoxBound::operator+=, COMDAT
; _this$ = ecx

; 19   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 20   : 			if( m_isValid )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	$LN2@operator@4

; 21   : 			{
; 22   : #if ASM_x86
; 23   : 				__asm
; 24   : 				{
; 25   : 						mov		eax,[Other]
; 26   : 						mov		ecx,[this]
; 27   : 
; 28   : 						movss	xmm3,[eax]Vector3.x
; 29   : 						movss	xmm4,[eax]Vector3.y
; 30   : 						movss	xmm5,[eax]Vector3.z
; 31   : 
; 32   : 						movss	xmm0,[ecx]BoxBound.m_MinPos.x
; 33   : 						movss	xmm1,[ecx]BoxBound.m_MinPos.y
; 34   : 						movss	xmm2,[ecx]BoxBound.m_MinPos.z
; 35   : 						minss	xmm0,xmm3
; 36   : 						minss	xmm1,xmm4
; 37   : 						minss	xmm2,xmm5
; 38   : 						movss	[ecx]BoxBound.m_MinPos.x,xmm0
; 39   : 						movss	[ecx]BoxBound.m_MinPos.y,xmm1
; 40   : 						movss	[ecx]BoxBound.m_MinPos.z,xmm2
; 41   : 
; 42   : 						movss	xmm0,[ecx]BoxBound.m_MaxPos.x
; 43   : 						movss	xmm1,[ecx]BoxBound.m_MaxPos.y
; 44   : 						movss	xmm2,[ecx]BoxBound.m_MaxPos.z
; 45   : 						maxss	xmm0,xmm3
; 46   : 						maxss	xmm1,xmm4
; 47   : 						maxss	xmm2,xmm5
; 48   : 						movss	[ecx]BoxBound.m_MaxPos.x,xmm0
; 49   : 						movss	[ecx]BoxBound.m_MaxPos.y,xmm1
; 50   : 						movss	[ecx]BoxBound.m_MaxPos.z,xmm2
; 51   : 				}
; 52   : #else
; 53   : 				m_MinPos.x = Min( m_MinPos.x, Other.x );

	mov	edx, DWORD PTR _Other$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 54   : 				m_MinPos.y = Min( m_MinPos.y, Other.y );

	mov	edx, DWORD PTR _Other$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 55   : 				m_MinPos.z = Min( m_MinPos.z, Other.z );

	mov	edx, DWORD PTR _Other$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 56   : 
; 57   : 				m_MaxPos.x = Max( m_MaxPos.x, Other.x );

	mov	edx, DWORD PTR _Other$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 58   : 				m_MaxPos.y = Max( m_MaxPos.y, Other.y );

	mov	edx, DWORD PTR _Other$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+16]

; 59   : 				m_MaxPos.z = Max( m_MaxPos.z, Other.z );

	mov	edx, DWORD PTR _Other$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+20]

; 60   : #endif
; 61   : 			}
; 62   : 			else

	jmp	SHORT $LN1@operator@4
$LN2@operator@4:

; 63   : 			{
; 64   : 				m_MinPos = m_MaxPos = Other;

	mov	edx, DWORD PTR _Other$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 65   : 				m_isValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 1
$LN1@operator@4:

; 66   : 			}
; 67   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 68   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YBoxBound@Ogre@@QAEAAV01@ABVVector3@1@@Z ENDP		; Ogre::BoxBound::operator+=
_TEXT	ENDS
PUBLIC	??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BoxBound::operator=
PUBLIC	??YBoxBound@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BoxBound::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YBoxBound@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Other$ = 8						; size = 4
??YBoxBound@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BoxBound::operator+=, COMDAT
; _this$ = ecx

; 71   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 72   : 			if( m_isValid && Other.m_isValid )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	$LN3@operator@5
	mov	edx, DWORD PTR _Other$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	je	$LN3@operator@5

; 73   : 			{
; 74   : #if ASM_X86
; 75   : 				__asm
; 76   : 				{
; 77   : 						mov		eax,[Other]
; 78   : 						mov		ecx,[this]
; 79   : 
; 80   : 						movss	xmm0,[ecx]BoxBound.m_MinPos.x
; 81   : 						movss	xmm1,[ecx]BoxBound.m_MinPos.y
; 82   : 						movss	xmm2,[ecx]BoxBound.m_MinPos.z
; 83   : 						minss	xmm0,[eax]BoxBound.m_MinPos.x
; 84   : 						minss	xmm1,[eax]BoxBound.m_MinPos.y
; 85   : 						minss	xmm2,[eax]BoxBound.m_MinPos.z
; 86   : 						movss	[ecx]BoxBound.m_MinPos.x,xmm0
; 87   : 						movss	[ecx]BoxBound.m_MinPos.y,xmm1
; 88   : 						movss	[ecx]BoxBound.m_MinPos.z,xmm2
; 89   : 
; 90   : 						movss	xmm0,[ecx]BoxBound.m_MaxPos.x
; 91   : 						movss	xmm1,[ecx]BoxBound.m_MaxPos.y
; 92   : 						movss	xmm2,[ecx]BoxBound.m_MaxPos.z
; 93   : 						maxss	xmm0,[eax]BoxBound.m_MaxPos.x
; 94   : 						maxss	xmm1,[eax]BoxBound.m_MaxPos.y
; 95   : 						maxss	xmm2,[eax]BoxBound.m_MaxPos.z
; 96   : 						movss	[ecx]BoxBound.m_MaxPos.x,xmm0
; 97   : 						movss	[ecx]BoxBound.m_MaxPos.y,xmm1
; 98   : 						movss	[ecx]BoxBound.m_MaxPos.z,xmm2
; 99   : 				}
; 100  : #else
; 101  : 				m_MinPos.x = Min( m_MinPos.x, Other.m_MinPos.x );

	mov	ecx, DWORD PTR _Other$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax]

; 102  : 				m_MinPos.y = Min( m_MinPos.y, Other.m_MinPos.y );

	mov	ecx, DWORD PTR _Other$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 103  : 				m_MinPos.z = Min( m_MinPos.z, Other.m_MinPos.z );

	mov	ecx, DWORD PTR _Other$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8]

; 104  : 
; 105  : 				m_MaxPos.x = Max( m_MaxPos.x, Other.m_MaxPos.x );

	mov	ecx, DWORD PTR _Other$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+12]

; 106  : 				m_MaxPos.y = Max( m_MaxPos.y, Other.m_MaxPos.y );

	mov	ecx, DWORD PTR _Other$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+16]

; 107  : 				m_MaxPos.z = Max( m_MaxPos.z, Other.m_MaxPos.z );

	mov	ecx, DWORD PTR _Other$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+20]
	jmp	SHORT $LN1@operator@5
$LN3@operator@5:

; 108  : #endif
; 109  : 			}
; 110  : 			else if( Other.m_isValid )

	mov	ecx, DWORD PTR _Other$[ebp]
	movzx	edx, BYTE PTR [ecx+24]
	test	edx, edx
	je	SHORT $LN1@operator@5

; 111  : 			{
; 112  : 				*this = Other;

	mov	eax, DWORD PTR _Other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z
$LN1@operator@5:

; 113  : 			}
; 114  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 115  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YBoxBound@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BoxBound::operator+=
_TEXT	ENDS
PUBLIC	?setRange@BoxBound@Ogre@@QAEXABVVector3@2@0@Z	; Ogre::BoxBound::setRange
; Function compile flags: /Odtp
;	COMDAT ?setRange@BoxBound@Ogre@@QAEXABVVector3@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_minpt$ = 8						; size = 4
_maxpt$ = 12						; size = 4
?setRange@BoxBound@Ogre@@QAEXABVVector3@2@0@Z PROC	; Ogre::BoxBound::setRange, COMDAT
; _this$ = ecx

; 118  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 119  : 			m_MinPos = minpt;

	mov	eax, DWORD PTR _minpt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 120  : 			m_MaxPos = maxpt;

	mov	ecx, DWORD PTR _maxpt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 121  : 			m_isValid = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+24], 1

; 122  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setRange@BoxBound@Ogre@@QAEXABVVector3@2@0@Z ENDP	; Ogre::BoxBound::setRange
_TEXT	ENDS
PUBLIC	??HOgre@@YA?AVVector3@0@ABV10@0@Z		; Ogre::operator+
PUBLIC	??GOgre@@YA?AVVector3@0@ABV10@0@Z		; Ogre::operator-
PUBLIC	?setCenterExtension@BoxBound@Ogre@@QAEXABVVector3@2@0@Z ; Ogre::BoxBound::setCenterExtension
; Function compile flags: /Odtp
;	COMDAT ?setCenterExtension@BoxBound@Ogre@@QAEXABVVector3@2@0@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T73335 = -24						; size = 12
$T73334 = -12						; size = 12
_center$ = 8						; size = 4
_exten$ = 12						; size = 4
?setCenterExtension@BoxBound@Ogre@@QAEXABVVector3@2@0@Z PROC ; Ogre::BoxBound::setCenterExtension, COMDAT
; _this$ = ecx

; 125  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 			m_MinPos = center-exten;

	mov	eax, DWORD PTR _exten$[ebp]
	push	eax
	mov	ecx, DWORD PTR _center$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T73334[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 127  : 			m_MaxPos = center+exten;

	mov	eax, DWORD PTR _exten$[ebp]
	push	eax
	mov	ecx, DWORD PTR _center$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T73335[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 128  : 			m_isValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 1

; 129  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setCenterExtension@BoxBound@Ogre@@QAEXABVVector3@2@0@Z ENDP ; Ogre::BoxBound::setCenterExtension
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ??HOgre@@YA?AVVector3@0@ABV10@0@Z
_TEXT	SEGMENT
tv92 = -12						; size = 4
tv89 = -8						; size = 4
tv86 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??HOgre@@YA?AVVector3@0@ABV10@0@Z PROC			; Ogre::operator+, COMDAT

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 165  : 		return Vector3(v1.x+v2.x, v1.y+v2.y, v1.z+v2.z);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v2$[ebp]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v2$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v2$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 166  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??HOgre@@YA?AVVector3@0@ABV10@0@Z ENDP			; Ogre::operator+
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??GOgre@@YA?AVVector3@0@ABV10@0@Z
_TEXT	SEGMENT
tv92 = -12						; size = 4
tv89 = -8						; size = 4
tv86 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??GOgre@@YA?AVVector3@0@ABV10@0@Z PROC			; Ogre::operator-, COMDAT

; 174  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 175  : 		return Vector3(v1.x-v2.x, v1.y-v2.y, v1.z-v2.z);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v2$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v2$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v2$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 176  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??GOgre@@YA?AVVector3@0@ABV10@0@Z ENDP			; Ogre::operator-
_TEXT	ENDS
PUBLIC	?expandBy@BoxBound@Ogre@@QBE?AV12@M@Z		; Ogre::BoxBound::expandBy
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebounding.h
;	COMDAT ?expandBy@BoxBound@Ogre@@QBE?AV12@M@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T73345 = -48						; size = 12
$T73344 = -36						; size = 12
$T73343 = -24						; size = 12
$T73342 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_w$ = 12						; size = 4
?expandBy@BoxBound@Ogre@@QBE?AV12@M@Z PROC		; Ogre::BoxBound::expandBy, COMDAT
; _this$ = ecx

; 134  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 135  : 			return BoxBound( m_MinPos - Vector3(w,w,w), m_MaxPos + Vector3(w,w,w) );

	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T73342[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T73343[ebp]
	push	ecx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T73344[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	eax, DWORD PTR $T73345[ebp]
	push	eax
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0BoxBound@Ogre@@QAE@ABVVector3@1@0@Z	; Ogre::BoxBound::BoxBound
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 136  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?expandBy@BoxBound@Ogre@@QBE?AV12@M@Z ENDP		; Ogre::BoxBound::expandBy
_TEXT	ENDS
PUBLIC	??DOgre@@YA?AVVector3@0@ABV10@M@Z		; Ogre::operator*
PUBLIC	__real@3f000000
PUBLIC	?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ	; Ogre::BoxBound::getCenter
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T73348 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::BoxBound::getCenter, COMDAT
; _this$ = ecx

; 144  : 		Vector3 getCenter() const{ return (m_MinPos + m_MaxPos)*0.5f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T73348[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??DOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator*
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::BoxBound::getCenter
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ??DOgre@@YA?AVVector3@0@ABV10@M@Z
_TEXT	SEGMENT
tv87 = -12						; size = 4
tv85 = -8						; size = 4
tv83 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_s$ = 16						; size = 4
??DOgre@@YA?AVVector3@0@ABV10@M@Z PROC			; Ogre::operator*, COMDAT

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 190  : 		return Vector3(v1.x*s, v1.y*s, v1.z*s);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv85[ebp]
	fld	DWORD PTR tv85[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv87[ebp]
	fld	DWORD PTR tv87[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 191  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??DOgre@@YA?AVVector3@0@ABV10@M@Z ENDP			; Ogre::operator*
_TEXT	ENDS
PUBLIC	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ	; Ogre::BoxBound::getExtension
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebounding.h
;	COMDAT ?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T73355 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::BoxBound::getExtension, COMDAT
; _this$ = ecx

; 145  : 		Vector3 getExtension() const{ return (m_MaxPos - m_MinPos)*0.5f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T73355[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??DOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator*
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::BoxBound::getExtension
_TEXT	ENDS
PUBLIC	?getMinPos@BoxBound@Ogre@@QBEABVVector3@2@XZ	; Ogre::BoxBound::getMinPos
; Function compile flags: /Odtp
;	COMDAT ?getMinPos@BoxBound@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMinPos@BoxBound@Ogre@@QBEABVVector3@2@XZ PROC	; Ogre::BoxBound::getMinPos, COMDAT
; _this$ = ecx

; 146  : 		const Vector3 &getMinPos() const{ return m_MinPos; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getMinPos@BoxBound@Ogre@@QBEABVVector3@2@XZ ENDP	; Ogre::BoxBound::getMinPos
_TEXT	ENDS
PUBLIC	?getMaxPos@BoxBound@Ogre@@QBEABVVector3@2@XZ	; Ogre::BoxBound::getMaxPos
; Function compile flags: /Odtp
;	COMDAT ?getMaxPos@BoxBound@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxPos@BoxBound@Ogre@@QBEABVVector3@2@XZ PROC	; Ogre::BoxBound::getMaxPos, COMDAT
; _this$ = ecx

; 147  : 		const Vector3 &getMaxPos() const{ return m_MaxPos; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxPos@BoxBound@Ogre@@QBEABVVector3@2@XZ ENDP	; Ogre::BoxBound::getMaxPos
_TEXT	ENDS
PUBLIC	??$Abs@M@Ogre@@YAMABM@Z				; Ogre::Abs<float>
PUBLIC	?getRadiusInDirection@BoxBound@Ogre@@QBEMABVVector3@2@@Z ; Ogre::BoxBound::getRadiusInDirection
; Function compile flags: /Odtp
;	COMDAT ?getRadiusInDirection@BoxBound@Ogre@@QBEMABVVector3@2@@Z
_TEXT	SEGMENT
tv143 = -48						; size = 4
tv148 = -44						; size = 8
tv146 = -36						; size = 8
_this$ = -28						; size = 4
$T73364 = -24						; size = 4
$T73363 = -20						; size = 4
$T73362 = -16						; size = 4
_extent$ = -12						; size = 12
_dir$ = 8						; size = 4
?getRadiusInDirection@BoxBound@Ogre@@QBEMABVVector3@2@@Z PROC ; Ogre::BoxBound::getRadiusInDirection, COMDAT
; _this$ = ecx

; 150  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 			Vector3 extent = getExtension();

	lea	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getExtension

; 152  : 			return Abs(dir.x*extent.x) + Abs(dir.y*extent.y) + Abs(dir.z*extent.z);

	mov	ecx, DWORD PTR _dir$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR _extent$[ebp]
	fstp	DWORD PTR $T73362[ebp]
	mov	edx, DWORD PTR _dir$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _extent$[ebp+4]
	fstp	DWORD PTR $T73363[ebp]
	mov	eax, DWORD PTR _dir$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _extent$[ebp+8]
	fstp	DWORD PTR $T73364[ebp]
	lea	ecx, DWORD PTR $T73362[ebp]
	push	ecx
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	add	esp, 4
	lea	edx, DWORD PTR $T73363[ebp]
	push	edx
	fstp	QWORD PTR tv146[ebp]
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	add	esp, 4
	fadd	QWORD PTR tv146[ebp]
	lea	eax, DWORD PTR $T73364[ebp]
	push	eax
	fstp	QWORD PTR tv148[ebp]
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	add	esp, 4
	fadd	QWORD PTR tv148[ebp]
	fstp	DWORD PTR tv143[ebp]
	fld	DWORD PTR tv143[ebp]

; 153  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getRadiusInDirection@BoxBound@Ogre@@QBEMABVVector3@2@@Z ENDP ; Ogre::BoxBound::getRadiusInDirection
_TEXT	ENDS
PUBLIC	?isPointIn@BoxBound@Ogre@@QBE_NABVVector3@2@@Z	; Ogre::BoxBound::isPointIn
; Function compile flags: /Odtp
;	COMDAT ?isPointIn@BoxBound@Ogre@@QBE_NABVVector3@2@@Z
_TEXT	SEGMENT
tv94 = -8						; size = 4
_this$ = -4						; size = 4
_vPos$ = 8						; size = 4
?isPointIn@BoxBound@Ogre@@QBE_NABVVector3@2@@Z PROC	; Ogre::BoxBound::isPointIn, COMDAT
; _this$ = ecx

; 156  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 157  : 			return (vPos.x>m_MinPos.x && vPos.x<m_MaxPos.x 
; 158  : 				    &&vPos.y>m_MinPos.y && vPos.y<m_MaxPos.y
; 159  : 					&&vPos.z>m_MinPos.z && vPos.z<m_MaxPos.z );

	mov	eax, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@isPointIn
	mov	edx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointIn
	mov	ecx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@isPointIn
	mov	eax, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+16]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointIn
	mov	edx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@isPointIn
	mov	ecx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+20]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointIn
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN4@isPointIn
$LN3@isPointIn:
	mov	DWORD PTR tv94[ebp], 0
$LN4@isPointIn:
	mov	al, BYTE PTR tv94[ebp]

; 160  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isPointIn@BoxBound@Ogre@@QBE_NABVVector3@2@@Z ENDP	; Ogre::BoxBound::isPointIn
_TEXT	ENDS
PUBLIC	?isPointInXZ@BoxBound@Ogre@@QBE_NABVVector3@2@@Z ; Ogre::BoxBound::isPointInXZ
; Function compile flags: /Odtp
;	COMDAT ?isPointInXZ@BoxBound@Ogre@@QBE_NABVVector3@2@@Z
_TEXT	SEGMENT
tv83 = -8						; size = 4
_this$ = -4						; size = 4
_vPos$ = 8						; size = 4
?isPointInXZ@BoxBound@Ogre@@QBE_NABVVector3@2@@Z PROC	; Ogre::BoxBound::isPointInXZ, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			return (vPos.x>m_MinPos.x && vPos.x<m_MaxPos.x 
; 165  : 				&&vPos.z>m_MinPos.z && vPos.z<m_MaxPos.z );

	mov	eax, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@isPointInX
	mov	edx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointInX
	mov	ecx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@isPointInX
	mov	eax, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+20]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointInX
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN4@isPointInX
$LN3@isPointInX:
	mov	DWORD PTR tv83[ebp], 0
$LN4@isPointInX:
	mov	al, BYTE PTR tv83[ebp]

; 166  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isPointInXZ@BoxBound@Ogre@@QBE_NABVVector3@2@@Z ENDP	; Ogre::BoxBound::isPointInXZ
_TEXT	ENDS
PUBLIC	?intersectBoxBound@BoxBound@Ogre@@QBE_NABV12@@Z	; Ogre::BoxBound::intersectBoxBound
; Function compile flags: /Odtp
;	COMDAT ?intersectBoxBound@BoxBound@Ogre@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
?intersectBoxBound@BoxBound@Ogre@@QBE_NABV12@@Z PROC	; Ogre::BoxBound::intersectBoxBound, COMDAT
; _this$ = ecx

; 169  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 			if( m_MinPos.x > other.m_MaxPos.x || other.m_MinPos.x > m_MaxPos.x )

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [ecx+12]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN5@intersectB
	mov	edx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@intersectB
$LN5@intersectB:

; 171  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@intersectB
$LN6@intersectB:

; 172  : 			if( m_MinPos.y > other.m_MaxPos.y || other.m_MinPos.y > m_MaxPos.y )

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [edx+16]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN3@intersectB
	mov	eax, DWORD PTR _other$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+16]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@intersectB
$LN3@intersectB:

; 173  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@intersectB
$LN4@intersectB:

; 174  : 			if( m_MinPos.z > other.m_MaxPos.z || other.m_MinPos.z > m_MaxPos.z )

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _other$[ebp]
	fld	DWORD PTR [eax+20]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN1@intersectB
	mov	ecx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+20]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@intersectB
$LN1@intersectB:

; 175  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@intersectB
$LN2@intersectB:

; 176  : 			return true;

	mov	al, 1
$LN7@intersectB:

; 177  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?intersectBoxBound@BoxBound@Ogre@@QBE_NABV12@@Z ENDP	; Ogre::BoxBound::intersectBoxBound
_TEXT	ENDS
PUBLIC	?isBoxBoundIn@BoxBound@Ogre@@QAE_NABV12@@Z	; Ogre::BoxBound::isBoxBoundIn
; Function compile flags: /Odtp
;	COMDAT ?isBoxBoundIn@BoxBound@Ogre@@QAE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_box$ = 8						; size = 4
?isBoxBoundIn@BoxBound@Ogre@@QAE_NABV12@@Z PROC		; Ogre::BoxBound::isBoxBoundIn, COMDAT
; _this$ = ecx

; 181  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 			if( box.m_MaxPos.x > m_MaxPos.x ||
; 183  : 				box.m_MinPos.x < m_MinPos.x )

	mov	eax, DWORD PTR _box$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN5@isBoxBound
	mov	edx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN6@isBoxBound
$LN5@isBoxBound:

; 184  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@isBoxBound
$LN6@isBoxBound:

; 185  : 			if( box.m_MaxPos.y > m_MaxPos.y ||
; 186  : 				box.m_MinPos.y < m_MinPos.y )

	mov	ecx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+16]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN3@isBoxBound
	mov	eax, DWORD PTR _box$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@isBoxBound
$LN3@isBoxBound:

; 187  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@isBoxBound
$LN4@isBoxBound:

; 188  : 			if( box.m_MaxPos.z > m_MaxPos.z ||
; 189  : 				box.m_MinPos.z < m_MinPos.z )

	mov	edx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN1@isBoxBound
	mov	ecx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@isBoxBound
$LN1@isBoxBound:

; 190  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@isBoxBound
$LN2@isBoxBound:

; 191  : 
; 192  : 			return true;

	mov	al, 1
$LN7@isBoxBound:

; 193  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isBoxBoundIn@BoxBound@Ogre@@QAE_NABV12@@Z ENDP		; Ogre::BoxBound::isBoxBoundIn
_TEXT	ENDS
PUBLIC	?Abs@Ogre@@YA?AVVector3@1@ABV21@@Z		; Ogre::Abs
PUBLIC	?isBoxBoundOut@BoxBound@Ogre@@QBE_NABV12@@Z	; Ogre::BoxBound::isBoxBoundOut
; Function compile flags: /Odtp
;	COMDAT ?isBoxBoundOut@BoxBound@Ogre@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -88						; size = 4
$T73383 = -84						; size = 12
$T73382 = -72						; size = 12
$T73381 = -60						; size = 12
$T73380 = -48						; size = 12
$T73379 = -36						; size = 12
_vRadius$ = -24						; size = 12
_vDis$ = -12						; size = 12
_box$ = 8						; size = 4
?isBoxBoundOut@BoxBound@Ogre@@QBE_NABV12@@Z PROC	; Ogre::BoxBound::isBoxBoundOut, COMDAT
; _this$ = ecx

; 197  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 198  : 			Vector3 vDis = Abs(box.getCenter() - getCenter());

	lea	eax, DWORD PTR $T73379[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getCenter
	push	eax
	lea	ecx, DWORD PTR $T73380[ebp]
	push	ecx
	mov	ecx, DWORD PTR _box$[ebp]
	call	?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getCenter
	push	eax
	lea	edx, DWORD PTR $T73381[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _vDis$[ebp]
	push	eax
	call	?Abs@Ogre@@YA?AVVector3@1@ABV21@@Z	; Ogre::Abs
	add	esp, 8

; 199  : 			Vector3 vRadius = box.getExtension() + getExtension();

	lea	ecx, DWORD PTR $T73382[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getExtension
	push	eax
	lea	edx, DWORD PTR $T73383[ebp]
	push	edx
	mov	ecx, DWORD PTR _box$[ebp]
	call	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getExtension
	push	eax
	lea	eax, DWORD PTR _vRadius$[ebp]
	push	eax
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH

; 200  : 
; 201  : 			if( vDis.x > vRadius.x || vDis.y > vRadius.y || vDis.z > vRadius.z )

	fld	DWORD PTR _vDis$[ebp]
	fld	DWORD PTR _vRadius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN1@isBoxBound@2
	fld	DWORD PTR _vDis$[ebp+4]
	fld	DWORD PTR _vRadius$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN1@isBoxBound@2
	fld	DWORD PTR _vDis$[ebp+8]
	fld	DWORD PTR _vRadius$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@isBoxBound@2
$LN1@isBoxBound@2:

; 202  : 				return true;

	mov	al, 1
	jmp	SHORT $LN3@isBoxBound@2
$LN2@isBoxBound@2:

; 203  : 
; 204  : 			return false;

	xor	al, al
$LN3@isBoxBound@2:

; 205  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isBoxBoundOut@BoxBound@Ogre@@QBE_NABV12@@Z ENDP	; Ogre::BoxBound::isBoxBoundOut
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ?Abs@Ogre@@YA?AVVector3@1@ABV21@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?Abs@Ogre@@YA?AVVector3@1@ABV21@@Z PROC			; Ogre::Abs, COMDAT

; 204  : 	{

	push	ebp
	mov	ebp, esp

; 205  : 		return Vector3( Abs(v.x), Abs(v.y), Abs(v.z) );

	mov	eax, DWORD PTR _v$[ebp]
	add	eax, 8
	push	eax
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 4
	push	ecx
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 206  : 	}

	pop	ebp
	ret	0
?Abs@Ogre@@YA?AVVector3@1@ABV21@@Z ENDP			; Ogre::Abs
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BoxBound::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+24]
	mov	BYTE PTR [edx+24], cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BoxBound::operator=
_TEXT	ENDS
PUBLIC	??0SphereBound@Ogre@@QAE@XZ			; Ogre::SphereBound::SphereBound
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebounding.h
;	COMDAT ??0SphereBound@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SphereBound@Ogre@@QAE@XZ PROC			; Ogre::SphereBound::SphereBound, COMDAT
; _this$ = ecx

; 221  : 		SphereBound(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0SphereBound@Ogre@@QAE@XZ ENDP			; Ogre::SphereBound::SphereBound
_TEXT	ENDS
PUBLIC	?getCenter@SphereBound@Ogre@@QBEABVVector3@2@XZ	; Ogre::SphereBound::getCenter
; Function compile flags: /Odtp
;	COMDAT ?getCenter@SphereBound@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCenter@SphereBound@Ogre@@QBEABVVector3@2@XZ PROC	; Ogre::SphereBound::getCenter, COMDAT
; _this$ = ecx

; 229  : 		const Vector3 &getCenter() const{ return m_Center; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCenter@SphereBound@Ogre@@QBEABVVector3@2@XZ ENDP	; Ogre::SphereBound::getCenter
_TEXT	ENDS
PUBLIC	?getRadius@SphereBound@Ogre@@QBEMXZ		; Ogre::SphereBound::getRadius
; Function compile flags: /Odtp
;	COMDAT ?getRadius@SphereBound@Ogre@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRadius@SphereBound@Ogre@@QBEMXZ PROC		; Ogre::SphereBound::getRadius, COMDAT
; _this$ = ecx

; 230  : 		float   getRadius() const{ return m_Radius; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?getRadius@SphereBound@Ogre@@QBEMXZ ENDP		; Ogre::SphereBound::getRadius
_TEXT	ENDS
PUBLIC	?isPointIn@SphereBound@Ogre@@QBE_NABVVector3@2@@Z ; Ogre::SphereBound::isPointIn
; Function compile flags: /Odtp
;	COMDAT ?isPointIn@SphereBound@Ogre@@QBE_NABVVector3@2@@Z
_TEXT	SEGMENT
tv79 = -24						; size = 4
tv89 = -20						; size = 4
_this$ = -16						; size = 4
$T73396 = -12						; size = 12
_vPos$ = 8						; size = 4
?isPointIn@SphereBound@Ogre@@QBE_NABVVector3@2@@Z PROC	; Ogre::SphereBound::isPointIn, COMDAT
; _this$ = ecx

; 233  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 			return ( (vPos - m_Center).lengthSqr() < m_Radius * m_Radius );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vPos$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T73396[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?lengthSqr@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::lengthSqr
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointIn@2
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN4@isPointIn@2
$LN3@isPointIn@2:
	mov	DWORD PTR tv79[ebp], 0
$LN4@isPointIn@2:
	mov	al, BYTE PTR tv79[ebp]

; 235  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isPointIn@SphereBound@Ogre@@QBE_NABVVector3@2@@Z ENDP	; Ogre::SphereBound::isPointIn
_TEXT	ENDS
PUBLIC	??0SphereBound@Ogre@@QAE@ABV01@@Z		; Ogre::SphereBound::SphereBound
; Function compile flags: /Odtp
;	COMDAT ??0SphereBound@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0SphereBound@Ogre@@QAE@ABV01@@Z PROC			; Ogre::SphereBound::SphereBound, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [edx+12]
	fstp	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0SphereBound@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::SphereBound::SphereBound
_TEXT	ENDS
PUBLIC	??4SphereBound@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::SphereBound::operator=
; Function compile flags: /Odtp
;	COMDAT ??4SphereBound@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4SphereBound@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::SphereBound::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [edx+12]
	fstp	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4SphereBound@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::SphereBound::operator=
_TEXT	ENDS
PUBLIC	??0BoxSphereBound@Ogre@@QAE@XZ			; Ogre::BoxSphereBound::BoxSphereBound
; Function compile flags: /Odtp
;	COMDAT ??0BoxSphereBound@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BoxSphereBound@Ogre@@QAE@XZ PROC			; Ogre::BoxSphereBound::BoxSphereBound, COMDAT
; _this$ = ecx

; 252  : 		BoxSphereBound()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3

; 253  : 		{
; 254  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BoxSphereBound@Ogre@@QAE@XZ ENDP			; Ogre::BoxSphereBound::BoxSphereBound
_TEXT	ENDS
PUBLIC	?fromBoxBound@BoxSphereBound@Ogre@@QAEXABVBoxBound@2@@Z ; Ogre::BoxSphereBound::fromBoxBound
PUBLIC	??0BoxSphereBound@Ogre@@QAE@ABVBoxBound@1@@Z	; Ogre::BoxSphereBound::BoxSphereBound
; Function compile flags: /Odtp
;	COMDAT ??0BoxSphereBound@Ogre@@QAE@ABVBoxBound@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_box$ = 8						; size = 4
??0BoxSphereBound@Ogre@@QAE@ABVBoxBound@1@@Z PROC	; Ogre::BoxSphereBound::BoxSphereBound, COMDAT
; _this$ = ecx

; 256  : 		BoxSphereBound(const BoxBound &box)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3

; 257  : 		{
; 258  : 			fromBoxBound(box);

	mov	eax, DWORD PTR _box$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?fromBoxBound@BoxSphereBound@Ogre@@QAEXABVBoxBound@2@@Z ; Ogre::BoxSphereBound::fromBoxBound

; 259  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BoxSphereBound@Ogre@@QAE@ABVBoxBound@1@@Z ENDP	; Ogre::BoxSphereBound::BoxSphereBound
_TEXT	ENDS
PUBLIC	?reset@BoxSphereBound@Ogre@@QAEXXZ		; Ogre::BoxSphereBound::reset
; Function compile flags: /Odtp
;	COMDAT ?reset@BoxSphereBound@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T73409 = -12						; size = 12
?reset@BoxSphereBound@Ogre@@QAEXXZ PROC			; Ogre::BoxSphereBound::reset, COMDAT
; _this$ = ecx

; 262  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 			m_Center = m_Extent = Vector3(0,0,0);

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T73409[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 264  : 			m_Radius = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+24]

; 265  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?reset@BoxSphereBound@Ogre@@QAEXXZ ENDP			; Ogre::BoxSphereBound::reset
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?fromBoxBound@BoxSphereBound@Ogre@@QAEXABVBoxBound@2@@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T73413 = -24						; size = 12
$T73412 = -12						; size = 12
_box$ = 8						; size = 4
?fromBoxBound@BoxSphereBound@Ogre@@QAEXABVBoxBound@2@@Z PROC ; Ogre::BoxSphereBound::fromBoxBound, COMDAT
; _this$ = ecx

; 268  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 269  : 			m_Center = box.getCenter();

	lea	eax, DWORD PTR $T73412[ebp]
	push	eax
	mov	ecx, DWORD PTR _box$[ebp]
	call	?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getCenter
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 270  : 			m_Extent = box.getExtension();

	lea	ecx, DWORD PTR $T73413[ebp]
	push	ecx
	mov	ecx, DWORD PTR _box$[ebp]
	call	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getExtension
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 271  : 
; 272  : 			m_Radius = m_Extent.length();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?length@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::length
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+24]

; 273  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?fromBoxBound@BoxSphereBound@Ogre@@QAEXABVBoxBound@2@@Z ENDP ; Ogre::BoxSphereBound::fromBoxBound
_TEXT	ENDS
PUBLIC	?getSphere@BoxSphereBound@Ogre@@QBE?AVSphereBound@2@XZ ; Ogre::BoxSphereBound::getSphere
; Function compile flags: /Odtp
;	COMDAT ?getSphere@BoxSphereBound@Ogre@@QBE?AVSphereBound@2@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_sphere$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?getSphere@BoxSphereBound@Ogre@@QBE?AVSphereBound@2@XZ PROC ; Ogre::BoxSphereBound::getSphere, COMDAT
; _this$ = ecx

; 276  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 			SphereBound sphere;

	lea	ecx, DWORD PTR _sphere$[ebp]
	call	??0SphereBound@Ogre@@QAE@XZ		; Ogre::SphereBound::SphereBound

; 278  : 			sphere.m_Center = m_Center;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sphere$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 279  : 			sphere.m_Radius = m_Radius;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+24]
	fstp	DWORD PTR _sphere$[ebp+12]

; 280  : 			return sphere;

	lea	edx, DWORD PTR _sphere$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0SphereBound@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 281  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getSphere@BoxSphereBound@Ogre@@QBE?AVSphereBound@2@XZ ENDP ; Ogre::BoxSphereBound::getSphere
_TEXT	ENDS
PUBLIC	?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ ; Ogre::BoxSphereBound::getBox
; Function compile flags: /Odtp
;	COMDAT ?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T73419 = -52						; size = 12
$T73418 = -40						; size = 12
_box$ = -28						; size = 28
___$ReturnUdt$ = 8					; size = 4
?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ PROC	; Ogre::BoxSphereBound::getBox, COMDAT
; _this$ = ecx

; 284  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 			BoxBound box;

	lea	ecx, DWORD PTR _box$[ebp]
	call	??0BoxBound@Ogre@@QAE@XZ		; Ogre::BoxBound::BoxBound

; 286  : 			box.m_MinPos = m_Center - m_Extent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T73418[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _box$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 287  : 			box.m_MaxPos = m_Center + m_Extent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T73419[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _box$[ebp+12]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 288  : 			box.m_isValid = true;

	mov	BYTE PTR _box$[ebp+24], 1

; 289  : 			return box;

	lea	eax, DWORD PTR _box$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0BoxBound@Ogre@@QAE@ABV01@@Z		; Ogre::BoxBound::BoxBound
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 290  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ ENDP	; Ogre::BoxSphereBound::getBox
_TEXT	ENDS
PUBLIC	?getMin@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ	; Ogre::BoxSphereBound::getMin
; Function compile flags: /Odtp
;	COMDAT ?getMin@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getMin@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::BoxSphereBound::getMin, COMDAT
; _this$ = ecx

; 310  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 311  : 			return m_Center-m_Extent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 312  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getMin@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::BoxSphereBound::getMin
_TEXT	ENDS
PUBLIC	?getMax@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ	; Ogre::BoxSphereBound::getMax
; Function compile flags: /Odtp
;	COMDAT ?getMax@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getMax@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::BoxSphereBound::getMax, COMDAT
; _this$ = ecx

; 315  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  : 			return m_Center+m_Extent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 317  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getMax@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::BoxSphereBound::getMax
_TEXT	ENDS
PUBLIC	?getCenter@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ ; Ogre::BoxSphereBound::getCenter
; Function compile flags: /Odtp
;	COMDAT ?getCenter@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCenter@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ PROC	; Ogre::BoxSphereBound::getCenter, COMDAT
; _this$ = ecx

; 320  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 321  : 			return m_Center;

	mov	eax, DWORD PTR _this$[ebp]

; 322  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getCenter@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ ENDP	; Ogre::BoxSphereBound::getCenter
_TEXT	ENDS
PUBLIC	?getExtension@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ ; Ogre::BoxSphereBound::getExtension
; Function compile flags: /Odtp
;	COMDAT ?getExtension@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getExtension@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ PROC ; Ogre::BoxSphereBound::getExtension, COMDAT
; _this$ = ecx

; 325  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 326  : 			return m_Extent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH

; 327  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getExtension@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ ENDP ; Ogre::BoxSphereBound::getExtension
_TEXT	ENDS
PUBLIC	??KOgre@@YA?AVVector3@0@ABV10@M@Z		; Ogre::operator/
PUBLIC	__real@40000000
PUBLIC	?fromBox@BoxSphereBound@Ogre@@QAEXABVVector3@2@0@Z ; Ogre::BoxSphereBound::fromBox
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?fromBox@BoxSphereBound@Ogre@@QAEXABVVector3@2@0@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T73433 = -48						; size = 12
$T73432 = -36						; size = 12
$T73431 = -24						; size = 12
$T73430 = -12						; size = 12
_minpt$ = 8						; size = 4
_maxpt$ = 12						; size = 4
?fromBox@BoxSphereBound@Ogre@@QAEXABVVector3@2@0@Z PROC	; Ogre::BoxSphereBound::fromBox, COMDAT
; _this$ = ecx

; 330  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 331  : 			m_Center = (minpt + maxpt)/2.0f;

	push	ecx
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _maxpt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _minpt$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T73430[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T73431[ebp]
	push	eax
	call	??KOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator/
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 332  : 			m_Extent = (maxpt - minpt)/2.0f;

	push	ecx
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _minpt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _maxpt$[ebp]
	push	edx
	lea	eax, DWORD PTR $T73432[ebp]
	push	eax
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T73433[ebp]
	push	ecx
	call	??KOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator/
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 333  : 			m_Radius = m_Extent.length();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?length@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::length
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+24]

; 334  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?fromBox@BoxSphereBound@Ogre@@QAEXABVVector3@2@0@Z ENDP	; Ogre::BoxSphereBound::fromBox
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ??KOgre@@YA?AVVector3@0@ABV10@M@Z
_TEXT	SEGMENT
tv87 = -12						; size = 4
tv85 = -8						; size = 4
tv83 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_s$ = 16						; size = 4
??KOgre@@YA?AVVector3@0@ABV10@M@Z PROC			; Ogre::operator/, COMDAT

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 200  : 		return Vector3(v1.x/s, v1.y/s, v1.z/s);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	fdiv	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx+4]
	fdiv	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv85[ebp]
	fld	DWORD PTR tv85[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx]
	fdiv	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv87[ebp]
	fld	DWORD PTR tv87[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 201  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??KOgre@@YA?AVVector3@0@ABV10@M@Z ENDP			; Ogre::operator/
_TEXT	ENDS
PUBLIC	?intersect@BoxSphereBound@Ogre@@QBE_NABV12@@Z	; Ogre::BoxSphereBound::intersect
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebounding.h
;	COMDAT ?intersect@BoxSphereBound@Ogre@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -60						; size = 4
_box1$ = -56						; size = 28
_box2$ = -28						; size = 28
_other$ = 8						; size = 4
?intersect@BoxSphereBound@Ogre@@QBE_NABV12@@Z PROC	; Ogre::BoxSphereBound::intersect, COMDAT
; _this$ = ecx

; 337  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 338  : 			BoxBound box1 = getBox();

	lea	eax, DWORD PTR _box1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ ; Ogre::BoxSphereBound::getBox

; 339  : 			BoxBound box2 = other.getBox();

	lea	ecx, DWORD PTR _box2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _other$[ebp]
	call	?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ ; Ogre::BoxSphereBound::getBox

; 340  : 			return box1.intersectBoxBound(box2);

	lea	edx, DWORD PTR _box2$[ebp]
	push	edx
	lea	ecx, DWORD PTR _box1$[ebp]
	call	?intersectBoxBound@BoxBound@Ogre@@QBE_NABV12@@Z ; Ogre::BoxBound::intersectBoxBound

; 341  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?intersect@BoxSphereBound@Ogre@@QBE_NABV12@@Z ENDP	; Ogre::BoxSphereBound::intersect
_TEXT	ENDS
PUBLIC	??0BoxSphereBound@Ogre@@QAE@ABV01@@Z		; Ogre::BoxSphereBound::BoxSphereBound
; Function compile flags: /Odtp
;	COMDAT ??0BoxSphereBound@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0BoxSphereBound@Ogre@@QAE@ABV01@@Z PROC		; Ogre::BoxSphereBound::BoxSphereBound, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+24]
	fstp	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BoxSphereBound@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::BoxSphereBound::BoxSphereBound
_TEXT	ENDS
PUBLIC	??4BoxSphereBound@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::BoxSphereBound::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BoxSphereBound@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BoxSphereBound@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BoxSphereBound::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+24]
	fstp	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BoxSphereBound@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BoxSphereBound::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@MovableObject@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::MovableObject::getRTTI
EXTRN	?m_RTTI@MovableObject@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::MovableObject::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremovableobject.h
;	COMDAT ?getRTTI@MovableObject@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@MovableObject@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::MovableObject::getRTTI, COMDAT
; _this$ = ecx

; 16   : 		DECLARE_RTTI_VIRTUAL(MovableObject)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@MovableObject@Ogre@@2VRuntimeClass@2@B ; Ogre::MovableObject::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@MovableObject@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::MovableObject::getRTTI
_TEXT	ENDS
PUBLIC	?enableUVMask@MovableObject@Ogre@@UAEX_N0@Z	; Ogre::MovableObject::enableUVMask
; Function compile flags: /Odtp
;	COMDAT ?enableUVMask@MovableObject@Ogre@@UAEX_N0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_enable$ = 8						; size = 1
_stdmtlUse$ = 12					; size = 1
?enableUVMask@MovableObject@Ogre@@UAEX_N0@Z PROC	; Ogre::MovableObject::enableUVMask, COMDAT
; _this$ = ecx

; 23   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 24   : 
; 25   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?enableUVMask@MovableObject@Ogre@@UAEX_N0@Z ENDP	; Ogre::MovableObject::enableUVMask
_TEXT	ENDS
PUBLIC	?setLiuGuangTexture@MovableObject@Ogre@@UAEXPAVTextureData@2@@Z ; Ogre::MovableObject::setLiuGuangTexture
; Function compile flags: /Odtp
;	COMDAT ?setLiuGuangTexture@MovableObject@Ogre@@UAEXPAVTextureData@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_texture$ = 8						; size = 4
?setLiuGuangTexture@MovableObject@Ogre@@UAEXPAVTextureData@2@@Z PROC ; Ogre::MovableObject::setLiuGuangTexture, COMDAT
; _this$ = ecx

; 28   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 29   : 
; 30   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setLiuGuangTexture@MovableObject@Ogre@@UAEXPAVTextureData@2@@Z ENDP ; Ogre::MovableObject::setLiuGuangTexture
_TEXT	ENDS
PUBLIC	?setLiuGuangTexture@MovableObject@Ogre@@UAEXPBD@Z ; Ogre::MovableObject::setLiuGuangTexture
; Function compile flags: /Odtp
;	COMDAT ?setLiuGuangTexture@MovableObject@Ogre@@UAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?setLiuGuangTexture@MovableObject@Ogre@@UAEXPBD@Z PROC	; Ogre::MovableObject::setLiuGuangTexture, COMDAT
; _this$ = ecx

; 33   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 
; 35   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setLiuGuangTexture@MovableObject@Ogre@@UAEXPBD@Z ENDP	; Ogre::MovableObject::setLiuGuangTexture
_TEXT	ENDS
PUBLIC	?SetForceShadowMapCull@MovableObject@Ogre@@UAEX_N@Z ; Ogre::MovableObject::SetForceShadowMapCull
; Function compile flags: /Odtp
;	COMDAT ?SetForceShadowMapCull@MovableObject@Ogre@@UAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cull$ = 8						; size = 1
?SetForceShadowMapCull@MovableObject@Ogre@@UAEX_N@Z PROC ; Ogre::MovableObject::SetForceShadowMapCull, COMDAT
; _this$ = ecx

; 39   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 40   : 			m_bForceShadowMapCull = cull;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _cull$[ebp]
	mov	BYTE PTR [eax+208], cl

; 41   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?SetForceShadowMapCull@MovableObject@Ogre@@UAEX_N@Z ENDP ; Ogre::MovableObject::SetForceShadowMapCull
_TEXT	ENDS
PUBLIC	?IsForceShadowMapCull@MovableObject@Ogre@@QAE_NXZ ; Ogre::MovableObject::IsForceShadowMapCull
; Function compile flags: /Odtp
;	COMDAT ?IsForceShadowMapCull@MovableObject@Ogre@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsForceShadowMapCull@MovableObject@Ogre@@QAE_NXZ PROC	; Ogre::MovableObject::IsForceShadowMapCull, COMDAT
; _this$ = ecx

; 44   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 			return m_bForceShadowMapCull;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+208]

; 46   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?IsForceShadowMapCull@MovableObject@Ogre@@QAE_NXZ ENDP	; Ogre::MovableObject::IsForceShadowMapCull
_TEXT	ENDS
PUBLIC	?resetUpdate@MovableObject@Ogre@@UAEX_NI@Z	; Ogre::MovableObject::resetUpdate
; Function compile flags: /Odtp
;	COMDAT ?resetUpdate@MovableObject@Ogre@@UAEX_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pause$ = 8						; size = 1
_tick$ = 12						; size = 4
?resetUpdate@MovableObject@Ogre@@UAEX_NI@Z PROC		; Ogre::MovableObject::resetUpdate, COMDAT
; _this$ = ecx

; 50   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 			m_bPause = pause;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _pause$[ebp]
	mov	BYTE PTR [eax+184], cl

; 52   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?resetUpdate@MovableObject@Ogre@@UAEX_NI@Z ENDP		; Ogre::MovableObject::resetUpdate
_TEXT	ENDS
PUBLIC	?getWorldMatrix@MovableObject@Ogre@@QAEABVMatrix4@2@XZ ; Ogre::MovableObject::getWorldMatrix
PUBLIC	?getAnchorWorldMatrix@MovableObject@Ogre@@UAE?AVMatrix4@2@H@Z ; Ogre::MovableObject::getAnchorWorldMatrix
EXTRN	??0Matrix4@Ogre@@QAE@ABV01@@Z:PROC		; Ogre::Matrix4::Matrix4
; Function compile flags: /Odtp
;	COMDAT ?getAnchorWorldMatrix@MovableObject@Ogre@@UAE?AVMatrix4@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_id$ = 12						; size = 4
?getAnchorWorldMatrix@MovableObject@Ogre@@UAE?AVMatrix4@2@H@Z PROC ; Ogre::MovableObject::getAnchorWorldMatrix, COMDAT
; _this$ = ecx

; 57   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 			return getWorldMatrix();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getWorldMatrix@MovableObject@Ogre@@QAEABVMatrix4@2@XZ ; Ogre::MovableObject::getWorldMatrix
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@Ogre@@QAE@ABV01@@Z		; Ogre::Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 59   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getAnchorWorldMatrix@MovableObject@Ogre@@UAE?AVMatrix4@2@H@Z ENDP ; Ogre::MovableObject::getAnchorWorldMatrix
_TEXT	ENDS
PUBLIC	?setPosition@MovableObject@Ogre@@QAEXABVWorldPos@2@@Z ; Ogre::MovableObject::setPosition
; Function compile flags: /Odtp
;	COMDAT ?setPosition@MovableObject@Ogre@@QAEXABVWorldPos@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?setPosition@MovableObject@Ogre@@QAEXABVWorldPos@2@@Z PROC ; Ogre::MovableObject::setPosition, COMDAT
; _this$ = ecx

; 65   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 			m_Position = pos;

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 67   : 			invalidWorldCache();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 68   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setPosition@MovableObject@Ogre@@QAEXABVWorldPos@2@@Z ENDP ; Ogre::MovableObject::setPosition
_TEXT	ENDS
PUBLIC	?setScale@MovableObject@Ogre@@QAEXABVVector3@2@@Z ; Ogre::MovableObject::setScale
; Function compile flags: /Odtp
;	COMDAT ?setScale@MovableObject@Ogre@@QAEXABVVector3@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_scale$ = 8						; size = 4
?setScale@MovableObject@Ogre@@QAEXABVVector3@2@@Z PROC	; Ogre::MovableObject::setScale, COMDAT
; _this$ = ecx

; 70   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 			m_Scale = scale;

	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 72   : 			invalidWorldCache();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 73   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setScale@MovableObject@Ogre@@QAEXABVVector3@2@@Z ENDP	; Ogre::MovableObject::setScale
_TEXT	ENDS
PUBLIC	?setRotation@MovableObject@Ogre@@QAEXABVQuaternion@2@@Z ; Ogre::MovableObject::setRotation
; Function compile flags: /Odtp
;	COMDAT ?setRotation@MovableObject@Ogre@@QAEXABVQuaternion@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rot$ = 8						; size = 4
?setRotation@MovableObject@Ogre@@QAEXABVQuaternion@2@@Z PROC ; Ogre::MovableObject::setRotation, COMDAT
; _this$ = ecx

; 75   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 76   : 			m_Rotation = rot;

	mov	eax, DWORD PTR _rot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::Quaternion::operator=

; 77   : 			invalidWorldCache();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 78   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setRotation@MovableObject@Ogre@@QAEXABVQuaternion@2@@Z ENDP ; Ogre::MovableObject::setRotation
_TEXT	ENDS
PUBLIC	?setRotation@MovableObject@Ogre@@QAEXMMM@Z	; Ogre::MovableObject::setRotation
EXTRN	?setEulerAngle@Quaternion@Ogre@@QAEXMMM@Z:PROC	; Ogre::Quaternion::setEulerAngle
; Function compile flags: /Odtp
;	COMDAT ?setRotation@MovableObject@Ogre@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_yaw$ = 8						; size = 4
_pitch$ = 12						; size = 4
_roll$ = 16						; size = 4
?setRotation@MovableObject@Ogre@@QAEXMMM@Z PROC		; Ogre::MovableObject::setRotation, COMDAT
; _this$ = ecx

; 80   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 			m_Rotation.setEulerAngle(yaw, pitch, roll);

	push	ecx
	fld	DWORD PTR _roll$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _pitch$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _yaw$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?setEulerAngle@Quaternion@Ogre@@QAEXMMM@Z ; Ogre::Quaternion::setEulerAngle

; 82   : 			invalidWorldCache();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 83   : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setRotation@MovableObject@Ogre@@QAEXMMM@Z ENDP		; Ogre::MovableObject::setRotation
_TEXT	ENDS
PUBLIC	?getPosition@MovableObject@Ogre@@QBEABVWorldPos@2@XZ ; Ogre::MovableObject::getPosition
; Function compile flags: /Odtp
;	COMDAT ?getPosition@MovableObject@Ogre@@QBEABVWorldPos@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPosition@MovableObject@Ogre@@QBEABVWorldPos@2@XZ PROC ; Ogre::MovableObject::getPosition, COMDAT
; _this$ = ecx

; 85   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 			return m_Position;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8

; 87   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getPosition@MovableObject@Ogre@@QBEABVWorldPos@2@XZ ENDP ; Ogre::MovableObject::getPosition
_TEXT	ENDS
PUBLIC	?getScale@MovableObject@Ogre@@QBEABVVector3@2@XZ ; Ogre::MovableObject::getScale
; Function compile flags: /Odtp
;	COMDAT ?getScale@MovableObject@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getScale@MovableObject@Ogre@@QBEABVVector3@2@XZ PROC	; Ogre::MovableObject::getScale, COMDAT
; _this$ = ecx

; 89   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 			return m_Scale;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H

; 91   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getScale@MovableObject@Ogre@@QBEABVVector3@2@XZ ENDP	; Ogre::MovableObject::getScale
_TEXT	ENDS
PUBLIC	?getRotation@MovableObject@Ogre@@QBEABVQuaternion@2@XZ ; Ogre::MovableObject::getRotation
; Function compile flags: /Odtp
;	COMDAT ?getRotation@MovableObject@Ogre@@QBEABVQuaternion@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRotation@MovableObject@Ogre@@QBEABVQuaternion@2@XZ PROC ; Ogre::MovableObject::getRotation, COMDAT
; _this$ = ecx

; 93   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 94   : 			return m_Rotation;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H

; 95   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRotation@MovableObject@Ogre@@QBEABVQuaternion@2@XZ ENDP ; Ogre::MovableObject::getRotation
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getWorldMatrix@MovableObject@Ogre@@QAEABVMatrix4@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWorldMatrix@MovableObject@Ogre@@QAEABVMatrix4@2@XZ PROC ; Ogre::MovableObject::getWorldMatrix, COMDAT
; _this$ = ecx

; 97   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 			if(m_bWorldCacheInvalid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+180]
	test	ecx, ecx
	je	SHORT $LN1@getWorldMa

; 99   : 			{
; 100  : 				updateWorldCache();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+72]
	call	edx
$LN1@getWorldMa:

; 101  : 			}
; 102  : 
; 103  : 			return m_WorldTM;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H

; 104  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldMatrix@MovableObject@Ogre@@QAEABVMatrix4@2@XZ ENDP ; Ogre::MovableObject::getWorldMatrix
_TEXT	ENDS
PUBLIC	?getWorldPosition@MovableObject@Ogre@@QAE?BVVector3@2@XZ ; Ogre::MovableObject::getWorldPosition
; Function compile flags: /Odtp
;	COMDAT ?getWorldPosition@MovableObject@Ogre@@QAE?BVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getWorldPosition@MovableObject@Ogre@@QAE?BVVector3@2@XZ PROC ; Ogre::MovableObject::getWorldPosition, COMDAT
; _this$ = ecx

; 106  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 107  : 			return getWorldMatrix().getTranslate();

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getWorldMatrix@MovableObject@Ogre@@QAEABVMatrix4@2@XZ ; Ogre::MovableObject::getWorldMatrix
	mov	ecx, eax
	call	?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ ; Ogre::Matrix4::getTranslate
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 108  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getWorldPosition@MovableObject@Ogre@@QAE?BVVector3@2@XZ ENDP ; Ogre::MovableObject::getWorldPosition
_TEXT	ENDS
PUBLIC	?getWorldBounds@MovableObject@Ogre@@QAEABVBoxSphereBound@2@XZ ; Ogre::MovableObject::getWorldBounds
; Function compile flags: /Odtp
;	COMDAT ?getWorldBounds@MovableObject@Ogre@@QAEABVBoxSphereBound@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWorldBounds@MovableObject@Ogre@@QAEABVBoxSphereBound@2@XZ PROC ; Ogre::MovableObject::getWorldBounds, COMDAT
; _this$ = ecx

; 110  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 111  : 			if(m_bWorldCacheInvalid)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+180]
	test	ecx, ecx
	je	SHORT $LN1@getWorldBo

; 112  : 			{
; 113  : 				updateWorldCache();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+72]
	call	edx
$LN1@getWorldBo:

; 114  : 			}
; 115  : 
; 116  : 			return m_WorldBounds;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 140				; 0000008cH

; 117  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldBounds@MovableObject@Ogre@@QAEABVBoxSphereBound@2@XZ ENDP ; Ogre::MovableObject::getWorldBounds
_TEXT	ENDS
PUBLIC	?show@MovableObject@Ogre@@QAEX_N@Z		; Ogre::MovableObject::show
; Function compile flags: /Odtp
;	COMDAT ?show@MovableObject@Ogre@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 1
?show@MovableObject@Ogre@@QAEX_N@Z PROC			; Ogre::MovableObject::show, COMDAT
; _this$ = ecx

; 119  : 		void show(bool b){m_bShow = b;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+183], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?show@MovableObject@Ogre@@QAEX_N@Z ENDP			; Ogre::MovableObject::show
_TEXT	ENDS
PUBLIC	?isShow@MovableObject@Ogre@@QAE_NXZ		; Ogre::MovableObject::isShow
; Function compile flags: /Odtp
;	COMDAT ?isShow@MovableObject@Ogre@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isShow@MovableObject@Ogre@@QAE_NXZ PROC		; Ogre::MovableObject::isShow, COMDAT
; _this$ = ecx

; 120  : 		bool isShow(){return m_bShow;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+183]
	mov	esp, ebp
	pop	ebp
	ret	0
?isShow@MovableObject@Ogre@@QAE_NXZ ENDP		; Ogre::MovableObject::isShow
_TEXT	ENDS
PUBLIC	?getScene@MovableObject@Ogre@@QAEPAVGameScene@2@XZ ; Ogre::MovableObject::getScene
; Function compile flags: /Odtp
;	COMDAT ?getScene@MovableObject@Ogre@@QAEPAVGameScene@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getScene@MovableObject@Ogre@@QAEPAVGameScene@2@XZ PROC	; Ogre::MovableObject::getScene, COMDAT
; _this$ = ecx

; 123  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 			return m_pScene;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]

; 125  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getScene@MovableObject@Ogre@@QAEPAVGameScene@2@XZ ENDP	; Ogre::MovableObject::getScene
_TEXT	ENDS
PUBLIC	?getSceneContainer@MovableObject@Ogre@@QAEPAXXZ	; Ogre::MovableObject::getSceneContainer
; Function compile flags: /Odtp
;	COMDAT ?getSceneContainer@MovableObject@Ogre@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSceneContainer@MovableObject@Ogre@@QAEPAXXZ PROC	; Ogre::MovableObject::getSceneContainer, COMDAT
; _this$ = ecx

; 128  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 			return m_pSceneContainer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]

; 130  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getSceneContainer@MovableObject@Ogre@@QAEPAXXZ ENDP	; Ogre::MovableObject::getSceneContainer
_TEXT	ENDS
PUBLIC	?setScene@MovableObject@Ogre@@QAEXPAVGameScene@2@@Z ; Ogre::MovableObject::setScene
; Function compile flags: /Odtp
;	COMDAT ?setScene@MovableObject@Ogre@@QAEXPAVGameScene@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pscene$ = 8						; size = 4
?setScene@MovableObject@Ogre@@QAEXPAVGameScene@2@@Z PROC ; Ogre::MovableObject::setScene, COMDAT
; _this$ = ecx

; 133  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 			m_pScene = pscene;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pscene$[ebp]
	mov	DWORD PTR [eax+192], ecx

; 135  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setScene@MovableObject@Ogre@@QAEXPAVGameScene@2@@Z ENDP ; Ogre::MovableObject::setScene
_TEXT	ENDS
PUBLIC	?setSceneContainer@MovableObject@Ogre@@QAEXPAX@Z ; Ogre::MovableObject::setSceneContainer
; Function compile flags: /Odtp
;	COMDAT ?setSceneContainer@MovableObject@Ogre@@QAEXPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?setSceneContainer@MovableObject@Ogre@@QAEXPAX@Z PROC	; Ogre::MovableObject::setSceneContainer, COMDAT
; _this$ = ecx

; 138  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 139  : 			m_pSceneContainer = p;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+196], ecx

; 140  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setSceneContainer@MovableObject@Ogre@@QAEXPAX@Z ENDP	; Ogre::MovableObject::setSceneContainer
_TEXT	ENDS
PUBLIC	?setPickParam@MovableObject@Ogre@@QAEXIPAV12@@Z	; Ogre::MovableObject::setPickParam
; Function compile flags: /Odtp
;	COMDAT ?setPickParam@MovableObject@Ogre@@QAEXIPAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type$ = 8						; size = 4
_pick_owner$ = 12					; size = 4
?setPickParam@MovableObject@Ogre@@QAEXIPAV12@@Z PROC	; Ogre::MovableObject::setPickParam, COMDAT
; _this$ = ecx

; 143  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 			m_PickType = type;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax+200], ecx

; 145  : 			m_pPickOwner = pick_owner;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pick_owner$[ebp]
	mov	DWORD PTR [edx+204], eax

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setPickParam@MovableObject@Ogre@@QAEXIPAV12@@Z ENDP	; Ogre::MovableObject::setPickParam
_TEXT	ENDS
PUBLIC	?getPickType@MovableObject@Ogre@@QAEIXZ		; Ogre::MovableObject::getPickType
; Function compile flags: /Odtp
;	COMDAT ?getPickType@MovableObject@Ogre@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPickType@MovableObject@Ogre@@QAEIXZ PROC		; Ogre::MovableObject::getPickType, COMDAT
; _this$ = ecx

; 149  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 150  : 			return m_PickType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+200]

; 151  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getPickType@MovableObject@Ogre@@QAEIXZ ENDP		; Ogre::MovableObject::getPickType
_TEXT	ENDS
PUBLIC	?getPickOwner@MovableObject@Ogre@@QAEPAV12@XZ	; Ogre::MovableObject::getPickOwner
; Function compile flags: /Odtp
;	COMDAT ?getPickOwner@MovableObject@Ogre@@QAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPickOwner@MovableObject@Ogre@@QAEPAV12@XZ PROC	; Ogre::MovableObject::getPickOwner, COMDAT
; _this$ = ecx

; 154  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 			return m_pPickOwner;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+204]

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getPickOwner@MovableObject@Ogre@@QAEPAV12@XZ ENDP	; Ogre::MovableObject::getPickOwner
_TEXT	ENDS
PUBLIC	?isSceneAttached@MovableObject@Ogre@@QAE_NXZ	; Ogre::MovableObject::isSceneAttached
; Function compile flags: /Odtp
;	COMDAT ?isSceneAttached@MovableObject@Ogre@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isSceneAttached@MovableObject@Ogre@@QAE_NXZ PROC	; Ogre::MovableObject::isSceneAttached, COMDAT
; _this$ = ecx

; 159  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 			return m_bSceneAttached;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+182]

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?isSceneAttached@MovableObject@Ogre@@QAE_NXZ ENDP	; Ogre::MovableObject::isSceneAttached
_TEXT	ENDS
PUBLIC	?setFather@MovableObject@Ogre@@QAEXPAV12@@Z	; Ogre::MovableObject::setFather
; Function compile flags: /Odtp
;	COMDAT ?setFather@MovableObject@Ogre@@QAEXPAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pfather$ = 8						; size = 4
?setFather@MovableObject@Ogre@@QAEXPAV12@@Z PROC	; Ogre::MovableObject::setFather, COMDAT
; _this$ = ecx

; 164  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 			m_pFather = pfather;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pfather$[ebp]
	mov	DWORD PTR [eax+176], ecx

; 166  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setFather@MovableObject@Ogre@@QAEXPAV12@@Z ENDP	; Ogre::MovableObject::setFather
_TEXT	ENDS
PUBLIC	?getFather@MovableObject@Ogre@@QAEPAV12@XZ	; Ogre::MovableObject::getFather
; Function compile flags: /Odtp
;	COMDAT ?getFather@MovableObject@Ogre@@QAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFather@MovableObject@Ogre@@QAEPAV12@XZ PROC		; Ogre::MovableObject::getFather, COMDAT
; _this$ = ecx

; 169  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 			return m_pFather;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+176]

; 171  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getFather@MovableObject@Ogre@@QAEPAV12@XZ ENDP		; Ogre::MovableObject::getFather
_TEXT	ENDS
PUBLIC	?getSRTFather@MovableObject@Ogre@@QAEPAV12@XZ	; Ogre::MovableObject::getSRTFather
; Function compile flags: /Odtp
;	COMDAT ?getSRTFather@MovableObject@Ogre@@QAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSRTFather@MovableObject@Ogre@@QAEPAV12@XZ PROC	; Ogre::MovableObject::getSRTFather, COMDAT
; _this$ = ecx

; 174  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 			return m_pSRTFather;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+168]

; 176  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getSRTFather@MovableObject@Ogre@@QAEPAV12@XZ ENDP	; Ogre::MovableObject::getSRTFather
_TEXT	ENDS
PUBLIC	?setTransparent@MovableObject@Ogre@@QAEXM@Z	; Ogre::MovableObject::setTransparent
; Function compile flags: /Odtp
;	COMDAT ?setTransparent@MovableObject@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_alpha$ = 8						; size = 4
?setTransparent@MovableObject@Ogre@@QAEXM@Z PROC	; Ogre::MovableObject::setTransparent, COMDAT
; _this$ = ecx

; 179  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 180  : 			m_Transparent = alpha;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _alpha$[ebp]
	fstp	DWORD PTR [eax+188]

; 181  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setTransparent@MovableObject@Ogre@@QAEXM@Z ENDP	; Ogre::MovableObject::setTransparent
_TEXT	ENDS
PUBLIC	?getLocalTransparent@MovableObject@Ogre@@QAEMXZ	; Ogre::MovableObject::getLocalTransparent
; Function compile flags: /Odtp
;	COMDAT ?getLocalTransparent@MovableObject@Ogre@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLocalTransparent@MovableObject@Ogre@@QAEMXZ PROC	; Ogre::MovableObject::getLocalTransparent, COMDAT
; _this$ = ecx

; 184  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 			return m_Transparent;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+188]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getLocalTransparent@MovableObject@Ogre@@QAEMXZ ENDP	; Ogre::MovableObject::getLocalTransparent
_TEXT	ENDS
PUBLIC	?getTransparent@MovableObject@Ogre@@QAEMXZ	; Ogre::MovableObject::getTransparent
; Function compile flags: /Odtp
;	COMDAT ?getTransparent@MovableObject@Ogre@@QAEMXZ
_TEXT	SEGMENT
tv81 = -8						; size = 4
_this$ = -4						; size = 4
?getTransparent@MovableObject@Ogre@@QAEMXZ PROC		; Ogre::MovableObject::getTransparent, COMDAT
; _this$ = ecx

; 189  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 			if(m_pFather) return m_pFather->getTransparent()*m_Transparent;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	je	SHORT $LN2@getTranspa
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+176]
	call	?getTransparent@MovableObject@Ogre@@QAEMXZ ; Ogre::MovableObject::getTransparent
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+188]
	fstp	DWORD PTR tv81[ebp]
	fld	DWORD PTR tv81[ebp]
	jmp	SHORT $LN1@getTranspa
	jmp	SHORT $LN1@getTranspa
$LN2@getTranspa:

; 191  : 			else return m_Transparent;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+188]
$LN1@getTranspa:

; 192  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getTransparent@MovableObject@Ogre@@QAEMXZ ENDP		; Ogre::MovableObject::getTransparent
_TEXT	ENDS
PUBLIC	??_7MovableObject@Ogre@@6B@			; Ogre::MovableObject::`vftable'
PUBLIC	??0MovableObject@Ogre@@QAE@ABV01@@Z		; Ogre::MovableObject::MovableObject
PUBLIC	??_R4MovableObject@Ogre@@6B@			; Ogre::MovableObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMovableObject@Ogre@@@8			; Ogre::MovableObject `RTTI Type Descriptor'
PUBLIC	??_R3MovableObject@Ogre@@8			; Ogre::MovableObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MovableObject@Ogre@@8			; Ogre::MovableObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MovableObject@Ogre@@8		; Ogre::MovableObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EMovableObject@Ogre@@UAEPAXI@Z		; Ogre::MovableObject::`vector deleting destructor'
EXTRN	?update@MovableObject@Ogre@@UAEXI@Z:PROC	; Ogre::MovableObject::update
EXTRN	?attachToScene@MovableObject@Ogre@@UAEXPAVGameScene@2@_N@Z:PROC ; Ogre::MovableObject::attachToScene
EXTRN	?detachFromScene@MovableObject@Ogre@@UAEXXZ:PROC ; Ogre::MovableObject::detachFromScene
EXTRN	?intersectRay@MovableObject@Ogre@@UAE_NW4IntersectType@2@ABVRay@2@PAM@Z:PROC ; Ogre::MovableObject::intersectRay
EXTRN	?invalidWorldCache@MovableObject@Ogre@@UAEXXZ:PROC ; Ogre::MovableObject::invalidWorldCache
EXTRN	?updateWorldCache@MovableObject@Ogre@@UAEXXZ:PROC ; Ogre::MovableObject::updateWorldCache
;	COMDAT ??_R1A@?0A@EA@MovableObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MovableObject@Ogre@@8 DD FLAT:??_R0?AVMovableObject@Ogre@@@8 ; Ogre::MovableObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MovableObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MovableObject@Ogre@@8
rdata$r	SEGMENT
??_R2MovableObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MovableObject@Ogre@@8 ; Ogre::MovableObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3MovableObject@Ogre@@8
rdata$r	SEGMENT
??_R3MovableObject@Ogre@@8 DD 00H			; Ogre::MovableObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2MovableObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMovableObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMovableObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MovableObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMovableObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MovableObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4MovableObject@Ogre@@6B@ DD 00H			; Ogre::MovableObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMovableObject@Ogre@@@8
	DD	FLAT:??_R3MovableObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7MovableObject@Ogre@@6B@
CONST	SEGMENT
??_7MovableObject@Ogre@@6B@ DD FLAT:??_R4MovableObject@Ogre@@6B@ ; Ogre::MovableObject::`vftable'
	DD	FLAT:?getRTTI@MovableObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EMovableObject@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?enableUVMask@MovableObject@Ogre@@UAEX_N0@Z
	DD	FLAT:?setLiuGuangTexture@MovableObject@Ogre@@UAEXPBD@Z
	DD	FLAT:?setLiuGuangTexture@MovableObject@Ogre@@UAEXPAVTextureData@2@@Z
	DD	FLAT:?SetForceShadowMapCull@MovableObject@Ogre@@UAEX_N@Z
	DD	FLAT:?update@MovableObject@Ogre@@UAEXI@Z
	DD	FLAT:?resetUpdate@MovableObject@Ogre@@UAEX_NI@Z
	DD	FLAT:?attachToScene@MovableObject@Ogre@@UAEXPAVGameScene@2@_N@Z
	DD	FLAT:?detachFromScene@MovableObject@Ogre@@UAEXXZ
	DD	FLAT:?intersectRay@MovableObject@Ogre@@UAE_NW4IntersectType@2@ABVRay@2@PAM@Z
	DD	FLAT:?getAnchorWorldMatrix@MovableObject@Ogre@@UAE?AVMatrix4@2@H@Z
	DD	FLAT:?invalidWorldCache@MovableObject@Ogre@@UAEXXZ
	DD	FLAT:?updateWorldCache@MovableObject@Ogre@@UAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0MovableObject@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MovableObject@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0MovableObject@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0MovableObject@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0MovableObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0MovableObject@Ogre@@QAE@ABV01@@Z PROC		; Ogre::MovableObject::MovableObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MovableObject@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7MovableObject@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0Matrix4@Ogre@@QAE@ABV01@@Z		; Ogre::Matrix4::Matrix4
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0BoxBound@Ogre@@QAE@ABV01@@Z		; Ogre::BoxBound::BoxBound
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 140				; 0000008cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??0BoxSphereBound@Ogre@@QAE@ABV01@@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	mov	DWORD PTR [edx+168], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	mov	DWORD PTR [edx+172], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	DWORD PTR [edx+176], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+180]
	mov	BYTE PTR [edx+180], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+181]
	mov	BYTE PTR [edx+181], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+182]
	mov	BYTE PTR [edx+182], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+183]
	mov	BYTE PTR [edx+183], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+184]
	mov	BYTE PTR [edx+184], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+188]
	fstp	DWORD PTR [edx+188]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+192]
	mov	DWORD PTR [ecx+192], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+196]
	mov	DWORD PTR [ecx+196], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+200]
	mov	DWORD PTR [ecx+200], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+204]
	mov	DWORD PTR [ecx+204], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+208]
	mov	BYTE PTR [ecx+208], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MovableObject@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__ehhandler$??0MovableObject@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MovableObject@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MovableObject@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::MovableObject::MovableObject
PUBLIC	??4MovableObject@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MovableObject::operator=
EXTRN	??4Matrix4@Ogre@@QAEABV01@ABV01@@Z:PROC		; Ogre::Matrix4::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MovableObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MovableObject@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::MovableObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::Quaternion::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??4Matrix4@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Matrix4::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 140				; 0000008cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??4BoxSphereBound@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+168]
	mov	DWORD PTR [ecx+168], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+172]
	mov	DWORD PTR [ecx+172], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	DWORD PTR [ecx+176], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+180]
	mov	BYTE PTR [ecx+180], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+181]
	mov	BYTE PTR [ecx+181], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+182]
	mov	BYTE PTR [ecx+182], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+183]
	mov	BYTE PTR [ecx+183], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+184]
	mov	BYTE PTR [ecx+184], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [edx+188]
	fstp	DWORD PTR [ecx+188]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	mov	DWORD PTR [eax+192], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	mov	DWORD PTR [eax+196], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	DWORD PTR [eax+200], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	DWORD PTR [eax+204], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+208]
	mov	BYTE PTR [eax+208], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MovableObject@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::MovableObject::operator=
_TEXT	ENDS
PUBLIC	??_GMovableObject@Ogre@@UAEPAXI@Z		; Ogre::MovableObject::`scalar deleting destructor'
EXTRN	??1MovableObject@Ogre@@UAE@XZ:PROC		; Ogre::MovableObject::~MovableObject
; Function compile flags: /Odtp
;	COMDAT ??_GMovableObject@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMovableObject@Ogre@@UAEPAXI@Z PROC			; Ogre::MovableObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MovableObject@Ogre@@UAE@XZ		; Ogre::MovableObject::~MovableObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	push	212					; 000000d4H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMovableObject@Ogre@@UAEPAXI@Z ENDP			; Ogre::MovableObject::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EMovableObject@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMovableObject@Ogre@@UAEPAXI@Z PROC			; Ogre::MovableObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@9
	push	OFFSET ??1MovableObject@Ogre@@UAE@XZ	; Ogre::MovableObject::~MovableObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	212					; 000000d4H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@9
	push	212					; 000000d4H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@9:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@9
$LN3@vector@9:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MovableObject@Ogre@@UAE@XZ		; Ogre::MovableObject::~MovableObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@9
	push	212					; 000000d4H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@9:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@9:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMovableObject@Ogre@@UAEPAXI@Z ENDP			; Ogre::MovableObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z	; Ogre::FixedString::handle2Ptr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrefixedstring.h
;	COMDAT ?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z PROC		; Ogre::FixedString::handle2Ptr, COMDAT

; 22   : 		{

	push	ebp
	mov	ebp, esp

; 23   : 			return (const char *)h;

	mov	eax, DWORD PTR _h$[ebp]

; 24   : 		}

	pop	ebp
	ret	0
?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z ENDP		; Ogre::FixedString::handle2Ptr
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@XZ			; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FixedString@Ogre@@QAE@XZ PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 27   : 		FixedString() : m_StrHandle(NULL){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0FixedString@Ogre@@QAE@XZ ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PAX@Z			; Ogre::FixedString::FixedString
EXTRN	?addRef@FixedString@Ogre@@SAXPAX@Z:PROC		; Ogre::FixedString::addRef
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_h$ = 8							; size = 4
??0FixedString@Ogre@@QAE@PAX@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 29   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax], ecx

; 30   : 			addRef(h);

	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	call	?addRef@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::addRef
	add	esp, 4

; 31   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@PAX@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@ABV01@@Z		; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0FixedString@Ogre@@QAE@ABV01@@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 34   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 35   : 			addRef(m_StrHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?addRef@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::addRef
	add	esp, 4

; 36   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PBD@Z			; Ogre::FixedString::FixedString
EXTRN	?insert@FixedString@Ogre@@SAPAXPBDH@Z:PROC	; Ogre::FixedString::insert
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstr$ = 8						; size = 4
??0FixedString@Ogre@@QAE@PBD@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 38   : 		FixedString(const char *pstr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 		{
; 40   : 			m_StrHandle = insert(pstr); 

	push	-1
	mov	eax, DWORD PTR _pstr$[ebp]
	push	eax
	call	?insert@FixedString@Ogre@@SAPAXPBDH@Z	; Ogre::FixedString::insert
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 41   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@PBD@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PBDI@Z			; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstr$ = 8						; size = 4
_len$ = 12						; size = 4
??0FixedString@Ogre@@QAE@PBDI@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 43   : 		FixedString(const char *pstr, size_t len)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 		{
; 45   : 			m_StrHandle = insert(pstr, (int)len); 

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pstr$[ebp]
	push	ecx
	call	?insert@FixedString@Ogre@@SAPAXPBDH@Z	; Ogre::FixedString::insert
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 46   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0FixedString@Ogre@@QAE@PBDI@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??1FixedString@Ogre@@QAE@XZ			; Ogre::FixedString::~FixedString
EXTRN	?release@FixedString@Ogre@@SAXPAX@Z:PROC	; Ogre::FixedString::release
; Function compile flags: /Odtp
;	COMDAT ??1FixedString@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FixedString@Ogre@@QAE@XZ PROC			; Ogre::FixedString::~FixedString, COMDAT
; _this$ = ecx

; 49   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 			release(m_StrHandle); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?release@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::release
	add	esp, 4

; 51   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1FixedString@Ogre@@QAE@XZ ENDP			; Ogre::FixedString::~FixedString
_TEXT	ENDS
PUBLIC	??BFixedString@Ogre@@QBEPBDXZ			; Ogre::FixedString::operator char const *
; Function compile flags: /Odtp
;	COMDAT ??BFixedString@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BFixedString@Ogre@@QBEPBDXZ PROC			; Ogre::FixedString::operator char const *, COMDAT
; _this$ = ecx

; 54   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 			return handle2Ptr(m_StrHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z ; Ogre::FixedString::handle2Ptr
	add	esp, 4

; 56   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BFixedString@Ogre@@QBEPBDXZ ENDP			; Ogre::FixedString::operator char const *
_TEXT	ENDS
PUBLIC	?getHandle@FixedString@Ogre@@QBEPAXXZ		; Ogre::FixedString::getHandle
; Function compile flags: /Odtp
;	COMDAT ?getHandle@FixedString@Ogre@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHandle@FixedString@Ogre@@QBEPAXXZ PROC		; Ogre::FixedString::getHandle, COMDAT
; _this$ = ecx

; 59   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 			return m_StrHandle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 61   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getHandle@FixedString@Ogre@@QBEPAXXZ ENDP		; Ogre::FixedString::getHandle
_TEXT	ENDS
PUBLIC	?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ	; Ogre::Resource::getRTTI
EXTRN	?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B:BYTE	; Ogre::Resource::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreresource.h
;	COMDAT ?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::Resource::getRTTI, COMDAT
; _this$ = ecx

; 39   : 		DECLARE_RTTI_VIRTUAL(Resource)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B ; Ogre::Resource::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::Resource::getRTTI
_TEXT	ENDS
PUBLIC	?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ ; Ogre::Resource::getResPath
; Function compile flags: /Odtp
;	COMDAT ?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ PROC	; Ogre::Resource::getResPath, COMDAT
; _this$ = ecx

; 44   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 			return m_ResPath;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8

; 46   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ ENDP	; Ogre::Resource::getResPath
_TEXT	ENDS
PUBLIC	?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z ; Ogre::Resource::setResPath
EXTRN	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z:PROC	; Ogre::FixedString::operator=
; Function compile flags: /Odtp
;	COMDAT ?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_path$ = 8						; size = 4
?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z PROC	; Ogre::Resource::setResPath, COMDAT
; _this$ = ecx

; 48   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 			m_ResPath = path;

	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=

; 50   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z ENDP	; Ogre::Resource::setResPath
_TEXT	ENDS
PUBLIC	??_7Resource@Ogre@@6B@				; Ogre::Resource::`vftable'
PUBLIC	??0Resource@Ogre@@IAE@XZ			; Ogre::Resource::Resource
PUBLIC	??_R4Resource@Ogre@@6B@				; Ogre::Resource::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVResource@Ogre@@@8			; Ogre::Resource `RTTI Type Descriptor'
PUBLIC	??_R3Resource@Ogre@@8				; Ogre::Resource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Resource@Ogre@@8				; Ogre::Resource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Resource@Ogre@@8			; Ogre::Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EResource@Ogre@@MAEPAXI@Z			; Ogre::Resource::`vector deleting destructor'
EXTRN	?release@Resource@Ogre@@UAEXXZ:PROC		; Ogre::Resource::release
EXTRN	?addRef@Resource@Ogre@@UAEXXZ:PROC		; Ogre::Resource::addRef
EXTRN	?getRefCount@Resource@Ogre@@UAEHXZ:PROC		; Ogre::Resource::getRefCount
;	COMDAT ??_R1A@?0A@EA@Resource@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Resource@Ogre@@8 DD FLAT:??_R0?AVResource@Ogre@@@8 ; Ogre::Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Resource@Ogre@@8
rdata$r	SEGMENT
??_R2Resource@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Resource@Ogre@@8 ; Ogre::Resource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3Resource@Ogre@@8
rdata$r	SEGMENT
??_R3Resource@Ogre@@8 DD 00H				; Ogre::Resource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVResource@Ogre@@@8
_DATA	SEGMENT
??_R0?AVResource@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Resource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVResource@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Resource@Ogre@@6B@
rdata$r	SEGMENT
??_R4Resource@Ogre@@6B@ DD 00H				; Ogre::Resource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVResource@Ogre@@@8
	DD	FLAT:??_R3Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Resource@Ogre@@6B@
CONST	SEGMENT
??_7Resource@Ogre@@6B@ DD FLAT:??_R4Resource@Ogre@@6B@	; Ogre::Resource::`vftable'
	DD	FLAT:?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EResource@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Resource@Ogre@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@IAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@IAE@XZ$1
__ehfuncinfo$??0Resource@Ogre@@IAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Resource@Ogre@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Resource@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Resource@Ogre@@IAE@XZ PROC				; Ogre::Resource::Resource, COMDAT
; _this$ = ecx

; 72   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Resource@Ogre@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@IAE@XZ		; Ogre::BaseObject::BaseObject
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 1

; 73   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Resource@Ogre@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0Resource@Ogre@@IAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0Resource@Ogre@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Resource@Ogre@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Resource@Ogre@@IAE@XZ ENDP				; Ogre::Resource::Resource
PUBLIC	??1Resource@Ogre@@MAE@XZ			; Ogre::Resource::~Resource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Resource@Ogre@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Resource@Ogre@@MAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1Resource@Ogre@@MAE@XZ$1
__ehfuncinfo$??1Resource@Ogre@@MAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1Resource@Ogre@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1Resource@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Resource@Ogre@@MAE@XZ PROC				; Ogre::Resource::~Resource, COMDAT
; _this$ = ecx

; 76   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Resource@Ogre@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 77   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Resource@Ogre@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??1Resource@Ogre@@MAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??1Resource@Ogre@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Resource@Ogre@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Resource@Ogre@@MAE@XZ ENDP				; Ogre::Resource::~Resource
PUBLIC	??0Resource@Ogre@@QAE@ABV01@@Z			; Ogre::Resource::Resource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Resource@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$1
__ehfuncinfo$??0Resource@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Resource@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Resource@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Resource@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Resource::Resource, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Resource@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7Resource@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0FixedString@Ogre@@QAE@ABV01@@Z	; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0Resource@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Resource@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Resource@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Resource::Resource
PUBLIC	??4Resource@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Resource::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Resource@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Resource@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::Resource::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Resource@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::Resource::operator=
_TEXT	ENDS
PUBLIC	??_GResource@Ogre@@MAEPAXI@Z			; Ogre::Resource::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GResource@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GResource@Ogre@@MAEPAXI@Z PROC			; Ogre::Resource::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@10
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@10:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GResource@Ogre@@MAEPAXI@Z ENDP			; Ogre::Resource::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EResource@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EResource@Ogre@@MAEPAXI@Z PROC			; Ogre::Resource::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@10
	push	OFFSET ??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@10
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@10:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@10
$LN3@vector@10:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@10
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@10:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@10:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EResource@Ogre@@MAEPAXI@Z ENDP			; Ogre::Resource::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::VertexBuffer::getRTTI
EXTRN	?m_RTTI@VertexBuffer@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::VertexBuffer::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrerendertypes.h
;	COMDAT ?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::VertexBuffer::getRTTI, COMDAT
; _this$ = ecx

; 223  : 		DECLARE_RTTI_VIRTUAL(VertexBuffer)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@VertexBuffer@Ogre@@2VRuntimeClass@2@B ; Ogre::VertexBuffer::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::VertexBuffer::getRTTI
_TEXT	ENDS
PUBLIC	??_7VertexBuffer@Ogre@@6B@			; Ogre::VertexBuffer::`vftable'
PUBLIC	??0VertexBuffer@Ogre@@QAE@XZ			; Ogre::VertexBuffer::VertexBuffer
PUBLIC	??_R4VertexBuffer@Ogre@@6B@			; Ogre::VertexBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVVertexBuffer@Ogre@@@8			; Ogre::VertexBuffer `RTTI Type Descriptor'
PUBLIC	??_R3VertexBuffer@Ogre@@8			; Ogre::VertexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VertexBuffer@Ogre@@8			; Ogre::VertexBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VertexBuffer@Ogre@@8		; Ogre::VertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EVertexBuffer@Ogre@@UAEPAXI@Z		; Ogre::VertexBuffer::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@VertexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VertexBuffer@Ogre@@8 DD FLAT:??_R0?AVVertexBuffer@Ogre@@@8 ; Ogre::VertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VertexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2VertexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R2VertexBuffer@Ogre@@8 DD FLAT:??_R1A@?0A@EA@VertexBuffer@Ogre@@8 ; Ogre::VertexBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3VertexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R3VertexBuffer@Ogre@@8 DD 00H			; Ogre::VertexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2VertexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVertexBuffer@Ogre@@@8
_DATA	SEGMENT
??_R0?AVVertexBuffer@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::VertexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVertexBuffer@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4VertexBuffer@Ogre@@6B@
rdata$r	SEGMENT
??_R4VertexBuffer@Ogre@@6B@ DD 00H			; Ogre::VertexBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVVertexBuffer@Ogre@@@8
	DD	FLAT:??_R3VertexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7VertexBuffer@Ogre@@6B@
CONST	SEGMENT
??_7VertexBuffer@Ogre@@6B@ DD FLAT:??_R4VertexBuffer@Ogre@@6B@ ; Ogre::VertexBuffer::`vftable'
	DD	FLAT:?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EVertexBuffer@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0VertexBuffer@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0VertexBuffer@Ogre@@QAE@XZ$0
__ehfuncinfo$??0VertexBuffer@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0VertexBuffer@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0VertexBuffer@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0VertexBuffer@Ogre@@QAE@XZ PROC			; Ogre::VertexBuffer::VertexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0VertexBuffer@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7VertexBuffer@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0VertexBuffer@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0VertexBuffer@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0VertexBuffer@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0VertexBuffer@Ogre@@QAE@XZ ENDP			; Ogre::VertexBuffer::VertexBuffer
PUBLIC	??1VertexBuffer@Ogre@@UAE@XZ			; Ogre::VertexBuffer::~VertexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1VertexBuffer@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1VertexBuffer@Ogre@@UAE@XZ$0
__ehfuncinfo$??1VertexBuffer@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1VertexBuffer@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1VertexBuffer@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1VertexBuffer@Ogre@@UAE@XZ PROC			; Ogre::VertexBuffer::~VertexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1VertexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1VertexBuffer@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??1VertexBuffer@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1VertexBuffer@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1VertexBuffer@Ogre@@UAE@XZ ENDP			; Ogre::VertexBuffer::~VertexBuffer
PUBLIC	??0VertexBuffer@Ogre@@QAE@ABV01@@Z		; Ogre::VertexBuffer::VertexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0VertexBuffer@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0VertexBuffer@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0VertexBuffer@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0VertexBuffer@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0VertexBuffer@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0VertexBuffer@Ogre@@QAE@ABV01@@Z PROC			; Ogre::VertexBuffer::VertexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0VertexBuffer@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7VertexBuffer@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0VertexBuffer@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0VertexBuffer@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0VertexBuffer@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0VertexBuffer@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::VertexBuffer::VertexBuffer
PUBLIC	??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::VertexBuffer::operator=
; Function compile flags: /Odtp
;	COMDAT ??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::VertexBuffer::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::VertexBuffer::operator=
_TEXT	ENDS
PUBLIC	??_GVertexBuffer@Ogre@@UAEPAXI@Z		; Ogre::VertexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GVertexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GVertexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::VertexBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VertexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@11
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@11:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GVertexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::VertexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EVertexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EVertexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::VertexBuffer::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@11
	push	OFFSET ??1VertexBuffer@Ogre@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@11
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@11:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@11
$LN3@vector@11:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VertexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@11
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@11:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@11:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EVertexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::VertexBuffer::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::IndexBuffer::getRTTI
EXTRN	?m_RTTI@IndexBuffer@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::IndexBuffer::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::IndexBuffer::getRTTI, COMDAT
; _this$ = ecx

; 230  : 		DECLARE_RTTI_VIRTUAL(IndexBuffer)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@IndexBuffer@Ogre@@2VRuntimeClass@2@B ; Ogre::IndexBuffer::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::IndexBuffer::getRTTI
_TEXT	ENDS
PUBLIC	?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z	; Ogre::IndexBuffer::setVertexRange
; Function compile flags: /Odtp
;	COMDAT ?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_num$ = 12						; size = 4
?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z PROC		; Ogre::IndexBuffer::setVertexRange, COMDAT
; _this$ = ecx

; 235  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 236  : 			m_RefVertStart = start;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 237  : 			m_RefVertNum = num;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _num$[ebp]
	mov	DWORD PTR [edx+20], eax

; 238  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z ENDP		; Ogre::IndexBuffer::setVertexRange
_TEXT	ENDS
PUBLIC	??_7IndexBuffer@Ogre@@6B@			; Ogre::IndexBuffer::`vftable'
PUBLIC	??0IndexBuffer@Ogre@@QAE@XZ			; Ogre::IndexBuffer::IndexBuffer
PUBLIC	??_R4IndexBuffer@Ogre@@6B@			; Ogre::IndexBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVIndexBuffer@Ogre@@@8			; Ogre::IndexBuffer `RTTI Type Descriptor'
PUBLIC	??_R3IndexBuffer@Ogre@@8			; Ogre::IndexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IndexBuffer@Ogre@@8			; Ogre::IndexBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IndexBuffer@Ogre@@8		; Ogre::IndexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EIndexBuffer@Ogre@@UAEPAXI@Z			; Ogre::IndexBuffer::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@IndexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IndexBuffer@Ogre@@8 DD FLAT:??_R0?AVIndexBuffer@Ogre@@@8 ; Ogre::IndexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IndexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2IndexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R2IndexBuffer@Ogre@@8 DD FLAT:??_R1A@?0A@EA@IndexBuffer@Ogre@@8 ; Ogre::IndexBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3IndexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R3IndexBuffer@Ogre@@8 DD 00H				; Ogre::IndexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2IndexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVIndexBuffer@Ogre@@@8
_DATA	SEGMENT
??_R0?AVIndexBuffer@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::IndexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVIndexBuffer@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4IndexBuffer@Ogre@@6B@
rdata$r	SEGMENT
??_R4IndexBuffer@Ogre@@6B@ DD 00H			; Ogre::IndexBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVIndexBuffer@Ogre@@@8
	DD	FLAT:??_R3IndexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7IndexBuffer@Ogre@@6B@
CONST	SEGMENT
??_7IndexBuffer@Ogre@@6B@ DD FLAT:??_R4IndexBuffer@Ogre@@6B@ ; Ogre::IndexBuffer::`vftable'
	DD	FLAT:?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EIndexBuffer@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0IndexBuffer@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0IndexBuffer@Ogre@@QAE@XZ$0
__ehfuncinfo$??0IndexBuffer@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0IndexBuffer@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0IndexBuffer@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0IndexBuffer@Ogre@@QAE@XZ PROC			; Ogre::IndexBuffer::IndexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0IndexBuffer@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IndexBuffer@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0IndexBuffer@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0IndexBuffer@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0IndexBuffer@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0IndexBuffer@Ogre@@QAE@XZ ENDP			; Ogre::IndexBuffer::IndexBuffer
PUBLIC	??1IndexBuffer@Ogre@@UAE@XZ			; Ogre::IndexBuffer::~IndexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1IndexBuffer@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1IndexBuffer@Ogre@@UAE@XZ$0
__ehfuncinfo$??1IndexBuffer@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1IndexBuffer@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1IndexBuffer@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1IndexBuffer@Ogre@@UAE@XZ PROC			; Ogre::IndexBuffer::~IndexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1IndexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1IndexBuffer@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??1IndexBuffer@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1IndexBuffer@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1IndexBuffer@Ogre@@UAE@XZ ENDP			; Ogre::IndexBuffer::~IndexBuffer
PUBLIC	??0IndexBuffer@Ogre@@QAE@ABV01@@Z		; Ogre::IndexBuffer::IndexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0IndexBuffer@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0IndexBuffer@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0IndexBuffer@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0IndexBuffer@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0IndexBuffer@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0IndexBuffer@Ogre@@QAE@ABV01@@Z PROC			; Ogre::IndexBuffer::IndexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0IndexBuffer@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7IndexBuffer@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0IndexBuffer@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0IndexBuffer@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0IndexBuffer@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0IndexBuffer@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::IndexBuffer::IndexBuffer
PUBLIC	??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::IndexBuffer::operator=
; Function compile flags: /Odtp
;	COMDAT ??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::IndexBuffer::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::IndexBuffer::operator=
_TEXT	ENDS
PUBLIC	??_GIndexBuffer@Ogre@@UAEPAXI@Z			; Ogre::IndexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GIndexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GIndexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::IndexBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1IndexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@12
	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@12:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GIndexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::IndexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EIndexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EIndexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::IndexBuffer::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@12
	push	OFFSET ??1IndexBuffer@Ogre@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@12
	push	24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@12:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@12
$LN3@vector@12:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1IndexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@12
	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@12:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@12:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EIndexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::IndexBuffer::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ	; Ogre::Texture::getRTTI
EXTRN	?m_RTTI@Texture@Ogre@@2VRuntimeClass@2@B:BYTE	; Ogre::Texture::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::Texture::getRTTI, COMDAT
; _this$ = ecx

; 248  : 		DECLARE_RTTI_VIRTUAL(Texture)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@Texture@Ogre@@2VRuntimeClass@2@B ; Ogre::Texture::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::Texture::getRTTI
_TEXT	ENDS
PUBLIC	??_7Texture@Ogre@@6B@				; Ogre::Texture::`vftable'
PUBLIC	??1Texture@Ogre@@MAE@XZ				; Ogre::Texture::~Texture
PUBLIC	??_R4Texture@Ogre@@6B@				; Ogre::Texture::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTexture@Ogre@@@8			; Ogre::Texture `RTTI Type Descriptor'
PUBLIC	??_R3Texture@Ogre@@8				; Ogre::Texture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Texture@Ogre@@8				; Ogre::Texture::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Texture@Ogre@@8			; Ogre::Texture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_ETexture@Ogre@@MAEPAXI@Z			; Ogre::Texture::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Texture@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Texture@Ogre@@8 DD FLAT:??_R0?AVTexture@Ogre@@@8 ; Ogre::Texture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Texture@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Texture@Ogre@@8
rdata$r	SEGMENT
??_R2Texture@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Texture@Ogre@@8 ; Ogre::Texture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3Texture@Ogre@@8
rdata$r	SEGMENT
??_R3Texture@Ogre@@8 DD 00H				; Ogre::Texture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2Texture@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTexture@Ogre@@@8
_DATA	SEGMENT
??_R0?AVTexture@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Texture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTexture@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Texture@Ogre@@6B@
rdata$r	SEGMENT
??_R4Texture@Ogre@@6B@ DD 00H				; Ogre::Texture::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTexture@Ogre@@@8
	DD	FLAT:??_R3Texture@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Texture@Ogre@@6B@
CONST	SEGMENT
??_7Texture@Ogre@@6B@ DD FLAT:??_R4Texture@Ogre@@6B@	; Ogre::Texture::`vftable'
	DD	FLAT:?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_ETexture@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Texture@Ogre@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Texture@Ogre@@MAE@XZ$0
__ehfuncinfo$??1Texture@Ogre@@MAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Texture@Ogre@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1Texture@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Texture@Ogre@@MAE@XZ PROC				; Ogre::Texture::~Texture, COMDAT
; _this$ = ecx

; 257  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Texture@Ogre@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Texture@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 258  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Texture@Ogre@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??1Texture@Ogre@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Texture@Ogre@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Texture@Ogre@@MAE@XZ ENDP				; Ogre::Texture::~Texture
PUBLIC	??0Texture@Ogre@@QAE@XZ				; Ogre::Texture::Texture
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Texture@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Texture@Ogre@@QAE@XZ$0
__ehfuncinfo$??0Texture@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Texture@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Texture@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Texture@Ogre@@QAE@XZ PROC				; Ogre::Texture::Texture, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Texture@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Texture@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Texture@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0Texture@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Texture@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Texture@Ogre@@QAE@XZ ENDP				; Ogre::Texture::Texture
PUBLIC	??0Texture@Ogre@@QAE@ABV01@@Z			; Ogre::Texture::Texture
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Texture@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Texture@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0Texture@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Texture@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Texture@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Texture@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Texture::Texture, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Texture@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7Texture@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Texture@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0Texture@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Texture@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Texture@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Texture::Texture
PUBLIC	??4Texture@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Texture::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Texture@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Texture@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Texture::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Texture@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Texture::operator=
_TEXT	ENDS
PUBLIC	??_GTexture@Ogre@@MAEPAXI@Z			; Ogre::Texture::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GTexture@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTexture@Ogre@@MAEPAXI@Z PROC			; Ogre::Texture::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Texture@Ogre@@MAE@XZ			; Ogre::Texture::~Texture
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@13
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@13:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTexture@Ogre@@MAEPAXI@Z ENDP			; Ogre::Texture::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_ETexture@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ETexture@Ogre@@MAEPAXI@Z PROC			; Ogre::Texture::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@13
	push	OFFSET ??1Texture@Ogre@@MAE@XZ		; Ogre::Texture::~Texture
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@13
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@13:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@13
$LN3@vector@13:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Texture@Ogre@@MAE@XZ			; Ogre::Texture::~Texture
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@13
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@13:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@13:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ETexture@Ogre@@MAEPAXI@Z ENDP			; Ogre::Texture::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@RenderableObject@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::RenderableObject::getRTTI
EXTRN	?m_RTTI@RenderableObject@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::RenderableObject::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrerenderableobject.h
;	COMDAT ?getRTTI@RenderableObject@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@RenderableObject@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::RenderableObject::getRTTI, COMDAT
; _this$ = ecx

; 23   : 		DECLARE_RTTI_VIRTUAL(RenderableObject)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@RenderableObject@Ogre@@2VRuntimeClass@2@B ; Ogre::RenderableObject::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@RenderableObject@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::RenderableObject::getRTTI
_TEXT	ENDS
PUBLIC	?enableUVMask@RenderableObject@Ogre@@UAEX_N0@Z	; Ogre::RenderableObject::enableUVMask
; Function compile flags: /Odtp
;	COMDAT ?enableUVMask@RenderableObject@Ogre@@UAEX_N0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_enable$ = 8						; size = 1
_stdmtlUse$ = 12					; size = 1
?enableUVMask@RenderableObject@Ogre@@UAEX_N0@Z PROC	; Ogre::RenderableObject::enableUVMask, COMDAT
; _this$ = ecx

; 27   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 
; 29   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?enableUVMask@RenderableObject@Ogre@@UAEX_N0@Z ENDP	; Ogre::RenderableObject::enableUVMask
_TEXT	ENDS
PUBLIC	?setLiuGuangTexture@RenderableObject@Ogre@@UAEXPAVTextureData@2@@Z ; Ogre::RenderableObject::setLiuGuangTexture
; Function compile flags: /Odtp
;	COMDAT ?setLiuGuangTexture@RenderableObject@Ogre@@UAEXPAVTextureData@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_texture$ = 8						; size = 4
?setLiuGuangTexture@RenderableObject@Ogre@@UAEXPAVTextureData@2@@Z PROC ; Ogre::RenderableObject::setLiuGuangTexture, COMDAT
; _this$ = ecx

; 32   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 33   : 
; 34   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setLiuGuangTexture@RenderableObject@Ogre@@UAEXPAVTextureData@2@@Z ENDP ; Ogre::RenderableObject::setLiuGuangTexture
_TEXT	ENDS
PUBLIC	?setLiuGuangTexture@RenderableObject@Ogre@@UAEXPBD@Z ; Ogre::RenderableObject::setLiuGuangTexture
; Function compile flags: /Odtp
;	COMDAT ?setLiuGuangTexture@RenderableObject@Ogre@@UAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?setLiuGuangTexture@RenderableObject@Ogre@@UAEXPBD@Z PROC ; Ogre::RenderableObject::setLiuGuangTexture, COMDAT
; _this$ = ecx

; 37   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 
; 39   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setLiuGuangTexture@RenderableObject@Ogre@@UAEXPBD@Z ENDP ; Ogre::RenderableObject::setLiuGuangTexture
_TEXT	ENDS
PUBLIC	?setLayer@RenderableObject@Ogre@@UAEXW4RenderLayer@2@@Z ; Ogre::RenderableObject::setLayer
; Function compile flags: /Odtp
;	COMDAT ?setLayer@RenderableObject@Ogre@@UAEXW4RenderLayer@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_layer$ = 8						; size = 4
?setLayer@RenderableObject@Ogre@@UAEXW4RenderLayer@2@@Z PROC ; Ogre::RenderableObject::setLayer, COMDAT
; _this$ = ecx

; 47   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 			m_RenderLayer = layer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _layer$[ebp]
	mov	DWORD PTR [eax+264], ecx

; 49   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setLayer@RenderableObject@Ogre@@UAEXW4RenderLayer@2@@Z ENDP ; Ogre::RenderableObject::setLayer
_TEXT	ENDS
PUBLIC	?BuildDecalMesh@RenderableObject@Ogre@@UAEXABVBoxBound@2@PAVVector3@2@PAGHHAAH3@Z ; Ogre::RenderableObject::BuildDecalMesh
; Function compile flags: /Odtp
;	COMDAT ?BuildDecalMesh@RenderableObject@Ogre@@UAEXABVBoxBound@2@PAVVector3@2@PAGHHAAH3@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_boxbound$ = 8						; size = 4
_pVB$ = 12						; size = 4
_pIB$ = 16						; size = 4
_nVertexBase$ = 20					; size = 4
_nFaceLimit$ = 24					; size = 4
_nVertexCount$ = 28					; size = 4
_nFaceCount$ = 32					; size = 4
?BuildDecalMesh@RenderableObject@Ogre@@UAEXABVBoxBound@2@PAVVector3@2@PAGHHAAH3@Z PROC ; Ogre::RenderableObject::BuildDecalMesh, COMDAT
; _this$ = ecx

; 54   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 			nVertexCount = 0;

	mov	eax, DWORD PTR _nVertexCount$[ebp]
	mov	DWORD PTR [eax], 0

; 56   : 			nFaceCount = 0;

	mov	ecx, DWORD PTR _nFaceCount$[ebp]
	mov	DWORD PTR [ecx], 0

; 57   : 		}

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?BuildDecalMesh@RenderableObject@Ogre@@UAEXABVBoxBound@2@PAVVector3@2@PAGHHAAH3@Z ENDP ; Ogre::RenderableObject::BuildDecalMesh
_TEXT	ENDS
PUBLIC	?getRenderUsageBits@RenderableObject@Ogre@@QAEIXZ ; Ogre::RenderableObject::getRenderUsageBits
; Function compile flags: /Odtp
;	COMDAT ?getRenderUsageBits@RenderableObject@Ogre@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRenderUsageBits@RenderableObject@Ogre@@QAEIXZ PROC	; Ogre::RenderableObject::getRenderUsageBits, COMDAT
; _this$ = ecx

; 60   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 61   : 			return m_RenderUsageBits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 62   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRenderUsageBits@RenderableObject@Ogre@@QAEIXZ ENDP	; Ogre::RenderableObject::getRenderUsageBits
_TEXT	ENDS
PUBLIC	?addRenderUsageBits@RenderableObject@Ogre@@UAEXW4RenderUsage@2@@Z ; Ogre::RenderableObject::addRenderUsageBits
; Function compile flags: /Odtp
;	COMDAT ?addRenderUsageBits@RenderableObject@Ogre@@UAEXW4RenderUsage@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_usage$ = 8						; size = 4
?addRenderUsageBits@RenderableObject@Ogre@@UAEXW4RenderUsage@2@@Z PROC ; Ogre::RenderableObject::addRenderUsageBits, COMDAT
; _this$ = ecx

; 65   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 			m_RenderUsageBits |= 1<<usage;

	mov	eax, 1
	mov	ecx, DWORD PTR _usage$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [ecx+272]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], eax

; 67   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?addRenderUsageBits@RenderableObject@Ogre@@UAEXW4RenderUsage@2@@Z ENDP ; Ogre::RenderableObject::addRenderUsageBits
_TEXT	ENDS
PUBLIC	?clearRenderUsageBits@RenderableObject@Ogre@@UAEXW4RenderUsage@2@@Z ; Ogre::RenderableObject::clearRenderUsageBits
; Function compile flags: /Odtp
;	COMDAT ?clearRenderUsageBits@RenderableObject@Ogre@@UAEXW4RenderUsage@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_usage$ = 8						; size = 4
?clearRenderUsageBits@RenderableObject@Ogre@@UAEXW4RenderUsage@2@@Z PROC ; Ogre::RenderableObject::clearRenderUsageBits, COMDAT
; _this$ = ecx

; 70   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 			m_RenderUsageBits &= ~(1<<usage);

	mov	eax, 1
	mov	ecx, DWORD PTR _usage$[ebp]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+272]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], eax

; 72   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?clearRenderUsageBits@RenderableObject@Ogre@@UAEXW4RenderUsage@2@@Z ENDP ; Ogre::RenderableObject::clearRenderUsageBits
_TEXT	ENDS
PUBLIC	?getRenderPassRequired@RenderableObject@Ogre@@UAEXAAURenderPassDesc@2@@Z ; Ogre::RenderableObject::getRenderPassRequired
; Function compile flags: /Odtp
;	COMDAT ?getRenderPassRequired@RenderableObject@Ogre@@UAEXAAURenderPassDesc@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_desc$ = 8						; size = 4
?getRenderPassRequired@RenderableObject@Ogre@@UAEXAAURenderPassDesc@2@@Z PROC ; Ogre::RenderableObject::getRenderPassRequired, COMDAT
; _this$ = ecx

; 75   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 76   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getRenderPassRequired@RenderableObject@Ogre@@UAEXAAURenderPassDesc@2@@Z ENDP ; Ogre::RenderableObject::getRenderPassRequired
_TEXT	ENDS
PUBLIC	?getUserType@RenderableObject@Ogre@@QAEIXZ	; Ogre::RenderableObject::getUserType
; Function compile flags: /Odtp
;	COMDAT ?getUserType@RenderableObject@Ogre@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUserType@RenderableObject@Ogre@@QAEIXZ PROC		; Ogre::RenderableObject::getUserType, COMDAT
; _this$ = ecx

; 79   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 			return m_UserType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getUserType@RenderableObject@Ogre@@QAEIXZ ENDP		; Ogre::RenderableObject::getUserType
_TEXT	ENDS
PUBLIC	?setUserType@RenderableObject@Ogre@@QAEXI@Z	; Ogre::RenderableObject::setUserType
; Function compile flags: /Odtp
;	COMDAT ?setUserType@RenderableObject@Ogre@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type$ = 8						; size = 4
?setUserType@RenderableObject@Ogre@@QAEXI@Z PROC	; Ogre::RenderableObject::setUserType, COMDAT
; _this$ = ecx

; 84   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 			m_UserType = type;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax+268], ecx

; 86   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setUserType@RenderableObject@Ogre@@QAEXI@Z ENDP	; Ogre::RenderableObject::setUserType
_TEXT	ENDS
PUBLIC	?setDrawbackScene@RenderableObject@Ogre@@QAEX_N@Z ; Ogre::RenderableObject::setDrawbackScene
; Function compile flags: /Odtp
;	COMDAT ?setDrawbackScene@RenderableObject@Ogre@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_useDrawback$ = 8					; size = 1
?setDrawbackScene@RenderableObject@Ogre@@QAEX_N@Z PROC	; Ogre::RenderableObject::setDrawbackScene, COMDAT
; _this$ = ecx

; 89   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 			m_bUseDrawback = useDrawback;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _useDrawback$[ebp]
	mov	BYTE PTR [eax+233], cl

; 91   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setDrawbackScene@RenderableObject@Ogre@@QAEX_N@Z ENDP	; Ogre::RenderableObject::setDrawbackScene
_TEXT	ENDS
PUBLIC	?isDrawbackScene@RenderableObject@Ogre@@QAE_NXZ	; Ogre::RenderableObject::isDrawbackScene
; Function compile flags: /Odtp
;	COMDAT ?isDrawbackScene@RenderableObject@Ogre@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isDrawbackScene@RenderableObject@Ogre@@QAE_NXZ PROC	; Ogre::RenderableObject::isDrawbackScene, COMDAT
; _this$ = ecx

; 94   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 			return m_bUseDrawback;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+233]

; 96   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?isDrawbackScene@RenderableObject@Ogre@@QAE_NXZ ENDP	; Ogre::RenderableObject::isDrawbackScene
_TEXT	ENDS
PUBLIC	?GetBoxBound@RenderableObject@Ogre@@QAEPAVBoxBound@2@XZ ; Ogre::RenderableObject::GetBoxBound
; Function compile flags: /Odtp
;	COMDAT ?GetBoxBound@RenderableObject@Ogre@@QAEPAVBoxBound@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBoxBound@RenderableObject@Ogre@@QAEPAVBoxBound@2@XZ PROC ; Ogre::RenderableObject::GetBoxBound, COMDAT
; _this$ = ecx

; 98   : 		BoxBound* GetBoxBound(){return &m_renderBoxBound;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 236				; 000000ecH
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBoxBound@RenderableObject@Ogre@@QAEPAVBoxBound@2@XZ ENDP ; Ogre::RenderableObject::GetBoxBound
_TEXT	ENDS
PUBLIC	??_7RenderableObject@Ogre@@6B@			; Ogre::RenderableObject::`vftable'
PUBLIC	??0RenderableObject@Ogre@@IAE@XZ		; Ogre::RenderableObject::RenderableObject
PUBLIC	??_R4RenderableObject@Ogre@@6B@			; Ogre::RenderableObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRenderableObject@Ogre@@@8		; Ogre::RenderableObject `RTTI Type Descriptor'
PUBLIC	??_R3RenderableObject@Ogre@@8			; Ogre::RenderableObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RenderableObject@Ogre@@8			; Ogre::RenderableObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RenderableObject@Ogre@@8		; Ogre::RenderableObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_ERenderableObject@Ogre@@MAEPAXI@Z		; Ogre::RenderableObject::`vector deleting destructor'
EXTRN	??0MovableObject@Ogre@@QAE@XZ:PROC		; Ogre::MovableObject::MovableObject
EXTRN	?setCanSel@RenderableObject@Ogre@@UAEX_N@Z:PROC	; Ogre::RenderableObject::setCanSel
;	COMDAT ??_R1A@?0A@EA@RenderableObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RenderableObject@Ogre@@8 DD FLAT:??_R0?AVRenderableObject@Ogre@@@8 ; Ogre::RenderableObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RenderableObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2RenderableObject@Ogre@@8
rdata$r	SEGMENT
??_R2RenderableObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@RenderableObject@Ogre@@8 ; Ogre::RenderableObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MovableObject@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3RenderableObject@Ogre@@8
rdata$r	SEGMENT
??_R3RenderableObject@Ogre@@8 DD 00H			; Ogre::RenderableObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2RenderableObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRenderableObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVRenderableObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::RenderableObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRenderableObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4RenderableObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4RenderableObject@Ogre@@6B@ DD 00H			; Ogre::RenderableObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRenderableObject@Ogre@@@8
	DD	FLAT:??_R3RenderableObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7RenderableObject@Ogre@@6B@
CONST	SEGMENT
??_7RenderableObject@Ogre@@6B@ DD FLAT:??_R4RenderableObject@Ogre@@6B@ ; Ogre::RenderableObject::`vftable'
	DD	FLAT:?getRTTI@RenderableObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_ERenderableObject@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?enableUVMask@RenderableObject@Ogre@@UAEX_N0@Z
	DD	FLAT:?setLiuGuangTexture@RenderableObject@Ogre@@UAEXPBD@Z
	DD	FLAT:?setLiuGuangTexture@RenderableObject@Ogre@@UAEXPAVTextureData@2@@Z
	DD	FLAT:?SetForceShadowMapCull@MovableObject@Ogre@@UAEX_N@Z
	DD	FLAT:?update@MovableObject@Ogre@@UAEXI@Z
	DD	FLAT:?resetUpdate@MovableObject@Ogre@@UAEX_NI@Z
	DD	FLAT:?attachToScene@MovableObject@Ogre@@UAEXPAVGameScene@2@_N@Z
	DD	FLAT:?detachFromScene@MovableObject@Ogre@@UAEXXZ
	DD	FLAT:?intersectRay@MovableObject@Ogre@@UAE_NW4IntersectType@2@ABVRay@2@PAM@Z
	DD	FLAT:?getAnchorWorldMatrix@MovableObject@Ogre@@UAE?AVMatrix4@2@H@Z
	DD	FLAT:?invalidWorldCache@MovableObject@Ogre@@UAEXXZ
	DD	FLAT:?updateWorldCache@MovableObject@Ogre@@UAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:?setCanSel@RenderableObject@Ogre@@UAEX_N@Z
	DD	FLAT:?setLayer@RenderableObject@Ogre@@UAEXW4RenderLayer@2@@Z
	DD	FLAT:?BuildDecalMesh@RenderableObject@Ogre@@UAEXABVBoxBound@2@PAVVector3@2@PAGHHAAH3@Z
	DD	FLAT:?addRenderUsageBits@RenderableObject@Ogre@@UAEXW4RenderUsage@2@@Z
	DD	FLAT:?clearRenderUsageBits@RenderableObject@Ogre@@UAEXW4RenderUsage@2@@Z
	DD	FLAT:?getRenderPassRequired@RenderableObject@Ogre@@UAEXAAURenderPassDesc@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RenderableObject@Ogre@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RenderableObject@Ogre@@IAE@XZ$0
__ehfuncinfo$??0RenderableObject@Ogre@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RenderableObject@Ogre@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0RenderableObject@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0RenderableObject@Ogre@@IAE@XZ PROC			; Ogre::RenderableObject::RenderableObject, COMDAT
; _this$ = ecx

; 112  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RenderableObject@Ogre@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0MovableObject@Ogre@@QAE@XZ		; Ogre::MovableObject::MovableObject
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RenderableObject@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	call	??0BoxBound@Ogre@@QAE@XZ		; Ogre::BoxBound::BoxBound
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+264], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+268], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+276], 0

; 113  : 			m_numpointlight	= 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+212], 0

; 114  : 			m_RenderUsageBits = (1<<RU_UI)|(1<<RU_GENERAL);

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], 3

; 115  : 
; 116  : 			m_bBakeStaticLight = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+232], 0

; 117  : 			m_bUseDrawback = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+233], 0

; 118  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RenderableObject@Ogre@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1MovableObject@Ogre@@UAE@XZ		; Ogre::MovableObject::~MovableObject
__ehhandler$??0RenderableObject@Ogre@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RenderableObject@Ogre@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RenderableObject@Ogre@@IAE@XZ ENDP			; Ogre::RenderableObject::RenderableObject
PUBLIC	??1RenderableObject@Ogre@@MAE@XZ		; Ogre::RenderableObject::~RenderableObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1RenderableObject@Ogre@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1RenderableObject@Ogre@@MAE@XZ$0
__ehfuncinfo$??1RenderableObject@Ogre@@MAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1RenderableObject@Ogre@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1RenderableObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1RenderableObject@Ogre@@MAE@XZ PROC			; Ogre::RenderableObject::~RenderableObject, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1RenderableObject@Ogre@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RenderableObject@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 122  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MovableObject@Ogre@@UAE@XZ		; Ogre::MovableObject::~MovableObject
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1RenderableObject@Ogre@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1MovableObject@Ogre@@UAE@XZ		; Ogre::MovableObject::~MovableObject
__ehhandler$??1RenderableObject@Ogre@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1RenderableObject@Ogre@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1RenderableObject@Ogre@@MAE@XZ ENDP			; Ogre::RenderableObject::~RenderableObject
PUBLIC	??0RenderableObject@Ogre@@QAE@ABV01@@Z		; Ogre::RenderableObject::RenderableObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RenderableObject@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RenderableObject@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0RenderableObject@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RenderableObject@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0RenderableObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0RenderableObject@Ogre@@QAE@ABV01@@Z PROC		; Ogre::RenderableObject::RenderableObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RenderableObject@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0MovableObject@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7RenderableObject@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	mov	DWORD PTR [edx+212], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 216				; 000000d8H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 216				; 000000d8H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+232]
	mov	BYTE PTR [eax+232], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+233]
	mov	BYTE PTR [eax+233], dl
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 236				; 000000ecH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	call	??0BoxBound@Ogre@@QAE@ABV01@@Z		; Ogre::BoxBound::BoxBound
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+264]
	mov	DWORD PTR [ecx+264], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+268]
	mov	DWORD PTR [ecx+268], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+272]
	mov	DWORD PTR [ecx+272], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+276]
	mov	BYTE PTR [ecx+276], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RenderableObject@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1MovableObject@Ogre@@UAE@XZ		; Ogre::MovableObject::~MovableObject
__ehhandler$??0RenderableObject@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RenderableObject@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RenderableObject@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::RenderableObject::RenderableObject
PUBLIC	??4RenderableObject@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::RenderableObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4RenderableObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_$S1$59288 = -4						; size = 4
___that$ = 8						; size = 4
??4RenderableObject@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::RenderableObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4MovableObject@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+212]
	mov	DWORD PTR [ecx+212], eax
	mov	DWORD PTR _$S1$59288[ebp], 0
	jmp	SHORT $LN3@operator@6
$LN2@operator@6:
	mov	ecx, DWORD PTR _$S1$59288[ebp]
	add	ecx, 1
	mov	DWORD PTR _$S1$59288[ebp], ecx
$LN3@operator@6:
	cmp	DWORD PTR _$S1$59288[ebp], 4
	jae	SHORT $LN1@operator@6
	mov	edx, DWORD PTR _$S1$59288[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _$S1$59288[ebp]
	mov	esi, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4+216]
	mov	DWORD PTR [eax+edx*4+216], ecx
	jmp	SHORT $LN2@operator@6
$LN1@operator@6:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+232]
	mov	BYTE PTR [edx+232], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+233]
	mov	BYTE PTR [edx+233], cl
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 236				; 000000ecH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	call	??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	mov	DWORD PTR [eax+264], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	mov	DWORD PTR [eax+268], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+272]
	mov	DWORD PTR [eax+272], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+276]
	mov	BYTE PTR [eax+276], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4RenderableObject@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::RenderableObject::operator=
_TEXT	ENDS
PUBLIC	??_GRenderableObject@Ogre@@MAEPAXI@Z		; Ogre::RenderableObject::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GRenderableObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRenderableObject@Ogre@@MAEPAXI@Z PROC		; Ogre::RenderableObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RenderableObject@Ogre@@MAE@XZ	; Ogre::RenderableObject::~RenderableObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@14
	push	280					; 00000118H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@14:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRenderableObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::RenderableObject::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_ERenderableObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ERenderableObject@Ogre@@MAEPAXI@Z PROC		; Ogre::RenderableObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@14
	push	OFFSET ??1RenderableObject@Ogre@@MAE@XZ	; Ogre::RenderableObject::~RenderableObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	280					; 00000118H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@14
	push	280					; 00000118H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@14:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@14
$LN3@vector@14:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RenderableObject@Ogre@@MAE@XZ	; Ogre::RenderableObject::~RenderableObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@14
	push	280					; 00000118H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@14:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@14:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ERenderableObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::RenderableObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0ColourValue@Ogre@@QAE@MMMM@Z			; Ogre::ColourValue::ColourValue
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrecolourvalue.h
;	COMDAT ??0ColourValue@Ogre@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_red$ = 8						; size = 4
_green$ = 12						; size = 4
_blue$ = 16						; size = 4
_alpha$ = 20						; size = 4
??0ColourValue@Ogre@@QAE@MMMM@Z PROC			; Ogre::ColourValue::ColourValue, COMDAT
; _this$ = ecx

; 68   : 		{ }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _red$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _green$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _blue$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _alpha$[ebp]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0ColourValue@Ogre@@QAE@MMMM@Z ENDP			; Ogre::ColourValue::ColourValue
_TEXT	ENDS
PUBLIC	?set@ColourValue@Ogre@@QAEXMMMM@Z		; Ogre::ColourValue::set
; Function compile flags: /Odtp
;	COMDAT ?set@ColourValue@Ogre@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_red$ = 8						; size = 4
_green$ = 12						; size = 4
_blue$ = 16						; size = 4
_alpha$ = 20						; size = 4
?set@ColourValue@Ogre@@QAEXMMMM@Z PROC			; Ogre::ColourValue::set, COMDAT
; _this$ = ecx

; 76   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 			r	= red;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _red$[ebp]
	fstp	DWORD PTR [eax]

; 78   : 			g	= green;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _green$[ebp]
	fstp	DWORD PTR [ecx+4]

; 79   : 			b	= blue;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _blue$[ebp]
	fstp	DWORD PTR [edx+8]

; 80   : 			a	= alpha;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _alpha$[ebp]
	fstp	DWORD PTR [eax+12]

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?set@ColourValue@Ogre@@QAEXMMMM@Z ENDP			; Ogre::ColourValue::set
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@0000000000000000
PUBLIC	?saturate@ColourValue@Ogre@@QAEXXZ		; Ogre::ColourValue::saturate
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?saturate@ColourValue@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?saturate@ColourValue@Ogre@@QAEXXZ PROC			; Ogre::ColourValue::saturate, COMDAT
; _this$ = ecx

; 117  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 			if (r < 0)

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN12@saturate

; 119  : 				r = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx]
	jmp	SHORT $LN10@saturate
$LN12@saturate:

; 120  : 			else if (r > 1)

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN10@saturate

; 121  : 				r = 1;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax]
$LN10@saturate:

; 122  : 
; 123  : 			if (g < 0)

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN9@saturate

; 124  : 				g = 0;

	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+4]
	jmp	SHORT $LN7@saturate
$LN9@saturate:

; 125  : 			else if (g > 1)

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@saturate

; 126  : 				g = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [ecx+4]
$LN7@saturate:

; 127  : 
; 128  : 			if (b < 0)

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@saturate

; 129  : 				b = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]
	jmp	SHORT $LN4@saturate
$LN6@saturate:

; 130  : 			else if (b > 1)

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@saturate

; 131  : 				b = 1;

	mov	edx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [edx+8]
$LN4@saturate:

; 132  : 
; 133  : 			if (a < 0)

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@saturate

; 134  : 				a = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+12]
	jmp	SHORT $LN1@saturate
$LN3@saturate:

; 135  : 			else if (a > 1)

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+12]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@saturate

; 136  : 				a = 1;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+12]
$LN1@saturate:

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?saturate@ColourValue@Ogre@@QAEXXZ ENDP			; Ogre::ColourValue::saturate
_TEXT	ENDS
PUBLIC	?saturateCopy@ColourValue@Ogre@@QBE?AV12@XZ	; Ogre::ColourValue::saturateCopy
; Function compile flags: /Odtp
;	COMDAT ?saturateCopy@ColourValue@Ogre@@QBE?AV12@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_ret$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?saturateCopy@ColourValue@Ogre@@QBE?AV12@XZ PROC	; Ogre::ColourValue::saturateCopy, COMDAT
; _this$ = ecx

; 142  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 			ColourValue ret = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ret$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _ret$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ret$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _ret$[ebp+12], edx

; 144  : 			ret.saturate();

	lea	ecx, DWORD PTR _ret$[ebp]
	call	?saturate@ColourValue@Ogre@@QAEXXZ	; Ogre::ColourValue::saturate

; 145  : 			return ret;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _ret$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _ret$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _ret$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?saturateCopy@ColourValue@Ogre@@QBE?AV12@XZ ENDP	; Ogre::ColourValue::saturateCopy
_TEXT	ENDS
PUBLIC	??AColourValue@Ogre@@QBEMI@Z			; Ogre::ColourValue::operator[]
; Function compile flags: /Odtp
;	COMDAT ??AColourValue@Ogre@@QBEMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AColourValue@Ogre@@QBEMI@Z PROC			; Ogre::ColourValue::operator[], COMDAT
; _this$ = ecx

; 150  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 			assert( i < 4 );
; 152  : 
; 153  : 			return *(&r+i);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax*4]

; 154  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??AColourValue@Ogre@@QBEMI@Z ENDP			; Ogre::ColourValue::operator[]
_TEXT	ENDS
PUBLIC	??AColourValue@Ogre@@QAEAAMI@Z			; Ogre::ColourValue::operator[]
; Function compile flags: /Odtp
;	COMDAT ??AColourValue@Ogre@@QAEAAMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AColourValue@Ogre@@QAEAAMI@Z PROC			; Ogre::ColourValue::operator[], COMDAT
; _this$ = ecx

; 158  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 159  : 			assert( i < 4 );
; 160  : 
; 161  : 			return *(&r+i);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 162  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??AColourValue@Ogre@@QAEAAMI@Z ENDP			; Ogre::ColourValue::operator[]
_TEXT	ENDS
PUBLIC	?ptr@ColourValue@Ogre@@QAEPAMXZ			; Ogre::ColourValue::ptr
; Function compile flags: /Odtp
;	COMDAT ?ptr@ColourValue@Ogre@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ptr@ColourValue@Ogre@@QAEPAMXZ PROC			; Ogre::ColourValue::ptr, COMDAT
; _this$ = ecx

; 166  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 167  : 			return &r;

	mov	eax, DWORD PTR _this$[ebp]

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?ptr@ColourValue@Ogre@@QAEPAMXZ ENDP			; Ogre::ColourValue::ptr
_TEXT	ENDS
PUBLIC	?ptr@ColourValue@Ogre@@QBEPBMXZ			; Ogre::ColourValue::ptr
; Function compile flags: /Odtp
;	COMDAT ?ptr@ColourValue@Ogre@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ptr@ColourValue@Ogre@@QBEPBMXZ PROC			; Ogre::ColourValue::ptr, COMDAT
; _this$ = ecx

; 171  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 172  : 			return &r;

	mov	eax, DWORD PTR _this$[ebp]

; 173  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?ptr@ColourValue@Ogre@@QBEPBMXZ ENDP			; Ogre::ColourValue::ptr
_TEXT	ENDS
PUBLIC	??HColourValue@Ogre@@QBE?AV01@ABV01@@Z		; Ogre::ColourValue::operator+
; Function compile flags: /Odtp
;	COMDAT ??HColourValue@Ogre@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_kSum$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_rkVector$ = 12						; size = 4
??HColourValue@Ogre@@QBE?AV01@ABV01@@Z PROC		; Ogre::ColourValue::operator+, COMDAT
; _this$ = ecx

; 178  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 179  : 			ColourValue kSum;

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _kSum$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue

; 180  : 
; 181  : 			kSum.r = r + rkVector.r;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [ecx]
	fstp	DWORD PTR _kSum$[ebp]

; 182  : 			kSum.g = g + rkVector.g;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR _kSum$[ebp+4]

; 183  : 			kSum.b = b + rkVector.b;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [edx+8]
	fstp	DWORD PTR _kSum$[ebp+8]

; 184  : 			kSum.a = a + rkVector.a;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [ecx+12]
	fstp	DWORD PTR _kSum$[ebp+12]

; 185  : 
; 186  : 			return kSum;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR _kSum$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _kSum$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _kSum$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _kSum$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 187  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??HColourValue@Ogre@@QBE?AV01@ABV01@@Z ENDP		; Ogre::ColourValue::operator+
_TEXT	ENDS
PUBLIC	??GColourValue@Ogre@@QBE?AV01@ABV01@@Z		; Ogre::ColourValue::operator-
; Function compile flags: /Odtp
;	COMDAT ??GColourValue@Ogre@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_kDiff$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_rkVector$ = 12						; size = 4
??GColourValue@Ogre@@QBE?AV01@ABV01@@Z PROC		; Ogre::ColourValue::operator-, COMDAT
; _this$ = ecx

; 190  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 191  : 			ColourValue kDiff;

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _kDiff$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue

; 192  : 
; 193  : 			kDiff.r = r - rkVector.r;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _kDiff$[ebp]

; 194  : 			kDiff.g = g - rkVector.g;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR _kDiff$[ebp+4]

; 195  : 			kDiff.b = b - rkVector.b;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [edx+8]
	fstp	DWORD PTR _kDiff$[ebp+8]

; 196  : 			kDiff.a = a - rkVector.a;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [ecx+12]
	fstp	DWORD PTR _kDiff$[ebp+12]

; 197  : 
; 198  : 			return kDiff;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR _kDiff$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _kDiff$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _kDiff$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _kDiff$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 199  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??GColourValue@Ogre@@QBE?AV01@ABV01@@Z ENDP		; Ogre::ColourValue::operator-
_TEXT	ENDS
PUBLIC	??DColourValue@Ogre@@QBE?AV01@M@Z		; Ogre::ColourValue::operator*
; Function compile flags: /Odtp
;	COMDAT ??DColourValue@Ogre@@QBE?AV01@M@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_kProd$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_fScalar$ = 12						; size = 4
??DColourValue@Ogre@@QBE?AV01@M@Z PROC			; Ogre::ColourValue::operator*, COMDAT
; _this$ = ecx

; 202  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 			ColourValue kProd;

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _kProd$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue

; 204  : 
; 205  : 			kProd.r = fScalar*r;

	fld	DWORD PTR _fScalar$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR _kProd$[ebp]

; 206  : 			kProd.g = fScalar*g;

	fld	DWORD PTR _fScalar$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+4]
	fstp	DWORD PTR _kProd$[ebp+4]

; 207  : 			kProd.b = fScalar*b;

	fld	DWORD PTR _fScalar$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	fstp	DWORD PTR _kProd$[ebp+8]

; 208  : 			kProd.a = fScalar*a;

	fld	DWORD PTR _fScalar$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+12]
	fstp	DWORD PTR _kProd$[ebp+12]

; 209  : 
; 210  : 			return kProd;

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR _kProd$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _kProd$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _kProd$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _kProd$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 211  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??DColourValue@Ogre@@QBE?AV01@M@Z ENDP			; Ogre::ColourValue::operator*
_TEXT	ENDS
PUBLIC	??DColourValue@Ogre@@QBE?AV01@ABV01@@Z		; Ogre::ColourValue::operator*
; Function compile flags: /Odtp
;	COMDAT ??DColourValue@Ogre@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_kProd$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_rhs$ = 12						; size = 4
??DColourValue@Ogre@@QBE?AV01@ABV01@@Z PROC		; Ogre::ColourValue::operator*, COMDAT
; _this$ = ecx

; 214  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 215  : 			ColourValue kProd;

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _kProd$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue

; 216  : 
; 217  : 			kProd.r = rhs.r * r;

	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR _kProd$[ebp]

; 218  : 			kProd.g = rhs.g * g;

	mov	edx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	fstp	DWORD PTR _kProd$[ebp+4]

; 219  : 			kProd.b = rhs.b * b;

	mov	ecx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	fstp	DWORD PTR _kProd$[ebp+8]

; 220  : 			kProd.a = rhs.a * a;

	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	fstp	DWORD PTR _kProd$[ebp+12]

; 221  : 
; 222  : 			return kProd;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR _kProd$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _kProd$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _kProd$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _kProd$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 223  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??DColourValue@Ogre@@QBE?AV01@ABV01@@Z ENDP		; Ogre::ColourValue::operator*
_TEXT	ENDS
PUBLIC	??KColourValue@Ogre@@QBE?AV01@ABV01@@Z		; Ogre::ColourValue::operator/
; Function compile flags: /Odtp
;	COMDAT ??KColourValue@Ogre@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_kProd$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_rhs$ = 12						; size = 4
??KColourValue@Ogre@@QBE?AV01@ABV01@@Z PROC		; Ogre::ColourValue::operator/, COMDAT
; _this$ = ecx

; 226  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 227  : 			ColourValue kProd;

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _kProd$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue

; 228  : 
; 229  : 			kProd.r = rhs.r / r;

	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx]
	fstp	DWORD PTR _kProd$[ebp]

; 230  : 			kProd.g = rhs.g / g;

	mov	edx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [eax+4]
	fstp	DWORD PTR _kProd$[ebp+4]

; 231  : 			kProd.b = rhs.b / b;

	mov	ecx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [edx+8]
	fstp	DWORD PTR _kProd$[ebp+8]

; 232  : 			kProd.a = rhs.a / a;

	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx+12]
	fstp	DWORD PTR _kProd$[ebp+12]

; 233  : 
; 234  : 			return kProd;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR _kProd$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _kProd$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _kProd$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _kProd$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 235  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??KColourValue@Ogre@@QBE?AV01@ABV01@@Z ENDP		; Ogre::ColourValue::operator/
_TEXT	ENDS
PUBLIC	??KColourValue@Ogre@@QBE?AV01@M@Z		; Ogre::ColourValue::operator/
; Function compile flags: /Odtp
;	COMDAT ??KColourValue@Ogre@@QBE?AV01@M@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
_kDiv$ = -20						; size = 16
_fInv$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_fScalar$ = 12						; size = 4
??KColourValue@Ogre@@QBE?AV01@M@Z PROC			; Ogre::ColourValue::operator/, COMDAT
; _this$ = ecx

; 238  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 239  : 			assert( fScalar != 0.0f );
; 240  : 
; 241  : 			ColourValue kDiv;

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _kDiv$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue

; 242  : 
; 243  : 			float fInv = 1.0f / fScalar;

	fld	DWORD PTR _fScalar$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _fInv$[ebp]

; 244  : 			kDiv.r = r * fInv;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _fInv$[ebp]
	fstp	DWORD PTR _kDiv$[ebp]

; 245  : 			kDiv.g = g * fInv;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR _fInv$[ebp]
	fstp	DWORD PTR _kDiv$[ebp+4]

; 246  : 			kDiv.b = b * fInv;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fmul	DWORD PTR _fInv$[ebp]
	fstp	DWORD PTR _kDiv$[ebp+8]

; 247  : 			kDiv.a = a * fInv;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _fInv$[ebp]
	fstp	DWORD PTR _kDiv$[ebp+12]

; 248  : 
; 249  : 			return kDiv;

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR _kDiv$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _kDiv$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _kDiv$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _kDiv$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 250  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??KColourValue@Ogre@@QBE?AV01@M@Z ENDP			; Ogre::ColourValue::operator/
_TEXT	ENDS
PUBLIC	??YColourValue@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::ColourValue::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YColourValue@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rkVector$ = 8						; size = 4
??YColourValue@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::ColourValue::operator+=, COMDAT
; _this$ = ecx

; 266  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 			r += rkVector.r;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 268  : 			g += rkVector.g;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 269  : 			b += rkVector.b;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 270  : 			a += rkVector.a;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+12]

; 271  : 
; 272  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 273  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YColourValue@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::ColourValue::operator+=
_TEXT	ENDS
PUBLIC	??ZColourValue@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::ColourValue::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZColourValue@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rkVector$ = 8						; size = 4
??ZColourValue@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::ColourValue::operator-=, COMDAT
; _this$ = ecx

; 276  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 			r -= rkVector.r;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 278  : 			g -= rkVector.g;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 279  : 			b -= rkVector.b;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 280  : 			a -= rkVector.a;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+12]

; 281  : 
; 282  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 283  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZColourValue@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::ColourValue::operator-=
_TEXT	ENDS
PUBLIC	??XColourValue@Ogre@@QAEAAV01@M@Z		; Ogre::ColourValue::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XColourValue@Ogre@@QAEAAV01@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fScalar$ = 8						; size = 4
??XColourValue@Ogre@@QAEAAV01@M@Z PROC			; Ogre::ColourValue::operator*=, COMDAT
; _this$ = ecx

; 286  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 287  : 			r *= fScalar;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _fScalar$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 288  : 			g *= fScalar;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _fScalar$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 289  : 			b *= fScalar;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _fScalar$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 290  : 			a *= fScalar;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _fScalar$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 291  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 292  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XColourValue@Ogre@@QAEAAV01@M@Z ENDP			; Ogre::ColourValue::operator*=
_TEXT	ENDS
PUBLIC	??_0ColourValue@Ogre@@QAEAAV01@M@Z		; Ogre::ColourValue::operator/=
; Function compile flags: /Odtp
;	COMDAT ??_0ColourValue@Ogre@@QAEAAV01@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fInv$ = -4						; size = 4
_fScalar$ = 8						; size = 4
??_0ColourValue@Ogre@@QAEAAV01@M@Z PROC			; Ogre::ColourValue::operator/=, COMDAT
; _this$ = ecx

; 295  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 296  : 			assert( fScalar != 0.0 );
; 297  : 
; 298  : 			float fInv = 1.0f / fScalar;

	fld	DWORD PTR _fScalar$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _fInv$[ebp]

; 299  : 
; 300  : 			r *= fInv;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _fInv$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 301  : 			g *= fInv;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _fInv$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 302  : 			b *= fInv;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _fInv$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 303  : 			a *= fInv;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _fInv$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 304  : 
; 305  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 306  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??_0ColourValue@Ogre@@QAEAAV01@M@Z ENDP			; Ogre::ColourValue::operator/=
_TEXT	ENDS
PUBLIC	??4ColourValue@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::ColourValue::operator=
; Function compile flags: /Odtp
;	COMDAT ??4ColourValue@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ColourValue@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::ColourValue::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4ColourValue@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::ColourValue::operator=
_TEXT	ENDS
PUBLIC	??_FColourValue@Ogre@@QAEXXZ			; Ogre::ColourValue::`default constructor closure'
; Function compile flags: /Odtp
;	COMDAT ??_FColourValue@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_FColourValue@Ogre@@QAEXXZ PROC			; Ogre::ColourValue::`default constructor closure', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue
	mov	esp, ebp
	pop	ebp
	ret	0
??_FColourValue@Ogre@@QAEXXZ ENDP			; Ogre::ColourValue::`default constructor closure'
_TEXT	ENDS
PUBLIC	??0Vector2@Ogre@@QAE@XZ				; Ogre::Vector2::Vector2
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector2.h
;	COMDAT ??0Vector2@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector2@Ogre@@QAE@XZ PROC				; Ogre::Vector2::Vector2, COMDAT
; _this$ = ecx

; 50   : 		Vector2(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector2@Ogre@@QAE@XZ ENDP				; Ogre::Vector2::Vector2
_TEXT	ENDS
PUBLIC	??0Vector2@Ogre@@QAE@MM@Z			; Ogre::Vector2::Vector2
; Function compile flags: /Odtp
;	COMDAT ??0Vector2@Ogre@@QAE@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
??0Vector2@Ogre@@QAE@MM@Z PROC				; Ogre::Vector2::Vector2, COMDAT
; _this$ = ecx

; 51   : 		Vector2( float x1, float y1 ) : x(x1), y(y1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Vector2@Ogre@@QAE@MM@Z ENDP				; Ogre::Vector2::Vector2
_TEXT	ENDS
PUBLIC	??0Vector2@Ogre@@QAE@M@Z			; Ogre::Vector2::Vector2
; Function compile flags: /Odtp
;	COMDAT ??0Vector2@Ogre@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector2@Ogre@@QAE@M@Z PROC				; Ogre::Vector2::Vector2, COMDAT
; _this$ = ecx

; 52   : 		Vector2(float v) : x(v), y(v){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector2@Ogre@@QAE@M@Z ENDP				; Ogre::Vector2::Vector2
_TEXT	ENDS
PUBLIC	??4Vector2@Ogre@@QAEABV01@ABV01@@Z		; Ogre::Vector2::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Vector2@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??4Vector2@Ogre@@QAEABV01@ABV01@@Z PROC			; Ogre::Vector2::operator=, COMDAT
; _this$ = ecx

; 55   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 			x = vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 57   : 			y = vec.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 58   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 59   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector2@Ogre@@QAEABV01@ABV01@@Z ENDP			; Ogre::Vector2::operator=
_TEXT	ENDS
PUBLIC	??YVector2@Ogre@@QAEXABV01@@Z			; Ogre::Vector2::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YVector2@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??YVector2@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector2::operator+=, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			x += vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 63   : 			y += vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 64   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YVector2@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector2::operator+=
_TEXT	ENDS
PUBLIC	??ZVector2@Ogre@@QAEXABV01@@Z			; Ogre::Vector2::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZVector2@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??ZVector2@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector2::operator-=, COMDAT
; _this$ = ecx

; 66   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 			x -= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 68   : 			y -= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 69   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector2@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector2::operator-=
_TEXT	ENDS
PUBLIC	??XVector2@Ogre@@QAEXM@Z			; Ogre::Vector2::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector2@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XVector2@Ogre@@QAEXM@Z PROC				; Ogre::Vector2::operator*=, COMDAT
; _this$ = ecx

; 71   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 72   : 			x *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 73   : 			y *= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 74   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector2@Ogre@@QAEXM@Z ENDP				; Ogre::Vector2::operator*=
_TEXT	ENDS
PUBLIC	??_0Vector2@Ogre@@QAEXM@Z			; Ogre::Vector2::operator/=
; Function compile flags: /Odtp
;	COMDAT ??_0Vector2@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??_0Vector2@Ogre@@QAEXM@Z PROC				; Ogre::Vector2::operator/=, COMDAT
; _this$ = ecx

; 76   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 			x /= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 78   : 			y /= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fdiv	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 79   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??_0Vector2@Ogre@@QAEXM@Z ENDP				; Ogre::Vector2::operator/=
_TEXT	ENDS
PUBLIC	??8Vector2@Ogre@@QAE_NABV01@@Z			; Ogre::Vector2::operator==
; Function compile flags: /Odtp
;	COMDAT ??8Vector2@Ogre@@QAE_NABV01@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??8Vector2@Ogre@@QAE_NABV01@@Z PROC			; Ogre::Vector2::operator==, COMDAT
; _this$ = ecx

; 81   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 			return x==vec.x&&y==vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@7
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@7
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@operator@7
$LN3@operator@7:
	mov	DWORD PTR tv72[ebp], 0
$LN4@operator@7:
	mov	al, BYTE PTR tv72[ebp]

; 83   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector2@Ogre@@QAE_NABV01@@Z ENDP			; Ogre::Vector2::operator==
_TEXT	ENDS
PUBLIC	??9Vector2@Ogre@@QAE_NABV01@@Z			; Ogre::Vector2::operator!=
; Function compile flags: /Odtp
;	COMDAT ??9Vector2@Ogre@@QAE_NABV01@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??9Vector2@Ogre@@QAE_NABV01@@Z PROC			; Ogre::Vector2::operator!=, COMDAT
; _this$ = ecx

; 85   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 			return x!=vec.x||y!=vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@8
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@8
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN4@operator@8
$LN3@operator@8:
	mov	DWORD PTR tv72[ebp], 1
$LN4@operator@8:
	mov	al, BYTE PTR tv72[ebp]

; 87   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9Vector2@Ogre@@QAE_NABV01@@Z ENDP			; Ogre::Vector2::operator!=
_TEXT	ENDS
PUBLIC	??BVector2@Ogre@@QAEPAMXZ			; Ogre::Vector2::operator float *
; Function compile flags: /Odtp
;	COMDAT ??BVector2@Ogre@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector2@Ogre@@QAEPAMXZ PROC				; Ogre::Vector2::operator float *, COMDAT
; _this$ = ecx

; 89   : 		operator float *(){ return &x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector2@Ogre@@QAEPAMXZ ENDP				; Ogre::Vector2::operator float *
_TEXT	ENDS
PUBLIC	??BVector2@Ogre@@QBEPBMXZ			; Ogre::Vector2::operator float const *
; Function compile flags: /Odtp
;	COMDAT ??BVector2@Ogre@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector2@Ogre@@QBEPBMXZ PROC				; Ogre::Vector2::operator float const *, COMDAT
; _this$ = ecx

; 90   : 		operator const float *() const{ return &x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector2@Ogre@@QBEPBMXZ ENDP				; Ogre::Vector2::operator float const *
_TEXT	ENDS
PUBLIC	??HVector2@Ogre@@QBE?AV01@XZ			; Ogre::Vector2::operator+
; Function compile flags: /Odtp
;	COMDAT ??HVector2@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??HVector2@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector2::operator+, COMDAT
; _this$ = ecx

; 91   : 		Vector2 operator +() const{ return *this; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??HVector2@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector2::operator+
_TEXT	ENDS
PUBLIC	??GVector2@Ogre@@QBE?AV01@XZ			; Ogre::Vector2::operator-
; Function compile flags: /Odtp
;	COMDAT ??GVector2@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??GVector2@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector2::operator-, COMDAT
; _this$ = ecx

; 92   : 		Vector2 operator -() const{ return Vector2(-x,-y);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector2@Ogre@@QAE@MM@Z		; Ogre::Vector2::Vector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??GVector2@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector2::operator-
_TEXT	ENDS
PUBLIC	?setElement@Vector2@Ogre@@QAEXMM@Z		; Ogre::Vector2::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector2@Ogre@@QAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
?setElement@Vector2@Ogre@@QAEXMM@Z PROC			; Ogre::Vector2::setElement, COMDAT
; _this$ = ecx

; 95   : 		{ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 			x = x1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]

; 97   : 			y = y1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]

; 98   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setElement@Vector2@Ogre@@QAEXMM@Z ENDP			; Ogre::Vector2::setElement
_TEXT	ENDS
PUBLIC	?length@Vector2@Ogre@@QBEMXZ			; Ogre::Vector2::length
; Function compile flags: /Odtp
;	COMDAT ?length@Vector2@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv80 = -8						; size = 4
_this$ = -4						; size = 4
?length@Vector2@Ogre@@QBEMXZ PROC			; Ogre::Vector2::length, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 			return (float)sqrt(x*x + y*y);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv80[ebp]
	fld	DWORD PTR tv80[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 102  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@Vector2@Ogre@@QBEMXZ ENDP			; Ogre::Vector2::length
_TEXT	ENDS
PUBLIC	?lengthSqr@Vector2@Ogre@@QBEMXZ			; Ogre::Vector2::lengthSqr
; Function compile flags: /Odtp
;	COMDAT ?lengthSqr@Vector2@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
?lengthSqr@Vector2@Ogre@@QBEMXZ PROC			; Ogre::Vector2::lengthSqr, COMDAT
; _this$ = ecx

; 104  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 			return x*x + y*y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv78[ebp]
	fld	DWORD PTR tv78[ebp]

; 106  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?lengthSqr@Vector2@Ogre@@QBEMXZ ENDP			; Ogre::Vector2::lengthSqr
_TEXT	ENDS
PUBLIC	?size@?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::size
PUBLIC	?getNumElements@VertexFormat@Ogre@@QBEIXZ	; Ogre::VertexFormat::getNumElements
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevertexformat.h
;	COMDAT ?getNumElements@VertexFormat@Ogre@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumElements@VertexFormat@Ogre@@QBEIXZ PROC		; Ogre::VertexFormat::getNumElements, COMDAT
; _this$ = ecx

; 82   : 		uint getNumElements() const{ return (uint)m_Elements.size(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::size
	mov	esp, ebp
	pop	ebp
	ret	0
?getNumElements@VertexFormat@Ogre@@QBEIXZ ENDP		; Ogre::VertexFormat::getNumElements
_TEXT	ENDS
PUBLIC	??A?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEABVVertexElement@Ogre@@I@Z ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::operator[]
PUBLIC	?getElement@VertexFormat@Ogre@@QBEABVVertexElement@2@I@Z ; Ogre::VertexFormat::getElement
; Function compile flags: /Odtp
;	COMDAT ?getElement@VertexFormat@Ogre@@QBEABVVertexElement@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getElement@VertexFormat@Ogre@@QBEABVVertexElement@2@I@Z PROC ; Ogre::VertexFormat::getElement, COMDAT
; _this$ = ecx

; 83   : 		const VertexElement &getElement(uint i) const{ return m_Elements[i]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEABVVertexElement@Ogre@@I@Z ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::operator[]
	mov	esp, ebp
	pop	ebp
	ret	4
?getElement@VertexFormat@Ogre@@QBEABVVertexElement@2@I@Z ENDP ; Ogre::VertexFormat::getElement
_TEXT	ENDS
PUBLIC	?getRTTI@RenderLines@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::RenderLines::getRTTI
EXTRN	?m_RTTI@RenderLines@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::RenderLines::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrelines.h
;	COMDAT ?getRTTI@RenderLines@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@RenderLines@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::RenderLines::getRTTI, COMDAT
; _this$ = ecx

; 15   : 		DECLARE_RTTI(RenderLines)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@RenderLines@Ogre@@2VRuntimeClass@2@B ; Ogre::RenderLines::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@RenderLines@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::RenderLines::getRTTI
_TEXT	ENDS
PUBLIC	?newObject@RenderLines@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::RenderLines::newObject
EXTRN	??0RenderLines@Ogre@@QAE@_N@Z:PROC		; Ogre::RenderLines::RenderLines
EXTRN	??2MemoryDelegation@Ogre@@SAPAXI@Z:PROC		; Ogre::MemoryDelegation::operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@RenderLines@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@RenderLines@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@RenderLines@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@RenderLines@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@RenderLines@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv76 = -24						; size = 4
$T73848 = -20						; size = 4
$T73847 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@RenderLines@Ogre@@SAPAVBaseObject@2@XZ PROC	; Ogre::RenderLines::newObject, COMDAT

; 15   : 		DECLARE_RTTI(RenderLines)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@RenderLines@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	388					; 00000184H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T73848[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T73848[ebp], 0
	je	SHORT $LN3@newObject
	push	0
	mov	ecx, DWORD PTR $T73848[ebp]
	call	??0RenderLines@Ogre@@QAE@_N@Z		; Ogre::RenderLines::RenderLines
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@newObject
$LN3@newObject:
	mov	DWORD PTR tv76[ebp], 0
$LN4@newObject:
	mov	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T73847[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T73847[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@RenderLines@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	388					; 00000184H
	mov	eax, DWORD PTR $T73848[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@RenderLines@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@RenderLines@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@RenderLines@Ogre@@SAPAVBaseObject@2@XZ ENDP	; Ogre::RenderLines::newObject
PUBLIC	??1?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::~vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
PUBLIC	??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
PUBLIC	??_7RenderLines@Ogre@@6B@			; Ogre::RenderLines::`vftable'
PUBLIC	??0RenderLines@Ogre@@QAE@ABV01@@Z		; Ogre::RenderLines::RenderLines
PUBLIC	??_R4RenderLines@Ogre@@6B@			; Ogre::RenderLines::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRenderLines@Ogre@@@8			; Ogre::RenderLines `RTTI Type Descriptor'
PUBLIC	??_R3RenderLines@Ogre@@8			; Ogre::RenderLines::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RenderLines@Ogre@@8			; Ogre::RenderLines::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RenderLines@Ogre@@8		; Ogre::RenderLines::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_ERenderLines@Ogre@@UAEPAXI@Z			; Ogre::RenderLines::`vector deleting destructor'
EXTRN	??1VertexFormat@Ogre@@QAE@XZ:PROC		; Ogre::VertexFormat::~VertexFormat
EXTRN	??0VertexFormat@Ogre@@QAE@ABV01@@Z:PROC		; Ogre::VertexFormat::VertexFormat
EXTRN	?update@RenderLines@Ogre@@UAEXI@Z:PROC		; Ogre::RenderLines::update
EXTRN	?render@RenderLines@Ogre@@UAEXPAVSceneRenderer@2@ABUShaderEnvData@2@@Z:PROC ; Ogre::RenderLines::render
;	COMDAT ??_R1A@?0A@EA@RenderLines@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RenderLines@Ogre@@8 DD FLAT:??_R0?AVRenderLines@Ogre@@@8 ; Ogre::RenderLines::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RenderLines@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2RenderLines@Ogre@@8
rdata$r	SEGMENT
??_R2RenderLines@Ogre@@8 DD FLAT:??_R1A@?0A@EA@RenderLines@Ogre@@8 ; Ogre::RenderLines::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@RenderableObject@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@MovableObject@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3RenderLines@Ogre@@8
rdata$r	SEGMENT
??_R3RenderLines@Ogre@@8 DD 00H				; Ogre::RenderLines::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2RenderLines@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRenderLines@Ogre@@@8
_DATA	SEGMENT
??_R0?AVRenderLines@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::RenderLines `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRenderLines@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4RenderLines@Ogre@@6B@
rdata$r	SEGMENT
??_R4RenderLines@Ogre@@6B@ DD 00H			; Ogre::RenderLines::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRenderLines@Ogre@@@8
	DD	FLAT:??_R3RenderLines@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7RenderLines@Ogre@@6B@
CONST	SEGMENT
??_7RenderLines@Ogre@@6B@ DD FLAT:??_R4RenderLines@Ogre@@6B@ ; Ogre::RenderLines::`vftable'
	DD	FLAT:?getRTTI@RenderLines@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_ERenderLines@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?enableUVMask@RenderableObject@Ogre@@UAEX_N0@Z
	DD	FLAT:?setLiuGuangTexture@RenderableObject@Ogre@@UAEXPBD@Z
	DD	FLAT:?setLiuGuangTexture@RenderableObject@Ogre@@UAEXPAVTextureData@2@@Z
	DD	FLAT:?SetForceShadowMapCull@MovableObject@Ogre@@UAEX_N@Z
	DD	FLAT:?update@RenderLines@Ogre@@UAEXI@Z
	DD	FLAT:?resetUpdate@MovableObject@Ogre@@UAEX_NI@Z
	DD	FLAT:?attachToScene@MovableObject@Ogre@@UAEXPAVGameScene@2@_N@Z
	DD	FLAT:?detachFromScene@MovableObject@Ogre@@UAEXXZ
	DD	FLAT:?intersectRay@MovableObject@Ogre@@UAE_NW4IntersectType@2@ABVRay@2@PAM@Z
	DD	FLAT:?getAnchorWorldMatrix@MovableObject@Ogre@@UAE?AVMatrix4@2@H@Z
	DD	FLAT:?invalidWorldCache@MovableObject@Ogre@@UAEXXZ
	DD	FLAT:?updateWorldCache@MovableObject@Ogre@@UAEXXZ
	DD	FLAT:?render@RenderLines@Ogre@@UAEXPAVSceneRenderer@2@ABUShaderEnvData@2@@Z
	DD	FLAT:?setCanSel@RenderableObject@Ogre@@UAEX_N@Z
	DD	FLAT:?setLayer@RenderableObject@Ogre@@UAEXW4RenderLayer@2@@Z
	DD	FLAT:?BuildDecalMesh@RenderableObject@Ogre@@UAEXABVBoxBound@2@PAVVector3@2@PAGHHAAH3@Z
	DD	FLAT:?addRenderUsageBits@RenderableObject@Ogre@@UAEXW4RenderUsage@2@@Z
	DD	FLAT:?clearRenderUsageBits@RenderableObject@Ogre@@UAEXW4RenderUsage@2@@Z
	DD	FLAT:?getRenderPassRequired@RenderableObject@Ogre@@UAEXAAURenderPassDesc@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RenderLines@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RenderLines@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0RenderLines@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0RenderLines@Ogre@@QAE@ABV01@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0RenderLines@Ogre@@QAE@ABV01@@Z$3
__ehfuncinfo$??0RenderLines@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0RenderLines@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0RenderLines@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0RenderLines@Ogre@@QAE@ABV01@@Z PROC			; Ogre::RenderLines::RenderLines, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RenderLines@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0RenderableObject@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7RenderLines@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 280				; 00000118H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	call	??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 304				; 00000130H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 328				; 00000148H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 328				; 00000148H
	call	??0BoxBound@Ogre@@QAE@ABV01@@Z		; Ogre::BoxBound::BoxBound
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+356]
	mov	DWORD PTR [edx+356], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	mov	DWORD PTR [edx+360], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 364				; 0000016cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 364				; 0000016cH
	call	??0VertexFormat@Ogre@@QAE@ABV01@@Z	; Ogre::VertexFormat::VertexFormat
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RenderLines@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1RenderableObject@Ogre@@MAE@XZ	; Ogre::RenderableObject::~RenderableObject
__unwindfunclet$??0RenderLines@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	jmp	??1?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::~vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
__unwindfunclet$??0RenderLines@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	jmp	??1?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::~vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
__unwindfunclet$??0RenderLines@Ogre@@QAE@ABV01@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 364				; 0000016cH
	jmp	??1VertexFormat@Ogre@@QAE@XZ		; Ogre::VertexFormat::~VertexFormat
__ehhandler$??0RenderLines@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RenderLines@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RenderLines@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::RenderLines::RenderLines
PUBLIC	??4?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::operator=
PUBLIC	??4RenderLines@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::RenderLines::operator=
EXTRN	??4VertexFormat@Ogre@@QAEAAV01@ABV01@@Z:PROC	; Ogre::VertexFormat::operator=
; Function compile flags: /Odtp
;	COMDAT ??4RenderLines@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4RenderLines@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::RenderLines::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4RenderableObject@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 280				; 00000118H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	call	??4?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 304				; 00000130H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??4?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 328				; 00000148H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 328				; 00000148H
	call	??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+356]
	mov	DWORD PTR [ecx+356], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+360]
	mov	DWORD PTR [ecx+360], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 364				; 0000016cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 364				; 0000016cH
	call	??4VertexFormat@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::VertexFormat::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4RenderLines@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::RenderLines::operator=
_TEXT	ENDS
PUBLIC	??_FRenderLines@Ogre@@QAEXXZ			; Ogre::RenderLines::`default constructor closure'
; Function compile flags: /Odtp
;	COMDAT ??_FRenderLines@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_FRenderLines@Ogre@@QAEXXZ PROC			; Ogre::RenderLines::`default constructor closure', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0RenderLines@Ogre@@QAE@_N@Z		; Ogre::RenderLines::RenderLines
	mov	esp, ebp
	pop	ebp
	ret	0
??_FRenderLines@Ogre@@QAEXXZ ENDP			; Ogre::RenderLines::`default constructor closure'
_TEXT	ENDS
PUBLIC	??_GRenderLines@Ogre@@UAEPAXI@Z			; Ogre::RenderLines::`scalar deleting destructor'
EXTRN	??1RenderLines@Ogre@@UAE@XZ:PROC		; Ogre::RenderLines::~RenderLines
; Function compile flags: /Odtp
;	COMDAT ??_GRenderLines@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRenderLines@Ogre@@UAEPAXI@Z PROC			; Ogre::RenderLines::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RenderLines@Ogre@@UAE@XZ		; Ogre::RenderLines::~RenderLines
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@15
	push	388					; 00000184H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@15:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRenderLines@Ogre@@UAEPAXI@Z ENDP			; Ogre::RenderLines::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_ERenderLines@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ERenderLines@Ogre@@UAEPAXI@Z PROC			; Ogre::RenderLines::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@15
	push	OFFSET ??1RenderLines@Ogre@@UAE@XZ	; Ogre::RenderLines::~RenderLines
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	388					; 00000184H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@15
	push	388					; 00000184H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@15:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@15
$LN3@vector@15:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RenderLines@Ogre@@UAE@XZ		; Ogre::RenderLines::~RenderLines
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@15
	push	388					; 00000184H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@15:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@15:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ERenderLines@Ogre@@UAEPAXI@Z ENDP			; Ogre::RenderLines::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@DummyNode@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::DummyNode::getRTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogredummynode.h
;	COMDAT ?getRTTI@DummyNode@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@DummyNode@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::DummyNode::getRTTI, COMDAT
; _this$ = ecx

; 11   : 		DECLARE_RTTI(DummyNode)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@DummyNode@Ogre@@2VRuntimeClass@2@B ; Ogre::DummyNode::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@DummyNode@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::DummyNode::getRTTI
_TEXT	ENDS
PUBLIC	??0DummyNode@Ogre@@QAE@PAVDummyNodeData@1@@Z	; Ogre::DummyNode::DummyNode
PUBLIC	?newObject@DummyNode@Ogre@@SAPAVBaseObject@2@XZ	; Ogre::DummyNode::newObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@DummyNode@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@DummyNode@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@DummyNode@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@DummyNode@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@DummyNode@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv76 = -24						; size = 4
$T73883 = -20						; size = 4
$T73882 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@DummyNode@Ogre@@SAPAVBaseObject@2@XZ PROC	; Ogre::DummyNode::newObject, COMDAT

; 11   : 		DECLARE_RTTI(DummyNode)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@DummyNode@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	392					; 00000188H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T73883[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T73883[ebp], 0
	je	SHORT $LN3@newObject@2
	push	0
	mov	ecx, DWORD PTR $T73883[ebp]
	call	??0DummyNode@Ogre@@QAE@PAVDummyNodeData@1@@Z ; Ogre::DummyNode::DummyNode
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@newObject@2
$LN3@newObject@2:
	mov	DWORD PTR tv76[ebp], 0
$LN4@newObject@2:
	mov	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T73882[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T73882[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@DummyNode@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	392					; 00000188H
	mov	eax, DWORD PTR $T73883[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@DummyNode@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@DummyNode@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@DummyNode@Ogre@@SAPAVBaseObject@2@XZ ENDP	; Ogre::DummyNode::newObject
PUBLIC	?deleteThis@DummyNode@Ogre@@UAEXXZ		; Ogre::DummyNode::deleteThis
; Function compile flags: /Odtp
;	COMDAT ?deleteThis@DummyNode@Ogre@@UAEXXZ
_TEXT	SEGMENT
tv74 = -16						; size = 4
_this$ = -12						; size = 4
$T73896 = -8						; size = 4
$T73895 = -4						; size = 4
?deleteThis@DummyNode@Ogre@@UAEXXZ PROC			; Ogre::DummyNode::deleteThis, COMDAT
; _this$ = ecx

; 18   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 19   : 			delete this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T73896[ebp], eax
	mov	ecx, DWORD PTR $T73896[ebp]
	mov	DWORD PTR $T73895[ebp], ecx
	cmp	DWORD PTR $T73895[ebp], 0
	je	SHORT $LN3@deleteThis@2
	push	1
	mov	edx, DWORD PTR $T73895[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T73895[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN1@deleteThis@2
$LN3@deleteThis@2:
	mov	DWORD PTR tv74[ebp], 0
$LN1@deleteThis@2:

; 20   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?deleteThis@DummyNode@Ogre@@UAEXXZ ENDP			; Ogre::DummyNode::deleteThis
_TEXT	ENDS
PUBLIC	??_7DummyNode@Ogre@@6B@				; Ogre::DummyNode::`vftable'
PUBLIC	??0DummyNode@Ogre@@QAE@ABV01@@Z			; Ogre::DummyNode::DummyNode
PUBLIC	??_R4DummyNode@Ogre@@6B@			; Ogre::DummyNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDummyNode@Ogre@@@8			; Ogre::DummyNode `RTTI Type Descriptor'
PUBLIC	??_R3DummyNode@Ogre@@8				; Ogre::DummyNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DummyNode@Ogre@@8				; Ogre::DummyNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DummyNode@Ogre@@8			; Ogre::DummyNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDummyNode@Ogre@@UAEPAXI@Z			; Ogre::DummyNode::`vector deleting destructor'
PUBLIC	?update@DummyNode@Ogre@@UAEXI@Z			; Ogre::DummyNode::update
;	COMDAT ??_R1A@?0A@EA@DummyNode@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DummyNode@Ogre@@8 DD FLAT:??_R0?AVDummyNode@Ogre@@@8 ; Ogre::DummyNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DummyNode@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DummyNode@Ogre@@8
rdata$r	SEGMENT
??_R2DummyNode@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DummyNode@Ogre@@8 ; Ogre::DummyNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@RenderLines@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@RenderableObject@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@MovableObject@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3DummyNode@Ogre@@8
rdata$r	SEGMENT
??_R3DummyNode@Ogre@@8 DD 00H				; Ogre::DummyNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2DummyNode@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDummyNode@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDummyNode@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::DummyNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDummyNode@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DummyNode@Ogre@@6B@
rdata$r	SEGMENT
??_R4DummyNode@Ogre@@6B@ DD 00H				; Ogre::DummyNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDummyNode@Ogre@@@8
	DD	FLAT:??_R3DummyNode@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DummyNode@Ogre@@6B@
CONST	SEGMENT
??_7DummyNode@Ogre@@6B@ DD FLAT:??_R4DummyNode@Ogre@@6B@ ; Ogre::DummyNode::`vftable'
	DD	FLAT:?getRTTI@DummyNode@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EDummyNode@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@DummyNode@Ogre@@UAEXXZ
	DD	FLAT:?enableUVMask@RenderableObject@Ogre@@UAEX_N0@Z
	DD	FLAT:?setLiuGuangTexture@RenderableObject@Ogre@@UAEXPBD@Z
	DD	FLAT:?setLiuGuangTexture@RenderableObject@Ogre@@UAEXPAVTextureData@2@@Z
	DD	FLAT:?SetForceShadowMapCull@MovableObject@Ogre@@UAEX_N@Z
	DD	FLAT:?update@DummyNode@Ogre@@UAEXI@Z
	DD	FLAT:?resetUpdate@MovableObject@Ogre@@UAEX_NI@Z
	DD	FLAT:?attachToScene@MovableObject@Ogre@@UAEXPAVGameScene@2@_N@Z
	DD	FLAT:?detachFromScene@MovableObject@Ogre@@UAEXXZ
	DD	FLAT:?intersectRay@MovableObject@Ogre@@UAE_NW4IntersectType@2@ABVRay@2@PAM@Z
	DD	FLAT:?getAnchorWorldMatrix@MovableObject@Ogre@@UAE?AVMatrix4@2@H@Z
	DD	FLAT:?invalidWorldCache@MovableObject@Ogre@@UAEXXZ
	DD	FLAT:?updateWorldCache@MovableObject@Ogre@@UAEXXZ
	DD	FLAT:?render@RenderLines@Ogre@@UAEXPAVSceneRenderer@2@ABUShaderEnvData@2@@Z
	DD	FLAT:?setCanSel@RenderableObject@Ogre@@UAEX_N@Z
	DD	FLAT:?setLayer@RenderableObject@Ogre@@UAEXW4RenderLayer@2@@Z
	DD	FLAT:?BuildDecalMesh@RenderableObject@Ogre@@UAEXABVBoxBound@2@PAVVector3@2@PAGHHAAH3@Z
	DD	FLAT:?addRenderUsageBits@RenderableObject@Ogre@@UAEXW4RenderUsage@2@@Z
	DD	FLAT:?clearRenderUsageBits@RenderableObject@Ogre@@UAEXW4RenderUsage@2@@Z
	DD	FLAT:?getRenderPassRequired@RenderableObject@Ogre@@UAEXAAURenderPassDesc@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DummyNode@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DummyNode@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0DummyNode@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DummyNode@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DummyNode@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0DummyNode@Ogre@@QAE@ABV01@@Z PROC			; Ogre::DummyNode::DummyNode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DummyNode@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0RenderLines@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7DummyNode@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+388]
	mov	DWORD PTR [edx+388], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DummyNode@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1RenderLines@Ogre@@UAE@XZ		; Ogre::RenderLines::~RenderLines
__ehhandler$??0DummyNode@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DummyNode@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DummyNode@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::DummyNode::DummyNode
PUBLIC	??4DummyNode@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::DummyNode::operator=
; Function compile flags: /Odtp
;	COMDAT ??4DummyNode@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DummyNode@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::DummyNode::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4RenderLines@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+388]
	mov	DWORD PTR [ecx+388], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DummyNode@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::DummyNode::operator=
_TEXT	ENDS
PUBLIC	??_FDummyNode@Ogre@@QAEXXZ			; Ogre::DummyNode::`default constructor closure'
; Function compile flags: /Odtp
;	COMDAT ??_FDummyNode@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_FDummyNode@Ogre@@QAEXXZ PROC				; Ogre::DummyNode::`default constructor closure', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DummyNode@Ogre@@QAE@PAVDummyNodeData@1@@Z ; Ogre::DummyNode::DummyNode
	mov	esp, ebp
	pop	ebp
	ret	0
??_FDummyNode@Ogre@@QAEXXZ ENDP				; Ogre::DummyNode::`default constructor closure'
_TEXT	ENDS
PUBLIC	??1DummyNode@Ogre@@UAE@XZ			; Ogre::DummyNode::~DummyNode
PUBLIC	??_GDummyNode@Ogre@@UAEPAXI@Z			; Ogre::DummyNode::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GDummyNode@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDummyNode@Ogre@@UAEPAXI@Z PROC			; Ogre::DummyNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DummyNode@Ogre@@UAE@XZ		; Ogre::DummyNode::~DummyNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@16
	push	392					; 00000188H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@16:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDummyNode@Ogre@@UAEPAXI@Z ENDP			; Ogre::DummyNode::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EDummyNode@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDummyNode@Ogre@@UAEPAXI@Z PROC			; Ogre::DummyNode::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@16
	push	OFFSET ??1DummyNode@Ogre@@UAE@XZ	; Ogre::DummyNode::~DummyNode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	392					; 00000188H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@16
	push	392					; 00000188H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@16:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@16
$LN3@vector@16:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DummyNode@Ogre@@UAE@XZ		; Ogre::DummyNode::~DummyNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@16
	push	392					; 00000188H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@16:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@16:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDummyNode@Ogre@@UAEPAXI@Z ENDP			; Ogre::DummyNode::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@DummyNodeData@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::DummyNodeData::getRTTI
EXTRN	?m_RTTI@DummyNodeData@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::DummyNodeData::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogredummynodedata.h
;	COMDAT ?getRTTI@DummyNodeData@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@DummyNodeData@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::DummyNodeData::getRTTI, COMDAT
; _this$ = ecx

; 17   : 		DECLARE_RTTI(DummyNodeData)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@DummyNodeData@Ogre@@2VRuntimeClass@2@B ; Ogre::DummyNodeData::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@DummyNodeData@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::DummyNodeData::getRTTI
_TEXT	ENDS
PUBLIC	?newObject@DummyNodeData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::DummyNodeData::newObject
EXTRN	??0DummyNodeData@Ogre@@QAE@XZ:PROC		; Ogre::DummyNodeData::DummyNodeData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@DummyNodeData@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@DummyNodeData@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@DummyNodeData@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@DummyNodeData@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@DummyNodeData@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T73921 = -20						; size = 4
$T73920 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@DummyNodeData@Ogre@@SAPAVBaseObject@2@XZ PROC ; Ogre::DummyNodeData::newObject, COMDAT

; 17   : 		DECLARE_RTTI(DummyNodeData)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@DummyNodeData@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	24					; 00000018H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T73921[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T73921[ebp], 0
	je	SHORT $LN3@newObject@3
	mov	ecx, DWORD PTR $T73921[ebp]
	call	??0DummyNodeData@Ogre@@QAE@XZ		; Ogre::DummyNodeData::DummyNodeData
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject@3
$LN3@newObject@3:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject@3:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T73920[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T73920[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@DummyNodeData@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	24					; 00000018H
	mov	eax, DWORD PTR $T73921[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@DummyNodeData@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@DummyNodeData@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@DummyNodeData@Ogre@@SAPAVBaseObject@2@XZ ENDP ; Ogre::DummyNodeData::newObject
PUBLIC	??_7DummyNodeData@Ogre@@6B@			; Ogre::DummyNodeData::`vftable'
PUBLIC	??0DummyNodeData@Ogre@@QAE@ABV01@@Z		; Ogre::DummyNodeData::DummyNodeData
PUBLIC	??_R4DummyNodeData@Ogre@@6B@			; Ogre::DummyNodeData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDummyNodeData@Ogre@@@8			; Ogre::DummyNodeData `RTTI Type Descriptor'
PUBLIC	??_R3DummyNodeData@Ogre@@8			; Ogre::DummyNodeData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DummyNodeData@Ogre@@8			; Ogre::DummyNodeData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DummyNodeData@Ogre@@8		; Ogre::DummyNodeData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDummyNodeData@Ogre@@MAEPAXI@Z		; Ogre::DummyNodeData::`vector deleting destructor'
EXTRN	?_serialize@DummyNodeData@Ogre@@MAEXAAVArchive@2@H@Z:PROC ; Ogre::DummyNodeData::_serialize
;	COMDAT ??_R1A@?0A@EA@DummyNodeData@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DummyNodeData@Ogre@@8 DD FLAT:??_R0?AVDummyNodeData@Ogre@@@8 ; Ogre::DummyNodeData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DummyNodeData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DummyNodeData@Ogre@@8
rdata$r	SEGMENT
??_R2DummyNodeData@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DummyNodeData@Ogre@@8 ; Ogre::DummyNodeData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3DummyNodeData@Ogre@@8
rdata$r	SEGMENT
??_R3DummyNodeData@Ogre@@8 DD 00H			; Ogre::DummyNodeData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2DummyNodeData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDummyNodeData@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDummyNodeData@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::DummyNodeData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDummyNodeData@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DummyNodeData@Ogre@@6B@
rdata$r	SEGMENT
??_R4DummyNodeData@Ogre@@6B@ DD 00H			; Ogre::DummyNodeData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDummyNodeData@Ogre@@@8
	DD	FLAT:??_R3DummyNodeData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DummyNodeData@Ogre@@6B@
CONST	SEGMENT
??_7DummyNodeData@Ogre@@6B@ DD FLAT:??_R4DummyNodeData@Ogre@@6B@ ; Ogre::DummyNodeData::`vftable'
	DD	FLAT:?getRTTI@DummyNodeData@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@DummyNodeData@Ogre@@MAEXAAVArchive@2@H@Z
	DD	FLAT:??_EDummyNodeData@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DummyNodeData@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DummyNodeData@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0DummyNodeData@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DummyNodeData@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DummyNodeData@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0DummyNodeData@Ogre@@QAE@ABV01@@Z PROC		; Ogre::DummyNodeData::DummyNodeData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DummyNodeData@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7DummyNodeData@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+20]
	mov	BYTE PTR [edx+20], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DummyNodeData@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0DummyNodeData@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DummyNodeData@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DummyNodeData@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::DummyNodeData::DummyNodeData
PUBLIC	??4DummyNodeData@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::DummyNodeData::operator=
; Function compile flags: /Odtp
;	COMDAT ??4DummyNodeData@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DummyNodeData@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::DummyNodeData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+20]
	mov	BYTE PTR [ecx+20], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DummyNodeData@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::DummyNodeData::operator=
_TEXT	ENDS
PUBLIC	??_GDummyNodeData@Ogre@@MAEPAXI@Z		; Ogre::DummyNodeData::`scalar deleting destructor'
EXTRN	??1DummyNodeData@Ogre@@MAE@XZ:PROC		; Ogre::DummyNodeData::~DummyNodeData
; Function compile flags: /Odtp
;	COMDAT ??_GDummyNodeData@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDummyNodeData@Ogre@@MAEPAXI@Z PROC			; Ogre::DummyNodeData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DummyNodeData@Ogre@@MAE@XZ		; Ogre::DummyNodeData::~DummyNodeData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@17
	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@17:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDummyNodeData@Ogre@@MAEPAXI@Z ENDP			; Ogre::DummyNodeData::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EDummyNodeData@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDummyNodeData@Ogre@@MAEPAXI@Z PROC			; Ogre::DummyNodeData::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@17
	push	OFFSET ??1DummyNodeData@Ogre@@MAE@XZ	; Ogre::DummyNodeData::~DummyNodeData
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@17
	push	24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@17:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@17
$LN3@vector@17:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DummyNodeData@Ogre@@MAE@XZ		; Ogre::DummyNodeData::~DummyNodeData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@17
	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@17:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@17:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDummyNodeData@Ogre@@MAEPAXI@Z ENDP			; Ogre::DummyNodeData::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0Plane@Ogre@@QAE@XZ				; Ogre::Plane::Plane
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreplane.h
;	COMDAT ??0Plane@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Plane@Ogre@@QAE@XZ PROC				; Ogre::Plane::Plane, COMDAT
; _this$ = ecx

; 71   : 		Plane()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3

; 72   : 		{
; 73   : 			//assert(0);
; 74   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Plane@Ogre@@QAE@XZ ENDP				; Ogre::Plane::Plane
_TEXT	ENDS
PUBLIC	?setFromNormalAndPoint@Plane@Ogre@@QAEXABVVector3@2@0@Z ; Ogre::Plane::setFromNormalAndPoint
PUBLIC	??0Plane@Ogre@@QAE@ABVVector3@1@0@Z		; Ogre::Plane::Plane
; Function compile flags: /Odtp
;	COMDAT ??0Plane@Ogre@@QAE@ABVVector3@1@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_normal$ = 8						; size = 4
_point$ = 12						; size = 4
??0Plane@Ogre@@QAE@ABVVector3@1@0@Z PROC		; Ogre::Plane::Plane, COMDAT
; _this$ = ecx

; 76   : 		Plane( const Vector3 &normal, const Vector3 &point )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3

; 77   : 		{
; 78   : 			setFromNormalAndPoint(normal,point);

	mov	eax, DWORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _normal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setFromNormalAndPoint@Plane@Ogre@@QAEXABVVector3@2@0@Z ; Ogre::Plane::setFromNormalAndPoint

; 79   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Plane@Ogre@@QAE@ABVVector3@1@0@Z ENDP		; Ogre::Plane::Plane
_TEXT	ENDS
PUBLIC	??0Plane@Ogre@@QAE@ABVVector3@1@M@Z		; Ogre::Plane::Plane
; Function compile flags: /Odtp
;	COMDAT ??0Plane@Ogre@@QAE@ABVVector3@1@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_normal$ = 8						; size = 4
_offset$ = 12						; size = 4
??0Plane@Ogre@@QAE@ABVVector3@1@M@Z PROC		; Ogre::Plane::Plane, COMDAT
; _this$ = ecx

; 82   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _normal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _offset$[ebp]
	fstp	DWORD PTR [ecx+12]

; 83   : 			assert( isValid() );
; 84   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Plane@Ogre@@QAE@ABVVector3@1@M@Z ENDP		; Ogre::Plane::Plane
_TEXT	ENDS
PUBLIC	?isValid@Plane@Ogre@@QBE_NXZ			; Ogre::Plane::isValid
; Function compile flags: /Odtp
;	COMDAT ?isValid@Plane@Ogre@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isValid@Plane@Ogre@@QBE_NXZ PROC			; Ogre::Plane::isValid, COMDAT
; _this$ = ecx

; 92   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 			assert( IsFloatValid(m_offset) );
; 94   : 			return true;

	mov	al, 1

; 95   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?isValid@Plane@Ogre@@QBE_NXZ ENDP			; Ogre::Plane::isValid
_TEXT	ENDS
PUBLIC	?setFromPlaneParam@Plane@Ogre@@QAEXQBM@Z	; Ogre::Plane::setFromPlaneParam
; Function compile flags: /Odtp
;	COMDAT ?setFromPlaneParam@Plane@Ogre@@QAEXQBM@Z
_TEXT	SEGMENT
tv142 = -12						; size = 4
_this$ = -8						; size = 4
_len$ = -4						; size = 4
_plane$ = 8						; size = 4
?setFromPlaneParam@Plane@Ogre@@QAEXQBM@Z PROC		; Ogre::Plane::setFromPlaneParam, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 			float len = (float)Sqrt( plane[0]*plane[0] + plane[1]*plane[1] + plane[2]*plane[2] );

	mov	eax, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _plane$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _plane$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _plane$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv142[ebp]
	fld	DWORD PTR tv142[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@Ogre@@YAMM@Z			; Ogre::Sqrt
	add	esp, 4
	fstp	DWORD PTR _len$[ebp]

; 102  : 			m_normal.x = plane[0] / len;

	mov	eax, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 103  : 			m_normal.y = plane[1] / len;

	mov	edx, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [edx+4]
	fdiv	DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 104  : 			m_normal.z = plane[2] / len;

	mov	ecx, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [ecx+8]
	fdiv	DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 105  : 			m_offset   = plane[3] / len;

	mov	eax, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [eax+12]
	fdiv	DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 106  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setFromPlaneParam@Plane@Ogre@@QAEXQBM@Z ENDP		; Ogre::Plane::setFromPlaneParam
_TEXT	ENDS
PUBLIC	?DotProduct@Ogre@@YAMABVVector3@1@0@Z		; Ogre::DotProduct
; Function compile flags: /Odtp
;	COMDAT ?setFromNormalAndPoint@Plane@Ogre@@QAEXABVVector3@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_normal$ = 8						; size = 4
_point$ = 12						; size = 4
?setFromNormalAndPoint@Plane@Ogre@@QAEXABVVector3@2@0@Z PROC ; Ogre::Plane::setFromNormalAndPoint, COMDAT
; _this$ = ecx

; 109  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 			m_normal = normal;

	mov	eax, DWORD PTR _normal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 111  : 			m_offset = - DotProduct( m_normal, point );

	mov	ecx, DWORD PTR _point$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fchs
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+12]

; 112  : 
; 113  : 			assert(isValid());
; 114  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setFromNormalAndPoint@Plane@Ogre@@QAEXABVVector3@2@0@Z ENDP ; Ogre::Plane::setFromNormalAndPoint
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ?DotProduct@Ogre@@YAMABVVector3@1@0@Z
_TEXT	SEGMENT
tv86 = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?DotProduct@Ogre@@YAMABVVector3@1@0@Z PROC		; Ogre::DotProduct, COMDAT

; 263  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 264  : 		return v1.x*v2.x + v1.y*v2.y + v1.z*v2.z;

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]

; 265  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?DotProduct@Ogre@@YAMABVVector3@1@0@Z ENDP		; Ogre::DotProduct
_TEXT	ENDS
PUBLIC	?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ; Ogre::Plane::distanceToPoint
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreplane.h
;	COMDAT ?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
_point$ = 8						; size = 4
?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z PROC	; Ogre::Plane::distanceToPoint, COMDAT
; _this$ = ecx

; 122  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 			assert(isValid());
; 124  : 			return DotProduct(m_normal, point) + m_offset;

	mov	eax, DWORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [edx+12]
	fstp	DWORD PTR tv78[ebp]
	fld	DWORD PTR tv78[ebp]

; 125  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ENDP	; Ogre::Plane::distanceToPoint
_TEXT	ENDS
PUBLIC	?pointSideGE@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@@Z ; Ogre::Plane::pointSideGE
; Function compile flags: /Odtp
;	COMDAT ?pointSideGE@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
_this$ = -8						; size = 4
_d$ = -4						; size = 4
_point$ = 8						; size = 4
?pointSideGE@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@@Z PROC ; Ogre::Plane::pointSideGE, COMDAT
; _this$ = ecx

; 128  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 			assert(isValid());
; 130  : 			const float d = distanceToPoint(point);

	mov	eax, DWORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ; Ogre::Plane::distanceToPoint
	fstp	DWORD PTR _d$[ebp]

; 131  : 			return ( d >= 0.f ) ? FRONT : BACK;

	fld	DWORD PTR _d$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@pointSideG
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN4@pointSideG
$LN3@pointSideG:
	mov	DWORD PTR tv69[ebp], 1
$LN4@pointSideG:
	mov	eax, DWORD PTR tv69[ebp]

; 132  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?pointSideGE@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@@Z ENDP ; Ogre::Plane::pointSideGE
_TEXT	ENDS
PUBLIC	?pointSideOrOn@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@M@Z ; Ogre::Plane::pointSideOrOn
; Function compile flags: /Odtp
;	COMDAT ?pointSideOrOn@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_d$ = -4						; size = 4
_point$ = 8						; size = 4
_rOnTolerance$ = 12					; size = 4
?pointSideOrOn@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@M@Z PROC ; Ogre::Plane::pointSideOrOn, COMDAT
; _this$ = ecx

; 135  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 136  : 			assert(isValid());
; 137  : 			const float d = distanceToPoint(point);

	mov	eax, DWORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ; Ogre::Plane::distanceToPoint
	fstp	DWORD PTR _d$[ebp]

; 138  : 			if ( d > rOnTolerance )

	fld	DWORD PTR _d$[ebp]
	fld	DWORD PTR _rOnTolerance$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@pointSideO

; 139  : 				return FRONT;

	xor	eax, eax
	jmp	SHORT $LN3@pointSideO
$LN2@pointSideO:

; 140  : 			if ( d <-rOnTolerance )

	fld	DWORD PTR _rOnTolerance$[ebp]
	fchs
	fld	DWORD PTR _d$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@pointSideO

; 141  : 				return BACK;

	mov	eax, 1
	jmp	SHORT $LN3@pointSideO
$LN1@pointSideO:

; 142  : 			return INTERSECT;

	mov	eax, 2
$LN3@pointSideO:

; 143  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?pointSideOrOn@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@M@Z ENDP ; Ogre::Plane::pointSideOrOn
_TEXT	ENDS
PUBLIC	?translate@Plane@Ogre@@QAEXABVVector3@2@@Z	; Ogre::Plane::translate
; Function compile flags: /Odtp
;	COMDAT ?translate@Plane@Ogre@@QAEXABVVector3@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?translate@Plane@Ogre@@QAEXABVVector3@2@@Z PROC		; Ogre::Plane::translate, COMDAT
; _this$ = ecx

; 160  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 			assert(isValid());
; 162  : 			// slide the offset
; 163  : 			m_offset -= DotProduct( v, m_normal );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	fsubr	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+12]

; 164  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?translate@Plane@Ogre@@QAEXABVVector3@2@@Z ENDP		; Ogre::Plane::translate
_TEXT	ENDS
PUBLIC	?moveForwards@Plane@Ogre@@QAEXM@Z		; Ogre::Plane::moveForwards
; Function compile flags: /Odtp
;	COMDAT ?moveForwards@Plane@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rDelta$ = 8						; size = 4
?moveForwards@Plane@Ogre@@QAEXM@Z PROC			; Ogre::Plane::moveForwards, COMDAT
; _this$ = ecx

; 170  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 			assert(isValid());
; 172  : 			m_offset -= rDelta;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR _rDelta$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 173  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?moveForwards@Plane@Ogre@@QAEXM@Z ENDP			; Ogre::Plane::moveForwards
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	__real@bf800000
PUBLIC	?flipNormal@Plane@Ogre@@QAEXXZ			; Ogre::Plane::flipNormal
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?flipNormal@Plane@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?flipNormal@Plane@Ogre@@QAEXXZ PROC			; Ogre::Plane::flipNormal, COMDAT
; _this$ = ecx

; 176  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 			assert(isValid());
; 178  : 			m_normal *= -1.0f;

	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@Ogre@@QAEXM@Z		; Ogre::Vector3::operator*=

; 179  : 			m_offset *= -1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	QWORD PTR __real@bff0000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 180  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?flipNormal@Plane@Ogre@@QAEXXZ ENDP			; Ogre::Plane::flipNormal
_TEXT	ENDS
PUBLIC	?solveForX@Plane@Ogre@@QBEMMM@Z			; Ogre::Plane::solveForX
; Function compile flags: /Odtp
;	COMDAT ?solveForX@Plane@Ogre@@QBEMMM@Z
_TEXT	SEGMENT
tv92 = -8						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
_z$ = 12						; size = 4
?solveForX@Plane@Ogre@@QBEMMM@Z PROC			; Ogre::Plane::solveForX, COMDAT
; _this$ = ecx

; 183  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 184  : 			if( m_normal.x ) return -(m_normal.y*y + m_normal.z*z + m_offset)/m_normal.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@solveForX
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fmul	DWORD PTR _z$[ebp]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+12]
	fchs
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	jmp	SHORT $LN1@solveForX

; 185  : 			else

	jmp	SHORT $LN1@solveForX
$LN2@solveForX:

; 186  : 			{
; 187  : 				assert(0);
; 188  : 				return 0;

	fldz
$LN1@solveForX:

; 189  : 			}
; 190  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?solveForX@Plane@Ogre@@QBEMMM@Z ENDP			; Ogre::Plane::solveForX
_TEXT	ENDS
PUBLIC	?solveForY@Plane@Ogre@@QBEMMM@Z			; Ogre::Plane::solveForY
; Function compile flags: /Odtp
;	COMDAT ?solveForY@Plane@Ogre@@QBEMMM@Z
_TEXT	SEGMENT
tv93 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
?solveForY@Plane@Ogre@@QBEMMM@Z PROC			; Ogre::Plane::solveForY, COMDAT
; _this$ = ecx

; 192  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 193  : 			if( m_normal.y ) return -(m_normal.x*x + m_normal.z*z + m_offset)/m_normal.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@solveForY
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fmul	DWORD PTR _z$[ebp]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+12]
	fchs
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx+4]
	fstp	DWORD PTR tv93[ebp]
	fld	DWORD PTR tv93[ebp]
	jmp	SHORT $LN1@solveForY

; 194  : 			else

	jmp	SHORT $LN1@solveForY
$LN2@solveForY:

; 195  : 			{
; 196  : 				assert(0);
; 197  : 				return 0;

	fldz
$LN1@solveForY:

; 198  : 			}
; 199  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?solveForY@Plane@Ogre@@QBEMMM@Z ENDP			; Ogre::Plane::solveForY
_TEXT	ENDS
PUBLIC	?solveForZ@Plane@Ogre@@QBEMMM@Z			; Ogre::Plane::solveForZ
; Function compile flags: /Odtp
;	COMDAT ?solveForZ@Plane@Ogre@@QBEMMM@Z
_TEXT	SEGMENT
tv93 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?solveForZ@Plane@Ogre@@QBEMMM@Z PROC			; Ogre::Plane::solveForZ, COMDAT
; _this$ = ecx

; 201  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 			if( m_normal.z ) return -(m_normal.x*x + m_normal.y*y + m_offset)/m_normal.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@solveForZ
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _y$[ebp]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+12]
	fchs
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv93[ebp]
	fld	DWORD PTR tv93[ebp]
	jmp	SHORT $LN1@solveForZ

; 203  : 			else

	jmp	SHORT $LN1@solveForZ
$LN2@solveForZ:

; 204  : 			{
; 205  : 				assert(0);
; 206  : 				return 0;

	fldz
$LN1@solveForZ:

; 207  : 			}
; 208  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?solveForZ@Plane@Ogre@@QBEMMM@Z ENDP			; Ogre::Plane::solveForZ
_TEXT	ENDS
PUBLIC	?segmentIntersec@Plane@Ogre@@QBE_NAAVVector3@2@ABV32@1@Z ; Ogre::Plane::segmentIntersec
; Function compile flags: /Odtp
;	COMDAT ?segmentIntersec@Plane@Ogre@@QBE_NAAVVector3@2@ABV32@1@Z
_TEXT	SEGMENT
tv140 = -64						; size = 4
_this$ = -60						; size = 4
$T73989 = -56						; size = 12
$T73988 = -44						; size = 12
$T73987 = -32						; size = 12
$T73986 = -20						; size = 12
_fDis0$ = -8						; size = 4
_fDis1$ = -4						; size = 4
_vOut$ = 8						; size = 4
_vP0$ = 12						; size = 4
_vP1$ = 16						; size = 4
?segmentIntersec@Plane@Ogre@@QBE_NAAVVector3@2@ABV32@1@Z PROC ; Ogre::Plane::segmentIntersec, COMDAT
; _this$ = ecx

; 212  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 213  : 			float fDis0 = distanceToPoint(vP0);

	mov	eax, DWORD PTR _vP0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ; Ogre::Plane::distanceToPoint
	fstp	DWORD PTR _fDis0$[ebp]

; 214  : 			float fDis1 = distanceToPoint(vP1);

	mov	ecx, DWORD PTR _vP1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ; Ogre::Plane::distanceToPoint
	fstp	DWORD PTR _fDis1$[ebp]

; 215  : 			if( fDis0 * fDis1 >= 0 )

	fld	DWORD PTR _fDis0$[ebp]
	fmul	DWORD PTR _fDis1$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN1@segmentInt

; 216  : 				return false;

	xor	al, al
	jmp	SHORT $LN2@segmentInt
$LN1@segmentInt:

; 217  : 
; 218  : 			vOut = vP0 + (vP1 - vP0) * fDis0 / (fDis0 - fDis1);

	fld	DWORD PTR _fDis0$[ebp]
	fsub	DWORD PTR _fDis1$[ebp]
	fstp	DWORD PTR tv140[ebp]
	fld	DWORD PTR tv140[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fDis0$[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _vP0$[ebp]
	push	edx
	mov	eax, DWORD PTR _vP1$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T73986[ebp]
	push	ecx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T73987[ebp]
	push	edx
	call	??DOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T73988[ebp]
	push	eax
	call	??KOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator/
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _vP0$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T73989[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _vOut$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 219  : 			return true;

	mov	al, 1
$LN2@segmentInt:

; 220  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?segmentIntersec@Plane@Ogre@@QBE_NAAVVector3@2@ABV32@1@Z ENDP ; Ogre::Plane::segmentIntersec
_TEXT	ENDS
PUBLIC	_fabsf
PUBLIC	?segmentSide@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@0M@Z ; Ogre::Plane::segmentSide
; Function compile flags: /Odtp
;	COMDAT ?segmentSide@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@0M@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_dFm$ = -8						; size = 4
_dTo$ = -4						; size = 4
_fm$ = 8						; size = 4
_to$ = 12						; size = 4
_radius$ = 16						; size = 4
?segmentSide@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@0M@Z PROC ; Ogre::Plane::segmentSide, COMDAT
; _this$ = ecx

; 223  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 224  : 			assert(isValid());
; 225  : 
; 226  : 			const float dFm = distanceToPoint(fm);

	mov	eax, DWORD PTR _fm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ; Ogre::Plane::distanceToPoint
	fstp	DWORD PTR _dFm$[ebp]

; 227  : 			const float dTo = distanceToPoint(to);

	mov	ecx, DWORD PTR _to$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ; Ogre::Plane::distanceToPoint
	fstp	DWORD PTR _dTo$[ebp]

; 228  : 
; 229  : 			if ( fabsf(dFm) <= EPSILON && fabsf(dTo) <= EPSILON )

	push	ecx
	fld	DWORD PTR _dFm$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fld	DWORD PTR _EPSILON
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN6@segmentSid
	push	ecx
	fld	DWORD PTR _dTo$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fld	DWORD PTR _EPSILON
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN6@segmentSid

; 230  : 			{
; 231  : 				return ON;

	mov	eax, 3
	jmp	SHORT $LN1@segmentSid
	jmp	SHORT $LN1@segmentSid
$LN6@segmentSid:

; 232  : 			}
; 233  : 			else if ( dFm < -radius && dTo < -radius )

	fld	DWORD PTR _radius$[ebp]
	fchs
	fld	DWORD PTR _dFm$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@segmentSid
	fld	DWORD PTR _radius$[ebp]
	fchs
	fld	DWORD PTR _dTo$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@segmentSid

; 234  : 			{
; 235  : 				return BACK;

	mov	eax, 1
	jmp	SHORT $LN1@segmentSid
	jmp	SHORT $LN1@segmentSid
$LN4@segmentSid:

; 236  : 			}
; 237  : 			else if ( dFm >  radius && dTo >  radius )

	fld	DWORD PTR _dFm$[ebp]
	fld	DWORD PTR _radius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@segmentSid
	fld	DWORD PTR _dTo$[ebp]
	fld	DWORD PTR _radius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@segmentSid

; 238  : 			{
; 239  : 				return FRONT;

	xor	eax, eax
	jmp	SHORT $LN1@segmentSid

; 240  : 			}
; 241  : 			else

	jmp	SHORT $LN1@segmentSid
$LN2@segmentSid:

; 242  : 			{
; 243  : 				return INTERSECT;

	mov	eax, 2
$LN1@segmentSid:

; 244  : 			}
; 245  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?segmentSide@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@0M@Z ENDP ; Ogre::Plane::segmentSide
_TEXT	ENDS
EXTRN	_fabs:PROC
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 384  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
PUBLIC	?getVec4@Plane@Ogre@@QBEABVVector4@2@XZ		; Ogre::Plane::getVec4
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreplane.h
;	COMDAT ?getVec4@Plane@Ogre@@QBEABVVector4@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVec4@Plane@Ogre@@QBEABVVector4@2@XZ PROC		; Ogre::Plane::getVec4, COMDAT
; _this$ = ecx

; 251  : 		{ return *((Vector4 *)&m_normal); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getVec4@Plane@Ogre@@QBEABVVector4@2@XZ ENDP		; Ogre::Plane::getVec4
_TEXT	ENDS
PUBLIC	?getNormal@Plane@Ogre@@QBEABVVector3@2@XZ	; Ogre::Plane::getNormal
; Function compile flags: /Odtp
;	COMDAT ?getNormal@Plane@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNormal@Plane@Ogre@@QBEABVVector3@2@XZ PROC		; Ogre::Plane::getNormal, COMDAT
; _this$ = ecx

; 254  : 		{ return m_normal; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getNormal@Plane@Ogre@@QBEABVVector3@2@XZ ENDP		; Ogre::Plane::getNormal
_TEXT	ENDS
PUBLIC	?getOffset@Plane@Ogre@@QBE?BMXZ			; Ogre::Plane::getOffset
; Function compile flags: /Odtp
;	COMDAT ?getOffset@Plane@Ogre@@QBE?BMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getOffset@Plane@Ogre@@QBE?BMXZ PROC			; Ogre::Plane::getOffset, COMDAT
; _this$ = ecx

; 257  : 		{ return(m_offset); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?getOffset@Plane@Ogre@@QBE?BMXZ ENDP			; Ogre::Plane::getOffset
_TEXT	ENDS
PUBLIC	??0Plane@Ogre@@QAE@ABV01@@Z			; Ogre::Plane::Plane
; Function compile flags: /Odtp
;	COMDAT ??0Plane@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Plane@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Plane::Plane, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [edx+12]
	fstp	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Plane@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Plane::Plane
_TEXT	ENDS
PUBLIC	??4Plane@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Plane::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Plane@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Plane@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Plane::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [edx+12]
	fstp	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Plane@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Plane::operator=
_TEXT	ENDS
PUBLIC	??0WorldPlane@Ogre@@QAE@XZ			; Ogre::WorldPlane::WorldPlane
; Function compile flags: /Odtp
;	COMDAT ??0WorldPlane@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0WorldPlane@Ogre@@QAE@XZ PROC				; Ogre::WorldPlane::WorldPlane, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0WorldPos@Ogre@@QAE@XZ		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0WorldPlane@Ogre@@QAE@XZ ENDP				; Ogre::WorldPlane::WorldPlane
_TEXT	ENDS
PUBLIC	??0WorldPlane@Ogre@@QAE@ABV01@@Z		; Ogre::WorldPlane::WorldPlane
; Function compile flags: /Odtp
;	COMDAT ??0WorldPlane@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0WorldPlane@Ogre@@QAE@ABV01@@Z PROC			; Ogre::WorldPlane::WorldPlane, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0WorldPlane@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::WorldPlane::WorldPlane
_TEXT	ENDS
PUBLIC	??4WorldPlane@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::WorldPlane::operator=
; Function compile flags: /Odtp
;	COMDAT ??4WorldPlane@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4WorldPlane@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::WorldPlane::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4WorldPlane@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::WorldPlane::operator=
_TEXT	ENDS
PUBLIC	?getBounding@CullFrustum@Ogre@@QAEABVBoxSphereBound@2@XZ ; Ogre::CullFrustum::getBounding
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrecullfrustum.h
;	COMDAT ?getBounding@CullFrustum@Ogre@@QAEABVBoxSphereBound@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBounding@CullFrustum@Ogre@@QAEABVBoxSphereBound@2@XZ PROC ; Ogre::CullFrustum::getBounding, COMDAT
; _this$ = ecx

; 34   : 		const BoxSphereBound &getBounding(){ return m_Bounding; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 516				; 00000204H
	mov	esp, ebp
	pop	ebp
	ret	0
?getBounding@CullFrustum@Ogre@@QAEABVBoxSphereBound@2@XZ ENDP ; Ogre::CullFrustum::getBounding
_TEXT	ENDS
PUBLIC	??__G@YGXPAX0IHP6EPAX00@Z@Z			; `vector copy constructor iterator'
PUBLIC	??0CullFrustum@Ogre@@QAE@ABV01@@Z		; Ogre::CullFrustum::CullFrustum
; Function compile flags: /Odtp
;	COMDAT ??0CullFrustum@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CullFrustum@Ogre@@QAE@ABV01@@Z PROC			; Ogre::CullFrustum::CullFrustum, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Plane@Ogre@@QAE@ABV01@@Z
	push	32					; 00000020H
	push	16					; 00000010H
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??__G@YGXPAX0IHP6EPAX00@Z@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+512]
	mov	DWORD PTR [edx+512], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 516				; 00000204H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 516				; 00000204H
	call	??0BoxSphereBound@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CullFrustum@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::CullFrustum::CullFrustum
_TEXT	ENDS
PUBLIC	??4CullFrustum@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::CullFrustum::operator=
; Function compile flags: /Odtp
;	COMDAT ??4CullFrustum@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_$S2$60987 = -4						; size = 4
___that$ = 8						; size = 4
??4CullFrustum@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::CullFrustum::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR _$S2$60987[ebp], 0
	jmp	SHORT $LN3@operator@9
$LN2@operator@9:
	mov	eax, DWORD PTR _$S2$60987[ebp]
	add	eax, 1
	mov	DWORD PTR _$S2$60987[ebp], eax
$LN3@operator@9:
	cmp	DWORD PTR _$S2$60987[ebp], 32		; 00000020H
	jae	SHORT $LN1@operator@9
	mov	ecx, DWORD PTR _$S2$60987[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR ___that$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _$S2$60987[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Plane@Ogre@@QAEAAV01@ABV01@@Z
	jmp	SHORT $LN2@operator@9
$LN1@operator@9:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+512]
	mov	DWORD PTR [edx+512], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 516				; 00000204H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 516				; 00000204H
	call	??4BoxSphereBound@Ogre@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4CullFrustum@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::CullFrustum::operator=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??__G@YGXPAX0IHP6EPAX00@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___u$ = 12						; size = 4
___s$ = 16						; size = 4
___n$ = 20						; size = 4
___f$ = 24						; size = 4
??__G@YGXPAX0IHP6EPAX00@Z@Z PROC			; `vector copy constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector@18:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector@18
	mov	ecx, DWORD PTR ___u$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	edx, DWORD PTR ___t$[ebp]
	add	edx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], edx
	mov	eax, DWORD PTR ___u$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___u$[ebp], eax
	jmp	SHORT $LN2@vector@18
$LN3@vector@18:
	pop	ebp
	ret	20					; 00000014H
??__G@YGXPAX0IHP6EPAX00@Z@Z ENDP			; `vector copy constructor iterator'
_TEXT	ENDS
PUBLIC	??1?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::~vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
PUBLIC	??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
PUBLIC	??0CullResult@Ogre@@QAE@ABV01@@Z		; Ogre::CullResult::CullResult
EXTRN	??1CullFrustum@Ogre@@QAE@XZ:PROC		; Ogre::CullFrustum::~CullFrustum
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CullResult@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CullResult@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CullResult@Ogre@@QAE@ABV01@@Z$1
__ehfuncinfo$??0CullResult@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CullResult@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0CullResult@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CullResult@Ogre@@QAE@ABV01@@Z PROC			; Ogre::CullResult::CullResult, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CullResult@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CullFrustum@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 548				; 00000224H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 548				; 00000224H
	call	??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CullResult@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CullFrustum@Ogre@@QAE@XZ		; Ogre::CullFrustum::~CullFrustum
__unwindfunclet$??0CullResult@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 548				; 00000224H
	jmp	??1?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::~vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
__ehhandler$??0CullResult@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CullResult@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CullResult@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::CullResult::CullResult
PUBLIC	??4?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::operator=
PUBLIC	??4CullResult@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::CullResult::operator=
; Function compile flags: /Odtp
;	COMDAT ??4CullResult@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CullResult@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::CullResult::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4CullFrustum@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 548				; 00000224H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 548				; 00000224H
	call	??4?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4CullResult@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::CullResult::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@GameScene@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::GameScene::getRTTI
EXTRN	?m_RTTI@GameScene@Ogre@@2VRuntimeClass@2@B:BYTE	; Ogre::GameScene::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogregamescene.h
;	COMDAT ?getRTTI@GameScene@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@GameScene@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::GameScene::getRTTI, COMDAT
; _this$ = ecx

; 68   : 		DECLARE_RTTI_VIRTUAL(GameScene)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@GameScene@Ogre@@2VRuntimeClass@2@B ; Ogre::GameScene::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@GameScene@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::GameScene::getRTTI
_TEXT	ENDS
PUBLIC	?onCull@GameScene@Ogre@@UAEXPAVCamera@2@@Z	; Ogre::GameScene::onCull
; Function compile flags: /Odtp
;	COMDAT ?onCull@GameScene@Ogre@@UAEXPAVCamera@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pcamera$ = 8						; size = 4
?onCull@GameScene@Ogre@@UAEXPAVCamera@2@@Z PROC		; Ogre::GameScene::onCull, COMDAT
; _this$ = ecx

; 85   : 		virtual void onCull(Camera *pcamera){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?onCull@GameScene@Ogre@@UAEXPAVCamera@2@@Z ENDP		; Ogre::GameScene::onCull
_TEXT	ENDS
PUBLIC	?getReflecteffect@GameScene@Ogre@@UAEPAVReflectEffect@2@XZ ; Ogre::GameScene::getReflecteffect
; Function compile flags: /Odtp
;	COMDAT ?getReflecteffect@GameScene@Ogre@@UAEPAVReflectEffect@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getReflecteffect@GameScene@Ogre@@UAEPAVReflectEffect@2@XZ PROC ; Ogre::GameScene::getReflecteffect, COMDAT
; _this$ = ecx

; 95   : 		virtual ReflectEffect* getReflecteffect(){return NULL;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?getReflecteffect@GameScene@Ogre@@UAEPAVReflectEffect@2@XZ ENDP ; Ogre::GameScene::getReflecteffect
_TEXT	ENDS
PUBLIC	?pickGround@GameScene@Ogre@@QAE_NMMPAM@Z	; Ogre::GameScene::pickGround
; Function compile flags: /Odtp
;	COMDAT ?pickGround@GameScene@Ogre@@QAE_NMMPAM@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_b$ = -5						; size = 1
_wy$ = -4						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
_y$ = 16						; size = 4
?pickGround@GameScene@Ogre@@QAE_NMMPAM@Z PROC		; Ogre::GameScene::pickGround, COMDAT
; _this$ = ecx

; 98   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 99   : 			WPOS_T wy;
; 100  : 			bool b = pickGround(WorldPos::Flt2Fix(x), WorldPos::Flt2Fix(z), &wy);

	push	0
	push	0
	lea	eax, DWORD PTR _wy$[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [esp]
	call	?Flt2Fix@WorldPos@Ogre@@SAHM@Z		; Ogre::WorldPos::Flt2Fix
	add	esp, 4
	push	eax
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	?Flt2Fix@WorldPos@Ogre@@SAHM@Z		; Ogre::WorldPos::Flt2Fix
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	mov	BYTE PTR _b$[ebp], al

; 101  : 			if(y) *y = WorldPos::Fix2Flt(wy);

	cmp	DWORD PTR _y$[ebp], 0
	je	SHORT $LN1@pickGround
	mov	ecx, DWORD PTR _wy$[ebp]
	push	ecx
	call	?Fix2Flt@WorldPos@Ogre@@SAMH@Z		; Ogre::WorldPos::Fix2Flt
	add	esp, 4
	mov	edx, DWORD PTR _y$[ebp]
	fstp	DWORD PTR [edx]
$LN1@pickGround:

; 102  : 
; 103  : 			return b;

	mov	al, BYTE PTR _b$[ebp]

; 104  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?pickGround@GameScene@Ogre@@QAE_NMMPAM@Z ENDP		; Ogre::GameScene::pickGround
_TEXT	ENDS
PUBLIC	?setViewpoint@GameScene@Ogre@@QAEXABVWorldPos@2@@Z ; Ogre::GameScene::setViewpoint
; Function compile flags: /Odtp
;	COMDAT ?setViewpoint@GameScene@Ogre@@QAEXABVWorldPos@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vp$ = 8						; size = 4
?setViewpoint@GameScene@Ogre@@QAEXABVWorldPos@2@@Z PROC	; Ogre::GameScene::setViewpoint, COMDAT
; _this$ = ecx

; 107  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 108  : 			m_Viewpoint = vp;

	mov	eax, DWORD PTR _vp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 109  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setViewpoint@GameScene@Ogre@@QAEXABVWorldPos@2@@Z ENDP	; Ogre::GameScene::setViewpoint
_TEXT	ENDS
PUBLIC	?getViewpoint@GameScene@Ogre@@QAEABVWorldPos@2@XZ ; Ogre::GameScene::getViewpoint
; Function compile flags: /Odtp
;	COMDAT ?getViewpoint@GameScene@Ogre@@QAEABVWorldPos@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getViewpoint@GameScene@Ogre@@QAEABVWorldPos@2@XZ PROC	; Ogre::GameScene::getViewpoint, COMDAT
; _this$ = ecx

; 112  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 			return m_Viewpoint;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H

; 114  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getViewpoint@GameScene@Ogre@@QAEABVWorldPos@2@XZ ENDP	; Ogre::GameScene::getViewpoint
_TEXT	ENDS
PUBLIC	?getPhysicsScene@GameScene@Ogre@@QAEPAVPhysicsScene@2@XZ ; Ogre::GameScene::getPhysicsScene
; Function compile flags: /Odtp
;	COMDAT ?getPhysicsScene@GameScene@Ogre@@QAEPAVPhysicsScene@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPhysicsScene@GameScene@Ogre@@QAEPAVPhysicsScene@2@XZ PROC ; Ogre::GameScene::getPhysicsScene, COMDAT
; _this$ = ecx

; 117  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 			return m_pPhysicsScene;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]

; 119  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getPhysicsScene@GameScene@Ogre@@QAEPAVPhysicsScene@2@XZ ENDP ; Ogre::GameScene::getPhysicsScene
_TEXT	ENDS
PUBLIC	?getPhysicsScene2@GameScene@Ogre@@QAEPAVPhysicsScene2@2@XZ ; Ogre::GameScene::getPhysicsScene2
; Function compile flags: /Odtp
;	COMDAT ?getPhysicsScene2@GameScene@Ogre@@QAEPAVPhysicsScene2@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPhysicsScene2@GameScene@Ogre@@QAEPAVPhysicsScene2@2@XZ PROC ; Ogre::GameScene::getPhysicsScene2, COMDAT
; _this$ = ecx

; 122  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 			return m_pPhysicsScene2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]

; 124  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getPhysicsScene2@GameScene@Ogre@@QAEPAVPhysicsScene2@2@XZ ENDP ; Ogre::GameScene::getPhysicsScene2
_TEXT	ENDS
PUBLIC	??1?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::~vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
PUBLIC	??1?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::~vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
PUBLIC	??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
PUBLIC	??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
PUBLIC	??_7GameScene@Ogre@@6B@				; Ogre::GameScene::`vftable'
PUBLIC	??0GameScene@Ogre@@QAE@ABV01@@Z			; Ogre::GameScene::GameScene
PUBLIC	??_R4GameScene@Ogre@@6B@			; Ogre::GameScene::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVGameScene@Ogre@@@8			; Ogre::GameScene `RTTI Type Descriptor'
PUBLIC	??_R3GameScene@Ogre@@8				; Ogre::GameScene::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GameScene@Ogre@@8				; Ogre::GameScene::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@GameScene@Ogre@@8			; Ogre::GameScene::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EGameScene@Ogre@@MAEPAXI@Z			; Ogre::GameScene::`vector deleting destructor'
EXTRN	?getEffectObjects@GameScene@Ogre@@UAEXAAV?$vector@URenderableEffectInfo@Ogre@@V?$allocator@URenderableEffectInfo@Ogre@@@std@@@std@@PAVRenderableObject@2@@Z:PROC ; Ogre::GameScene::getEffectObjects
EXTRN	?caculateShadowCamera@GameScene@Ogre@@UAEXPAVCamera@2@0@Z:PROC ; Ogre::GameScene::caculateShadowCamera
;	COMDAT ??_R1A@?0A@EA@GameScene@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GameScene@Ogre@@8 DD FLAT:??_R0?AVGameScene@Ogre@@@8 ; Ogre::GameScene::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GameScene@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2GameScene@Ogre@@8
rdata$r	SEGMENT
??_R2GameScene@Ogre@@8 DD FLAT:??_R1A@?0A@EA@GameScene@Ogre@@8 ; Ogre::GameScene::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3GameScene@Ogre@@8
rdata$r	SEGMENT
??_R3GameScene@Ogre@@8 DD 00H				; Ogre::GameScene::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2GameScene@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGameScene@Ogre@@@8
_DATA	SEGMENT
??_R0?AVGameScene@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::GameScene `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGameScene@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4GameScene@Ogre@@6B@
rdata$r	SEGMENT
??_R4GameScene@Ogre@@6B@ DD 00H				; Ogre::GameScene::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGameScene@Ogre@@@8
	DD	FLAT:??_R3GameScene@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7GameScene@Ogre@@6B@
CONST	SEGMENT
??_7GameScene@Ogre@@6B@ DD FLAT:??_R4GameScene@Ogre@@6B@ ; Ogre::GameScene::`vftable'
	DD	FLAT:?getRTTI@GameScene@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EGameScene@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?getEffectObjects@GameScene@Ogre@@UAEXAAV?$vector@URenderableEffectInfo@Ogre@@V?$allocator@URenderableEffectInfo@Ogre@@@std@@@std@@PAVRenderableObject@2@@Z
	DD	FLAT:?onCull@GameScene@Ogre@@UAEXPAVCamera@2@@Z
	DD	FLAT:?caculateShadowCamera@GameScene@Ogre@@UAEXPAVCamera@2@0@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?getReflecteffect@GameScene@Ogre@@UAEPAVReflectEffect@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0GameScene@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0GameScene@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0GameScene@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0GameScene@Ogre@@QAE@ABV01@@Z$2
__ehfuncinfo$??0GameScene@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0GameScene@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0GameScene@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0GameScene@Ogre@@QAE@ABV01@@Z PROC			; Ogre::GameScene::GameScene, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0GameScene@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7GameScene@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+56]
	mov	BYTE PTR [ecx+56], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR [ecx+60], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR [ecx+64], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 68					; 00000044H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0GameScene@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0GameScene@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::~vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
__unwindfunclet$??0GameScene@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::~vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
__ehhandler$??0GameScene@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0GameScene@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0GameScene@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::GameScene::GameScene
PUBLIC	??4?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::operator=
PUBLIC	??4?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::operator=
PUBLIC	??4GameScene@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::GameScene::operator=
; Function compile flags: /Odtp
;	COMDAT ??4GameScene@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4GameScene@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::GameScene::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+56]
	mov	BYTE PTR [eax+56], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+64], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4GameScene@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::GameScene::operator=
_TEXT	ENDS
PUBLIC	??_GGameScene@Ogre@@MAEPAXI@Z			; Ogre::GameScene::`scalar deleting destructor'
EXTRN	??1GameScene@Ogre@@MAE@XZ:PROC			; Ogre::GameScene::~GameScene
; Function compile flags: /Odtp
;	COMDAT ??_GGameScene@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGameScene@Ogre@@MAEPAXI@Z PROC			; Ogre::GameScene::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameScene@Ogre@@MAE@XZ		; Ogre::GameScene::~GameScene
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@18
	push	80					; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@18:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGameScene@Ogre@@MAEPAXI@Z ENDP			; Ogre::GameScene::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EGameScene@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EGameScene@Ogre@@MAEPAXI@Z PROC			; Ogre::GameScene::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@19
	push	OFFSET ??1GameScene@Ogre@@MAE@XZ	; Ogre::GameScene::~GameScene
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	80					; 00000050H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@19
	push	80					; 00000050H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@19:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@19
$LN3@vector@19:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GameScene@Ogre@@MAE@XZ		; Ogre::GameScene::~GameScene
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@19
	push	80					; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@19:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@19:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EGameScene@Ogre@@MAEPAXI@Z ENDP			; Ogre::GameScene::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@SimpleGameScene@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::SimpleGameScene::getRTTI
EXTRN	?m_RTTI@SimpleGameScene@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::SimpleGameScene::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@SimpleGameScene@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@SimpleGameScene@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::SimpleGameScene::getRTTI, COMDAT
; _this$ = ecx

; 142  : 		DECLARE_RTTI(SimpleGameScene)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@SimpleGameScene@Ogre@@2VRuntimeClass@2@B ; Ogre::SimpleGameScene::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@SimpleGameScene@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::SimpleGameScene::getRTTI
_TEXT	ENDS
PUBLIC	?newObject@SimpleGameScene@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::SimpleGameScene::newObject
EXTRN	??0SimpleGameScene@Ogre@@QAE@XZ:PROC		; Ogre::SimpleGameScene::SimpleGameScene
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@SimpleGameScene@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@SimpleGameScene@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@SimpleGameScene@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@SimpleGameScene@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@SimpleGameScene@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T74068 = -20						; size = 4
$T74067 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@SimpleGameScene@Ogre@@SAPAVBaseObject@2@XZ PROC ; Ogre::SimpleGameScene::newObject, COMDAT

; 142  : 		DECLARE_RTTI(SimpleGameScene)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@SimpleGameScene@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	140					; 0000008cH
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T74068[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T74068[ebp], 0
	je	SHORT $LN3@newObject@4
	mov	ecx, DWORD PTR $T74068[ebp]
	call	??0SimpleGameScene@Ogre@@QAE@XZ		; Ogre::SimpleGameScene::SimpleGameScene
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject@4
$LN3@newObject@4:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject@4:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T74067[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T74067[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@SimpleGameScene@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	140					; 0000008cH
	mov	eax, DWORD PTR $T74068[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@SimpleGameScene@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@SimpleGameScene@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@SimpleGameScene@Ogre@@SAPAVBaseObject@2@XZ ENDP ; Ogre::SimpleGameScene::newObject
PUBLIC	?updateFocusArea@SimpleGameScene@Ogre@@UAEXVWorldPos@2@M@Z ; Ogre::SimpleGameScene::updateFocusArea
; Function compile flags: /Odtp
;	COMDAT ?updateFocusArea@SimpleGameScene@Ogre@@UAEXVWorldPos@2@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_center$ = 8						; size = 12
_radius$ = 20						; size = 4
?updateFocusArea@SimpleGameScene@Ogre@@UAEXVWorldPos@2@M@Z PROC ; Ogre::SimpleGameScene::updateFocusArea, COMDAT
; _this$ = ecx

; 162  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?updateFocusArea@SimpleGameScene@Ogre@@UAEXVWorldPos@2@M@Z ENDP ; Ogre::SimpleGameScene::updateFocusArea
_TEXT	ENDS
PUBLIC	?getTerrainTile@SimpleGameScene@Ogre@@UAEPAVTerrainTile@2@XZ ; Ogre::SimpleGameScene::getTerrainTile
; Function compile flags: /Odtp
;	COMDAT ?getTerrainTile@SimpleGameScene@Ogre@@UAEPAVTerrainTile@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTerrainTile@SimpleGameScene@Ogre@@UAEPAVTerrainTile@2@XZ PROC ; Ogre::SimpleGameScene::getTerrainTile, COMDAT
; _this$ = ecx

; 164  : 		virtual TerrainTile * getTerrainTile() { return NULL;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?getTerrainTile@SimpleGameScene@Ogre@@UAEPAVTerrainTile@2@XZ ENDP ; Ogre::SimpleGameScene::getTerrainTile
_TEXT	ENDS
PUBLIC	??1?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::~vector<Ogre::Light *,std::allocator<Ogre::Light *> >
PUBLIC	??1?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::~vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
PUBLIC	??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::vector<Ogre::Light *,std::allocator<Ogre::Light *> >
PUBLIC	??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
PUBLIC	??_7SimpleGameScene@Ogre@@6B@			; Ogre::SimpleGameScene::`vftable'
PUBLIC	??0SimpleGameScene@Ogre@@QAE@ABV01@@Z		; Ogre::SimpleGameScene::SimpleGameScene
PUBLIC	??_R4SimpleGameScene@Ogre@@6B@			; Ogre::SimpleGameScene::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSimpleGameScene@Ogre@@@8		; Ogre::SimpleGameScene `RTTI Type Descriptor'
PUBLIC	??_R3SimpleGameScene@Ogre@@8			; Ogre::SimpleGameScene::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimpleGameScene@Ogre@@8			; Ogre::SimpleGameScene::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SimpleGameScene@Ogre@@8		; Ogre::SimpleGameScene::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_ESimpleGameScene@Ogre@@MAEPAXI@Z		; Ogre::SimpleGameScene::`vector deleting destructor'
EXTRN	?update@SimpleGameScene@Ogre@@UAEXI@Z:PROC	; Ogre::SimpleGameScene::update
EXTRN	?onAttachObject@SimpleGameScene@Ogre@@UAEXPAVMovableObject@2@@Z:PROC ; Ogre::SimpleGameScene::onAttachObject
EXTRN	?onDetachObject@SimpleGameScene@Ogre@@UAEXPAVMovableObject@2@@Z:PROC ; Ogre::SimpleGameScene::onDetachObject
EXTRN	?onObjectPosChange@SimpleGameScene@Ogre@@UAEXPAVMovableObject@2@@Z:PROC ; Ogre::SimpleGameScene::onObjectPosChange
EXTRN	?onRender@SimpleGameScene@Ogre@@UAEXPAVSceneRenderer@2@@Z:PROC ; Ogre::SimpleGameScene::onRender
EXTRN	?onCull@SimpleGameScene@Ogre@@UAEXPAVCamera@2@@Z:PROC ; Ogre::SimpleGameScene::onCull
EXTRN	?pickObject@SimpleGameScene@Ogre@@UAEPAVMovableObject@2@W4IntersectType@2@ABVWorldRay@2@PAMI@Z:PROC ; Ogre::SimpleGameScene::pickObject
EXTRN	?pickGround@SimpleGameScene@Ogre@@UAE_NHHPAHPAVVector3@2@PAM@Z:PROC ; Ogre::SimpleGameScene::pickGround
EXTRN	?pickGround@SimpleGameScene@Ogre@@UAE_NABVWorldRay@2@PAM@Z:PROC ; Ogre::SimpleGameScene::pickGround
;	COMDAT ??_R1A@?0A@EA@SimpleGameScene@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimpleGameScene@Ogre@@8 DD FLAT:??_R0?AVSimpleGameScene@Ogre@@@8 ; Ogre::SimpleGameScene::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimpleGameScene@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2SimpleGameScene@Ogre@@8
rdata$r	SEGMENT
??_R2SimpleGameScene@Ogre@@8 DD FLAT:??_R1A@?0A@EA@SimpleGameScene@Ogre@@8 ; Ogre::SimpleGameScene::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GameScene@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3SimpleGameScene@Ogre@@8
rdata$r	SEGMENT
??_R3SimpleGameScene@Ogre@@8 DD 00H			; Ogre::SimpleGameScene::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2SimpleGameScene@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimpleGameScene@Ogre@@@8
_DATA	SEGMENT
??_R0?AVSimpleGameScene@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::SimpleGameScene `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimpleGameScene@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SimpleGameScene@Ogre@@6B@
rdata$r	SEGMENT
??_R4SimpleGameScene@Ogre@@6B@ DD 00H			; Ogre::SimpleGameScene::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSimpleGameScene@Ogre@@@8
	DD	FLAT:??_R3SimpleGameScene@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7SimpleGameScene@Ogre@@6B@
CONST	SEGMENT
??_7SimpleGameScene@Ogre@@6B@ DD FLAT:??_R4SimpleGameScene@Ogre@@6B@ ; Ogre::SimpleGameScene::`vftable'
	DD	FLAT:?getRTTI@SimpleGameScene@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_ESimpleGameScene@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?update@SimpleGameScene@Ogre@@UAEXI@Z
	DD	FLAT:?onAttachObject@SimpleGameScene@Ogre@@UAEXPAVMovableObject@2@@Z
	DD	FLAT:?onDetachObject@SimpleGameScene@Ogre@@UAEXPAVMovableObject@2@@Z
	DD	FLAT:?onObjectPosChange@SimpleGameScene@Ogre@@UAEXPAVMovableObject@2@@Z
	DD	FLAT:?onRender@SimpleGameScene@Ogre@@UAEXPAVSceneRenderer@2@@Z
	DD	FLAT:?getTerrainTile@SimpleGameScene@Ogre@@UAEPAVTerrainTile@2@XZ
	DD	FLAT:?getEffectObjects@GameScene@Ogre@@UAEXAAV?$vector@URenderableEffectInfo@Ogre@@V?$allocator@URenderableEffectInfo@Ogre@@@std@@@std@@PAVRenderableObject@2@@Z
	DD	FLAT:?onCull@SimpleGameScene@Ogre@@UAEXPAVCamera@2@@Z
	DD	FLAT:?caculateShadowCamera@GameScene@Ogre@@UAEXPAVCamera@2@0@Z
	DD	FLAT:?pickObject@SimpleGameScene@Ogre@@UAEPAVMovableObject@2@W4IntersectType@2@ABVWorldRay@2@PAMI@Z
	DD	FLAT:?pickGround@SimpleGameScene@Ogre@@UAE_NHHPAHPAVVector3@2@PAM@Z
	DD	FLAT:?pickGround@SimpleGameScene@Ogre@@UAE_NABVWorldRay@2@PAM@Z
	DD	FLAT:?updateFocusArea@SimpleGameScene@Ogre@@UAEXVWorldPos@2@M@Z
	DD	FLAT:?getReflecteffect@GameScene@Ogre@@UAEPAVReflectEffect@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SimpleGameScene@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SimpleGameScene@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SimpleGameScene@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0SimpleGameScene@Ogre@@QAE@ABV01@@Z$2
__ehfuncinfo$??0SimpleGameScene@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0SimpleGameScene@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0SimpleGameScene@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0SimpleGameScene@Ogre@@QAE@ABV01@@Z PROC		; Ogre::SimpleGameScene::SimpleGameScene, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0SimpleGameScene@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GameScene@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7SimpleGameScene@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 80					; 00000050H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 104				; 00000068H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::vector<Ogre::Light *,std::allocator<Ogre::Light *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	DWORD PTR [ecx+128], eax
	mov	edx, DWORD PTR [edx+132]
	mov	DWORD PTR [ecx+132], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR [eax+136], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SimpleGameScene@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1GameScene@Ogre@@MAE@XZ		; Ogre::GameScene::~GameScene
__unwindfunclet$??0SimpleGameScene@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	jmp	??1?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::~vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
__unwindfunclet$??0SimpleGameScene@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	jmp	??1?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::~vector<Ogre::Light *,std::allocator<Ogre::Light *> >
__ehhandler$??0SimpleGameScene@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0SimpleGameScene@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0SimpleGameScene@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::SimpleGameScene::SimpleGameScene
PUBLIC	??4?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::operator=
PUBLIC	??4?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::operator=
PUBLIC	??4SimpleGameScene@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::SimpleGameScene::operator=
; Function compile flags: /Odtp
;	COMDAT ??4SimpleGameScene@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_$S3$62819 = -4						; size = 4
___that$ = 8						; size = 4
??4SimpleGameScene@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::SimpleGameScene::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4GameScene@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 80					; 00000050H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??4?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 104				; 00000068H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??4?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::operator=
	mov	DWORD PTR _$S3$62819[ebp], 0
	jmp	SHORT $LN3@operator@10
$LN2@operator@10:
	mov	eax, DWORD PTR _$S3$62819[ebp]
	add	eax, 1
	mov	DWORD PTR _$S3$62819[ebp], eax
$LN3@operator@10:
	cmp	DWORD PTR _$S3$62819[ebp], 2
	jae	SHORT $LN1@operator@10
	mov	ecx, DWORD PTR _$S3$62819[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _$S3$62819[ebp]
	mov	esi, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+128]
	mov	DWORD PTR [edx+ecx*4+128], eax
	jmp	SHORT $LN2@operator@10
$LN1@operator@10:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	DWORD PTR [ecx+136], eax
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4SimpleGameScene@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::SimpleGameScene::operator=
_TEXT	ENDS
PUBLIC	??_GSimpleGameScene@Ogre@@MAEPAXI@Z		; Ogre::SimpleGameScene::`scalar deleting destructor'
EXTRN	??1SimpleGameScene@Ogre@@MAE@XZ:PROC		; Ogre::SimpleGameScene::~SimpleGameScene
; Function compile flags: /Odtp
;	COMDAT ??_GSimpleGameScene@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GSimpleGameScene@Ogre@@MAEPAXI@Z PROC		; Ogre::SimpleGameScene::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SimpleGameScene@Ogre@@MAE@XZ		; Ogre::SimpleGameScene::~SimpleGameScene
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@19
	push	140					; 0000008cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@19:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSimpleGameScene@Ogre@@MAEPAXI@Z ENDP		; Ogre::SimpleGameScene::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_ESimpleGameScene@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ESimpleGameScene@Ogre@@MAEPAXI@Z PROC		; Ogre::SimpleGameScene::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@20
	push	OFFSET ??1SimpleGameScene@Ogre@@MAE@XZ	; Ogre::SimpleGameScene::~SimpleGameScene
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	140					; 0000008cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@20
	push	140					; 0000008cH
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@20:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@20
$LN3@vector@20:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SimpleGameScene@Ogre@@MAE@XZ		; Ogre::SimpleGameScene::~SimpleGameScene
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@20
	push	140					; 0000008cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@20:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@20:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ESimpleGameScene@Ogre@@MAEPAXI@Z ENDP		; Ogre::SimpleGameScene::`vector deleting destructor'
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$??0DummyNode@Ogre@@QAE@PAVDummyNodeData@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DummyNode@Ogre@@QAE@PAVDummyNodeData@1@@Z$0
__ehfuncinfo$??0DummyNode@Ogre@@QAE@PAVDummyNodeData@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DummyNode@Ogre@@QAE@PAVDummyNodeData@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogredummynode.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_psource$ = 8						; size = 4
??0DummyNode@Ogre@@QAE@PAVDummyNodeData@1@@Z PROC	; Ogre::DummyNode::DummyNode
; _this$ = ecx

; 11   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DummyNode@Ogre@@QAE@PAVDummyNodeData@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0RenderLines@Ogre@@QAE@_N@Z		; Ogre::RenderLines::RenderLines
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DummyNode@Ogre@@6B@

; 12   : 		if(psource) psource->addRef();

	cmp	DWORD PTR _psource$[ebp], 0
	je	SHORT $LN1@DummyNode
	mov	ecx, DWORD PTR _psource$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _psource$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN1@DummyNode:

; 13   : 		m_pSource = psource;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _psource$[ebp]
	mov	DWORD PTR [ecx+388], edx

; 14   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0DummyNode@Ogre@@QAE@PAVDummyNodeData@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1RenderLines@Ogre@@UAE@XZ		; Ogre::RenderLines::~RenderLines
__ehhandler$??0DummyNode@Ogre@@QAE@PAVDummyNodeData@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DummyNode@Ogre@@QAE@PAVDummyNodeData@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DummyNode@Ogre@@QAE@PAVDummyNodeData@1@@Z ENDP	; Ogre::DummyNode::DummyNode
xdata$x	SEGMENT
__unwindtable$??1DummyNode@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DummyNode@Ogre@@UAE@XZ$0
__ehfuncinfo$??1DummyNode@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1DummyNode@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DummyNode@Ogre@@UAE@XZ PROC				; Ogre::DummyNode::~DummyNode
; _this$ = ecx

; 17   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1DummyNode@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DummyNode@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 18   : 		OGRE_RELEASE(m_pSource);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+388], 0
	je	SHORT $LN2@DummyNode@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+388]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+388], 0
$LN2@DummyNode@2:

; 19   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RenderLines@Ogre@@UAE@XZ		; Ogre::RenderLines::~RenderLines
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1DummyNode@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1RenderLines@Ogre@@UAE@XZ		; Ogre::RenderLines::~RenderLines
__ehhandler$??1DummyNode@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1DummyNode@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1DummyNode@Ogre@@UAE@XZ ENDP				; Ogre::DummyNode::~DummyNode
PUBLIC	?DrawBox@DummyNode@Ogre@@QAEXVMatrix4@2@MVColorQuad@2@@Z ; Ogre::DummyNode::DrawBox
PUBLIC	__real@41f00000
PUBLIC	??0ColorQuad@Ogre@@QAE@EEEE@Z			; Ogre::ColorQuad::ColorQuad
EXTRN	?reset@RenderLines@Ogre@@QAEXXZ:PROC		; Ogre::RenderLines::reset
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T74113 = -4						; size = 4
_dtick$ = 8						; size = 4
?update@DummyNode@Ogre@@UAEXI@Z PROC			; Ogre::DummyNode::update
; _this$ = ecx

; 22   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 23   : 		if(m_pScene==NULL || !m_pScene->m_RenderDummyNode)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+192], 0
	je	SHORT $LN2@update@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	movzx	eax, BYTE PTR [edx+56]
	test	eax, eax
	jne	SHORT $LN3@update@2
$LN2@update@2:

; 24   : 		{
; 25   : 			return;

	jmp	SHORT $LN4@update@2
$LN3@update@2:

; 26   : 		}
; 27   : 
; 28   : 		reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?reset@RenderLines@Ogre@@QAEXXZ		; Ogre::RenderLines::reset

; 29   : 
; 30   : 		RenderLines::update(dtick);

	mov	ecx, DWORD PTR _dtick$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?update@RenderLines@Ogre@@UAEXI@Z	; Ogre::RenderLines::update

; 31   : 
; 32   : 		if(m_pSource != NULL && m_pSource->m_bDrawBox == true)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+388], 0
	je	SHORT $LN1@update@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+388]
	movzx	edx, BYTE PTR [ecx+20]
	cmp	edx, 1
	jne	SHORT $LN1@update@2

; 33   : 		{
; 34   : 			DrawBox(getWorldMatrix(), 30.0f, ColorQuad(0, 255, 0));

	push	255					; 000000ffH
	push	0
	push	255					; 000000ffH
	push	0
	lea	ecx, DWORD PTR $T74113[ebp]
	call	??0ColorQuad@Ogre@@QAE@EEEE@Z		; Ogre::ColorQuad::ColorQuad
	mov	eax, DWORD PTR [eax]
	push	eax
	push	ecx
	fld	DWORD PTR __real@41f00000
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getWorldMatrix@MovableObject@Ogre@@QAEABVMatrix4@2@XZ ; Ogre::MovableObject::getWorldMatrix
	sub	esp, 64					; 00000040H
	mov	ecx, esp
	push	eax
	call	??0Matrix4@Ogre@@QAE@ABV01@@Z		; Ogre::Matrix4::Matrix4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBox@DummyNode@Ogre@@QAEXVMatrix4@2@MVColorQuad@2@@Z ; Ogre::DummyNode::DrawBox
$LN1@update@2:
$LN4@update@2:

; 35   : 		}
; 36   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?update@DummyNode@Ogre@@UAEXI@Z ENDP			; Ogre::DummyNode::update
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrecolourvalue.h
_TEXT	ENDS
;	COMDAT ??0ColorQuad@Ogre@@QAE@EEEE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_r1$ = 8						; size = 1
_g1$ = 12						; size = 1
_b1$ = 16						; size = 1
_a1$ = 20						; size = 1
??0ColorQuad@Ogre@@QAE@EEEE@Z PROC			; Ogre::ColorQuad::ColorQuad, COMDAT
; _this$ = ecx

; 351  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _b1$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _g1$[ebp]
	mov	BYTE PTR [edx+1], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _r1$[ebp]
	mov	BYTE PTR [ecx+2], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _a1$[ebp]
	mov	BYTE PTR [eax+3], cl

; 352  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0ColorQuad@Ogre@@QAE@EEEE@Z ENDP			; Ogre::ColorQuad::ColorQuad
_TEXT	ENDS
PUBLIC	??0ColorQuad@Ogre@@QAE@I@Z			; Ogre::ColorQuad::ColorQuad
PUBLIC	??DOgre@@YA?AVVector3@0@ABV10@ABVMatrix4@0@@Z	; Ogre::operator*
EXTRN	?addLine@RenderLines@Ogre@@QAEXABVVector3@2@0VColorQuad@2@@Z:PROC ; Ogre::RenderLines::addLine
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogredummynode.cpp
_TEXT	SEGMENT
_this$ = -220						; size = 4
$T74120 = -212						; size = 12
_i$62875 = -200						; size = 4
_i$62870 = -196						; size = 4
_rawPos$ = -192						; size = 96
_indexes$ = -96						; size = 96
_tm$ = 8						; size = 64
_fSize$ = 72						; size = 4
_color$ = 76						; size = 4
?DrawBox@DummyNode@Ogre@@QAEXVMatrix4@2@MVColorQuad@2@@Z PROC ; Ogre::DummyNode::DrawBox
; _this$ = ecx

; 39   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	mov	DWORD PTR _this$[ebp], ecx

; 40   : 		Vector3 rawPos[] ={
; 41   : 			Vector3(-1,-1,-1), Vector3(1,-1,-1), Vector3(1,-1,1), Vector3(-1,-1,1),

	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _rawPos$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _rawPos$[ebp+12]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _rawPos$[ebp+24]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _rawPos$[ebp+36]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3

; 42   : 				Vector3(-1, 1,-1), Vector3(1, 1,-1), Vector3(1, 1,1), Vector3(-1, 1,1)};

	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _rawPos$[ebp+48]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _rawPos$[ebp+60]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _rawPos$[ebp+72]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _rawPos$[ebp+84]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3

; 43   : 
; 44   : 			int indexes[] = {0,1,  1,2,  2,3,  3,0,  4,5,  5,6,  6,7,  7,4,  0,4,  1,5,  2,6,  3,7};

	mov	DWORD PTR _indexes$[ebp], 0
	mov	DWORD PTR _indexes$[ebp+4], 1
	mov	DWORD PTR _indexes$[ebp+8], 1
	mov	DWORD PTR _indexes$[ebp+12], 2
	mov	DWORD PTR _indexes$[ebp+16], 2
	mov	DWORD PTR _indexes$[ebp+20], 3
	mov	DWORD PTR _indexes$[ebp+24], 3
	mov	DWORD PTR _indexes$[ebp+28], 0
	mov	DWORD PTR _indexes$[ebp+32], 4
	mov	DWORD PTR _indexes$[ebp+36], 5
	mov	DWORD PTR _indexes$[ebp+40], 5
	mov	DWORD PTR _indexes$[ebp+44], 6
	mov	DWORD PTR _indexes$[ebp+48], 6
	mov	DWORD PTR _indexes$[ebp+52], 7
	mov	DWORD PTR _indexes$[ebp+56], 7
	mov	DWORD PTR _indexes$[ebp+60], 4
	mov	DWORD PTR _indexes$[ebp+64], 0
	mov	DWORD PTR _indexes$[ebp+68], 4
	mov	DWORD PTR _indexes$[ebp+72], 1
	mov	DWORD PTR _indexes$[ebp+76], 5
	mov	DWORD PTR _indexes$[ebp+80], 2
	mov	DWORD PTR _indexes$[ebp+84], 6
	mov	DWORD PTR _indexes$[ebp+88], 3
	mov	DWORD PTR _indexes$[ebp+92], 7

; 45   : 
; 46   : 			for(int i = 0; i < 8; i++)

	mov	DWORD PTR _i$62870[ebp], 0
	jmp	SHORT $LN6@DrawBox
$LN5@DrawBox:
	mov	eax, DWORD PTR _i$62870[ebp]
	add	eax, 1
	mov	DWORD PTR _i$62870[ebp], eax
$LN6@DrawBox:
	cmp	DWORD PTR _i$62870[ebp], 8
	jge	SHORT $LN4@DrawBox

; 47   : 			{
; 48   : 				rawPos[i] *= fSize;

	push	ecx
	fld	DWORD PTR _fSize$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$62870[ebp]
	imul	ecx, 12					; 0000000cH
	lea	ecx, DWORD PTR _rawPos$[ebp+ecx]
	call	??XVector3@Ogre@@QAEXM@Z		; Ogre::Vector3::operator*=

; 49   : 				rawPos[i] = rawPos[i] * tm;

	lea	edx, DWORD PTR _tm$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$62870[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _rawPos$[ebp+eax]
	push	ecx
	lea	edx, DWORD PTR $T74120[ebp]
	push	edx
	call	??DOgre@@YA?AVVector3@0@ABV10@ABVMatrix4@0@@Z ; Ogre::operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _i$62870[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _rawPos$[ebp+eax]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 50   : 			}

	jmp	SHORT $LN5@DrawBox
$LN4@DrawBox:

; 51   : 
; 52   : 			for(int i = 0; i < 24; i += 2)

	mov	DWORD PTR _i$62875[ebp], 0
	jmp	SHORT $LN3@DrawBox
$LN2@DrawBox:
	mov	ecx, DWORD PTR _i$62875[ebp]
	add	ecx, 2
	mov	DWORD PTR _i$62875[ebp], ecx
$LN3@DrawBox:
	cmp	DWORD PTR _i$62875[ebp], 24		; 00000018H
	jge	SHORT $LN1@DrawBox

; 53   : 			{
; 54   : 				addLine(rawPos[indexes[i]], rawPos[indexes[i + 1]], color.c);

	push	ecx
	mov	ecx, esp
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	call	??0ColorQuad@Ogre@@QAE@I@Z		; Ogre::ColorQuad::ColorQuad
	mov	eax, DWORD PTR _i$62875[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4+4]
	imul	ecx, 12					; 0000000cH
	lea	edx, DWORD PTR _rawPos$[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR _i$62875[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4]
	imul	ecx, 12					; 0000000cH
	lea	edx, DWORD PTR _rawPos$[ebp+ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addLine@RenderLines@Ogre@@QAEXABVVector3@2@0VColorQuad@2@@Z ; Ogre::RenderLines::addLine
	jmp	SHORT $LN2@DrawBox
$LN1@DrawBox:

; 55   : 			}
; 56   : 	}

	mov	esp, ebp
	pop	ebp
	ret	72					; 00000048H
?DrawBox@DummyNode@Ogre@@QAEXVMatrix4@2@MVColorQuad@2@@Z ENDP ; Ogre::DummyNode::DrawBox
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.h
_TEXT	ENDS
;	COMDAT ??DOgre@@YA?AVVector3@0@ABV10@ABVMatrix4@0@@Z
_TEXT	SEGMENT
tv182 = -12						; size = 4
tv174 = -8						; size = 4
tv166 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_vec$ = 12						; size = 4
_mat$ = 16						; size = 4
??DOgre@@YA?AVVector3@0@ABV10@ABVMatrix4@0@@Z PROC	; Ogre::operator*, COMDAT

; 218  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 219  : 		return Vector3( vec.x*mat._11 + vec.y*mat._21 + vec.z*mat._31 + mat._41,
; 220  : 			vec.x*mat._12 + vec.y*mat._22 + vec.z*mat._32 + mat._42,
; 221  : 			vec.x*mat._13 + vec.y*mat._23 + vec.z*mat._33 + mat._43 );

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [eax+24]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [edx+40]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _mat$[ebp]
	fadd	DWORD PTR [eax+56]
	fstp	DWORD PTR tv166[ebp]
	fld	DWORD PTR tv166[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [ecx+20]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [eax+36]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mat$[ebp]
	fadd	DWORD PTR [ecx+52]
	fstp	DWORD PTR tv174[ebp]
	fld	DWORD PTR tv174[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [edx+16]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [ecx+32]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mat$[ebp]
	fadd	DWORD PTR [edx+48]
	fstp	DWORD PTR tv182[ebp]
	fld	DWORD PTR tv182[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 222  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??DOgre@@YA?AVVector3@0@ABV10@ABVMatrix4@0@@Z ENDP	; Ogre::operator*
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrecolourvalue.h
_TEXT	ENDS
;	COMDAT ??0ColorQuad@Ogre@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rgba$ = 8						; size = 4
??0ColorQuad@Ogre@@QAE@I@Z PROC				; Ogre::ColorQuad::ColorQuad, COMDAT
; _this$ = ecx

; 348  : 		ColorQuad(RGBA rgba) :c(rgba){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rgba$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0ColorQuad@Ogre@@QAE@I@Z ENDP				; Ogre::ColorQuad::ColorQuad
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?size@?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::size
_TEXT	ENDS
EXTRN	__imp___invalid_parameter_noinfo:PROC
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEABVVertexElement@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEABVVertexElement@Ogre@@I@Z PROC ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::operator[], COMDAT
; _this$ = ecx

; 759  : 		{	// subscript nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 760  : 
; 761  :  #if _HAS_ITERATOR_DEBUGGING
; 762  : 		if (size() <= _Pos)
; 763  : 			{
; 764  : 			_DEBUG_ERROR("vector subscript out of range");
; 765  : 			_SCL_SECURE_OUT_OF_RANGE;
; 766  : 			}
; 767  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 768  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@11
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@11:

; 769  : 
; 770  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 771  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEABVVertexElement@Ogre@@I@Z ENDP ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::operator[]
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::~_Vector_val<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
PUBLIC	?_Tidy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEPAULineVertex@RenderLines@Ogre@@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Ucopy<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> > >
PUBLIC	?begin@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::begin
PUBLIC	?end@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::end
PUBLIC	?_Buy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Buy
PUBLIC	?size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::size
PUBLIC	??0?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z ; std::_Vector_val<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_val<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
PUBLIC	??0?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::RenderLines::LineVertex>::allocator<Ogre::RenderLines::LineVertex>
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T74133 = -36						; size = 8
$T74132 = -28						; size = 8
$T74131 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74131[ebp], esp
	push	eax
	call	??0?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::RenderLines::LineVertex>::allocator<Ogre::RenderLines::LineVertex>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z ; std::_Vector_val<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_val<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@21

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T74132[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T74133[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEPAULineVertex@RenderLines@Ogre@@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Ucopy<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@21
__catch$??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@21
	ret	0
$LN5@vector@21:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@21:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@21:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::~vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::~vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
PUBLIC	?deallocate@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@I@Z ; std::allocator<Ogre::RenderLines::LineVertex>::deallocate
PUBLIC	??$_Ucopy@PAULineVertex@RenderLines@Ogre@@@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEPAULineVertex@RenderLines@Ogre@@PAU234@00@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Ucopy<Ogre::RenderLines::LineVertex *>
PUBLIC	?capacity@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::capacity
PUBLIC	?_Destroy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEXPAULineVertex@RenderLines@Ogre@@0@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Destroy
PUBLIC	??$unchecked_copy@PAULineVertex@RenderLines@Ogre@@PAU123@@stdext@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
PUBLIC	?clear@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$64385 = -8					; size = 4
__Ptr$64375 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@12

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@12

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::clear
	jmp	$LN9@operator@12
$LN8@operator@12:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@12

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAULineVertex@RenderLines@Ogre@@PAU123@@stdext@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$64375[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64375[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEXPAULineVertex@RenderLines@Ogre@@0@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::size
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	jmp	$LN9@operator@12
$LN6@operator@12:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@12

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::size
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR __Right$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR __Ptr$64385[ebp], eax

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Ptr$64385[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAULineVertex@RenderLines@Ogre@@PAU123@@stdext@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$64385[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAULineVertex@RenderLines@Ogre@@@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEPAULineVertex@RenderLines@Ogre@@PAU234@00@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Ucopy<Ogre::RenderLines::LineVertex *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	$LN9@operator@12
$LN4@operator@12:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@12

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEXPAULineVertex@RenderLines@Ogre@@0@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@I@Z ; std::allocator<Ogre::RenderLines::LineVertex>::deallocate
$LN2@operator@12:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@operator@12

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAULineVertex@RenderLines@Ogre@@@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEPAULineVertex@RenderLines@Ogre@@PAU234@00@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Ucopy<Ogre::RenderLines::LineVertex *>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
$LN9@operator@12:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::~_Vector_val<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
PUBLIC	?_Tidy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEPAURecord@CullResult@Ogre@@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Ucopy<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> > >
PUBLIC	?begin@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::begin
PUBLIC	?end@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::end
PUBLIC	?_Buy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Buy
PUBLIC	?size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::size
PUBLIC	??0?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z ; std::_Vector_val<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_val<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
PUBLIC	??0?$allocator@URecord@CullResult@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::CullResult::Record>::allocator<Ogre::CullResult::Record>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T74164 = -36						; size = 8
$T74163 = -28						; size = 8
$T74162 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74162[ebp], esp
	push	eax
	call	??0?$allocator@URecord@CullResult@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::CullResult::Record>::allocator<Ogre::CullResult::Record>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z ; std::_Vector_val<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_val<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@22

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T74163[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T74164[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEPAURecord@CullResult@Ogre@@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Ucopy<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@22
__catch$??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@22
	ret	0
$LN5@vector@22:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@22:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@22:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::~vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::~vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
PUBLIC	?deallocate@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@I@Z ; std::allocator<Ogre::CullResult::Record>::deallocate
PUBLIC	??$_Ucopy@PAURecord@CullResult@Ogre@@@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEPAURecord@CullResult@Ogre@@PAU234@00@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Ucopy<Ogre::CullResult::Record *>
PUBLIC	?capacity@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::capacity
PUBLIC	?_Destroy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEXPAURecord@CullResult@Ogre@@0@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Destroy
PUBLIC	??$unchecked_copy@PAURecord@CullResult@Ogre@@PAU123@@stdext@@YAPAURecord@CullResult@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
PUBLIC	?clear@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$64539 = -8					; size = 4
__Ptr$64529 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@13

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@13

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::clear
	jmp	$LN9@operator@13
$LN8@operator@13:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@13

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAURecord@CullResult@Ogre@@PAU123@@stdext@@YAPAURecord@CullResult@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$64529[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64529[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEXPAURecord@CullResult@Ogre@@0@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::size
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	jmp	$LN9@operator@13
$LN6@operator@13:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@13

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::size
	shl	eax, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR __Ptr$64539[ebp], eax

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Ptr$64539[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAURecord@CullResult@Ogre@@PAU123@@stdext@@YAPAURecord@CullResult@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$64539[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAURecord@CullResult@Ogre@@@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEPAURecord@CullResult@Ogre@@PAU234@00@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Ucopy<Ogre::CullResult::Record *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@13
$LN4@operator@13:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@13

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEXPAURecord@CullResult@Ogre@@0@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@I@Z ; std::allocator<Ogre::CullResult::Record>::deallocate
$LN2@operator@13:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@13

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAURecord@CullResult@Ogre@@@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEPAURecord@CullResult@Ogre@@PAU234@00@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Ucopy<Ogre::CullResult::Record *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@13:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::~_Vector_val<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
PUBLIC	?_Tidy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEPAPAVEffectObject@Ogre@@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Ucopy<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> > >
PUBLIC	?begin@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::begin
PUBLIC	?end@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::end
PUBLIC	?_Buy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Buy
PUBLIC	?size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::size
PUBLIC	??0?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z ; std::_Vector_val<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_val<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
PUBLIC	??0?$allocator@PAVEffectObject@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::EffectObject *>::allocator<Ogre::EffectObject *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T74194 = -36						; size = 8
$T74193 = -28						; size = 8
$T74192 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74192[ebp], esp
	push	eax
	call	??0?$allocator@PAVEffectObject@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::EffectObject *>::allocator<Ogre::EffectObject *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z ; std::_Vector_val<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_val<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@23

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T74193[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T74194[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEPAPAVEffectObject@Ogre@@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Ucopy<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@23
__catch$??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@23
	ret	0
$LN5@vector@23:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@23:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@23:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::~vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::~vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
PUBLIC	?deallocate@?$allocator@PAVEffectObject@Ogre@@@std@@QAEXPAPAVEffectObject@Ogre@@I@Z ; std::allocator<Ogre::EffectObject *>::deallocate
PUBLIC	??$_Ucopy@PAPAVEffectObject@Ogre@@@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEPAPAVEffectObject@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Ucopy<Ogre::EffectObject * *>
PUBLIC	?capacity@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::capacity
PUBLIC	?_Destroy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEXPAPAVEffectObject@Ogre@@0@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Destroy
PUBLIC	??$unchecked_copy@PAPAVEffectObject@Ogre@@PAPAV12@@stdext@@YAPAPAVEffectObject@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::EffectObject * *,Ogre::EffectObject * *>
PUBLIC	?clear@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$64693 = -8					; size = 4
__Ptr$64683 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@14

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@14

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::clear
	jmp	$LN9@operator@14
$LN8@operator@14:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@14

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAPAVEffectObject@Ogre@@PAPAV12@@stdext@@YAPAPAVEffectObject@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::EffectObject * *,Ogre::EffectObject * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$64683[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64683[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEXPAPAVEffectObject@Ogre@@0@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@14
$LN6@operator@14:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@14

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Ptr$64693[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$64693[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAPAVEffectObject@Ogre@@PAPAV12@@stdext@@YAPAPAVEffectObject@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::EffectObject * *,Ogre::EffectObject * *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64693[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVEffectObject@Ogre@@@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEPAPAVEffectObject@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Ucopy<Ogre::EffectObject * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@14
$LN4@operator@14:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@14

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEXPAPAVEffectObject@Ogre@@0@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVEffectObject@Ogre@@@std@@QAEXPAPAVEffectObject@Ogre@@I@Z ; std::allocator<Ogre::EffectObject *>::deallocate
$LN2@operator@14:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@14

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVEffectObject@Ogre@@@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEPAPAVEffectObject@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Ucopy<Ogre::EffectObject * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@14:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::~_Vector_val<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
PUBLIC	?_Tidy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEPAPAVSoundNode@Ogre@@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Ucopy<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> > >
PUBLIC	?begin@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::begin
PUBLIC	?end@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::end
PUBLIC	?_Buy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Buy
PUBLIC	?size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::size
PUBLIC	??0?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z ; std::_Vector_val<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_val<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
PUBLIC	??0?$allocator@PAVSoundNode@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SoundNode *>::allocator<Ogre::SoundNode *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T74224 = -36						; size = 8
$T74223 = -28						; size = 8
$T74222 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74222[ebp], esp
	push	eax
	call	??0?$allocator@PAVSoundNode@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SoundNode *>::allocator<Ogre::SoundNode *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z ; std::_Vector_val<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_val<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@24

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T74223[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T74224[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEPAPAVSoundNode@Ogre@@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Ucopy<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@24
__catch$??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@24
	ret	0
$LN5@vector@24:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@24:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@24:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::~vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::~vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
PUBLIC	?deallocate@?$allocator@PAVSoundNode@Ogre@@@std@@QAEXPAPAVSoundNode@Ogre@@I@Z ; std::allocator<Ogre::SoundNode *>::deallocate
PUBLIC	??$_Ucopy@PAPAVSoundNode@Ogre@@@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEPAPAVSoundNode@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Ucopy<Ogre::SoundNode * *>
PUBLIC	?capacity@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::capacity
PUBLIC	?_Destroy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEXPAPAVSoundNode@Ogre@@0@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Destroy
PUBLIC	??$unchecked_copy@PAPAVSoundNode@Ogre@@PAPAV12@@stdext@@YAPAPAVSoundNode@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::SoundNode * *,Ogre::SoundNode * *>
PUBLIC	?clear@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$64847 = -8					; size = 4
__Ptr$64837 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@15

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@15

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::clear
	jmp	$LN9@operator@15
$LN8@operator@15:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@15

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAPAVSoundNode@Ogre@@PAPAV12@@stdext@@YAPAPAVSoundNode@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::SoundNode * *,Ogre::SoundNode * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$64837[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64837[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEXPAPAVSoundNode@Ogre@@0@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@15
$LN6@operator@15:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@15

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Ptr$64847[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$64847[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAPAVSoundNode@Ogre@@PAPAV12@@stdext@@YAPAPAVSoundNode@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::SoundNode * *,Ogre::SoundNode * *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64847[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVSoundNode@Ogre@@@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEPAPAVSoundNode@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Ucopy<Ogre::SoundNode * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@15
$LN4@operator@15:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@15

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEXPAPAVSoundNode@Ogre@@0@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVSoundNode@Ogre@@@std@@QAEXPAPAVSoundNode@Ogre@@I@Z ; std::allocator<Ogre::SoundNode *>::deallocate
$LN2@operator@15:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@15

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVSoundNode@Ogre@@@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEPAPAVSoundNode@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Ucopy<Ogre::SoundNode * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@15:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::~_Vector_val<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
PUBLIC	?_Tidy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEPAPAVRenderableObject@Ogre@@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Ucopy<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> > >
PUBLIC	?begin@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::begin
PUBLIC	?end@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::end
PUBLIC	?_Buy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Buy
PUBLIC	?size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::size
PUBLIC	??0?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z ; std::_Vector_val<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_val<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
PUBLIC	??0?$allocator@PAVRenderableObject@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::RenderableObject *>::allocator<Ogre::RenderableObject *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T74254 = -36						; size = 8
$T74253 = -28						; size = 8
$T74252 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74252[ebp], esp
	push	eax
	call	??0?$allocator@PAVRenderableObject@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::RenderableObject *>::allocator<Ogre::RenderableObject *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z ; std::_Vector_val<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_val<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@25

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T74253[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T74254[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEPAPAVRenderableObject@Ogre@@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Ucopy<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@25
__catch$??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@25
	ret	0
$LN5@vector@25:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@25:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@25:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::~vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::~vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
PUBLIC	?deallocate@?$allocator@PAVRenderableObject@Ogre@@@std@@QAEXPAPAVRenderableObject@Ogre@@I@Z ; std::allocator<Ogre::RenderableObject *>::deallocate
PUBLIC	??$_Ucopy@PAPAVRenderableObject@Ogre@@@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEPAPAVRenderableObject@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Ucopy<Ogre::RenderableObject * *>
PUBLIC	?capacity@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::capacity
PUBLIC	?_Destroy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEXPAPAVRenderableObject@Ogre@@0@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Destroy
PUBLIC	??$unchecked_copy@PAPAVRenderableObject@Ogre@@PAPAV12@@stdext@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::RenderableObject * *,Ogre::RenderableObject * *>
PUBLIC	?clear@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$65001 = -8					; size = 4
__Ptr$64991 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@16

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@16

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::clear
	jmp	$LN9@operator@16
$LN8@operator@16:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@16

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAPAVRenderableObject@Ogre@@PAPAV12@@stdext@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::RenderableObject * *,Ogre::RenderableObject * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$64991[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64991[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEXPAPAVRenderableObject@Ogre@@0@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@16
$LN6@operator@16:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@16

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Ptr$65001[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$65001[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAPAVRenderableObject@Ogre@@PAPAV12@@stdext@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::RenderableObject * *,Ogre::RenderableObject * *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$65001[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVRenderableObject@Ogre@@@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEPAPAVRenderableObject@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Ucopy<Ogre::RenderableObject * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@16
$LN4@operator@16:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@16

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEXPAPAVRenderableObject@Ogre@@0@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVRenderableObject@Ogre@@@std@@QAEXPAPAVRenderableObject@Ogre@@I@Z ; std::allocator<Ogre::RenderableObject *>::deallocate
$LN2@operator@16:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@16

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVRenderableObject@Ogre@@@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEPAPAVRenderableObject@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Ucopy<Ogre::RenderableObject * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@16:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::Light *,std::allocator<Ogre::Light *> >::~_Vector_val<Ogre::Light *,std::allocator<Ogre::Light *> >
PUBLIC	?_Tidy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEPAPAVLight@Ogre@@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Ucopy<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> > >
PUBLIC	?begin@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::begin
PUBLIC	?end@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::end
PUBLIC	?_Buy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Buy
PUBLIC	?size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::size
PUBLIC	??0?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z ; std::_Vector_val<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_val<Ogre::Light *,std::allocator<Ogre::Light *> >
PUBLIC	??0?$allocator@PAVLight@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::Light *>::allocator<Ogre::Light *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T74284 = -36						; size = 8
$T74283 = -28						; size = 8
$T74282 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::vector<Ogre::Light *,std::allocator<Ogre::Light *> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74282[ebp], esp
	push	eax
	call	??0?$allocator@PAVLight@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::Light *>::allocator<Ogre::Light *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z ; std::_Vector_val<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_val<Ogre::Light *,std::allocator<Ogre::Light *> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@26

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T74283[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T74284[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEPAPAVLight@Ogre@@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Ucopy<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@26
__catch$??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@26
	ret	0
$LN5@vector@26:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@26:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@26:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::vector<Ogre::Light *,std::allocator<Ogre::Light *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::~vector<Ogre::Light *,std::allocator<Ogre::Light *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::~vector<Ogre::Light *,std::allocator<Ogre::Light *> >
PUBLIC	?deallocate@?$allocator@PAVLight@Ogre@@@std@@QAEXPAPAVLight@Ogre@@I@Z ; std::allocator<Ogre::Light *>::deallocate
PUBLIC	??$_Ucopy@PAPAVLight@Ogre@@@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEPAPAVLight@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Ucopy<Ogre::Light * *>
PUBLIC	?capacity@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::capacity
PUBLIC	?_Destroy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEXPAPAVLight@Ogre@@0@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Destroy
PUBLIC	??$unchecked_copy@PAPAVLight@Ogre@@PAPAV12@@stdext@@YAPAPAVLight@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::Light * *,Ogre::Light * *>
PUBLIC	?clear@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$65155 = -8					; size = 4
__Ptr$65145 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@17

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@17

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::clear
	jmp	$LN9@operator@17
$LN8@operator@17:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@17

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAPAVLight@Ogre@@PAPAV12@@stdext@@YAPAPAVLight@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::Light * *,Ogre::Light * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$65145[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$65145[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEXPAPAVLight@Ogre@@0@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@17
$LN6@operator@17:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@17

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Ptr$65155[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$65155[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAPAVLight@Ogre@@PAPAV12@@stdext@@YAPAPAVLight@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::Light * *,Ogre::Light * *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$65155[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVLight@Ogre@@@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEPAPAVLight@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Ucopy<Ogre::Light * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@17
$LN4@operator@17:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@17

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEXPAPAVLight@Ogre@@0@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVLight@Ogre@@@std@@QAEXPAPAVLight@Ogre@@I@Z ; std::allocator<Ogre::Light *>::deallocate
$LN2@operator@17:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@17

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVLight@Ogre@@@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEPAPAVLight@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Ucopy<Ogre::Light * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@17:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::~_Vector_val<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >
__ehhandler$??1?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::~_Vector_val<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::~_Vector_val<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >
__ehhandler$??1?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::~_Vector_val<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::~_Vector_val<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >
__ehhandler$??1?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::~_Vector_val<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::~_Vector_val<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >
__ehhandler$??1?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::~_Vector_val<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::~_Vector_val<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >
__ehhandler$??1?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::~_Vector_val<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::Light *,std::allocator<Ogre::Light *> >::~_Vector_val<Ogre::Light *,std::allocator<Ogre::Light *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >
__ehhandler$??1?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::Light *,std::allocator<Ogre::Light *> >::~_Vector_val<Ogre::Light *,std::allocator<Ogre::Light *> >
; Function compile flags: /Odtp
;	COMDAT ?capacity@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity
$LN3@capacity:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@PAULineVertex@RenderLines@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@PAULineVertex@RenderLines@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@PAULineVertex@RenderLines@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::erase
PUBLIC	?begin@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::begin
PUBLIC	?end@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T74380 = -40						; size = 8
$T74379 = -32						; size = 8
$T74378 = -24						; size = 8
$T74377 = -16						; size = 8
$T74376 = -8						; size = 8
?clear@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T74377[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T74376[ebp], ecx
	mov	DWORD PTR $T74376[ebp+4], edx
	lea	eax, DWORD PTR $T74379[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T74378[ebp], ecx
	mov	DWORD PTR $T74378[ebp+4], edx
	mov	eax, DWORD PTR $T74376[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T74376[ebp]
	push	ecx
	mov	edx, DWORD PTR $T74378[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T74378[ebp]
	push	eax
	lea	ecx, DWORD PTR $T74380[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEPAULineVertex@RenderLines@Ogre@@I@Z ; std::allocator<Ogre::RenderLines::LineVertex>::allocate
PUBLIC	?_Xlen@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Xlen
PUBLIC	?max_size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy
$LN2@Buy:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEPAULineVertex@RenderLines@Ogre@@I@Z ; std::allocator<Ogre::RenderLines::LineVertex>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAXPAULineVertex@RenderLines@Ogre@@0AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::RenderLines::LineVertex> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEXPAULineVertex@RenderLines@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEXPAULineVertex@RenderLines@Ogre@@0@Z PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAXPAULineVertex@RenderLines@Ogre@@0AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::RenderLines::LineVertex> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEXPAULineVertex@RenderLines@Ogre@@0@Z ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEXPAULineVertex@RenderLines@Ogre@@0@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@I@Z ; std::allocator<Ogre::RenderLines::LineVertex>::deallocate
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T74389 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_val<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74389[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::RenderLines::LineVertex>::allocator<Ogre::RenderLines::LineVertex>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::RenderLines::LineVertex>::allocator<Ogre::RenderLines::LineVertex>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >
__ehhandler$??0?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_val<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >
; Function compile flags: /Odtp
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 402  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::RenderLines::LineVertex>::allocator<Ogre::RenderLines::LineVertex>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::RenderLines::LineVertex>::allocator<Ogre::RenderLines::LineVertex>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@I@Z PROC ; std::allocator<Ogre::RenderLines::LineVertex>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@I@Z ENDP ; std::allocator<Ogre::RenderLines::LineVertex>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@2
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@2
$LN3@capacity@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 4
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@2:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@PAURecord@CullResult@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@PAURecord@CullResult@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@PAURecord@CullResult@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 4

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::erase
PUBLIC	?begin@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::begin
PUBLIC	?end@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T74428 = -40						; size = 8
$T74427 = -32						; size = 8
$T74426 = -24						; size = 8
$T74425 = -16						; size = 8
$T74424 = -8						; size = 8
?clear@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T74425[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T74424[ebp], ecx
	mov	DWORD PTR $T74424[ebp+4], edx
	lea	eax, DWORD PTR $T74427[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T74426[ebp], ecx
	mov	DWORD PTR $T74426[ebp+4], edx
	mov	eax, DWORD PTR $T74424[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T74424[ebp]
	push	ecx
	mov	edx, DWORD PTR $T74426[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T74426[ebp]
	push	eax
	lea	ecx, DWORD PTR $T74428[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@URecord@CullResult@Ogre@@@std@@QAEPAURecord@CullResult@Ogre@@I@Z ; std::allocator<Ogre::CullResult::Record>::allocate
PUBLIC	?_Xlen@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Xlen
PUBLIC	?max_size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@2

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@2
	jmp	SHORT $LN3@Buy@2
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@2

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@2
$LN2@Buy@2:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@URecord@CullResult@Ogre@@@std@@QAEPAURecord@CullResult@Ogre@@I@Z ; std::allocator<Ogre::CullResult::Record>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN3@Buy@2:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@2:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAXPAURecord@CullResult@Ogre@@0AAV?$allocator@URecord@CullResult@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::CullResult::Record> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEXPAURecord@CullResult@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEXPAURecord@CullResult@Ogre@@0@Z PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAXPAURecord@CullResult@Ogre@@0AAV?$allocator@URecord@CullResult@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::CullResult::Record> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEXPAURecord@CullResult@Ogre@@0@Z ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@2

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEXPAURecord@CullResult@Ogre@@0@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@I@Z ; std::allocator<Ogre::CullResult::Record>::deallocate
$LN1@Tidy@2:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >::_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T74437 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_val<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74437[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@URecord@CullResult@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::CullResult::Record>::allocator<Ogre::CullResult::Record>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >::_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@URecord@CullResult@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::CullResult::Record>::allocator<Ogre::CullResult::Record>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >
__ehhandler$??0?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_val<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@URecord@CullResult@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@URecord@CullResult@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::CullResult::Record>::allocator<Ogre::CullResult::Record>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@URecord@CullResult@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::CullResult::Record>::allocator<Ogre::CullResult::Record>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@I@Z PROC ; std::allocator<Ogre::CullResult::Record>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@I@Z ENDP ; std::allocator<Ogre::CullResult::Record>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@3
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@3
$LN3@capacity@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@3:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@PAPAVEffectObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@PAPAVEffectObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@PAPAVEffectObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::erase
PUBLIC	?begin@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::begin
PUBLIC	?end@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T74474 = -40						; size = 8
$T74473 = -32						; size = 8
$T74472 = -24						; size = 8
$T74471 = -16						; size = 8
$T74470 = -8						; size = 8
?clear@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T74471[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T74470[ebp], ecx
	mov	DWORD PTR $T74470[ebp+4], edx
	lea	eax, DWORD PTR $T74473[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T74472[ebp], ecx
	mov	DWORD PTR $T74472[ebp+4], edx
	mov	eax, DWORD PTR $T74470[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T74470[ebp]
	push	ecx
	mov	edx, DWORD PTR $T74472[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T74472[ebp]
	push	eax
	lea	ecx, DWORD PTR $T74474[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVEffectObject@Ogre@@@std@@QAEPAPAVEffectObject@Ogre@@I@Z ; std::allocator<Ogre::EffectObject *>::allocate
PUBLIC	?_Xlen@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Xlen
PUBLIC	?max_size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@3

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@3
	jmp	SHORT $LN3@Buy@3
$LN4@Buy@3:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@3

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@3
$LN2@Buy@3:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@PAVEffectObject@Ogre@@@std@@QAEPAPAVEffectObject@Ogre@@I@Z ; std::allocator<Ogre::EffectObject *>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@3:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@3:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAXPAPAVEffectObject@Ogre@@0AAV?$allocator@PAVEffectObject@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::EffectObject *> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEXPAPAVEffectObject@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEXPAPAVEffectObject@Ogre@@0@Z PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAXPAPAVEffectObject@Ogre@@0AAV?$allocator@PAVEffectObject@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::EffectObject *> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEXPAPAVEffectObject@Ogre@@0@Z ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@3

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEXPAPAVEffectObject@Ogre@@0@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVEffectObject@Ogre@@@std@@QAEXPAPAVEffectObject@Ogre@@I@Z ; std::allocator<Ogre::EffectObject *>::deallocate
$LN1@Tidy@3:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T74483 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_val<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74483[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@PAVEffectObject@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::EffectObject *>::allocator<Ogre::EffectObject *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@PAVEffectObject@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::EffectObject *>::allocator<Ogre::EffectObject *>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >
__ehhandler$??0?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_val<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVEffectObject@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVEffectObject@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::EffectObject *>::allocator<Ogre::EffectObject *>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAVEffectObject@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::EffectObject *>::allocator<Ogre::EffectObject *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVEffectObject@Ogre@@@std@@QAEXPAPAVEffectObject@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVEffectObject@Ogre@@@std@@QAEXPAPAVEffectObject@Ogre@@I@Z PROC ; std::allocator<Ogre::EffectObject *>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVEffectObject@Ogre@@@std@@QAEXPAPAVEffectObject@Ogre@@I@Z ENDP ; std::allocator<Ogre::EffectObject *>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@4
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@4
$LN3@capacity@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@4:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@PAPAVSoundNode@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@PAPAVSoundNode@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@PAPAVSoundNode@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::erase
PUBLIC	?begin@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::begin
PUBLIC	?end@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T74520 = -40						; size = 8
$T74519 = -32						; size = 8
$T74518 = -24						; size = 8
$T74517 = -16						; size = 8
$T74516 = -8						; size = 8
?clear@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T74517[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T74516[ebp], ecx
	mov	DWORD PTR $T74516[ebp+4], edx
	lea	eax, DWORD PTR $T74519[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T74518[ebp], ecx
	mov	DWORD PTR $T74518[ebp+4], edx
	mov	eax, DWORD PTR $T74516[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T74516[ebp]
	push	ecx
	mov	edx, DWORD PTR $T74518[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T74518[ebp]
	push	eax
	lea	ecx, DWORD PTR $T74520[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVSoundNode@Ogre@@@std@@QAEPAPAVSoundNode@Ogre@@I@Z ; std::allocator<Ogre::SoundNode *>::allocate
PUBLIC	?_Xlen@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Xlen
PUBLIC	?max_size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@4

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@4
	jmp	SHORT $LN3@Buy@4
$LN4@Buy@4:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@4

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@4
$LN2@Buy@4:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@PAVSoundNode@Ogre@@@std@@QAEPAPAVSoundNode@Ogre@@I@Z ; std::allocator<Ogre::SoundNode *>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@4:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@4:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAXPAPAVSoundNode@Ogre@@0AAV?$allocator@PAVSoundNode@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SoundNode *> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEXPAPAVSoundNode@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEXPAPAVSoundNode@Ogre@@0@Z PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAXPAPAVSoundNode@Ogre@@0AAV?$allocator@PAVSoundNode@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SoundNode *> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEXPAPAVSoundNode@Ogre@@0@Z ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@4

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEXPAPAVSoundNode@Ogre@@0@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVSoundNode@Ogre@@@std@@QAEXPAPAVSoundNode@Ogre@@I@Z ; std::allocator<Ogre::SoundNode *>::deallocate
$LN1@Tidy@4:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T74529 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_val<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74529[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@PAVSoundNode@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SoundNode *>::allocator<Ogre::SoundNode *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@PAVSoundNode@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SoundNode *>::allocator<Ogre::SoundNode *>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >
__ehhandler$??0?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_val<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVSoundNode@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVSoundNode@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::SoundNode *>::allocator<Ogre::SoundNode *>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAVSoundNode@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::SoundNode *>::allocator<Ogre::SoundNode *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVSoundNode@Ogre@@@std@@QAEXPAPAVSoundNode@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVSoundNode@Ogre@@@std@@QAEXPAPAVSoundNode@Ogre@@I@Z PROC ; std::allocator<Ogre::SoundNode *>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVSoundNode@Ogre@@@std@@QAEXPAPAVSoundNode@Ogre@@I@Z ENDP ; std::allocator<Ogre::SoundNode *>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@5
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@5
$LN3@capacity@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@5:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@PAPAVRenderableObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@PAPAVRenderableObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@PAPAVRenderableObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::erase
PUBLIC	?begin@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::begin
PUBLIC	?end@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T74566 = -40						; size = 8
$T74565 = -32						; size = 8
$T74564 = -24						; size = 8
$T74563 = -16						; size = 8
$T74562 = -8						; size = 8
?clear@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T74563[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T74562[ebp], ecx
	mov	DWORD PTR $T74562[ebp+4], edx
	lea	eax, DWORD PTR $T74565[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T74564[ebp], ecx
	mov	DWORD PTR $T74564[ebp+4], edx
	mov	eax, DWORD PTR $T74562[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T74562[ebp]
	push	ecx
	mov	edx, DWORD PTR $T74564[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T74564[ebp]
	push	eax
	lea	ecx, DWORD PTR $T74566[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVRenderableObject@Ogre@@@std@@QAEPAPAVRenderableObject@Ogre@@I@Z ; std::allocator<Ogre::RenderableObject *>::allocate
PUBLIC	?_Xlen@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Xlen
PUBLIC	?max_size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@5

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@5
	jmp	SHORT $LN3@Buy@5
$LN4@Buy@5:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@5

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@5
$LN2@Buy@5:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@PAVRenderableObject@Ogre@@@std@@QAEPAPAVRenderableObject@Ogre@@I@Z ; std::allocator<Ogre::RenderableObject *>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@5:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@5:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAXPAPAVRenderableObject@Ogre@@0AAV?$allocator@PAVRenderableObject@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::RenderableObject *> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEXPAPAVRenderableObject@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEXPAPAVRenderableObject@Ogre@@0@Z PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAXPAPAVRenderableObject@Ogre@@0AAV?$allocator@PAVRenderableObject@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::RenderableObject *> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEXPAPAVRenderableObject@Ogre@@0@Z ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@5

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEXPAPAVRenderableObject@Ogre@@0@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVRenderableObject@Ogre@@@std@@QAEXPAPAVRenderableObject@Ogre@@I@Z ; std::allocator<Ogre::RenderableObject *>::deallocate
$LN1@Tidy@5:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T74575 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_val<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74575[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@PAVRenderableObject@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::RenderableObject *>::allocator<Ogre::RenderableObject *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@PAVRenderableObject@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::RenderableObject *>::allocator<Ogre::RenderableObject *>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >
__ehhandler$??0?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_val<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVRenderableObject@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVRenderableObject@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::RenderableObject *>::allocator<Ogre::RenderableObject *>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAVRenderableObject@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::RenderableObject *>::allocator<Ogre::RenderableObject *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVRenderableObject@Ogre@@@std@@QAEXPAPAVRenderableObject@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVRenderableObject@Ogre@@@std@@QAEXPAPAVRenderableObject@Ogre@@I@Z PROC ; std::allocator<Ogre::RenderableObject *>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVRenderableObject@Ogre@@@std@@QAEXPAPAVRenderableObject@Ogre@@I@Z ENDP ; std::allocator<Ogre::RenderableObject *>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@6
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@6
$LN3@capacity@6:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@6:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@PAPAVLight@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@PAPAVLight@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@PAPAVLight@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::erase
PUBLIC	?begin@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::begin
PUBLIC	?end@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T74612 = -40						; size = 8
$T74611 = -32						; size = 8
$T74610 = -24						; size = 8
$T74609 = -16						; size = 8
$T74608 = -8						; size = 8
?clear@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T74609[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T74608[ebp], ecx
	mov	DWORD PTR $T74608[ebp+4], edx
	lea	eax, DWORD PTR $T74611[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T74610[ebp], ecx
	mov	DWORD PTR $T74610[ebp+4], edx
	mov	eax, DWORD PTR $T74608[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T74608[ebp]
	push	ecx
	mov	edx, DWORD PTR $T74610[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T74610[ebp]
	push	eax
	lea	ecx, DWORD PTR $T74612[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVLight@Ogre@@@std@@QAEPAPAVLight@Ogre@@I@Z ; std::allocator<Ogre::Light *>::allocate
PUBLIC	?_Xlen@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Xlen
PUBLIC	?max_size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@6

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@6
	jmp	SHORT $LN3@Buy@6
$LN4@Buy@6:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@6

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@6
$LN2@Buy@6:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@PAVLight@Ogre@@@std@@QAEPAPAVLight@Ogre@@I@Z ; std::allocator<Ogre::Light *>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@6:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@6:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAXPAPAVLight@Ogre@@0AAV?$allocator@PAVLight@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Light *> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEXPAPAVLight@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEXPAPAVLight@Ogre@@0@Z PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAXPAPAVLight@Ogre@@0AAV?$allocator@PAVLight@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Light *> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEXPAPAVLight@Ogre@@0@Z ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@6

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEXPAPAVLight@Ogre@@0@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVLight@Ogre@@@std@@QAEXPAPAVLight@Ogre@@I@Z ; std::allocator<Ogre::Light *>::deallocate
$LN1@Tidy@6:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T74621 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_val<Ogre::Light *,std::allocator<Ogre::Light *> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74621[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@PAVLight@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::Light *>::allocator<Ogre::Light *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@PAVLight@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::Light *>::allocator<Ogre::Light *>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >
__ehhandler$??0?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_val<Ogre::Light *,std::allocator<Ogre::Light *> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVLight@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVLight@Ogre@@@std@@QAE@ABV01@@Z PROC	; std::allocator<Ogre::Light *>::allocator<Ogre::Light *>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAVLight@Ogre@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<Ogre::Light *>::allocator<Ogre::Light *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVLight@Ogre@@@std@@QAEXPAPAVLight@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVLight@Ogre@@@std@@QAEXPAPAVLight@Ogre@@I@Z PROC ; std::allocator<Ogre::Light *>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVLight@Ogre@@@std@@QAEXPAPAVLight@Ogre@@I@Z ENDP ; std::allocator<Ogre::Light *>::deallocate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@PAULineVertex@RenderLines@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@PAULineVertex@RenderLines@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@PAULineVertex@RenderLines@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::RenderLines::LineVertex>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::RenderLines::LineVertex>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::operator!=
PUBLIC	?_Make_iter@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$66858 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAULineVertex@RenderLines@Ogre@@PAU123@@stdext@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$66858[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$66858[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEXPAULineVertex@RenderLines@Ogre@@0@Z ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$66858[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::erase
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T74655 = -80						; size = 28
$T74654 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T74655[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T74655[ebp]
	push	eax
	lea	ecx, DWORD PTR $T74654[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T74654[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T74655[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T74655[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Xlen
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 27   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1logic_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$1
__ehfuncinfo$??1logic_error@std@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1logic_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 31   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1logic_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??1logic_error@std@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1logic_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1logic_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Odtp
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@20
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@20:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1length_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1length_error@std@@UAE@XZ$0
__ehfuncinfo$??1length_error@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1length_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1length_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1length_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??1length_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1length_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1length_error@std@@UAE@XZ		; std::length_error::~length_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@21
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@21:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
PUBLIC	??$?0ULineVertex@RenderLines@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::RenderLines::LineVertex>
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T74721 = -24						; size = 4
$T74720 = -20						; size = 4
$T74719 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0ULineVertex@RenderLines@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::RenderLines::LineVertex>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T74721[ebp], eax
	mov	ecx, DWORD PTR $T74721[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T74720[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T74720[ebp], 0
	je	SHORT $LN3@Container_
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T74720[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_
$LN3@Container_:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T74719[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T74719[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T74721[ebp]
	push	eax
	mov	ecx, DWORD PTR $T74720[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAE@V?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderLines::LineVertex> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 58   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 60   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 63   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 64   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
_TEXT	ENDS
PUBLIC	??$_Allocate@ULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::RenderLines::LineVertex>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEPAULineVertex@RenderLines@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEPAULineVertex@RenderLines@Ogre@@I@Z PROC ; std::allocator<Ogre::RenderLines::LineVertex>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@ULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::RenderLines::LineVertex>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEPAULineVertex@RenderLines@Ogre@@I@Z ENDP ; std::allocator<Ogre::RenderLines::LineVertex>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@PAURecord@CullResult@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@PAURecord@CullResult@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@PAURecord@CullResult@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@URecord@CullResult@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::CullResult::Record>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@URecord@CullResult@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::CullResult::Record>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::operator!=
PUBLIC	?_Make_iter@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$66907 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@2

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAURecord@CullResult@Ogre@@PAU123@@stdext@@YAPAURecord@CullResult@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$66907[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$66907[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEXPAURecord@CullResult@Ogre@@0@Z ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$66907[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@2:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T74753 = -80						; size = 28
$T74752 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T74753[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T74753[ebp]
	push	eax
	lea	ecx, DWORD PTR $T74752[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T74752[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T74753[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T74753[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Xlen
PUBLIC	??$?0URecord@CullResult@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@URecord@CullResult@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::CullResult::Record>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T74765 = -24						; size = 4
$T74764 = -20						; size = 4
$T74763 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >::_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0URecord@CullResult@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@URecord@CullResult@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::CullResult::Record>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T74765[ebp], eax
	mov	ecx, DWORD PTR $T74765[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T74764[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T74764[ebp], 0
	je	SHORT $LN3@Container_@2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T74764[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@2
$LN3@Container_@2:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@2:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T74763[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T74763[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T74765[ebp]
	push	eax
	mov	ecx, DWORD PTR $T74764[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAE@V?$allocator@URecord@CullResult@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >::_Container_base_aux_alloc_real<std::allocator<Ogre::CullResult::Record> >
PUBLIC	??$_Allocate@URecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::CullResult::Record>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@URecord@CullResult@Ogre@@@std@@QAEPAURecord@CullResult@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@URecord@CullResult@Ogre@@@std@@QAEPAURecord@CullResult@Ogre@@I@Z PROC ; std::allocator<Ogre::CullResult::Record>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@URecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::CullResult::Record>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@URecord@CullResult@Ogre@@@std@@QAEPAURecord@CullResult@Ogre@@I@Z ENDP ; std::allocator<Ogre::CullResult::Record>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@PAPAVEffectObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@PAPAVEffectObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@PAPAVEffectObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVEffectObject@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::EffectObject *>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@PAVEffectObject@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::EffectObject *>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::operator!=
PUBLIC	?_Make_iter@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$66951 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@3

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAPAVEffectObject@Ogre@@PAPAV12@@stdext@@YAPAPAVEffectObject@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::EffectObject * *,Ogre::EffectObject * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$66951[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$66951[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEXPAPAVEffectObject@Ogre@@0@Z ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$66951[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@3:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T74789 = -80						; size = 28
$T74788 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T74789[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T74789[ebp]
	push	eax
	lea	ecx, DWORD PTR $T74788[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T74788[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T74789[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@3:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T74789[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Xlen
PUBLIC	??$?0PAVEffectObject@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVEffectObject@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::EffectObject *>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T74801 = -24						; size = 4
$T74800 = -20						; size = 4
$T74799 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0PAVEffectObject@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVEffectObject@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::EffectObject *>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T74801[ebp], eax
	mov	ecx, DWORD PTR $T74801[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T74800[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T74800[ebp], 0
	je	SHORT $LN3@Container_@3
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T74800[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@3
$LN3@Container_@3:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@3:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T74799[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T74799[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T74801[ebp]
	push	eax
	mov	ecx, DWORD PTR $T74800[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVEffectObject@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::EffectObject *> >
PUBLIC	??$_Allocate@PAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::EffectObject *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVEffectObject@Ogre@@@std@@QAEPAPAVEffectObject@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVEffectObject@Ogre@@@std@@QAEPAPAVEffectObject@Ogre@@I@Z PROC ; std::allocator<Ogre::EffectObject *>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::EffectObject *>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVEffectObject@Ogre@@@std@@QAEPAPAVEffectObject@Ogre@@I@Z ENDP ; std::allocator<Ogre::EffectObject *>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@PAPAVSoundNode@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@PAPAVSoundNode@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@PAPAVSoundNode@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVSoundNode@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::SoundNode *>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@PAVSoundNode@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::SoundNode *>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::operator!=
PUBLIC	?_Make_iter@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$66995 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@4

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAPAVSoundNode@Ogre@@PAPAV12@@stdext@@YAPAPAVSoundNode@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::SoundNode * *,Ogre::SoundNode * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$66995[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$66995[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEXPAPAVSoundNode@Ogre@@0@Z ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$66995[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@4:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T74825 = -80						; size = 28
$T74824 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T74825[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T74825[ebp]
	push	eax
	lea	ecx, DWORD PTR $T74824[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T74824[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T74825[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@4:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T74825[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Xlen
PUBLIC	??$?0PAVSoundNode@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVSoundNode@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SoundNode *>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T74837 = -24						; size = 4
$T74836 = -20						; size = 4
$T74835 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0PAVSoundNode@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVSoundNode@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SoundNode *>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T74837[ebp], eax
	mov	ecx, DWORD PTR $T74837[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T74836[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T74836[ebp], 0
	je	SHORT $LN3@Container_@4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T74836[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@4
$LN3@Container_@4:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@4:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T74835[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T74835[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T74837[ebp]
	push	eax
	mov	ecx, DWORD PTR $T74836[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSoundNode@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SoundNode *> >
PUBLIC	??$_Allocate@PAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::SoundNode *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVSoundNode@Ogre@@@std@@QAEPAPAVSoundNode@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVSoundNode@Ogre@@@std@@QAEPAPAVSoundNode@Ogre@@I@Z PROC ; std::allocator<Ogre::SoundNode *>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::SoundNode *>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVSoundNode@Ogre@@@std@@QAEPAPAVSoundNode@Ogre@@I@Z ENDP ; std::allocator<Ogre::SoundNode *>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@PAPAVRenderableObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@PAPAVRenderableObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@PAPAVRenderableObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVRenderableObject@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::RenderableObject *>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@PAVRenderableObject@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::RenderableObject *>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::operator!=
PUBLIC	?_Make_iter@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$67039 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@5

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAPAVRenderableObject@Ogre@@PAPAV12@@stdext@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::RenderableObject * *,Ogre::RenderableObject * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$67039[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$67039[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEXPAPAVRenderableObject@Ogre@@0@Z ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$67039[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@5:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T74861 = -80						; size = 28
$T74860 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T74861[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T74861[ebp]
	push	eax
	lea	ecx, DWORD PTR $T74860[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T74860[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T74861[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@5:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T74861[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Xlen
PUBLIC	??$?0PAVRenderableObject@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVRenderableObject@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::RenderableObject *>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T74873 = -24						; size = 4
$T74872 = -20						; size = 4
$T74871 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0PAVRenderableObject@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVRenderableObject@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::RenderableObject *>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T74873[ebp], eax
	mov	ecx, DWORD PTR $T74873[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T74872[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T74872[ebp], 0
	je	SHORT $LN3@Container_@5
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T74872[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@5
$LN3@Container_@5:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@5:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T74871[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T74871[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T74873[ebp]
	push	eax
	mov	ecx, DWORD PTR $T74872[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAE@V?$allocator@PAVRenderableObject@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::RenderableObject *> >
PUBLIC	??$_Allocate@PAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::RenderableObject *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVRenderableObject@Ogre@@@std@@QAEPAPAVRenderableObject@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVRenderableObject@Ogre@@@std@@QAEPAPAVRenderableObject@Ogre@@I@Z PROC ; std::allocator<Ogre::RenderableObject *>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::RenderableObject *>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVRenderableObject@Ogre@@@std@@QAEPAPAVRenderableObject@Ogre@@I@Z ENDP ; std::allocator<Ogre::RenderableObject *>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@PAPAVLight@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@PAPAVLight@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@PAPAVLight@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVLight@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::Light *>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@PAVLight@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::Light *>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::operator!=
PUBLIC	?_Make_iter@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$67083 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@6

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAPAVLight@Ogre@@PAPAV12@@stdext@@YAPAPAVLight@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::Light * *,Ogre::Light * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$67083[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$67083[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEXPAPAVLight@Ogre@@0@Z ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$67083[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@6:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T74897 = -80						; size = 28
$T74896 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T74897[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T74897[ebp]
	push	eax
	lea	ecx, DWORD PTR $T74896[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T74896[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T74897[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@6:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T74897[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Xlen
PUBLIC	??$?0PAVLight@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVLight@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Light *>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T74909 = -24						; size = 4
$T74908 = -20						; size = 4
$T74907 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0PAVLight@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVLight@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Light *>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T74909[ebp], eax
	mov	ecx, DWORD PTR $T74909[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T74908[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T74908[ebp], 0
	je	SHORT $LN3@Container_@6
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T74908[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@6
$LN3@Container_@6:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@6:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T74907[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T74907[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T74909[ebp]
	push	eax
	mov	ecx, DWORD PTR $T74908[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAE@V?$allocator@PAVLight@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Light *> >
PUBLIC	??$_Allocate@PAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::Light *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVLight@Ogre@@@std@@QAEPAPAVLight@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVLight@Ogre@@@std@@QAEPAPAVLight@Ogre@@I@Z PROC ; std::allocator<Ogre::Light *>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::Light *>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVLight@Ogre@@@std@@QAEPAPAVLight@Ogre@@I@Z ENDP ; std::allocator<Ogre::Light *>::allocate
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
PUBLIC	??0?$_Ranit@ULineVertex@RenderLines@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ; std::_Ranit<Ogre::RenderLines::LineVertex,int,Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex const &>::_Ranit<Ogre::RenderLines::LineVertex,int,Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex const &>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@PAULineVertex@RenderLines@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@PAULineVertex@RenderLines@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@ULineVertex@RenderLines@Ogre@@HPBU123@ABU123@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con
$LN1@Vector_con:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@PAULineVertex@RenderLines@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 452  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 454  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	??0?$_Ranit@URecord@CullResult@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ; std::_Ranit<Ogre::CullResult::Record,int,Ogre::CullResult::Record const *,Ogre::CullResult::Record const &>::_Ranit<Ogre::CullResult::Record,int,Ogre::CullResult::Record const *,Ogre::CullResult::Record const &>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@PAURecord@CullResult@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@PAURecord@CullResult@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@URecord@CullResult@Ogre@@HPBU123@ABU123@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@2
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@2
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@2
$LN1@Vector_con@2:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@2:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@PAURecord@CullResult@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@PAVEffectObject@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ; std::_Ranit<Ogre::EffectObject *,int,Ogre::EffectObject * const *,Ogre::EffectObject * const &>::_Ranit<Ogre::EffectObject *,int,Ogre::EffectObject * const *,Ogre::EffectObject * const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@PAPAVEffectObject@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@PAPAVEffectObject@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@PAVEffectObject@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@3
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@3
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@3
$LN1@Vector_con@3:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@3:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@PAPAVEffectObject@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@PAVSoundNode@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ; std::_Ranit<Ogre::SoundNode *,int,Ogre::SoundNode * const *,Ogre::SoundNode * const &>::_Ranit<Ogre::SoundNode *,int,Ogre::SoundNode * const *,Ogre::SoundNode * const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@PAPAVSoundNode@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@PAPAVSoundNode@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@PAVSoundNode@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@4
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@4
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@4
$LN1@Vector_con@4:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@4:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@PAPAVSoundNode@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@PAVRenderableObject@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ; std::_Ranit<Ogre::RenderableObject *,int,Ogre::RenderableObject * const *,Ogre::RenderableObject * const &>::_Ranit<Ogre::RenderableObject *,int,Ogre::RenderableObject * const *,Ogre::RenderableObject * const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@PAPAVRenderableObject@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@PAPAVRenderableObject@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@PAVRenderableObject@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@5
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@5
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@5
$LN1@Vector_con@5:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@5:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@PAPAVRenderableObject@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@PAVLight@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ; std::_Ranit<Ogre::Light *,int,Ogre::Light * const *,Ogre::Light * const &>::_Ranit<Ogre::Light *,int,Ogre::Light * const *,Ogre::Light * const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@PAPAVLight@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@PAPAVLight@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@PAVLight@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@6
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@6
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@6
$LN1@Vector_con@6:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@6:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@PAPAVLight@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@ULineVertex@RenderLines@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::RenderLines::LineVertex,int,Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::RenderLines::LineVertex,int,Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@ULineVertex@RenderLines@Ogre@@HPBU123@ABU123@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@ULineVertex@RenderLines@Ogre@@HPBU123@ABU123@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::RenderLines::LineVertex,int,Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex const &>::_Ranit<Ogre::RenderLines::LineVertex,int,Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@ULineVertex@RenderLines@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@ULineVertex@RenderLines@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::RenderLines::LineVertex,int,Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex const &>::_Ranit<Ogre::RenderLines::LineVertex,int,Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@URecord@CullResult@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::CullResult::Record,int,Ogre::CullResult::Record const *,Ogre::CullResult::Record const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::CullResult::Record,int,Ogre::CullResult::Record const *,Ogre::CullResult::Record const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@URecord@CullResult@Ogre@@HPBU123@ABU123@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@URecord@CullResult@Ogre@@HPBU123@ABU123@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::CullResult::Record,int,Ogre::CullResult::Record const *,Ogre::CullResult::Record const &>::_Ranit<Ogre::CullResult::Record,int,Ogre::CullResult::Record const *,Ogre::CullResult::Record const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@URecord@CullResult@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@URecord@CullResult@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::CullResult::Record,int,Ogre::CullResult::Record const *,Ogre::CullResult::Record const &>::_Ranit<Ogre::CullResult::Record,int,Ogre::CullResult::Record const *,Ogre::CullResult::Record const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVEffectObject@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::EffectObject *,int,Ogre::EffectObject * const *,Ogre::EffectObject * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::EffectObject *,int,Ogre::EffectObject * const *,Ogre::EffectObject * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@PAVEffectObject@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@PAVEffectObject@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::EffectObject *,int,Ogre::EffectObject * const *,Ogre::EffectObject * const &>::_Ranit<Ogre::EffectObject *,int,Ogre::EffectObject * const *,Ogre::EffectObject * const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVEffectObject@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@PAVEffectObject@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::EffectObject *,int,Ogre::EffectObject * const *,Ogre::EffectObject * const &>::_Ranit<Ogre::EffectObject *,int,Ogre::EffectObject * const *,Ogre::EffectObject * const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVSoundNode@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SoundNode *,int,Ogre::SoundNode * const *,Ogre::SoundNode * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SoundNode *,int,Ogre::SoundNode * const *,Ogre::SoundNode * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@PAVSoundNode@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@PAVSoundNode@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::SoundNode *,int,Ogre::SoundNode * const *,Ogre::SoundNode * const &>::_Ranit<Ogre::SoundNode *,int,Ogre::SoundNode * const *,Ogre::SoundNode * const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVSoundNode@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@PAVSoundNode@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::SoundNode *,int,Ogre::SoundNode * const *,Ogre::SoundNode * const &>::_Ranit<Ogre::SoundNode *,int,Ogre::SoundNode * const *,Ogre::SoundNode * const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVRenderableObject@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::RenderableObject *,int,Ogre::RenderableObject * const *,Ogre::RenderableObject * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::RenderableObject *,int,Ogre::RenderableObject * const *,Ogre::RenderableObject * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@PAVRenderableObject@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@PAVRenderableObject@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::RenderableObject *,int,Ogre::RenderableObject * const *,Ogre::RenderableObject * const &>::_Ranit<Ogre::RenderableObject *,int,Ogre::RenderableObject * const *,Ogre::RenderableObject * const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVRenderableObject@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@PAVRenderableObject@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::RenderableObject *,int,Ogre::RenderableObject * const *,Ogre::RenderableObject * const &>::_Ranit<Ogre::RenderableObject *,int,Ogre::RenderableObject * const *,Ogre::RenderableObject * const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVLight@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Light *,int,Ogre::Light * const *,Ogre::Light * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Light *,int,Ogre::Light * const *,Ogre::Light * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@PAVLight@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@PAVLight@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::Light *,int,Ogre::Light * const *,Ogre::Light * const &>::_Ranit<Ogre::Light *,int,Ogre::Light * const *,Ogre::Light * const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVLight@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@PAVLight@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::Light *,int,Ogre::Light * const *,Ogre::Light * const &>::_Ranit<Ogre::Light *,int,Ogre::Light * const *,Ogre::Light * const &>
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@ULineVertex@RenderLines@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@ULineVertex@RenderLines@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::RenderLines::LineVertex,int,Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::RenderLines::LineVertex,int,Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@ULineVertex@RenderLines@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::RenderLines::LineVertex,int,Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::RenderLines::LineVertex,int,Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@URecord@CullResult@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@URecord@CullResult@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::CullResult::Record,int,Ogre::CullResult::Record const *,Ogre::CullResult::Record const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::CullResult::Record,int,Ogre::CullResult::Record const *,Ogre::CullResult::Record const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@URecord@CullResult@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::CullResult::Record,int,Ogre::CullResult::Record const *,Ogre::CullResult::Record const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::CullResult::Record,int,Ogre::CullResult::Record const *,Ogre::CullResult::Record const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVEffectObject@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVEffectObject@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::EffectObject *,int,Ogre::EffectObject * const *,Ogre::EffectObject * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::EffectObject *,int,Ogre::EffectObject * const *,Ogre::EffectObject * const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVEffectObject@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::EffectObject *,int,Ogre::EffectObject * const *,Ogre::EffectObject * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::EffectObject *,int,Ogre::EffectObject * const *,Ogre::EffectObject * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVSoundNode@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVSoundNode@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SoundNode *,int,Ogre::SoundNode * const *,Ogre::SoundNode * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SoundNode *,int,Ogre::SoundNode * const *,Ogre::SoundNode * const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVSoundNode@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SoundNode *,int,Ogre::SoundNode * const *,Ogre::SoundNode * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SoundNode *,int,Ogre::SoundNode * const *,Ogre::SoundNode * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVRenderableObject@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVRenderableObject@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::RenderableObject *,int,Ogre::RenderableObject * const *,Ogre::RenderableObject * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::RenderableObject *,int,Ogre::RenderableObject * const *,Ogre::RenderableObject * const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVRenderableObject@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::RenderableObject *,int,Ogre::RenderableObject * const *,Ogre::RenderableObject * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::RenderableObject *,int,Ogre::RenderableObject * const *,Ogre::RenderableObject * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVLight@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVLight@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Light *,int,Ogre::Light * const *,Ogre::Light * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Light *,int,Ogre::Light * const *,Ogre::Light * const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVLight@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Light *,int,Ogre::Light * const *,Ogre::Light * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Light *,int,Ogre::Light * const *,Ogre::Light * const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@PAULineVertex@RenderLines@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::RenderLines::LineVertex>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 178956970	; 0aaaaaaaH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::RenderLines::LineVertex>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@PAURecord@CullResult@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@URecord@CullResult@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@URecord@CullResult@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::CullResult::Record>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 268435455	; 0fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@2
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@2
$LN3@max_size@2:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@URecord@CullResult@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::CullResult::Record>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@PAPAVEffectObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAVEffectObject@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@PAVEffectObject@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::EffectObject *>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@3
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@3
$LN3@max_size@3:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@3:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVEffectObject@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::EffectObject *>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@PAPAVSoundNode@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAVSoundNode@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@PAVSoundNode@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::SoundNode *>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@4
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@4
$LN3@max_size@4:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@4:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVSoundNode@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::SoundNode *>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@PAPAVRenderableObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAVRenderableObject@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@PAVRenderableObject@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::RenderableObject *>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@5
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@5
$LN3@max_size@5:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@5:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVRenderableObject@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::RenderableObject *>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@PAPAVLight@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAVLight@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@PAVLight@Ogre@@@std@@QBEIXZ PROC	; std::allocator<Ogre::Light *>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@6
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@6
$LN3@max_size@6:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@6:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVLight@Ogre@@@std@@QBEIXZ ENDP	; std::allocator<Ogre::Light *>::max_size
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::operator==
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::operator!=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@PAULineVertex@RenderLines@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@PAULineVertex@RenderLines@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@PAULineVertex@RenderLines@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QAE@PAULineVertex@RenderLines@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Vector_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@PAURecord@CullResult@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@PAURecord@CullResult@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@PAURecord@CullResult@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QAE@PAURecord@CullResult@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Vector_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@PAPAVEffectObject@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@PAPAVEffectObject@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@PAPAVEffectObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QAE@PAPAVEffectObject@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Vector_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@PAPAVSoundNode@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@PAPAVSoundNode@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@PAPAVSoundNode@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QAE@PAPAVSoundNode@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Vector_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@PAPAVRenderableObject@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@PAPAVRenderableObject@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@PAPAVRenderableObject@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QAE@PAPAVRenderableObject@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Vector_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@PAPAVLight@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@PAPAVLight@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@PAPAVLight@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QAE@PAPAVLight@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Vector_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Odtp
;	COMDAT ??8?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@18
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@18
$LN1@operator@18:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@18:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::operator==
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 462  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 463  : 		return _Myaux == _Other._Myaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Other$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al

; 464  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 467  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 468  : 		return _Myaux != 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	mov	al, cl

; 469  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@19
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@19
$LN1@operator@19:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@19:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@20
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@20
$LN1@operator@20:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@20:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@21
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@21
$LN1@operator@21:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@21:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@22
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@22
$LN1@operator@22:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@22:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@23
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@23
$LN1@operator@23:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@23:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::operator==
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
_TEXT	ENDS
;	COMDAT ??$Abs@M@Ogre@@YAMABM@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_x$ = 8							; size = 4
??$Abs@M@Ogre@@YAMABM@Z PROC				; Ogre::Abs<float>, COMDAT

; 125  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 126  : 		return (x<0.0f) ? (-x) : x;

	mov	eax, DWORD PTR _x$[ebp]
	fld	DWORD PTR [eax]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@Abs
	mov	ecx, DWORD PTR _x$[ebp]
	fld	DWORD PTR [ecx]
	fchs
	fstp	DWORD PTR tv68[ebp]
	jmp	SHORT $LN4@Abs
$LN3@Abs:
	mov	edx, DWORD PTR _x$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR tv68[ebp]
$LN4@Abs:
	fld	DWORD PTR tv68[ebp]

; 127  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$Abs@M@Ogre@@YAMABM@Z ENDP				; Ogre::Abs<float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$Max@M@Ogre@@YAMABM0@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$Max@M@Ogre@@YAMABM0@Z PROC				; Ogre::Max<float>, COMDAT

; 120  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 121  : 		return ( (a) > (b) ? (a) : (b) );

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@Max
	mov	edx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR tv67[ebp]
	jmp	SHORT $LN4@Max
$LN3@Max:
	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR tv67[ebp]
$LN4@Max:
	fld	DWORD PTR tv67[ebp]

; 122  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$Max@M@Ogre@@YAMABM0@Z ENDP				; Ogre::Max<float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$Min@M@Ogre@@YAMABM0@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$Min@M@Ogre@@YAMABM0@Z PROC				; Ogre::Min<float>, COMDAT

; 115  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 116  : 		return ( (a) < (b) ? (a) : (b) );

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@Min
	mov	edx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR tv67[ebp]
	jmp	SHORT $LN4@Min
$LN3@Min:
	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR tv67[ebp]
$LN4@Min:
	fld	DWORD PTR tv67[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$Min@M@Ogre@@YAMABM0@Z ENDP				; Ogre::Min<float>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@PAULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@2@@stdext@@YAPAULineVertex@RenderLines@Ogre@@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEPAULineVertex@RenderLines@Ogre@@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@1@0PAU234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEPAULineVertex@RenderLines@Ogre@@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@1@0PAU234@@Z PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Ucopy<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@PAULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@2@@stdext@@YAPAULineVertex@RenderLines@Ogre@@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEPAULineVertex@RenderLines@Ogre@@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@1@0PAU234@@Z ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Ucopy<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
PUBLIC	??$_Checked_base@PAULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::RenderLines::LineVertex *>
PUBLIC	??$_Iter_random@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAULineVertex@RenderLines@Ogre@@0@Z ; std::_Iter_random<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
PUBLIC	??$_Ptr_cat@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAULineVertex@RenderLines@Ogre@@0@Z ; std::_Ptr_cat<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAULineVertex@RenderLines@Ogre@@PAU123@@stdext@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T75067 = -3						; size = 1
$T75066 = -2						; size = 1
$T75065 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAULineVertex@RenderLines@Ogre@@PAU123@@stdext@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00@Z PROC ; stdext::unchecked_copy<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75065[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAULineVertex@RenderLines@Ogre@@0@Z ; std::_Ptr_cat<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
	add	esp, 8
	mov	BYTE PTR $T75066[ebp], al
	movzx	eax, BYTE PTR $T75065[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75066[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75067[ebp]
	push	ecx
	call	??$_Iter_random@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAULineVertex@RenderLines@Ogre@@0@Z ; std::_Iter_random<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::RenderLines::LineVertex *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::RenderLines::LineVertex *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAULineVertex@RenderLines@Ogre@@PAU123@@stdext@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00@Z ENDP ; stdext::unchecked_copy<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@stdext@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAULineVertex@RenderLines@Ogre@@@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEPAULineVertex@RenderLines@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAULineVertex@RenderLines@Ogre@@@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEPAULineVertex@RenderLines@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Ucopy<Ogre::RenderLines::LineVertex *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@stdext@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAULineVertex@RenderLines@Ogre@@@?$vector@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@IAEPAULineVertex@RenderLines@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Ucopy<Ogre::RenderLines::LineVertex *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@PAURecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@2@@stdext@@YAPAURecord@CullResult@Ogre@@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEPAURecord@CullResult@Ogre@@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@1@0PAU234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEPAURecord@CullResult@Ogre@@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@1@0PAU234@@Z PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Ucopy<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@PAURecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@2@@stdext@@YAPAURecord@CullResult@Ogre@@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEPAURecord@CullResult@Ogre@@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@1@0PAU234@@Z ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Ucopy<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAURecord@CullResult@Ogre@@PAU123@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
PUBLIC	??$_Checked_base@PAURecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::CullResult::Record *>
PUBLIC	??$_Iter_random@PAURecord@CullResult@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAURecord@CullResult@Ogre@@0@Z ; std::_Iter_random<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
PUBLIC	??$_Ptr_cat@PAURecord@CullResult@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAURecord@CullResult@Ogre@@0@Z ; std::_Ptr_cat<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAURecord@CullResult@Ogre@@PAU123@@stdext@@YAPAURecord@CullResult@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T75076 = -3						; size = 1
$T75075 = -2						; size = 1
$T75074 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAURecord@CullResult@Ogre@@PAU123@@stdext@@YAPAURecord@CullResult@Ogre@@PAU123@00@Z PROC ; stdext::unchecked_copy<Ogre::CullResult::Record *,Ogre::CullResult::Record *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75074[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAURecord@CullResult@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAURecord@CullResult@Ogre@@0@Z ; std::_Ptr_cat<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
	add	esp, 8
	mov	BYTE PTR $T75075[ebp], al
	movzx	eax, BYTE PTR $T75074[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75075[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75076[ebp]
	push	ecx
	call	??$_Iter_random@PAURecord@CullResult@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAURecord@CullResult@Ogre@@0@Z ; std::_Iter_random<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAURecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::CullResult::Record *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAURecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::CullResult::Record *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAURecord@CullResult@Ogre@@PAU123@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAURecord@CullResult@Ogre@@PAU123@@stdext@@YAPAURecord@CullResult@Ogre@@PAU123@00@Z ENDP ; stdext::unchecked_copy<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@stdext@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::CullResult::Record *,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAURecord@CullResult@Ogre@@@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEPAURecord@CullResult@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAURecord@CullResult@Ogre@@@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEPAURecord@CullResult@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Ucopy<Ogre::CullResult::Record *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@stdext@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::CullResult::Record *,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAURecord@CullResult@Ogre@@@?$vector@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@IAEPAURecord@CullResult@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Ucopy<Ogre::CullResult::Record *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@PAPAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@2@@stdext@@YAPAPAVEffectObject@Ogre@@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVEffectObject@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEPAPAVEffectObject@Ogre@@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@1@0PAPAV23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEPAPAVEffectObject@Ogre@@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@1@0PAPAV23@@Z PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Ucopy<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@PAPAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@2@@stdext@@YAPAPAVEffectObject@Ogre@@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVEffectObject@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEPAPAVEffectObject@Ogre@@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@1@0PAPAV23@@Z ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Ucopy<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAVEffectObject@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVEffectObject@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::EffectObject * *,Ogre::EffectObject * *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAPAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::EffectObject * *>
PUBLIC	??$_Iter_random@PAPAVEffectObject@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVEffectObject@Ogre@@0@Z ; std::_Iter_random<Ogre::EffectObject * *,Ogre::EffectObject * *>
PUBLIC	??$_Ptr_cat@PAPAVEffectObject@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVEffectObject@Ogre@@0@Z ; std::_Ptr_cat<Ogre::EffectObject * *,Ogre::EffectObject * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVEffectObject@Ogre@@PAPAV12@@stdext@@YAPAPAVEffectObject@Ogre@@PAPAV12@00@Z
_TEXT	SEGMENT
$T75085 = -3						; size = 1
$T75084 = -2						; size = 1
$T75083 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVEffectObject@Ogre@@PAPAV12@@stdext@@YAPAPAVEffectObject@Ogre@@PAPAV12@00@Z PROC ; stdext::unchecked_copy<Ogre::EffectObject * *,Ogre::EffectObject * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75083[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVEffectObject@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVEffectObject@Ogre@@0@Z ; std::_Ptr_cat<Ogre::EffectObject * *,Ogre::EffectObject * *>
	add	esp, 8
	mov	BYTE PTR $T75084[ebp], al
	movzx	eax, BYTE PTR $T75083[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75084[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75085[ebp]
	push	ecx
	call	??$_Iter_random@PAPAVEffectObject@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVEffectObject@Ogre@@0@Z ; std::_Iter_random<Ogre::EffectObject * *,Ogre::EffectObject * *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::EffectObject * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::EffectObject * *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAPAVEffectObject@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVEffectObject@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::EffectObject * *,Ogre::EffectObject * *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVEffectObject@Ogre@@PAPAV12@@stdext@@YAPAPAVEffectObject@Ogre@@PAPAV12@00@Z ENDP ; stdext::unchecked_copy<Ogre::EffectObject * *,Ogre::EffectObject * *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAPAVEffectObject@Ogre@@PAPAV12@V?$allocator@PAVEffectObject@Ogre@@@std@@@stdext@@YAPAPAVEffectObject@Ogre@@PAPAV12@00AAV?$allocator@PAVEffectObject@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::EffectObject * *,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAPAVEffectObject@Ogre@@@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEPAPAVEffectObject@Ogre@@PAPAV23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAPAVEffectObject@Ogre@@@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEPAPAVEffectObject@Ogre@@PAPAV23@00@Z PROC ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Ucopy<Ogre::EffectObject * *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVEffectObject@Ogre@@PAPAV12@V?$allocator@PAVEffectObject@Ogre@@@std@@@stdext@@YAPAPAVEffectObject@Ogre@@PAPAV12@00AAV?$allocator@PAVEffectObject@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::EffectObject * *,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAPAVEffectObject@Ogre@@@?$vector@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@IAEPAPAVEffectObject@Ogre@@PAPAV23@00@Z ENDP ; std::vector<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Ucopy<Ogre::EffectObject * *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@PAPAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@2@@stdext@@YAPAPAVSoundNode@Ogre@@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVSoundNode@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEPAPAVSoundNode@Ogre@@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@1@0PAPAV23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEPAPAVSoundNode@Ogre@@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@1@0PAPAV23@@Z PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Ucopy<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@PAPAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@2@@stdext@@YAPAPAVSoundNode@Ogre@@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVSoundNode@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEPAPAVSoundNode@Ogre@@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@1@0PAPAV23@@Z ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Ucopy<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAVSoundNode@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVSoundNode@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::SoundNode * *,Ogre::SoundNode * *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAPAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::SoundNode * *>
PUBLIC	??$_Iter_random@PAPAVSoundNode@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVSoundNode@Ogre@@0@Z ; std::_Iter_random<Ogre::SoundNode * *,Ogre::SoundNode * *>
PUBLIC	??$_Ptr_cat@PAPAVSoundNode@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVSoundNode@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SoundNode * *,Ogre::SoundNode * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVSoundNode@Ogre@@PAPAV12@@stdext@@YAPAPAVSoundNode@Ogre@@PAPAV12@00@Z
_TEXT	SEGMENT
$T75094 = -3						; size = 1
$T75093 = -2						; size = 1
$T75092 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVSoundNode@Ogre@@PAPAV12@@stdext@@YAPAPAVSoundNode@Ogre@@PAPAV12@00@Z PROC ; stdext::unchecked_copy<Ogre::SoundNode * *,Ogre::SoundNode * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75092[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVSoundNode@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVSoundNode@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SoundNode * *,Ogre::SoundNode * *>
	add	esp, 8
	mov	BYTE PTR $T75093[ebp], al
	movzx	eax, BYTE PTR $T75092[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75093[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75094[ebp]
	push	ecx
	call	??$_Iter_random@PAPAVSoundNode@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVSoundNode@Ogre@@0@Z ; std::_Iter_random<Ogre::SoundNode * *,Ogre::SoundNode * *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::SoundNode * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::SoundNode * *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAPAVSoundNode@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVSoundNode@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::SoundNode * *,Ogre::SoundNode * *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVSoundNode@Ogre@@PAPAV12@@stdext@@YAPAPAVSoundNode@Ogre@@PAPAV12@00@Z ENDP ; stdext::unchecked_copy<Ogre::SoundNode * *,Ogre::SoundNode * *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAPAVSoundNode@Ogre@@PAPAV12@V?$allocator@PAVSoundNode@Ogre@@@std@@@stdext@@YAPAPAVSoundNode@Ogre@@PAPAV12@00AAV?$allocator@PAVSoundNode@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::SoundNode * *,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAPAVSoundNode@Ogre@@@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEPAPAVSoundNode@Ogre@@PAPAV23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAPAVSoundNode@Ogre@@@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEPAPAVSoundNode@Ogre@@PAPAV23@00@Z PROC ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Ucopy<Ogre::SoundNode * *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVSoundNode@Ogre@@PAPAV12@V?$allocator@PAVSoundNode@Ogre@@@std@@@stdext@@YAPAPAVSoundNode@Ogre@@PAPAV12@00AAV?$allocator@PAVSoundNode@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::SoundNode * *,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAPAVSoundNode@Ogre@@@?$vector@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@IAEPAPAVSoundNode@Ogre@@PAPAV23@00@Z ENDP ; std::vector<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Ucopy<Ogre::SoundNode * *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@PAPAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@2@@stdext@@YAPAPAVRenderableObject@Ogre@@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVRenderableObject@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEPAPAVRenderableObject@Ogre@@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@1@0PAPAV23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEPAPAVRenderableObject@Ogre@@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@1@0PAPAV23@@Z PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Ucopy<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@PAPAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@2@@stdext@@YAPAPAVRenderableObject@Ogre@@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVRenderableObject@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEPAPAVRenderableObject@Ogre@@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@1@0PAPAV23@@Z ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Ucopy<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAVRenderableObject@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::RenderableObject * *,Ogre::RenderableObject * *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAPAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::RenderableObject * *>
PUBLIC	??$_Iter_random@PAPAVRenderableObject@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVRenderableObject@Ogre@@0@Z ; std::_Iter_random<Ogre::RenderableObject * *,Ogre::RenderableObject * *>
PUBLIC	??$_Ptr_cat@PAPAVRenderableObject@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVRenderableObject@Ogre@@0@Z ; std::_Ptr_cat<Ogre::RenderableObject * *,Ogre::RenderableObject * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVRenderableObject@Ogre@@PAPAV12@@stdext@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00@Z
_TEXT	SEGMENT
$T75103 = -3						; size = 1
$T75102 = -2						; size = 1
$T75101 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVRenderableObject@Ogre@@PAPAV12@@stdext@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00@Z PROC ; stdext::unchecked_copy<Ogre::RenderableObject * *,Ogre::RenderableObject * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75101[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVRenderableObject@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVRenderableObject@Ogre@@0@Z ; std::_Ptr_cat<Ogre::RenderableObject * *,Ogre::RenderableObject * *>
	add	esp, 8
	mov	BYTE PTR $T75102[ebp], al
	movzx	eax, BYTE PTR $T75101[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75102[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75103[ebp]
	push	ecx
	call	??$_Iter_random@PAPAVRenderableObject@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVRenderableObject@Ogre@@0@Z ; std::_Iter_random<Ogre::RenderableObject * *,Ogre::RenderableObject * *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::RenderableObject * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::RenderableObject * *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAPAVRenderableObject@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::RenderableObject * *,Ogre::RenderableObject * *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVRenderableObject@Ogre@@PAPAV12@@stdext@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00@Z ENDP ; stdext::unchecked_copy<Ogre::RenderableObject * *,Ogre::RenderableObject * *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAPAVRenderableObject@Ogre@@PAPAV12@V?$allocator@PAVRenderableObject@Ogre@@@std@@@stdext@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00AAV?$allocator@PAVRenderableObject@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::RenderableObject * *,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAPAVRenderableObject@Ogre@@@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEPAPAVRenderableObject@Ogre@@PAPAV23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAPAVRenderableObject@Ogre@@@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEPAPAVRenderableObject@Ogre@@PAPAV23@00@Z PROC ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Ucopy<Ogre::RenderableObject * *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVRenderableObject@Ogre@@PAPAV12@V?$allocator@PAVRenderableObject@Ogre@@@std@@@stdext@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00AAV?$allocator@PAVRenderableObject@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::RenderableObject * *,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAPAVRenderableObject@Ogre@@@?$vector@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@IAEPAPAVRenderableObject@Ogre@@PAPAV23@00@Z ENDP ; std::vector<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Ucopy<Ogre::RenderableObject * *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@PAPAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@2@@stdext@@YAPAPAVLight@Ogre@@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVLight@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >,Ogre::Light * *,std::allocator<Ogre::Light *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEPAPAVLight@Ogre@@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@1@0PAPAV23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEPAPAVLight@Ogre@@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@1@0PAPAV23@@Z PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Ucopy<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@PAPAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@2@@stdext@@YAPAPAVLight@Ogre@@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVLight@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >,Ogre::Light * *,std::allocator<Ogre::Light *> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEPAPAVLight@Ogre@@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@1@0PAPAV23@@Z ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Ucopy<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAVLight@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVLight@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::Light * *,Ogre::Light * *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAPAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::Light * *>
PUBLIC	??$_Iter_random@PAPAVLight@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVLight@Ogre@@0@Z ; std::_Iter_random<Ogre::Light * *,Ogre::Light * *>
PUBLIC	??$_Ptr_cat@PAPAVLight@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVLight@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Light * *,Ogre::Light * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVLight@Ogre@@PAPAV12@@stdext@@YAPAPAVLight@Ogre@@PAPAV12@00@Z
_TEXT	SEGMENT
$T75112 = -3						; size = 1
$T75111 = -2						; size = 1
$T75110 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVLight@Ogre@@PAPAV12@@stdext@@YAPAPAVLight@Ogre@@PAPAV12@00@Z PROC ; stdext::unchecked_copy<Ogre::Light * *,Ogre::Light * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75110[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVLight@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVLight@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Light * *,Ogre::Light * *>
	add	esp, 8
	mov	BYTE PTR $T75111[ebp], al
	movzx	eax, BYTE PTR $T75110[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75111[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75112[ebp]
	push	ecx
	call	??$_Iter_random@PAPAVLight@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVLight@Ogre@@0@Z ; std::_Iter_random<Ogre::Light * *,Ogre::Light * *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::Light * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::Light * *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAPAVLight@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVLight@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::Light * *,Ogre::Light * *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVLight@Ogre@@PAPAV12@@stdext@@YAPAPAVLight@Ogre@@PAPAV12@00@Z ENDP ; stdext::unchecked_copy<Ogre::Light * *,Ogre::Light * *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAPAVLight@Ogre@@PAPAV12@V?$allocator@PAVLight@Ogre@@@std@@@stdext@@YAPAPAVLight@Ogre@@PAPAV12@00AAV?$allocator@PAVLight@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::Light * *,Ogre::Light * *,std::allocator<Ogre::Light *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAPAVLight@Ogre@@@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEPAPAVLight@Ogre@@PAPAV23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAPAVLight@Ogre@@@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEPAPAVLight@Ogre@@PAPAV23@00@Z PROC ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Ucopy<Ogre::Light * *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVLight@Ogre@@PAPAV12@V?$allocator@PAVLight@Ogre@@@std@@@stdext@@YAPAPAVLight@Ogre@@PAPAV12@00AAV?$allocator@PAVLight@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::Light * *,Ogre::Light * *,std::allocator<Ogre::Light *> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAPAVLight@Ogre@@@?$vector@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@IAEPAPAVLight@Ogre@@PAPAV23@00@Z ENDP ; std::vector<Ogre::Light *,std::allocator<Ogre::Light *> >::_Ucopy<Ogre::Light * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAXPAULineVertex@RenderLines@Ogre@@0AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::RenderLines::LineVertex> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAXPAULineVertex@RenderLines@Ogre@@0AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@@Z
_TEXT	SEGMENT
$T75117 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAXPAULineVertex@RenderLines@Ogre@@0AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::RenderLines::LineVertex> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAULineVertex@RenderLines@Ogre@@0@Z ; std::_Ptr_cat<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
	add	esp, 8
	mov	BYTE PTR $T75117[ebp], al
	movzx	edx, BYTE PTR $T75117[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAXPAULineVertex@RenderLines@Ogre@@0AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::RenderLines::LineVertex> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAXPAULineVertex@RenderLines@Ogre@@0AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::RenderLines::LineVertex> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAXPAURecord@CullResult@Ogre@@0AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::CullResult::Record> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAXPAURecord@CullResult@Ogre@@0AAV?$allocator@URecord@CullResult@Ogre@@@0@@Z
_TEXT	SEGMENT
$T75120 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAXPAURecord@CullResult@Ogre@@0AAV?$allocator@URecord@CullResult@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::CullResult::Record> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAURecord@CullResult@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAURecord@CullResult@Ogre@@0@Z ; std::_Ptr_cat<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
	add	esp, 8
	mov	BYTE PTR $T75120[ebp], al
	movzx	edx, BYTE PTR $T75120[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAXPAURecord@CullResult@Ogre@@0AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::CullResult::Record> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAXPAURecord@CullResult@Ogre@@0AAV?$allocator@URecord@CullResult@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::CullResult::Record> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAXPAPAVEffectObject@Ogre@@0AAV?$allocator@PAVEffectObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::EffectObject *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAXPAPAVEffectObject@Ogre@@0AAV?$allocator@PAVEffectObject@Ogre@@@0@@Z
_TEXT	SEGMENT
$T75123 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAXPAPAVEffectObject@Ogre@@0AAV?$allocator@PAVEffectObject@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::EffectObject *> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAVEffectObject@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVEffectObject@Ogre@@0@Z ; std::_Ptr_cat<Ogre::EffectObject * *,Ogre::EffectObject * *>
	add	esp, 8
	mov	BYTE PTR $T75123[ebp], al
	movzx	edx, BYTE PTR $T75123[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAXPAPAVEffectObject@Ogre@@0AAV?$allocator@PAVEffectObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::EffectObject *> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAXPAPAVEffectObject@Ogre@@0AAV?$allocator@PAVEffectObject@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::EffectObject *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAXPAPAVSoundNode@Ogre@@0AAV?$allocator@PAVSoundNode@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SoundNode *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAXPAPAVSoundNode@Ogre@@0AAV?$allocator@PAVSoundNode@Ogre@@@0@@Z
_TEXT	SEGMENT
$T75126 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAXPAPAVSoundNode@Ogre@@0AAV?$allocator@PAVSoundNode@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::SoundNode *> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAVSoundNode@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVSoundNode@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SoundNode * *,Ogre::SoundNode * *>
	add	esp, 8
	mov	BYTE PTR $T75126[ebp], al
	movzx	edx, BYTE PTR $T75126[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAXPAPAVSoundNode@Ogre@@0AAV?$allocator@PAVSoundNode@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SoundNode *> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAXPAPAVSoundNode@Ogre@@0AAV?$allocator@PAVSoundNode@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::SoundNode *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAXPAPAVRenderableObject@Ogre@@0AAV?$allocator@PAVRenderableObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::RenderableObject *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAXPAPAVRenderableObject@Ogre@@0AAV?$allocator@PAVRenderableObject@Ogre@@@0@@Z
_TEXT	SEGMENT
$T75129 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAXPAPAVRenderableObject@Ogre@@0AAV?$allocator@PAVRenderableObject@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::RenderableObject *> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAVRenderableObject@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVRenderableObject@Ogre@@0@Z ; std::_Ptr_cat<Ogre::RenderableObject * *,Ogre::RenderableObject * *>
	add	esp, 8
	mov	BYTE PTR $T75129[ebp], al
	movzx	edx, BYTE PTR $T75129[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAXPAPAVRenderableObject@Ogre@@0AAV?$allocator@PAVRenderableObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::RenderableObject *> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAXPAPAVRenderableObject@Ogre@@0AAV?$allocator@PAVRenderableObject@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::RenderableObject *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAXPAPAVLight@Ogre@@0AAV?$allocator@PAVLight@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Light *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAXPAPAVLight@Ogre@@0AAV?$allocator@PAVLight@Ogre@@@0@@Z
_TEXT	SEGMENT
$T75132 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAXPAPAVLight@Ogre@@0AAV?$allocator@PAVLight@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::Light *> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAVLight@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVLight@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Light * *,Ogre::Light * *>
	add	esp, 8
	mov	BYTE PTR $T75132[ebp], al
	movzx	edx, BYTE PTR $T75132[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAXPAPAVLight@Ogre@@0AAV?$allocator@PAVLight@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Light *> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAXPAPAVLight@Ogre@@0AAV?$allocator@PAVLight@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::Light *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0ULineVertex@RenderLines@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0ULineVertex@RenderLines@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::RenderLines::LineVertex>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0ULineVertex@RenderLines@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@ULineVertex@RenderLines@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::RenderLines::LineVertex>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Allocate@ULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@IPAU123@@Z
_TEXT	SEGMENT
$T75137 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@ULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@IPAU123@@Z PROC ; std::_Allocate<Ogre::RenderLines::LineVertex>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 24					; 00000018H
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T75137[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T75137[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 24					; 00000018H
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@ULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@IPAU123@@Z ENDP ; std::_Allocate<Ogre::RenderLines::LineVertex>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_alloc@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0
__ehfuncinfo$??1bad_alloc@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_alloc@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1bad_alloc@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 381  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??1bad_alloc@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1bad_alloc@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ		; std::bad_alloc::~bad_alloc
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@22
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@22:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0URecord@CullResult@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@URecord@CullResult@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0URecord@CullResult@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@URecord@CullResult@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::CullResult::Record>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0URecord@CullResult@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@URecord@CullResult@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::CullResult::Record>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@URecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@IPAU123@@Z
_TEXT	SEGMENT
$T75162 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@URecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@IPAU123@@Z PROC ; std::_Allocate<Ogre::CullResult::Record>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 16					; 00000010H
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T75162[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T75162[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 4
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@URecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@IPAU123@@Z ENDP ; std::_Allocate<Ogre::CullResult::Record>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0PAVEffectObject@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVEffectObject@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVEffectObject@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVEffectObject@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::EffectObject *>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVEffectObject@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVEffectObject@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::EffectObject *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@IPAPAV12@@Z
_TEXT	SEGMENT
$T75167 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@IPAPAV12@@Z PROC ; std::_Allocate<Ogre::EffectObject *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@3
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T75167[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T75167[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@3:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@IPAPAV12@@Z ENDP ; std::_Allocate<Ogre::EffectObject *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0PAVSoundNode@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVSoundNode@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVSoundNode@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVSoundNode@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SoundNode *>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVSoundNode@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVSoundNode@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SoundNode *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@IPAPAV12@@Z
_TEXT	SEGMENT
$T75172 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@IPAPAV12@@Z PROC ; std::_Allocate<Ogre::SoundNode *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@4
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T75172[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T75172[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@4:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@IPAPAV12@@Z ENDP ; std::_Allocate<Ogre::SoundNode *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0PAVRenderableObject@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVRenderableObject@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVRenderableObject@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVRenderableObject@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::RenderableObject *>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVRenderableObject@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVRenderableObject@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::RenderableObject *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@IPAPAV12@@Z
_TEXT	SEGMENT
$T75177 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@IPAPAV12@@Z PROC ; std::_Allocate<Ogre::RenderableObject *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@5
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T75177[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T75177[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@5:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@IPAPAV12@@Z ENDP ; std::_Allocate<Ogre::RenderableObject *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0PAVLight@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVLight@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVLight@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVLight@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Light *>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVLight@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVLight@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Light *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@IPAPAV12@@Z
_TEXT	SEGMENT
$T75182 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@IPAPAV12@@Z PROC ; std::_Allocate<Ogre::Light *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@6

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@6
$LN3@Allocate@6:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@6

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T75182[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T75182[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@6:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@6:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@IPAPAV12@@Z ENDP ; std::_Allocate<Ogre::Light *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T75185 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@7

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@7
$LN3@Allocate@7:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@7

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T75185[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T75185[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@7:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@7:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
PUBLIC	??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@@std@@YAPBULineVertex@RenderLines@Ogre@@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@PAULineVertex@RenderLines@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@AAPAULineVertex@RenderLines@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >,Ogre::RenderLines::LineVertex *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@PAULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@2@@stdext@@YAPAULineVertex@RenderLines@Ogre@@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@5@@Z
_TEXT	SEGMENT
$T75198 = -2						; size = 1
$T75197 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@PAULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@2@@stdext@@YAPAULineVertex@RenderLines@Ogre@@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@5@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75197[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@PAULineVertex@RenderLines@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@AAPAULineVertex@RenderLines@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >,Ogre::RenderLines::LineVertex *>
	add	esp, 8
	mov	BYTE PTR $T75198[ebp], al
	movzx	eax, BYTE PTR $T75197[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75198[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@@std@@YAPBULineVertex@RenderLines@Ogre@@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@@std@@YAPBULineVertex@RenderLines@Ogre@@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@PAULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@2@@stdext@@YAPAULineVertex@RenderLines@Ogre@@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@5@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::RenderLines::LineVertex *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@AAPAU123@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@AAPAU123@@Z PROC ; std::_Checked_base<Ogre::RenderLines::LineVertex *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::RenderLines::LineVertex *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@AAPAU123@@Z ENDP ; std::_Checked_base<Ogre::RenderLines::LineVertex *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAULineVertex@RenderLines@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAULineVertex@RenderLines@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAULineVertex@RenderLines@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAULineVertex@RenderLines@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAULineVertex@RenderLines@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAULineVertex@RenderLines@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAULineVertex@RenderLines@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T75209 = -7						; size = 1
$T75208 = -6						; size = 1
$T75207 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	imul	eax, 24					; 00000018H
	add	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Result$[ebp], eax

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T75207[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T75208[ebp], al
	movzx	ecx, BYTE PTR $T75207[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T75208[ebp]
	push	edx
	movzx	eax, BYTE PTR $T75209[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::RenderLines::LineVertex *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_opt@PAULineVertex@RenderLines@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@stdext@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T75213 = -2						; size = 1
$T75212 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@stdext@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75212[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAULineVertex@RenderLines@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAULineVertex@RenderLines@Ogre@@0@Z ; std::_Ptr_cat<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *>
	add	esp, 8
	mov	BYTE PTR $T75213[ebp], al
	movzx	eax, BYTE PTR $T75212[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75213[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::RenderLines::LineVertex *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::RenderLines::LineVertex *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@stdext@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::CullResult::Record const *,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@@std@@YAPBURecord@CullResult@Ogre@@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@PAURecord@CullResult@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@AAPAURecord@CullResult@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >,Ogre::CullResult::Record *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@PAURecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@2@@stdext@@YAPAURecord@CullResult@Ogre@@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@5@@Z
_TEXT	SEGMENT
$T75217 = -2						; size = 1
$T75216 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@PAURecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@2@@stdext@@YAPAURecord@CullResult@Ogre@@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@5@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75216[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@PAURecord@CullResult@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@AAPAURecord@CullResult@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >,Ogre::CullResult::Record *>
	add	esp, 8
	mov	BYTE PTR $T75217[ebp], al
	movzx	eax, BYTE PTR $T75216[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75217[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@@std@@YAPBURecord@CullResult@Ogre@@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@@std@@YAPBURecord@CullResult@Ogre@@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::CullResult::Record const *,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@PAURecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@2@@stdext@@YAPAURecord@CullResult@Ogre@@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@5@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAURecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::CullResult::Record *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAURecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@AAPAU123@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAURecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@AAPAU123@@Z PROC ; std::_Checked_base<Ogre::CullResult::Record *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAURecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::CullResult::Record *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAURecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@AAPAU123@@Z ENDP ; std::_Checked_base<Ogre::CullResult::Record *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAURecord@CullResult@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAURecord@CullResult@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAURecord@CullResult@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAURecord@CullResult@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::CullResult::Record *,Ogre::CullResult::Record *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAURecord@CullResult@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAURecord@CullResult@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAURecord@CullResult@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAURecord@CullResult@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAURecord@CullResult@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAURecord@CullResult@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::CullResult::Record *,Ogre::CullResult::Record *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAURecord@CullResult@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAURecord@CullResult@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAURecord@CullResult@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::CullResult::Record *,Ogre::CullResult::Record *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAURecord@CullResult@Ogre@@PAU123@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T75228 = -7						; size = 1
$T75227 = -6						; size = 1
$T75226 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAURecord@CullResult@Ogre@@PAU123@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::CullResult::Record *,Ogre::CullResult::Record *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 4
	shl	eax, 4
	add	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Result$[ebp], eax

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	ecx, ecx
	mov	BYTE PTR $T75226[ebp], cl
	xor	edx, edx
	mov	BYTE PTR $T75227[ebp], dl
	movzx	eax, BYTE PTR $T75226[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75227[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T75228[ebp]
	push	edx
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Checked_base@PAURecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::CullResult::Record *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_opt@PAURecord@CullResult@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::CullResult::Record *,Ogre::CullResult::Record *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAURecord@CullResult@Ogre@@PAU123@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::CullResult::Record *,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@stdext@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T75232 = -2						; size = 1
$T75231 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@stdext@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::CullResult::Record *,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75231[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAURecord@CullResult@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAURecord@CullResult@Ogre@@0@Z ; std::_Ptr_cat<Ogre::CullResult::Record *,Ogre::CullResult::Record *>
	add	esp, 8
	mov	BYTE PTR $T75232[ebp], al
	movzx	eax, BYTE PTR $T75231[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75232[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAURecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::CullResult::Record *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAURecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::CullResult::Record *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::CullResult::Record *,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@stdext@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::CullResult::Record *,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBQAVEffectObject@Ogre@@PAPAV12@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAPAPAVEffectObject@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVEffectObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::EffectObject * const *,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@@std@@YAPBQAVEffectObject@Ogre@@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@PAPAVEffectObject@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@AAPAPAVEffectObject@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >,Ogre::EffectObject * *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@PAPAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@2@@stdext@@YAPAPAVEffectObject@Ogre@@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVEffectObject@Ogre@@@4@@Z
_TEXT	SEGMENT
$T75236 = -2						; size = 1
$T75235 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@PAPAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@2@@stdext@@YAPAPAVEffectObject@Ogre@@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVEffectObject@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75235[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@PAPAVEffectObject@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@AAPAPAVEffectObject@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >,Ogre::EffectObject * *>
	add	esp, 8
	mov	BYTE PTR $T75236[ebp], al
	movzx	eax, BYTE PTR $T75235[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75236[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@@std@@YAPBQAVEffectObject@Ogre@@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@@std@@YAPBQAVEffectObject@Ogre@@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBQAVEffectObject@Ogre@@PAPAV12@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAPAPAVEffectObject@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVEffectObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::EffectObject * const *,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@PAPAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@2@@stdext@@YAPAPAVEffectObject@Ogre@@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVEffectObject@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAPAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::EffectObject * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@AAPAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAPAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@AAPAPAV12@@Z PROC ; std::_Checked_base<Ogre::EffectObject * *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::EffectObject * *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAPAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@AAPAPAV12@@Z ENDP ; std::_Checked_base<Ogre::EffectObject * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAPAVEffectObject@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVEffectObject@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAPAVEffectObject@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVEffectObject@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::EffectObject * *,Ogre::EffectObject * *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAPAVEffectObject@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVEffectObject@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::EffectObject * *,Ogre::EffectObject * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAVEffectObject@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVEffectObject@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAVEffectObject@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVEffectObject@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::EffectObject * *,Ogre::EffectObject * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAPAVEffectObject@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVEffectObject@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::EffectObject * *,Ogre::EffectObject * *>
_TEXT	ENDS
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAPAVEffectObject@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVEffectObject@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAPAVEffectObject@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVEffectObject@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::EffectObject * *,Ogre::EffectObject * *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAPAVEffectObject@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVEffectObject@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::EffectObject * *,Ogre::EffectObject * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAVEffectObject@Ogre@@PAPAV12@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAPAPAVEffectObject@Ogre@@PAPAV12@00AAV?$allocator@PAVEffectObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::EffectObject * *,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVEffectObject@Ogre@@PAPAV12@V?$allocator@PAVEffectObject@Ogre@@@std@@@stdext@@YAPAPAVEffectObject@Ogre@@PAPAV12@00AAV?$allocator@PAVEffectObject@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T75248 = -2						; size = 1
$T75247 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVEffectObject@Ogre@@PAPAV12@V?$allocator@PAVEffectObject@Ogre@@@std@@@stdext@@YAPAPAVEffectObject@Ogre@@PAPAV12@00AAV?$allocator@PAVEffectObject@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::EffectObject * *,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75247[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVEffectObject@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVEffectObject@Ogre@@0@Z ; std::_Ptr_cat<Ogre::EffectObject * *,Ogre::EffectObject * *>
	add	esp, 8
	mov	BYTE PTR $T75248[ebp], al
	movzx	eax, BYTE PTR $T75247[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75248[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::EffectObject * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::EffectObject * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAPAVEffectObject@Ogre@@PAPAV12@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAPAPAVEffectObject@Ogre@@PAPAV12@00AAV?$allocator@PAVEffectObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::EffectObject * *,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAVEffectObject@Ogre@@PAPAV12@V?$allocator@PAVEffectObject@Ogre@@@std@@@stdext@@YAPAPAVEffectObject@Ogre@@PAPAV12@00AAV?$allocator@PAVEffectObject@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::EffectObject * *,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBQAVSoundNode@Ogre@@PAPAV12@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAPAPAVSoundNode@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVSoundNode@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SoundNode * const *,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@@std@@YAPBQAVSoundNode@Ogre@@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@PAPAVSoundNode@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@AAPAPAVSoundNode@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >,Ogre::SoundNode * *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@PAPAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@2@@stdext@@YAPAPAVSoundNode@Ogre@@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVSoundNode@Ogre@@@4@@Z
_TEXT	SEGMENT
$T75252 = -2						; size = 1
$T75251 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@PAPAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@2@@stdext@@YAPAPAVSoundNode@Ogre@@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVSoundNode@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75251[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@PAPAVSoundNode@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@AAPAPAVSoundNode@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >,Ogre::SoundNode * *>
	add	esp, 8
	mov	BYTE PTR $T75252[ebp], al
	movzx	eax, BYTE PTR $T75251[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75252[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@@std@@YAPBQAVSoundNode@Ogre@@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@@std@@YAPBQAVSoundNode@Ogre@@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBQAVSoundNode@Ogre@@PAPAV12@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAPAPAVSoundNode@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVSoundNode@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SoundNode * const *,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@PAPAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@2@@stdext@@YAPAPAVSoundNode@Ogre@@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVSoundNode@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAPAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::SoundNode * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@AAPAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAPAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@AAPAPAV12@@Z PROC ; std::_Checked_base<Ogre::SoundNode * *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::SoundNode * *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAPAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@AAPAPAV12@@Z ENDP ; std::_Checked_base<Ogre::SoundNode * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAPAVSoundNode@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVSoundNode@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAPAVSoundNode@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVSoundNode@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::SoundNode * *,Ogre::SoundNode * *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAPAVSoundNode@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVSoundNode@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::SoundNode * *,Ogre::SoundNode * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAVSoundNode@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVSoundNode@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAVSoundNode@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVSoundNode@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::SoundNode * *,Ogre::SoundNode * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAPAVSoundNode@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVSoundNode@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::SoundNode * *,Ogre::SoundNode * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAPAVSoundNode@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVSoundNode@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAPAVSoundNode@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVSoundNode@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::SoundNode * *,Ogre::SoundNode * *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt@2

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt@2:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAPAVSoundNode@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVSoundNode@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::SoundNode * *,Ogre::SoundNode * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAVSoundNode@Ogre@@PAPAV12@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAPAPAVSoundNode@Ogre@@PAPAV12@00AAV?$allocator@PAVSoundNode@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SoundNode * *,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVSoundNode@Ogre@@PAPAV12@V?$allocator@PAVSoundNode@Ogre@@@std@@@stdext@@YAPAPAVSoundNode@Ogre@@PAPAV12@00AAV?$allocator@PAVSoundNode@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T75264 = -2						; size = 1
$T75263 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVSoundNode@Ogre@@PAPAV12@V?$allocator@PAVSoundNode@Ogre@@@std@@@stdext@@YAPAPAVSoundNode@Ogre@@PAPAV12@00AAV?$allocator@PAVSoundNode@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::SoundNode * *,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75263[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVSoundNode@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVSoundNode@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SoundNode * *,Ogre::SoundNode * *>
	add	esp, 8
	mov	BYTE PTR $T75264[ebp], al
	movzx	eax, BYTE PTR $T75263[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75264[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::SoundNode * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::SoundNode * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAPAVSoundNode@Ogre@@PAPAV12@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAPAPAVSoundNode@Ogre@@PAPAV12@00AAV?$allocator@PAVSoundNode@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SoundNode * *,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAVSoundNode@Ogre@@PAPAV12@V?$allocator@PAVSoundNode@Ogre@@@std@@@stdext@@YAPAPAVSoundNode@Ogre@@PAPAV12@00AAV?$allocator@PAVSoundNode@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::SoundNode * *,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBQAVRenderableObject@Ogre@@PAPAV12@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAPAPAVRenderableObject@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVRenderableObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::RenderableObject * const *,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@@std@@YAPBQAVRenderableObject@Ogre@@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@PAPAVRenderableObject@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@AAPAPAVRenderableObject@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >,Ogre::RenderableObject * *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@PAPAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@2@@stdext@@YAPAPAVRenderableObject@Ogre@@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVRenderableObject@Ogre@@@4@@Z
_TEXT	SEGMENT
$T75268 = -2						; size = 1
$T75267 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@PAPAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@2@@stdext@@YAPAPAVRenderableObject@Ogre@@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVRenderableObject@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75267[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@PAPAVRenderableObject@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@AAPAPAVRenderableObject@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >,Ogre::RenderableObject * *>
	add	esp, 8
	mov	BYTE PTR $T75268[ebp], al
	movzx	eax, BYTE PTR $T75267[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75268[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@@std@@YAPBQAVRenderableObject@Ogre@@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@@std@@YAPBQAVRenderableObject@Ogre@@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBQAVRenderableObject@Ogre@@PAPAV12@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAPAPAVRenderableObject@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVRenderableObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::RenderableObject * const *,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@PAPAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@2@@stdext@@YAPAPAVRenderableObject@Ogre@@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVRenderableObject@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAPAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::RenderableObject * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@AAPAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAPAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@AAPAPAV12@@Z PROC ; std::_Checked_base<Ogre::RenderableObject * *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::RenderableObject * *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAPAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@AAPAPAV12@@Z ENDP ; std::_Checked_base<Ogre::RenderableObject * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAPAVRenderableObject@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVRenderableObject@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAPAVRenderableObject@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVRenderableObject@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::RenderableObject * *,Ogre::RenderableObject * *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAPAVRenderableObject@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVRenderableObject@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::RenderableObject * *,Ogre::RenderableObject * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAVRenderableObject@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVRenderableObject@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAVRenderableObject@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVRenderableObject@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::RenderableObject * *,Ogre::RenderableObject * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAPAVRenderableObject@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVRenderableObject@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::RenderableObject * *,Ogre::RenderableObject * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAPAVRenderableObject@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAPAVRenderableObject@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::RenderableObject * *,Ogre::RenderableObject * *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt@3

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt@3:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAPAVRenderableObject@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::RenderableObject * *,Ogre::RenderableObject * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAVRenderableObject@Ogre@@PAPAV12@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00AAV?$allocator@PAVRenderableObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::RenderableObject * *,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVRenderableObject@Ogre@@PAPAV12@V?$allocator@PAVRenderableObject@Ogre@@@std@@@stdext@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00AAV?$allocator@PAVRenderableObject@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T75280 = -2						; size = 1
$T75279 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVRenderableObject@Ogre@@PAPAV12@V?$allocator@PAVRenderableObject@Ogre@@@std@@@stdext@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00AAV?$allocator@PAVRenderableObject@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::RenderableObject * *,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75279[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVRenderableObject@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVRenderableObject@Ogre@@0@Z ; std::_Ptr_cat<Ogre::RenderableObject * *,Ogre::RenderableObject * *>
	add	esp, 8
	mov	BYTE PTR $T75280[ebp], al
	movzx	eax, BYTE PTR $T75279[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75280[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::RenderableObject * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::RenderableObject * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAPAVRenderableObject@Ogre@@PAPAV12@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00AAV?$allocator@PAVRenderableObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::RenderableObject * *,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAVRenderableObject@Ogre@@PAPAV12@V?$allocator@PAVRenderableObject@Ogre@@@std@@@stdext@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00AAV?$allocator@PAVRenderableObject@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::RenderableObject * *,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBQAVLight@Ogre@@PAPAV12@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAPAPAVLight@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVLight@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Light * const *,Ogre::Light * *,std::allocator<Ogre::Light *> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@@std@@YAPBQAVLight@Ogre@@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@PAPAVLight@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@AAPAPAVLight@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >,Ogre::Light * *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@PAPAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@2@@stdext@@YAPAPAVLight@Ogre@@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVLight@Ogre@@@4@@Z
_TEXT	SEGMENT
$T75284 = -2						; size = 1
$T75283 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@PAPAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@2@@stdext@@YAPAPAVLight@Ogre@@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVLight@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >,Ogre::Light * *,std::allocator<Ogre::Light *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75283[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@PAPAVLight@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@AAPAPAVLight@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >,Ogre::Light * *>
	add	esp, 8
	mov	BYTE PTR $T75284[ebp], al
	movzx	eax, BYTE PTR $T75283[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75284[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@@std@@YAPBQAVLight@Ogre@@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@@std@@YAPBQAVLight@Ogre@@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBQAVLight@Ogre@@PAPAV12@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAPAPAVLight@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVLight@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Light * const *,Ogre::Light * *,std::allocator<Ogre::Light *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@PAPAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@2@@stdext@@YAPAPAVLight@Ogre@@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVLight@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >,Ogre::Light * *,std::allocator<Ogre::Light *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAPAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::Light * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@AAPAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAPAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@AAPAPAV12@@Z PROC ; std::_Checked_base<Ogre::Light * *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::Light * *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAPAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@AAPAPAV12@@Z ENDP ; std::_Checked_base<Ogre::Light * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAPAVLight@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVLight@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAPAVLight@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVLight@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::Light * *,Ogre::Light * *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAPAVLight@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVLight@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::Light * *,Ogre::Light * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAVLight@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVLight@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAVLight@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVLight@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::Light * *,Ogre::Light * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAPAVLight@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVLight@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::Light * *,Ogre::Light * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAPAVLight@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVLight@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAPAVLight@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVLight@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::Light * *,Ogre::Light * *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt@4

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt@4:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAPAVLight@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVLight@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::Light * *,Ogre::Light * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAVLight@Ogre@@PAPAV12@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAPAPAVLight@Ogre@@PAPAV12@00AAV?$allocator@PAVLight@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Light * *,Ogre::Light * *,std::allocator<Ogre::Light *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVLight@Ogre@@PAPAV12@V?$allocator@PAVLight@Ogre@@@std@@@stdext@@YAPAPAVLight@Ogre@@PAPAV12@00AAV?$allocator@PAVLight@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T75296 = -2						; size = 1
$T75295 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVLight@Ogre@@PAPAV12@V?$allocator@PAVLight@Ogre@@@std@@@stdext@@YAPAPAVLight@Ogre@@PAPAV12@00AAV?$allocator@PAVLight@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::Light * *,Ogre::Light * *,std::allocator<Ogre::Light *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75295[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVLight@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVLight@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Light * *,Ogre::Light * *>
	add	esp, 8
	mov	BYTE PTR $T75296[ebp], al
	movzx	eax, BYTE PTR $T75295[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75296[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::Light * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::Light * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAPAVLight@Ogre@@PAPAV12@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAPAPAVLight@Ogre@@PAPAV12@00AAV?$allocator@PAVLight@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Light * *,Ogre::Light * *,std::allocator<Ogre::Light *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAVLight@Ogre@@PAPAV12@V?$allocator@PAVLight@Ogre@@@std@@@stdext@@YAPAPAVLight@Ogre@@PAPAV12@00AAV?$allocator@PAVLight@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::Light * *,Ogre::Light * *,std::allocator<Ogre::Light *> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@@Z ; std::allocator<Ogre::RenderLines::LineVertex>::destroy
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAXPAULineVertex@RenderLines@Ogre@@0AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAXPAULineVertex@RenderLines@Ogre@@0AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::RenderLines::LineVertex> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@@Z ; std::allocator<Ogre::RenderLines::LineVertex>::destroy
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAXPAULineVertex@RenderLines@Ogre@@0AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::RenderLines::LineVertex> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@@Z ; std::allocator<Ogre::CullResult::Record>::destroy
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAXPAURecord@CullResult@Ogre@@0AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAXPAURecord@CullResult@Ogre@@0AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::CullResult::Record> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra@2
$LN2@Destroy_ra@2:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@2:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra@2

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@@Z ; std::allocator<Ogre::CullResult::Record>::destroy
	jmp	SHORT $LN2@Destroy_ra@2
$LN4@Destroy_ra@2:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAXPAURecord@CullResult@Ogre@@0AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::CullResult::Record> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAXPAPAVEffectObject@Ogre@@0AAV?$allocator@PAVEffectObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAXPAPAVEffectObject@Ogre@@0AAV?$allocator@PAVEffectObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::EffectObject *> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAXPAPAVEffectObject@Ogre@@0AAV?$allocator@PAVEffectObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::EffectObject *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAXPAPAVSoundNode@Ogre@@0AAV?$allocator@PAVSoundNode@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAXPAPAVSoundNode@Ogre@@0AAV?$allocator@PAVSoundNode@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::SoundNode *> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAXPAPAVSoundNode@Ogre@@0AAV?$allocator@PAVSoundNode@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::SoundNode *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAXPAPAVRenderableObject@Ogre@@0AAV?$allocator@PAVRenderableObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAXPAPAVRenderableObject@Ogre@@0AAV?$allocator@PAVRenderableObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::RenderableObject *> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAXPAPAVRenderableObject@Ogre@@0AAV?$allocator@PAVRenderableObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::RenderableObject *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAXPAPAVLight@Ogre@@0AAV?$allocator@PAVLight@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAXPAPAVLight@Ogre@@0AAV?$allocator@PAVLight@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::Light *> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAXPAPAVLight@Ogre@@0AAV?$allocator@PAVLight@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::Light *> >
_TEXT	ENDS
PUBLIC	??$_Destroy@ULineVertex@RenderLines@Ogre@@@std@@YAXPAULineVertex@RenderLines@Ogre@@@Z ; std::_Destroy<Ogre::RenderLines::LineVertex>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@@Z PROC ; std::allocator<Ogre::RenderLines::LineVertex>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@ULineVertex@RenderLines@Ogre@@@std@@YAXPAULineVertex@RenderLines@Ogre@@@Z ; std::_Destroy<Ogre::RenderLines::LineVertex>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@@Z ENDP ; std::allocator<Ogre::RenderLines::LineVertex>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@URecord@CullResult@Ogre@@@std@@YAXPAURecord@CullResult@Ogre@@@Z ; std::_Destroy<Ogre::CullResult::Record>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@@Z PROC ; std::allocator<Ogre::CullResult::Record>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@URecord@CullResult@Ogre@@@std@@YAXPAURecord@CullResult@Ogre@@@Z ; std::_Destroy<Ogre::CullResult::Record>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@@Z ENDP ; std::allocator<Ogre::CullResult::Record>::destroy
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBULineVertex@RenderLines@Ogre@@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@@std@@YAPBULineVertex@RenderLines@Ogre@@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@@std@@YAPBULineVertex@RenderLines@Ogre@@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBULineVertex@RenderLines@Ogre@@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@@std@@YAPBULineVertex@RenderLines@Ogre@@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@PAULineVertex@RenderLines@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@AAPAULineVertex@RenderLines@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@PAULineVertex@RenderLines@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@AAPAULineVertex@RenderLines@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >,Ogre::RenderLines::LineVertex *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@PAULineVertex@RenderLines@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@AAPAULineVertex@RenderLines@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >,Ogre::RenderLines::LineVertex *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@ABU345@@Z ; std::allocator<Ogre::RenderLines::LineVertex>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@ABU345@@Z ; std::allocator<Ogre::RenderLines::LineVertex>::construct
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@@Z ; std::allocator<Ogre::RenderLines::LineVertex>::destroy
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PBU123@0PAU123@AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::RenderLines::LineVertex const *,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::RenderLines::LineVertex *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAULineVertex@RenderLines@Ogre@@@std@@YAPAULineVertex@RenderLines@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::RenderLines::LineVertex *>
_TEXT	ENDS
PUBLIC	??4LineVertex@RenderLines@Ogre@@QAEAAU012@ABU012@@Z ; Ogre::RenderLines::LineVertex::operator=
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAULineVertex@RenderLines@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAULineVertex@RenderLines@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@5
$LN2@Copy_opt@5:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@5:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@5

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	call	??4LineVertex@RenderLines@Ogre@@QAEAAU012@ABU012@@Z
	jmp	SHORT $LN2@Copy_opt@5
$LN1@Copy_opt@5:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAULineVertex@RenderLines@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@2
$LN5@Uninit_cop@2:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@2:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@ABU345@@Z ; std::allocator<Ogre::RenderLines::LineVertex>::construct
	jmp	SHORT $LN5@Uninit_cop@2
$LN4@Uninit_cop@2:
	jmp	SHORT $LN10@Uninit_cop@2
__catch$??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@2
$LN2@Uninit_cop@2:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@2:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@2

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@@Z ; std::allocator<Ogre::RenderLines::LineVertex>::destroy
	jmp	SHORT $LN2@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@2:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAULineVertex@RenderLines@Ogre@@PAU123@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@YAPAULineVertex@RenderLines@Ogre@@PAU123@00AAV?$allocator@ULineVertex@RenderLines@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::RenderLines::LineVertex *,Ogre::RenderLines::LineVertex *,std::allocator<Ogre::RenderLines::LineVertex> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBURecord@CullResult@Ogre@@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@@std@@YAPBURecord@CullResult@Ogre@@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@@std@@YAPBURecord@CullResult@Ogre@@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBURecord@CullResult@Ogre@@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@@std@@YAPBURecord@CullResult@Ogre@@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@PAURecord@CullResult@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@AAPAURecord@CullResult@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@PAURecord@CullResult@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@AAPAURecord@CullResult@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >,Ogre::CullResult::Record *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@PAURecord@CullResult@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@AAPAURecord@CullResult@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >,Ogre::CullResult::Record *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@ABU345@@Z ; std::allocator<Ogre::CullResult::Record>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::CullResult::Record const *,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@3
$LN5@Uninit_cop@3:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@3:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@3

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@ABU345@@Z ; std::allocator<Ogre::CullResult::Record>::construct
	jmp	SHORT $LN5@Uninit_cop@3
$LN4@Uninit_cop@3:
	jmp	SHORT $LN10@Uninit_cop@3
__catch$??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@3
$LN2@Uninit_cop@3:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@3:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@3

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@@Z ; std::allocator<Ogre::CullResult::Record>::destroy
	jmp	SHORT $LN2@Uninit_cop@3
$LN1@Uninit_cop@3:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@3:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PBU123@0PAU123@AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::CullResult::Record const *,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAURecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAURecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::CullResult::Record *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAURecord@CullResult@Ogre@@@std@@YAPAURecord@CullResult@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::CullResult::Record *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAURecord@CullResult@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAURecord@CullResult@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::CullResult::Record *,Ogre::CullResult::Record *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@6
$LN2@Copy_opt@6:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@6:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@6

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN2@Copy_opt@6
$LN1@Copy_opt@6:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAURecord@CullResult@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::CullResult::Record *,Ogre::CullResult::Record *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::CullResult::Record *,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@4
$LN5@Uninit_cop@4:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@4:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@4

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@ABU345@@Z ; std::allocator<Ogre::CullResult::Record>::construct
	jmp	SHORT $LN5@Uninit_cop@4
$LN4@Uninit_cop@4:
	jmp	SHORT $LN10@Uninit_cop@4
__catch$??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@4
$LN2@Uninit_cop@4:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@4:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@4

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@@Z ; std::allocator<Ogre::CullResult::Record>::destroy
	jmp	SHORT $LN2@Uninit_cop@4
$LN1@Uninit_cop@4:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@4:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAURecord@CullResult@Ogre@@PAU123@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@YAPAURecord@CullResult@Ogre@@PAU123@00AAV?$allocator@URecord@CullResult@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::CullResult::Record *,Ogre::CullResult::Record *,std::allocator<Ogre::CullResult::Record> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVEffectObject@Ogre@@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@@std@@YAPBQAVEffectObject@Ogre@@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@@std@@YAPBQAVEffectObject@Ogre@@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVEffectObject@Ogre@@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@@std@@YAPBQAVEffectObject@Ogre@@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@PAPAVEffectObject@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@AAPAPAVEffectObject@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@PAPAVEffectObject@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@AAPAPAVEffectObject@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >,Ogre::EffectObject * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@PAPAVEffectObject@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@AAPAPAVEffectObject@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >,Ogre::EffectObject * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PBQAVEffectObject@Ogre@@PAPAV12@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAPAPAVEffectObject@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVEffectObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBQAVEffectObject@Ogre@@PAPAV12@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAPAPAVEffectObject@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVEffectObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::EffectObject * const *,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@5

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@5:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBQAVEffectObject@Ogre@@PAPAV12@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAPAPAVEffectObject@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVEffectObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::EffectObject * const *,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAPAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::EffectObject * *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAPAVEffectObject@Ogre@@@std@@YAPAPAVEffectObject@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::EffectObject * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAVEffectObject@Ogre@@PAPAV12@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAPAPAVEffectObject@Ogre@@PAPAV12@00AAV?$allocator@PAVEffectObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVEffectObject@Ogre@@PAPAV12@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAPAPAVEffectObject@Ogre@@PAPAV12@00AAV?$allocator@PAVEffectObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::EffectObject * *,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@6

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@6:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAVEffectObject@Ogre@@PAPAV12@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@YAPAPAVEffectObject@Ogre@@PAPAV12@00AAV?$allocator@PAVEffectObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::EffectObject * *,Ogre::EffectObject * *,std::allocator<Ogre::EffectObject *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVSoundNode@Ogre@@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@@std@@YAPBQAVSoundNode@Ogre@@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@@std@@YAPBQAVSoundNode@Ogre@@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVSoundNode@Ogre@@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@@std@@YAPBQAVSoundNode@Ogre@@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@PAPAVSoundNode@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@AAPAPAVSoundNode@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@PAPAVSoundNode@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@AAPAPAVSoundNode@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >,Ogre::SoundNode * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@PAPAVSoundNode@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@AAPAPAVSoundNode@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >,Ogre::SoundNode * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PBQAVSoundNode@Ogre@@PAPAV12@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAPAPAVSoundNode@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVSoundNode@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBQAVSoundNode@Ogre@@PAPAV12@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAPAPAVSoundNode@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVSoundNode@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::SoundNode * const *,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@7

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@7:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBQAVSoundNode@Ogre@@PAPAV12@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAPAPAVSoundNode@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVSoundNode@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::SoundNode * const *,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAPAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::SoundNode * *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAPAVSoundNode@Ogre@@@std@@YAPAPAVSoundNode@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::SoundNode * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAVSoundNode@Ogre@@PAPAV12@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAPAPAVSoundNode@Ogre@@PAPAV12@00AAV?$allocator@PAVSoundNode@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVSoundNode@Ogre@@PAPAV12@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAPAPAVSoundNode@Ogre@@PAPAV12@00AAV?$allocator@PAVSoundNode@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::SoundNode * *,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@8

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@8:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAVSoundNode@Ogre@@PAPAV12@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@YAPAPAVSoundNode@Ogre@@PAPAV12@00AAV?$allocator@PAVSoundNode@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::SoundNode * *,Ogre::SoundNode * *,std::allocator<Ogre::SoundNode *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVRenderableObject@Ogre@@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@@std@@YAPBQAVRenderableObject@Ogre@@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@@std@@YAPBQAVRenderableObject@Ogre@@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVRenderableObject@Ogre@@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@@std@@YAPBQAVRenderableObject@Ogre@@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@PAPAVRenderableObject@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@AAPAPAVRenderableObject@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@PAPAVRenderableObject@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@AAPAPAVRenderableObject@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >,Ogre::RenderableObject * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@PAPAVRenderableObject@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@AAPAPAVRenderableObject@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >,Ogre::RenderableObject * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PBQAVRenderableObject@Ogre@@PAPAV12@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAPAPAVRenderableObject@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVRenderableObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBQAVRenderableObject@Ogre@@PAPAV12@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAPAPAVRenderableObject@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVRenderableObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::RenderableObject * const *,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@9

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@9:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBQAVRenderableObject@Ogre@@PAPAV12@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAPAPAVRenderableObject@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVRenderableObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::RenderableObject * const *,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAPAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::RenderableObject * *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAPAVRenderableObject@Ogre@@@std@@YAPAPAVRenderableObject@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::RenderableObject * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAVRenderableObject@Ogre@@PAPAV12@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00AAV?$allocator@PAVRenderableObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVRenderableObject@Ogre@@PAPAV12@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00AAV?$allocator@PAVRenderableObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::RenderableObject * *,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@10

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@10:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAVRenderableObject@Ogre@@PAPAV12@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@YAPAPAVRenderableObject@Ogre@@PAPAV12@00AAV?$allocator@PAVRenderableObject@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::RenderableObject * *,Ogre::RenderableObject * *,std::allocator<Ogre::RenderableObject *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVLight@Ogre@@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@@std@@YAPBQAVLight@Ogre@@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@@std@@YAPBQAVLight@Ogre@@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVLight@Ogre@@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@@std@@YAPBQAVLight@Ogre@@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@PAPAVLight@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@AAPAPAVLight@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@PAPAVLight@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@AAPAPAVLight@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >,Ogre::Light * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@PAPAVLight@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@AAPAPAVLight@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >,Ogre::Light * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PBQAVLight@Ogre@@PAPAV12@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAPAPAVLight@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVLight@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBQAVLight@Ogre@@PAPAV12@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAPAPAVLight@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVLight@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::Light * const *,Ogre::Light * *,std::allocator<Ogre::Light *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@11

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@11:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBQAVLight@Ogre@@PAPAV12@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAPAPAVLight@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVLight@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::Light * const *,Ogre::Light * *,std::allocator<Ogre::Light *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAPAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::Light * *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAPAVLight@Ogre@@@std@@YAPAPAVLight@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::Light * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAVLight@Ogre@@PAPAV12@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAPAPAVLight@Ogre@@PAPAV12@00AAV?$allocator@PAVLight@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVLight@Ogre@@PAPAV12@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAPAPAVLight@Ogre@@PAPAV12@00AAV?$allocator@PAVLight@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::Light * *,Ogre::Light * *,std::allocator<Ogre::Light *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@12

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@12:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAVLight@Ogre@@PAPAV12@V?$allocator@PAVLight@Ogre@@@std@@@std@@YAPAPAVLight@Ogre@@PAPAV12@00AAV?$allocator@PAVLight@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::Light * *,Ogre::Light * *,std::allocator<Ogre::Light *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy@ULineVertex@RenderLines@Ogre@@@std@@YAXPAULineVertex@RenderLines@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@ULineVertex@RenderLines@Ogre@@@std@@YAXPAULineVertex@RenderLines@Ogre@@@Z PROC ; std::_Destroy<Ogre::RenderLines::LineVertex>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@ULineVertex@RenderLines@Ogre@@@std@@YAXPAULineVertex@RenderLines@Ogre@@@Z ENDP ; std::_Destroy<Ogre::RenderLines::LineVertex>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@URecord@CullResult@Ogre@@@std@@YAXPAURecord@CullResult@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@URecord@CullResult@Ogre@@@std@@YAXPAURecord@CullResult@Ogre@@@Z PROC ; std::_Destroy<Ogre::CullResult::Record>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@URecord@CullResult@Ogre@@@std@@YAXPAURecord@CullResult@Ogre@@@Z ENDP ; std::_Destroy<Ogre::CullResult::Record>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??4LineVertex@RenderLines@Ogre@@QAEAAU012@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4LineVertex@RenderLines@Ogre@@QAEAAU012@ABU012@@Z PROC ; Ogre::RenderLines::LineVertex::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4Vector2@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector2::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4LineVertex@RenderLines@Ogre@@QAEAAU012@ABU012@@Z ENDP ; Ogre::RenderLines::LineVertex::operator=
_TEXT	ENDS
PUBLIC	??$_Construct@ULineVertex@RenderLines@Ogre@@U123@@std@@YAXPAULineVertex@RenderLines@Ogre@@ABU123@@Z ; std::_Construct<Ogre::RenderLines::LineVertex,Ogre::RenderLines::LineVertex>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@ABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@ABU345@@Z PROC ; std::allocator<Ogre::RenderLines::LineVertex>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@ULineVertex@RenderLines@Ogre@@U123@@std@@YAXPAULineVertex@RenderLines@Ogre@@ABU123@@Z ; std::_Construct<Ogre::RenderLines::LineVertex,Ogre::RenderLines::LineVertex>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@ULineVertex@RenderLines@Ogre@@@std@@QAEXPAULineVertex@RenderLines@Ogre@@ABU345@@Z ENDP ; std::allocator<Ogre::RenderLines::LineVertex>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@URecord@CullResult@Ogre@@U123@@std@@YAXPAURecord@CullResult@Ogre@@ABU123@@Z ; std::_Construct<Ogre::CullResult::Record,Ogre::CullResult::Record>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@ABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@ABU345@@Z PROC ; std::allocator<Ogre::CullResult::Record>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@URecord@CullResult@Ogre@@U123@@std@@YAXPAURecord@CullResult@Ogre@@ABU123@@Z ; std::_Construct<Ogre::CullResult::Record,Ogre::CullResult::Record>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@URecord@CullResult@Ogre@@@std@@QAEXPAURecord@CullResult@Ogre@@ABU345@@Z ENDP ; std::allocator<Ogre::CullResult::Record>::construct
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEPBULineVertex@RenderLines@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Checked_iterator_base
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBULineVertex@RenderLines@Ogre@@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBULineVertex@RenderLines@Ogre@@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEPBULineVertex@RenderLines@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBULineVertex@RenderLines@Ogre@@AAV?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEPBURecord@CullResult@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBURecord@CullResult@Ogre@@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBURecord@CullResult@Ogre@@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEPBURecord@CullResult@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBURecord@CullResult@Ogre@@AAV?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEPBQAVEffectObject@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVEffectObject@Ogre@@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVEffectObject@Ogre@@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEPBQAVEffectObject@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVEffectObject@Ogre@@AAV?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEPBQAVSoundNode@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVSoundNode@Ogre@@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVSoundNode@Ogre@@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEPBQAVSoundNode@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVSoundNode@Ogre@@AAV?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEPBQAVRenderableObject@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVRenderableObject@Ogre@@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVRenderableObject@Ogre@@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEPBQAVRenderableObject@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVRenderableObject@Ogre@@AAV?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEPBQAVLight@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVLight@Ogre@@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVLight@Ogre@@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEPBQAVLight@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVLight@Ogre@@AAV?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	??0LineVertex@RenderLines@Ogre@@QAE@ABU012@@Z	; Ogre::RenderLines::LineVertex::LineVertex
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$_Construct@ULineVertex@RenderLines@Ogre@@U123@@std@@YAXPAULineVertex@RenderLines@Ogre@@ABU123@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@ULineVertex@RenderLines@Ogre@@U123@@std@@YAXPAULineVertex@RenderLines@Ogre@@ABU123@@Z$0
__ehfuncinfo$??$_Construct@ULineVertex@RenderLines@Ogre@@U123@@std@@YAXPAULineVertex@RenderLines@Ogre@@ABU123@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@ULineVertex@RenderLines@Ogre@@U123@@std@@YAXPAULineVertex@RenderLines@Ogre@@ABU123@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Construct@ULineVertex@RenderLines@Ogre@@U123@@std@@YAXPAULineVertex@RenderLines@Ogre@@ABU123@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T75454 = -24						; size = 4
$T75453 = -20						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@ULineVertex@RenderLines@Ogre@@U123@@std@@YAXPAULineVertex@RenderLines@Ogre@@ABU123@@Z PROC ; std::_Construct<Ogre::RenderLines::LineVertex,Ogre::RenderLines::LineVertex>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@ULineVertex@RenderLines@Ogre@@U123@@std@@YAXPAULineVertex@RenderLines@Ogre@@ABU123@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	24					; 00000018H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T75454[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T75454[ebp], 0
	je	SHORT $LN3@Construct
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T75454[ebp]
	call	??0LineVertex@RenderLines@Ogre@@QAE@ABU012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Construct
$LN3@Construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T75453[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 53   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@ULineVertex@RenderLines@Ogre@@U123@@std@@YAXPAULineVertex@RenderLines@Ogre@@ABU123@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T75454[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@ULineVertex@RenderLines@Ogre@@U123@@std@@YAXPAULineVertex@RenderLines@Ogre@@ABU123@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@ULineVertex@RenderLines@Ogre@@U123@@std@@YAXPAULineVertex@RenderLines@Ogre@@ABU123@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@ULineVertex@RenderLines@Ogre@@U123@@std@@YAXPAULineVertex@RenderLines@Ogre@@ABU123@@Z ENDP ; std::_Construct<Ogre::RenderLines::LineVertex,Ogre::RenderLines::LineVertex>
; Function compile flags: /Odtp
;	COMDAT ??$_Construct@URecord@CullResult@Ogre@@U123@@std@@YAXPAURecord@CullResult@Ogre@@ABU123@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T75466 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@URecord@CullResult@Ogre@@U123@@std@@YAXPAURecord@CullResult@Ogre@@ABU123@@Z PROC ; std::_Construct<Ogre::CullResult::Record,Ogre::CullResult::Record>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	16					; 00000010H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T75466[ebp], eax
	cmp	DWORD PTR $T75466[ebp], 0
	je	SHORT $LN3@Construct@2
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T75466[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T75466[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@Construct@2
$LN3@Construct@2:
	mov	DWORD PTR tv69[ebp], 0
$LN1@Construct@2:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@URecord@CullResult@Ogre@@U123@@std@@YAXPAURecord@CullResult@Ogre@@ABU123@@Z ENDP ; std::_Construct<Ogre::CullResult::Record,Ogre::CullResult::Record>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0LineVertex@RenderLines@Ogre@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0LineVertex@RenderLines@Ogre@@QAE@ABU012@@Z PROC	; Ogre::RenderLines::LineVertex::LineVertex, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0LineVertex@RenderLines@Ogre@@QAE@ABU012@@Z ENDP	; Ogre::RenderLines::LineVertex::LineVertex
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEPBULineVertex@RenderLines@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEPBULineVertex@RenderLines@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@ULineVertex@RenderLines@Ogre@@V?$allocator@ULineVertex@RenderLines@Ogre@@@std@@@std@@QBEPBULineVertex@RenderLines@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::RenderLines::LineVertex,std::allocator<Ogre::RenderLines::LineVertex> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEPBURecord@CullResult@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEPBURecord@CullResult@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@URecord@CullResult@Ogre@@V?$allocator@URecord@CullResult@Ogre@@@std@@@std@@QBEPBURecord@CullResult@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::CullResult::Record,std::allocator<Ogre::CullResult::Record> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEPBQAVEffectObject@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEPBQAVEffectObject@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@PAVEffectObject@Ogre@@V?$allocator@PAVEffectObject@Ogre@@@std@@@std@@QBEPBQAVEffectObject@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::EffectObject *,std::allocator<Ogre::EffectObject *> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEPBQAVSoundNode@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEPBQAVSoundNode@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@PAVSoundNode@Ogre@@V?$allocator@PAVSoundNode@Ogre@@@std@@@std@@QBEPBQAVSoundNode@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::SoundNode *,std::allocator<Ogre::SoundNode *> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEPBQAVRenderableObject@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEPBQAVRenderableObject@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@PAVRenderableObject@Ogre@@V?$allocator@PAVRenderableObject@Ogre@@@std@@@std@@QBEPBQAVRenderableObject@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::RenderableObject *,std::allocator<Ogre::RenderableObject *> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEPBQAVLight@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEPBQAVLight@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@PAVLight@Ogre@@V?$allocator@PAVLight@Ogre@@@std@@@std@@QBEPBQAVLight@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::Light *,std::allocator<Ogre::Light *> >::_Checked_iterator_base
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
_TEXT	ENDS
;	COMDAT ??__ETWO_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__ETWO_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'TWO_PI'', COMDAT

; 10   : 	const float TWO_PI = ONE_PI*2;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fadd	ST(0), ST(0)
	fstp	DWORD PTR _TWO_PI
	pop	ebp
	ret	0
??__ETWO_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'TWO_PI''
text$yc	ENDS
PUBLIC	__real@3fe0000000000000
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??__EHALF_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__EHALF_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'HALF_PI'', COMDAT

; 11   : 	const float	HALF_PI = ONE_PI*0.5f;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR _HALF_PI
	pop	ebp
	ret	0
??__EHALF_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'HALF_PI''
text$yc	ENDS
EXTRN	??0RuntimeClass@Ogre@@QAE@PBDPBV01@HP6APAVBaseObject@1@XZ@Z:PROC ; Ogre::RuntimeClass::RuntimeClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogredummynode.cpp
;	COMDAT ??__E?m_RTTI@DummyNode@Ogre@@2VRuntimeClass@2@B@@YAXXZ
text$yc	SEGMENT
??__E?m_RTTI@DummyNode@Ogre@@2VRuntimeClass@2@B@@YAXXZ PROC ; `dynamic initializer for 'Ogre::DummyNode::m_RTTI'', COMDAT

; 8    : 	IMPLEMENT_RTTI(DummyNode, RenderLines, 100);

	push	ebp
	mov	ebp, esp
	push	OFFSET ?newObject@DummyNode@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::DummyNode::newObject
	push	100					; 00000064H
	push	OFFSET ?m_RTTI@RenderLines@Ogre@@2VRuntimeClass@2@B ; Ogre::RenderLines::m_RTTI
	push	OFFSET $SG62834
	mov	ecx, OFFSET ?m_RTTI@DummyNode@Ogre@@2VRuntimeClass@2@B ; Ogre::DummyNode::m_RTTI
	call	??0RuntimeClass@Ogre@@QAE@PBDPBV01@HP6APAVBaseObject@1@XZ@Z ; Ogre::RuntimeClass::RuntimeClass
	pop	ebp
	ret	0
??__E?m_RTTI@DummyNode@Ogre@@2VRuntimeClass@2@B@@YAXXZ ENDP ; `dynamic initializer for 'Ogre::DummyNode::m_RTTI''
text$yc	ENDS
PUBLIC	?m_RTTI@DummyNode@Ogre@@2VRuntimeClass@2@B	; Ogre::DummyNode::m_RTTI
_BSS	SEGMENT
_TWO_PI	DD	01H DUP (?)
?m_RTTI@DummyNode@Ogre@@2VRuntimeClass@2@B DB 014H DUP (?) ; Ogre::DummyNode::m_RTTI
_HALF_PI DD	01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_TWO_PI$initializer$ DD FLAT:??__ETWO_PI@Ogre@@YAXXZ
_HALF_PI$initializer$ DD FLAT:??__EHALF_PI@Ogre@@YAXXZ
?m_RTTI$initializer$@DummyNode@Ogre@@2P6AXXZA DD FLAT:??__E?m_RTTI@DummyNode@Ogre@@2VRuntimeClass@2@B@@YAXXZ ; Ogre::DummyNode::m_RTTI$initializer$
CRT$XCU	ENDS
END
