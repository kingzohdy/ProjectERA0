; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\OgreMain\OgreBuildingData.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG5715
_DATA	ENDS
CONST	SEGMENT
$SG5715	DB	'bad allocation', 00H
	ORG $+1
_MAX_FLOAT DD	07f7fffffr			; 3.40282e+038
_ONE_PI	DD	040490fd0r			; 3.14159
_EPSILON DD	03727c5acr			; 1e-005
_RADS_PER_DEG DD 03c8efa35r			; 0.0174533
_DEGS_PER_RAD DD 042652ee1r			; 57.2958
$SG59150 DB	'BuildingData', 00H
CONST	ENDS
PUBLIC	??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDelegation::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDelegation::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDelegation::operator=
_TEXT	ENDS
PUBLIC	?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ	; Ogre::RuntimeClass::getBaseClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebaseobject.h
;	COMDAT ?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ PROC	; Ogre::RuntimeClass::getBaseClass, COMDAT
; _this$ = ecx

; 20   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 21   : 			return m_pBaseClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 22   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ ENDP	; Ogre::RuntimeClass::getBaseClass
_TEXT	ENDS
PUBLIC	?getClassName@RuntimeClass@Ogre@@QBEPBDXZ	; Ogre::RuntimeClass::getClassName
; Function compile flags: /Odtp
;	COMDAT ?getClassName@RuntimeClass@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ PROC		; Ogre::RuntimeClass::getClassName, COMDAT
; _this$ = ecx

; 25   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 26   : 			return m_pClassName; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ ENDP		; Ogre::RuntimeClass::getClassName
_TEXT	ENDS
PUBLIC	?getVersion@RuntimeClass@Ogre@@QBEHXZ		; Ogre::RuntimeClass::getVersion
; Function compile flags: /Odtp
;	COMDAT ?getVersion@RuntimeClass@Ogre@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVersion@RuntimeClass@Ogre@@QBEHXZ PROC		; Ogre::RuntimeClass::getVersion, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Version;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getVersion@RuntimeClass@Ogre@@QBEHXZ ENDP		; Ogre::RuntimeClass::getVersion
_TEXT	ENDS
PUBLIC	?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ; Ogre::RuntimeClass::newObject
; Function compile flags: /Odtp
;	COMDAT ?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ PROC ; Ogre::RuntimeClass::newObject, COMDAT
; _this$ = ecx

; 35   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 			return (*m_pNewFunc)();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx

; 37   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ENDP ; Ogre::RuntimeClass::newObject
_TEXT	ENDS
PUBLIC	??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::RuntimeClass::operator=
; Function compile flags: /Odtp
;	COMDAT ??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::RuntimeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::RuntimeClass::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::BaseObject::getRTTI
EXTRN	?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::BaseObject::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::BaseObject::getRTTI, COMDAT
; _this$ = ecx

; 56   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 			return &m_RTTI;

	mov	eax, OFFSET ?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B ; Ogre::BaseObject::m_RTTI

; 58   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::BaseObject::getRTTI
_TEXT	ENDS
PUBLIC	?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ; Ogre::BaseObject::isExactKindOf
; Function compile flags: /Odtp
;	COMDAT ?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_prtti$ = 8						; size = 4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z PROC ; Ogre::BaseObject::isExactKindOf, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			return (getRTTI() == prtti);

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	xor	ecx, ecx
	cmp	eax, DWORD PTR _prtti$[ebp]
	sete	cl
	mov	al, cl

; 63   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ENDP ; Ogre::BaseObject::isExactKindOf
_TEXT	ENDS
PUBLIC	?release@BaseObject@Ogre@@UAEXXZ		; Ogre::BaseObject::release
; Function compile flags: /Odtp
;	COMDAT ?release@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?release@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::release, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			m_RefCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 70   : 			if(m_RefCount <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN2@release

; 71   : 			{
; 72   : 				deleteThis();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
$LN2@release:

; 73   : 			}
; 74   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?release@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::release
_TEXT	ENDS
PUBLIC	?addRef@BaseObject@Ogre@@UAEXXZ			; Ogre::BaseObject::addRef
; Function compile flags: /Odtp
;	COMDAT ?addRef@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?addRef@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::addRef, COMDAT
; _this$ = ecx

; 77   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 			m_RefCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 79   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?addRef@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::addRef
_TEXT	ENDS
PUBLIC	?getRefCount@BaseObject@Ogre@@UAEHXZ		; Ogre::BaseObject::getRefCount
; Function compile flags: /Odtp
;	COMDAT ?getRefCount@BaseObject@Ogre@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRefCount@BaseObject@Ogre@@UAEHXZ PROC		; Ogre::BaseObject::getRefCount, COMDAT
; _this$ = ecx

; 82   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 			return m_RefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 84   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRefCount@BaseObject@Ogre@@UAEHXZ ENDP		; Ogre::BaseObject::getRefCount
_TEXT	ENDS
PUBLIC	?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::BaseObject::_serialize
; Function compile flags: /Odtp
;	COMDAT ?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z PROC	; Ogre::BaseObject::_serialize, COMDAT
; _this$ = ecx

; 87   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ENDP	; Ogre::BaseObject::_serialize
_TEXT	ENDS
PUBLIC	??_7BaseObject@Ogre@@6B@			; Ogre::BaseObject::`vftable'
PUBLIC	??0BaseObject@Ogre@@IAE@XZ			; Ogre::BaseObject::BaseObject
PUBLIC	??_R4BaseObject@Ogre@@6B@			; Ogre::BaseObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBaseObject@Ogre@@@8			; Ogre::BaseObject `RTTI Type Descriptor'
PUBLIC	??_R3BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BaseObject@Ogre@@8		; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVMemoryDelegation@Ogre@@@8		; Ogre::MemoryDelegation `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`vector deleting destructor'
PUBLIC	?deleteThis@BaseObject@Ogre@@MAEXXZ		; Ogre::BaseObject::deleteThis
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDelegation@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDelegation@Ogre@@8 DD 00H			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDelegation@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDelegation@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDelegation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDelegation@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R13?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BaseObject@Ogre@@8 DD FLAT:??_R0?AVBaseObject@Ogre@@@8 ; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R2BaseObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8 ; Ogre::BaseObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R3BaseObject@Ogre@@8 DD 00H				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBaseObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVBaseObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::BaseObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBaseObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BaseObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4BaseObject@Ogre@@6B@ DD 00H			; Ogre::BaseObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBaseObject@Ogre@@@8
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7BaseObject@Ogre@@6B@
CONST	SEGMENT
??_7BaseObject@Ogre@@6B@ DD FLAT:??_R4BaseObject@Ogre@@6B@ ; Ogre::BaseObject::`vftable'
	DD	FLAT:?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EBaseObject@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0BaseObject@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BaseObject@Ogre@@IAE@XZ PROC				; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx

; 92   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 1

; 93   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BaseObject@Ogre@@IAE@XZ ENDP				; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??1BaseObject@Ogre@@MAE@XZ			; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
;	COMDAT ??1BaseObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BaseObject@Ogre@@MAE@XZ PROC				; Ogre::BaseObject::~BaseObject, COMDAT
; _this$ = ecx

; 96   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1BaseObject@Ogre@@MAE@XZ ENDP				; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deleteThis@BaseObject@Ogre@@MAEXXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T66234 = -8						; size = 4
$T66233 = -4						; size = 4
?deleteThis@BaseObject@Ogre@@MAEXXZ PROC		; Ogre::BaseObject::deleteThis, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 			delete this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T66234[ebp], eax
	mov	ecx, DWORD PTR $T66234[ebp]
	mov	DWORD PTR $T66233[ebp], ecx
	cmp	DWORD PTR $T66233[ebp], 0
	je	SHORT $LN3@deleteThis
	push	1
	mov	edx, DWORD PTR $T66233[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T66233[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN1@deleteThis
$LN3@deleteThis:
	mov	DWORD PTR tv70[ebp], 0
$LN1@deleteThis:

; 102  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?deleteThis@BaseObject@Ogre@@MAEXXZ ENDP		; Ogre::BaseObject::deleteThis
_TEXT	ENDS
PUBLIC	??0BaseObject@Ogre@@QAE@ABV01@@Z		; Ogre::BaseObject::BaseObject
; Function compile flags: /Odtp
;	COMDAT ??0BaseObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0BaseObject@Ogre@@QAE@ABV01@@Z PROC			; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@BaseObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@BaseObject
$LN3@BaseObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@BaseObject:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BaseObject@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BaseObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BaseObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BaseObject::operator=
_TEXT	ENDS
PUBLIC	??_GBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`scalar deleting destructor'
EXTRN	??3MemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VMemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_EBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1BaseObject@Ogre@@MAE@XZ	; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z	; Ogre::FixedString::handle2Ptr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrefixedstring.h
;	COMDAT ?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z PROC		; Ogre::FixedString::handle2Ptr, COMDAT

; 22   : 		{

	push	ebp
	mov	ebp, esp

; 23   : 			return (const char *)h;

	mov	eax, DWORD PTR _h$[ebp]

; 24   : 		}

	pop	ebp
	ret	0
?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z ENDP		; Ogre::FixedString::handle2Ptr
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@XZ			; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FixedString@Ogre@@QAE@XZ PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 27   : 		FixedString() : m_StrHandle(NULL){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0FixedString@Ogre@@QAE@XZ ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PAX@Z			; Ogre::FixedString::FixedString
EXTRN	?addRef@FixedString@Ogre@@SAXPAX@Z:PROC		; Ogre::FixedString::addRef
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_h$ = 8							; size = 4
??0FixedString@Ogre@@QAE@PAX@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 29   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax], ecx

; 30   : 			addRef(h);

	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	call	?addRef@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::addRef
	add	esp, 4

; 31   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@PAX@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@ABV01@@Z		; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0FixedString@Ogre@@QAE@ABV01@@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 34   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 35   : 			addRef(m_StrHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?addRef@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::addRef
	add	esp, 4

; 36   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PBD@Z			; Ogre::FixedString::FixedString
EXTRN	?insert@FixedString@Ogre@@SAPAXPBDH@Z:PROC	; Ogre::FixedString::insert
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstr$ = 8						; size = 4
??0FixedString@Ogre@@QAE@PBD@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 38   : 		FixedString(const char *pstr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 		{
; 40   : 			m_StrHandle = insert(pstr); 

	push	-1
	mov	eax, DWORD PTR _pstr$[ebp]
	push	eax
	call	?insert@FixedString@Ogre@@SAPAXPBDH@Z	; Ogre::FixedString::insert
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 41   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@PBD@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PBDI@Z			; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstr$ = 8						; size = 4
_len$ = 12						; size = 4
??0FixedString@Ogre@@QAE@PBDI@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 43   : 		FixedString(const char *pstr, size_t len)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 		{
; 45   : 			m_StrHandle = insert(pstr, (int)len); 

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pstr$[ebp]
	push	ecx
	call	?insert@FixedString@Ogre@@SAPAXPBDH@Z	; Ogre::FixedString::insert
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 46   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0FixedString@Ogre@@QAE@PBDI@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??1FixedString@Ogre@@QAE@XZ			; Ogre::FixedString::~FixedString
EXTRN	?release@FixedString@Ogre@@SAXPAX@Z:PROC	; Ogre::FixedString::release
; Function compile flags: /Odtp
;	COMDAT ??1FixedString@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FixedString@Ogre@@QAE@XZ PROC			; Ogre::FixedString::~FixedString, COMDAT
; _this$ = ecx

; 49   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 			release(m_StrHandle); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?release@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::release
	add	esp, 4

; 51   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1FixedString@Ogre@@QAE@XZ ENDP			; Ogre::FixedString::~FixedString
_TEXT	ENDS
PUBLIC	??BFixedString@Ogre@@QBEPBDXZ			; Ogre::FixedString::operator char const *
; Function compile flags: /Odtp
;	COMDAT ??BFixedString@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BFixedString@Ogre@@QBEPBDXZ PROC			; Ogre::FixedString::operator char const *, COMDAT
; _this$ = ecx

; 54   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 			return handle2Ptr(m_StrHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z ; Ogre::FixedString::handle2Ptr
	add	esp, 4

; 56   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BFixedString@Ogre@@QBEPBDXZ ENDP			; Ogre::FixedString::operator char const *
_TEXT	ENDS
PUBLIC	?getHandle@FixedString@Ogre@@QBEPAXXZ		; Ogre::FixedString::getHandle
; Function compile flags: /Odtp
;	COMDAT ?getHandle@FixedString@Ogre@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHandle@FixedString@Ogre@@QBEPAXXZ PROC		; Ogre::FixedString::getHandle, COMDAT
; _this$ = ecx

; 59   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 			return m_StrHandle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 61   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getHandle@FixedString@Ogre@@QBEPAXXZ ENDP		; Ogre::FixedString::getHandle
_TEXT	ENDS
PUBLIC	?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ	; Ogre::Resource::getRTTI
EXTRN	?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B:BYTE	; Ogre::Resource::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreresource.h
;	COMDAT ?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::Resource::getRTTI, COMDAT
; _this$ = ecx

; 39   : 		DECLARE_RTTI_VIRTUAL(Resource)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B ; Ogre::Resource::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::Resource::getRTTI
_TEXT	ENDS
PUBLIC	?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ ; Ogre::Resource::getResPath
; Function compile flags: /Odtp
;	COMDAT ?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ PROC	; Ogre::Resource::getResPath, COMDAT
; _this$ = ecx

; 44   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 			return m_ResPath;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8

; 46   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ ENDP	; Ogre::Resource::getResPath
_TEXT	ENDS
PUBLIC	?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z ; Ogre::Resource::setResPath
EXTRN	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z:PROC	; Ogre::FixedString::operator=
; Function compile flags: /Odtp
;	COMDAT ?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_path$ = 8						; size = 4
?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z PROC	; Ogre::Resource::setResPath, COMDAT
; _this$ = ecx

; 48   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 			m_ResPath = path;

	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=

; 50   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z ENDP	; Ogre::Resource::setResPath
_TEXT	ENDS
PUBLIC	??_7Resource@Ogre@@6B@				; Ogre::Resource::`vftable'
PUBLIC	??0Resource@Ogre@@IAE@XZ			; Ogre::Resource::Resource
PUBLIC	??_R4Resource@Ogre@@6B@				; Ogre::Resource::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVResource@Ogre@@@8			; Ogre::Resource `RTTI Type Descriptor'
PUBLIC	??_R3Resource@Ogre@@8				; Ogre::Resource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Resource@Ogre@@8				; Ogre::Resource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Resource@Ogre@@8			; Ogre::Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EResource@Ogre@@MAEPAXI@Z			; Ogre::Resource::`vector deleting destructor'
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	?release@Resource@Ogre@@UAEXXZ:PROC		; Ogre::Resource::release
EXTRN	?addRef@Resource@Ogre@@UAEXXZ:PROC		; Ogre::Resource::addRef
EXTRN	?getRefCount@Resource@Ogre@@UAEHXZ:PROC		; Ogre::Resource::getRefCount
;	COMDAT ??_R1A@?0A@EA@Resource@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Resource@Ogre@@8 DD FLAT:??_R0?AVResource@Ogre@@@8 ; Ogre::Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Resource@Ogre@@8
rdata$r	SEGMENT
??_R2Resource@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Resource@Ogre@@8 ; Ogre::Resource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3Resource@Ogre@@8
rdata$r	SEGMENT
??_R3Resource@Ogre@@8 DD 00H				; Ogre::Resource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVResource@Ogre@@@8
_DATA	SEGMENT
??_R0?AVResource@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Resource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVResource@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Resource@Ogre@@6B@
rdata$r	SEGMENT
??_R4Resource@Ogre@@6B@ DD 00H				; Ogre::Resource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVResource@Ogre@@@8
	DD	FLAT:??_R3Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Resource@Ogre@@6B@
CONST	SEGMENT
??_7Resource@Ogre@@6B@ DD FLAT:??_R4Resource@Ogre@@6B@	; Ogre::Resource::`vftable'
	DD	FLAT:?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EResource@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Resource@Ogre@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@IAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@IAE@XZ$1
__ehfuncinfo$??0Resource@Ogre@@IAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Resource@Ogre@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Resource@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Resource@Ogre@@IAE@XZ PROC				; Ogre::Resource::Resource, COMDAT
; _this$ = ecx

; 72   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Resource@Ogre@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@IAE@XZ		; Ogre::BaseObject::BaseObject
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 1

; 73   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Resource@Ogre@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0Resource@Ogre@@IAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0Resource@Ogre@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Resource@Ogre@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Resource@Ogre@@IAE@XZ ENDP				; Ogre::Resource::Resource
PUBLIC	??1Resource@Ogre@@MAE@XZ			; Ogre::Resource::~Resource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Resource@Ogre@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Resource@Ogre@@MAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1Resource@Ogre@@MAE@XZ$1
__ehfuncinfo$??1Resource@Ogre@@MAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1Resource@Ogre@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1Resource@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Resource@Ogre@@MAE@XZ PROC				; Ogre::Resource::~Resource, COMDAT
; _this$ = ecx

; 76   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Resource@Ogre@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 77   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Resource@Ogre@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??1Resource@Ogre@@MAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??1Resource@Ogre@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Resource@Ogre@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Resource@Ogre@@MAE@XZ ENDP				; Ogre::Resource::~Resource
PUBLIC	??0Resource@Ogre@@QAE@ABV01@@Z			; Ogre::Resource::Resource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Resource@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$1
__ehfuncinfo$??0Resource@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Resource@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Resource@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Resource@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Resource::Resource, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Resource@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7Resource@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0FixedString@Ogre@@QAE@ABV01@@Z	; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0Resource@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Resource@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Resource@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Resource::Resource
PUBLIC	??4Resource@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Resource::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Resource@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Resource@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::Resource::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Resource@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::Resource::operator=
_TEXT	ENDS
PUBLIC	??_GResource@Ogre@@MAEPAXI@Z			; Ogre::Resource::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GResource@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GResource@Ogre@@MAEPAXI@Z PROC			; Ogre::Resource::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GResource@Ogre@@MAEPAXI@Z ENDP			; Ogre::Resource::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EResource@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EResource@Ogre@@MAEPAXI@Z PROC			; Ogre::Resource::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@2
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EResource@Ogre@@MAEPAXI@Z ENDP			; Ogre::Resource::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7DataStream@Ogre@@6B@			; Ogre::DataStream::`vftable'
PUBLIC	??0DataStream@Ogre@@QAE@XZ			; Ogre::DataStream::DataStream
PUBLIC	??_R4DataStream@Ogre@@6B@			; Ogre::DataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStream@Ogre@@@8			; Ogre::DataStream `RTTI Type Descriptor'
PUBLIC	??_R3DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStream@Ogre@@8		; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`vector deleting destructor'
PUBLIC	?size@DataStream@Ogre@@UBEIXZ			; Ogre::DataStream::size
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__purecall:PROC
EXTRN	?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::readLine
EXTRN	?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; Ogre::DataStream::getLine
EXTRN	?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; Ogre::DataStream::getAsString
EXTRN	?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::skipLine
;	COMDAT ??_R1A@?0A@EA@DataStream@Ogre@@8
; File i:\svnroot\client\ogremain\ogredatastream.h
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStream@Ogre@@8 DD FLAT:??_R0?AVDataStream@Ogre@@@8 ; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStream@Ogre@@8
rdata$r	SEGMENT
??_R2DataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8 ; Ogre::DataStream::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStream@Ogre@@8
rdata$r	SEGMENT
??_R3DataStream@Ogre@@8 DD 00H				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::DataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStream@Ogre@@6B@ DD 00H			; Ogre::DataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStream@Ogre@@@8
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStream@Ogre@@6B@
CONST	SEGMENT
??_7DataStream@Ogre@@6B@ DD FLAT:??_R4DataStream@Ogre@@6B@ ; Ogre::DataStream::`vftable'
	DD	FLAT:??_EDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0DataStream@Ogre@@QAE@XZ PROC				; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 68   : 		DataStream() : mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@XZ ENDP				; Ogre::DataStream::DataStream
PUBLIC	??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Ogre::DataStream::DataStream
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 70   : 		DataStream(const String& name) : mName(name), mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Ogre::DataStream::DataStream
PUBLIC	?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Ogre::DataStream::getName
; Function compile flags: /Odtp
;	COMDAT ?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Ogre::DataStream::getName, COMDAT
; _this$ = ecx

; 72   : 		const String& getName(void) { return mName; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Ogre::DataStream::getName
_TEXT	ENDS
PUBLIC	??1DataStream@Ogre@@UAE@XZ			; Ogre::DataStream::~DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1DataStream@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0
__ehfuncinfo$??1DataStream@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1DataStream@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1DataStream@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DataStream@Ogre@@UAE@XZ PROC				; Ogre::DataStream::~DataStream, COMDAT
; _this$ = ecx

; 73   : 		virtual ~DataStream() {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1DataStream@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1DataStream@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1DataStream@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1DataStream@Ogre@@UAE@XZ ENDP				; Ogre::DataStream::~DataStream
; Function compile flags: /Odtp
;	COMDAT ?size@DataStream@Ogre@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@DataStream@Ogre@@UBEIXZ PROC			; Ogre::DataStream::size, COMDAT
; _this$ = ecx

; 157  : 		virtual size_t size(void) const { return mSize; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?size@DataStream@Ogre@@UBEIXZ ENDP			; Ogre::DataStream::size
_TEXT	ENDS
PUBLIC	??0DataStream@Ogre@@QAE@ABV01@@Z		; Ogre::DataStream::DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV01@@Z PROC			; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::DataStream::DataStream
PUBLIC	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::DataStream::operator=
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::DataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::DataStream::operator=
_TEXT	ENDS
PUBLIC	??_GDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`scalar deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp
;	COMDAT ??_EDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1DataStream@Ogre@@UAE@XZ	; Ogre::DataStream::~DataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	36					; 00000024H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@3
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ		; Ogre::MemoryDataStream::getPtr
; Function compile flags: /Odtp
;	COMDAT ?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC		; Ogre::MemoryDataStream::getPtr, COMDAT
; _this$ = ecx

; 267  : 		uchar* getPtr(void) { return mData; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP		; Ogre::MemoryDataStream::getPtr
_TEXT	ENDS
PUBLIC	?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ	; Ogre::MemoryDataStream::getCurrentPtr
; Function compile flags: /Odtp
;	COMDAT ?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC	; Ogre::MemoryDataStream::getCurrentPtr, COMDAT
; _this$ = ecx

; 270  : 		uchar* getCurrentPtr(void) { return mPos; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP	; Ogre::MemoryDataStream::getCurrentPtr
_TEXT	ENDS
PUBLIC	?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ	; Ogre::MemoryDataStream::getMemoryImage
; Function compile flags: /Odtp
;	COMDAT ?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ PROC	; Ogre::MemoryDataStream::getMemoryImage, COMDAT
; _this$ = ecx

; 307  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 			return mData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]

; 309  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ ENDP	; Ogre::MemoryDataStream::getMemoryImage
_TEXT	ENDS
PUBLIC	?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ; Ogre::MemoryDataStream::setFreeOnClose
; Function compile flags: /Odtp
;	COMDAT ?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_freeOnClose$ = 8					; size = 4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z PROC ; Ogre::MemoryDataStream::setFreeOnClose, COMDAT
; _this$ = ecx

; 313  : 		void setFreeOnClose(void (*freeOnClose)(void *)) { mFreeOnClose = freeOnClose; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _freeOnClose$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ENDP ; Ogre::MemoryDataStream::setFreeOnClose
_TEXT	ENDS
PUBLIC	??_7MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`vftable'
PUBLIC	??0MemoryDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??_R4MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMemoryDataStream@Ogre@@@8		; Ogre::MemoryDataStream `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDataStream@Ogre@@8		; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`vector deleting destructor'
EXTRN	?read@MemoryDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::MemoryDataStream::read
EXTRN	?write@MemoryDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::MemoryDataStream::write
EXTRN	?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::readLine
EXTRN	?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::skipLine
EXTRN	?skip@MemoryDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::MemoryDataStream::skip
EXTRN	?seek@MemoryDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::MemoryDataStream::seek
EXTRN	?tell@MemoryDataStream@Ogre@@UBEIXZ:PROC	; Ogre::MemoryDataStream::tell
EXTRN	?eof@MemoryDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::MemoryDataStream::eof
EXTRN	?close@MemoryDataStream@Ogre@@UAEXXZ:PROC	; Ogre::MemoryDataStream::close
;	COMDAT ??_R1A@?0A@EA@MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 DD FLAT:??_R0?AVMemoryDataStream@Ogre@@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDataStream@Ogre@@8 DD 00H			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MemoryDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4MemoryDataStream@Ogre@@6B@ DD 00H			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMemoryDataStream@Ogre@@@8
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7MemoryDataStream@Ogre@@6B@
CONST	SEGMENT
??_7MemoryDataStream@Ogre@@6B@ DD FLAT:??_R4MemoryDataStream@Ogre@@6B@ ; Ogre::MemoryDataStream::`vftable'
	DD	FLAT:??_EMemoryDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@MemoryDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@MemoryDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@MemoryDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@MemoryDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@MemoryDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@MemoryDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@MemoryDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::MemoryDataStream::MemoryDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7MemoryDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+44], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+48], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+44], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+48], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`scalar deleting destructor'
EXTRN	??1MemoryDataStream@Ogre@@UAE@XZ:PROC		; Ogre::MemoryDataStream::~MemoryDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@4
	push	OFFSET ??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@4
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@4
$LN3@vector@4:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@4:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`vftable'
PUBLIC	??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??_R4FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileStreamDataStream@Ogre@@@8		; Ogre::FileStreamDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8	; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`vector deleting destructor'
EXTRN	?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileStreamDataStream::read
EXTRN	?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileStreamDataStream::write
EXTRN	?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::FileStreamDataStream::readLine
EXTRN	?skip@FileStreamDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileStreamDataStream::skip
EXTRN	?seek@FileStreamDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileStreamDataStream::seek
EXTRN	?tell@FileStreamDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileStreamDataStream::tell
EXTRN	?eof@FileStreamDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileStreamDataStream::eof
EXTRN	?close@FileStreamDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileStreamDataStream::close
EXTRN	?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileStreamDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 DD FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileStreamDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileStreamDataStream@Ogre@@8 DD 00H		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileStreamDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileStreamDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileStreamDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileStreamDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileStreamDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileStreamDataStream@Ogre@@6B@ DD 00H		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileStreamDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileStreamDataStream@Ogre@@6B@ DD FLAT:??_R4FileStreamDataStream@Ogre@@6B@ ; Ogre::FileStreamDataStream::`vftable'
	DD	FLAT:??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileStreamDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileStreamDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileStreamDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileStreamDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileStreamDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileStreamDataStream::FileStreamDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileStreamDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+40]
	mov	BYTE PTR [edx+40], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileStreamDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileStreamDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+40]
	mov	BYTE PTR [ecx+40], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileStreamDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`scalar deleting destructor'
EXTRN	??1FileStreamDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileStreamDataStream::~FileStreamDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@5
	push	OFFSET ??1FileStreamDataStream@Ogre@@UAE@XZ ; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@5
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@5
$LN3@vector@5:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@5:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`vftable'
PUBLIC	??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??_R4FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileHandleDataStream@Ogre@@@8		; Ogre::FileHandleDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8	; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`vector deleting destructor'
EXTRN	?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileHandleDataStream::read
EXTRN	?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileHandleDataStream::write
EXTRN	?skip@FileHandleDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileHandleDataStream::skip
EXTRN	?seek@FileHandleDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileHandleDataStream::seek
EXTRN	?tell@FileHandleDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileHandleDataStream::tell
EXTRN	?eof@FileHandleDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileHandleDataStream::eof
EXTRN	?close@FileHandleDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileHandleDataStream::close
EXTRN	?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileHandleDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 DD FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileHandleDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileHandleDataStream@Ogre@@8 DD 00H		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileHandleDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileHandleDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileHandleDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileHandleDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileHandleDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileHandleDataStream@Ogre@@6B@ DD 00H		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileHandleDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileHandleDataStream@Ogre@@6B@ DD FLAT:??_R4FileHandleDataStream@Ogre@@6B@ ; Ogre::FileHandleDataStream::`vftable'
	DD	FLAT:??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileHandleDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileHandleDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileHandleDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileHandleDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileHandleDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileHandleDataStream::FileHandleDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileHandleDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileHandleDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileHandleDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileHandleDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`scalar deleting destructor'
EXTRN	??1FileHandleDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileHandleDataStream::~FileHandleDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@6
	push	OFFSET ??1FileHandleDataStream@Ogre@@UAE@XZ ; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@6
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@6
$LN3@vector@6:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@6:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`vftable'
PUBLIC	??1DataStreamObject@Ogre@@MAE@XZ		; Ogre::DataStreamObject::~DataStreamObject
PUBLIC	??_R4DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStreamObject@Ogre@@@8		; Ogre::DataStreamObject `RTTI Type Descriptor'
PUBLIC	??_R3DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStreamObject@Ogre@@8		; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStreamObject@Ogre@@8 DD FLAT:??_R0?AVDataStreamObject@Ogre@@@8 ; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R2DataStreamObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStreamObject@Ogre@@8 ; Ogre::DataStreamObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R3DataStreamObject@Ogre@@8 DD 00H			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStreamObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStreamObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::DataStreamObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStreamObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStreamObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStreamObject@Ogre@@6B@ DD 00H			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStreamObject@Ogre@@@8
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStreamObject@Ogre@@6B@
CONST	SEGMENT
??_7DataStreamObject@Ogre@@6B@ DD FLAT:??_R4DataStreamObject@Ogre@@6B@ ; Ogre::DataStreamObject::`vftable'
	DD	FLAT:??_EDataStreamObject@Ogre@@MAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??1DataStreamObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DataStreamObject@Ogre@@MAE@XZ PROC			; Ogre::DataStreamObject::~DataStreamObject, COMDAT
; _this$ = ecx

; 445  : 		virtual ~DataStreamObject(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1DataStreamObject@Ogre@@MAE@XZ ENDP			; Ogre::DataStreamObject::~DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@XZ		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DataStreamObject@Ogre@@QAE@XZ PROC			; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DataStreamObject@Ogre@@QAE@XZ ENDP			; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@ABV01@@Z		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z PROC		; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::DataStreamObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::DataStreamObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::DataStreamObject::operator=
_TEXT	ENDS
PUBLIC	??_GDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@7
	push	OFFSET ??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@7
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@7
$LN3@vector@7:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@7:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`vftable'
PUBLIC	??0ObjectDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??_R4ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVObjectDataStream@Ogre@@@8		; Ogre::ObjectDataStream `RTTI Type Descriptor'
PUBLIC	??_R3ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ObjectDataStream@Ogre@@8		; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`vector deleting destructor'
EXTRN	?read@ObjectDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::ObjectDataStream::read
EXTRN	?write@ObjectDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::ObjectDataStream::write
EXTRN	?skip@ObjectDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::ObjectDataStream::skip
EXTRN	?seek@ObjectDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::ObjectDataStream::seek
EXTRN	?tell@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::tell
EXTRN	?eof@ObjectDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::ObjectDataStream::eof
EXTRN	?size@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::size
EXTRN	?close@ObjectDataStream@Ogre@@UAEXXZ:PROC	; Ogre::ObjectDataStream::close
EXTRN	?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::ObjectDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 DD FLAT:??_R0?AVObjectDataStream@Ogre@@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2ObjectDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3ObjectDataStream@Ogre@@8 DD 00H			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVObjectDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVObjectDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::ObjectDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVObjectDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ObjectDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4ObjectDataStream@Ogre@@6B@ DD 00H			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVObjectDataStream@Ogre@@@8
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7ObjectDataStream@Ogre@@6B@
CONST	SEGMENT
??_7ObjectDataStream@Ogre@@6B@ DD FLAT:??_R4ObjectDataStream@Ogre@@6B@ ; Ogre::ObjectDataStream::`vftable'
	DD	FLAT:??_EObjectDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@ObjectDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@ObjectDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@ObjectDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@ObjectDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@ObjectDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@ObjectDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::ObjectDataStream::ObjectDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ObjectDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::ObjectDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::ObjectDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::ObjectDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`scalar deleting destructor'
EXTRN	??1ObjectDataStream@Ogre@@UAE@XZ:PROC		; Ogre::ObjectDataStream::~ObjectDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@8
	push	OFFSET ??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@8
$LN3@vector@8:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@8:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Archive@Ogre@@6B@				; Ogre::Archive::`vftable'
PUBLIC	??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z	; Ogre::Archive::Archive
PUBLIC	??_R4Archive@Ogre@@6B@				; Ogre::Archive::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVArchive@Ogre@@@8			; Ogre::Archive `RTTI Type Descriptor'
PUBLIC	??_R3Archive@Ogre@@8				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Archive@Ogre@@8				; Ogre::Archive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Archive@Ogre@@8			; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Archive@Ogre@@8
; File i:\svnroot\client\ogremain\ogrearchive.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Archive@Ogre@@8 DD FLAT:??_R0?AVArchive@Ogre@@@8 ; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Archive@Ogre@@8
rdata$r	SEGMENT
??_R2Archive@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Archive@Ogre@@8 ; Ogre::Archive::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Archive@Ogre@@8
rdata$r	SEGMENT
??_R3Archive@Ogre@@8 DD 00H				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVArchive@Ogre@@@8
_DATA	SEGMENT
??_R0?AVArchive@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Archive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArchive@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Archive@Ogre@@6B@
rdata$r	SEGMENT
??_R4Archive@Ogre@@6B@ DD 00H				; Ogre::Archive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArchive@Ogre@@@8
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Archive@Ogre@@6B@
CONST	SEGMENT
??_7Archive@Ogre@@6B@ DD FLAT:??_R4Archive@Ogre@@6B@	; Ogre::Archive::`vftable'
	DD	FLAT:??_EArchive@Ogre@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstream$ = 8						; size = 4
_mode$ = 12						; size = 4
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z PROC		; Ogre::Archive::Archive, COMDAT
; _this$ = ecx

; 22   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pstream$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 23   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z ENDP		; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??1Archive@Ogre@@UAE@XZ				; Ogre::Archive::~Archive
; Function compile flags: /Odtp
;	COMDAT ??1Archive@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Archive@Ogre@@UAE@XZ PROC				; Ogre::Archive::~Archive, COMDAT
; _this$ = ecx

; 26   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1Archive@Ogre@@UAE@XZ ENDP				; Ogre::Archive::~Archive
_TEXT	ENDS
PUBLIC	?isLoading@Archive@Ogre@@QAE_NXZ		; Ogre::Archive::isLoading
; Function compile flags: /Odtp
;	COMDAT ?isLoading@Archive@Ogre@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isLoading@Archive@Ogre@@QAE_NXZ PROC			; Ogre::Archive::isLoading, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Mode==MODE_LOAD;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+8], 1
	sete	cl
	mov	al, cl

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?isLoading@Archive@Ogre@@QAE_NXZ ENDP			; Ogre::Archive::isLoading
_TEXT	ENDS
PUBLIC	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z	; Ogre::Archive::serialize
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAD@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAD@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 108  : 		SERIALIZE_PRIMITIVE_FUNC(char)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAD@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAF@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAF@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 109  : 		SERIALIZE_PRIMITIVE_FUNC(short)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAF@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAH@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAH@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 110  : 		SERIALIZE_PRIMITIVE_FUNC(int)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAH@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_J@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_J@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 111  : 		SERIALIZE_PRIMITIVE_FUNC(int64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_J@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAE@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAE@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 112  : 		SERIALIZE_PRIMITIVE_FUNC(uchar)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAE@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAG@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAG@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 113  : 		SERIALIZE_PRIMITIVE_FUNC(ushort)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAG@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAI@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAI@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 114  : 		SERIALIZE_PRIMITIVE_FUNC(uint)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAI@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_K@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_K@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 115  : 		SERIALIZE_PRIMITIVE_FUNC(uint64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_K@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_N@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_N@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 116  : 		SERIALIZE_PRIMITIVE_FUNC(bool)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_N@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAM@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAM@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 117  : 		SERIALIZE_PRIMITIVE_FUNC(float)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAM@Z ENDP			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z PROC		; Ogre::Archive::serialize, COMDAT
; _this$ = ecx

; 155  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 			if(isLoading()) m_pStream->read(pbuf, len);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@serialize
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	jmp	SHORT $LN1@serialize
$LN2@serialize:

; 157  : 			else m_pStream->write(pbuf, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN1@serialize:

; 158  : 
; 159  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 160  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ENDP		; Ogre::Archive::serialize
_TEXT	ENDS
PUBLIC	?read@Archive@Ogre@@QAEXPAXI@Z			; Ogre::Archive::read
; Function compile flags: /Odtp
;	COMDAT ?read@Archive@Ogre@@QAEXPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?read@Archive@Ogre@@QAEXPAXI@Z PROC			; Ogre::Archive::read, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			m_pStream->read(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 165  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?read@Archive@Ogre@@QAEXPAXI@Z ENDP			; Ogre::Archive::read
_TEXT	ENDS
PUBLIC	?write@Archive@Ogre@@QAEXPBXI@Z			; Ogre::Archive::write
; Function compile flags: /Odtp
;	COMDAT ?write@Archive@Ogre@@QAEXPBXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?write@Archive@Ogre@@QAEXPBXI@Z PROC			; Ogre::Archive::write, COMDAT
; _this$ = ecx

; 168  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 			m_pStream->write(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 170  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?write@Archive@Ogre@@QAEXPBXI@Z ENDP			; Ogre::Archive::write
_TEXT	ENDS
PUBLIC	??0Archive@Ogre@@QAE@ABV01@@Z			; Ogre::Archive::Archive
; Function compile flags: /Odtp
;	COMDAT ??0Archive@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Archive@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Archive::Archive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Archive@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??4Archive@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Archive::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Archive@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Archive::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Archive::operator=
_TEXT	ENDS
PUBLIC	??_GArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@9
	push	OFFSET ??1Archive@Ogre@@UAE@XZ		; Ogre::Archive::~Archive
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@9
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@9:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@9
$LN3@vector@9:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@9:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@9:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@XZ				; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ??0Vector3@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector3@Ogre@@QAE@XZ PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 49   : 		Vector3(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@Ogre@@QAE@XZ ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@ABV01@@Z			; Ogre::Vector3::Vector3
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0Vector3@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 50   : 		Vector3(const Vector3 &rhs)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		{
; 52   : 			x = rhs.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 53   : 			y = rhs.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 54   : 			z = rhs.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 55   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@MMM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
??0Vector3@Ogre@@QAE@MMM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 56   : 		Vector3( float x1, float y1, float z1 ) : x(x1), y(y1), z(z1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector3@Ogre@@QAE@MMM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@M@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@M@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 57   : 		Vector3(float v) : x(v), y(v), z(v){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@M@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@PAM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@PAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@PAM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 58   : 		Vector3(float* v) : x(v[0]), y(v[1]), z(v[2]){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@PAM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??4Vector3@Ogre@@QAEABV01@ABV01@@Z		; Ogre::Vector3::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Vector3@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z PROC			; Ogre::Vector3::operator=, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			x = vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 63   : 			y = vec.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 64   : 			z = vec.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 65   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 66   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z ENDP			; Ogre::Vector3::operator=
_TEXT	ENDS
PUBLIC	??YVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??YVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator+=, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			x += vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 70   : 			y += vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 71   : 			z += vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 72   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator+=
_TEXT	ENDS
PUBLIC	??ZVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??ZVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator-=, COMDAT
; _this$ = ecx

; 74   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 			x -= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 76   : 			y -= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 77   : 			z -= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 78   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator-=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XVector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 81   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 			x *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 83   : 			y *= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 84   : 			z *= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 85   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??XVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 88   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 			x *= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 90   : 			y *= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 91   : 			z *= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 92   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??_0Vector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator/=
; Function compile flags: /Odtp
;	COMDAT ??_0Vector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??_0Vector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator/=, COMDAT
; _this$ = ecx

; 95   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 			x /= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 97   : 			y /= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fdiv	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 98   : 			z /= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fdiv	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 99   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??_0Vector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator/=
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QAEPAMXZ			; Ogre::Vector3::operator float *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QAEPAMXZ PROC				; Ogre::Vector3::operator float *, COMDAT
; _this$ = ecx

; 101  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 103  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QAEPAMXZ ENDP				; Ogre::Vector3::operator float *
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QBEPBMXZ			; Ogre::Vector3::operator float const *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QBEPBMXZ PROC				; Ogre::Vector3::operator float const *, COMDAT
; _this$ = ecx

; 105  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 107  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QBEPBMXZ ENDP				; Ogre::Vector3::operator float const *
_TEXT	ENDS
PUBLIC	??HVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator+
; Function compile flags: /Odtp
;	COMDAT ??HVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??HVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator+, COMDAT
; _this$ = ecx

; 109  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??HVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator+
_TEXT	ENDS
PUBLIC	??GVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator-
; Function compile flags: /Odtp
;	COMDAT ??GVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??GVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator-, COMDAT
; _this$ = ecx

; 113  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 			return Vector3(-x, -y, -z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 115  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??GVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator-
_TEXT	ENDS
PUBLIC	??8Vector3@Ogre@@QBE_NABV01@@Z			; Ogre::Vector3::operator==
; Function compile flags: /Odtp
;	COMDAT ??8Vector3@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??8Vector3@Ogre@@QBE_NABV01@@Z PROC			; Ogre::Vector3::operator==, COMDAT
; _this$ = ecx

; 117  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 			return (x==vec.x && y==vec.y && z==vec.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv77[ebp]

; 119  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector3@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::Vector3::operator==
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXMMM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
?setElement@Vector3@Ogre@@QAEXMMM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			x = x1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]

; 123  : 			y = y1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]

; 124  : 			z = z1;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]

; 125  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setElement@Vector3@Ogre@@QAEXMMM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXPAM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXPAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?setElement@Vector3@Ogre@@QAEXPAM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 127  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 			x = p[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 129  : 			y = p[1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 130  : 			z = p[2];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 131  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setElement@Vector3@Ogre@@QAEXPAM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?Sqrt@Ogre@@YAMM@Z				; Ogre::Sqrt
PUBLIC	?length@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::length
; Function compile flags: /Odtp
;	COMDAT ?length@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?length@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::length, COMDAT
; _this$ = ecx

; 133  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 			return (float)Sqrt(x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@Ogre@@YAMM@Z			; Ogre::Sqrt
	add	esp, 4

; 135  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::length
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
;	COMDAT ?Sqrt@Ogre@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Sqrt@Ogre@@YAMM@Z PROC					; Ogre::Sqrt, COMDAT

; 59   : 	{

	push	ebp
	mov	ebp, esp

; 60   : 		return (float)sqrt(x);

	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 61   : 	}

	pop	ebp
	ret	0
?Sqrt@Ogre@@YAMM@Z ENDP					; Ogre::Sqrt
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?lengthSqr@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::lengthSqr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ?lengthSqr@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?lengthSqr@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::lengthSqr, COMDAT
; _this$ = ecx

; 137  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 			return (x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]

; 139  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?lengthSqr@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::lengthSqr
_TEXT	ENDS
PUBLIC	??0BoxBound@Ogre@@QAE@XZ			; Ogre::BoxBound::BoxBound
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebounding.h
;	COMDAT ??0BoxBound@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BoxBound@Ogre@@QAE@XZ PROC				; Ogre::BoxBound::BoxBound, COMDAT
; _this$ = ecx

; 14   : 		BoxBound() : m_isValid(false){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BoxBound@Ogre@@QAE@XZ ENDP				; Ogre::BoxBound::BoxBound
_TEXT	ENDS
PUBLIC	??0BoxBound@Ogre@@QAE@ABVVector3@1@0@Z		; Ogre::BoxBound::BoxBound
; Function compile flags: /Odtp
;	COMDAT ??0BoxBound@Ogre@@QAE@ABVVector3@1@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_minpos$ = 8						; size = 4
_maxpos$ = 12						; size = 4
??0BoxBound@Ogre@@QAE@ABVVector3@1@0@Z PROC		; Ogre::BoxBound::BoxBound, COMDAT
; _this$ = ecx

; 15   : 		BoxBound(const Vector3 &minpos, const Vector3 &maxpos) : m_MinPos(minpos), m_MaxPos(maxpos), m_isValid(true){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _minpos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _maxpos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+24], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0BoxBound@Ogre@@QAE@ABVVector3@1@0@Z ENDP		; Ogre::BoxBound::BoxBound
_TEXT	ENDS
PUBLIC	??0BoxBound@Ogre@@QAE@ABV01@@Z			; Ogre::BoxBound::BoxBound
; Function compile flags: /Odtp
;	COMDAT ??0BoxBound@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0BoxBound@Ogre@@QAE@ABV01@@Z PROC			; Ogre::BoxBound::BoxBound, COMDAT
; _this$ = ecx

; 16   : 		BoxBound(const BoxBound &rhs) : m_MinPos(rhs.m_MinPos), m_MaxPos(rhs.m_MaxPos), m_isValid(rhs.m_isValid){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	cl, BYTE PTR [eax+24]
	mov	BYTE PTR [edx+24], cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BoxBound@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::BoxBound::BoxBound
_TEXT	ENDS
PUBLIC	??$Max@M@Ogre@@YAMABM0@Z			; Ogre::Max<float>
PUBLIC	??$Min@M@Ogre@@YAMABM0@Z			; Ogre::Min<float>
PUBLIC	??YBoxBound@Ogre@@QAEAAV01@ABVVector3@1@@Z	; Ogre::BoxBound::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YBoxBound@Ogre@@QAEAAV01@ABVVector3@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Other$ = 8						; size = 4
??YBoxBound@Ogre@@QAEAAV01@ABVVector3@1@@Z PROC		; Ogre::BoxBound::operator+=, COMDAT
; _this$ = ecx

; 19   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 20   : 			if( m_isValid )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	$LN2@operator@2

; 21   : 			{
; 22   : #if ASM_x86
; 23   : 				__asm
; 24   : 				{
; 25   : 						mov		eax,[Other]
; 26   : 						mov		ecx,[this]
; 27   : 
; 28   : 						movss	xmm3,[eax]Vector3.x
; 29   : 						movss	xmm4,[eax]Vector3.y
; 30   : 						movss	xmm5,[eax]Vector3.z
; 31   : 
; 32   : 						movss	xmm0,[ecx]BoxBound.m_MinPos.x
; 33   : 						movss	xmm1,[ecx]BoxBound.m_MinPos.y
; 34   : 						movss	xmm2,[ecx]BoxBound.m_MinPos.z
; 35   : 						minss	xmm0,xmm3
; 36   : 						minss	xmm1,xmm4
; 37   : 						minss	xmm2,xmm5
; 38   : 						movss	[ecx]BoxBound.m_MinPos.x,xmm0
; 39   : 						movss	[ecx]BoxBound.m_MinPos.y,xmm1
; 40   : 						movss	[ecx]BoxBound.m_MinPos.z,xmm2
; 41   : 
; 42   : 						movss	xmm0,[ecx]BoxBound.m_MaxPos.x
; 43   : 						movss	xmm1,[ecx]BoxBound.m_MaxPos.y
; 44   : 						movss	xmm2,[ecx]BoxBound.m_MaxPos.z
; 45   : 						maxss	xmm0,xmm3
; 46   : 						maxss	xmm1,xmm4
; 47   : 						maxss	xmm2,xmm5
; 48   : 						movss	[ecx]BoxBound.m_MaxPos.x,xmm0
; 49   : 						movss	[ecx]BoxBound.m_MaxPos.y,xmm1
; 50   : 						movss	[ecx]BoxBound.m_MaxPos.z,xmm2
; 51   : 				}
; 52   : #else
; 53   : 				m_MinPos.x = Min( m_MinPos.x, Other.x );

	mov	edx, DWORD PTR _Other$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 54   : 				m_MinPos.y = Min( m_MinPos.y, Other.y );

	mov	edx, DWORD PTR _Other$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 55   : 				m_MinPos.z = Min( m_MinPos.z, Other.z );

	mov	edx, DWORD PTR _Other$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 56   : 
; 57   : 				m_MaxPos.x = Max( m_MaxPos.x, Other.x );

	mov	edx, DWORD PTR _Other$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 58   : 				m_MaxPos.y = Max( m_MaxPos.y, Other.y );

	mov	edx, DWORD PTR _Other$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+16]

; 59   : 				m_MaxPos.z = Max( m_MaxPos.z, Other.z );

	mov	edx, DWORD PTR _Other$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+20]

; 60   : #endif
; 61   : 			}
; 62   : 			else

	jmp	SHORT $LN1@operator@2
$LN2@operator@2:

; 63   : 			{
; 64   : 				m_MinPos = m_MaxPos = Other;

	mov	edx, DWORD PTR _Other$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 65   : 				m_isValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 1
$LN1@operator@2:

; 66   : 			}
; 67   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 68   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YBoxBound@Ogre@@QAEAAV01@ABVVector3@1@@Z ENDP		; Ogre::BoxBound::operator+=
_TEXT	ENDS
PUBLIC	??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BoxBound::operator=
PUBLIC	??YBoxBound@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BoxBound::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YBoxBound@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Other$ = 8						; size = 4
??YBoxBound@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BoxBound::operator+=, COMDAT
; _this$ = ecx

; 71   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 72   : 			if( m_isValid && Other.m_isValid )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	$LN3@operator@3
	mov	edx, DWORD PTR _Other$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	je	$LN3@operator@3

; 73   : 			{
; 74   : #if ASM_X86
; 75   : 				__asm
; 76   : 				{
; 77   : 						mov		eax,[Other]
; 78   : 						mov		ecx,[this]
; 79   : 
; 80   : 						movss	xmm0,[ecx]BoxBound.m_MinPos.x
; 81   : 						movss	xmm1,[ecx]BoxBound.m_MinPos.y
; 82   : 						movss	xmm2,[ecx]BoxBound.m_MinPos.z
; 83   : 						minss	xmm0,[eax]BoxBound.m_MinPos.x
; 84   : 						minss	xmm1,[eax]BoxBound.m_MinPos.y
; 85   : 						minss	xmm2,[eax]BoxBound.m_MinPos.z
; 86   : 						movss	[ecx]BoxBound.m_MinPos.x,xmm0
; 87   : 						movss	[ecx]BoxBound.m_MinPos.y,xmm1
; 88   : 						movss	[ecx]BoxBound.m_MinPos.z,xmm2
; 89   : 
; 90   : 						movss	xmm0,[ecx]BoxBound.m_MaxPos.x
; 91   : 						movss	xmm1,[ecx]BoxBound.m_MaxPos.y
; 92   : 						movss	xmm2,[ecx]BoxBound.m_MaxPos.z
; 93   : 						maxss	xmm0,[eax]BoxBound.m_MaxPos.x
; 94   : 						maxss	xmm1,[eax]BoxBound.m_MaxPos.y
; 95   : 						maxss	xmm2,[eax]BoxBound.m_MaxPos.z
; 96   : 						movss	[ecx]BoxBound.m_MaxPos.x,xmm0
; 97   : 						movss	[ecx]BoxBound.m_MaxPos.y,xmm1
; 98   : 						movss	[ecx]BoxBound.m_MaxPos.z,xmm2
; 99   : 				}
; 100  : #else
; 101  : 				m_MinPos.x = Min( m_MinPos.x, Other.m_MinPos.x );

	mov	ecx, DWORD PTR _Other$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax]

; 102  : 				m_MinPos.y = Min( m_MinPos.y, Other.m_MinPos.y );

	mov	ecx, DWORD PTR _Other$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 103  : 				m_MinPos.z = Min( m_MinPos.z, Other.m_MinPos.z );

	mov	ecx, DWORD PTR _Other$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8]

; 104  : 
; 105  : 				m_MaxPos.x = Max( m_MaxPos.x, Other.m_MaxPos.x );

	mov	ecx, DWORD PTR _Other$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+12]

; 106  : 				m_MaxPos.y = Max( m_MaxPos.y, Other.m_MaxPos.y );

	mov	ecx, DWORD PTR _Other$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+16]

; 107  : 				m_MaxPos.z = Max( m_MaxPos.z, Other.m_MaxPos.z );

	mov	ecx, DWORD PTR _Other$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+20]
	jmp	SHORT $LN1@operator@3
$LN3@operator@3:

; 108  : #endif
; 109  : 			}
; 110  : 			else if( Other.m_isValid )

	mov	ecx, DWORD PTR _Other$[ebp]
	movzx	edx, BYTE PTR [ecx+24]
	test	edx, edx
	je	SHORT $LN1@operator@3

; 111  : 			{
; 112  : 				*this = Other;

	mov	eax, DWORD PTR _Other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z
$LN1@operator@3:

; 113  : 			}
; 114  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 115  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YBoxBound@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BoxBound::operator+=
_TEXT	ENDS
PUBLIC	?setRange@BoxBound@Ogre@@QAEXABVVector3@2@0@Z	; Ogre::BoxBound::setRange
; Function compile flags: /Odtp
;	COMDAT ?setRange@BoxBound@Ogre@@QAEXABVVector3@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_minpt$ = 8						; size = 4
_maxpt$ = 12						; size = 4
?setRange@BoxBound@Ogre@@QAEXABVVector3@2@0@Z PROC	; Ogre::BoxBound::setRange, COMDAT
; _this$ = ecx

; 118  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 119  : 			m_MinPos = minpt;

	mov	eax, DWORD PTR _minpt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 120  : 			m_MaxPos = maxpt;

	mov	ecx, DWORD PTR _maxpt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 121  : 			m_isValid = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+24], 1

; 122  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setRange@BoxBound@Ogre@@QAEXABVVector3@2@0@Z ENDP	; Ogre::BoxBound::setRange
_TEXT	ENDS
PUBLIC	??HOgre@@YA?AVVector3@0@ABV10@0@Z		; Ogre::operator+
PUBLIC	??GOgre@@YA?AVVector3@0@ABV10@0@Z		; Ogre::operator-
PUBLIC	?setCenterExtension@BoxBound@Ogre@@QAEXABVVector3@2@0@Z ; Ogre::BoxBound::setCenterExtension
; Function compile flags: /Odtp
;	COMDAT ?setCenterExtension@BoxBound@Ogre@@QAEXABVVector3@2@0@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T66542 = -24						; size = 12
$T66541 = -12						; size = 12
_center$ = 8						; size = 4
_exten$ = 12						; size = 4
?setCenterExtension@BoxBound@Ogre@@QAEXABVVector3@2@0@Z PROC ; Ogre::BoxBound::setCenterExtension, COMDAT
; _this$ = ecx

; 125  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 			m_MinPos = center-exten;

	mov	eax, DWORD PTR _exten$[ebp]
	push	eax
	mov	ecx, DWORD PTR _center$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66541[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 127  : 			m_MaxPos = center+exten;

	mov	eax, DWORD PTR _exten$[ebp]
	push	eax
	mov	ecx, DWORD PTR _center$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66542[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 128  : 			m_isValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 1

; 129  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setCenterExtension@BoxBound@Ogre@@QAEXABVVector3@2@0@Z ENDP ; Ogre::BoxBound::setCenterExtension
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ??HOgre@@YA?AVVector3@0@ABV10@0@Z
_TEXT	SEGMENT
tv92 = -12						; size = 4
tv89 = -8						; size = 4
tv86 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??HOgre@@YA?AVVector3@0@ABV10@0@Z PROC			; Ogre::operator+, COMDAT

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 165  : 		return Vector3(v1.x+v2.x, v1.y+v2.y, v1.z+v2.z);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v2$[ebp]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v2$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v2$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 166  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??HOgre@@YA?AVVector3@0@ABV10@0@Z ENDP			; Ogre::operator+
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??GOgre@@YA?AVVector3@0@ABV10@0@Z
_TEXT	SEGMENT
tv92 = -12						; size = 4
tv89 = -8						; size = 4
tv86 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??GOgre@@YA?AVVector3@0@ABV10@0@Z PROC			; Ogre::operator-, COMDAT

; 174  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 175  : 		return Vector3(v1.x-v2.x, v1.y-v2.y, v1.z-v2.z);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v2$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v2$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v2$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 176  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??GOgre@@YA?AVVector3@0@ABV10@0@Z ENDP			; Ogre::operator-
_TEXT	ENDS
PUBLIC	?expandBy@BoxBound@Ogre@@QBE?AV12@M@Z		; Ogre::BoxBound::expandBy
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebounding.h
;	COMDAT ?expandBy@BoxBound@Ogre@@QBE?AV12@M@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T66552 = -48						; size = 12
$T66551 = -36						; size = 12
$T66550 = -24						; size = 12
$T66549 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_w$ = 12						; size = 4
?expandBy@BoxBound@Ogre@@QBE?AV12@M@Z PROC		; Ogre::BoxBound::expandBy, COMDAT
; _this$ = ecx

; 134  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 135  : 			return BoxBound( m_MinPos - Vector3(w,w,w), m_MaxPos + Vector3(w,w,w) );

	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T66549[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T66550[ebp]
	push	ecx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T66551[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	eax, DWORD PTR $T66552[ebp]
	push	eax
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0BoxBound@Ogre@@QAE@ABVVector3@1@0@Z	; Ogre::BoxBound::BoxBound
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 136  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?expandBy@BoxBound@Ogre@@QBE?AV12@M@Z ENDP		; Ogre::BoxBound::expandBy
_TEXT	ENDS
PUBLIC	??DOgre@@YA?AVVector3@0@ABV10@M@Z		; Ogre::operator*
PUBLIC	__real@3f000000
PUBLIC	?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ	; Ogre::BoxBound::getCenter
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T66555 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::BoxBound::getCenter, COMDAT
; _this$ = ecx

; 144  : 		Vector3 getCenter() const{ return (m_MinPos + m_MaxPos)*0.5f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66555[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??DOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator*
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::BoxBound::getCenter
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ??DOgre@@YA?AVVector3@0@ABV10@M@Z
_TEXT	SEGMENT
tv87 = -12						; size = 4
tv85 = -8						; size = 4
tv83 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_s$ = 16						; size = 4
??DOgre@@YA?AVVector3@0@ABV10@M@Z PROC			; Ogre::operator*, COMDAT

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 190  : 		return Vector3(v1.x*s, v1.y*s, v1.z*s);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv85[ebp]
	fld	DWORD PTR tv85[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv87[ebp]
	fld	DWORD PTR tv87[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 191  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??DOgre@@YA?AVVector3@0@ABV10@M@Z ENDP			; Ogre::operator*
_TEXT	ENDS
PUBLIC	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ	; Ogre::BoxBound::getExtension
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebounding.h
;	COMDAT ?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T66562 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::BoxBound::getExtension, COMDAT
; _this$ = ecx

; 145  : 		Vector3 getExtension() const{ return (m_MaxPos - m_MinPos)*0.5f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T66562[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??DOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator*
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::BoxBound::getExtension
_TEXT	ENDS
PUBLIC	?getMinPos@BoxBound@Ogre@@QBEABVVector3@2@XZ	; Ogre::BoxBound::getMinPos
; Function compile flags: /Odtp
;	COMDAT ?getMinPos@BoxBound@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMinPos@BoxBound@Ogre@@QBEABVVector3@2@XZ PROC	; Ogre::BoxBound::getMinPos, COMDAT
; _this$ = ecx

; 146  : 		const Vector3 &getMinPos() const{ return m_MinPos; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getMinPos@BoxBound@Ogre@@QBEABVVector3@2@XZ ENDP	; Ogre::BoxBound::getMinPos
_TEXT	ENDS
PUBLIC	?getMaxPos@BoxBound@Ogre@@QBEABVVector3@2@XZ	; Ogre::BoxBound::getMaxPos
; Function compile flags: /Odtp
;	COMDAT ?getMaxPos@BoxBound@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxPos@BoxBound@Ogre@@QBEABVVector3@2@XZ PROC	; Ogre::BoxBound::getMaxPos, COMDAT
; _this$ = ecx

; 147  : 		const Vector3 &getMaxPos() const{ return m_MaxPos; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxPos@BoxBound@Ogre@@QBEABVVector3@2@XZ ENDP	; Ogre::BoxBound::getMaxPos
_TEXT	ENDS
PUBLIC	??$Abs@M@Ogre@@YAMABM@Z				; Ogre::Abs<float>
PUBLIC	?getRadiusInDirection@BoxBound@Ogre@@QBEMABVVector3@2@@Z ; Ogre::BoxBound::getRadiusInDirection
; Function compile flags: /Odtp
;	COMDAT ?getRadiusInDirection@BoxBound@Ogre@@QBEMABVVector3@2@@Z
_TEXT	SEGMENT
tv143 = -48						; size = 4
tv148 = -44						; size = 8
tv146 = -36						; size = 8
_this$ = -28						; size = 4
$T66571 = -24						; size = 4
$T66570 = -20						; size = 4
$T66569 = -16						; size = 4
_extent$ = -12						; size = 12
_dir$ = 8						; size = 4
?getRadiusInDirection@BoxBound@Ogre@@QBEMABVVector3@2@@Z PROC ; Ogre::BoxBound::getRadiusInDirection, COMDAT
; _this$ = ecx

; 150  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 			Vector3 extent = getExtension();

	lea	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getExtension

; 152  : 			return Abs(dir.x*extent.x) + Abs(dir.y*extent.y) + Abs(dir.z*extent.z);

	mov	ecx, DWORD PTR _dir$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR _extent$[ebp]
	fstp	DWORD PTR $T66569[ebp]
	mov	edx, DWORD PTR _dir$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _extent$[ebp+4]
	fstp	DWORD PTR $T66570[ebp]
	mov	eax, DWORD PTR _dir$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _extent$[ebp+8]
	fstp	DWORD PTR $T66571[ebp]
	lea	ecx, DWORD PTR $T66569[ebp]
	push	ecx
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	add	esp, 4
	lea	edx, DWORD PTR $T66570[ebp]
	push	edx
	fstp	QWORD PTR tv146[ebp]
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	add	esp, 4
	fadd	QWORD PTR tv146[ebp]
	lea	eax, DWORD PTR $T66571[ebp]
	push	eax
	fstp	QWORD PTR tv148[ebp]
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	add	esp, 4
	fadd	QWORD PTR tv148[ebp]
	fstp	DWORD PTR tv143[ebp]
	fld	DWORD PTR tv143[ebp]

; 153  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getRadiusInDirection@BoxBound@Ogre@@QBEMABVVector3@2@@Z ENDP ; Ogre::BoxBound::getRadiusInDirection
_TEXT	ENDS
PUBLIC	?isPointIn@BoxBound@Ogre@@QBE_NABVVector3@2@@Z	; Ogre::BoxBound::isPointIn
; Function compile flags: /Odtp
;	COMDAT ?isPointIn@BoxBound@Ogre@@QBE_NABVVector3@2@@Z
_TEXT	SEGMENT
tv94 = -8						; size = 4
_this$ = -4						; size = 4
_vPos$ = 8						; size = 4
?isPointIn@BoxBound@Ogre@@QBE_NABVVector3@2@@Z PROC	; Ogre::BoxBound::isPointIn, COMDAT
; _this$ = ecx

; 156  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 157  : 			return (vPos.x>m_MinPos.x && vPos.x<m_MaxPos.x 
; 158  : 				    &&vPos.y>m_MinPos.y && vPos.y<m_MaxPos.y
; 159  : 					&&vPos.z>m_MinPos.z && vPos.z<m_MaxPos.z );

	mov	eax, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@isPointIn
	mov	edx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointIn
	mov	ecx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@isPointIn
	mov	eax, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+16]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointIn
	mov	edx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@isPointIn
	mov	ecx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+20]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointIn
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN4@isPointIn
$LN3@isPointIn:
	mov	DWORD PTR tv94[ebp], 0
$LN4@isPointIn:
	mov	al, BYTE PTR tv94[ebp]

; 160  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isPointIn@BoxBound@Ogre@@QBE_NABVVector3@2@@Z ENDP	; Ogre::BoxBound::isPointIn
_TEXT	ENDS
PUBLIC	?isPointInXZ@BoxBound@Ogre@@QBE_NABVVector3@2@@Z ; Ogre::BoxBound::isPointInXZ
; Function compile flags: /Odtp
;	COMDAT ?isPointInXZ@BoxBound@Ogre@@QBE_NABVVector3@2@@Z
_TEXT	SEGMENT
tv83 = -8						; size = 4
_this$ = -4						; size = 4
_vPos$ = 8						; size = 4
?isPointInXZ@BoxBound@Ogre@@QBE_NABVVector3@2@@Z PROC	; Ogre::BoxBound::isPointInXZ, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			return (vPos.x>m_MinPos.x && vPos.x<m_MaxPos.x 
; 165  : 				&&vPos.z>m_MinPos.z && vPos.z<m_MaxPos.z );

	mov	eax, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@isPointInX
	mov	edx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointInX
	mov	ecx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@isPointInX
	mov	eax, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+20]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointInX
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN4@isPointInX
$LN3@isPointInX:
	mov	DWORD PTR tv83[ebp], 0
$LN4@isPointInX:
	mov	al, BYTE PTR tv83[ebp]

; 166  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isPointInXZ@BoxBound@Ogre@@QBE_NABVVector3@2@@Z ENDP	; Ogre::BoxBound::isPointInXZ
_TEXT	ENDS
PUBLIC	?intersectBoxBound@BoxBound@Ogre@@QBE_NABV12@@Z	; Ogre::BoxBound::intersectBoxBound
; Function compile flags: /Odtp
;	COMDAT ?intersectBoxBound@BoxBound@Ogre@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
?intersectBoxBound@BoxBound@Ogre@@QBE_NABV12@@Z PROC	; Ogre::BoxBound::intersectBoxBound, COMDAT
; _this$ = ecx

; 169  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 			if( m_MinPos.x > other.m_MaxPos.x || other.m_MinPos.x > m_MaxPos.x )

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [ecx+12]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN5@intersectB
	mov	edx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@intersectB
$LN5@intersectB:

; 171  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@intersectB
$LN6@intersectB:

; 172  : 			if( m_MinPos.y > other.m_MaxPos.y || other.m_MinPos.y > m_MaxPos.y )

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [edx+16]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN3@intersectB
	mov	eax, DWORD PTR _other$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+16]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@intersectB
$LN3@intersectB:

; 173  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@intersectB
$LN4@intersectB:

; 174  : 			if( m_MinPos.z > other.m_MaxPos.z || other.m_MinPos.z > m_MaxPos.z )

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _other$[ebp]
	fld	DWORD PTR [eax+20]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN1@intersectB
	mov	ecx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+20]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@intersectB
$LN1@intersectB:

; 175  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@intersectB
$LN2@intersectB:

; 176  : 			return true;

	mov	al, 1
$LN7@intersectB:

; 177  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?intersectBoxBound@BoxBound@Ogre@@QBE_NABV12@@Z ENDP	; Ogre::BoxBound::intersectBoxBound
_TEXT	ENDS
PUBLIC	?isBoxBoundIn@BoxBound@Ogre@@QAE_NABV12@@Z	; Ogre::BoxBound::isBoxBoundIn
; Function compile flags: /Odtp
;	COMDAT ?isBoxBoundIn@BoxBound@Ogre@@QAE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_box$ = 8						; size = 4
?isBoxBoundIn@BoxBound@Ogre@@QAE_NABV12@@Z PROC		; Ogre::BoxBound::isBoxBoundIn, COMDAT
; _this$ = ecx

; 181  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 			if( box.m_MaxPos.x > m_MaxPos.x ||
; 183  : 				box.m_MinPos.x < m_MinPos.x )

	mov	eax, DWORD PTR _box$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN5@isBoxBound
	mov	edx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN6@isBoxBound
$LN5@isBoxBound:

; 184  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@isBoxBound
$LN6@isBoxBound:

; 185  : 			if( box.m_MaxPos.y > m_MaxPos.y ||
; 186  : 				box.m_MinPos.y < m_MinPos.y )

	mov	ecx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+16]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN3@isBoxBound
	mov	eax, DWORD PTR _box$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@isBoxBound
$LN3@isBoxBound:

; 187  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@isBoxBound
$LN4@isBoxBound:

; 188  : 			if( box.m_MaxPos.z > m_MaxPos.z ||
; 189  : 				box.m_MinPos.z < m_MinPos.z )

	mov	edx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN1@isBoxBound
	mov	ecx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@isBoxBound
$LN1@isBoxBound:

; 190  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@isBoxBound
$LN2@isBoxBound:

; 191  : 
; 192  : 			return true;

	mov	al, 1
$LN7@isBoxBound:

; 193  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isBoxBoundIn@BoxBound@Ogre@@QAE_NABV12@@Z ENDP		; Ogre::BoxBound::isBoxBoundIn
_TEXT	ENDS
PUBLIC	?Abs@Ogre@@YA?AVVector3@1@ABV21@@Z		; Ogre::Abs
PUBLIC	?isBoxBoundOut@BoxBound@Ogre@@QBE_NABV12@@Z	; Ogre::BoxBound::isBoxBoundOut
; Function compile flags: /Odtp
;	COMDAT ?isBoxBoundOut@BoxBound@Ogre@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -88						; size = 4
$T66590 = -84						; size = 12
$T66589 = -72						; size = 12
$T66588 = -60						; size = 12
$T66587 = -48						; size = 12
$T66586 = -36						; size = 12
_vRadius$ = -24						; size = 12
_vDis$ = -12						; size = 12
_box$ = 8						; size = 4
?isBoxBoundOut@BoxBound@Ogre@@QBE_NABV12@@Z PROC	; Ogre::BoxBound::isBoxBoundOut, COMDAT
; _this$ = ecx

; 197  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 198  : 			Vector3 vDis = Abs(box.getCenter() - getCenter());

	lea	eax, DWORD PTR $T66586[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getCenter
	push	eax
	lea	ecx, DWORD PTR $T66587[ebp]
	push	ecx
	mov	ecx, DWORD PTR _box$[ebp]
	call	?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getCenter
	push	eax
	lea	edx, DWORD PTR $T66588[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _vDis$[ebp]
	push	eax
	call	?Abs@Ogre@@YA?AVVector3@1@ABV21@@Z	; Ogre::Abs
	add	esp, 8

; 199  : 			Vector3 vRadius = box.getExtension() + getExtension();

	lea	ecx, DWORD PTR $T66589[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getExtension
	push	eax
	lea	edx, DWORD PTR $T66590[ebp]
	push	edx
	mov	ecx, DWORD PTR _box$[ebp]
	call	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getExtension
	push	eax
	lea	eax, DWORD PTR _vRadius$[ebp]
	push	eax
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH

; 200  : 
; 201  : 			if( vDis.x > vRadius.x || vDis.y > vRadius.y || vDis.z > vRadius.z )

	fld	DWORD PTR _vDis$[ebp]
	fld	DWORD PTR _vRadius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN1@isBoxBound@2
	fld	DWORD PTR _vDis$[ebp+4]
	fld	DWORD PTR _vRadius$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN1@isBoxBound@2
	fld	DWORD PTR _vDis$[ebp+8]
	fld	DWORD PTR _vRadius$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@isBoxBound@2
$LN1@isBoxBound@2:

; 202  : 				return true;

	mov	al, 1
	jmp	SHORT $LN3@isBoxBound@2
$LN2@isBoxBound@2:

; 203  : 
; 204  : 			return false;

	xor	al, al
$LN3@isBoxBound@2:

; 205  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isBoxBoundOut@BoxBound@Ogre@@QBE_NABV12@@Z ENDP	; Ogre::BoxBound::isBoxBoundOut
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ?Abs@Ogre@@YA?AVVector3@1@ABV21@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?Abs@Ogre@@YA?AVVector3@1@ABV21@@Z PROC			; Ogre::Abs, COMDAT

; 204  : 	{

	push	ebp
	mov	ebp, esp

; 205  : 		return Vector3( Abs(v.x), Abs(v.y), Abs(v.z) );

	mov	eax, DWORD PTR _v$[ebp]
	add	eax, 8
	push	eax
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 4
	push	ecx
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 206  : 	}

	pop	ebp
	ret	0
?Abs@Ogre@@YA?AVVector3@1@ABV21@@Z ENDP			; Ogre::Abs
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BoxBound::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+24]
	mov	BYTE PTR [edx+24], cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BoxBound::operator=
_TEXT	ENDS
PUBLIC	??0SphereBound@Ogre@@QAE@XZ			; Ogre::SphereBound::SphereBound
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebounding.h
;	COMDAT ??0SphereBound@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SphereBound@Ogre@@QAE@XZ PROC			; Ogre::SphereBound::SphereBound, COMDAT
; _this$ = ecx

; 221  : 		SphereBound(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0SphereBound@Ogre@@QAE@XZ ENDP			; Ogre::SphereBound::SphereBound
_TEXT	ENDS
PUBLIC	?getCenter@SphereBound@Ogre@@QBEABVVector3@2@XZ	; Ogre::SphereBound::getCenter
; Function compile flags: /Odtp
;	COMDAT ?getCenter@SphereBound@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCenter@SphereBound@Ogre@@QBEABVVector3@2@XZ PROC	; Ogre::SphereBound::getCenter, COMDAT
; _this$ = ecx

; 229  : 		const Vector3 &getCenter() const{ return m_Center; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCenter@SphereBound@Ogre@@QBEABVVector3@2@XZ ENDP	; Ogre::SphereBound::getCenter
_TEXT	ENDS
PUBLIC	?getRadius@SphereBound@Ogre@@QBEMXZ		; Ogre::SphereBound::getRadius
; Function compile flags: /Odtp
;	COMDAT ?getRadius@SphereBound@Ogre@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRadius@SphereBound@Ogre@@QBEMXZ PROC		; Ogre::SphereBound::getRadius, COMDAT
; _this$ = ecx

; 230  : 		float   getRadius() const{ return m_Radius; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?getRadius@SphereBound@Ogre@@QBEMXZ ENDP		; Ogre::SphereBound::getRadius
_TEXT	ENDS
PUBLIC	?isPointIn@SphereBound@Ogre@@QBE_NABVVector3@2@@Z ; Ogre::SphereBound::isPointIn
; Function compile flags: /Odtp
;	COMDAT ?isPointIn@SphereBound@Ogre@@QBE_NABVVector3@2@@Z
_TEXT	SEGMENT
tv79 = -24						; size = 4
tv89 = -20						; size = 4
_this$ = -16						; size = 4
$T66603 = -12						; size = 12
_vPos$ = 8						; size = 4
?isPointIn@SphereBound@Ogre@@QBE_NABVVector3@2@@Z PROC	; Ogre::SphereBound::isPointIn, COMDAT
; _this$ = ecx

; 233  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 			return ( (vPos - m_Center).lengthSqr() < m_Radius * m_Radius );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vPos$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66603[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?lengthSqr@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::lengthSqr
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointIn@2
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN4@isPointIn@2
$LN3@isPointIn@2:
	mov	DWORD PTR tv79[ebp], 0
$LN4@isPointIn@2:
	mov	al, BYTE PTR tv79[ebp]

; 235  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isPointIn@SphereBound@Ogre@@QBE_NABVVector3@2@@Z ENDP	; Ogre::SphereBound::isPointIn
_TEXT	ENDS
PUBLIC	??0SphereBound@Ogre@@QAE@ABV01@@Z		; Ogre::SphereBound::SphereBound
; Function compile flags: /Odtp
;	COMDAT ??0SphereBound@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0SphereBound@Ogre@@QAE@ABV01@@Z PROC			; Ogre::SphereBound::SphereBound, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [edx+12]
	fstp	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0SphereBound@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::SphereBound::SphereBound
_TEXT	ENDS
PUBLIC	??4SphereBound@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::SphereBound::operator=
; Function compile flags: /Odtp
;	COMDAT ??4SphereBound@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4SphereBound@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::SphereBound::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [edx+12]
	fstp	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4SphereBound@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::SphereBound::operator=
_TEXT	ENDS
PUBLIC	??0BoxSphereBound@Ogre@@QAE@XZ			; Ogre::BoxSphereBound::BoxSphereBound
; Function compile flags: /Odtp
;	COMDAT ??0BoxSphereBound@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BoxSphereBound@Ogre@@QAE@XZ PROC			; Ogre::BoxSphereBound::BoxSphereBound, COMDAT
; _this$ = ecx

; 252  : 		BoxSphereBound()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3

; 253  : 		{
; 254  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BoxSphereBound@Ogre@@QAE@XZ ENDP			; Ogre::BoxSphereBound::BoxSphereBound
_TEXT	ENDS
PUBLIC	?fromBoxBound@BoxSphereBound@Ogre@@QAEXABVBoxBound@2@@Z ; Ogre::BoxSphereBound::fromBoxBound
PUBLIC	??0BoxSphereBound@Ogre@@QAE@ABVBoxBound@1@@Z	; Ogre::BoxSphereBound::BoxSphereBound
; Function compile flags: /Odtp
;	COMDAT ??0BoxSphereBound@Ogre@@QAE@ABVBoxBound@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_box$ = 8						; size = 4
??0BoxSphereBound@Ogre@@QAE@ABVBoxBound@1@@Z PROC	; Ogre::BoxSphereBound::BoxSphereBound, COMDAT
; _this$ = ecx

; 256  : 		BoxSphereBound(const BoxBound &box)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3

; 257  : 		{
; 258  : 			fromBoxBound(box);

	mov	eax, DWORD PTR _box$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?fromBoxBound@BoxSphereBound@Ogre@@QAEXABVBoxBound@2@@Z ; Ogre::BoxSphereBound::fromBoxBound

; 259  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BoxSphereBound@Ogre@@QAE@ABVBoxBound@1@@Z ENDP	; Ogre::BoxSphereBound::BoxSphereBound
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	?reset@BoxSphereBound@Ogre@@QAEXXZ		; Ogre::BoxSphereBound::reset
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?reset@BoxSphereBound@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T66616 = -12						; size = 12
?reset@BoxSphereBound@Ogre@@QAEXXZ PROC			; Ogre::BoxSphereBound::reset, COMDAT
; _this$ = ecx

; 262  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 			m_Center = m_Extent = Vector3(0,0,0);

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T66616[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 264  : 			m_Radius = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+24]

; 265  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?reset@BoxSphereBound@Ogre@@QAEXXZ ENDP			; Ogre::BoxSphereBound::reset
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?fromBoxBound@BoxSphereBound@Ogre@@QAEXABVBoxBound@2@@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T66622 = -24						; size = 12
$T66621 = -12						; size = 12
_box$ = 8						; size = 4
?fromBoxBound@BoxSphereBound@Ogre@@QAEXABVBoxBound@2@@Z PROC ; Ogre::BoxSphereBound::fromBoxBound, COMDAT
; _this$ = ecx

; 268  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 269  : 			m_Center = box.getCenter();

	lea	eax, DWORD PTR $T66621[ebp]
	push	eax
	mov	ecx, DWORD PTR _box$[ebp]
	call	?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getCenter
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 270  : 			m_Extent = box.getExtension();

	lea	ecx, DWORD PTR $T66622[ebp]
	push	ecx
	mov	ecx, DWORD PTR _box$[ebp]
	call	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getExtension
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 271  : 
; 272  : 			m_Radius = m_Extent.length();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?length@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::length
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+24]

; 273  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?fromBoxBound@BoxSphereBound@Ogre@@QAEXABVBoxBound@2@@Z ENDP ; Ogre::BoxSphereBound::fromBoxBound
_TEXT	ENDS
PUBLIC	?getSphere@BoxSphereBound@Ogre@@QBE?AVSphereBound@2@XZ ; Ogre::BoxSphereBound::getSphere
; Function compile flags: /Odtp
;	COMDAT ?getSphere@BoxSphereBound@Ogre@@QBE?AVSphereBound@2@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_sphere$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?getSphere@BoxSphereBound@Ogre@@QBE?AVSphereBound@2@XZ PROC ; Ogre::BoxSphereBound::getSphere, COMDAT
; _this$ = ecx

; 276  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 			SphereBound sphere;

	lea	ecx, DWORD PTR _sphere$[ebp]
	call	??0SphereBound@Ogre@@QAE@XZ		; Ogre::SphereBound::SphereBound

; 278  : 			sphere.m_Center = m_Center;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sphere$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 279  : 			sphere.m_Radius = m_Radius;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+24]
	fstp	DWORD PTR _sphere$[ebp+12]

; 280  : 			return sphere;

	lea	edx, DWORD PTR _sphere$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0SphereBound@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 281  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getSphere@BoxSphereBound@Ogre@@QBE?AVSphereBound@2@XZ ENDP ; Ogre::BoxSphereBound::getSphere
_TEXT	ENDS
PUBLIC	?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ ; Ogre::BoxSphereBound::getBox
; Function compile flags: /Odtp
;	COMDAT ?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T66628 = -52						; size = 12
$T66627 = -40						; size = 12
_box$ = -28						; size = 28
___$ReturnUdt$ = 8					; size = 4
?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ PROC	; Ogre::BoxSphereBound::getBox, COMDAT
; _this$ = ecx

; 284  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 			BoxBound box;

	lea	ecx, DWORD PTR _box$[ebp]
	call	??0BoxBound@Ogre@@QAE@XZ		; Ogre::BoxBound::BoxBound

; 286  : 			box.m_MinPos = m_Center - m_Extent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66627[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _box$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 287  : 			box.m_MaxPos = m_Center + m_Extent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66628[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _box$[ebp+12]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 288  : 			box.m_isValid = true;

	mov	BYTE PTR _box$[ebp+24], 1

; 289  : 			return box;

	lea	eax, DWORD PTR _box$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0BoxBound@Ogre@@QAE@ABV01@@Z		; Ogre::BoxBound::BoxBound
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 290  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ ENDP	; Ogre::BoxSphereBound::getBox
_TEXT	ENDS
PUBLIC	?getMin@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ	; Ogre::BoxSphereBound::getMin
; Function compile flags: /Odtp
;	COMDAT ?getMin@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getMin@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::BoxSphereBound::getMin, COMDAT
; _this$ = ecx

; 310  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 311  : 			return m_Center-m_Extent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 312  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getMin@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::BoxSphereBound::getMin
_TEXT	ENDS
PUBLIC	?getMax@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ	; Ogre::BoxSphereBound::getMax
; Function compile flags: /Odtp
;	COMDAT ?getMax@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getMax@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::BoxSphereBound::getMax, COMDAT
; _this$ = ecx

; 315  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  : 			return m_Center+m_Extent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 317  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getMax@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::BoxSphereBound::getMax
_TEXT	ENDS
PUBLIC	?getCenter@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ ; Ogre::BoxSphereBound::getCenter
; Function compile flags: /Odtp
;	COMDAT ?getCenter@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCenter@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ PROC	; Ogre::BoxSphereBound::getCenter, COMDAT
; _this$ = ecx

; 320  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 321  : 			return m_Center;

	mov	eax, DWORD PTR _this$[ebp]

; 322  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getCenter@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ ENDP	; Ogre::BoxSphereBound::getCenter
_TEXT	ENDS
PUBLIC	?getExtension@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ ; Ogre::BoxSphereBound::getExtension
; Function compile flags: /Odtp
;	COMDAT ?getExtension@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getExtension@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ PROC ; Ogre::BoxSphereBound::getExtension, COMDAT
; _this$ = ecx

; 325  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 326  : 			return m_Extent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH

; 327  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getExtension@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ ENDP ; Ogre::BoxSphereBound::getExtension
_TEXT	ENDS
PUBLIC	??KOgre@@YA?AVVector3@0@ABV10@M@Z		; Ogre::operator/
PUBLIC	__real@40000000
PUBLIC	?fromBox@BoxSphereBound@Ogre@@QAEXABVVector3@2@0@Z ; Ogre::BoxSphereBound::fromBox
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?fromBox@BoxSphereBound@Ogre@@QAEXABVVector3@2@0@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T66642 = -48						; size = 12
$T66641 = -36						; size = 12
$T66640 = -24						; size = 12
$T66639 = -12						; size = 12
_minpt$ = 8						; size = 4
_maxpt$ = 12						; size = 4
?fromBox@BoxSphereBound@Ogre@@QAEXABVVector3@2@0@Z PROC	; Ogre::BoxSphereBound::fromBox, COMDAT
; _this$ = ecx

; 330  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 331  : 			m_Center = (minpt + maxpt)/2.0f;

	push	ecx
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _maxpt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _minpt$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66639[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T66640[ebp]
	push	eax
	call	??KOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator/
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 332  : 			m_Extent = (maxpt - minpt)/2.0f;

	push	ecx
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _minpt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _maxpt$[ebp]
	push	edx
	lea	eax, DWORD PTR $T66641[ebp]
	push	eax
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T66642[ebp]
	push	ecx
	call	??KOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator/
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 333  : 			m_Radius = m_Extent.length();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?length@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::length
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+24]

; 334  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?fromBox@BoxSphereBound@Ogre@@QAEXABVVector3@2@0@Z ENDP	; Ogre::BoxSphereBound::fromBox
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ??KOgre@@YA?AVVector3@0@ABV10@M@Z
_TEXT	SEGMENT
tv87 = -12						; size = 4
tv85 = -8						; size = 4
tv83 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_s$ = 16						; size = 4
??KOgre@@YA?AVVector3@0@ABV10@M@Z PROC			; Ogre::operator/, COMDAT

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 200  : 		return Vector3(v1.x/s, v1.y/s, v1.z/s);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	fdiv	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx+4]
	fdiv	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv85[ebp]
	fld	DWORD PTR tv85[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx]
	fdiv	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv87[ebp]
	fld	DWORD PTR tv87[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 201  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??KOgre@@YA?AVVector3@0@ABV10@M@Z ENDP			; Ogre::operator/
_TEXT	ENDS
PUBLIC	?intersect@BoxSphereBound@Ogre@@QBE_NABV12@@Z	; Ogre::BoxSphereBound::intersect
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebounding.h
;	COMDAT ?intersect@BoxSphereBound@Ogre@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -60						; size = 4
_box1$ = -56						; size = 28
_box2$ = -28						; size = 28
_other$ = 8						; size = 4
?intersect@BoxSphereBound@Ogre@@QBE_NABV12@@Z PROC	; Ogre::BoxSphereBound::intersect, COMDAT
; _this$ = ecx

; 337  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 338  : 			BoxBound box1 = getBox();

	lea	eax, DWORD PTR _box1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ ; Ogre::BoxSphereBound::getBox

; 339  : 			BoxBound box2 = other.getBox();

	lea	ecx, DWORD PTR _box2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _other$[ebp]
	call	?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ ; Ogre::BoxSphereBound::getBox

; 340  : 			return box1.intersectBoxBound(box2);

	lea	edx, DWORD PTR _box2$[ebp]
	push	edx
	lea	ecx, DWORD PTR _box1$[ebp]
	call	?intersectBoxBound@BoxBound@Ogre@@QBE_NABV12@@Z ; Ogre::BoxBound::intersectBoxBound

; 341  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?intersect@BoxSphereBound@Ogre@@QBE_NABV12@@Z ENDP	; Ogre::BoxSphereBound::intersect
_TEXT	ENDS
PUBLIC	??0BoxSphereBound@Ogre@@QAE@ABV01@@Z		; Ogre::BoxSphereBound::BoxSphereBound
; Function compile flags: /Odtp
;	COMDAT ??0BoxSphereBound@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0BoxSphereBound@Ogre@@QAE@ABV01@@Z PROC		; Ogre::BoxSphereBound::BoxSphereBound, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+24]
	fstp	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BoxSphereBound@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::BoxSphereBound::BoxSphereBound
_TEXT	ENDS
PUBLIC	??4BoxSphereBound@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::BoxSphereBound::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BoxSphereBound@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BoxSphereBound@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BoxSphereBound::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+24]
	fstp	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BoxSphereBound@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BoxSphereBound::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@BuildingData@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::BuildingData::getRTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebuildingdata.h
;	COMDAT ?getRTTI@BuildingData@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@BuildingData@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::BuildingData::getRTTI, COMDAT
; _this$ = ecx

; 42   : 		DECLARE_RTTI(BuildingData)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@BuildingData@Ogre@@2VRuntimeClass@2@B ; Ogre::BuildingData::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@BuildingData@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::BuildingData::getRTTI
_TEXT	ENDS
PUBLIC	??0BuildingData@Ogre@@QAE@XZ			; Ogre::BuildingData::BuildingData
PUBLIC	?newObject@BuildingData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::BuildingData::newObject
EXTRN	??2MemoryDelegation@Ogre@@SAPAXI@Z:PROC		; Ogre::MemoryDelegation::operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@BuildingData@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@BuildingData@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@BuildingData@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@BuildingData@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@BuildingData@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T66658 = -20						; size = 4
$T66657 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@BuildingData@Ogre@@SAPAVBaseObject@2@XZ PROC	; Ogre::BuildingData::newObject, COMDAT

; 42   : 		DECLARE_RTTI(BuildingData)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@BuildingData@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	100					; 00000064H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T66658[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T66658[ebp], 0
	je	SHORT $LN3@newObject
	mov	ecx, DWORD PTR $T66658[ebp]
	call	??0BuildingData@Ogre@@QAE@XZ		; Ogre::BuildingData::BuildingData
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject
$LN3@newObject:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T66657[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T66657[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@BuildingData@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	100					; 00000064H
	mov	eax, DWORD PTR $T66658[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@BuildingData@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@BuildingData@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@BuildingData@Ogre@@SAPAVBaseObject@2@XZ ENDP	; Ogre::BuildingData::newObject
PUBLIC	??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::~vector<Ogre::Cell,std::allocator<Ogre::Cell> >
PUBLIC	??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::~vector<Ogre::Portal,std::allocator<Ogre::Portal> >
PUBLIC	??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::vector<Ogre::Cell,std::allocator<Ogre::Cell> >
PUBLIC	??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::vector<Ogre::Portal,std::allocator<Ogre::Portal> >
PUBLIC	??_7BuildingData@Ogre@@6B@			; Ogre::BuildingData::`vftable'
PUBLIC	??0BuildingData@Ogre@@QAE@ABV01@@Z		; Ogre::BuildingData::BuildingData
PUBLIC	??_R4BuildingData@Ogre@@6B@			; Ogre::BuildingData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBuildingData@Ogre@@@8			; Ogre::BuildingData `RTTI Type Descriptor'
PUBLIC	??_R3BuildingData@Ogre@@8			; Ogre::BuildingData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BuildingData@Ogre@@8			; Ogre::BuildingData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BuildingData@Ogre@@8		; Ogre::BuildingData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EBuildingData@Ogre@@MAEPAXI@Z		; Ogre::BuildingData::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@BuildingData@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BuildingData@Ogre@@8 DD FLAT:??_R0?AVBuildingData@Ogre@@@8 ; Ogre::BuildingData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BuildingData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2BuildingData@Ogre@@8
rdata$r	SEGMENT
??_R2BuildingData@Ogre@@8 DD FLAT:??_R1A@?0A@EA@BuildingData@Ogre@@8 ; Ogre::BuildingData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3BuildingData@Ogre@@8
rdata$r	SEGMENT
??_R3BuildingData@Ogre@@8 DD 00H			; Ogre::BuildingData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2BuildingData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBuildingData@Ogre@@@8
_DATA	SEGMENT
??_R0?AVBuildingData@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::BuildingData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBuildingData@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BuildingData@Ogre@@6B@
rdata$r	SEGMENT
??_R4BuildingData@Ogre@@6B@ DD 00H			; Ogre::BuildingData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBuildingData@Ogre@@@8
	DD	FLAT:??_R3BuildingData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7BuildingData@Ogre@@6B@
CONST	SEGMENT
??_7BuildingData@Ogre@@6B@ DD FLAT:??_R4BuildingData@Ogre@@6B@ ; Ogre::BuildingData::`vftable'
	DD	FLAT:?getRTTI@BuildingData@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EBuildingData@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0BuildingData@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BuildingData@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0BuildingData@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0BuildingData@Ogre@@QAE@ABV01@@Z$2
__ehfuncinfo$??0BuildingData@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0BuildingData@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0BuildingData@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0BuildingData@Ogre@@QAE@ABV01@@Z PROC			; Ogre::BuildingData::BuildingData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BuildingData@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BuildingData@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0BoxBound@Ogre@@QAE@ABV01@@Z		; Ogre::BoxBound::BoxBound
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::vector<Ogre::Portal,std::allocator<Ogre::Portal> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 76					; 0000004cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::vector<Ogre::Cell,std::allocator<Ogre::Cell> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0BuildingData@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??0BuildingData@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::~vector<Ogre::Portal,std::allocator<Ogre::Portal> >
__unwindfunclet$??0BuildingData@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	jmp	??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::~vector<Ogre::Cell,std::allocator<Ogre::Cell> >
__ehhandler$??0BuildingData@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BuildingData@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BuildingData@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::BuildingData::BuildingData
PUBLIC	??4?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::operator=
PUBLIC	??4?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::operator=
PUBLIC	??4BuildingData@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BuildingData::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BuildingData@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BuildingData@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BuildingData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+44], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+48], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??4?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??4?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BuildingData@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BuildingData::operator=
_TEXT	ENDS
PUBLIC	??1BuildingData@Ogre@@MAE@XZ			; Ogre::BuildingData::~BuildingData
PUBLIC	??_GBuildingData@Ogre@@MAEPAXI@Z		; Ogre::BuildingData::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GBuildingData@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBuildingData@Ogre@@MAEPAXI@Z PROC			; Ogre::BuildingData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BuildingData@Ogre@@MAE@XZ		; Ogre::BuildingData::~BuildingData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@10
	push	100					; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@10:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBuildingData@Ogre@@MAEPAXI@Z ENDP			; Ogre::BuildingData::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EBuildingData@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EBuildingData@Ogre@@MAEPAXI@Z PROC			; Ogre::BuildingData::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@10
	push	OFFSET ??1BuildingData@Ogre@@MAE@XZ	; Ogre::BuildingData::~BuildingData
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	100					; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@10
	push	100					; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@10:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@10
$LN3@vector@10:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BuildingData@Ogre@@MAE@XZ		; Ogre::BuildingData::~BuildingData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@10
	push	100					; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@10:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@10:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EBuildingData@Ogre@@MAEPAXI@Z ENDP			; Ogre::BuildingData::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector@11:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector@11
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector@11
$LN3@vector@11:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::vector<Ogre::Cell,std::allocator<Ogre::Cell> >
PUBLIC	??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::vector<Ogre::Portal,std::allocator<Ogre::Portal> >
xdata$x	SEGMENT
__unwindtable$??0BuildingData@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BuildingData@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0BuildingData@Ogre@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0BuildingData@Ogre@@QAE@XZ$2
__ehfuncinfo$??0BuildingData@Ogre@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0BuildingData@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebuildingdata.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0BuildingData@Ogre@@QAE@XZ PROC			; Ogre::BuildingData::BuildingData
; _this$ = ecx

; 9    : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BuildingData@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BuildingData@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0BoxBound@Ogre@@QAE@XZ		; Ogre::BoxBound::BoxBound
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::vector<Ogre::Portal,std::allocator<Ogre::Portal> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::vector<Ogre::Cell,std::allocator<Ogre::Cell> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 10   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0BuildingData@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??0BuildingData@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::~vector<Ogre::Portal,std::allocator<Ogre::Portal> >
__unwindfunclet$??0BuildingData@Ogre@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	jmp	??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::~vector<Ogre::Cell,std::allocator<Ogre::Cell> >
__ehhandler$??0BuildingData@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BuildingData@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BuildingData@Ogre@@QAE@XZ ENDP			; Ogre::BuildingData::BuildingData
xdata$x	SEGMENT
__unwindtable$??1BuildingData@Ogre@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BuildingData@Ogre@@MAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1BuildingData@Ogre@@MAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1BuildingData@Ogre@@MAE@XZ$2
__ehfuncinfo$??1BuildingData@Ogre@@MAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1BuildingData@Ogre@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BuildingData@Ogre@@MAE@XZ PROC			; Ogre::BuildingData::~BuildingData
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1BuildingData@Ogre@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BuildingData@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 14   : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::~vector<Ogre::Cell,std::allocator<Ogre::Cell> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::~vector<Ogre::Portal,std::allocator<Ogre::Portal> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1BuildingData@Ogre@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??1BuildingData@Ogre@@MAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::~vector<Ogre::Portal,std::allocator<Ogre::Portal> >
__unwindfunclet$??1BuildingData@Ogre@@MAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	jmp	??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::~vector<Ogre::Cell,std::allocator<Ogre::Cell> >
__ehhandler$??1BuildingData@Ogre@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1BuildingData@Ogre@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1BuildingData@Ogre@@MAE@XZ ENDP			; Ogre::BuildingData::~BuildingData
PUBLIC	??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >::~_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >
PUBLIC	?_Buy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Buy
PUBLIC	??0?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z ; std::_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >
PUBLIC	??0?$allocator@VPortal@Ogre@@@std@@QAE@XZ	; std::allocator<Ogre::Portal>::allocator<Ogre::Portal>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T66705 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::vector<Ogre::Portal,std::allocator<Ogre::Portal> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T66705[ebp], esp
	call	??0?$allocator@VPortal@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::Portal>::allocator<Ogre::Portal>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z ; std::_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::vector<Ogre::Portal,std::allocator<Ogre::Portal> >
PUBLIC	?_Tidy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEPAVPortal@Ogre@@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@1@0PAV23@@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Ucopy<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> > >
PUBLIC	?begin@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::begin
PUBLIC	?end@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::end
PUBLIC	?size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::size
PUBLIC	??0?$allocator@VPortal@Ogre@@@std@@QAE@ABV01@@Z	; std::allocator<Ogre::Portal>::allocator<Ogre::Portal>
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T66717 = -36						; size = 8
$T66716 = -28						; size = 8
$T66715 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::vector<Ogre::Portal,std::allocator<Ogre::Portal> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T66715[ebp], esp
	push	eax
	call	??0?$allocator@VPortal@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::Portal>::allocator<Ogre::Portal>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z ; std::_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@12

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T66716[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T66717[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEPAVPortal@Ogre@@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@1@0PAV23@@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Ucopy<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@12
__catch$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@12
	ret	0
$LN5@vector@12:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@12:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@12:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::vector<Ogre::Portal,std::allocator<Ogre::Portal> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::~vector<Ogre::Portal,std::allocator<Ogre::Portal> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::~vector<Ogre::Portal,std::allocator<Ogre::Portal> >
PUBLIC	?deallocate@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@I@Z ; std::allocator<Ogre::Portal>::deallocate
PUBLIC	??$_Ucopy@PAVPortal@Ogre@@@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEPAVPortal@Ogre@@PAV23@00@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Ucopy<Ogre::Portal *>
PUBLIC	?capacity@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::capacity
PUBLIC	?_Destroy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEXPAVPortal@Ogre@@0@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Destroy
PUBLIC	??$unchecked_copy@PAVPortal@Ogre@@PAV12@@stdext@@YAPAVPortal@Ogre@@PAV12@00@Z ; stdext::unchecked_copy<Ogre::Portal *,Ogre::Portal *>
PUBLIC	?clear@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$60662 = -8					; size = 4
__Ptr$60652 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@4

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@4

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::clear
	jmp	$LN9@operator@4
$LN8@operator@4:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@4

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAVPortal@Ogre@@PAV12@@stdext@@YAPAVPortal@Ogre@@PAV12@00@Z ; stdext::unchecked_copy<Ogre::Portal *,Ogre::Portal *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$60652[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$60652[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEXPAVPortal@Ogre@@0@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::size
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	jmp	$LN9@operator@4
$LN6@operator@4:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@4

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::size
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR __Right$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR __Ptr$60662[ebp], eax

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Ptr$60662[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAVPortal@Ogre@@PAV12@@stdext@@YAPAVPortal@Ogre@@PAV12@00@Z ; stdext::unchecked_copy<Ogre::Portal *,Ogre::Portal *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$60662[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAVPortal@Ogre@@@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEPAVPortal@Ogre@@PAV23@00@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Ucopy<Ogre::Portal *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	$LN9@operator@4
$LN4@operator@4:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@4

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEXPAVPortal@Ogre@@0@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	cdq
	mov	ecx, 144				; 00000090H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@I@Z ; std::allocator<Ogre::Portal>::deallocate
$LN2@operator@4:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@operator@4

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAVPortal@Ogre@@@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEPAVPortal@Ogre@@PAV23@00@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Ucopy<Ogre::Portal *>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
$LN9@operator@4:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >::~_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >
PUBLIC	?_Buy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Buy
PUBLIC	??0?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z ; std::_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >
PUBLIC	??0?$allocator@VCell@Ogre@@@std@@QAE@XZ		; std::allocator<Ogre::Cell>::allocator<Ogre::Cell>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T66746 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::vector<Ogre::Cell,std::allocator<Ogre::Cell> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T66746[ebp], esp
	call	??0?$allocator@VCell@Ogre@@@std@@QAE@XZ	; std::allocator<Ogre::Cell>::allocator<Ogre::Cell>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z ; std::_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::vector<Ogre::Cell,std::allocator<Ogre::Cell> >
PUBLIC	?_Tidy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEPAVCell@Ogre@@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@1@0PAV23@@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Ucopy<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> > >
PUBLIC	?begin@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::begin
PUBLIC	?end@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::end
PUBLIC	?size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::size
PUBLIC	??0?$allocator@VCell@Ogre@@@std@@QAE@ABV01@@Z	; std::allocator<Ogre::Cell>::allocator<Ogre::Cell>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T66758 = -36						; size = 8
$T66757 = -28						; size = 8
$T66756 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::vector<Ogre::Cell,std::allocator<Ogre::Cell> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T66756[ebp], esp
	push	eax
	call	??0?$allocator@VCell@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::Cell>::allocator<Ogre::Cell>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z ; std::_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@13

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T66757[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T66758[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEPAVCell@Ogre@@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@1@0PAV23@@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Ucopy<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@13
__catch$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@13
	ret	0
$LN5@vector@13:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@13:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@13:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::vector<Ogre::Cell,std::allocator<Ogre::Cell> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::~vector<Ogre::Cell,std::allocator<Ogre::Cell> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::~vector<Ogre::Cell,std::allocator<Ogre::Cell> >
PUBLIC	?deallocate@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@I@Z ; std::allocator<Ogre::Cell>::deallocate
PUBLIC	??$_Ucopy@PAVCell@Ogre@@@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEPAVCell@Ogre@@PAV23@00@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Ucopy<Ogre::Cell *>
PUBLIC	?capacity@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::capacity
PUBLIC	?_Destroy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEXPAVCell@Ogre@@0@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Destroy
PUBLIC	??$unchecked_copy@PAVCell@Ogre@@PAV12@@stdext@@YAPAVCell@Ogre@@PAV12@00@Z ; stdext::unchecked_copy<Ogre::Cell *,Ogre::Cell *>
PUBLIC	?clear@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$60821 = -8					; size = 4
__Ptr$60811 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@5

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@5

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::clear
	jmp	$LN9@operator@5
$LN8@operator@5:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@5

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAVCell@Ogre@@PAV12@@stdext@@YAPAVCell@Ogre@@PAV12@00@Z ; stdext::unchecked_copy<Ogre::Cell *,Ogre::Cell *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$60811[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$60811[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEXPAVCell@Ogre@@0@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::size
	imul	eax, 164				; 000000a4H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	jmp	$LN9@operator@5
$LN6@operator@5:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@5

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::size
	imul	eax, 164				; 000000a4H
	mov	ecx, DWORD PTR __Right$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR __Ptr$60821[ebp], eax

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Ptr$60821[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAVCell@Ogre@@PAV12@@stdext@@YAPAVCell@Ogre@@PAV12@00@Z ; stdext::unchecked_copy<Ogre::Cell *,Ogre::Cell *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$60821[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAVCell@Ogre@@@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEPAVCell@Ogre@@PAV23@00@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Ucopy<Ogre::Cell *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	$LN9@operator@5
$LN4@operator@5:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@5

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEXPAVCell@Ogre@@0@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	cdq
	mov	ecx, 164				; 000000a4H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@I@Z ; std::allocator<Ogre::Cell>::deallocate
$LN2@operator@5:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@operator@5

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAVCell@Ogre@@@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEPAVCell@Ogre@@PAV23@00@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Ucopy<Ogre::Cell *>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
$LN9@operator@5:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >::~_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >
__ehhandler$??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >::~_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >::~_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >
__ehhandler$??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >::~_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >
; Function compile flags: /Odtp
;	COMDAT ?capacity@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity
$LN3@capacity:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	cdq
	mov	ecx, 144				; 00000090H
	idiv	ecx
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@PAVPortal@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@PAVPortal@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@PAVPortal@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	cdq
	mov	ecx, 144				; 00000090H
	idiv	ecx

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::erase
PUBLIC	?begin@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::begin
PUBLIC	?end@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T66818 = -40						; size = 8
$T66817 = -32						; size = 8
$T66816 = -24						; size = 8
$T66815 = -16						; size = 8
$T66814 = -8						; size = 8
?clear@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T66815[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T66814[ebp], ecx
	mov	DWORD PTR $T66814[ebp+4], edx
	lea	eax, DWORD PTR $T66817[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T66816[ebp], ecx
	mov	DWORD PTR $T66816[ebp+4], edx
	mov	eax, DWORD PTR $T66814[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T66814[ebp]
	push	ecx
	mov	edx, DWORD PTR $T66816[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T66816[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66818[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@VPortal@Ogre@@@std@@QAEPAVPortal@Ogre@@I@Z ; std::allocator<Ogre::Portal>::allocate
PUBLIC	?_Xlen@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Xlen
PUBLIC	?max_size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy
$LN2@Buy:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@VPortal@Ogre@@@std@@QAEPAVPortal@Ogre@@I@Z ; std::allocator<Ogre::Portal>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 144				; 00000090H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VPortal@Ogre@@@std@@@std@@YAXPAVPortal@Ogre@@0AAV?$allocator@VPortal@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Portal> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEXPAVPortal@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEXPAVPortal@Ogre@@0@Z PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@VPortal@Ogre@@@std@@@std@@YAXPAVPortal@Ogre@@0AAV?$allocator@VPortal@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Portal> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEXPAVPortal@Ogre@@0@Z ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEXPAVPortal@Ogre@@0@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	mov	eax, ecx
	cdq
	mov	ecx, 144				; 00000090H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@I@Z ; std::allocator<Ogre::Portal>::deallocate
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T66827 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T66827[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@VPortal@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::Portal>::allocator<Ogre::Portal>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@VPortal@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::Portal>::allocator<Ogre::Portal>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >
__ehhandler$??0?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_val<Ogre::Portal,std::allocator<Ogre::Portal> >
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >
; Function compile flags: /Odtp
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 402  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@VPortal@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@VPortal@Ogre@@@std@@QAE@XZ PROC		; std::allocator<Ogre::Portal>::allocator<Ogre::Portal>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@VPortal@Ogre@@@std@@QAE@XZ ENDP		; std::allocator<Ogre::Portal>::allocator<Ogre::Portal>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@VPortal@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@VPortal@Ogre@@@std@@QAE@ABV01@@Z PROC	; std::allocator<Ogre::Portal>::allocator<Ogre::Portal>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@VPortal@Ogre@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<Ogre::Portal>::allocator<Ogre::Portal>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@I@Z PROC ; std::allocator<Ogre::Portal>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@I@Z ENDP ; std::allocator<Ogre::Portal>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@2
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@2
$LN3@capacity@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	cdq
	mov	ecx, 164				; 000000a4H
	idiv	ecx
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@2:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@PAVCell@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@PAVCell@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@PAVCell@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	cdq
	mov	ecx, 164				; 000000a4H
	idiv	ecx

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::erase
PUBLIC	?begin@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::begin
PUBLIC	?end@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T66868 = -40						; size = 8
$T66867 = -32						; size = 8
$T66866 = -24						; size = 8
$T66865 = -16						; size = 8
$T66864 = -8						; size = 8
?clear@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T66865[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T66864[ebp], ecx
	mov	DWORD PTR $T66864[ebp+4], edx
	lea	eax, DWORD PTR $T66867[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T66866[ebp], ecx
	mov	DWORD PTR $T66866[ebp+4], edx
	mov	eax, DWORD PTR $T66864[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T66864[ebp]
	push	ecx
	mov	edx, DWORD PTR $T66866[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T66866[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66868[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@VCell@Ogre@@@std@@QAEPAVCell@Ogre@@I@Z ; std::allocator<Ogre::Cell>::allocate
PUBLIC	?_Xlen@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Xlen
PUBLIC	?max_size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@2

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@2
	jmp	SHORT $LN3@Buy@2
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@2

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@2
$LN2@Buy@2:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@VCell@Ogre@@@std@@QAEPAVCell@Ogre@@I@Z ; std::allocator<Ogre::Cell>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 164				; 000000a4H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN3@Buy@2:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@2:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VCell@Ogre@@@std@@@std@@YAXPAVCell@Ogre@@0AAV?$allocator@VCell@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Cell> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEXPAVCell@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEXPAVCell@Ogre@@0@Z PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@VCell@Ogre@@@std@@@std@@YAXPAVCell@Ogre@@0AAV?$allocator@VCell@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Cell> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEXPAVCell@Ogre@@0@Z ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@2

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEXPAVCell@Ogre@@0@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	mov	eax, ecx
	cdq
	mov	ecx, 164				; 000000a4H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@I@Z ; std::allocator<Ogre::Cell>::deallocate
$LN1@Tidy@2:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T66877 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T66877[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@VCell@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::Cell>::allocator<Ogre::Cell>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@VCell@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::Cell>::allocator<Ogre::Cell>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >
__ehhandler$??0?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_val<Ogre::Cell,std::allocator<Ogre::Cell> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@VCell@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@VCell@Ogre@@@std@@QAE@XZ PROC		; std::allocator<Ogre::Cell>::allocator<Ogre::Cell>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@VCell@Ogre@@@std@@QAE@XZ ENDP		; std::allocator<Ogre::Cell>::allocator<Ogre::Cell>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@VCell@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@VCell@Ogre@@@std@@QAE@ABV01@@Z PROC	; std::allocator<Ogre::Cell>::allocator<Ogre::Cell>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@VCell@Ogre@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<Ogre::Cell>::allocator<Ogre::Cell>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@I@Z PROC ; std::allocator<Ogre::Cell>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@I@Z ENDP ; std::allocator<Ogre::Cell>::deallocate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@PAVPortal@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@PAVPortal@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@PAVPortal@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@VPortal@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::Portal>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@VPortal@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::Portal>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::operator!=
PUBLIC	?_Make_iter@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$62144 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAVPortal@Ogre@@PAV12@@stdext@@YAPAVPortal@Ogre@@PAV12@00@Z ; stdext::unchecked_copy<Ogre::Portal *,Ogre::Portal *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$62144[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$62144[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEXPAVPortal@Ogre@@0@Z ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$62144[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::erase
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T66913 = -80						; size = 28
$T66912 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T66913[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T66913[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66912[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T66912[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T66913[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T66913[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Xlen
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 27   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1logic_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$1
__ehfuncinfo$??1logic_error@std@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1logic_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 31   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1logic_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??1logic_error@std@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1logic_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1logic_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Odtp
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@11
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@11:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1length_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1length_error@std@@UAE@XZ$0
__ehfuncinfo$??1length_error@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1length_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1length_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1length_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??1length_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1length_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1length_error@std@@UAE@XZ		; std::length_error::~length_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@12
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@12:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
PUBLIC	??$?0VPortal@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VPortal@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Portal>
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T66979 = -24						; size = 4
$T66978 = -20						; size = 4
$T66977 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0VPortal@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VPortal@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Portal>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T66979[ebp], eax
	mov	ecx, DWORD PTR $T66979[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T66978[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T66978[ebp], 0
	je	SHORT $LN3@Container_
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T66978[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_
$LN3@Container_:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T66977[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T66977[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T66979[ebp]
	push	eax
	mov	ecx, DWORD PTR $T66978[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@VPortal@Ogre@@@std@@@std@@IAE@V?$allocator@VPortal@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Portal> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 58   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 60   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 63   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 64   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
_TEXT	ENDS
PUBLIC	??$_Allocate@VPortal@Ogre@@@std@@YAPAVPortal@Ogre@@IPAV12@@Z ; std::_Allocate<Ogre::Portal>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@VPortal@Ogre@@@std@@QAEPAVPortal@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@VPortal@Ogre@@@std@@QAEPAVPortal@Ogre@@I@Z PROC ; std::allocator<Ogre::Portal>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@VPortal@Ogre@@@std@@YAPAVPortal@Ogre@@IPAV12@@Z ; std::_Allocate<Ogre::Portal>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@VPortal@Ogre@@@std@@QAEPAVPortal@Ogre@@I@Z ENDP ; std::allocator<Ogre::Portal>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@PAVCell@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@PAVCell@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@PAVCell@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@VCell@Ogre@@@std@@QBEIXZ	; std::allocator<Ogre::Cell>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@VCell@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::Cell>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::operator!=
PUBLIC	?_Make_iter@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$62193 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@2

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAVCell@Ogre@@PAV12@@stdext@@YAPAVCell@Ogre@@PAV12@00@Z ; stdext::unchecked_copy<Ogre::Cell *,Ogre::Cell *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$62193[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$62193[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEXPAVCell@Ogre@@0@Z ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$62193[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@2:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T67011 = -80						; size = 28
$T67010 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T67011[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T67011[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67010[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T67010[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T67011[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T67011[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Xlen
PUBLIC	??$?0VCell@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VCell@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Cell>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T67023 = -24						; size = 4
$T67022 = -20						; size = 4
$T67021 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0VCell@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VCell@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Cell>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T67023[ebp], eax
	mov	ecx, DWORD PTR $T67023[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67022[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T67022[ebp], 0
	je	SHORT $LN3@Container_@2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T67022[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@2
$LN3@Container_@2:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@2:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T67021[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T67021[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T67023[ebp]
	push	eax
	mov	ecx, DWORD PTR $T67022[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@VCell@Ogre@@@std@@@std@@IAE@V?$allocator@VCell@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Cell> >
PUBLIC	??$_Allocate@VCell@Ogre@@@std@@YAPAVCell@Ogre@@IPAV12@@Z ; std::_Allocate<Ogre::Cell>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@VCell@Ogre@@@std@@QAEPAVCell@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@VCell@Ogre@@@std@@QAEPAVCell@Ogre@@I@Z PROC ; std::allocator<Ogre::Cell>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@VCell@Ogre@@@std@@YAPAVCell@Ogre@@IPAV12@@Z ; std::_Allocate<Ogre::Cell>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@VCell@Ogre@@@std@@QAEPAVCell@Ogre@@I@Z ENDP ; std::allocator<Ogre::Cell>::allocate
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
PUBLIC	??0?$_Ranit@VPortal@Ogre@@HPBV12@ABV12@@std@@QAE@XZ ; std::_Ranit<Ogre::Portal,int,Ogre::Portal const *,Ogre::Portal const &>::_Ranit<Ogre::Portal,int,Ogre::Portal const *,Ogre::Portal const &>
EXTRN	__imp___invalid_parameter_noinfo:PROC
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@PAVPortal@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@PAVPortal@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@VPortal@Ogre@@HPBV12@ABV12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con
$LN1@Vector_con:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@PAVPortal@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 452  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 454  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	??0?$_Ranit@VCell@Ogre@@HPBV12@ABV12@@std@@QAE@XZ ; std::_Ranit<Ogre::Cell,int,Ogre::Cell const *,Ogre::Cell const &>::_Ranit<Ogre::Cell,int,Ogre::Cell const *,Ogre::Cell const &>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@PAVCell@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@PAVCell@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@VCell@Ogre@@HPBV12@ABV12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@2
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@2
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@2
$LN1@Vector_con@2:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@2:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@PAVCell@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VPortal@Ogre@@HPBV34@ABV34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Portal,int,Ogre::Portal const *,Ogre::Portal const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Portal,int,Ogre::Portal const *,Ogre::Portal const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@VPortal@Ogre@@HPBV12@ABV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@VPortal@Ogre@@HPBV12@ABV12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::Portal,int,Ogre::Portal const *,Ogre::Portal const &>::_Ranit<Ogre::Portal,int,Ogre::Portal const *,Ogre::Portal const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VPortal@Ogre@@HPBV34@ABV34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@VPortal@Ogre@@HPBV12@ABV12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::Portal,int,Ogre::Portal const *,Ogre::Portal const &>::_Ranit<Ogre::Portal,int,Ogre::Portal const *,Ogre::Portal const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VCell@Ogre@@HPBV34@ABV34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Cell,int,Ogre::Cell const *,Ogre::Cell const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Cell,int,Ogre::Cell const *,Ogre::Cell const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@VCell@Ogre@@HPBV12@ABV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@VCell@Ogre@@HPBV12@ABV12@@std@@QAE@XZ PROC	; std::_Ranit<Ogre::Cell,int,Ogre::Cell const *,Ogre::Cell const &>::_Ranit<Ogre::Cell,int,Ogre::Cell const *,Ogre::Cell const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VCell@Ogre@@HPBV34@ABV34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@VCell@Ogre@@HPBV12@ABV12@@std@@QAE@XZ ENDP	; std::_Ranit<Ogre::Cell,int,Ogre::Cell const *,Ogre::Cell const &>::_Ranit<Ogre::Cell,int,Ogre::Cell const *,Ogre::Cell const &>
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VPortal@Ogre@@HPBV34@ABV34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VPortal@Ogre@@HPBV34@ABV34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Portal,int,Ogre::Portal const *,Ogre::Portal const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Portal,int,Ogre::Portal const *,Ogre::Portal const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VPortal@Ogre@@HPBV34@ABV34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Portal,int,Ogre::Portal const *,Ogre::Portal const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Portal,int,Ogre::Portal const *,Ogre::Portal const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VCell@Ogre@@HPBV34@ABV34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VCell@Ogre@@HPBV34@ABV34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Cell,int,Ogre::Cell const *,Ogre::Cell const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Cell,int,Ogre::Cell const *,Ogre::Cell const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VCell@Ogre@@HPBV34@ABV34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Cell,int,Ogre::Cell const *,Ogre::Cell const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Cell,int,Ogre::Cell const *,Ogre::Cell const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@PAVPortal@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@VPortal@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@VPortal@Ogre@@@std@@QBEIXZ PROC	; std::allocator<Ogre::Portal>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 29826161	; 01c71c71H

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@VPortal@Ogre@@@std@@QBEIXZ ENDP	; std::allocator<Ogre::Portal>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@PAVCell@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@VCell@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@VCell@Ogre@@@std@@QBEIXZ PROC	; std::allocator<Ogre::Cell>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 26188824	; 018f9c18H

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@2
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@2
$LN3@max_size@2:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@VCell@Ogre@@@std@@QBEIXZ ENDP	; std::allocator<Ogre::Cell>::max_size
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::operator==
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::operator!=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@PAVPortal@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@PAVPortal@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@PAVPortal@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QAE@PAVPortal@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Vector_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@PAVCell@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@PAVCell@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@PAVCell@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QAE@PAVCell@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Vector_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Odtp
;	COMDAT ??8?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@6
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@6
$LN1@operator@6:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@6:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::operator==
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 462  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 463  : 		return _Myaux == _Other._Myaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Other$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al

; 464  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 467  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 468  : 		return _Myaux != 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	mov	al, cl

; 469  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@7
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@7
$LN1@operator@7:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@7:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::operator==
_TEXT	ENDS
PUBLIC	__real@0000000000000000
;	COMDAT __real@0000000000000000
; File i:\svnroot\client\ogremain\ogremath.h
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??$Abs@M@Ogre@@YAMABM@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_x$ = 8							; size = 4
??$Abs@M@Ogre@@YAMABM@Z PROC				; Ogre::Abs<float>, COMDAT

; 125  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 126  : 		return (x<0.0f) ? (-x) : x;

	mov	eax, DWORD PTR _x$[ebp]
	fld	DWORD PTR [eax]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@Abs
	mov	ecx, DWORD PTR _x$[ebp]
	fld	DWORD PTR [ecx]
	fchs
	fstp	DWORD PTR tv68[ebp]
	jmp	SHORT $LN4@Abs
$LN3@Abs:
	mov	edx, DWORD PTR _x$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR tv68[ebp]
$LN4@Abs:
	fld	DWORD PTR tv68[ebp]

; 127  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$Abs@M@Ogre@@YAMABM@Z ENDP				; Ogre::Abs<float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$Max@M@Ogre@@YAMABM0@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$Max@M@Ogre@@YAMABM0@Z PROC				; Ogre::Max<float>, COMDAT

; 120  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 121  : 		return ( (a) > (b) ? (a) : (b) );

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@Max
	mov	edx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR tv67[ebp]
	jmp	SHORT $LN4@Max
$LN3@Max:
	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR tv67[ebp]
$LN4@Max:
	fld	DWORD PTR tv67[ebp]

; 122  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$Max@M@Ogre@@YAMABM0@Z ENDP				; Ogre::Max<float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$Min@M@Ogre@@YAMABM0@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$Min@M@Ogre@@YAMABM0@Z PROC				; Ogre::Min<float>, COMDAT

; 115  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 116  : 		return ( (a) < (b) ? (a) : (b) );

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@Min
	mov	edx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR tv67[ebp]
	jmp	SHORT $LN4@Min
$LN3@Min:
	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR tv67[ebp]
$LN4@Min:
	fld	DWORD PTR tv67[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$Min@M@Ogre@@YAMABM0@Z ENDP				; Ogre::Min<float>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@PAVPortal@Ogre@@V?$allocator@VPortal@Ogre@@@2@@stdext@@YAPAVPortal@Ogre@@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@0PAV12@AAV?$allocator@VPortal@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >,Ogre::Portal *,std::allocator<Ogre::Portal> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEPAVPortal@Ogre@@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@1@0PAV23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEPAVPortal@Ogre@@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@1@0PAV23@@Z PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Ucopy<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@PAVPortal@Ogre@@V?$allocator@VPortal@Ogre@@@2@@stdext@@YAPAVPortal@Ogre@@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@0PAV12@AAV?$allocator@VPortal@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >,Ogre::Portal *,std::allocator<Ogre::Portal> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEPAVPortal@Ogre@@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@1@0PAV23@@Z ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Ucopy<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAVPortal@Ogre@@PAV12@@std@@YAPAVPortal@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::Portal *,Ogre::Portal *>
PUBLIC	??$_Checked_base@PAVPortal@Ogre@@@std@@YAPAVPortal@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Portal *>
PUBLIC	??$_Iter_random@PAVPortal@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVPortal@Ogre@@0@Z ; std::_Iter_random<Ogre::Portal *,Ogre::Portal *>
PUBLIC	??$_Ptr_cat@PAVPortal@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVPortal@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Portal *,Ogre::Portal *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAVPortal@Ogre@@PAV12@@stdext@@YAPAVPortal@Ogre@@PAV12@00@Z
_TEXT	SEGMENT
$T67111 = -3						; size = 1
$T67110 = -2						; size = 1
$T67109 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAVPortal@Ogre@@PAV12@@stdext@@YAPAVPortal@Ogre@@PAV12@00@Z PROC ; stdext::unchecked_copy<Ogre::Portal *,Ogre::Portal *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T67109[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAVPortal@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVPortal@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Portal *,Ogre::Portal *>
	add	esp, 8
	mov	BYTE PTR $T67110[ebp], al
	movzx	eax, BYTE PTR $T67109[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T67110[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67111[ebp]
	push	ecx
	call	??$_Iter_random@PAVPortal@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVPortal@Ogre@@0@Z ; std::_Iter_random<Ogre::Portal *,Ogre::Portal *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAVPortal@Ogre@@@std@@YAPAVPortal@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Portal *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAVPortal@Ogre@@@std@@YAPAVPortal@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Portal *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAVPortal@Ogre@@PAV12@@std@@YAPAVPortal@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::Portal *,Ogre::Portal *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAVPortal@Ogre@@PAV12@@stdext@@YAPAVPortal@Ogre@@PAV12@00@Z ENDP ; stdext::unchecked_copy<Ogre::Portal *,Ogre::Portal *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@stdext@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::Portal *,Ogre::Portal *,std::allocator<Ogre::Portal> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAVPortal@Ogre@@@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEPAVPortal@Ogre@@PAV23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAVPortal@Ogre@@@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEPAVPortal@Ogre@@PAV23@00@Z PROC ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Ucopy<Ogre::Portal *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@stdext@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::Portal *,Ogre::Portal *,std::allocator<Ogre::Portal> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAVPortal@Ogre@@@?$vector@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@IAEPAVPortal@Ogre@@PAV23@00@Z ENDP ; std::vector<Ogre::Portal,std::allocator<Ogre::Portal> >::_Ucopy<Ogre::Portal *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@PAVCell@Ogre@@V?$allocator@VCell@Ogre@@@2@@stdext@@YAPAVCell@Ogre@@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@0PAV12@AAV?$allocator@VCell@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >,Ogre::Cell *,std::allocator<Ogre::Cell> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEPAVCell@Ogre@@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@1@0PAV23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEPAVCell@Ogre@@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@1@0PAV23@@Z PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Ucopy<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@PAVCell@Ogre@@V?$allocator@VCell@Ogre@@@2@@stdext@@YAPAVCell@Ogre@@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@0PAV12@AAV?$allocator@VCell@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >,Ogre::Cell *,std::allocator<Ogre::Cell> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEPAVCell@Ogre@@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@1@0PAV23@@Z ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Ucopy<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAVCell@Ogre@@PAV12@@std@@YAPAVCell@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::Cell *,Ogre::Cell *>
PUBLIC	??$_Checked_base@PAVCell@Ogre@@@std@@YAPAVCell@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Cell *>
PUBLIC	??$_Iter_random@PAVCell@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVCell@Ogre@@0@Z ; std::_Iter_random<Ogre::Cell *,Ogre::Cell *>
PUBLIC	??$_Ptr_cat@PAVCell@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVCell@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Cell *,Ogre::Cell *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAVCell@Ogre@@PAV12@@stdext@@YAPAVCell@Ogre@@PAV12@00@Z
_TEXT	SEGMENT
$T67120 = -3						; size = 1
$T67119 = -2						; size = 1
$T67118 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAVCell@Ogre@@PAV12@@stdext@@YAPAVCell@Ogre@@PAV12@00@Z PROC ; stdext::unchecked_copy<Ogre::Cell *,Ogre::Cell *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T67118[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAVCell@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVCell@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Cell *,Ogre::Cell *>
	add	esp, 8
	mov	BYTE PTR $T67119[ebp], al
	movzx	eax, BYTE PTR $T67118[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T67119[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67120[ebp]
	push	ecx
	call	??$_Iter_random@PAVCell@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVCell@Ogre@@0@Z ; std::_Iter_random<Ogre::Cell *,Ogre::Cell *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAVCell@Ogre@@@std@@YAPAVCell@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Cell *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAVCell@Ogre@@@std@@YAPAVCell@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Cell *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAVCell@Ogre@@PAV12@@std@@YAPAVCell@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::Cell *,Ogre::Cell *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAVCell@Ogre@@PAV12@@stdext@@YAPAVCell@Ogre@@PAV12@00@Z ENDP ; stdext::unchecked_copy<Ogre::Cell *,Ogre::Cell *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@stdext@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::Cell *,Ogre::Cell *,std::allocator<Ogre::Cell> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAVCell@Ogre@@@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEPAVCell@Ogre@@PAV23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAVCell@Ogre@@@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEPAVCell@Ogre@@PAV23@00@Z PROC ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Ucopy<Ogre::Cell *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@stdext@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::Cell *,Ogre::Cell *,std::allocator<Ogre::Cell> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAVCell@Ogre@@@?$vector@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@IAEPAVCell@Ogre@@PAV23@00@Z ENDP ; std::vector<Ogre::Cell,std::allocator<Ogre::Cell> >::_Ucopy<Ogre::Cell *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VPortal@Ogre@@@std@@@std@@YAXPAVPortal@Ogre@@0AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Portal> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VPortal@Ogre@@@std@@@std@@YAXPAVPortal@Ogre@@0AAV?$allocator@VPortal@Ogre@@@0@@Z
_TEXT	SEGMENT
$T67125 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VPortal@Ogre@@@std@@@std@@YAXPAVPortal@Ogre@@0AAV?$allocator@VPortal@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::Portal> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVPortal@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVPortal@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Portal *,Ogre::Portal *>
	add	esp, 8
	mov	BYTE PTR $T67125[ebp], al
	movzx	edx, BYTE PTR $T67125[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@VPortal@Ogre@@@std@@@std@@YAXPAVPortal@Ogre@@0AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Portal> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@VPortal@Ogre@@@std@@@std@@YAXPAVPortal@Ogre@@0AAV?$allocator@VPortal@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::Portal> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VCell@Ogre@@@std@@@std@@YAXPAVCell@Ogre@@0AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Cell> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@VCell@Ogre@@@std@@@std@@YAXPAVCell@Ogre@@0AAV?$allocator@VCell@Ogre@@@0@@Z
_TEXT	SEGMENT
$T67128 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VCell@Ogre@@@std@@@std@@YAXPAVCell@Ogre@@0AAV?$allocator@VCell@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::Cell> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVCell@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVCell@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Cell *,Ogre::Cell *>
	add	esp, 8
	mov	BYTE PTR $T67128[ebp], al
	movzx	edx, BYTE PTR $T67128[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@VCell@Ogre@@@std@@@std@@YAXPAVCell@Ogre@@0AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Cell> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@VCell@Ogre@@@std@@@std@@YAXPAVCell@Ogre@@0AAV?$allocator@VCell@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::Cell> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0VPortal@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VPortal@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0VPortal@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VPortal@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Portal>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0VPortal@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VPortal@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Portal>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Allocate@VPortal@Ogre@@@std@@YAPAVPortal@Ogre@@IPAV12@@Z
_TEXT	SEGMENT
$T67133 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VPortal@Ogre@@@std@@YAPAVPortal@Ogre@@IPAV12@@Z PROC ; std::_Allocate<Ogre::Portal>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 144				; 00000090H
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T67133[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T67133[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 144				; 00000090H
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@VPortal@Ogre@@@std@@YAPAVPortal@Ogre@@IPAV12@@Z ENDP ; std::_Allocate<Ogre::Portal>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_alloc@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0
__ehfuncinfo$??1bad_alloc@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_alloc@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1bad_alloc@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 381  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??1bad_alloc@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1bad_alloc@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ		; std::bad_alloc::~bad_alloc
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@13
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@13:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0VCell@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VCell@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0VCell@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VCell@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Cell>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0VCell@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VCell@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Cell>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@VCell@Ogre@@@std@@YAPAVCell@Ogre@@IPAV12@@Z
_TEXT	SEGMENT
$T67158 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VCell@Ogre@@@std@@YAPAVCell@Ogre@@IPAV12@@Z PROC ; std::_Allocate<Ogre::Cell>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 164				; 000000a4H
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T67158[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T67158[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 164				; 000000a4H
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@VCell@Ogre@@@std@@YAPAVCell@Ogre@@IPAV12@@Z ENDP ; std::_Allocate<Ogre::Cell>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T67161 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@3
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T67161[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T67161[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@3:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
PUBLIC	??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Portal const *,Ogre::Portal *,std::allocator<Ogre::Portal> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@@std@@YAPBVPortal@Ogre@@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@PAVPortal@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@AAPAVPortal@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >,Ogre::Portal *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@PAVPortal@Ogre@@V?$allocator@VPortal@Ogre@@@2@@stdext@@YAPAVPortal@Ogre@@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@0PAV12@AAV?$allocator@VPortal@Ogre@@@4@@Z
_TEXT	SEGMENT
$T67174 = -2						; size = 1
$T67173 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@PAVPortal@Ogre@@V?$allocator@VPortal@Ogre@@@2@@stdext@@YAPAVPortal@Ogre@@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@0PAV12@AAV?$allocator@VPortal@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >,Ogre::Portal *,std::allocator<Ogre::Portal> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T67173[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@PAVPortal@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@AAPAVPortal@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >,Ogre::Portal *>
	add	esp, 8
	mov	BYTE PTR $T67174[ebp], al
	movzx	eax, BYTE PTR $T67173[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T67174[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@@std@@YAPBVPortal@Ogre@@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@@std@@YAPBVPortal@Ogre@@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Portal const *,Ogre::Portal *,std::allocator<Ogre::Portal> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@PAVPortal@Ogre@@V?$allocator@VPortal@Ogre@@@2@@stdext@@YAPAVPortal@Ogre@@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@0PAV12@AAV?$allocator@VPortal@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >,Ogre::Portal *,std::allocator<Ogre::Portal> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAVPortal@Ogre@@@std@@YAPAVPortal@Ogre@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::Portal *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAVPortal@Ogre@@@std@@YAPAVPortal@Ogre@@AAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAVPortal@Ogre@@@std@@YAPAVPortal@Ogre@@AAPAV12@@Z PROC ; std::_Checked_base<Ogre::Portal *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAVPortal@Ogre@@@std@@YAPAVPortal@Ogre@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::Portal *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAVPortal@Ogre@@@std@@YAPAVPortal@Ogre@@AAPAV12@@Z ENDP ; std::_Checked_base<Ogre::Portal *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAVPortal@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVPortal@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAVPortal@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVPortal@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::Portal *,Ogre::Portal *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAVPortal@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVPortal@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::Portal *,Ogre::Portal *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAVPortal@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVPortal@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVPortal@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVPortal@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::Portal *,Ogre::Portal *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAVPortal@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVPortal@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::Portal *,Ogre::Portal *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAVPortal@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVPortal@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::Portal *,Ogre::Portal *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAVPortal@Ogre@@PAV12@@std@@YAPAVPortal@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T67185 = -7						; size = 1
$T67184 = -6						; size = 1
$T67183 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAVPortal@Ogre@@PAV12@@std@@YAPAVPortal@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::Portal *,Ogre::Portal *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 144				; 00000090H
	idiv	ecx
	imul	eax, 144				; 00000090H
	add	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Result$[ebp], eax

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T67183[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T67184[ebp], al
	movzx	ecx, BYTE PTR $T67183[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T67184[ebp]
	push	edx
	movzx	eax, BYTE PTR $T67185[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAVPortal@Ogre@@@std@@YAPAVPortal@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Portal *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_opt@PAVPortal@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVPortal@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::Portal *,Ogre::Portal *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAVPortal@Ogre@@PAV12@@std@@YAPAVPortal@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::Portal *,Ogre::Portal *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Portal *,Ogre::Portal *,std::allocator<Ogre::Portal> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@stdext@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T67189 = -2						; size = 1
$T67188 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@stdext@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::Portal *,Ogre::Portal *,std::allocator<Ogre::Portal> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T67188[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAVPortal@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVPortal@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Portal *,Ogre::Portal *>
	add	esp, 8
	mov	BYTE PTR $T67189[ebp], al
	movzx	eax, BYTE PTR $T67188[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T67189[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAVPortal@Ogre@@@std@@YAPAVPortal@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Portal *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAVPortal@Ogre@@@std@@YAPAVPortal@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Portal *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Portal *,Ogre::Portal *,std::allocator<Ogre::Portal> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@stdext@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::Portal *,Ogre::Portal *,std::allocator<Ogre::Portal> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Cell const *,Ogre::Cell *,std::allocator<Ogre::Cell> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@@std@@YAPBVCell@Ogre@@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@PAVCell@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@AAPAVCell@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >,Ogre::Cell *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@PAVCell@Ogre@@V?$allocator@VCell@Ogre@@@2@@stdext@@YAPAVCell@Ogre@@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@0PAV12@AAV?$allocator@VCell@Ogre@@@4@@Z
_TEXT	SEGMENT
$T67193 = -2						; size = 1
$T67192 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@PAVCell@Ogre@@V?$allocator@VCell@Ogre@@@2@@stdext@@YAPAVCell@Ogre@@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@0PAV12@AAV?$allocator@VCell@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >,Ogre::Cell *,std::allocator<Ogre::Cell> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T67192[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@PAVCell@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@AAPAVCell@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >,Ogre::Cell *>
	add	esp, 8
	mov	BYTE PTR $T67193[ebp], al
	movzx	eax, BYTE PTR $T67192[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T67193[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@@std@@YAPBVCell@Ogre@@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@@std@@YAPBVCell@Ogre@@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Cell const *,Ogre::Cell *,std::allocator<Ogre::Cell> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@PAVCell@Ogre@@V?$allocator@VCell@Ogre@@@2@@stdext@@YAPAVCell@Ogre@@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@0PAV12@AAV?$allocator@VCell@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >,Ogre::Cell *,std::allocator<Ogre::Cell> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAVCell@Ogre@@@std@@YAPAVCell@Ogre@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::Cell *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAVCell@Ogre@@@std@@YAPAVCell@Ogre@@AAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAVCell@Ogre@@@std@@YAPAVCell@Ogre@@AAPAV12@@Z PROC ; std::_Checked_base<Ogre::Cell *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAVCell@Ogre@@@std@@YAPAVCell@Ogre@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::Cell *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAVCell@Ogre@@@std@@YAPAVCell@Ogre@@AAPAV12@@Z ENDP ; std::_Checked_base<Ogre::Cell *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAVCell@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVCell@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAVCell@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVCell@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::Cell *,Ogre::Cell *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAVCell@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVCell@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::Cell *,Ogre::Cell *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAVCell@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVCell@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVCell@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVCell@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::Cell *,Ogre::Cell *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAVCell@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVCell@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::Cell *,Ogre::Cell *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAVCell@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVCell@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::Cell *,Ogre::Cell *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAVCell@Ogre@@PAV12@@std@@YAPAVCell@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T67204 = -7						; size = 1
$T67203 = -6						; size = 1
$T67202 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAVCell@Ogre@@PAV12@@std@@YAPAVCell@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::Cell *,Ogre::Cell *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 164				; 000000a4H
	idiv	ecx
	imul	eax, 164				; 000000a4H
	add	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Result$[ebp], eax

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T67202[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T67203[ebp], al
	movzx	ecx, BYTE PTR $T67202[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T67203[ebp]
	push	edx
	movzx	eax, BYTE PTR $T67204[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAVCell@Ogre@@@std@@YAPAVCell@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Cell *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_opt@PAVCell@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVCell@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::Cell *,Ogre::Cell *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAVCell@Ogre@@PAV12@@std@@YAPAVCell@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::Cell *,Ogre::Cell *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Cell *,Ogre::Cell *,std::allocator<Ogre::Cell> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@stdext@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T67208 = -2						; size = 1
$T67207 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@stdext@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::Cell *,Ogre::Cell *,std::allocator<Ogre::Cell> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T67207[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAVCell@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVCell@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Cell *,Ogre::Cell *>
	add	esp, 8
	mov	BYTE PTR $T67208[ebp], al
	movzx	eax, BYTE PTR $T67207[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T67208[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAVCell@Ogre@@@std@@YAPAVCell@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Cell *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAVCell@Ogre@@@std@@YAPAVCell@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Cell *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Cell *,Ogre::Cell *,std::allocator<Ogre::Cell> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@stdext@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::Cell *,Ogre::Cell *,std::allocator<Ogre::Cell> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@@Z ; std::allocator<Ogre::Portal>::destroy
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VPortal@Ogre@@@std@@@std@@YAXPAVPortal@Ogre@@0AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@VPortal@Ogre@@@std@@@std@@YAXPAVPortal@Ogre@@0AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::Portal> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 144				; 00000090H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@@Z ; std::allocator<Ogre::Portal>::destroy
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@VPortal@Ogre@@@std@@@std@@YAXPAVPortal@Ogre@@0AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::Portal> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@@Z ; std::allocator<Ogre::Cell>::destroy
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@VCell@Ogre@@@std@@@std@@YAXPAVCell@Ogre@@0AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@VCell@Ogre@@@std@@@std@@YAXPAVCell@Ogre@@0AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::Cell> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra@2
$LN2@Destroy_ra@2:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 164				; 000000a4H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@2:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra@2

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@@Z ; std::allocator<Ogre::Cell>::destroy
	jmp	SHORT $LN2@Destroy_ra@2
$LN4@Destroy_ra@2:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@VCell@Ogre@@@std@@@std@@YAXPAVCell@Ogre@@0AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::Cell> >
_TEXT	ENDS
PUBLIC	??$_Destroy@VPortal@Ogre@@@std@@YAXPAVPortal@Ogre@@@Z ; std::_Destroy<Ogre::Portal>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@@Z PROC ; std::allocator<Ogre::Portal>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@VPortal@Ogre@@@std@@YAXPAVPortal@Ogre@@@Z ; std::_Destroy<Ogre::Portal>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@@Z ENDP ; std::allocator<Ogre::Portal>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@VCell@Ogre@@@std@@YAXPAVCell@Ogre@@@Z ; std::_Destroy<Ogre::Cell>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@@Z PROC ; std::allocator<Ogre::Cell>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@VCell@Ogre@@@std@@YAXPAVCell@Ogre@@@Z ; std::_Destroy<Ogre::Cell>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@@Z ENDP ; std::allocator<Ogre::Cell>::destroy
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBVPortal@Ogre@@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@@std@@YAPBVPortal@Ogre@@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@@std@@YAPBVPortal@Ogre@@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBVPortal@Ogre@@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@@std@@YAPBVPortal@Ogre@@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@PAVPortal@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@AAPAVPortal@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@PAVPortal@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@AAPAVPortal@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >,Ogre::Portal *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@PAVPortal@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@AAPAVPortal@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >,Ogre::Portal *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@ABV34@@Z ; std::allocator<Ogre::Portal>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::Portal const *,Ogre::Portal *,std::allocator<Ogre::Portal> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 144				; 00000090H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 144				; 00000090H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@ABV34@@Z ; std::allocator<Ogre::Portal>::construct
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 144				; 00000090H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@@Z ; std::allocator<Ogre::Portal>::destroy
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PBV12@0PAV12@AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::Portal const *,Ogre::Portal *,std::allocator<Ogre::Portal> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAVPortal@Ogre@@@std@@YAPAVPortal@Ogre@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAVPortal@Ogre@@@std@@YAPAVPortal@Ogre@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::Portal *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAVPortal@Ogre@@@std@@YAPAVPortal@Ogre@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::Portal *>
_TEXT	ENDS
PUBLIC	??4Portal@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Portal::operator=
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAVPortal@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVPortal@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAVPortal@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVPortal@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::Portal *,Ogre::Portal *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt
$LN2@Copy_opt:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 144				; 00000090H
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 144				; 00000090H
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	call	??4Portal@Ogre@@QAEAAV01@ABV01@@Z
	jmp	SHORT $LN2@Copy_opt
$LN1@Copy_opt:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAVPortal@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVPortal@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::Portal *,Ogre::Portal *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::Portal *,Ogre::Portal *,std::allocator<Ogre::Portal> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@2
$LN5@Uninit_cop@2:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 144				; 00000090H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 144				; 00000090H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@2:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@ABV34@@Z ; std::allocator<Ogre::Portal>::construct
	jmp	SHORT $LN5@Uninit_cop@2
$LN4@Uninit_cop@2:
	jmp	SHORT $LN10@Uninit_cop@2
__catch$??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@2
$LN2@Uninit_cop@2:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 144				; 00000090H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@2:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@2

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@@Z ; std::allocator<Ogre::Portal>::destroy
	jmp	SHORT $LN2@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@2:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAVPortal@Ogre@@PAV12@V?$allocator@VPortal@Ogre@@@std@@@std@@YAPAVPortal@Ogre@@PAV12@00AAV?$allocator@VPortal@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::Portal *,Ogre::Portal *,std::allocator<Ogre::Portal> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBVCell@Ogre@@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@@std@@YAPBVCell@Ogre@@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@@std@@YAPBVCell@Ogre@@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBVCell@Ogre@@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@@std@@YAPBVCell@Ogre@@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@PAVCell@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@AAPAVCell@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@PAVCell@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@AAPAVCell@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >,Ogre::Cell *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@PAVCell@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@AAPAVCell@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >,Ogre::Cell *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@ABV34@@Z ; std::allocator<Ogre::Cell>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::Cell const *,Ogre::Cell *,std::allocator<Ogre::Cell> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@3
$LN5@Uninit_cop@3:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 164				; 000000a4H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 164				; 000000a4H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@3:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@3

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@ABV34@@Z ; std::allocator<Ogre::Cell>::construct
	jmp	SHORT $LN5@Uninit_cop@3
$LN4@Uninit_cop@3:
	jmp	SHORT $LN10@Uninit_cop@3
__catch$??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@3
$LN2@Uninit_cop@3:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 164				; 000000a4H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@3:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@3

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@@Z ; std::allocator<Ogre::Cell>::destroy
	jmp	SHORT $LN2@Uninit_cop@3
$LN1@Uninit_cop@3:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@3:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PBV12@0PAV12@AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::Cell const *,Ogre::Cell *,std::allocator<Ogre::Cell> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAVCell@Ogre@@@std@@YAPAVCell@Ogre@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAVCell@Ogre@@@std@@YAPAVCell@Ogre@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::Cell *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAVCell@Ogre@@@std@@YAPAVCell@Ogre@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::Cell *>
_TEXT	ENDS
PUBLIC	??4Cell@Ogre@@QAEAAV01@ABV01@@Z			; Ogre::Cell::operator=
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAVCell@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVCell@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAVCell@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVCell@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::Cell *,Ogre::Cell *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@2
$LN2@Copy_opt@2:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 164				; 000000a4H
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 164				; 000000a4H
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@2:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@2

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	call	??4Cell@Ogre@@QAEAAV01@ABV01@@Z
	jmp	SHORT $LN2@Copy_opt@2
$LN1@Copy_opt@2:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAVCell@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVCell@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::Cell *,Ogre::Cell *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::Cell *,Ogre::Cell *,std::allocator<Ogre::Cell> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@4
$LN5@Uninit_cop@4:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 164				; 000000a4H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 164				; 000000a4H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@4:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@4

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@ABV34@@Z ; std::allocator<Ogre::Cell>::construct
	jmp	SHORT $LN5@Uninit_cop@4
$LN4@Uninit_cop@4:
	jmp	SHORT $LN10@Uninit_cop@4
__catch$??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@4
$LN2@Uninit_cop@4:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 164				; 000000a4H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@4:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@4

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@@Z ; std::allocator<Ogre::Cell>::destroy
	jmp	SHORT $LN2@Uninit_cop@4
$LN1@Uninit_cop@4:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@4:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAVCell@Ogre@@PAV12@V?$allocator@VCell@Ogre@@@std@@@std@@YAPAVCell@Ogre@@PAV12@00AAV?$allocator@VCell@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::Cell *,Ogre::Cell *,std::allocator<Ogre::Cell> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@VPortal@Ogre@@@std@@YAXPAVPortal@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@VPortal@Ogre@@@std@@YAXPAVPortal@Ogre@@@Z PROC ; std::_Destroy<Ogre::Portal>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@VPortal@Ogre@@@std@@YAXPAVPortal@Ogre@@@Z ENDP ; std::_Destroy<Ogre::Portal>
_TEXT	ENDS
PUBLIC	??_GCell@Ogre@@QAEPAXI@Z			; Ogre::Cell::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy@VCell@Ogre@@@std@@YAXPAVCell@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@VCell@Ogre@@@std@@YAXPAVCell@Ogre@@@Z PROC	; std::_Destroy<Ogre::Cell>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_GCell@Ogre@@QAEPAXI@Z

; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@VCell@Ogre@@@std@@YAXPAVCell@Ogre@@@Z ENDP	; std::_Destroy<Ogre::Cell>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??4Portal@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_$S1$64067 = -4						; size = 4
___that$ = 8						; size = 4
??4Portal@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Portal::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR _$S1$64067[ebp], 0
	jmp	SHORT $LN3@operator@8
$LN2@operator@8:
	mov	eax, DWORD PTR _$S1$64067[ebp]
	add	eax, 1
	mov	DWORD PTR _$S1$64067[ebp], eax
$LN3@operator@8:
	cmp	DWORD PTR _$S1$64067[ebp], 10		; 0000000aH
	jae	SHORT $LN1@operator@8
	mov	ecx, DWORD PTR _$S1$64067[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR ___that$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _$S1$64067[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	jmp	SHORT $LN2@operator@8
$LN1@operator@8:
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 120				; 00000078H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR [eax+132], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR [eax+136], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR [eax+140], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Portal@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Portal::operator=
_TEXT	ENDS
PUBLIC	??4?$list@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::list<int,std::allocator<int> >::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Cell@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_$S2$64073 = -4						; size = 4
___that$ = 8						; size = 4
??4Cell@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Cell::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR _$S2$64073[ebp], 0
	jmp	SHORT $LN3@operator@9
$LN2@operator@9:
	mov	eax, DWORD PTR _$S2$64073[ebp]
	add	eax, 1
	mov	DWORD PTR _$S2$64073[ebp], eax
$LN3@operator@9:
	cmp	DWORD PTR _$S2$64073[ebp], 128		; 00000080H
	jae	SHORT $LN1@operator@9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _$S2$64073[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, DWORD PTR _$S2$64073[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	jmp	SHORT $LN2@operator@9
$LN1@operator@9:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	DWORD PTR [ecx+128], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	DWORD PTR [ecx+132], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 136				; 00000088H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??4?$list@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::list<int,std::allocator<int> >::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Cell@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Cell::operator=
_TEXT	ENDS
PUBLIC	??1Cell@Ogre@@QAE@XZ				; Ogre::Cell::~Cell
; Function compile flags: /Odtp
;	COMDAT ??_GCell@Ogre@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCell@Ogre@@QAEPAXI@Z PROC				; Ogre::Cell::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Cell@Ogre@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@14
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@14:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCell@Ogre@@QAEPAXI@Z ENDP				; Ogre::Cell::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$list@HV?$allocator@H@std@@@std@@QAE@XZ	; std::list<int,std::allocator<int> >::~list<int,std::allocator<int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Cell@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Cell@Ogre@@QAE@XZ$0
__ehfuncinfo$??1Cell@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Cell@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1Cell@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Cell@Ogre@@QAE@XZ PROC				; Ogre::Cell::~Cell, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Cell@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??1?$list@HV?$allocator@H@std@@@std@@QAE@XZ ; std::list<int,std::allocator<int> >::~list<int,std::allocator<int> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Cell@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	jmp	??1?$list@HV?$allocator@H@std@@@std@@QAE@XZ ; std::list<int,std::allocator<int> >::~list<int,std::allocator<int> >
__ehhandler$??1Cell@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Cell@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Cell@Ogre@@QAE@XZ ENDP				; Ogre::Cell::~Cell
PUBLIC	??1?$_List_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_List_val<int,std::allocator<int> >::~_List_val<int,std::allocator<int> >
PUBLIC	?_Tidy@?$list@HV?$allocator@H@std@@@std@@IAEXXZ	; std::list<int,std::allocator<int> >::_Tidy
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__unwindtable$??1?$list@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$list@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$list@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$list@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$list@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$list@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::list<int,std::allocator<int> >::~list<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 520  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$list@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 521  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$list@HV?$allocator@H@std@@@std@@IAEXXZ ; std::list<int,std::allocator<int> >::_Tidy

; 522  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_val@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$list@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??1?$list@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$list@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$list@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::list<int,std::allocator<int> >::~list<int,std::allocator<int> >
PUBLIC	??$assign@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@0@Z ; std::list<int,std::allocator<int> >::assign<std::list<int,std::allocator<int> >::_Const_iterator<1> >
PUBLIC	?begin@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<int,std::allocator<int> >::begin
PUBLIC	?end@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<int,std::allocator<int> >::end
; Function compile flags: /Odtp
;	COMDAT ??4?$list@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T67324 = -16						; size = 8
$T67323 = -8						; size = 8
__Right$ = 8						; size = 4
??4?$list@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::list<int,std::allocator<int> >::operator=, COMDAT
; _this$ = ecx

; 525  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 526  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	SHORT $LN1@operator@10

; 527  : 			assign(_Right.begin(), _Right.end());

	lea	ecx, DWORD PTR $T67323[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<int,std::allocator<int> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T67324[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<int,std::allocator<int> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$assign@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@0@Z ; std::list<int,std::allocator<int> >::assign<std::list<int,std::allocator<int> >::_Const_iterator<1> >
$LN1@operator@10:

; 528  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 529  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4?$list@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::list<int,std::allocator<int> >::operator=
_TEXT	ENDS
PUBLIC	??$_Construct@VPortal@Ogre@@V12@@std@@YAXPAVPortal@Ogre@@ABV12@@Z ; std::_Construct<Ogre::Portal,Ogre::Portal>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@ABV34@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@ABV34@@Z PROC ; std::allocator<Ogre::Portal>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@VPortal@Ogre@@V12@@std@@YAXPAVPortal@Ogre@@ABV12@@Z ; std::_Construct<Ogre::Portal,Ogre::Portal>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@VPortal@Ogre@@@std@@QAEXPAVPortal@Ogre@@ABV34@@Z ENDP ; std::allocator<Ogre::Portal>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@VCell@Ogre@@V12@@std@@YAXPAVCell@Ogre@@ABV12@@Z ; std::_Construct<Ogre::Cell,Ogre::Cell>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@ABV34@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@ABV34@@Z PROC ; std::allocator<Ogre::Cell>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@VCell@Ogre@@V12@@std@@YAXPAVCell@Ogre@@ABV12@@Z ; std::_Construct<Ogre::Cell,Ogre::Cell>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@VCell@Ogre@@@std@@QAEXPAVCell@Ogre@@ABV34@@Z ENDP ; std::allocator<Ogre::Cell>::construct
_TEXT	ENDS
PUBLIC	??1?$_List_ptr@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_List_ptr<int,std::allocator<int> >::~_List_ptr<int,std::allocator<int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_List_val@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_List_val@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_List_val@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_List_val@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_List_val@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_List_val@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_List_val<int,std::allocator<int> >::~_List_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_List_val@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_ptr@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_List_val@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_ptr@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??1?$_List_val@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_List_val@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_List_val@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_List_val<int,std::allocator<int> >::~_List_val<int,std::allocator<int> >
PUBLIC	??1?$_List_nod@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_List_nod<int,std::allocator<int> >::~_List_nod<int,std::allocator<int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_List_ptr@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_List_ptr@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_List_ptr@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_List_ptr@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_List_ptr@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_List_ptr@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_List_ptr<int,std::allocator<int> >::~_List_ptr<int,std::allocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_List_ptr@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_nod@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_List_ptr@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_nod@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??1?$_List_ptr@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_List_ptr@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_List_ptr@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_List_ptr<int,std::allocator<int> >::~_List_ptr<int,std::allocator<int> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<int> >::~_Container_base_aux_alloc_real<std::allocator<int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_List_nod@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_List_nod@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_List_nod@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_List_nod@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_List_nod@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_List_nod@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_List_nod<int,std::allocator<int> >::~_List_nod<int,std::allocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_List_nod@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<int> >::~_Container_base_aux_alloc_real<std::allocator<int> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_List_nod@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<int> >::~_Container_base_aux_alloc_real<std::allocator<int> >
__ehhandler$??1?$_List_nod@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_List_nod@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_List_nod@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_List_nod<int,std::allocator<int> >::~_List_nod<int,std::allocator<int> >
PUBLIC	??0?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PBV12@@Z ; std::list<int,std::allocator<int> >::_Const_iterator<1>::_Const_iterator<1>
PUBLIC	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?begin@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 538  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 539  : 		return (const_iterator(_Nextnode(_Myhead), this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PBV12@@Z ; std::list<int,std::allocator<int> >::_Const_iterator<1>::_Const_iterator<1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 540  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<int,std::allocator<int> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 548  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 549  : 		return (const_iterator(_Myhead, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PBV12@@Z ; std::list<int,std::allocator<int> >::_Const_iterator<1>::_Const_iterator<1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 550  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<int,std::allocator<int> >::end
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@I@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::deallocate
PUBLIC	?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Prevnode
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::destroy
PUBLIC	?clear@?$list@HV?$allocator@H@std@@@std@@QAEXXZ	; std::list<int,std::allocator<int> >::clear
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$list@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$list@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::list<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1212 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1213 : 		clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$list@HV?$allocator@H@std@@@std@@QAEXXZ ; std::list<int,std::allocator<int> >::clear

; 1214 : 		this->_Alptr.destroy(&_Nextnode(_Myhead));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?destroy@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::destroy

; 1215 : 		this->_Alptr.destroy(&_Prevnode(_Myhead));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Prevnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?destroy@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::destroy

; 1216 : 		this->_Alnod.deallocate(_Myhead, 1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@I@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::deallocate

; 1217 : 		_Myhead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1218 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$list@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::list<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<int> >::~_Container_base_aux_alloc_real<std::allocator<int> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<int> >::~_Container_base_aux_alloc_real<std::allocator<int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z PROC ; std::list<int,std::allocator<int> >::_Nextnode, COMDAT

; 114  : 		{	// return reference to successor pointer in node

	push	ebp
	mov	ebp, esp

; 115  : 		return ((_Nodepref)(*_Pnode)._Next);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 116  : 		}

	pop	ebp
	ret	0
?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ENDP ; std::list<int,std::allocator<int> >::_Nextnode
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z PROC ; std::list<int,std::allocator<int> >::_Prevnode, COMDAT

; 119  : 		{	// return reference to predecessor pointer in node

	push	ebp
	mov	ebp, esp

; 120  : 		return ((_Nodepref)(*_Pnode)._Prev);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4

; 121  : 		}

	pop	ebp
	ret	0
?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ENDP ; std::list<int,std::allocator<int> >::_Prevnode
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::destroy
; Function compile flags: /Odtp
;	COMDAT ?clear@?$list@HV?$allocator@H@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Pnext$ = -8						; size = 4
__Pnode$ = -4						; size = 4
?clear@?$list@HV?$allocator@H@std@@@std@@QAEXXZ PROC	; std::list<int,std::allocator<int> >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], edx

; 833  : 		_Nextnode(_Myhead) = _Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax], ecx

; 834  : 		_Prevnode(_Myhead) = _Myhead;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax], edx

; 835  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

	jmp	SHORT $LN3@clear
$LN2@clear:
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN3@clear:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	cmp	eax, DWORD PTR [edx+20]
	je	SHORT $LN4@clear

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnext$[ebp], edx

; 840  : 			this->_Alnod.destroy(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?destroy@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::destroy

; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@I@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::deallocate

; 842  : 			}

	jmp	SHORT $LN2@clear
$LN4@clear:

; 843  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$list@HV?$allocator@H@std@@@std@@QAEXXZ ENDP	; std::list<int,std::allocator<int> >::clear
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@@Z ; std::_Destroy<std::_List_nod<int,std::allocator<int> >::_Node *>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z PROC ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@@Z ; std::_Destroy<std::_List_nod<int,std::allocator<int> >::_Node *>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	??0?$_Bidit@HHPBHABH@std@@QAE@XZ		; std::_Bidit<int,int,int const *,int const &>::_Bidit<int,int,int const *,int const &>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PBV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PBV12@@Z PROC ; std::list<int,std::allocator<int> >::_Const_iterator<1>::_Const_iterator<1>, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Bidit@HHPBHABH@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 177  : 			_SCL_SECURE_TRAITS_VALIDATE(_Plist != NULL);

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@Const_iter
	cmp	DWORD PTR __Plist$[ebp], 0
	jne	SHORT $LN2@Const_iter
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Const_iter:

; 178  : 			this->_Set_container(_Plist);

	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 179  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PBV12@@Z ENDP ; std::list<int,std::allocator<int> >::_Const_iterator<1>::_Const_iterator<1>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@HHPBHABHV_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::bidirectional_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Bidit@HHPBHABH@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Bidit@HHPBHABH@std@@QAE@XZ PROC			; std::_Bidit<int,int,int const *,int const &>::_Bidit<int,int,int const *,int const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@HHPBHABHV_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Bidit@HHPBHABH@std@@QAE@XZ ENDP			; std::_Bidit<int,int,int const *,int const &>::_Bidit<int,int,int const *,int const &>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@HHPBHABHV_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@HHPBHABHV_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::bidirectional_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@HHPBHABHV_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::bidirectional_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@@Z ; std::_Destroy<std::_List_nod<int,std::allocator<int> >::_Node>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z PROC ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@@Z ; std::_Destroy<std::_List_nod<int,std::allocator<int> >::_Node>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEPBVPortal@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Checked_iterator_base
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBVPortal@Ogre@@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBVPortal@Ogre@@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEPBVPortal@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBVPortal@Ogre@@AAV?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEPBVCell@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBVCell@Ogre@@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBVCell@Ogre@@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEPBVCell@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBVCell@Ogre@@AAV?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	??$_Assign@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@0Uinput_iterator_tag@1@@Z ; std::list<int,std::allocator<int> >::_Assign<std::list<int,std::allocator<int> >::_Const_iterator<1> >
PUBLIC	??$_Iter_cat@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@0@@Z ; std::_Iter_cat<std::list<int,std::allocator<int> >::_Const_iterator<1> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??$assign@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T67396 = -2						; size = 1
$T67395 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
??$assign@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@0@Z PROC ; std::list<int,std::allocator<int> >::assign<std::list<int,std::allocator<int> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 679  : 		void assign(_Iter _First, _Iter _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 680  : 		{	// assign [_First, _Last)
; 681  : 		_Assign(_First, _Last, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67395[ebp]
	push	ecx
	call	??$_Iter_cat@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@0@@Z ; std::_Iter_cat<std::list<int,std::allocator<int> >::_Const_iterator<1> >
	add	esp, 8
	movzx	edx, BYTE PTR $T67396[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Assign@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@0Uinput_iterator_tag@1@@Z ; std::list<int,std::allocator<int> >::_Assign<std::list<int,std::allocator<int> >::_Const_iterator<1> >

; 682  : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$assign@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@0@Z ENDP ; std::list<int,std::allocator<int> >::assign<std::list<int,std::allocator<int> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??0Portal@Ogre@@QAE@ABV01@@Z			; Ogre::Portal::Portal
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$_Construct@VPortal@Ogre@@V12@@std@@YAXPAVPortal@Ogre@@ABV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@VPortal@Ogre@@V12@@std@@YAXPAVPortal@Ogre@@ABV12@@Z$0
__ehfuncinfo$??$_Construct@VPortal@Ogre@@V12@@std@@YAXPAVPortal@Ogre@@ABV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@VPortal@Ogre@@V12@@std@@YAXPAVPortal@Ogre@@ABV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Construct@VPortal@Ogre@@V12@@std@@YAXPAVPortal@Ogre@@ABV12@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T67400 = -24						; size = 4
$T67399 = -20						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@VPortal@Ogre@@V12@@std@@YAXPAVPortal@Ogre@@ABV12@@Z PROC ; std::_Construct<Ogre::Portal,Ogre::Portal>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@VPortal@Ogre@@V12@@std@@YAXPAVPortal@Ogre@@ABV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	144					; 00000090H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67400[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T67400[ebp], 0
	je	SHORT $LN3@Construct
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T67400[ebp]
	call	??0Portal@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Construct
$LN3@Construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T67399[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 53   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@VPortal@Ogre@@V12@@std@@YAXPAVPortal@Ogre@@ABV12@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T67400[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@VPortal@Ogre@@V12@@std@@YAXPAVPortal@Ogre@@ABV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@VPortal@Ogre@@V12@@std@@YAXPAVPortal@Ogre@@ABV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@VPortal@Ogre@@V12@@std@@YAXPAVPortal@Ogre@@ABV12@@Z ENDP ; std::_Construct<Ogre::Portal,Ogre::Portal>
PUBLIC	??0Cell@Ogre@@QAE@ABV01@@Z			; Ogre::Cell::Cell
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@VCell@Ogre@@V12@@std@@YAXPAVCell@Ogre@@ABV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@VCell@Ogre@@V12@@std@@YAXPAVCell@Ogre@@ABV12@@Z$0
__ehfuncinfo$??$_Construct@VCell@Ogre@@V12@@std@@YAXPAVCell@Ogre@@ABV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@VCell@Ogre@@V12@@std@@YAXPAVCell@Ogre@@ABV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Construct@VCell@Ogre@@V12@@std@@YAXPAVCell@Ogre@@ABV12@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T67413 = -24						; size = 4
$T67412 = -20						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@VCell@Ogre@@V12@@std@@YAXPAVCell@Ogre@@ABV12@@Z PROC ; std::_Construct<Ogre::Cell,Ogre::Cell>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@VCell@Ogre@@V12@@std@@YAXPAVCell@Ogre@@ABV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	164					; 000000a4H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67413[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T67413[ebp], 0
	je	SHORT $LN3@Construct@2
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T67413[ebp]
	call	??0Cell@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Construct@2
$LN3@Construct@2:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Construct@2:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T67412[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 53   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@VCell@Ogre@@V12@@std@@YAXPAVCell@Ogre@@ABV12@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T67413[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@VCell@Ogre@@V12@@std@@YAXPAVCell@Ogre@@ABV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@VCell@Ogre@@V12@@std@@YAXPAVCell@Ogre@@ABV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@VCell@Ogre@@V12@@std@@YAXPAVCell@Ogre@@ABV12@@Z ENDP ; std::_Construct<Ogre::Cell,Ogre::Cell>
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<int,std::allocator<int> >::_Node *>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<int,std::allocator<int> >::_Node *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<int,std::allocator<int> >::_Node>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<int,std::allocator<int> >::_Node>
_TEXT	ENDS
PUBLIC	??__G@YGXPAX0IHP6EPAX00@Z@Z			; `vector copy constructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??0Portal@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Portal@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Portal::Portal, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Vector3@Ogre@@QAE@ABV01@@Z	; Ogre::Vector3::Vector3
	push	10					; 0000000aH
	push	12					; 0000000cH
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??__G@YGXPAX0IHP6EPAX00@Z@Z
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 120				; 00000078H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR [eax+132], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR [eax+136], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR [eax+140], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Portal@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Portal::Portal
_TEXT	ENDS
PUBLIC	??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::list<int,std::allocator<int> >::list<int,std::allocator<int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Cell@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Cell@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0Cell@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Cell@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Cell@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Cell@Ogre@@QAE@ABV01@@Z PROC				; Ogre::Cell::Cell, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Cell@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, 32					; 00000020H
	mov	esi, DWORD PTR ___that$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR [eax+128], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR [eax+132], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 136				; 00000088H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::list<int,std::allocator<int> >::list<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Cell@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	jmp	??1?$list@HV?$allocator@H@std@@@std@@QAE@XZ ; std::list<int,std::allocator<int> >::~list<int,std::allocator<int> >
__ehhandler$??0Cell@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Cell@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Cell@Ogre@@QAE@ABV01@@Z ENDP				; Ogre::Cell::Cell
; Function compile flags: /Odtp
;	COMDAT ??__G@YGXPAX0IHP6EPAX00@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___u$ = 12						; size = 4
___s$ = 16						; size = 4
___n$ = 20						; size = 4
___f$ = 24						; size = 4
??__G@YGXPAX0IHP6EPAX00@Z@Z PROC			; `vector copy constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector@14:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector@14
	mov	ecx, DWORD PTR ___u$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	edx, DWORD PTR ___t$[ebp]
	add	edx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], edx
	mov	eax, DWORD PTR ___u$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___u$[ebp], eax
	jmp	SHORT $LN2@vector@14
$LN3@vector@14:
	pop	ebp
	ret	20					; 00000014H
??__G@YGXPAX0IHP6EPAX00@Z@Z ENDP			; `vector copy constructor iterator'
_TEXT	ENDS
PUBLIC	??$insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ; std::list<int,std::allocator<int> >::insert<std::list<int,std::allocator<int> >::_Const_iterator<1> >
PUBLIC	?begin@?$list@HV?$allocator@H@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<int,std::allocator<int> >::begin
PUBLIC	?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ ; std::list<int,std::allocator<int> >::_Buynode
PUBLIC	??0?$_List_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ; std::_List_val<int,std::allocator<int> >::_List_val<int,std::allocator<int> >
PUBLIC	??0?$allocator@H@std@@QAE@ABV01@@Z		; std::allocator<int>::allocator<int>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__catchsym$??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T67446 = -52						; size = 8
$T67445 = -44						; size = 8
$T67444 = -36						; size = 8
$T67443 = -28						; size = 8
$T67442 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z PROC	; std::list<int,std::allocator<int> >::list<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 467  : 		{	// construct list by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 16					; 00000010H
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T67442[ebp], esp
	push	eax
	call	??0?$allocator@H@std@@QAE@ABV01@@Z	; std::allocator<int>::allocator<int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ; std::_List_val<int,std::allocator<int> >::_List_val<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ ; std::list<int,std::allocator<int> >::_Buynode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0

; 468  : 		_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 469  : 		insert(begin(), _Right.begin(), _Right.end());

	lea	eax, DWORD PTR $T67446[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$list@HV?$allocator@H@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<int,std::allocator<int> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T67445[ebp], ecx
	mov	DWORD PTR $T67445[ebp+4], edx
	lea	eax, DWORD PTR $T67443[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<int,std::allocator<int> >::end
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR $T67444[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<int,std::allocator<int> >::begin
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR $T67445[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T67445[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ; std::list<int,std::allocator<int> >::insert<std::list<int,std::allocator<int> >::_Const_iterator<1> >
	jmp	SHORT $LN4@list
__catch$??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$0:

; 470  : 		_CATCH_ALL
; 471  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$list@HV?$allocator@H@std@@@std@@IAEXXZ ; std::list<int,std::allocator<int> >::_Tidy

; 472  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 473  : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN2@list
	ret	0
$LN4@list:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN2@list:

; 474  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN3@list:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$list@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ENDP	; std::list<int,std::allocator<int> >::list<int,std::allocator<int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEPBVPortal@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEPBVPortal@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@VPortal@Ogre@@V?$allocator@VPortal@Ogre@@@std@@@std@@QBEPBVPortal@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::Portal,std::allocator<Ogre::Portal> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEPBVCell@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEPBVCell@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@VCell@Ogre@@V?$allocator@VCell@Ogre@@@std@@@std@@QBEPBVCell@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::Cell,std::allocator<Ogre::Cell> >::_Checked_iterator_base
_TEXT	ENDS
PUBLIC	??0?$_Iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PBV12@@Z ; std::list<int,std::allocator<int> >::_Iterator<1>::_Iterator<1>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?begin@?$list@HV?$allocator@H@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@HV?$allocator@H@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 533  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 534  : 		return (iterator(_Nextnode(_Myhead), this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PBV12@@Z ; std::list<int,std::allocator<int> >::_Iterator<1>::_Iterator<1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 535  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$list@HV?$allocator@H@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<int,std::allocator<int> >::begin
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::construct
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@I@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::allocate
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ$0
__unwindtable$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ$2
__ehfuncinfo$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
__Pnode$ = -24						; size = 4
__Linkcnt$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ PROC ; std::list<int,std::allocator<int> >::_Buynode, COMDAT
; _this$ = ecx

; 1171 : 		{	// allocate a head node and set links

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1172 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@I@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 1173 : 		int _Linkcnt = 0;

	mov	DWORD PTR __Linkcnt$[ebp], 0

; 1174 : 
; 1175 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1176 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?construct@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::construct

; 1177 : 		++_Linkcnt;

	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx

; 1178 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Prevnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?construct@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::construct
	jmp	SHORT $LN5@Buynode
__catch$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ$0:

; 1179 : 		_CATCH_ALL
; 1180 : 		if (0 < _Linkcnt)

	cmp	DWORD PTR __Linkcnt$[ebp], 0
	jle	SHORT $LN1@Buynode

; 1181 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?destroy@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::destroy
$LN1@Buynode:

; 1182 : 		this->_Alnod.deallocate(_Pnode, 1);

	push	1
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@I@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::deallocate

; 1183 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1184 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ$1
	ret	0
$LN5@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ$1:

; 1185 : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN4@Buynode:

; 1186 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@XZ ENDP ; std::list<int,std::allocator<int> >::_Buynode
PUBLIC	??0?$_List_ptr@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_List_ptr<int,std::allocator<int> >::_List_ptr<int,std::allocator<int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_List_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_List_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z$0
__ehfuncinfo$??0?$_List_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_List_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_List_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T67484 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_List_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z PROC ; std::_List_val<int,std::allocator<int> >::_List_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 85   : 		{	// construct base, and allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_List_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T67484[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@H@std@@QAE@ABV01@@Z	; std::allocator<int>::allocator<int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_ptr@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_List_ptr<int,std::allocator<int> >::_List_ptr<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$allocator@H@std@@QAE@ABV01@@Z	; std::allocator<int>::allocator<int>

; 86   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_List_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_ptr@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??0?$_List_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_List_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_List_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ENDP ; std::_List_val<int,std::allocator<int> >::_List_val<int,std::allocator<int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
PUBLIC	??$?0H@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::allocator<std::_List_nod<int,std::allocator<int> >::_Node *><int>
PUBLIC	??0?$_List_nod@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_List_nod<int,std::allocator<int> >::_List_nod<int,std::allocator<int> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__unwindtable$??0?$_List_ptr@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_List_ptr@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z$0
__ehfuncinfo$??0?$_List_ptr@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_List_ptr@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_List_ptr@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T67496 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_List_ptr@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z PROC ; std::_List_ptr<int,std::allocator<int> >::_List_ptr<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 67   : 		{	// construct base, and allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_List_ptr@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T67496[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@H@std@@QAE@ABV01@@Z	; std::allocator<int>::allocator<int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_nod@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_List_nod<int,std::allocator<int> >::_List_nod<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??$?0H@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::allocator<std::_List_nod<int,std::allocator<int> >::_Node *><int>

; 68   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_List_ptr@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_nod@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??0?$_List_ptr@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_List_ptr@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_List_ptr@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ENDP ; std::_List_ptr<int,std::allocator<int> >::_List_ptr<int,std::allocator<int> >
PUBLIC	??$_Allocate@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@YAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<int,std::allocator<int> >::_Node>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@YAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<int,std::allocator<int> >::_Node>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<int,std::allocator<int> >::_Node *,std::_List_nod<int,std::allocator<int> >::_Node *>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@ABQAU342@@Z PROC ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<int,std::allocator<int> >::_Node *,std::_List_nod<int,std::allocator<int> >::_Node *>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::construct
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\list
_TEXT	ENDS
;	COMDAT ??0?$_Iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PBV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PBV12@@Z PROC ; std::list<int,std::allocator<int> >::_Iterator<1>::_Iterator<1>, COMDAT
; _this$ = ecx

; 361  : 			{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PBV12@@Z ; std::list<int,std::allocator<int> >::_Const_iterator<1>::_Const_iterator<1>

; 362  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PBV12@@Z ENDP ; std::list<int,std::allocator<int> >::_Iterator<1>::_Iterator<1>
_TEXT	ENDS
PUBLIC	??$?0H@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::allocator<std::_List_nod<int,std::allocator<int> >::_Node><int>
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<int> >::_Container_base_aux_alloc_real<std::allocator<int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_List_nod@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_List_nod@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z$0
__ehfuncinfo$??0?$_List_nod@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_List_nod@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_List_nod@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T67512 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_List_nod@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z PROC ; std::_List_nod<int,std::allocator<int> >::_List_nod<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_List_nod@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T67512[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@H@std@@QAE@ABV01@@Z	; std::allocator<int>::allocator<int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<int> >::_Container_base_aux_alloc_real<std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??$?0H@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::allocator<std::_List_nod<int,std::allocator<int> >::_Node><int>

; 48   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_List_nod@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<int> >::~_Container_base_aux_alloc_real<std::allocator<int> >
__ehhandler$??0?$_List_nod@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_List_nod@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_List_nod@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ENDP ; std::_List_nod<int,std::allocator<int> >::_List_nod<int,std::allocator<int> >
PUBLIC	??$?0H@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><int>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T67524 = -24						; size = 4
$T67523 = -20						; size = 4
$T67522 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<int> >::_Container_base_aux_alloc_real<std::allocator<int> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0H@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><int>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T67524[ebp], eax
	mov	ecx, DWORD PTR $T67524[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67523[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T67523[ebp], 0
	je	SHORT $LN3@Container_@3
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T67523[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@3
$LN3@Container_@3:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@3:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T67522[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T67522[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z$1:
	mov	eax, DWORD PTR $T67524[ebp]
	push	eax
	mov	ecx, DWORD PTR $T67523[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<int> >::_Container_base_aux_alloc_real<std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ??$_Iter_cat@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@0@@Z PROC ; std::_Iter_cat<std::list<int,std::allocator<int> >::_Const_iterator<1> >, COMDAT

; 952  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 955  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@0@@Z ENDP ; std::_Iter_cat<std::list<int,std::allocator<int> >::_Const_iterator<1> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\list
_TEXT	ENDS
;	COMDAT ??$_Assign@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@0Uinput_iterator_tag@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T67540 = -16						; size = 8
$T67539 = -8						; size = 8
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
___formal$ = 24						; size = 1
??$_Assign@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@0Uinput_iterator_tag@1@@Z PROC ; std::list<int,std::allocator<int> >::_Assign<std::list<int,std::allocator<int> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 691  : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 692  : 		{	// assign [_First, _Last), input iterators
; 693  : 		clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$list@HV?$allocator@H@std@@@std@@QAEXXZ ; std::list<int,std::allocator<int> >::clear

; 694  : 		insert(begin(), _First, _Last);

	lea	eax, DWORD PTR $T67540[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$list@HV?$allocator@H@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<int,std::allocator<int> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T67539[ebp], ecx
	mov	DWORD PTR $T67539[ebp+4], edx
	mov	eax, DWORD PTR __Last$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T67539[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T67539[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ; std::list<int,std::allocator<int> >::insert<std::list<int,std::allocator<int> >::_Const_iterator<1> >

; 695  : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Assign@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@0Uinput_iterator_tag@1@@Z ENDP ; std::list<int,std::allocator<int> >::_Assign<std::list<int,std::allocator<int> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<int,std::allocator<int> >::_Insert<std::list<int,std::allocator<int> >::_Const_iterator<1> >
; Function compile flags: /Odtp
;	COMDAT ??$insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T67544 = -2						; size = 1
$T67543 = -1						; size = 1
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
__Last$ = 24						; size = 8
??$insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z PROC ; std::list<int,std::allocator<int> >::insert<std::list<int,std::allocator<int> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 730  : 		void insert(const_iterator _Where, _Iter _First, _Iter _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		{	// insert [_First, _Last) at _Where
; 732  : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67543[ebp]
	push	ecx
	call	??$_Iter_cat@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@0@@Z ; std::_Iter_cat<std::list<int,std::allocator<int> >::_Const_iterator<1> >
	add	esp, 8
	movzx	edx, BYTE PTR $T67544[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<int,std::allocator<int> >::_Insert<std::list<int,std::allocator<int> >::_Const_iterator<1> >

; 733  : 		}

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??$insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ENDP ; std::list<int,std::allocator<int> >::insert<std::list<int,std::allocator<int> >::_Const_iterator<1> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0H@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0H@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::allocator<std::_List_nod<int,std::allocator<int> >::_Node *><int>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0H@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::allocator<std::_List_nod<int,std::allocator<int> >::_Node *><int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@YAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T67549 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@YAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<int,std::allocator<int> >::_Node>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@4
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 12					; 0000000cH
	jae	SHORT $LN2@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T67549[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T67549[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 12					; 0000000cH
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@4:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@YAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<int,std::allocator<int> >::_Node>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
tv68 = -12						; size = 4
$T67552 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@ABQAU120@@Z PROC ; std::_Construct<std::_List_nod<int,std::allocator<int> >::_Node *,std::_List_nod<int,std::allocator<int> >::_Node *>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67552[ebp], eax
	cmp	DWORD PTR $T67552[ebp], 0
	je	SHORT $LN3@Construct@3
	mov	edx, DWORD PTR $T67552[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T67552[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN1@Construct@3
$LN3@Construct@3:
	mov	DWORD PTR tv68[ebp], 0
$LN1@Construct@3:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_List_nod<int,std::allocator<int> >::_Node *,std::_List_nod<int,std::allocator<int> >::_Node *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0H@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0H@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::allocator<std::_List_nod<int,std::allocator<int> >::_Node><int>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0H@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::allocator<std::_List_nod<int,std::allocator<int> >::_Node><int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0H@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0H@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><int>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0H@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><int>
_TEXT	ENDS
PUBLIC	?erase@?$list@HV?$allocator@H@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<int,std::allocator<int> >::erase
PUBLIC	??F?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAEAAV012@XZ ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator--
PUBLIC	?_Insert@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABH@Z ; std::list<int,std::allocator<int> >::_Insert
PUBLIC	??D?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBEABHXZ ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator*
PUBLIC	??9?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBE_NABV012@@Z ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator!=
PUBLIC	??E?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAEAAV012@XZ ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator++
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0
__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2
__ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T67561 = -40						; size = 8
__Before$64527 = -32					; size = 8
__Next$ = -24						; size = 8
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
__Last$ = 24						; size = 8
___formal$ = 32						; size = 1
??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z PROC ; std::list<int,std::allocator<int> >::_Insert<std::list<int,std::allocator<int> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 762  : 		void _Insert(const_iterator _Where,

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 763  : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 764  : 		{	// insert [_First, _Last) at _Where, forward iterators
; 765  : 
; 766  :  #if _HAS_ITERATOR_DEBUGGING
; 767  : 		_DEBUG_RANGE(_First, _Last);
; 768  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 769  : 
; 770  : 		_Iter _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR __Next$[ebp+4], ecx

; 771  : 
; 772  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 773  : 		for (; _First != _Last; ++_First)

	jmp	SHORT $LN6@Insert
$LN5@Insert:
	lea	ecx, DWORD PTR __First$[ebp]
	call	??E?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAEAAV012@XZ ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator++
$LN6@Insert:
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBE_NABV012@@Z ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@Insert

; 774  : 			_Insert(_Where, *_First);

	lea	ecx, DWORD PTR __First$[ebp]
	call	??D?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBEABHXZ ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator*
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABH@Z ; std::list<int,std::allocator<int> >::_Insert
	jmp	SHORT $LN5@Insert
$LN4@Insert:
	jmp	SHORT $LN10@Insert
__catch$??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0:

; 775  : 		_CATCH_ALL
; 776  : 		for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Insert
$LN2@Insert:
	lea	ecx, DWORD PTR __Next$[ebp]
	call	??E?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAEAAV012@XZ ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator++
$LN3@Insert:
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Next$[ebp]
	call	??9?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBE_NABV012@@Z ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Insert

; 777  : 			{	// undo inserts
; 778  : 			const_iterator _Before = _Where;

	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Before$64527[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp+4]
	mov	DWORD PTR __Before$64527[ebp+4], eax

; 779  : 			erase(--_Before);

	lea	ecx, DWORD PTR __Before$64527[ebp]
	call	??F?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAEAAV012@XZ ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator--
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR $T67561[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$list@HV?$allocator@H@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<int,std::allocator<int> >::erase

; 780  : 			}

	jmp	SHORT $LN2@Insert
$LN1@Insert:

; 781  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 782  : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Insert
	ret	0
$LN10@Insert:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Insert:

; 783  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Insert@V?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ENDP ; std::list<int,std::allocator<int> >::_Insert<std::list<int,std::allocator<int> >::_Const_iterator<1> >
PUBLIC	?_Incsize@?$list@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::list<int,std::allocator<int> >::_Incsize
PUBLIC	?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z ; std::list<int,std::allocator<int> >::_Buynode
PUBLIC	?_Mynode@?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@3@XZ ; std::list<int,std::allocator<int> >::_Const_iterator<1>::_Mynode
; Function compile flags: /Odtp
;	COMDAT ?_Insert@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Pnode$ = -8						; size = 4
__Newnode$ = -4						; size = 4
__Where$ = 8						; size = 8
__Val$ = 16						; size = 4
?_Insert@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABH@Z PROC ; std::list<int,std::allocator<int> >::_Insert, COMDAT
; _this$ = ecx

; 710  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 711  : 
; 712  :  #if _HAS_ITERATOR_DEBUGGING
; 713  : 		if (_Where._Mycont != this)
; 714  : 			_DEBUG_ERROR("list insert iterator outside range");
; 715  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 716  : 
; 717  : 		_Nodeptr _Pnode = _Where._Mynode();

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@3@XZ ; std::list<int,std::allocator<int> >::_Const_iterator<1>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax

; 718  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z ; std::list<int,std::allocator<int> >::_Buynode
	mov	DWORD PTR __Newnode$[ebp], eax

; 719  : 		_Incsize(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Incsize@?$list@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::list<int,std::allocator<int> >::_Incsize

; 720  : 		_Prevnode(_Pnode) = _Newnode;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx

; 721  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

	mov	eax, DWORD PTR __Newnode$[ebp]
	push	eax
	call	?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Insert@?$list@HV?$allocator@H@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABH@Z ENDP ; std::list<int,std::allocator<int> >::_Insert
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<int,std::allocator<int> >::_Make_iter
PUBLIC	??E?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE?AV012@H@Z ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator++
; Function compile flags: /Odtp
;	COMDAT ?erase@?$list@HV?$allocator@H@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T67579 = -12						; size = 8
__Pnode$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?erase@?$list@HV?$allocator@H@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx

; 786  : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 787  : 
; 788  :  #if _HAS_ITERATOR_DEBUGGING
; 789  : 		if (_Where._Mycont != this || _Where._Ptr == _Myhead)
; 790  : 			_DEBUG_ERROR("list erase iterator outside range");
; 791  : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 792  : 		_Orphan_ptr(*this, _Pnode);
; 793  : 
; 794  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 795  : 		_Nodeptr _Pnode = (_Where++)._Mynode();

	push	0
	lea	eax, DWORD PTR $T67579[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??E?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE?AV012@H@Z ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator++
	mov	ecx, eax
	call	?_Mynode@?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@3@XZ ; std::list<int,std::allocator<int> >::_Const_iterator<1>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax

; 796  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 797  : 
; 798  : 		if (_Pnode != _Myhead)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	cmp	edx, DWORD PTR [ecx+20]
	je	$LN1@erase@3

; 799  : 			{	// not list head, safe to erase
; 800  : 			_Nextnode(_Prevnode(_Pnode)) = _Nextnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 801  : 			_Prevnode(_Nextnode(_Pnode)) = _Prevnode(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Prevnode
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 802  : 			this->_Alnod.destroy(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?destroy@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::destroy

; 803  : 			this->_Alnod.deallocate(_Pnode, 1);

	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@I@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::deallocate

; 804  : 			--_Mysize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN1@erase@3:

; 805  : 			}
; 806  : 		return (_Make_iter(_Where));

	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<int,std::allocator<int> >::_Make_iter
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 807  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$list@HV?$allocator@H@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<int,std::allocator<int> >::erase
_TEXT	ENDS
PUBLIC	?_Myval@?$list@HV?$allocator@H@std@@@std@@KAAAHPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z ; std::list<int,std::allocator<int> >::_Myval
PUBLIC	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Odtp
;	COMDAT ??D?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBEABHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBEABHXZ PROC ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator*, COMDAT
; _this$ = ecx

; 211  : 			{	// return designated value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 
; 213  :  #if _HAS_ITERATOR_DEBUGGING
; 214  : 			if (this->_Mycont == 0
; 215  : 				|| _Ptr == 0
; 216  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 217  : 				{
; 218  : 				_DEBUG_ERROR("list iterator not dereferencable");
; 219  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 220  : 				}
; 221  :  #else
; 222  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@operator@11
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@operator@11
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN4@operator@11:

; 223  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@operator@11
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax+20]
	jne	SHORT $LN2@operator@11
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@11:

; 224  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 225  : 
; 226  : 			return (_Myval(_Ptr));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?_Myval@?$list@HV?$allocator@H@std@@@std@@KAAAHPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z ; std::list<int,std::allocator<int> >::_Myval
	add	esp, 4

; 227  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBEABHXZ ENDP ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator*
_TEXT	ENDS
PUBLIC	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Iterator_base_aux::_Getmycont, COMDAT
; _this$ = ecx

; 457  : 		{	// Go through the aux object to get the container

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $LN4@Getmycont
$LN3@Getmycont:
	mov	DWORD PTR tv67[ebp], 0
$LN4@Getmycont:
	mov	eax, DWORD PTR tv67[ebp]

; 459  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Aux_cont::_Getcont, COMDAT
; _this$ = ecx

; 368  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 369  : 		return _Mycontainer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 370  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Aux_cont::_Getcont
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\list
_TEXT	ENDS
;	COMDAT ??E?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAEAAV012@XZ PROC ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 235  : 			{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 236  : 
; 237  :  #if _HAS_ITERATOR_DEBUGGING
; 238  : 			if (this->_Mycont == 0
; 239  : 				|| _Ptr == 0
; 240  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 241  : 				{
; 242  : 				_DEBUG_ERROR("list iterator not incrementable");
; 243  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 244  : 				}
; 245  :  #else
; 246  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@operator@12
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@operator@12
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN4@operator@12:

; 247  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@operator@12
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax+20]
	jne	SHORT $LN2@operator@12
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@12:

; 248  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 249  : 
; 250  : 			_Ptr = _Nextnode(_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+4], eax

; 251  : 			return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 252  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAEAAV012@XZ ENDP ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator++
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??F?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAEAAV012@XZ PROC ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator--, COMDAT
; _this$ = ecx

; 262  : 			{	// predecrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 
; 264  :  #if _HAS_ITERATOR_DEBUGGING
; 265  : 			if (this->_Mycont == 0
; 266  : 				|| _Ptr == 0
; 267  : 				|| (_Ptr = _Prevnode(_Ptr))
; 268  : 					== ((_Myt *)this->_Mycont)->_Myhead)
; 269  : 				{
; 270  : 				_DEBUG_ERROR("list iterator not decrementable");
; 271  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 272  : 				}
; 273  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 274  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@operator@13
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@operator@13
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN4@operator@13:

; 275  : 			_Ptr = _Prevnode(_Ptr);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx

; 276  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@operator@13
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax+20]
	jne	SHORT $LN2@operator@13
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@13:

; 277  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 278  : 
; 279  : 			return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 280  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAEAAV012@XZ ENDP ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator--
_TEXT	ENDS
PUBLIC	??8?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBE_NABV012@@Z ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBE_NABV012@@Z PROC ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator!=, COMDAT
; _this$ = ecx

; 302  : 			{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 303  : 			return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBE_NABV012@@Z ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 304  : 			}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator!=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Myval@?$list@HV?$allocator@H@std@@@std@@KAAAHPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@HV?$allocator@H@std@@@std@@KAAAHPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z PROC ; std::list<int,std::allocator<int> >::_Myval, COMDAT

; 124  : 		{	// return reference to value in node

	push	ebp
	mov	ebp, esp

; 125  : 		return ((_Vref)(*_Pnode)._Myval);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8

; 126  : 		}

	pop	ebp
	ret	0
?_Myval@?$list@HV?$allocator@H@std@@@std@@KAAAHPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z ENDP ; std::list<int,std::allocator<int> >::_Myval
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<int,std::allocator<int> >::_Make_iter, COMDAT
; _this$ = ecx

; 553  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 554  : 		return (iterator(_Where._Ptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PBV12@@Z ; std::list<int,std::allocator<int> >::_Iterator<1>::_Iterator<1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 555  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$list@HV?$allocator@H@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<int,std::allocator<int> >::_Make_iter
_TEXT	ENDS
PUBLIC	?construct@?$allocator@H@std@@QAEXPAHABH@Z	; std::allocator<int>::construct
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z$0
__unwindtable$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z$2
__ehfuncinfo$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
__Pnode$ = -24						; size = 4
__Linkcnt$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z PROC ; std::list<int,std::allocator<int> >::_Buynode, COMDAT
; _this$ = ecx

; 1190 : 		{	// allocate a node and set links and value

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1191 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@I@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 1192 : 		int _Linkcnt = 0;

	mov	DWORD PTR __Linkcnt$[ebp], 0

; 1193 : 
; 1194 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1195 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Next);

	lea	eax, DWORD PTR __Next$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?construct@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::construct

; 1196 : 		++_Linkcnt;

	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx

; 1197 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Prev);

	lea	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Prevnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?construct@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::construct

; 1198 : 		++_Linkcnt;

	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx

; 1199 : 		this->_Alval.construct(&_Myval(_Pnode), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Myval@?$list@HV?$allocator@H@std@@@std@@KAAAHPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z ; std::list<int,std::allocator<int> >::_Myval
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?construct@?$allocator@H@std@@QAEXPAHABH@Z ; std::allocator<int>::construct
	jmp	SHORT $LN6@Buynode@2
__catch$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z$0:

; 1200 : 		_CATCH_ALL
; 1201 : 		if (1 < _Linkcnt)

	cmp	DWORD PTR __Linkcnt$[ebp], 1
	jle	SHORT $LN2@Buynode@2

; 1202 : 			this->_Alptr.destroy(&_Prevnode(_Pnode));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Prevnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?destroy@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::destroy
$LN2@Buynode@2:

; 1203 : 		if (0 < _Linkcnt)

	cmp	DWORD PTR __Linkcnt$[ebp], 0
	jle	SHORT $LN1@Buynode@2

; 1204 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$list@HV?$allocator@H@std@@@std@@KAAAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@@Z ; std::list<int,std::allocator<int> >::_Nextnode
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?destroy@?$allocator@PAU_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node *>::destroy
$LN1@Buynode@2:

; 1205 : 		this->_Alnod.deallocate(_Pnode, 1);

	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@U_Node@?$_List_nod@HV?$allocator@H@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@I@Z ; std::allocator<std::_List_nod<int,std::allocator<int> >::_Node>::deallocate

; 1206 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1207 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z$1
	ret	0
$LN6@Buynode@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z$1:

; 1208 : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN5@Buynode@2:

; 1209 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@HV?$allocator@H@std@@@std@@IAEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@2@PAU342@0ABH@Z ENDP ; std::list<int,std::allocator<int> >::_Buynode
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?max_size@?$list@HV?$allocator@H@std@@@std@@QBEIXZ ; std::list<int,std::allocator<int> >::max_size
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Incsize@?$list@HV?$allocator@H@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@HV?$allocator@H@std@@@std@@IAEXI@Z$0
__ehfuncinfo$?_Incsize@?$list@HV?$allocator@H@std@@@std@@IAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Incsize@?$list@HV?$allocator@H@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Incsize@?$list@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T67616 = -80						; size = 28
$T67615 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::list<int,std::allocator<int> >::_Incsize, COMDAT
; _this$ = ecx

; 1239 : 		{	// alter element count, with checking

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Incsize@?$list@HV?$allocator@H@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1240 : 		if (max_size() - _Mysize < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$list@HV?$allocator@H@std@@@std@@QBEIXZ ; std::list<int,std::allocator<int> >::max_size
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+24]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Incsize

; 1241 : 			_THROW(length_error, "list<T> too long");

	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T67616[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	edx, DWORD PTR $T67616[ebp]
	push	edx
	lea	ecx, DWORD PTR $T67615[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	eax, DWORD PTR $T67615[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T67616[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@Incsize:

; 1242 : 		_Mysize += _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN3@Incsize:

; 1243 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Incsize@?$list@HV?$allocator@H@std@@@std@@IAEXI@Z$0:
	lea	ecx, DWORD PTR $T67616[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Incsize@?$list@HV?$allocator@H@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Incsize@?$list@HV?$allocator@H@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Incsize@?$list@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::list<int,std::allocator<int> >::_Incsize
; Function compile flags: /Odtp
;	COMDAT ??E?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE?AV012@H@Z PROC ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 255  : 			{	// postincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 256  : 			_Myt_iter _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 257  : 			++*this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAEAAV012@XZ ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator++

; 258  : 			return (_Tmp);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Tmp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 259  : 			}

	mov	esp, ebp
	pop	ebp
	ret	8
??E?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QAE?AV012@H@Z ENDP ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator++
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBE_NABV012@@Z PROC ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator==, COMDAT
; _this$ = ecx

; 290  : 			{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 291  : 
; 292  :  #if _HAS_ITERATOR_DEBUGGING
; 293  : 			_Compat(_Right);
; 294  :  #else
; 295  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@operator@14
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@operator@14
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@14
$LN1@operator@14:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@14:

; 296  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 297  : 
; 298  : 			return (_Ptr == _Right._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	sete	cl
	mov	al, cl

; 299  : 			}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<int,std::allocator<int> >::_Const_iterator<1>::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Mynode@?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@3@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mynode@?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@3@XZ PROC ; std::list<int,std::allocator<int> >::_Const_iterator<1>::_Mynode, COMDAT
; _this$ = ecx

; 307  : 			{	// return node pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 			return (_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 309  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mynode@?$_Const_iterator@$00@?$list@HV?$allocator@H@std@@@std@@QBEPAU_Node@?$_List_nod@HV?$allocator@H@std@@@3@XZ ENDP ; std::list<int,std::allocator<int> >::_Const_iterator<1>::_Mynode
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$list@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$list@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::list<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 624  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 625  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?max_size@?$allocator@H@std@@QBEIXZ	; std::allocator<int>::max_size

; 626  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$list@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::list<int,std::allocator<int> >::max_size
_TEXT	ENDS
PUBLIC	??$_Construct@HH@std@@YAXPAHABH@Z		; std::_Construct<int,int>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@H@std@@QAEXPAHABH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@H@std@@QAEXPAHABH@Z PROC		; std::allocator<int>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@HH@std@@YAXPAHABH@Z	; std::_Construct<int,int>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@H@std@@QAEXPAHABH@Z ENDP		; std::allocator<int>::construct
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@3
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@3
$LN3@max_size@3:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@3:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Construct@HH@std@@YAXPAHABH@Z
_TEXT	SEGMENT
tv68 = -12						; size = 4
$T67640 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@HH@std@@YAXPAHABH@Z PROC			; std::_Construct<int,int>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67640[ebp], eax
	cmp	DWORD PTR $T67640[ebp], 0
	je	SHORT $LN3@Construct@4
	mov	edx, DWORD PTR $T67640[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T67640[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN1@Construct@4
$LN3@Construct@4:
	mov	DWORD PTR tv68[ebp], 0
$LN1@Construct@4:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@HH@std@@YAXPAHABH@Z ENDP			; std::_Construct<int,int>
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
_TEXT	ENDS
;	COMDAT ??__ETWO_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__ETWO_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'TWO_PI'', COMDAT

; 10   : 	const float TWO_PI = ONE_PI*2;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fadd	ST(0), ST(0)
	fstp	DWORD PTR _TWO_PI
	pop	ebp
	ret	0
??__ETWO_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'TWO_PI''
text$yc	ENDS
PUBLIC	__real@3fe0000000000000
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??__EHALF_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__EHALF_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'HALF_PI'', COMDAT

; 11   : 	const float	HALF_PI = ONE_PI*0.5f;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR _HALF_PI
	pop	ebp
	ret	0
??__EHALF_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'HALF_PI''
text$yc	ENDS
EXTRN	??0RuntimeClass@Ogre@@QAE@PBDPBV01@HP6APAVBaseObject@1@XZ@Z:PROC ; Ogre::RuntimeClass::RuntimeClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebuildingdata.cpp
;	COMDAT ??__E?m_RTTI@BuildingData@Ogre@@2VRuntimeClass@2@B@@YAXXZ
text$yc	SEGMENT
??__E?m_RTTI@BuildingData@Ogre@@2VRuntimeClass@2@B@@YAXXZ PROC ; `dynamic initializer for 'Ogre::BuildingData::m_RTTI'', COMDAT

; 6    : 	IMPLEMENT_RTTI(BuildingData, Resource, 100)

	push	ebp
	mov	ebp, esp
	push	OFFSET ?newObject@BuildingData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::BuildingData::newObject
	push	100					; 00000064H
	push	OFFSET ?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B ; Ogre::Resource::m_RTTI
	push	OFFSET $SG59150
	mov	ecx, OFFSET ?m_RTTI@BuildingData@Ogre@@2VRuntimeClass@2@B ; Ogre::BuildingData::m_RTTI
	call	??0RuntimeClass@Ogre@@QAE@PBDPBV01@HP6APAVBaseObject@1@XZ@Z ; Ogre::RuntimeClass::RuntimeClass
	pop	ebp
	ret	0
??__E?m_RTTI@BuildingData@Ogre@@2VRuntimeClass@2@B@@YAXXZ ENDP ; `dynamic initializer for 'Ogre::BuildingData::m_RTTI''
text$yc	ENDS
PUBLIC	?m_RTTI@BuildingData@Ogre@@2VRuntimeClass@2@B	; Ogre::BuildingData::m_RTTI
_BSS	SEGMENT
_TWO_PI	DD	01H DUP (?)
_HALF_PI DD	01H DUP (?)
?m_RTTI@BuildingData@Ogre@@2VRuntimeClass@2@B DB 014H DUP (?) ; Ogre::BuildingData::m_RTTI
_BSS	ENDS
CRT$XCU	SEGMENT
_TWO_PI$initializer$ DD FLAT:??__ETWO_PI@Ogre@@YAXXZ
_HALF_PI$initializer$ DD FLAT:??__EHALF_PI@Ogre@@YAXXZ
?m_RTTI$initializer$@BuildingData@Ogre@@2P6AXXZA DD FLAT:??__E?m_RTTI@BuildingData@Ogre@@2VRuntimeClass@2@B@@YAXXZ ; Ogre::BuildingData::m_RTTI$initializer$
CRT$XCU	ENDS
END
