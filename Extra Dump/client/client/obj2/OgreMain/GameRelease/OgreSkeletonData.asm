; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\OgreMain\OgreSkeletonData.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG5715
_DATA	ENDS
CONST	SEGMENT
$SG5715	DB	'bad allocation', 00H
	ORG $+1
_MAX_FLOAT DD	07f7fffffr			; 3.40282e+038
_ONE_PI	DD	040490fd0r			; 3.14159
_EPSILON DD	03727c5acr			; 1e-005
_RADS_PER_DEG DD 03c8efa35r			; 0.0174533
_DEGS_PER_RAD DD 042652ee1r			; 57.2958
$SG59251 DB	'BoneData', 00H
	ORG $+3
$SG59255 DB	'SkeletonData', 00H
CONST	ENDS
PUBLIC	??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDelegation::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDelegation::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDelegation::operator=
_TEXT	ENDS
PUBLIC	?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ	; Ogre::RuntimeClass::getBaseClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebaseobject.h
;	COMDAT ?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ PROC	; Ogre::RuntimeClass::getBaseClass, COMDAT
; _this$ = ecx

; 20   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 21   : 			return m_pBaseClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 22   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ ENDP	; Ogre::RuntimeClass::getBaseClass
_TEXT	ENDS
PUBLIC	?getClassName@RuntimeClass@Ogre@@QBEPBDXZ	; Ogre::RuntimeClass::getClassName
; Function compile flags: /Odtp
;	COMDAT ?getClassName@RuntimeClass@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ PROC		; Ogre::RuntimeClass::getClassName, COMDAT
; _this$ = ecx

; 25   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 26   : 			return m_pClassName; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ ENDP		; Ogre::RuntimeClass::getClassName
_TEXT	ENDS
PUBLIC	?getVersion@RuntimeClass@Ogre@@QBEHXZ		; Ogre::RuntimeClass::getVersion
; Function compile flags: /Odtp
;	COMDAT ?getVersion@RuntimeClass@Ogre@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVersion@RuntimeClass@Ogre@@QBEHXZ PROC		; Ogre::RuntimeClass::getVersion, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Version;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getVersion@RuntimeClass@Ogre@@QBEHXZ ENDP		; Ogre::RuntimeClass::getVersion
_TEXT	ENDS
PUBLIC	?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ; Ogre::RuntimeClass::newObject
; Function compile flags: /Odtp
;	COMDAT ?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ PROC ; Ogre::RuntimeClass::newObject, COMDAT
; _this$ = ecx

; 35   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 			return (*m_pNewFunc)();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx

; 37   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ENDP ; Ogre::RuntimeClass::newObject
_TEXT	ENDS
PUBLIC	??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::RuntimeClass::operator=
; Function compile flags: /Odtp
;	COMDAT ??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::RuntimeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::RuntimeClass::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::BaseObject::getRTTI
EXTRN	?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::BaseObject::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::BaseObject::getRTTI, COMDAT
; _this$ = ecx

; 56   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 			return &m_RTTI;

	mov	eax, OFFSET ?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B ; Ogre::BaseObject::m_RTTI

; 58   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::BaseObject::getRTTI
_TEXT	ENDS
PUBLIC	?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ; Ogre::BaseObject::isExactKindOf
; Function compile flags: /Odtp
;	COMDAT ?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_prtti$ = 8						; size = 4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z PROC ; Ogre::BaseObject::isExactKindOf, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			return (getRTTI() == prtti);

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	xor	ecx, ecx
	cmp	eax, DWORD PTR _prtti$[ebp]
	sete	cl
	mov	al, cl

; 63   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ENDP ; Ogre::BaseObject::isExactKindOf
_TEXT	ENDS
PUBLIC	?release@BaseObject@Ogre@@UAEXXZ		; Ogre::BaseObject::release
; Function compile flags: /Odtp
;	COMDAT ?release@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?release@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::release, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			m_RefCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 70   : 			if(m_RefCount <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN2@release

; 71   : 			{
; 72   : 				deleteThis();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
$LN2@release:

; 73   : 			}
; 74   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?release@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::release
_TEXT	ENDS
PUBLIC	?addRef@BaseObject@Ogre@@UAEXXZ			; Ogre::BaseObject::addRef
; Function compile flags: /Odtp
;	COMDAT ?addRef@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?addRef@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::addRef, COMDAT
; _this$ = ecx

; 77   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 			m_RefCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 79   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?addRef@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::addRef
_TEXT	ENDS
PUBLIC	?getRefCount@BaseObject@Ogre@@UAEHXZ		; Ogre::BaseObject::getRefCount
; Function compile flags: /Odtp
;	COMDAT ?getRefCount@BaseObject@Ogre@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRefCount@BaseObject@Ogre@@UAEHXZ PROC		; Ogre::BaseObject::getRefCount, COMDAT
; _this$ = ecx

; 82   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 			return m_RefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 84   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRefCount@BaseObject@Ogre@@UAEHXZ ENDP		; Ogre::BaseObject::getRefCount
_TEXT	ENDS
PUBLIC	?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::BaseObject::_serialize
; Function compile flags: /Odtp
;	COMDAT ?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z PROC	; Ogre::BaseObject::_serialize, COMDAT
; _this$ = ecx

; 87   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ENDP	; Ogre::BaseObject::_serialize
_TEXT	ENDS
PUBLIC	??_7BaseObject@Ogre@@6B@			; Ogre::BaseObject::`vftable'
PUBLIC	??0BaseObject@Ogre@@IAE@XZ			; Ogre::BaseObject::BaseObject
PUBLIC	??_R4BaseObject@Ogre@@6B@			; Ogre::BaseObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBaseObject@Ogre@@@8			; Ogre::BaseObject `RTTI Type Descriptor'
PUBLIC	??_R3BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BaseObject@Ogre@@8		; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVMemoryDelegation@Ogre@@@8		; Ogre::MemoryDelegation `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`vector deleting destructor'
PUBLIC	?deleteThis@BaseObject@Ogre@@MAEXXZ		; Ogre::BaseObject::deleteThis
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDelegation@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDelegation@Ogre@@8 DD 00H			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDelegation@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDelegation@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDelegation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDelegation@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R13?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BaseObject@Ogre@@8 DD FLAT:??_R0?AVBaseObject@Ogre@@@8 ; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R2BaseObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8 ; Ogre::BaseObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R3BaseObject@Ogre@@8 DD 00H				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBaseObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVBaseObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::BaseObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBaseObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BaseObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4BaseObject@Ogre@@6B@ DD 00H			; Ogre::BaseObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBaseObject@Ogre@@@8
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7BaseObject@Ogre@@6B@
CONST	SEGMENT
??_7BaseObject@Ogre@@6B@ DD FLAT:??_R4BaseObject@Ogre@@6B@ ; Ogre::BaseObject::`vftable'
	DD	FLAT:?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EBaseObject@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0BaseObject@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BaseObject@Ogre@@IAE@XZ PROC				; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx

; 92   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 1

; 93   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BaseObject@Ogre@@IAE@XZ ENDP				; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??1BaseObject@Ogre@@MAE@XZ			; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
;	COMDAT ??1BaseObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BaseObject@Ogre@@MAE@XZ PROC				; Ogre::BaseObject::~BaseObject, COMDAT
; _this$ = ecx

; 96   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1BaseObject@Ogre@@MAE@XZ ENDP				; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deleteThis@BaseObject@Ogre@@MAEXXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T66058 = -8						; size = 4
$T66057 = -4						; size = 4
?deleteThis@BaseObject@Ogre@@MAEXXZ PROC		; Ogre::BaseObject::deleteThis, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 			delete this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T66058[ebp], eax
	mov	ecx, DWORD PTR $T66058[ebp]
	mov	DWORD PTR $T66057[ebp], ecx
	cmp	DWORD PTR $T66057[ebp], 0
	je	SHORT $LN3@deleteThis
	push	1
	mov	edx, DWORD PTR $T66057[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T66057[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN1@deleteThis
$LN3@deleteThis:
	mov	DWORD PTR tv70[ebp], 0
$LN1@deleteThis:

; 102  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?deleteThis@BaseObject@Ogre@@MAEXXZ ENDP		; Ogre::BaseObject::deleteThis
_TEXT	ENDS
PUBLIC	??0BaseObject@Ogre@@QAE@ABV01@@Z		; Ogre::BaseObject::BaseObject
; Function compile flags: /Odtp
;	COMDAT ??0BaseObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0BaseObject@Ogre@@QAE@ABV01@@Z PROC			; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@BaseObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@BaseObject
$LN3@BaseObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@BaseObject:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BaseObject@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BaseObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BaseObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BaseObject::operator=
_TEXT	ENDS
PUBLIC	??_GBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`scalar deleting destructor'
EXTRN	??3MemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VMemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_EBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1BaseObject@Ogre@@MAE@XZ	; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z	; Ogre::FixedString::handle2Ptr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrefixedstring.h
;	COMDAT ?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z PROC		; Ogre::FixedString::handle2Ptr, COMDAT

; 22   : 		{

	push	ebp
	mov	ebp, esp

; 23   : 			return (const char *)h;

	mov	eax, DWORD PTR _h$[ebp]

; 24   : 		}

	pop	ebp
	ret	0
?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z ENDP		; Ogre::FixedString::handle2Ptr
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@XZ			; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FixedString@Ogre@@QAE@XZ PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 27   : 		FixedString() : m_StrHandle(NULL){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0FixedString@Ogre@@QAE@XZ ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PAX@Z			; Ogre::FixedString::FixedString
EXTRN	?addRef@FixedString@Ogre@@SAXPAX@Z:PROC		; Ogre::FixedString::addRef
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_h$ = 8							; size = 4
??0FixedString@Ogre@@QAE@PAX@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 29   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax], ecx

; 30   : 			addRef(h);

	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	call	?addRef@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::addRef
	add	esp, 4

; 31   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@PAX@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@ABV01@@Z		; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0FixedString@Ogre@@QAE@ABV01@@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 34   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 35   : 			addRef(m_StrHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?addRef@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::addRef
	add	esp, 4

; 36   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PBD@Z			; Ogre::FixedString::FixedString
EXTRN	?insert@FixedString@Ogre@@SAPAXPBDH@Z:PROC	; Ogre::FixedString::insert
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstr$ = 8						; size = 4
??0FixedString@Ogre@@QAE@PBD@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 38   : 		FixedString(const char *pstr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 		{
; 40   : 			m_StrHandle = insert(pstr); 

	push	-1
	mov	eax, DWORD PTR _pstr$[ebp]
	push	eax
	call	?insert@FixedString@Ogre@@SAPAXPBDH@Z	; Ogre::FixedString::insert
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 41   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@PBD@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PBDI@Z			; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstr$ = 8						; size = 4
_len$ = 12						; size = 4
??0FixedString@Ogre@@QAE@PBDI@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 43   : 		FixedString(const char *pstr, size_t len)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 		{
; 45   : 			m_StrHandle = insert(pstr, (int)len); 

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pstr$[ebp]
	push	ecx
	call	?insert@FixedString@Ogre@@SAPAXPBDH@Z	; Ogre::FixedString::insert
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 46   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0FixedString@Ogre@@QAE@PBDI@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??1FixedString@Ogre@@QAE@XZ			; Ogre::FixedString::~FixedString
EXTRN	?release@FixedString@Ogre@@SAXPAX@Z:PROC	; Ogre::FixedString::release
; Function compile flags: /Odtp
;	COMDAT ??1FixedString@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FixedString@Ogre@@QAE@XZ PROC			; Ogre::FixedString::~FixedString, COMDAT
; _this$ = ecx

; 49   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 			release(m_StrHandle); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?release@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::release
	add	esp, 4

; 51   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1FixedString@Ogre@@QAE@XZ ENDP			; Ogre::FixedString::~FixedString
_TEXT	ENDS
PUBLIC	??BFixedString@Ogre@@QBEPBDXZ			; Ogre::FixedString::operator char const *
; Function compile flags: /Odtp
;	COMDAT ??BFixedString@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BFixedString@Ogre@@QBEPBDXZ PROC			; Ogre::FixedString::operator char const *, COMDAT
; _this$ = ecx

; 54   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 			return handle2Ptr(m_StrHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z ; Ogre::FixedString::handle2Ptr
	add	esp, 4

; 56   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BFixedString@Ogre@@QBEPBDXZ ENDP			; Ogre::FixedString::operator char const *
_TEXT	ENDS
PUBLIC	?getHandle@FixedString@Ogre@@QBEPAXXZ		; Ogre::FixedString::getHandle
; Function compile flags: /Odtp
;	COMDAT ?getHandle@FixedString@Ogre@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHandle@FixedString@Ogre@@QBEPAXXZ PROC		; Ogre::FixedString::getHandle, COMDAT
; _this$ = ecx

; 59   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 			return m_StrHandle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 61   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getHandle@FixedString@Ogre@@QBEPAXXZ ENDP		; Ogre::FixedString::getHandle
_TEXT	ENDS
PUBLIC	?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ	; Ogre::Resource::getRTTI
EXTRN	?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B:BYTE	; Ogre::Resource::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreresource.h
;	COMDAT ?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::Resource::getRTTI, COMDAT
; _this$ = ecx

; 39   : 		DECLARE_RTTI_VIRTUAL(Resource)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B ; Ogre::Resource::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::Resource::getRTTI
_TEXT	ENDS
PUBLIC	?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ ; Ogre::Resource::getResPath
; Function compile flags: /Odtp
;	COMDAT ?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ PROC	; Ogre::Resource::getResPath, COMDAT
; _this$ = ecx

; 44   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 			return m_ResPath;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8

; 46   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ ENDP	; Ogre::Resource::getResPath
_TEXT	ENDS
PUBLIC	?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z ; Ogre::Resource::setResPath
EXTRN	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z:PROC	; Ogre::FixedString::operator=
; Function compile flags: /Odtp
;	COMDAT ?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_path$ = 8						; size = 4
?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z PROC	; Ogre::Resource::setResPath, COMDAT
; _this$ = ecx

; 48   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 			m_ResPath = path;

	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=

; 50   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z ENDP	; Ogre::Resource::setResPath
_TEXT	ENDS
PUBLIC	??_7Resource@Ogre@@6B@				; Ogre::Resource::`vftable'
PUBLIC	??0Resource@Ogre@@IAE@XZ			; Ogre::Resource::Resource
PUBLIC	??_R4Resource@Ogre@@6B@				; Ogre::Resource::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVResource@Ogre@@@8			; Ogre::Resource `RTTI Type Descriptor'
PUBLIC	??_R3Resource@Ogre@@8				; Ogre::Resource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Resource@Ogre@@8				; Ogre::Resource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Resource@Ogre@@8			; Ogre::Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EResource@Ogre@@MAEPAXI@Z			; Ogre::Resource::`vector deleting destructor'
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	?release@Resource@Ogre@@UAEXXZ:PROC		; Ogre::Resource::release
EXTRN	?addRef@Resource@Ogre@@UAEXXZ:PROC		; Ogre::Resource::addRef
EXTRN	?getRefCount@Resource@Ogre@@UAEHXZ:PROC		; Ogre::Resource::getRefCount
;	COMDAT ??_R1A@?0A@EA@Resource@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Resource@Ogre@@8 DD FLAT:??_R0?AVResource@Ogre@@@8 ; Ogre::Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Resource@Ogre@@8
rdata$r	SEGMENT
??_R2Resource@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Resource@Ogre@@8 ; Ogre::Resource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3Resource@Ogre@@8
rdata$r	SEGMENT
??_R3Resource@Ogre@@8 DD 00H				; Ogre::Resource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVResource@Ogre@@@8
_DATA	SEGMENT
??_R0?AVResource@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Resource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVResource@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Resource@Ogre@@6B@
rdata$r	SEGMENT
??_R4Resource@Ogre@@6B@ DD 00H				; Ogre::Resource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVResource@Ogre@@@8
	DD	FLAT:??_R3Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Resource@Ogre@@6B@
CONST	SEGMENT
??_7Resource@Ogre@@6B@ DD FLAT:??_R4Resource@Ogre@@6B@	; Ogre::Resource::`vftable'
	DD	FLAT:?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EResource@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Resource@Ogre@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@IAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@IAE@XZ$1
__ehfuncinfo$??0Resource@Ogre@@IAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Resource@Ogre@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Resource@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Resource@Ogre@@IAE@XZ PROC				; Ogre::Resource::Resource, COMDAT
; _this$ = ecx

; 72   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Resource@Ogre@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@IAE@XZ		; Ogre::BaseObject::BaseObject
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 1

; 73   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Resource@Ogre@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0Resource@Ogre@@IAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0Resource@Ogre@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Resource@Ogre@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Resource@Ogre@@IAE@XZ ENDP				; Ogre::Resource::Resource
PUBLIC	??1Resource@Ogre@@MAE@XZ			; Ogre::Resource::~Resource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Resource@Ogre@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Resource@Ogre@@MAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1Resource@Ogre@@MAE@XZ$1
__ehfuncinfo$??1Resource@Ogre@@MAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1Resource@Ogre@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1Resource@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Resource@Ogre@@MAE@XZ PROC				; Ogre::Resource::~Resource, COMDAT
; _this$ = ecx

; 76   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Resource@Ogre@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 77   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Resource@Ogre@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??1Resource@Ogre@@MAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??1Resource@Ogre@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Resource@Ogre@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Resource@Ogre@@MAE@XZ ENDP				; Ogre::Resource::~Resource
PUBLIC	??0Resource@Ogre@@QAE@ABV01@@Z			; Ogre::Resource::Resource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Resource@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$1
__ehfuncinfo$??0Resource@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Resource@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Resource@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Resource@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Resource::Resource, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Resource@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7Resource@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0FixedString@Ogre@@QAE@ABV01@@Z	; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0Resource@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Resource@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Resource@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Resource::Resource
PUBLIC	??4Resource@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Resource::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Resource@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Resource@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::Resource::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Resource@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::Resource::operator=
_TEXT	ENDS
PUBLIC	??_GResource@Ogre@@MAEPAXI@Z			; Ogre::Resource::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GResource@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GResource@Ogre@@MAEPAXI@Z PROC			; Ogre::Resource::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GResource@Ogre@@MAEPAXI@Z ENDP			; Ogre::Resource::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EResource@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EResource@Ogre@@MAEPAXI@Z PROC			; Ogre::Resource::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@2
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EResource@Ogre@@MAEPAXI@Z ENDP			; Ogre::Resource::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7DataStream@Ogre@@6B@			; Ogre::DataStream::`vftable'
PUBLIC	??0DataStream@Ogre@@QAE@XZ			; Ogre::DataStream::DataStream
PUBLIC	??_R4DataStream@Ogre@@6B@			; Ogre::DataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStream@Ogre@@@8			; Ogre::DataStream `RTTI Type Descriptor'
PUBLIC	??_R3DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStream@Ogre@@8		; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`vector deleting destructor'
PUBLIC	?size@DataStream@Ogre@@UBEIXZ			; Ogre::DataStream::size
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__purecall:PROC
EXTRN	?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::readLine
EXTRN	?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; Ogre::DataStream::getLine
EXTRN	?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; Ogre::DataStream::getAsString
EXTRN	?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::skipLine
;	COMDAT ??_R1A@?0A@EA@DataStream@Ogre@@8
; File i:\svnroot\client\ogremain\ogredatastream.h
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStream@Ogre@@8 DD FLAT:??_R0?AVDataStream@Ogre@@@8 ; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStream@Ogre@@8
rdata$r	SEGMENT
??_R2DataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8 ; Ogre::DataStream::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStream@Ogre@@8
rdata$r	SEGMENT
??_R3DataStream@Ogre@@8 DD 00H				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::DataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStream@Ogre@@6B@ DD 00H			; Ogre::DataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStream@Ogre@@@8
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStream@Ogre@@6B@
CONST	SEGMENT
??_7DataStream@Ogre@@6B@ DD FLAT:??_R4DataStream@Ogre@@6B@ ; Ogre::DataStream::`vftable'
	DD	FLAT:??_EDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0DataStream@Ogre@@QAE@XZ PROC				; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 68   : 		DataStream() : mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@XZ ENDP				; Ogre::DataStream::DataStream
PUBLIC	??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Ogre::DataStream::DataStream
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 70   : 		DataStream(const String& name) : mName(name), mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Ogre::DataStream::DataStream
PUBLIC	?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Ogre::DataStream::getName
; Function compile flags: /Odtp
;	COMDAT ?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Ogre::DataStream::getName, COMDAT
; _this$ = ecx

; 72   : 		const String& getName(void) { return mName; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Ogre::DataStream::getName
_TEXT	ENDS
PUBLIC	??1DataStream@Ogre@@UAE@XZ			; Ogre::DataStream::~DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1DataStream@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0
__ehfuncinfo$??1DataStream@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1DataStream@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1DataStream@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DataStream@Ogre@@UAE@XZ PROC				; Ogre::DataStream::~DataStream, COMDAT
; _this$ = ecx

; 73   : 		virtual ~DataStream() {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1DataStream@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1DataStream@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1DataStream@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1DataStream@Ogre@@UAE@XZ ENDP				; Ogre::DataStream::~DataStream
; Function compile flags: /Odtp
;	COMDAT ?size@DataStream@Ogre@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@DataStream@Ogre@@UBEIXZ PROC			; Ogre::DataStream::size, COMDAT
; _this$ = ecx

; 157  : 		virtual size_t size(void) const { return mSize; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?size@DataStream@Ogre@@UBEIXZ ENDP			; Ogre::DataStream::size
_TEXT	ENDS
PUBLIC	??0DataStream@Ogre@@QAE@ABV01@@Z		; Ogre::DataStream::DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV01@@Z PROC			; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::DataStream::DataStream
PUBLIC	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::DataStream::operator=
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::DataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::DataStream::operator=
_TEXT	ENDS
PUBLIC	??_GDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`scalar deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp
;	COMDAT ??_EDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1DataStream@Ogre@@UAE@XZ	; Ogre::DataStream::~DataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	36					; 00000024H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@3
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ		; Ogre::MemoryDataStream::getPtr
; Function compile flags: /Odtp
;	COMDAT ?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC		; Ogre::MemoryDataStream::getPtr, COMDAT
; _this$ = ecx

; 267  : 		uchar* getPtr(void) { return mData; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP		; Ogre::MemoryDataStream::getPtr
_TEXT	ENDS
PUBLIC	?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ	; Ogre::MemoryDataStream::getCurrentPtr
; Function compile flags: /Odtp
;	COMDAT ?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC	; Ogre::MemoryDataStream::getCurrentPtr, COMDAT
; _this$ = ecx

; 270  : 		uchar* getCurrentPtr(void) { return mPos; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP	; Ogre::MemoryDataStream::getCurrentPtr
_TEXT	ENDS
PUBLIC	?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ	; Ogre::MemoryDataStream::getMemoryImage
; Function compile flags: /Odtp
;	COMDAT ?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ PROC	; Ogre::MemoryDataStream::getMemoryImage, COMDAT
; _this$ = ecx

; 307  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 			return mData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]

; 309  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ ENDP	; Ogre::MemoryDataStream::getMemoryImage
_TEXT	ENDS
PUBLIC	?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ; Ogre::MemoryDataStream::setFreeOnClose
; Function compile flags: /Odtp
;	COMDAT ?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_freeOnClose$ = 8					; size = 4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z PROC ; Ogre::MemoryDataStream::setFreeOnClose, COMDAT
; _this$ = ecx

; 313  : 		void setFreeOnClose(void (*freeOnClose)(void *)) { mFreeOnClose = freeOnClose; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _freeOnClose$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ENDP ; Ogre::MemoryDataStream::setFreeOnClose
_TEXT	ENDS
PUBLIC	??_7MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`vftable'
PUBLIC	??0MemoryDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??_R4MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMemoryDataStream@Ogre@@@8		; Ogre::MemoryDataStream `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDataStream@Ogre@@8		; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`vector deleting destructor'
EXTRN	?read@MemoryDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::MemoryDataStream::read
EXTRN	?write@MemoryDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::MemoryDataStream::write
EXTRN	?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::readLine
EXTRN	?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::skipLine
EXTRN	?skip@MemoryDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::MemoryDataStream::skip
EXTRN	?seek@MemoryDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::MemoryDataStream::seek
EXTRN	?tell@MemoryDataStream@Ogre@@UBEIXZ:PROC	; Ogre::MemoryDataStream::tell
EXTRN	?eof@MemoryDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::MemoryDataStream::eof
EXTRN	?close@MemoryDataStream@Ogre@@UAEXXZ:PROC	; Ogre::MemoryDataStream::close
;	COMDAT ??_R1A@?0A@EA@MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 DD FLAT:??_R0?AVMemoryDataStream@Ogre@@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDataStream@Ogre@@8 DD 00H			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MemoryDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4MemoryDataStream@Ogre@@6B@ DD 00H			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMemoryDataStream@Ogre@@@8
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7MemoryDataStream@Ogre@@6B@
CONST	SEGMENT
??_7MemoryDataStream@Ogre@@6B@ DD FLAT:??_R4MemoryDataStream@Ogre@@6B@ ; Ogre::MemoryDataStream::`vftable'
	DD	FLAT:??_EMemoryDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@MemoryDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@MemoryDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@MemoryDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@MemoryDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@MemoryDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@MemoryDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@MemoryDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::MemoryDataStream::MemoryDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7MemoryDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+44], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+48], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+44], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+48], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`scalar deleting destructor'
EXTRN	??1MemoryDataStream@Ogre@@UAE@XZ:PROC		; Ogre::MemoryDataStream::~MemoryDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@4
	push	OFFSET ??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@4
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@4
$LN3@vector@4:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@4:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`vftable'
PUBLIC	??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??_R4FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileStreamDataStream@Ogre@@@8		; Ogre::FileStreamDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8	; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`vector deleting destructor'
EXTRN	?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileStreamDataStream::read
EXTRN	?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileStreamDataStream::write
EXTRN	?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::FileStreamDataStream::readLine
EXTRN	?skip@FileStreamDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileStreamDataStream::skip
EXTRN	?seek@FileStreamDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileStreamDataStream::seek
EXTRN	?tell@FileStreamDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileStreamDataStream::tell
EXTRN	?eof@FileStreamDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileStreamDataStream::eof
EXTRN	?close@FileStreamDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileStreamDataStream::close
EXTRN	?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileStreamDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 DD FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileStreamDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileStreamDataStream@Ogre@@8 DD 00H		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileStreamDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileStreamDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileStreamDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileStreamDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileStreamDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileStreamDataStream@Ogre@@6B@ DD 00H		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileStreamDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileStreamDataStream@Ogre@@6B@ DD FLAT:??_R4FileStreamDataStream@Ogre@@6B@ ; Ogre::FileStreamDataStream::`vftable'
	DD	FLAT:??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileStreamDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileStreamDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileStreamDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileStreamDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileStreamDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileStreamDataStream::FileStreamDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileStreamDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+40]
	mov	BYTE PTR [edx+40], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileStreamDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileStreamDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+40]
	mov	BYTE PTR [ecx+40], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileStreamDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`scalar deleting destructor'
EXTRN	??1FileStreamDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileStreamDataStream::~FileStreamDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@5
	push	OFFSET ??1FileStreamDataStream@Ogre@@UAE@XZ ; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@5
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@5
$LN3@vector@5:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@5:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`vftable'
PUBLIC	??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??_R4FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileHandleDataStream@Ogre@@@8		; Ogre::FileHandleDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8	; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`vector deleting destructor'
EXTRN	?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileHandleDataStream::read
EXTRN	?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileHandleDataStream::write
EXTRN	?skip@FileHandleDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileHandleDataStream::skip
EXTRN	?seek@FileHandleDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileHandleDataStream::seek
EXTRN	?tell@FileHandleDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileHandleDataStream::tell
EXTRN	?eof@FileHandleDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileHandleDataStream::eof
EXTRN	?close@FileHandleDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileHandleDataStream::close
EXTRN	?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileHandleDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 DD FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileHandleDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileHandleDataStream@Ogre@@8 DD 00H		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileHandleDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileHandleDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileHandleDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileHandleDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileHandleDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileHandleDataStream@Ogre@@6B@ DD 00H		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileHandleDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileHandleDataStream@Ogre@@6B@ DD FLAT:??_R4FileHandleDataStream@Ogre@@6B@ ; Ogre::FileHandleDataStream::`vftable'
	DD	FLAT:??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileHandleDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileHandleDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileHandleDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileHandleDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileHandleDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileHandleDataStream::FileHandleDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileHandleDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileHandleDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileHandleDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileHandleDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`scalar deleting destructor'
EXTRN	??1FileHandleDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileHandleDataStream::~FileHandleDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@6
	push	OFFSET ??1FileHandleDataStream@Ogre@@UAE@XZ ; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@6
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@6
$LN3@vector@6:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@6:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`vftable'
PUBLIC	??1DataStreamObject@Ogre@@MAE@XZ		; Ogre::DataStreamObject::~DataStreamObject
PUBLIC	??_R4DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStreamObject@Ogre@@@8		; Ogre::DataStreamObject `RTTI Type Descriptor'
PUBLIC	??_R3DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStreamObject@Ogre@@8		; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStreamObject@Ogre@@8 DD FLAT:??_R0?AVDataStreamObject@Ogre@@@8 ; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R2DataStreamObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStreamObject@Ogre@@8 ; Ogre::DataStreamObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R3DataStreamObject@Ogre@@8 DD 00H			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStreamObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStreamObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::DataStreamObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStreamObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStreamObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStreamObject@Ogre@@6B@ DD 00H			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStreamObject@Ogre@@@8
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStreamObject@Ogre@@6B@
CONST	SEGMENT
??_7DataStreamObject@Ogre@@6B@ DD FLAT:??_R4DataStreamObject@Ogre@@6B@ ; Ogre::DataStreamObject::`vftable'
	DD	FLAT:??_EDataStreamObject@Ogre@@MAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??1DataStreamObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DataStreamObject@Ogre@@MAE@XZ PROC			; Ogre::DataStreamObject::~DataStreamObject, COMDAT
; _this$ = ecx

; 445  : 		virtual ~DataStreamObject(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1DataStreamObject@Ogre@@MAE@XZ ENDP			; Ogre::DataStreamObject::~DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@XZ		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DataStreamObject@Ogre@@QAE@XZ PROC			; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DataStreamObject@Ogre@@QAE@XZ ENDP			; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@ABV01@@Z		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z PROC		; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::DataStreamObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::DataStreamObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::DataStreamObject::operator=
_TEXT	ENDS
PUBLIC	??_GDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@7
	push	OFFSET ??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@7
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@7
$LN3@vector@7:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@7:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`vftable'
PUBLIC	??0ObjectDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??_R4ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVObjectDataStream@Ogre@@@8		; Ogre::ObjectDataStream `RTTI Type Descriptor'
PUBLIC	??_R3ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ObjectDataStream@Ogre@@8		; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`vector deleting destructor'
EXTRN	?read@ObjectDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::ObjectDataStream::read
EXTRN	?write@ObjectDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::ObjectDataStream::write
EXTRN	?skip@ObjectDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::ObjectDataStream::skip
EXTRN	?seek@ObjectDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::ObjectDataStream::seek
EXTRN	?tell@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::tell
EXTRN	?eof@ObjectDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::ObjectDataStream::eof
EXTRN	?size@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::size
EXTRN	?close@ObjectDataStream@Ogre@@UAEXXZ:PROC	; Ogre::ObjectDataStream::close
EXTRN	?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::ObjectDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 DD FLAT:??_R0?AVObjectDataStream@Ogre@@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2ObjectDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3ObjectDataStream@Ogre@@8 DD 00H			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVObjectDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVObjectDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::ObjectDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVObjectDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ObjectDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4ObjectDataStream@Ogre@@6B@ DD 00H			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVObjectDataStream@Ogre@@@8
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7ObjectDataStream@Ogre@@6B@
CONST	SEGMENT
??_7ObjectDataStream@Ogre@@6B@ DD FLAT:??_R4ObjectDataStream@Ogre@@6B@ ; Ogre::ObjectDataStream::`vftable'
	DD	FLAT:??_EObjectDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@ObjectDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@ObjectDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@ObjectDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@ObjectDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@ObjectDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@ObjectDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::ObjectDataStream::ObjectDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ObjectDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::ObjectDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::ObjectDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::ObjectDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`scalar deleting destructor'
EXTRN	??1ObjectDataStream@Ogre@@UAE@XZ:PROC		; Ogre::ObjectDataStream::~ObjectDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@8
	push	OFFSET ??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@8
$LN3@vector@8:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@8:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Archive@Ogre@@6B@				; Ogre::Archive::`vftable'
PUBLIC	??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z	; Ogre::Archive::Archive
PUBLIC	??_R4Archive@Ogre@@6B@				; Ogre::Archive::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVArchive@Ogre@@@8			; Ogre::Archive `RTTI Type Descriptor'
PUBLIC	??_R3Archive@Ogre@@8				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Archive@Ogre@@8				; Ogre::Archive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Archive@Ogre@@8			; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Archive@Ogre@@8
; File i:\svnroot\client\ogremain\ogrearchive.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Archive@Ogre@@8 DD FLAT:??_R0?AVArchive@Ogre@@@8 ; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Archive@Ogre@@8
rdata$r	SEGMENT
??_R2Archive@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Archive@Ogre@@8 ; Ogre::Archive::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Archive@Ogre@@8
rdata$r	SEGMENT
??_R3Archive@Ogre@@8 DD 00H				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVArchive@Ogre@@@8
_DATA	SEGMENT
??_R0?AVArchive@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Archive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArchive@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Archive@Ogre@@6B@
rdata$r	SEGMENT
??_R4Archive@Ogre@@6B@ DD 00H				; Ogre::Archive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArchive@Ogre@@@8
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Archive@Ogre@@6B@
CONST	SEGMENT
??_7Archive@Ogre@@6B@ DD FLAT:??_R4Archive@Ogre@@6B@	; Ogre::Archive::`vftable'
	DD	FLAT:??_EArchive@Ogre@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstream$ = 8						; size = 4
_mode$ = 12						; size = 4
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z PROC		; Ogre::Archive::Archive, COMDAT
; _this$ = ecx

; 22   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pstream$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 23   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z ENDP		; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??1Archive@Ogre@@UAE@XZ				; Ogre::Archive::~Archive
; Function compile flags: /Odtp
;	COMDAT ??1Archive@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Archive@Ogre@@UAE@XZ PROC				; Ogre::Archive::~Archive, COMDAT
; _this$ = ecx

; 26   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1Archive@Ogre@@UAE@XZ ENDP				; Ogre::Archive::~Archive
_TEXT	ENDS
PUBLIC	?isLoading@Archive@Ogre@@QAE_NXZ		; Ogre::Archive::isLoading
; Function compile flags: /Odtp
;	COMDAT ?isLoading@Archive@Ogre@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isLoading@Archive@Ogre@@QAE_NXZ PROC			; Ogre::Archive::isLoading, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Mode==MODE_LOAD;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+8], 1
	sete	cl
	mov	al, cl

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?isLoading@Archive@Ogre@@QAE_NXZ ENDP			; Ogre::Archive::isLoading
_TEXT	ENDS
PUBLIC	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z	; Ogre::Archive::serialize
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAD@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAD@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 108  : 		SERIALIZE_PRIMITIVE_FUNC(char)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAD@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAF@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAF@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 109  : 		SERIALIZE_PRIMITIVE_FUNC(short)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAF@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAH@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAH@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 110  : 		SERIALIZE_PRIMITIVE_FUNC(int)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAH@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_J@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_J@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 111  : 		SERIALIZE_PRIMITIVE_FUNC(int64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_J@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAE@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAE@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 112  : 		SERIALIZE_PRIMITIVE_FUNC(uchar)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAE@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAG@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAG@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 113  : 		SERIALIZE_PRIMITIVE_FUNC(ushort)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAG@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAI@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAI@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 114  : 		SERIALIZE_PRIMITIVE_FUNC(uint)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAI@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_K@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_K@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 115  : 		SERIALIZE_PRIMITIVE_FUNC(uint64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_K@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_N@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_N@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 116  : 		SERIALIZE_PRIMITIVE_FUNC(bool)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_N@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAM@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAM@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 117  : 		SERIALIZE_PRIMITIVE_FUNC(float)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAM@Z ENDP			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z PROC		; Ogre::Archive::serialize, COMDAT
; _this$ = ecx

; 155  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 			if(isLoading()) m_pStream->read(pbuf, len);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@serialize
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	jmp	SHORT $LN1@serialize
$LN2@serialize:

; 157  : 			else m_pStream->write(pbuf, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN1@serialize:

; 158  : 
; 159  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 160  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ENDP		; Ogre::Archive::serialize
_TEXT	ENDS
PUBLIC	?read@Archive@Ogre@@QAEXPAXI@Z			; Ogre::Archive::read
; Function compile flags: /Odtp
;	COMDAT ?read@Archive@Ogre@@QAEXPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?read@Archive@Ogre@@QAEXPAXI@Z PROC			; Ogre::Archive::read, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			m_pStream->read(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 165  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?read@Archive@Ogre@@QAEXPAXI@Z ENDP			; Ogre::Archive::read
_TEXT	ENDS
PUBLIC	?write@Archive@Ogre@@QAEXPBXI@Z			; Ogre::Archive::write
; Function compile flags: /Odtp
;	COMDAT ?write@Archive@Ogre@@QAEXPBXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?write@Archive@Ogre@@QAEXPBXI@Z PROC			; Ogre::Archive::write, COMDAT
; _this$ = ecx

; 168  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 			m_pStream->write(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 170  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?write@Archive@Ogre@@QAEXPBXI@Z ENDP			; Ogre::Archive::write
_TEXT	ENDS
PUBLIC	??0Archive@Ogre@@QAE@ABV01@@Z			; Ogre::Archive::Archive
; Function compile flags: /Odtp
;	COMDAT ??0Archive@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Archive@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Archive::Archive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Archive@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??4Archive@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Archive::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Archive@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Archive::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Archive::operator=
_TEXT	ENDS
PUBLIC	??_GArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@9
	push	OFFSET ??1Archive@Ogre@@UAE@XZ		; Ogre::Archive::~Archive
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@9
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@9:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@9
$LN3@vector@9:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@9:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@9:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@XZ				; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ??0Vector3@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector3@Ogre@@QAE@XZ PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 49   : 		Vector3(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@Ogre@@QAE@XZ ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@ABV01@@Z			; Ogre::Vector3::Vector3
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0Vector3@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 50   : 		Vector3(const Vector3 &rhs)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		{
; 52   : 			x = rhs.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 53   : 			y = rhs.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 54   : 			z = rhs.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 55   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@MMM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
??0Vector3@Ogre@@QAE@MMM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 56   : 		Vector3( float x1, float y1, float z1 ) : x(x1), y(y1), z(z1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector3@Ogre@@QAE@MMM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@M@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@M@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 57   : 		Vector3(float v) : x(v), y(v), z(v){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@M@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@PAM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@PAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@PAM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 58   : 		Vector3(float* v) : x(v[0]), y(v[1]), z(v[2]){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@PAM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??4Vector3@Ogre@@QAEABV01@ABV01@@Z		; Ogre::Vector3::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Vector3@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z PROC			; Ogre::Vector3::operator=, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			x = vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 63   : 			y = vec.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 64   : 			z = vec.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 65   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 66   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z ENDP			; Ogre::Vector3::operator=
_TEXT	ENDS
PUBLIC	??YVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??YVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator+=, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			x += vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 70   : 			y += vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 71   : 			z += vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 72   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator+=
_TEXT	ENDS
PUBLIC	??ZVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??ZVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator-=, COMDAT
; _this$ = ecx

; 74   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 			x -= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 76   : 			y -= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 77   : 			z -= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 78   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator-=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XVector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 81   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 			x *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 83   : 			y *= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 84   : 			z *= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 85   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??XVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 88   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 			x *= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 90   : 			y *= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 91   : 			z *= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 92   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??_0Vector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator/=
; Function compile flags: /Odtp
;	COMDAT ??_0Vector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??_0Vector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator/=, COMDAT
; _this$ = ecx

; 95   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 			x /= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 97   : 			y /= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fdiv	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 98   : 			z /= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fdiv	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 99   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??_0Vector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator/=
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QAEPAMXZ			; Ogre::Vector3::operator float *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QAEPAMXZ PROC				; Ogre::Vector3::operator float *, COMDAT
; _this$ = ecx

; 101  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 103  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QAEPAMXZ ENDP				; Ogre::Vector3::operator float *
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QBEPBMXZ			; Ogre::Vector3::operator float const *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QBEPBMXZ PROC				; Ogre::Vector3::operator float const *, COMDAT
; _this$ = ecx

; 105  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 107  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QBEPBMXZ ENDP				; Ogre::Vector3::operator float const *
_TEXT	ENDS
PUBLIC	??HVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator+
; Function compile flags: /Odtp
;	COMDAT ??HVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??HVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator+, COMDAT
; _this$ = ecx

; 109  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??HVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator+
_TEXT	ENDS
PUBLIC	??GVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator-
; Function compile flags: /Odtp
;	COMDAT ??GVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??GVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator-, COMDAT
; _this$ = ecx

; 113  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 			return Vector3(-x, -y, -z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 115  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??GVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator-
_TEXT	ENDS
PUBLIC	??8Vector3@Ogre@@QBE_NABV01@@Z			; Ogre::Vector3::operator==
; Function compile flags: /Odtp
;	COMDAT ??8Vector3@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??8Vector3@Ogre@@QBE_NABV01@@Z PROC			; Ogre::Vector3::operator==, COMDAT
; _this$ = ecx

; 117  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 			return (x==vec.x && y==vec.y && z==vec.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv77[ebp]

; 119  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector3@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::Vector3::operator==
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXMMM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
?setElement@Vector3@Ogre@@QAEXMMM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			x = x1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]

; 123  : 			y = y1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]

; 124  : 			z = z1;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]

; 125  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setElement@Vector3@Ogre@@QAEXMMM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXPAM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXPAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?setElement@Vector3@Ogre@@QAEXPAM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 127  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 			x = p[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 129  : 			y = p[1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 130  : 			z = p[2];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 131  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setElement@Vector3@Ogre@@QAEXPAM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?Sqrt@Ogre@@YAMM@Z				; Ogre::Sqrt
PUBLIC	?length@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::length
; Function compile flags: /Odtp
;	COMDAT ?length@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?length@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::length, COMDAT
; _this$ = ecx

; 133  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 			return (float)Sqrt(x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@Ogre@@YAMM@Z			; Ogre::Sqrt
	add	esp, 4

; 135  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::length
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
;	COMDAT ?Sqrt@Ogre@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Sqrt@Ogre@@YAMM@Z PROC					; Ogre::Sqrt, COMDAT

; 59   : 	{

	push	ebp
	mov	ebp, esp

; 60   : 		return (float)sqrt(x);

	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 61   : 	}

	pop	ebp
	ret	0
?Sqrt@Ogre@@YAMM@Z ENDP					; Ogre::Sqrt
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?lengthSqr@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::lengthSqr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ?lengthSqr@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?lengthSqr@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::lengthSqr, COMDAT
; _this$ = ecx

; 137  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 			return (x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]

; 139  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?lengthSqr@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::lengthSqr
_TEXT	ENDS
PUBLIC	?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix3::getRow3
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix3.h
;	COMDAT ?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z PROC		; Ogre::Matrix3::getRow3, COMDAT
; _this$ = ecx

; 67   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 			return Vector3(m[i][0], m[i][1], m[i][2]);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax+8]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx+4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 69   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z ENDP		; Ogre::Matrix3::getRow3
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	?identity@Matrix3@Ogre@@QAEXXZ			; Ogre::Matrix3::identity
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?identity@Matrix3@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?identity@Matrix3@Ogre@@QAEXXZ PROC			; Ogre::Matrix3::identity, COMDAT
; _this$ = ecx

; 71   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 72   : 			_11=1.0f, _12=0.0f, _13=0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+8]

; 73   : 			_21=0.0f, _22=1.0f, _23=0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+20]

; 74   : 			_31=0.0f, _32=0.0f, _33=1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [edx+32]

; 75   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?identity@Matrix3@Ogre@@QAEXXZ ENDP			; Ogre::Matrix3::identity
_TEXT	ENDS
PUBLIC	?setRow@Matrix3@Ogre@@QAEXIMMM@Z		; Ogre::Matrix3::setRow
; Function compile flags: /Odtp
;	COMDAT ?setRow@Matrix3@Ogre@@QAEXIMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?setRow@Matrix3@Ogre@@QAEXIMMM@Z PROC			; Ogre::Matrix3::setRow, COMDAT
; _this$ = ecx

; 77   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 			m[i][0] = x;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [ecx+eax]

; 79   : 			m[i][1] = y;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+edx+4]

; 80   : 			m[i][2] = z;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [edx+ecx+8]

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?setRow@Matrix3@Ogre@@QAEXIMMM@Z ENDP			; Ogre::Matrix3::setRow
_TEXT	ENDS
PUBLIC	?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix3::getColumn
; Function compile flags: /Odtp
;	COMDAT ?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z PROC	; Ogre::Matrix3::getColumn, COMDAT
; _this$ = ecx

; 84   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 			return Vector3(m[0][i], m[1][i], m[2][i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4+24]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx*4+12]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx*4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 86   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z ENDP	; Ogre::Matrix3::getColumn
_TEXT	ENDS
PUBLIC	?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z		; Ogre::Matrix3::makeScaleMatrix
EXTRN	?makeScaleMatrix@Matrix3@Ogre@@QAEXABVVector3@2@@Z:PROC ; Ogre::Matrix3::makeScaleMatrix
; Function compile flags: /Odtp
;	COMDAT ?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T66365 = -12						; size = 12
_s$ = 8							; size = 4
?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z PROC		; Ogre::Matrix3::makeScaleMatrix, COMDAT
; _this$ = ecx

; 93   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 94   : 			makeScaleMatrix(Vector3(s, s, s));

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T66365[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?makeScaleMatrix@Matrix3@Ogre@@QAEXABVVector3@2@@Z ; Ogre::Matrix3::makeScaleMatrix

; 95   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z ENDP		; Ogre::Matrix3::makeScaleMatrix
_TEXT	ENDS
PUBLIC	??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Matrix3::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Matrix3::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, DWORD PTR ___that$[ebp]
	mov	ecx, 9
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Matrix3::operator=
_TEXT	ENDS
PUBLIC	??AMatrix4@Ogre@@QBEPBMI@Z			; Ogre::Matrix4::operator[]
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.h
;	COMDAT ??AMatrix4@Ogre@@QBEPBMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_irow$ = 8						; size = 4
??AMatrix4@Ogre@@QBEPBMI@Z PROC				; Ogre::Matrix4::operator[], COMDAT
; _this$ = ecx

; 88   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 			return &m[irow][0];

	mov	eax, DWORD PTR _irow$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]

; 90   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@Ogre@@QBEPBMI@Z ENDP				; Ogre::Matrix4::operator[]
_TEXT	ENDS
PUBLIC	??AMatrix4@Ogre@@QAEPAMI@Z			; Ogre::Matrix4::operator[]
; Function compile flags: /Odtp
;	COMDAT ??AMatrix4@Ogre@@QAEPAMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_irow$ = 8						; size = 4
??AMatrix4@Ogre@@QAEPAMI@Z PROC				; Ogre::Matrix4::operator[], COMDAT
; _this$ = ecx

; 92   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 			return &m[irow][0];

	mov	eax, DWORD PTR _irow$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]

; 94   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@Ogre@@QAEPAMI@Z ENDP				; Ogre::Matrix4::operator[]
_TEXT	ENDS
PUBLIC	?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z		; Ogre::Matrix4::makeScaleMatrix
EXTRN	?makeScaleMatrix@Matrix4@Ogre@@QAEXABVVector3@2@@Z:PROC ; Ogre::Matrix4::makeScaleMatrix
; Function compile flags: /Odtp
;	COMDAT ?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T66374 = -12						; size = 12
_s$ = 8							; size = 4
?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z PROC		; Ogre::Matrix4::makeScaleMatrix, COMDAT
; _this$ = ecx

; 101  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 			makeScaleMatrix(Vector3(s, s, s));

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T66374[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?makeScaleMatrix@Matrix4@Ogre@@QAEXABVVector3@2@@Z ; Ogre::Matrix4::makeScaleMatrix

; 103  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z ENDP		; Ogre::Matrix4::makeScaleMatrix
_TEXT	ENDS
PUBLIC	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z		; Ogre::Matrix4::setRow
; Function compile flags: /Odtp
;	COMDAT ?setRow@Matrix4@Ogre@@QAEXIMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_w$ = 24						; size = 4
?setRow@Matrix4@Ogre@@QAEXIMMMM@Z PROC			; Ogre::Matrix4::setRow, COMDAT
; _this$ = ecx

; 133  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 			m[i][0] = x;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [ecx+eax]

; 135  : 			m[i][1] = y;

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+edx+4]

; 136  : 			m[i][2] = z;

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [edx+ecx+8]

; 137  : 			m[i][3] = w;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [ecx+eax+12]

; 138  : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?setRow@Matrix4@Ogre@@QAEXIMMMM@Z ENDP			; Ogre::Matrix4::setRow
_TEXT	ENDS
PUBLIC	?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z		; Ogre::Matrix4::setColumn
; Function compile flags: /Odtp
;	COMDAT ?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_w$ = 24						; size = 4
?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z PROC		; Ogre::Matrix4::setColumn, COMDAT
; _this$ = ecx

; 140  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 			m[0][i] = x;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [ecx+eax*4]

; 142  : 			m[1][i] = y;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+edx*4+16]

; 143  : 			m[2][i] = z;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [edx+ecx*4+32]

; 144  : 			m[3][i] = w;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [ecx+eax*4+48]

; 145  : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z ENDP		; Ogre::Matrix4::setColumn
_TEXT	ENDS
PUBLIC	?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix4::getRow3
; Function compile flags: /Odtp
;	COMDAT ?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z PROC		; Ogre::Matrix4::getRow3, COMDAT
; _this$ = ecx

; 147  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 			return Vector3(m[i][0], m[i][1], m[i][2]);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax+8]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx+4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 149  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z ENDP		; Ogre::Matrix4::getRow3
_TEXT	ENDS
PUBLIC	?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix4::getColumn3
; Function compile flags: /Odtp
;	COMDAT ?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z PROC	; Ogre::Matrix4::getColumn3, COMDAT
; _this$ = ecx

; 151  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 			return Vector3(m[0][i], m[1][i], m[2][i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4+32]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx*4+16]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx*4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 153  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z ENDP	; Ogre::Matrix4::getColumn3
_TEXT	ENDS
PUBLIC	??0Vector4@Ogre@@QAE@MMMM@Z			; Ogre::Vector4::Vector4
PUBLIC	?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z	; Ogre::Matrix4::getRow4
; Function compile flags: /Odtp
;	COMDAT ?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z PROC		; Ogre::Matrix4::getRow4, COMDAT
; _this$ = ecx

; 155  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 			return Vector4(m[i][0], m[i][1], m[i][2], m[i][3]);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax+12]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx+8]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx+4]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector4@Ogre@@QAE@MMMM@Z		; Ogre::Vector4::Vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 157  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z ENDP		; Ogre::Matrix4::getRow4
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector4.h
_TEXT	ENDS
;	COMDAT ??0Vector4@Ogre@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
_w1$ = 20						; size = 4
??0Vector4@Ogre@@QAE@MMMM@Z PROC			; Ogre::Vector4::Vector4, COMDAT
; _this$ = ecx

; 44   : 		Vector4( float x1, float y1, float z1, float w1 ) : x(x1), y(y1), z(z1), w(w1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w1$[ebp]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Vector4@Ogre@@QAE@MMMM@Z ENDP			; Ogre::Vector4::Vector4
_TEXT	ENDS
PUBLIC	?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z	; Ogre::Matrix4::getColumn4
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.h
;	COMDAT ?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z PROC	; Ogre::Matrix4::getColumn4, COMDAT
; _this$ = ecx

; 159  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 			return Vector4(m[0][i], m[1][i], m[2][i], m[3][i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4+48]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx*4+32]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx*4+16]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector4@Ogre@@QAE@MMMM@Z		; Ogre::Vector4::Vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z ENDP	; Ogre::Matrix4::getColumn4
_TEXT	ENDS
PUBLIC	?setTranslate@Matrix4@Ogre@@QAEXMMM@Z		; Ogre::Matrix4::setTranslate
; Function compile flags: /Odtp
;	COMDAT ?setTranslate@Matrix4@Ogre@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?setTranslate@Matrix4@Ogre@@QAEXMMM@Z PROC		; Ogre::Matrix4::setTranslate, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			setRow( 3, x, y, z, 1.0f );

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 165  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setTranslate@Matrix4@Ogre@@QAEXMMM@Z ENDP		; Ogre::Matrix4::setTranslate
_TEXT	ENDS
PUBLIC	?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z	; Ogre::Matrix4::setTranslate
; Function compile flags: /Odtp
;	COMDAT ?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z PROC	; Ogre::Matrix4::setTranslate, COMDAT
; _this$ = ecx

; 167  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 			setTranslate( pos.x, pos.y, pos.z );

	mov	eax, DWORD PTR _pos$[ebp]
	push	ecx
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _pos$[ebp]
	push	ecx
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setTranslate@Matrix4@Ogre@@QAEXMMM@Z	; Ogre::Matrix4::setTranslate

; 169  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z ENDP	; Ogre::Matrix4::setTranslate
_TEXT	ENDS
PUBLIC	?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ	; Ogre::Matrix4::getTranslate
; Function compile flags: /Odtp
;	COMDAT ?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::Matrix4::getTranslate, COMDAT
; _this$ = ecx

; 171  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 172  : 			return getRow3(3);

	push	3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z ; Ogre::Matrix4::getRow3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 173  : 		};

	mov	esp, ebp
	pop	ebp
	ret	4
?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::Matrix4::getTranslate
_TEXT	ENDS
PUBLIC	?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z ; Ogre::Matrix4::transformCoord
; Function compile flags: /Odtp
;	COMDAT ?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z
_TEXT	SEGMENT
tv182 = -16						; size = 4
tv174 = -12						; size = 4
tv166 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_vec$ = 12						; size = 4
?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z PROC ; Ogre::Matrix4::transformCoord, COMDAT
; _this$ = ecx

; 233  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 		return Vector3( vec.x*_11 + vec.y*_21 + vec.z*_31 + _41,
; 235  : 			vec.x*_12 + vec.y*_22 + vec.z*_32 + _42,
; 236  : 			vec.x*_13 + vec.y*_23 + vec.z*_33 + _43 );

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+24]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+40]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+56]
	fstp	DWORD PTR tv166[ebp]
	fld	DWORD PTR tv166[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+20]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+36]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+52]
	fstp	DWORD PTR tv174[ebp]
	fld	DWORD PTR tv174[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+16]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+32]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [edx+48]
	fstp	DWORD PTR tv182[ebp]
	fld	DWORD PTR tv182[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 237  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z ENDP ; Ogre::Matrix4::transformCoord
_TEXT	ENDS
PUBLIC	?getRTTI@BoneData@Ogre@@UBEPBVRuntimeClass@2@XZ	; Ogre::BoneData::getRTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreskeletondata.h
;	COMDAT ?getRTTI@BoneData@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@BoneData@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::BoneData::getRTTI, COMDAT
; _this$ = ecx

; 13   : 		DECLARE_RTTI(BoneData)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@BoneData@Ogre@@2VRuntimeClass@2@B ; Ogre::BoneData::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@BoneData@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::BoneData::getRTTI
_TEXT	ENDS
PUBLIC	??0BoneData@Ogre@@QAE@XZ			; Ogre::BoneData::BoneData
PUBLIC	?newObject@BoneData@Ogre@@SAPAVBaseObject@2@XZ	; Ogre::BoneData::newObject
EXTRN	??2MemoryDelegation@Ogre@@SAPAXI@Z:PROC		; Ogre::MemoryDelegation::operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@BoneData@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@BoneData@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@BoneData@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@BoneData@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@BoneData@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T66402 = -20						; size = 4
$T66401 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@BoneData@Ogre@@SAPAVBaseObject@2@XZ PROC	; Ogre::BoneData::newObject, COMDAT

; 13   : 		DECLARE_RTTI(BoneData)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@BoneData@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	96					; 00000060H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T66402[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T66402[ebp], 0
	je	SHORT $LN3@newObject
	mov	ecx, DWORD PTR $T66402[ebp]
	call	??0BoneData@Ogre@@QAE@XZ		; Ogre::BoneData::BoneData
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject
$LN3@newObject:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T66401[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T66401[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@BoneData@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	96					; 00000060H
	mov	eax, DWORD PTR $T66402[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@BoneData@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@BoneData@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@BoneData@Ogre@@SAPAVBaseObject@2@XZ ENDP	; Ogre::BoneData::newObject
PUBLIC	??_7BoneData@Ogre@@6B@				; Ogre::BoneData::`vftable'
PUBLIC	??_R4BoneData@Ogre@@6B@				; Ogre::BoneData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBoneData@Ogre@@@8			; Ogre::BoneData `RTTI Type Descriptor'
PUBLIC	??_R3BoneData@Ogre@@8				; Ogre::BoneData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BoneData@Ogre@@8				; Ogre::BoneData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BoneData@Ogre@@8			; Ogre::BoneData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?_serialize@BoneData@Ogre@@EAEXAAVArchive@2@H@Z	; Ogre::BoneData::_serialize
PUBLIC	??_EBoneData@Ogre@@UAEPAXI@Z			; Ogre::BoneData::`vector deleting destructor'
EXTRN	??0Matrix4@Ogre@@QAE@XZ:PROC			; Ogre::Matrix4::Matrix4
;	COMDAT ??_R1A@?0A@EA@BoneData@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BoneData@Ogre@@8 DD FLAT:??_R0?AVBoneData@Ogre@@@8 ; Ogre::BoneData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BoneData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2BoneData@Ogre@@8
rdata$r	SEGMENT
??_R2BoneData@Ogre@@8 DD FLAT:??_R1A@?0A@EA@BoneData@Ogre@@8 ; Ogre::BoneData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3BoneData@Ogre@@8
rdata$r	SEGMENT
??_R3BoneData@Ogre@@8 DD 00H				; Ogre::BoneData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2BoneData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBoneData@Ogre@@@8
_DATA	SEGMENT
??_R0?AVBoneData@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::BoneData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBoneData@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BoneData@Ogre@@6B@
rdata$r	SEGMENT
??_R4BoneData@Ogre@@6B@ DD 00H				; Ogre::BoneData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBoneData@Ogre@@@8
	DD	FLAT:??_R3BoneData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7BoneData@Ogre@@6B@
CONST	SEGMENT
??_7BoneData@Ogre@@6B@ DD FLAT:??_R4BoneData@Ogre@@6B@	; Ogre::BoneData::`vftable'
	DD	FLAT:?getRTTI@BoneData@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BoneData@Ogre@@EAEXAAVArchive@2@H@Z
	DD	FLAT:??_EBoneData@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0BoneData@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BoneData@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0BoneData@Ogre@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0BoneData@Ogre@@QAE@XZ$2
__ehfuncinfo$??0BoneData@Ogre@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0BoneData@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0BoneData@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0BoneData@Ogre@@QAE@XZ PROC				; Ogre::BoneData::BoneData, COMDAT
; _this$ = ecx

; 16   : 		BoneData()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BoneData@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BoneData@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0Matrix4@Ogre@@QAE@XZ			; Ogre::Matrix4::Matrix4

; 17   : 		{
; 18   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0BoneData@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??0BoneData@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__unwindfunclet$??0BoneData@Ogre@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0BoneData@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BoneData@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BoneData@Ogre@@QAE@XZ ENDP				; Ogre::BoneData::BoneData
PUBLIC	??1BoneData@Ogre@@UAE@XZ			; Ogre::BoneData::~BoneData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1BoneData@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BoneData@Ogre@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1BoneData@Ogre@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1BoneData@Ogre@@UAE@XZ$2
__ehfuncinfo$??1BoneData@Ogre@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1BoneData@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1BoneData@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BoneData@Ogre@@UAE@XZ PROC				; Ogre::BoneData::~BoneData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1BoneData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BoneData@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??1BoneData@Ogre@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__unwindfunclet$??1BoneData@Ogre@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??1BoneData@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1BoneData@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1BoneData@Ogre@@UAE@XZ ENDP				; Ogre::BoneData::~BoneData
PUBLIC	??0BoneData@Ogre@@QAE@ABV01@@Z			; Ogre::BoneData::BoneData
EXTRN	??0Matrix4@Ogre@@QAE@ABV01@@Z:PROC		; Ogre::Matrix4::Matrix4
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0BoneData@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BoneData@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0BoneData@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0BoneData@Ogre@@QAE@ABV01@@Z$2
__ehfuncinfo$??0BoneData@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0BoneData@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0BoneData@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0BoneData@Ogre@@QAE@ABV01@@Z PROC			; Ogre::BoneData::BoneData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BoneData@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BoneData@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0FixedString@Ogre@@QAE@ABV01@@Z	; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0FixedString@Ogre@@QAE@ABV01@@Z	; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0Matrix4@Ogre@@QAE@ABV01@@Z		; Ogre::Matrix4::Matrix4
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0BoneData@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??0BoneData@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__unwindfunclet$??0BoneData@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0BoneData@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BoneData@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BoneData@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::BoneData::BoneData
PUBLIC	??4BoneData@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BoneData::operator=
EXTRN	??4Matrix4@Ogre@@QAEABV01@ABV01@@Z:PROC		; Ogre::Matrix4::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BoneData@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BoneData@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BoneData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4Matrix4@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Matrix4::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BoneData@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BoneData::operator=
_TEXT	ENDS
PUBLIC	??_GBoneData@Ogre@@UAEPAXI@Z			; Ogre::BoneData::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GBoneData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBoneData@Ogre@@UAEPAXI@Z PROC			; Ogre::BoneData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BoneData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@10
	push	96					; 00000060H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@10:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBoneData@Ogre@@UAEPAXI@Z ENDP			; Ogre::BoneData::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EBoneData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EBoneData@Ogre@@UAEPAXI@Z PROC			; Ogre::BoneData::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@10
	push	OFFSET ??1BoneData@Ogre@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	96					; 00000060H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@10
	push	96					; 00000060H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@10:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@10
$LN3@vector@10:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BoneData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@10
	push	96					; 00000060H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@10:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@10:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EBoneData@Ogre@@UAEPAXI@Z ENDP			; Ogre::BoneData::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@SkeletonData@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::SkeletonData::getRTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@SkeletonData@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@SkeletonData@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::SkeletonData::getRTTI, COMDAT
; _this$ = ecx

; 34   : 		DECLARE_RTTI(SkeletonData)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@SkeletonData@Ogre@@2VRuntimeClass@2@B ; Ogre::SkeletonData::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@SkeletonData@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::SkeletonData::getRTTI
_TEXT	ENDS
PUBLIC	??0SkeletonData@Ogre@@QAE@XZ			; Ogre::SkeletonData::SkeletonData
PUBLIC	?newObject@SkeletonData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::SkeletonData::newObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@SkeletonData@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@SkeletonData@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@SkeletonData@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@SkeletonData@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@SkeletonData@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T66456 = -20						; size = 4
$T66455 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@SkeletonData@Ogre@@SAPAVBaseObject@2@XZ PROC	; Ogre::SkeletonData::newObject, COMDAT

; 34   : 		DECLARE_RTTI(SkeletonData)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@SkeletonData@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	72					; 00000048H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T66456[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T66456[ebp], 0
	je	SHORT $LN3@newObject@2
	mov	ecx, DWORD PTR $T66456[ebp]
	call	??0SkeletonData@Ogre@@QAE@XZ		; Ogre::SkeletonData::SkeletonData
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject@2
$LN3@newObject@2:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject@2:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T66455[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T66455[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@SkeletonData@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	72					; 00000048H
	mov	eax, DWORD PTR $T66456[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@SkeletonData@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@SkeletonData@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@SkeletonData@Ogre@@SAPAVBaseObject@2@XZ ENDP	; Ogre::SkeletonData::newObject
PUBLIC	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
PUBLIC	?getNumBone@SkeletonData@Ogre@@QAEIXZ		; Ogre::SkeletonData::getNumBone
; Function compile flags: /Odtp
;	COMDAT ?getNumBone@SkeletonData@Ogre@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumBone@SkeletonData@Ogre@@QAEIXZ PROC		; Ogre::SkeletonData::getNumBone, COMDAT
; _this$ = ecx

; 41   : 		size_t getNumBone(){ return m_BoneTable.size(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	mov	esp, ebp
	pop	ebp
	ret	0
?getNumBone@SkeletonData@Ogre@@QAEIXZ ENDP		; Ogre::SkeletonData::getNumBone
_TEXT	ENDS
PUBLIC	??A?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAPAVBoneData@Ogre@@I@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator[]
PUBLIC	?getIthBone@SkeletonData@Ogre@@QAEPAVBoneData@2@I@Z ; Ogre::SkeletonData::getIthBone
; Function compile flags: /Odtp
;	COMDAT ?getIthBone@SkeletonData@Ogre@@QAEPAVBoneData@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getIthBone@SkeletonData@Ogre@@QAEPAVBoneData@2@I@Z PROC ; Ogre::SkeletonData::getIthBone, COMDAT
; _this$ = ecx

; 42   : 		BoneData *getIthBone(size_t i){ return m_BoneTable[i]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAPAVBoneData@Ogre@@I@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	4
?getIthBone@SkeletonData@Ogre@@QAEPAVBoneData@2@I@Z ENDP ; Ogre::SkeletonData::getIthBone
_TEXT	ENDS
PUBLIC	??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::~map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >
PUBLIC	??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::~vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
PUBLIC	??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@ABV01@@Z ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >
PUBLIC	??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
PUBLIC	??_7SkeletonData@Ogre@@6B@			; Ogre::SkeletonData::`vftable'
PUBLIC	??0SkeletonData@Ogre@@QAE@ABV01@@Z		; Ogre::SkeletonData::SkeletonData
PUBLIC	??_R4SkeletonData@Ogre@@6B@			; Ogre::SkeletonData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSkeletonData@Ogre@@@8			; Ogre::SkeletonData `RTTI Type Descriptor'
PUBLIC	??_R3SkeletonData@Ogre@@8			; Ogre::SkeletonData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SkeletonData@Ogre@@8			; Ogre::SkeletonData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SkeletonData@Ogre@@8		; Ogre::SkeletonData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?_serialize@SkeletonData@Ogre@@EAEXAAVArchive@2@H@Z ; Ogre::SkeletonData::_serialize
PUBLIC	??_ESkeletonData@Ogre@@MAEPAXI@Z		; Ogre::SkeletonData::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@SkeletonData@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SkeletonData@Ogre@@8 DD FLAT:??_R0?AVSkeletonData@Ogre@@@8 ; Ogre::SkeletonData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SkeletonData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2SkeletonData@Ogre@@8
rdata$r	SEGMENT
??_R2SkeletonData@Ogre@@8 DD FLAT:??_R1A@?0A@EA@SkeletonData@Ogre@@8 ; Ogre::SkeletonData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3SkeletonData@Ogre@@8
rdata$r	SEGMENT
??_R3SkeletonData@Ogre@@8 DD 00H			; Ogre::SkeletonData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2SkeletonData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSkeletonData@Ogre@@@8
_DATA	SEGMENT
??_R0?AVSkeletonData@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::SkeletonData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSkeletonData@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SkeletonData@Ogre@@6B@
rdata$r	SEGMENT
??_R4SkeletonData@Ogre@@6B@ DD 00H			; Ogre::SkeletonData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSkeletonData@Ogre@@@8
	DD	FLAT:??_R3SkeletonData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7SkeletonData@Ogre@@6B@
CONST	SEGMENT
??_7SkeletonData@Ogre@@6B@ DD FLAT:??_R4SkeletonData@Ogre@@6B@ ; Ogre::SkeletonData::`vftable'
	DD	FLAT:?getRTTI@SkeletonData@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@SkeletonData@Ogre@@EAEXAAVArchive@2@H@Z
	DD	FLAT:??_ESkeletonData@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SkeletonData@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SkeletonData@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SkeletonData@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0SkeletonData@Ogre@@QAE@ABV01@@Z$2
__ehfuncinfo$??0SkeletonData@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0SkeletonData@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0SkeletonData@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0SkeletonData@Ogre@@QAE@ABV01@@Z PROC			; Ogre::SkeletonData::SkeletonData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0SkeletonData@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7SkeletonData@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SkeletonData@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??0SkeletonData@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::~vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
__unwindfunclet$??0SkeletonData@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ
__ehhandler$??0SkeletonData@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0SkeletonData@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0SkeletonData@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::SkeletonData::SkeletonData
PUBLIC	??4?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAV01@ABV01@@Z ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::operator=
PUBLIC	??4?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator=
PUBLIC	??4SkeletonData@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::SkeletonData::operator=
; Function compile flags: /Odtp
;	COMDAT ??4SkeletonData@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4SkeletonData@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::SkeletonData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??4?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4SkeletonData@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::SkeletonData::operator=
_TEXT	ENDS
PUBLIC	??1SkeletonData@Ogre@@MAE@XZ			; Ogre::SkeletonData::~SkeletonData
PUBLIC	??_GSkeletonData@Ogre@@MAEPAXI@Z		; Ogre::SkeletonData::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GSkeletonData@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GSkeletonData@Ogre@@MAEPAXI@Z PROC			; Ogre::SkeletonData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SkeletonData@Ogre@@MAE@XZ		; Ogre::SkeletonData::~SkeletonData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@11
	push	72					; 00000048H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@11:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSkeletonData@Ogre@@MAEPAXI@Z ENDP			; Ogre::SkeletonData::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_ESkeletonData@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ESkeletonData@Ogre@@MAEPAXI@Z PROC			; Ogre::SkeletonData::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@11
	push	OFFSET ??1SkeletonData@Ogre@@MAE@XZ	; Ogre::SkeletonData::~SkeletonData
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	72					; 00000048H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@11
	push	72					; 00000048H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@11:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@11
$LN3@vector@11:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SkeletonData@Ogre@@MAE@XZ		; Ogre::SkeletonData::~SkeletonData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@11
	push	72					; 00000048H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@11:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@11:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ESkeletonData@Ogre@@MAEPAXI@Z ENDP			; Ogre::SkeletonData::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
PUBLIC	??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@ABV01@@Z PROC ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
__ehhandler$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@ABV01@@Z ENDP ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ$0
__ehfuncinfo$??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ PROC ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::~map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
__ehhandler$??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ ENDP ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::~map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >
PUBLIC	??4?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::operator=
; Function compile flags: /Odtp
;	COMDAT ??4?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAV01@ABV01@@Z PROC ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAV01@ABV01@@Z ENDP ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::operator=
_TEXT	ENDS
PUBLIC	??$serializeRawType@VMatrix4@Ogre@@@Archive@Ogre@@QAEXAAVMatrix4@1@@Z ; Ogre::Archive::serializeRawType<Ogre::Matrix4>
EXTRN	??6Archive@Ogre@@QAEAAV01@AAVFixedString@1@@Z:PROC ; Ogre::Archive::operator<<
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreskeletondata.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@BoneData@Ogre@@EAEXAAVArchive@2@H@Z PROC	; Ogre::BoneData::_serialize
; _this$ = ecx

; 11   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 12   : 		ar << m_Name;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??6Archive@Ogre@@QAEAAV01@AAVFixedString@1@@Z ; Ogre::Archive::operator<<

; 13   : 		ar << m_UserData;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??6Archive@Ogre@@QAEAAV01@AAVFixedString@1@@Z ; Ogre::Archive::operator<<

; 14   : 		ar << m_FatherID;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??6Archive@Ogre@@QAEAAV01@AAH@Z		; Ogre::Archive::operator<<

; 15   : 		ar.serializeRawType(m_OriginTM);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawType@VMatrix4@Ogre@@@Archive@Ogre@@QAEXAAVMatrix4@1@@Z ; Ogre::Archive::serializeRawType<Ogre::Matrix4>

; 16   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@BoneData@Ogre@@EAEXAAVArchive@2@H@Z ENDP	; Ogre::BoneData::_serialize
_TEXT	ENDS
PUBLIC	??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >
PUBLIC	??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
xdata$x	SEGMENT
__unwindtable$??0SkeletonData@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SkeletonData@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SkeletonData@Ogre@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0SkeletonData@Ogre@@QAE@XZ$2
__ehfuncinfo$??0SkeletonData@Ogre@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0SkeletonData@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0SkeletonData@Ogre@@QAE@XZ PROC			; Ogre::SkeletonData::SkeletonData
; _this$ = ecx

; 19   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0SkeletonData@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7SkeletonData@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 20   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0SkeletonData@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??0SkeletonData@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::~vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
__unwindfunclet$??0SkeletonData@Ogre@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ
__ehhandler$??0SkeletonData@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0SkeletonData@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0SkeletonData@Ogre@@QAE@XZ ENDP			; Ogre::SkeletonData::SkeletonData
PUBLIC	??$DeletePointerArray@VBoneData@Ogre@@@Ogre@@YAXAAV?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@Z ; Ogre::DeletePointerArray<Ogre::BoneData>
xdata$x	SEGMENT
__unwindtable$??1SkeletonData@Ogre@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1SkeletonData@Ogre@@MAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1SkeletonData@Ogre@@MAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1SkeletonData@Ogre@@MAE@XZ$2
__ehfuncinfo$??1SkeletonData@Ogre@@MAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1SkeletonData@Ogre@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1SkeletonData@Ogre@@MAE@XZ PROC			; Ogre::SkeletonData::~SkeletonData
; _this$ = ecx

; 23   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1SkeletonData@Ogre@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7SkeletonData@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 24   : 		DeletePointerArray(m_BoneTable);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	??$DeletePointerArray@VBoneData@Ogre@@@Ogre@@YAXAAV?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@Z ; Ogre::DeletePointerArray<Ogre::BoneData>
	add	esp, 4

; 25   : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::~vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1SkeletonData@Ogre@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??1SkeletonData@Ogre@@MAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::~vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
__unwindfunclet$??1SkeletonData@Ogre@@MAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ
__ehhandler$??1SkeletonData@Ogre@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1SkeletonData@Ogre@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1SkeletonData@Ogre@@MAE@XZ ENDP			; Ogre::SkeletonData::~SkeletonData
PUBLIC	??A?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAHABVFixedString@Ogre@@@Z ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::operator[]
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABVFixedString@Ogre@@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::find
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::end
PUBLIC	?findBoneID@SkeletonData@Ogre@@QAEHABVFixedString@2@@Z ; Ogre::SkeletonData::findBoneID
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T66527 = -16						; size = 8
$T66526 = -8						; size = 8
_name$ = 8						; size = 4
?findBoneID@SkeletonData@Ogre@@QAEHABVFixedString@2@@Z PROC ; Ogre::SkeletonData::findBoneID
; _this$ = ecx

; 28   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 29   : 		if(m_BoneNameID.find(name) == m_BoneNameID.end()) return -1;

	lea	eax, DWORD PTR $T66527[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?end@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::end
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66526[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?find@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABVFixedString@Ogre@@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::find
	mov	ecx, eax
	call	??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@findBoneID
	or	eax, -1
	jmp	SHORT $LN3@findBoneID
	jmp	SHORT $LN3@findBoneID
$LN2@findBoneID:

; 30   : 		else return m_BoneNameID[name];

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAHABVFixedString@Ogre@@@Z ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::operator[]
	mov	eax, DWORD PTR [eax]
$LN3@findBoneID:

; 31   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?findBoneID@SkeletonData@Ogre@@QAEHABVFixedString@2@@Z ENDP ; Ogre::SkeletonData::findBoneID
_TEXT	ENDS
PUBLIC	??$?6VBoneData@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@Z ; Ogre::Archive::operator<<<Ogre::BoneData>
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_pbone$59401 = -8					; size = 4
_i$59397 = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@SkeletonData@Ogre@@EAEXAAVArchive@2@H@Z PROC ; Ogre::SkeletonData::_serialize
; _this$ = ecx

; 34   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		ar << m_BoneTable;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$?6VBoneData@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@Z ; Ogre::Archive::operator<<<Ogre::BoneData>

; 36   : 
; 37   : 		if(ar.isLoading())

	mov	ecx, DWORD PTR _ar$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@serialize@2

; 38   : 		{
; 39   : 			for(size_t i=0; i<m_BoneTable.size(); i++)

	mov	DWORD PTR _i$59397[ebp], 0
	jmp	SHORT $LN3@serialize@2
$LN2@serialize@2:
	mov	edx, DWORD PTR _i$59397[ebp]
	add	edx, 1
	mov	DWORD PTR _i$59397[ebp], edx
$LN3@serialize@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	cmp	DWORD PTR _i$59397[ebp], eax
	jae	SHORT $LN5@serialize@2

; 40   : 			{
; 41   : 				BoneData *pbone = m_BoneTable[i];

	mov	eax, DWORD PTR _i$59397[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAPAVBoneData@Ogre@@I@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pbone$59401[ebp], ecx

; 42   : 				m_BoneNameID[pbone->m_Name] = pbone->m_ID = (int)i;

	mov	edx, DWORD PTR _pbone$59401[ebp]
	mov	eax, DWORD PTR _i$59397[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	ecx, DWORD PTR _pbone$59401[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAHABVFixedString@Ogre@@@Z ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::operator[]
	mov	edx, DWORD PTR _i$59397[ebp]
	mov	DWORD PTR [eax], edx

; 43   : 			}

	jmp	SHORT $LN2@serialize@2
$LN5@serialize@2:

; 44   : 		}
; 45   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@SkeletonData@Ogre@@EAEXAAVArchive@2@H@Z ENDP ; Ogre::SkeletonData::_serialize
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXABQAVBoneData@Ogre@@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::push_back
PUBLIC	?addBone@SkeletonData@Ogre@@QAEXPAVBoneData@2@@Z ; Ogre::SkeletonData::addBone
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_id$ = -4						; size = 4
_pbone$ = 8						; size = 4
?addBone@SkeletonData@Ogre@@QAEXPAVBoneData@2@@Z PROC	; Ogre::SkeletonData::addBone
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 		size_t id = m_BoneTable.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	mov	DWORD PTR _id$[ebp], eax

; 50   : 		assert(pbone->m_ID == (int)id);
; 51   : 
; 52   : 		m_BoneTable.push_back(pbone);

	lea	eax, DWORD PTR _pbone$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?push_back@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXABQAVBoneData@Ogre@@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::push_back

; 53   : 		m_BoneNameID[pbone->m_Name] = pbone->m_ID;

	mov	ecx, DWORD PTR _pbone$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAHABVFixedString@Ogre@@@Z ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::operator[]
	mov	edx, DWORD PTR _pbone$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx

; 54   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?addBone@SkeletonData@Ogre@@QAEXPAVBoneData@2@@Z ENDP	; Ogre::SkeletonData::addBone
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::~_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
PUBLIC	?_Buy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Buy
PUBLIC	??0?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z ; std::_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
PUBLIC	??0?$allocator@PAVBoneData@Ogre@@@std@@QAE@XZ	; std::allocator<Ogre::BoneData *>::allocator<Ogre::BoneData *>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T66531 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T66531[ebp], esp
	call	??0?$allocator@PAVBoneData@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::BoneData *>::allocator<Ogre::BoneData *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z ; std::_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
PUBLIC	?_Tidy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Ucopy<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> > >
PUBLIC	?begin@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::begin
PUBLIC	?end@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::end
PUBLIC	??0?$allocator@PAVBoneData@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BoneData *>::allocator<Ogre::BoneData *>
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T66543 = -36						; size = 8
$T66542 = -28						; size = 8
$T66541 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T66541[ebp], esp
	push	eax
	call	??0?$allocator@PAVBoneData@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BoneData *>::allocator<Ogre::BoneData *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z ; std::_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@12

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T66542[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T66543[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Ucopy<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@12
__catch$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@12
	ret	0
$LN5@vector@12:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@12:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@12:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::~vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::~vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
PUBLIC	?deallocate@?$allocator@PAVBoneData@Ogre@@@std@@QAEXPAPAVBoneData@Ogre@@I@Z ; std::allocator<Ogre::BoneData *>::deallocate
PUBLIC	??$_Ucopy@PAPAVBoneData@Ogre@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Ucopy<Ogre::BoneData * *>
PUBLIC	?capacity@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::capacity
PUBLIC	?_Destroy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXPAPAVBoneData@Ogre@@0@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Destroy
PUBLIC	??$unchecked_copy@PAPAVBoneData@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::BoneData * *,Ogre::BoneData * *>
PUBLIC	?clear@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$60913 = -8					; size = 4
__Ptr$60903 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@2

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@2

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::clear
	jmp	$LN9@operator@2
$LN8@operator@2:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@2

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAPAVBoneData@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::BoneData * *,Ogre::BoneData * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$60903[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$60903[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXPAPAVBoneData@Ogre@@0@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@2
$LN6@operator@2:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@2

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Ptr$60913[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$60913[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAPAVBoneData@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::BoneData * *,Ogre::BoneData * *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$60913[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVBoneData@Ogre@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Ucopy<Ogre::BoneData * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@2
$LN4@operator@2:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@2

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXPAPAVBoneData@Ogre@@0@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVBoneData@Ogre@@@std@@QAEXPAPAVBoneData@Ogre@@I@Z ; std::allocator<Ogre::BoneData *>::deallocate
$LN2@operator@2:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@2

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVBoneData@Ogre@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Ucopy<Ogre::BoneData * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@2:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
_TEXT	ENDS
EXTRN	__imp___invalid_parameter_noinfo:PROC
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAPAVBoneData@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAPAVBoneData@Ogre@@I@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@3
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@3:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAPAVBoneData@Ogre@@I@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator[]
_TEXT	ENDS
PUBLIC	?insert@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@ABQAVBoneData@Ogre@@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::insert
PUBLIC	?end@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::end
PUBLIC	?_Ufill@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV34@IABQAV34@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Ufill
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXABQAVBoneData@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T66578 = -24						; size = 8
$T66577 = -16						; size = 8
$T66576 = -8						; size = 8
__Val$ = 8						; size = 4
?push_back@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXABQAVBoneData@Ogre@@@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::capacity
	cmp	esi, eax
	jae	SHORT $LN2@push_back

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV34@IABQAV34@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Ufill
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back
$LN2@push_back:

; 823  : 			insert(end(), _Val);

	lea	edx, DWORD PTR $T66577[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T66576[ebp], ecx
	mov	DWORD PTR $T66576[ebp+4], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T66576[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T66576[ebp]
	push	edx
	lea	eax, DWORD PTR $T66578[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@ABQAVBoneData@Ogre@@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::insert
$LN3@push_back:

; 824  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXABQAVBoneData@Ogre@@@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::push_back
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@VFixedString@Ogre@@@1@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
PUBLIC	??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@XZ ; std::allocator<std::pair<Ogre::FixedString const ,int> >::allocator<std::pair<Ogre::FixedString const ,int> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\map
xdata$x	SEGMENT
__unwindtable$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ$0
__ehfuncinfo$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T66582 = -14						; size = 1
$T66581 = -13						; size = 1
__$EHRec$ = -12						; size = 12
??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ PROC ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >, COMDAT
; _this$ = ecx

; 103  : 		{	// construct empty map from defaults

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T66581[ebp]
	call	??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@XZ ; std::allocator<std::pair<Ogre::FixedString const ,int> >::allocator<std::pair<Ogre::FixedString const ,int> >
	push	eax
	lea	eax, DWORD PTR $T66582[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@VFixedString@Ogre@@@1@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 104  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
__ehhandler$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAE@XZ ENDP ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >
PUBLIC	??Diterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEAAU?$pair@$$CBVFixedString@Ogre@@H@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::operator*
PUBLIC	??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ	; std::pair<Ogre::FixedString const ,int>::~pair<Ogre::FixedString const ,int>
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::insert
PUBLIC	??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABVFixedString@Ogre@@ABH@Z ; std::pair<Ogre::FixedString const ,int>::pair<Ogre::FixedString const ,int>
PUBLIC	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
PUBLIC	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABVFixedString@Ogre@@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::lower_bound
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAHABVFixedString@Ogre@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAHABVFixedString@Ogre@@@Z$0
__ehfuncinfo$??A?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAHABVFixedString@Ogre@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAHABVFixedString@Ogre@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??A?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAHABVFixedString@Ogre@@@Z
_TEXT	SEGMENT
tv166 = -68						; size = 4
tv167 = -64						; size = 4
_this$ = -60						; size = 4
$T66596 = -56						; size = 8
$T66595 = -48						; size = 8
$T66594 = -40						; size = 4
$T66593 = -36						; size = 8
$T66592 = -28						; size = 8
__Where$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAHABVFixedString@Ogre@@@Z PROC ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::operator[], COMDAT
; _this$ = ecx

; 168  : 		{	// find element matching _Keyval or insert with default mapped

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??A?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAHABVFixedString@Ogre@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 		iterator _Where = this->lower_bound(_Keyval);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lower_bound@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABVFixedString@Ogre@@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::lower_bound

; 170  : 		if (_Where == this->end()
; 171  : 			|| this->comp(_Keyval, this->_Key(_Where._Mynode())))

	lea	edx, DWORD PTR $T66592[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::end
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@operator@4
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Keyval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@operator@4
$LN1@operator@4:

; 172  : 			_Where = this->insert(_Where,
; 173  : 				value_type(_Keyval, mapped_type()));

	mov	DWORD PTR $T66594[ebp], 0
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T66595[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	mov	DWORD PTR $T66595[ebp+4], ecx
	lea	edx, DWORD PTR $T66594[ebp]
	push	edx
	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66593[ebp]
	call	??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABVFixedString@Ogre@@ABH@Z ; std::pair<Ogre::FixedString const ,int>::pair<Ogre::FixedString const ,int>
	mov	DWORD PTR tv167[ebp], eax
	mov	ecx, DWORD PTR tv167[ebp]
	mov	DWORD PTR tv166[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR tv166[ebp]
	push	edx
	mov	eax, DWORD PTR $T66595[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T66595[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66596[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::insert
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Where$[ebp], ecx
	mov	DWORD PTR __Where$[ebp+4], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T66593[ebp]
	call	??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ
$LN2@operator@4:

; 174  : 		return ((*_Where).second);

	lea	ecx, DWORD PTR __Where$[ebp]
	call	??Diterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEAAU?$pair@$$CBVFixedString@Ogre@@H@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::operator*
	add	eax, 4

; 175  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAHABVFixedString@Ogre@@@Z$0:
	lea	ecx, DWORD PTR $T66593[ebp]
	jmp	??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ
__ehhandler$??A?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAHABVFixedString@Ogre@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??A?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAHABVFixedString@Ogre@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??A?$map@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@@std@@QAEAAHABVFixedString@Ogre@@@Z ENDP ; std::map<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> > >::operator[]
PUBLIC	??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tidy
PUBLIC	?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXABV12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Copy
PUBLIC	?_Init@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Init
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
PUBLIC	?key_comp@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AU?$less@VFixedString@Ogre@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::key_comp
PUBLIC	?get_allocator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::get_allocator
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	SEGMENT
__catchsym$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T66607 = -21						; size = 1
$T66606 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >, COMDAT
; _this$ = ecx

; 528  : 		{	// construct tree by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR $T66606[ebp], esp
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?get_allocator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::get_allocator
	lea	ecx, DWORD PTR $T66607[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?key_comp@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AU?$less@VFixedString@Ogre@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::key_comp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 529  : 		_Init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Init@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Init

; 530  : 		_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 531  : 		_Copy(_Right);

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXABV12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Copy
	jmp	SHORT $LN4@Tree
__catch$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z$0:

; 532  : 		_CATCH_ALL
; 533  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tidy

; 534  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 535  : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN2@Tree
	ret	0
$LN4@Tree:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN2@Tree:

; 536  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN3@Tree:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >, COMDAT
; _this$ = ecx

; 539  : 		{	// destroy tree

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 540  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tidy

; 541  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::erase
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::begin
; Function compile flags: /Odtp
;	COMDAT ??4?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T66637 = -40						; size = 8
$T66636 = -32						; size = 8
$T66635 = -24						; size = 8
$T66634 = -16						; size = 8
$T66633 = -8						; size = 8
__Right$ = 8						; size = 4
??4?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::operator=, COMDAT
; _this$ = ecx

; 544  : 		{	// replace contents from _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 545  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	SHORT $LN1@operator@5

; 546  : 			{	// worth doing
; 547  : 			erase(begin(), end());

	lea	ecx, DWORD PTR $T66634[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T66633[ebp], edx
	mov	DWORD PTR $T66633[ebp+4], eax
	lea	ecx, DWORD PTR $T66636[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::begin
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T66635[ebp], edx
	mov	DWORD PTR $T66635[ebp+4], eax
	mov	ecx, DWORD PTR $T66633[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T66633[ebp]
	push	edx
	mov	eax, DWORD PTR $T66635[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T66635[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66637[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::erase

; 548  : 			this->comp = _Right.comp;
; 549  : 			_Copy(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXABV12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Copy
$LN1@operator@5:

; 550  : 			}
; 551  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 552  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::operator=
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PBV12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::iterator
; Function compile flags: /Odtp
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::end, COMDAT
; _this$ = ecx

; 565  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		return (_TREE_ITERATOR(_Myhead));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PBV12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::iterator
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 567  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABVFixedString@Ogre@@@Z
_TEXT	SEGMENT
tv137 = -36						; size = 4
_this$ = -32						; size = 4
$T66645 = -28						; size = 8
$T66643 = -20						; size = 8
$T66642 = -12						; size = 4
__Where$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABVFixedString@Ogre@@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::find, COMDAT
; _this$ = ecx

; 977  : 		{	// find an element in mutable sequence that matches _Keyval

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 978  : 		iterator _Where = lower_bound(_Keyval);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lower_bound@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABVFixedString@Ogre@@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::lower_bound

; 979  : 		return (_Where == end()
; 980  : 			|| _DEBUG_LT_PRED(this->comp,
; 981  : 				_Keyval, _Key(_Where._Mynode()))
; 982  : 					? end() : _Where);

	lea	edx, DWORD PTR $T66643[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::end
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@find
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Keyval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@find
	lea	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN4@find
$LN3@find:
	lea	ecx, DWORD PTR $T66645[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::end
	mov	DWORD PTR tv137[ebp], eax
$LN4@find:
	mov	edx, DWORD PTR tv137[ebp]
	mov	DWORD PTR $T66642[ebp], edx
	mov	eax, DWORD PTR $T66642[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 983  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?find@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABVFixedString@Ogre@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::find
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Odtp
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 299  : 			{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 300  : 
; 301  :  #if _HAS_ITERATOR_DEBUGGING
; 302  : 			if (this->_Mycont == 0 || this->_Mycont != _Right._Mycont)
; 303  : 				{
; 304  : 				_DEBUG_ERROR("map/set iterators incompatible");
; 305  : 				_SCL_SECURE_INVALID_ARGUMENT;
; 306  : 				}
; 307  :  #else
; 308  : 			_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@6
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@6
$LN1@operator@6:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@6:

; 309  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 310  : 
; 311  : 			return (_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 312  : 			}

	mov	esp, ebp
	pop	ebp
	ret	4
??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 462  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 463  : 		return _Myaux == _Other._Myaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Other$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al

; 464  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 467  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 468  : 		return _Myaux != 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	mov	al, cl

; 469  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::~_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >
__ehhandler$??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::~_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ$0
__ehfuncinfo$??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ PROC	; std::pair<Ogre::FixedString const ,int>::~pair<Ogre::FixedString const ,int>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ ENDP	; std::pair<Ogre::FixedString const ,int>::~pair<Ogre::FixedString const ,int>
PUBLIC	??1?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree_ptr<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree_ptr<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
PUBLIC	??1?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_ptr<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree_ptr<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_ptr<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree_ptr<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
PUBLIC	??1?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@XZ ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::~_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@XZ
__ehhandler$??1?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::~_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >::~_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@XZ PROC ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::~_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >::~_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >::~_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >
__ehhandler$??1?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@XZ ENDP ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::~_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity
$LN3@capacity:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@PAPAVBoneData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@PAPAVBoneData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::begin
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@PAPAVBoneData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
;	COMDAT ?end@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@PAPAVBoneData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@PAPAVBoneData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::end
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator+
PUBLIC	?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Insert_n
PUBLIC	??G?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator-
PUBLIC	?begin@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::begin
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@ABQAVBoneData@Ogre@@@Z
_TEXT	SEGMENT
tv77 = -28						; size = 4
_this$ = -24						; size = 4
$T66722 = -20						; size = 8
$T66719 = -12						; size = 8
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
__Val$ = 20						; size = 4
?insert@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@ABQAVBoneData@Ogre@@@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	test	eax, eax
	jne	SHORT $LN3@insert
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert
$LN3@insert:
	lea	eax, DWORD PTR $T66719[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::begin
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??G?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator-
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66722[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator+
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?insert@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@ABQAVBoneData@Ogre@@@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::insert
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::erase
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T66729 = -40						; size = 8
$T66728 = -32						; size = 8
$T66727 = -24						; size = 8
$T66726 = -16						; size = 8
$T66725 = -8						; size = 8
?clear@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T66726[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T66725[ebp], ecx
	mov	DWORD PTR $T66725[ebp+4], edx
	lea	eax, DWORD PTR $T66728[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T66727[ebp], ecx
	mov	DWORD PTR $T66727[ebp+4], edx
	mov	eax, DWORD PTR $T66725[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T66725[ebp]
	push	ecx
	mov	edx, DWORD PTR $T66727[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T66727[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66729[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVBoneData@Ogre@@@std@@QAEPAPAVBoneData@Ogre@@I@Z ; std::allocator<Ogre::BoneData *>::allocate
PUBLIC	?_Xlen@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Xlen
PUBLIC	?max_size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy
$LN2@Buy:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@PAVBoneData@Ogre@@@std@@QAEPAPAVBoneData@Ogre@@I@Z ; std::allocator<Ogre::BoneData *>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAXPAPAVBoneData@Ogre@@0AAV?$allocator@PAVBoneData@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXPAPAVBoneData@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXPAPAVBoneData@Ogre@@0@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAXPAPAVBoneData@Ogre@@0AAV?$allocator@PAVBoneData@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BoneData *> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXPAPAVBoneData@Ogre@@0@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXPAPAVBoneData@Ogre@@0@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVBoneData@Ogre@@@std@@QAEXPAPAVBoneData@Ogre@@I@Z ; std::allocator<Ogre::BoneData *>::deallocate
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAPAVBoneData@Ogre@@IPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAXPAPAVBoneData@Ogre@@IABQAV12@AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV34@IABQAV34@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV34@IABQAV34@@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAPAVBoneData@Ogre@@IPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAXPAPAVBoneData@Ogre@@IABQAV12@AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV34@IABQAV34@@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Ufill
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T66740 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T66740[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@PAVBoneData@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BoneData *>::allocator<Ogre::BoneData *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@PAVBoneData@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BoneData *>::allocator<Ogre::BoneData *>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >
__ehhandler$??0?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_val<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 402  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVBoneData@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVBoneData@Ogre@@@std@@QAE@XZ PROC	; std::allocator<Ogre::BoneData *>::allocator<Ogre::BoneData *>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVBoneData@Ogre@@@std@@QAE@XZ ENDP	; std::allocator<Ogre::BoneData *>::allocator<Ogre::BoneData *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVBoneData@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVBoneData@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::BoneData *>::allocator<Ogre::BoneData *>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAVBoneData@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::BoneData *>::allocator<Ogre::BoneData *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVBoneData@Ogre@@@std@@QAEXPAPAVBoneData@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVBoneData@Ogre@@@std@@QAEXPAPAVBoneData@Ogre@@I@Z PROC ; std::allocator<Ogre::BoneData *>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVBoneData@Ogre@@@std@@QAEXPAPAVBoneData@Ogre@@I@Z ENDP ; std::allocator<Ogre::BoneData *>::deallocate
_TEXT	ENDS
PUBLIC	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
PUBLIC	?_Myval@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBVFixedString@Ogre@@H@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Myval
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key, COMDAT

; 161  : 		{	// return reference to key in node

	push	ebp
	mov	ebp, esp

; 162  : 		return (_Mybase::_Kfn(_Myval(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Myval@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBVFixedString@Ogre@@H@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Myval
	add	esp, 4
	push	eax
	call	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
	add	esp, 4

; 163  : 		}

	pop	ebp
	ret	0
?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<Ogre::FixedString const ,int> >::allocator<std::pair<Ogre::FixedString const ,int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@VFixedString@Ogre@@@1@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@VFixedString@Ogre@@@1@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@VFixedString@Ogre@@@1@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@VFixedString@Ogre@@@1@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@VFixedString@Ogre@@@1@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T66769 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@VFixedString@Ogre@@@1@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >, COMDAT
; _this$ = ecx

; 509  : 		{	// construct empty tree

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@VFixedString@Ogre@@@1@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T66769[ebp], esp
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<Ogre::FixedString const ,int> >::allocator<std::pair<Ogre::FixedString const ,int> >
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 510  : 		_Init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Init@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Init

; 511  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@VFixedString@Ogre@@@1@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@VFixedString@Ogre@@@1@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@VFixedString@Ogre@@@1@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@VFixedString@Ogre@@@1@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lmost
; Function compile flags: /Odtp
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::begin, COMDAT
; _this$ = ecx

; 555  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 556  : 		return (_TREE_ITERATOR(_Lmost()));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lmost
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PBV12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::iterator
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 557  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?get_allocator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::get_allocator, COMDAT
; _this$ = ecx

; 615  : 		{	// return allocator object for values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 616  : 		return (this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<Ogre::FixedString const ,int> >::allocator<std::pair<Ogre::FixedString const ,int> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 617  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?get_allocator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::get_allocator
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?key_comp@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AU?$less@VFixedString@Ogre@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?key_comp@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AU?$less@VFixedString@Ogre@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::key_comp, COMDAT
; _this$ = ecx

; 620  : 		{	// return object for comparing keys

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 621  : 		return (this->comp);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 622  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?key_comp@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AU?$less@VFixedString@Ogre@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::key_comp
_TEXT	ENDS
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::insert
PUBLIC	??Econst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator++
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
PUBLIC	??Fconst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator--
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::size
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::const_iterator
; Function compile flags: /Odtp
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z
_TEXT	SEGMENT
_this$ = -72						; size = 4
$T66791 = -68						; size = 12
$T66790 = -56						; size = 8
$T66789 = -48						; size = 8
$T66788 = -40						; size = 8
$T66787 = -32						; size = 8
$T66786 = -24						; size = 8
$T66785 = -16						; size = 8
__Next$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
__Val$ = 20						; size = 4
?insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::insert, COMDAT
; _this$ = ecx

; 664  : 		{	// try to insert node with value _Val using _Where as a hint

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	DWORD PTR _this$[ebp], ecx

; 665  : 
; 666  :  #if _HAS_ITERATOR_DEBUGGING
; 667  : 		if (_Where._Mycont != this)
; 668  : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 669  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 670  : 
; 671  : 		const_iterator _Next;

	lea	ecx, DWORD PTR __Next$[ebp]
	call	??0const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::const_iterator

; 672  : 
; 673  : 		if (size() == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::size
	test	eax, eax
	jne	SHORT $LN32@insert@2

; 674  : 			return (_Insert(true, _Myhead, _Val));	// insert into empty tree

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	push	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@2
	jmp	$LN31@insert@2
$LN32@insert@2:

; 675  : 		else if (this->_Multi)

	xor	ecx, ecx
	je	$LN30@insert@2

; 676  : 			{	// insert even if duplicate
; 677  : 			if (_Where == begin())

	lea	edx, DWORD PTR $T66785[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::begin
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN29@insert@2

; 678  : 				{	// insert at beginning if before first element
; 679  : 				if (!_DEBUG_LT_PRED(this->comp,

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN28@insert@2

; 680  : 					_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 681  : 					return (_Insert(true, _Where._Mynode(), _Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	push	1
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@2
$LN28@insert@2:

; 682  : 				}

	jmp	$LN27@insert@2
$LN29@insert@2:

; 683  : 			else if (_Where == end())

	lea	edx, DWORD PTR $T66786[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::end
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN26@insert@2

; 684  : 				{	// insert at end if after last element
; 685  : 				if (!_DEBUG_LT_PRED(this->comp,

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN25@insert@2

; 686  : 					this->_Kfn(_Val), _Key(_Rmost())))
; 687  : 					return (_Insert(false, _Rmost(), _Val));

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost
	mov	edx, DWORD PTR [eax]
	push	edx
	push	0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@2
$LN25@insert@2:

; 688  : 				}
; 689  : 			else if (!_DEBUG_LT_PRED(this->comp,

	jmp	$LN27@insert@2
$LN26@insert@2:

; 690  : 				_Key(_Where._Mynode()), this->_Kfn(_Val))
; 691  : 				&& !_DEBUG_LT_PRED(this->comp,

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	edx, al
	test	edx, edx
	jne	$LN23@insert@2
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Next$[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	mov	DWORD PTR __Next$[ebp+4], ecx
	lea	ecx, DWORD PTR __Next$[ebp]
	call	??Fconst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator--
	mov	ecx, eax
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN23@insert@2

; 692  : 					this->_Kfn(_Val), _Key((--(_Next = _Where))._Mynode())))
; 693  : 				{	// insert before _Where
; 694  : 				if (_Isnil(_Right(_Next._Mynode())))

	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN22@insert@2

; 695  : 					return (_Insert(false, _Next._Mynode(), _Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@2

; 696  : 				else

	jmp	SHORT $LN21@insert@2
$LN22@insert@2:

; 697  : 					return (_Insert(true, _Where._Mynode(), _Val));

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	push	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@2
$LN21@insert@2:

; 698  : 				}
; 699  : 			else if (!_DEBUG_LT_PRED(this->comp,

	jmp	$LN27@insert@2
$LN23@insert@2:

; 700  : 				this->_Kfn(_Val), _Key(_Where._Mynode()))
; 701  : 				&& (++(_Next = _Where) == end()
; 702  : 					|| !_DEBUG_LT_PRED(this->comp,

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	edx, al
	test	edx, edx
	jne	$LN27@insert@2
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Next$[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	mov	DWORD PTR __Next$[ebp+4], ecx
	lea	edx, DWORD PTR $T66787[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::end
	push	eax
	lea	ecx, DWORD PTR __Next$[ebp]
	call	??Econst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator++
	mov	ecx, eax
	call	??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN18@insert@2
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN27@insert@2
$LN18@insert@2:

; 703  : 						_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 704  : 				{	// insert after _Where
; 705  : 				if (_Isnil(_Right(_Where._Mynode())))

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN17@insert@2

; 706  : 					return (_Insert(false, _Where._Mynode(), _Val));

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	push	0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@2

; 707  : 				else

	jmp	SHORT $LN27@insert@2
$LN17@insert@2:

; 708  : 					return (_Insert(true, _Next._Mynode(), _Val));

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	push	1
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@2
$LN27@insert@2:

; 709  : 				}
; 710  : 			}
; 711  : 		else

	jmp	$LN31@insert@2
$LN30@insert@2:

; 712  : 			{	// insert only if unique
; 713  : 			if (_Where == begin())

	lea	eax, DWORD PTR $T66788[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::begin
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN14@insert@2

; 714  : 				{	// insert at beginning if before first element
; 715  : 				if (_DEBUG_LT_PRED(this->comp,

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@insert@2

; 716  : 					this->_Kfn(_Val), _Key(_Where._Mynode())))
; 717  : 					return (_Insert(true, _Where._Mynode(), _Val));

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	push	1
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@2
$LN13@insert@2:

; 718  : 				}

	jmp	$LN31@insert@2
$LN14@insert@2:

; 719  : 			else if (_Where == end())

	lea	eax, DWORD PTR $T66789[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::end
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@insert@2

; 720  : 				{	// insert at end if after last element
; 721  : 				if (_DEBUG_LT_PRED(this->comp,

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@insert@2

; 722  : 					_Key(_Rmost()), this->_Kfn(_Val)))
; 723  : 					return (_Insert(false, _Rmost(), _Val));

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost
	mov	eax, DWORD PTR [eax]
	push	eax
	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@2
$LN10@insert@2:

; 724  : 				}
; 725  : 			else if (_DEBUG_LT_PRED(this->comp,

	jmp	$LN31@insert@2
$LN11@insert@2:

; 726  : 				this->_Kfn(_Val), _Key(_Where._Mynode()))
; 727  : 				&& _DEBUG_LT_PRED(this->comp,

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	eax, al
	test	eax, eax
	je	$LN8@insert@2
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Next$[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	mov	DWORD PTR __Next$[ebp+4], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Next$[ebp]
	call	??Fconst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator--
	mov	ecx, eax
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN8@insert@2

; 728  : 					_Key((--(_Next = _Where))._Mynode()), this->_Kfn(_Val)))
; 729  : 				{	// insert before _Where
; 730  : 				if (_Isnil(_Right(_Next._Mynode())))

	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN7@insert@2

; 731  : 					return (_Insert(false, _Next._Mynode(), _Val));

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	push	0
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@2

; 732  : 				else

	jmp	SHORT $LN6@insert@2
$LN7@insert@2:

; 733  : 					return (_Insert(true, _Where._Mynode(), _Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	push	1
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@2
$LN6@insert@2:

; 734  : 				}
; 735  : 			else if (_DEBUG_LT_PRED(this->comp,

	jmp	$LN31@insert@2
$LN8@insert@2:

; 736  : 				_Key(_Where._Mynode()), this->_Kfn(_Val))
; 737  : 				&& (++(_Next = _Where) == end()
; 738  : 					|| _DEBUG_LT_PRED(this->comp,

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	eax, al
	test	eax, eax
	je	$LN31@insert@2
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Next$[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	mov	DWORD PTR __Next$[ebp+4], edx
	lea	eax, DWORD PTR $T66790[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::end
	push	eax
	lea	ecx, DWORD PTR __Next$[ebp]
	call	??Econst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator++
	mov	ecx, eax
	call	??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@insert@2
	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN31@insert@2
$LN3@insert@2:

; 739  : 						this->_Kfn(_Val), _Key(_Next._Mynode()))))
; 740  : 				{	// insert after _Where
; 741  : 				if (_Isnil(_Right(_Where._Mynode())))

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN2@insert@2

; 742  : 					return (_Insert(false, _Where._Mynode(), _Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN33@insert@2

; 743  : 				else

	jmp	SHORT $LN31@insert@2
$LN2@insert@2:

; 744  : 					return (_Insert(true, _Next._Mynode(), _Val));

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	push	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN33@insert@2
$LN31@insert@2:

; 745  : 				}
; 746  : 			}
; 747  : 
; 748  : 		return (insert(_Val).first);	// try usual insert if all else fails

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66791[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::insert
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN33@insert@2:

; 749  : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::insert
_TEXT	ENDS
PUBLIC	?_Make_iter@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Make_iter
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::erase
PUBLIC	??Econst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AV012@H@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator++
PUBLIC	??9const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator!=
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::clear
; Function compile flags: /Odtp
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T66797 = -32						; size = 8
$T66796 = -24						; size = 8
$T66795 = -16						; size = 8
$T66794 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::erase, COMDAT
; _this$ = ecx

; 934  : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 935  : 		if (_First == begin() && _Last == end())

	lea	eax, DWORD PTR $T66794[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::begin
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@erase
	lea	edx, DWORD PTR $T66795[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::end
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@erase

; 936  : 			{	// erase all
; 937  : 			clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::clear

; 938  : 			return (begin());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::begin
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN5@erase

; 939  : 			}
; 940  : 		else

	jmp	SHORT $LN5@erase
$LN2@erase:

; 941  : 			{	// partial erase, one at a time
; 942  : 			while (_First != _Last)

	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@erase

; 943  : 				erase(_First++);

	push	0
	lea	ecx, DWORD PTR $T66796[ebp]
	push	ecx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??Econst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AV012@H@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator++
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T66797[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::erase
	jmp	SHORT $LN2@erase
$LN1@erase:

; 944  : 			return (_Make_iter(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Make_iter
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@erase:

; 945  : 			}
; 946  : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::erase
_TEXT	ENDS
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABVFixedString@Ogre@@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lbound
; Function compile flags: /Odtp
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABVFixedString@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABVFixedString@Ogre@@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1003 : 		{	// find leftmost node not less than _Keyval in mutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1004 : 		return (_TREE_ITERATOR(_Lbound(_Keyval)));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Keyval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lbound@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABVFixedString@Ogre@@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lbound
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PBV12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::iterator
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1005 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?lower_bound@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABVFixedString@Ogre@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Max
PUBLIC	?_Min@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Min
PUBLIC	?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Copy
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
; Function compile flags: /Odtp
;	COMDAT ?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXABV12@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Copy, COMDAT
; _this$ = ecx

; 1062 : 		{	// copy entire tree from _Right

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1063 : 		_Root() = _Copy(_Right._Root(), _Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Copy
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	DWORD PTR [eax], esi

; 1064 : 		_Mysize = _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 1065 : 		if (!_Isnil(_Root()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN2@Copy

; 1066 : 			{	// nonempty tree, look for new smallest and largest
; 1067 : 			_Lmost() = _Min(_Root());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Min@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Min
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lmost
	mov	DWORD PTR [eax], esi

; 1068 : 			_Rmost() = _Max(_Root());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Max@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Max
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost
	mov	DWORD PTR [eax], esi

; 1069 : 			}
; 1070 : 		else

	jmp	SHORT $LN3@Copy
$LN2@Copy:

; 1071 : 			_Lmost() = _Myhead, _Rmost() = _Myhead;	// empty tree

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lmost
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax], edx
$LN3@Copy:

; 1072 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXABV12@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Copy
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Buynode
; Function compile flags: /Odtp
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Init@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Init, COMDAT
; _this$ = ecx

; 1177 : 		{	// create head/nil node and make tree empty

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1178 : 		_Myhead = _Buynode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Buynode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 1179 : 		_Isnil(_Myhead) = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1180 : 		_Root() = _Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax], edx

; 1181 : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lmost
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax], edx

; 1182 : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 1183 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Init@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Init
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::deallocate
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
PUBLIC	?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::destroy
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T66810 = -40						; size = 8
$T66809 = -32						; size = 8
$T66808 = -24						; size = 8
$T66807 = -16						; size = 8
$T66806 = -8						; size = 8
?_Tidy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1420 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1421 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T66807[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T66806[ebp], ecx
	mov	DWORD PTR $T66806[ebp+4], edx
	lea	eax, DWORD PTR $T66809[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T66808[ebp], ecx
	mov	DWORD PTR $T66808[ebp+4], edx
	mov	eax, DWORD PTR $T66806[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T66806[ebp]
	push	ecx
	mov	edx, DWORD PTR $T66808[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T66808[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66810[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::erase

; 1422 : 		this->_Alptr.destroy(&_Left(_Myhead));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::destroy

; 1423 : 		this->_Alptr.destroy(&_Parent(_Myhead));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::destroy

; 1424 : 		this->_Alptr.destroy(&_Right(_Myhead));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::destroy

; 1425 : 		this->_Alnod.deallocate(_Myhead, 1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::deallocate

; 1426 : 		_Myhead = 0, _Mysize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0

; 1427 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::_Tree_ptr<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree_ptr<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T66813 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >, COMDAT
; _this$ = ecx

; 97   : 		{	// construct base, and allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T66813[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<Ogre::FixedString const ,int> >::allocator<std::pair<Ogre::FixedString const ,int> >
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::_Tree_ptr<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree_ptr<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<Ogre::FixedString const ,int> >::allocator<std::pair<Ogre::FixedString const ,int> >

; 98   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_val@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree_val<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >::~_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >::~_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<Ogre::FixedString const ,int> >::allocator<std::pair<Ogre::FixedString const ,int> >, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<Ogre::FixedString const ,int> >::allocator<std::pair<Ogre::FixedString const ,int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\functional
_TEXT	ENDS
;	COMDAT ??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z PROC ; std::less<Ogre::FixedString>::operator(), COMDAT
; _this$ = ecx

; 142  : 		{	// apply operator< to operands

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 		return (_Left < _Right);

	mov	ecx, DWORD PTR __Left$[ebp]
	call	??BFixedString@Ogre@@QBEPBDXZ		; Ogre::FixedString::operator char const *
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	??BFixedString@Ogre@@QBEPBDXZ		; Ogre::FixedString::operator char const *
	cmp	esi, eax
	sbb	eax, eax
	neg	eax

; 144  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ENDP ; std::less<Ogre::FixedString>::operator()
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PBV12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::const_iterator
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PBV12@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 451  : 			{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PBV12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::const_iterator

; 452  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PBV12@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEABU?$pair@$$CBVFixedString@Ogre@@H@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator*
; Function compile flags: /Odtp
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEAAU?$pair@$$CBVFixedString@Ogre@@H@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Diterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEAAU?$pair@$$CBVFixedString@Ogre@@H@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::operator*, COMDAT
; _this$ = ecx

; 464  : 			{	// return designated value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 465  : 			return ((reference)**(const_iterator *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??Dconst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEABU?$pair@$$CBVFixedString@Ogre@@H@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator*

; 466  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??Diterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEAAU?$pair@$$CBVFixedString@Ogre@@H@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::operator*
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode, COMDAT
; _this$ = ecx

; 409  : 			{	// return node pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 410  : 			return (_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 411  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABVFixedString@Ogre@@ABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABVFixedString@Ogre@@ABH@Z$0
__ehfuncinfo$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABVFixedString@Ogre@@ABH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABVFixedString@Ogre@@ABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABVFixedString@Ogre@@ABH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABVFixedString@Ogre@@ABH@Z PROC ; std::pair<Ogre::FixedString const ,int>::pair<Ogre::FixedString const ,int>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABVFixedString@Ogre@@ABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FixedString@Ogre@@QAE@ABV01@@Z	; Ogre::FixedString::FixedString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Val2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax

; 51   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABVFixedString@Ogre@@ABH@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABVFixedString@Ogre@@ABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABVFixedString@Ogre@@ABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABVFixedString@Ogre@@ABH@Z ENDP ; std::pair<Ogre::FixedString const ,int>::pair<Ogre::FixedString const ,int>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@PAPAVBoneData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::begin
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVBoneData@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::BoneData *>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@PAVBoneData@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::BoneData *>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator!=
PUBLIC	?_Make_iter@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$62405 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@2

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAPAVBoneData@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::BoneData * *,Ogre::BoneData * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$62405[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$62405[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXPAPAVBoneData@Ogre@@0@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$62405[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@2:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::erase
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAPAVBoneData@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00@Z ; stdext::_Unchecked_move_backward<Ogre::BoneData * *,Ogre::BoneData * *>
PUBLIC	??$fill@PAPAVBoneData@Ogre@@PAV12@@std@@YAXPAPAVBoneData@Ogre@@0ABQAV12@@Z ; std::fill<Ogre::BoneData * *,Ogre::BoneData *>
PUBLIC	??$_Umove@PAPAVBoneData@Ogre@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Umove<Ogre::BoneData * *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z$2
__catchsym$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z$0
__unwindtable$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z
_TEXT	SEGMENT
tv84 = -52						; size = 4
_this$ = -48						; size = 4
__Tmp$62440 = -44					; size = 4
__Oldend$62441 = -40					; size = 4
__Tmp$62430 = -36					; size = 4
__Ncopied$62417 = -32					; size = 4
__Newvec$62415 = -28					; size = 4
__Whereoff$62416 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n
	jmp	$LN16@Insert_n
$LN14@Insert_n:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Xlen
	jmp	$LN16@Insert_n
$LN12@Insert_n:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@PAVBoneData@Ogre@@@std@@QAEPAPAVBoneData@Ogre@@I@Z ; std::allocator<Ogre::BoneData *>::allocate
	mov	DWORD PTR __Newvec$62415[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR __Whereoff$62416[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$62417[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereoff$62416[ebp]
	mov	ecx, DWORD PTR __Newvec$62415[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV34@IABQAV34@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$62417[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$62417[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR __Newvec$62415[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVBoneData@Ogre@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Umove<Ogre::BoneData * *>

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$62417[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$62417[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR __Whereoff$62416[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$62415[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVBoneData@Ogre@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Umove<Ogre::BoneData * *>
	jmp	SHORT $LN19@Insert_n
__catch$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$62417[ebp], 1
	jle	SHORT $LN7@Insert_n

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$62416[ebp]
	mov	ecx, DWORD PTR __Newvec$62415[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR __Newvec$62415[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXPAPAVBoneData@Ogre@@0@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Destroy
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$62417[ebp], 0
	jle	SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$62416[ebp]
	mov	edx, DWORD PTR __Newvec$62415[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR __Whereoff$62416[ebp]
	mov	ecx, DWORD PTR __Newvec$62415[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXPAPAVBoneData@Ogre@@0@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Destroy
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$62415[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVBoneData@Ogre@@@std@@QAEXPAPAVBoneData@Ogre@@I@Z ; std::allocator<Ogre::BoneData *>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z$1
	ret	0
$LN19@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXPAPAVBoneData@Ogre@@0@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVBoneData@Ogre@@@std@@QAEXPAPAVBoneData@Ogre@@I@Z ; std::allocator<Ogre::BoneData *>::deallocate
$LN5@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$62415[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$62415[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$62415[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN16@Insert_n
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 2
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$62430[ebp], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVBoneData@Ogre@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Umove<Ogre::BoneData * *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	edx, DWORD PTR __Tmp$62430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR __Where$[ebp+4]
	sar	ecx, 2
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV34@IABQAV34@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Ufill
	jmp	SHORT $LN21@Insert_n
__catch$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+4]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXPAPAVBoneData@Ogre@@0@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z$3
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	edx, DWORD PTR __Tmp$62430[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	call	??$fill@PAPAVBoneData@Ogre@@PAV12@@std@@YAXPAPAVBoneData@Ogre@@0ABQAV12@@Z ; std::fill<Ogre::BoneData * *,Ogre::BoneData *>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN16@Insert_n
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$62440[ebp], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR __Oldend$62441[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Oldend$62441[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR __Oldend$62441[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVBoneData@Ogre@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Umove<Ogre::BoneData * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$62441[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$62441[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$_Unchecked_move_backward@PAPAVBoneData@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00@Z ; stdext::_Unchecked_move_backward<Ogre::BoneData * *,Ogre::BoneData * *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$62440[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAPAVBoneData@Ogre@@PAV12@@std@@YAXPAPAVBoneData@Ogre@@0ABQAV12@@Z ; std::fill<Ogre::BoneData * *,Ogre::BoneData *>
	add	esp, 12					; 0000000cH
$LN16@Insert_n:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Insert_n
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T66881 = -80						; size = 28
$T66880 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T66881[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T66881[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66880[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T66880[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T66881[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T66881[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Xlen
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 27   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1logic_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$1
__ehfuncinfo$??1logic_error@std@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1logic_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 31   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1logic_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??1logic_error@std@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1logic_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1logic_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Odtp
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@12
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@12:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1length_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1length_error@std@@UAE@XZ$0
__ehfuncinfo$??1length_error@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1length_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1length_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1length_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??1length_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1length_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1length_error@std@@UAE@XZ		; std::length_error::~length_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@13
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@13:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
PUBLIC	??$?0PAVBoneData@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVBoneData@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BoneData *>
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T66947 = -24						; size = 4
$T66946 = -20						; size = 4
$T66945 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0PAVBoneData@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVBoneData@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BoneData *>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T66947[ebp], eax
	mov	ecx, DWORD PTR $T66947[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T66946[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T66946[ebp], 0
	je	SHORT $LN3@Container_
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T66946[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_
$LN3@Container_:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T66945[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T66945[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T66947[ebp]
	push	eax
	mov	ecx, DWORD PTR $T66946[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneData@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 58   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 60   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 63   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 64   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::BoneData *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVBoneData@Ogre@@@std@@QAEPAPAVBoneData@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVBoneData@Ogre@@@std@@QAEPAPAVBoneData@Ogre@@I@Z PROC ; std::allocator<Ogre::BoneData *>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::BoneData *>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVBoneData@Ogre@@@std@@QAEPAPAVBoneData@Ogre@@I@Z ENDP ; std::allocator<Ogre::BoneData *>::allocate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil, COMDAT

; 156  : 		{	// return reference to nil flag in node

	push	ebp
	mov	ebp, esp

; 157  : 		return ((_Charref)(*_Pnode)._Isnil);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 21					; 00000015H

; 158  : 		}

	pop	ebp
	ret	0
?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left, COMDAT

; 166  : 		{	// return reference to left pointer in node

	push	ebp
	mov	ebp, esp

; 167  : 		return ((_Nodepref)(*_Pnode)._Left);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 168  : 		}

	pop	ebp
	ret	0
?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent, COMDAT

; 171  : 		{	// return reference to parent pointer in node

	push	ebp
	mov	ebp, esp

; 172  : 		return ((_Nodepref)(*_Pnode)._Parent);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4

; 173  : 		}

	pop	ebp
	ret	0
?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right, COMDAT

; 176  : 		{	// return reference to right pointer in node

	push	ebp
	mov	ebp, esp

; 177  : 		return ((_Nodepref)(*_Pnode)._Right);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8

; 178  : 		}

	pop	ebp
	ret	0
?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBVFixedString@Ogre@@H@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBVFixedString@Ogre@@H@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Myval, COMDAT

; 181  : 		{	// return reference to value in node

	push	ebp
	mov	ebp, esp

; 182  : 		return ((_Vref)(*_Pnode)._Myval);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 12					; 0000000cH

; 183  : 		}

	pop	ebp
	ret	0
?_Myval@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBVFixedString@Ogre@@H@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Myval
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AViterator@12@Vconst_iterator@12@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T66982 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AViterator@12@Vconst_iterator@12@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Make_iter, COMDAT
; _this$ = ecx

; 575  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 576  : 		return (iterator(_TREE_ITERATOR(_Where._Ptr)));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	lea	ecx, DWORD PTR $T66982[ebp]
	call	??0iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PBV12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::iterator
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 577  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AViterator@12@Vconst_iterator@12@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Make_iter
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::size, COMDAT
; _this$ = ecx

; 600  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 601  : 		return (_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]

; 602  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::size
_TEXT	ENDS
PUBLIC	??Fiterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::operator--
PUBLIC	??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@1@AB_N@Z ; std::pair<std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator,bool>
; Function compile flags: /Odtp
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z
_TEXT	SEGMENT
tv90 = -76						; size = 4
_this$ = -72						; size = 4
$T66996 = -65						; size = 1
$T66995 = -64						; size = 8
$T66994 = -53						; size = 1
$T66993 = -52						; size = 8
$T66992 = -41						; size = 1
$T66991 = -40						; size = 8
$T66990 = -32						; size = 8
$T66989 = -21						; size = 1
__Where$62539 = -20					; size = 8
__Trynode$ = -12					; size = 4
__Wherenode$ = -8					; size = 4
__Addleft$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
?insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::insert, COMDAT
; _this$ = ecx

; 630  : 		{	// try to insert node with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 631  : 		_Nodeptr _Trynode = _Root();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Trynode$[ebp], eax

; 632  : 		_Nodeptr _Wherenode = _Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR __Wherenode$[ebp], edx

; 633  : 		bool _Addleft = true;	// add to left of head if tree empty

	mov	BYTE PTR __Addleft$[ebp], 1
$LN10@insert@3:

; 634  : 		while (!_Isnil(_Trynode))

	mov	eax, DWORD PTR __Trynode$[ebp]
	push	eax
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN9@insert@3

; 635  : 			{	// look for leaf to insert before (_Addleft) or after
; 636  : 			_Wherenode = _Trynode;

	mov	edx, DWORD PTR __Trynode$[ebp]
	mov	DWORD PTR __Wherenode$[ebp], edx

; 637  : 			_Addleft = _DEBUG_LT_PRED(this->comp,

	mov	eax, DWORD PTR __Trynode$[ebp]
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	mov	BYTE PTR __Addleft$[ebp], al

; 638  : 				this->_Kfn(_Val), _Key(_Trynode));
; 639  : 			_Trynode = _Addleft ? _Left(_Trynode) : _Right(_Trynode);

	movzx	edx, BYTE PTR __Addleft$[ebp]
	test	edx, edx
	je	SHORT $LN13@insert@3
	mov	eax, DWORD PTR __Trynode$[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv90[ebp], ecx
	jmp	SHORT $LN14@insert@3
$LN13@insert@3:
	mov	edx, DWORD PTR __Trynode$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv90[ebp], eax
$LN14@insert@3:
	mov	ecx, DWORD PTR tv90[ebp]
	mov	DWORD PTR __Trynode$[ebp], ecx

; 640  : 			}

	jmp	SHORT $LN10@insert@3
$LN9@insert@3:

; 641  : 
; 642  : 		if (this->_Multi)

	xor	edx, edx
	je	SHORT $LN8@insert@3

; 643  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

	mov	BYTE PTR $T66989[ebp], 1
	lea	eax, DWORD PTR $T66989[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Addleft$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66990[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@1@AB_N@Z ; std::pair<std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator,bool>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN11@insert@3

; 644  : 		else

	jmp	$LN11@insert@3
$LN8@insert@3:

; 645  : 			{	// insert only if unique
; 646  : 			iterator _Where = _TREE_ITERATOR(_Wherenode);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$62539[ebp]
	call	??0iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PBV12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::iterator

; 647  : 			if (!_Addleft)

	movzx	ecx, BYTE PTR __Addleft$[ebp]
	test	ecx, ecx
	jne	SHORT $LN6@insert@3
	jmp	SHORT $LN5@insert@3
$LN6@insert@3:

; 648  : 				;	// need to test if insert after is okay
; 649  : 			else if (_Where == begin())

	lea	edx, DWORD PTR $T66991[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::begin
	push	eax
	lea	ecx, DWORD PTR __Where$62539[ebp]
	call	??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@insert@3

; 650  : 				return (_Pairib(_Insert(true, _Wherenode, _Val), true));

	mov	BYTE PTR $T66992[ebp], 1
	lea	ecx, DWORD PTR $T66992[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR $T66993[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@1@AB_N@Z ; std::pair<std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator,bool>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN11@insert@3

; 651  : 			else

	jmp	SHORT $LN5@insert@3
$LN4@insert@3:

; 652  : 				--_Where;	// need to test if insert before is okay

	lea	ecx, DWORD PTR __Where$62539[ebp]
	call	??Fiterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::operator--
$LN5@insert@3:

; 653  : 
; 654  : 			if (_DEBUG_LT_PRED(this->comp,

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Where$62539[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@insert@3

; 655  : 				_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 656  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

	mov	BYTE PTR $T66994[ebp], 1
	lea	ecx, DWORD PTR $T66994[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Addleft$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66995[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@1@AB_N@Z ; std::pair<std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator,bool>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN11@insert@3

; 657  : 			else

	jmp	SHORT $LN11@insert@3
$LN2@insert@3:

; 658  : 				return (_Pairib(_Where, false));

	mov	BYTE PTR $T66996[ebp], 0
	lea	eax, DWORD PTR $T66996[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$62539[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@1@AB_N@Z ; std::pair<std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator,bool>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN11@insert@3:

; 659  : 			}
; 660  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::insert
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::destroy
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rrotate
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lrotate
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
PUBLIC	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z$0
__ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
_TEXT	SEGMENT
tv177 = -108						; size = 4
tv165 = -104						; size = 4
_this$ = -100						; size = 4
$T67000 = -96						; size = 28
$T66999 = -68						; size = 40
__Fixnodeparent$ = -28					; size = 4
__Pnode$ = -24						; size = 4
__Fixnode$ = -20					; size = 4
__Erasednode$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::erase, COMDAT
; _this$ = ecx

; 764  : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 765  : 
; 766  :  #if _HAS_ITERATOR_DEBUGGING
; 767  : 		if (_Where._Mycont != this || _Isnil(_Where._Mynode()))
; 768  : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 769  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 770  : 		++_Where;	// save successor iterator for return
; 771  : 		_Orphan_ptr(*this, _Erasednode);
; 772  : 
; 773  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 774  : 		if (_Isnil(_Where._Mynode()))

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	push	eax
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN40@erase@3

; 775  : 			_THROW(out_of_range, "invalid map/set<T> iterator");

	push	OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
	lea	ecx, DWORD PTR $T67000[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T67000[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T66999[ebp]
	call	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
	push	OFFSET __TI3?AVout_of_range@std@@
	lea	edx, DWORD PTR $T66999[ebp]
	push	edx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T67000[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN40@erase@3:

; 776  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	mov	DWORD PTR __Erasednode$[ebp], eax

; 777  : 		++_Where;	// save successor iterator for return

	lea	ecx, DWORD PTR __Where$[ebp]
	call	??Econst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator++

; 778  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 779  : 
; 780  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 781  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 782  : 		_Nodeptr _Pnode = _Erasednode;

	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	DWORD PTR __Pnode$[ebp], eax

; 783  : 
; 784  : 		if (_Isnil(_Left(_Pnode)))

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN39@erase@3

; 785  : 			_Fixnode = _Right(_Pnode);	// must stitch up right subtree

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnode$[ebp], edx
	jmp	SHORT $LN38@erase@3
$LN39@erase@3:

; 786  : 		else if (_Isnil(_Right(_Pnode)))

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN37@erase@3

; 787  : 			_Fixnode = _Left(_Pnode);	// must stitch up left subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 788  : 		else

	jmp	SHORT $LN38@erase@3
$LN37@erase@3:

; 789  : 			{	// two subtrees, must lift successor node to replace erased
; 790  : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax

; 791  : 			_Fixnode = _Right(_Pnode);	// _Fixnode is its only subtree

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Fixnode$[ebp], eax
$LN38@erase@3:

; 792  : 			}
; 793  : 
; 794  : 		if (_Pnode == _Erasednode)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	cmp	ecx, DWORD PTR __Erasednode$[ebp]
	jne	$LN35@erase@3

; 795  : 			{	// at most one subtree, relink it
; 796  : 			_Fixnodeparent = _Parent(_Erasednode);

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Fixnodeparent$[ebp], eax

; 797  : 			if (!_Isnil(_Fixnode))

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	push	ecx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN34@erase@3

; 798  : 				_Parent(_Fixnode) = _Fixnodeparent;	// link up

	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR [eax], ecx
$LN34@erase@3:

; 799  : 
; 800  : 			if (_Root() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN33@erase@3

; 801  : 				_Root() = _Fixnode;	// link down from root

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN32@erase@3
$LN33@erase@3:

; 802  : 			else if (_Left(_Fixnodeparent) == _Erasednode)

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN31@erase@3

; 803  : 				_Left(_Fixnodeparent) = _Fixnode;	// link down to left

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax], edx

; 804  : 			else

	jmp	SHORT $LN32@erase@3
$LN31@erase@3:

; 805  : 				_Right(_Fixnodeparent) = _Fixnode;	// link down to right

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN32@erase@3:

; 806  : 
; 807  : 			if (_Lmost() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lmost
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN29@erase@3

; 808  : 				_Lmost() = _Isnil(_Fixnode)
; 809  : 					? _Fixnodeparent	// smallest is parent of erased node
; 810  : 					: _Min(_Fixnode);	// smallest in relinked subtree

	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN43@erase@3
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR tv165[ebp], edx
	jmp	SHORT $LN44@erase@3
$LN43@erase@3:
	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Min@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Min
	add	esp, 4
	mov	DWORD PTR tv165[ebp], eax
$LN44@erase@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lmost
	mov	ecx, DWORD PTR tv165[ebp]
	mov	DWORD PTR [eax], ecx
$LN29@erase@3:

; 811  : 
; 812  : 			if (_Rmost() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN28@erase@3

; 813  : 				_Rmost() = _Isnil(_Fixnode)
; 814  : 					? _Fixnodeparent	// largest is parent of erased node
; 815  : 					: _Max(_Fixnode);	// largest in relinked subtree

	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN45@erase@3
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR tv177[ebp], edx
	jmp	SHORT $LN46@erase@3
$LN45@erase@3:
	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Max@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Max
	add	esp, 4
	mov	DWORD PTR tv177[ebp], eax
$LN46@erase@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost
	mov	ecx, DWORD PTR tv177[ebp]
	mov	DWORD PTR [eax], ecx
$LN28@erase@3:

; 816  : 			}
; 817  : 		else

	jmp	$LN27@erase@3
$LN35@erase@3:

; 818  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 819  : 			_Parent(_Left(_Erasednode)) = _Pnode;	// link left up

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 820  : 			_Left(_Pnode) = _Left(_Erasednode);	// link successor down

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 821  : 
; 822  : 			if (_Pnode == _Right(_Erasednode))

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN26@erase@3

; 823  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Fixnodeparent$[ebp], edx

; 824  : 			else

	jmp	$LN25@erase@3
$LN26@erase@3:

; 825  : 				{	// successor further down, link in place of erased
; 826  : 				_Fixnodeparent = _Parent(_Pnode);	// parent is successor's

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnodeparent$[ebp], ecx

; 827  : 				if (!_Isnil(_Fixnode))

	mov	edx, DWORD PTR __Fixnode$[ebp]
	push	edx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN24@erase@3

; 828  : 					_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	push	ecx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR [eax], edx
$LN24@erase@3:

; 829  : 				_Left(_Fixnodeparent) = _Fixnode;	// link fix down

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 830  : 				_Right(_Pnode) = _Right(_Erasednode);	// link successor down

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 831  : 				_Parent(_Right(_Erasednode)) = _Pnode;	// link right up

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN25@erase@3:

; 832  : 				}
; 833  : 
; 834  : 			if (_Root() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN23@erase@3

; 835  : 				_Root() = _Pnode;	// link down from root

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN22@erase@3
$LN23@erase@3:

; 836  : 			else if (_Left(_Parent(_Erasednode)) == _Erasednode)

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN21@erase@3

; 837  : 				_Left(_Parent(_Erasednode)) = _Pnode;	// link down to left

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 838  : 			else

	jmp	SHORT $LN22@erase@3
$LN21@erase@3:

; 839  : 				_Right(_Parent(_Erasednode)) = _Pnode;	// link down to right

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN22@erase@3:

; 840  : 
; 841  : 			_Parent(_Pnode) = _Parent(_Erasednode);	// link successor up

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 842  : 			_STD swap(_Color(_Pnode), _Color(_Erasednode));	// recolor it

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	push	eax
	call	??$swap@D@std@@YAXAAD0@Z		; std::swap<char>
	add	esp, 8
$LN27@erase@3:

; 843  : 			}
; 844  : 
; 845  : 		if (_Color(_Erasednode) == _Black)

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	push	ecx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	cmp	edx, 1
	jne	$LN19@erase@3

; 846  : 			{	// erasing black link, must recolor/rebalance tree
; 847  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 848  : 				_Fixnodeparent = _Parent(_Fixnode))

	jmp	SHORT $LN18@erase@3
$LN17@erase@3:
	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnodeparent$[ebp], ecx
$LN18@erase@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	edx, DWORD PTR __Fixnode$[ebp]
	cmp	edx, DWORD PTR [eax]
	je	$LN16@erase@3
	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	$LN16@erase@3

; 849  : 				if (_Fixnode == _Left(_Fixnodeparent))

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	$LN15@erase@3

; 850  : 					{	// fixup left subtree
; 851  : 					_Pnode = _Right(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], eax

; 852  : 					if (_Color(_Pnode) == _Red)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN14@erase@3

; 853  : 						{	// rotate red up from right subtree
; 854  : 						_Color(_Pnode) = _Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 855  : 						_Color(_Fixnodeparent) = _Red;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 856  : 						_Lrotate(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lrotate

; 857  : 						_Pnode = _Right(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN14@erase@3:

; 858  : 						}
; 859  : 
; 860  : 					if (_Isnil(_Pnode))

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN13@erase@3

; 861  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 862  : 					else if (_Color(_Left(_Pnode)) == _Black

	jmp	$LN12@erase@3
$LN13@erase@3:

; 863  : 						&& _Color(_Right(_Pnode)) == _Black)

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN11@erase@3
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN11@erase@3

; 864  : 						{	// redden right subtree with black children
; 865  : 						_Color(_Pnode) = _Red;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 866  : 						_Fixnode = _Fixnodeparent;

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], eax

; 867  : 						}
; 868  : 					else

	jmp	$LN12@erase@3
$LN11@erase@3:

; 869  : 						{	// must rearrange right subtree
; 870  : 						if (_Color(_Right(_Pnode)) == _Black)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 1
	jne	SHORT $LN9@erase@3

; 871  : 							{	// rotate red up from left sub-subtree
; 872  : 							_Color(_Left(_Pnode)) = _Black;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 873  : 							_Color(_Pnode) = _Red;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 874  : 							_Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rrotate

; 875  : 							_Pnode = _Right(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], eax
$LN9@erase@3:

; 876  : 							}
; 877  : 
; 878  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	cl, BYTE PTR [esi]
	mov	BYTE PTR [eax], cl

; 879  : 						_Color(_Fixnodeparent) = _Black;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 880  : 						_Color(_Right(_Pnode)) = _Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 881  : 						_Lrotate(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lrotate

; 882  : 						break;	// tree now recolored/rebalanced

	jmp	$LN16@erase@3
$LN12@erase@3:

; 883  : 						}
; 884  : 					}
; 885  : 				else

	jmp	$LN8@erase@3
$LN15@erase@3:

; 886  : 					{	// fixup right subtree
; 887  : 					_Pnode = _Left(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 888  : 					if (_Color(_Pnode) == _Red)

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN7@erase@3

; 889  : 						{	// rotate red up from left subtree
; 890  : 						_Color(_Pnode) = _Black;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 891  : 						_Color(_Fixnodeparent) = _Red;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 892  : 						_Rrotate(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rrotate

; 893  : 						_Pnode = _Left(_Fixnodeparent);

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], edx
$LN7@erase@3:

; 894  : 						}
; 895  : 					if (_Isnil(_Pnode))

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@erase@3

; 896  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], edx

; 897  : 					else if (_Color(_Right(_Pnode)) == _Black

	jmp	$LN8@erase@3
$LN6@erase@3:

; 898  : 						&& _Color(_Left(_Pnode)) == _Black)

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	cmp	edx, 1
	jne	SHORT $LN4@erase@3
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	cmp	edx, 1
	jne	SHORT $LN4@erase@3

; 899  : 						{	// redden left subtree with black children
; 900  : 						_Color(_Pnode) = _Red;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 901  : 						_Fixnode = _Fixnodeparent;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 902  : 						}
; 903  : 					else

	jmp	$LN8@erase@3
$LN4@erase@3:

; 904  : 						{	// must rearrange left subtree
; 905  : 						if (_Color(_Left(_Pnode)) == _Black)

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN2@erase@3

; 906  : 							{	// rotate red up from right sub-subtree
; 907  : 							_Color(_Right(_Pnode)) = _Black;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 908  : 							_Color(_Pnode) = _Red;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 909  : 							_Lrotate(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lrotate

; 910  : 							_Pnode = _Left(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN2@erase@3:

; 911  : 							}
; 912  : 
; 913  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	cl, BYTE PTR [esi]
	mov	BYTE PTR [eax], cl

; 914  : 						_Color(_Fixnodeparent) = _Black;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 915  : 						_Color(_Left(_Pnode)) = _Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 916  : 						_Rrotate(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rrotate

; 917  : 						break;	// tree now recolored/rebalanced

	jmp	SHORT $LN16@erase@3
$LN8@erase@3:

; 918  : 						}
; 919  : 					}

	jmp	$LN17@erase@3
$LN16@erase@3:

; 920  : 
; 921  : 			_Color(_Fixnode) = _Black;	// ensure stopping node is black

	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1
$LN19@erase@3:

; 922  : 			}
; 923  : 
; 924  : 		this->_Alnod.destroy(_Erasednode);	// destroy, free erased node

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::destroy

; 925  : 		this->_Alnod.deallocate(_Erasednode, 1);

	push	1
	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::deallocate

; 926  : 
; 927  : 		if (0 < _Mysize)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jbe	SHORT $LN1@erase@3

; 928  : 			--_Mysize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], edx
$LN1@erase@3:

; 929  : 
; 930  : 		return (_Make_iter(_Where));	// return successor iterator

	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Make_iter
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN42@erase@3:

; 931  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z$0:
	lea	ecx, DWORD PTR $T67000[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::erase
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 129  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7out_of_range@std@@6B@

; 130  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1out_of_range@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1out_of_range@std@@UAE@XZ$0
__ehfuncinfo$??1out_of_range@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1out_of_range@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx

; 133  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1out_of_range@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 134  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1out_of_range@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??1out_of_range@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1out_of_range@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
; Function compile flags: /Odtp
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ		; std::out_of_range::~out_of_range
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@14
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@14:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0out_of_range@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0out_of_range@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0out_of_range@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0out_of_range@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0out_of_range@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7out_of_range@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0out_of_range@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0out_of_range@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0out_of_range@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Erase
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::clear, COMDAT
; _this$ = ecx

; 965  : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 966  : 
; 967  :  #if _HAS_ITERATOR_DEBUGGING
; 968  : 		this->_Orphan_ptr(*this, 0);
; 969  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 970  : 
; 971  : 		_Erase(_Root());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Erase

; 972  : 		_Root() = _Myhead, _Mysize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 973  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lmost
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax], edx

; 974  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::clear
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Buynode
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z$0
__unwindtable$?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z$2
__ehfuncinfo$?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
__Pnode$62619 = -24					; size = 4
__Newroot$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Rootnode$ = 8						; size = 4
__Wherenode$ = 12					; size = 4
?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Copy, COMDAT
; _this$ = ecx

; 1075 : 		{	// copy entire subtree, recursively

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1076 : 		_Nodeptr _Newroot = _Myhead;	// point at nil node

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR __Newroot$[ebp], ecx

; 1077 : 
; 1078 : 		if (!_Isnil(_Rootnode))

	mov	edx, DWORD PTR __Rootnode$[ebp]
	push	edx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	$LN3@Copy@2

; 1079 : 			{	// copy a node, then any subtrees
; 1080 : 			_Nodeptr _Pnode = _Buynode(_Myhead, _Wherenode, _Myhead,
; 1081 : 				_Myval(_Rootnode), _Color(_Rootnode));

	mov	ecx, DWORD PTR __Rootnode$[ebp]
	push	ecx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Rootnode$[ebp]
	push	eax
	call	?_Myval@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBVFixedString@Ogre@@H@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Myval
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Buynode
	mov	DWORD PTR __Pnode$62619[ebp], eax

; 1082 : 			if (_Isnil(_Newroot))

	mov	eax, DWORD PTR __Newroot$[ebp]
	push	eax
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@Copy@2

; 1083 : 				_Newroot = _Pnode;	// memorize new root

	mov	edx, DWORD PTR __Pnode$62619[ebp]
	mov	DWORD PTR __Newroot$[ebp], edx
$LN2@Copy@2:

; 1084 : 
; 1085 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1086 : 			_Left(_Pnode) = _Copy(_Left(_Rootnode), _Pnode);

	mov	eax, DWORD PTR __Pnode$62619[ebp]
	push	eax
	mov	ecx, DWORD PTR __Rootnode$[ebp]
	push	ecx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Copy
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$62619[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	DWORD PTR [eax], esi

; 1087 : 			_Right(_Pnode) = _Copy(_Right(_Rootnode), _Pnode);

	mov	ecx, DWORD PTR __Pnode$62619[ebp]
	push	ecx
	mov	edx, DWORD PTR __Rootnode$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Copy
	mov	esi, eax
	mov	ecx, DWORD PTR __Pnode$62619[ebp]
	push	ecx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	DWORD PTR [eax], esi
	jmp	SHORT $LN6@Copy@2
__catch$?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z$0:

; 1088 : 			_CATCH_ALL
; 1089 : 			_Erase(_Newroot);	// subtree copy failed, bail out

	mov	edx, DWORD PTR __Newroot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Erase

; 1090 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1091 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN3@Copy@2
	ret	0
$LN6@Copy@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN3@Copy@2:

; 1092 : 			}
; 1093 : 
; 1094 : 		return (_Newroot);	// return newly constructed tree

	mov	eax, DWORD PTR __Newroot$[ebp]
$LN5@Copy@2:

; 1095 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@0@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Copy
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::max_size
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z$0
__ehfuncinfo$?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z
_TEXT	SEGMENT
_this$ = -92						; size = 4
$T67061 = -88						; size = 28
$T67060 = -60						; size = 40
__Pnode$62637 = -20					; size = 4
__Newnode$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 1187 : 		{	// add node with value next to _Wherenode, to left if _Addnode

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1188 : 		if (max_size() - 1 <= _Mysize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::max_size
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+28]
	ja	SHORT $LN17@Insert

; 1189 : 			_THROW(length_error, "map/set<T> too long");

	push	OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T67061[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	edx, DWORD PTR $T67061[ebp]
	push	edx
	lea	ecx, DWORD PTR $T67060[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	eax, DWORD PTR $T67060[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T67061[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN17@Insert:

; 1190 : 		_Nodeptr _Newnode = _Buynode(_Myhead, _Wherenode, _Myhead,
; 1191 : 			_Val, _Red);

	push	0
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Buynode
	mov	DWORD PTR __Newnode$[ebp], eax

; 1192 : 
; 1193 : 		++_Mysize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], edx

; 1194 : 		if (_Wherenode == _Myhead)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	jne	SHORT $LN16@Insert

; 1195 : 			{	// first node in tree, just set head values
; 1196 : 			_Root() = _Newnode;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1197 : 			_Lmost() = _Newnode, _Rmost() = _Newnode;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lmost
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN15@Insert
$LN16@Insert:

; 1198 : 			}
; 1199 : 		else if (_Addleft)

	movzx	edx, BYTE PTR __Addleft$[ebp]
	test	edx, edx
	je	SHORT $LN14@Insert

; 1200 : 			{	// add to left of _Wherenode
; 1201 : 			_Left(_Wherenode) = _Newnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1202 : 			if (_Wherenode == _Lmost())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lmost
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN13@Insert

; 1203 : 				_Lmost() = _Newnode;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lmost
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN13@Insert:

; 1204 : 			}
; 1205 : 		else

	jmp	SHORT $LN15@Insert
$LN14@Insert:

; 1206 : 			{	// add to right of _Wherenode
; 1207 : 			_Right(_Wherenode) = _Newnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1208 : 			if (_Wherenode == _Rmost())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN15@Insert

; 1209 : 				_Rmost() = _Newnode;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN15@Insert:

; 1210 : 			}
; 1211 : 
; 1212 : 		for (_Nodeptr _Pnode = _Newnode; _Color(_Parent(_Pnode)) == _Red; )

	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR __Pnode$62637[ebp], edx
$LN10@Insert:
	mov	eax, DWORD PTR __Pnode$62637[ebp]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	$LN9@Insert

; 1213 : 			if (_Parent(_Pnode) == _Left(_Parent(_Parent(_Pnode))))

	mov	eax, DWORD PTR __Pnode$62637[ebp]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR __Pnode$62637[ebp]
	push	ecx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, DWORD PTR [eax]
	jne	$LN8@Insert

; 1214 : 				{	// fixup red-red in left subtree
; 1215 : 				_Wherenode = _Right(_Parent(_Parent(_Pnode)));

	mov	edx, DWORD PTR __Pnode$62637[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Wherenode$[ebp], edx

; 1216 : 				if (_Color(_Wherenode) == _Red)

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN7@Insert

; 1217 : 					{	// parent has two red children, blacken both
; 1218 : 					_Color(_Parent(_Pnode)) = _Black;

	mov	edx, DWORD PTR __Pnode$62637[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1219 : 					_Color(_Wherenode) = _Black;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	push	ecx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1220 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	edx, DWORD PTR __Pnode$62637[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1221 : 					_Pnode = _Parent(_Parent(_Pnode));

	mov	edx, DWORD PTR __Pnode$62637[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$62637[ebp], ecx

; 1222 : 					}
; 1223 : 				else

	jmp	$LN6@Insert
$LN7@Insert:

; 1224 : 					{	// parent has red and black children
; 1225 : 					if (_Pnode == _Right(_Parent(_Pnode)))

	mov	edx, DWORD PTR __Pnode$62637[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$62637[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN5@Insert

; 1226 : 						{	// rotate right child to left
; 1227 : 						_Pnode = _Parent(_Pnode);

	mov	edx, DWORD PTR __Pnode$62637[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$62637[ebp], eax

; 1228 : 						_Lrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$62637[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lrotate
$LN5@Insert:

; 1229 : 						}
; 1230 : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

	mov	edx, DWORD PTR __Pnode$62637[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1231 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	ecx, DWORD PTR __Pnode$62637[ebp]
	push	ecx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1232 : 					_Rrotate(_Parent(_Parent(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$62637[ebp]
	push	ecx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rrotate
$LN6@Insert:

; 1233 : 					}
; 1234 : 				}
; 1235 : 			else

	jmp	$LN4@Insert
$LN8@Insert:

; 1236 : 				{	// fixup red-red in right subtree
; 1237 : 				_Wherenode = _Left(_Parent(_Parent(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$62637[ebp]
	push	ecx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Wherenode$[ebp], ecx

; 1238 : 				if (_Color(_Wherenode) == _Red)

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN3@Insert

; 1239 : 					{	// parent has two red children, blacken both
; 1240 : 					_Color(_Parent(_Pnode)) = _Black;

	mov	ecx, DWORD PTR __Pnode$62637[ebp]
	push	ecx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1241 : 					_Color(_Wherenode) = _Black;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1242 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	ecx, DWORD PTR __Pnode$62637[ebp]
	push	ecx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1243 : 					_Pnode = _Parent(_Parent(_Pnode));

	mov	ecx, DWORD PTR __Pnode$62637[ebp]
	push	ecx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$62637[ebp], eax

; 1244 : 					}
; 1245 : 				else

	jmp	$LN4@Insert
$LN3@Insert:

; 1246 : 					{	// parent has red and black children
; 1247 : 					if (_Pnode == _Left(_Parent(_Pnode)))

	mov	ecx, DWORD PTR __Pnode$62637[ebp]
	push	ecx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$62637[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN1@Insert

; 1248 : 						{	// rotate left child to right
; 1249 : 						_Pnode = _Parent(_Pnode);

	mov	edx, DWORD PTR __Pnode$62637[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$62637[ebp], eax

; 1250 : 						_Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$62637[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rrotate
$LN1@Insert:

; 1251 : 						}
; 1252 : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

	mov	edx, DWORD PTR __Pnode$62637[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1253 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	ecx, DWORD PTR __Pnode$62637[ebp]
	push	ecx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1254 : 					_Lrotate(_Parent(_Parent(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$62637[ebp]
	push	ecx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lrotate
$LN4@Insert:

; 1255 : 					}
; 1256 : 				}

	jmp	$LN10@Insert
$LN9@Insert:

; 1257 : 
; 1258 : 		_Color(_Root()) = _Black;	// root is always black

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1259 : 		return (_TREE_ITERATOR(_Newnode));

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PBV12@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::iterator
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN19@Insert:

; 1260 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z$0:
	lea	ecx, DWORD PTR $T67061[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Insert
; Function compile flags: /Odtp
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABVFixedString@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Pnode$ = -8						; size = 4
__Wherenode$ = -4					; size = 4
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABVFixedString@Ogre@@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 1263 : 		{	// find leftmost node not less than _Keyval

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1264 : 		_Nodeptr _Pnode = _Root();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], eax

; 1265 : 		_Nodeptr _Wherenode = _Myhead;	// end() if search fails

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR __Wherenode$[ebp], edx
$LN4@Lbound:

; 1266 : 
; 1267 : 		while (!_Isnil(_Pnode))

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@Lbound

; 1268 : 			if (_DEBUG_LT_PRED(this->comp, _Key(_Pnode), _Keyval))

	mov	edx, DWORD PTR __Keyval$[ebp]
	push	edx
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Key@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAABVFixedString@Ogre@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Key
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??R?$less@VFixedString@Ogre@@@std@@QBE_NABVFixedString@Ogre@@0@Z ; std::less<Ogre::FixedString>::operator()
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Lbound

; 1269 : 				_Pnode = _Right(_Pnode);	// descend right subtree

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], eax

; 1270 : 			else

	jmp	SHORT $LN1@Lbound
$LN2@Lbound:

; 1271 : 				{	// _Pnode not less than _Keyval, remember it
; 1272 : 				_Wherenode = _Pnode;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Wherenode$[ebp], ecx

; 1273 : 				_Pnode = _Left(_Pnode);	// descend left subtree

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], eax
$LN1@Lbound:

; 1274 : 				}

	jmp	SHORT $LN4@Lbound
$LN3@Lbound:

; 1275 : 
; 1276 : 		return (_Wherenode);	// return best remembered candidate

	mov	eax, DWORD PTR __Wherenode$[ebp]

; 1277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Lbound@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABVFixedString@Ogre@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lbound
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Lmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1280 : 		{	// return leftmost node in nonmutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1281 : 		return (_Left(_Myhead));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4

; 1282 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Lmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lmost
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Max, COMDAT

; 1305 : 		{	// return rightmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp
$LN2@Max:

; 1306 : 		while (!_Isnil(_Right(_Pnode)))

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN1@Max

; 1307 : 			_Pnode = _Right(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
	jmp	SHORT $LN2@Max
$LN1@Max:

; 1308 : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 1309 : 		}

	pop	ebp
	ret	0
?_Max@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Max
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Min, COMDAT

; 1312 : 		{	// return leftmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp
$LN2@Min:

; 1313 : 		while (!_Isnil(_Left(_Pnode)))

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN1@Min

; 1314 : 			_Pnode = _Left(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
	jmp	SHORT $LN2@Min
$LN1@Min:

; 1315 : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 1316 : 		}

	pop	ebp
	ret	0
?_Min@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Min
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1319 : 		{	// return rightmost node in nonmutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1320 : 		return (_Right(_Myhead));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4

; 1321 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Rmost@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rmost
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1324 : 		{	// return root of nonmutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1325 : 		return (_Parent(_Myhead));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4

; 1326 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABQAU342@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::construct
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::allocate
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ$0
__unwindtable$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ$2
__ehfuncinfo$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T67085 = -36						; size = 4
$T67084 = -32						; size = 4
$T67083 = -28						; size = 4
__Wherenode$ = -24					; size = 4
__Linkcnt$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1383 : 		{	// allocate a head/nil node

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1384 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::allocate
	mov	DWORD PTR __Wherenode$[ebp], eax

; 1385 : 		int _Linkcnt = 0;

	mov	DWORD PTR __Linkcnt$[ebp], 0

; 1386 : 
; 1387 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1388 : 		this->_Alptr.construct(&_Left(_Wherenode), 0);

	mov	DWORD PTR $T67083[ebp], 0
	lea	eax, DWORD PTR $T67083[ebp]
	push	eax
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	push	ecx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABQAU342@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::construct

; 1389 : 		++_Linkcnt;

	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx

; 1390 : 		this->_Alptr.construct(&_Parent(_Wherenode), 0);

	mov	DWORD PTR $T67084[ebp], 0
	lea	eax, DWORD PTR $T67084[ebp]
	push	eax
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	push	ecx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABQAU342@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::construct

; 1391 : 		++_Linkcnt;

	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx

; 1392 : 		this->_Alptr.construct(&_Right(_Wherenode), 0);

	mov	DWORD PTR $T67085[ebp], 0
	lea	eax, DWORD PTR $T67085[ebp]
	push	eax
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	push	ecx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABQAU342@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::construct
	jmp	SHORT $LN6@Buynode
__catch$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ$0:

; 1393 : 		_CATCH_ALL
; 1394 : 		if (1 < _Linkcnt)

	cmp	DWORD PTR __Linkcnt$[ebp], 1
	jle	SHORT $LN2@Buynode

; 1395 : 			this->_Alptr.destroy(&_Parent(_Wherenode));

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::destroy
$LN2@Buynode:

; 1396 : 		if (0 < _Linkcnt)

	cmp	DWORD PTR __Linkcnt$[ebp], 0
	jle	SHORT $LN1@Buynode

; 1397 : 			this->_Alptr.destroy(&_Left(_Wherenode));

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::destroy
$LN1@Buynode:

; 1398 : 		this->_Alnod.deallocate(_Wherenode, 1);

	push	1
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::deallocate

; 1399 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1400 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ$1
	ret	0
$LN6@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ$1:

; 1401 : 		_Color(_Wherenode) = _Black;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1402 : 		_Isnil(_Wherenode) = false;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1403 : 		return (_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
$LN5@Buynode:

; 1404 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Buynode
PUBLIC	??$?0U?$pair@$$CBVFixedString@Ogre@@H@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *><std::pair<Ogre::FixedString const ,int> >
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T67101 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z PROC ; std::_Tree_ptr<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree_ptr<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >, COMDAT
; _this$ = ecx

; 78   : 		{	// construct base, and allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T67101[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<Ogre::FixedString const ,int> >::allocator<std::pair<Ogre::FixedString const ,int> >
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??$?0U?$pair@$$CBVFixedString@Ogre@@H@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *><std::pair<Ogre::FixedString const ,int> >

; 79   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_ptr@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ENDP ; std::_Tree_ptr<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree_ptr<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\map
;	COMDAT ?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z PROC ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn, COMDAT

; 64   : 		{	// extract key from element value

	push	ebp
	mov	ebp, esp

; 65   : 		return (_Val.first);

	mov	eax, DWORD PTR __Val$[ebp]

; 66   : 		}

	pop	ebp
	ret	0
?_Kfn@?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@SAABVFixedString@Ogre@@ABU?$pair@$$CBVFixedString@Ogre@@H@2@@Z ENDP ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Kfn
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::pair<Ogre::FixedString const ,int> >::allocator<std::pair<Ogre::FixedString const ,int> >, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<Ogre::FixedString const ,int> >::allocator<std::pair<Ogre::FixedString const ,int> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	??0?$_Bidit@U?$pair@$$CBVFixedString@Ogre@@H@std@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Bidit<std::pair<Ogre::FixedString const ,int>,int,std::pair<Ogre::FixedString const ,int> const *,std::pair<Ogre::FixedString const ,int> const &>::_Bidit<std::pair<Ogre::FixedString const ,int>,int,std::pair<Ogre::FixedString const ,int> const *,std::pair<Ogre::FixedString const ,int> const &>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 217  : 			{	// construct with null node pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Bidit@U?$pair@$$CBVFixedString@Ogre@@H@std@@HPBU12@ABU12@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 218  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
; Function compile flags: /Odtp
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PBV12@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 234  : 			{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Bidit@U?$pair@$$CBVFixedString@Ogre@@H@std@@HPBU12@ABU12@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 235  : 			_SCL_SECURE_VALIDATE(_Plist != NULL);

	cmp	DWORD PTR __Plist$[ebp], 0
	jne	SHORT $LN1@const_iter
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@const_iter:

; 236  : 			this->_Set_container(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 237  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PBV12@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::const_iterator
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 452  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 454  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEABU?$pair@$$CBVFixedString@Ogre@@H@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEABU?$pair@$$CBVFixedString@Ogre@@H@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 249  : 			{	// return designated value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 250  : 
; 251  :  #if _HAS_ITERATOR_DEBUGGING
; 252  : 			if (this->_Mycont == 0
; 253  : 				|| _Ptr == 0
; 254  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 255  : 				{
; 256  : 				_DEBUG_ERROR("map/set iterator not dereferencable");
; 257  : 				_SCL_SECURE_OUT_OF_RANGE;
; 258  : 				}
; 259  :  #else
; 260  : 			_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@operator@7
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@7:

; 261  : 			_SCL_SECURE_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax+24]
	jne	SHORT $LN1@operator@7
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@7:

; 262  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 263  : 
; 264  : 			return (_Myval(_Ptr));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?_Myval@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBVFixedString@Ogre@@H@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Myval
	add	esp, 4

; 265  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEABU?$pair@$$CBVFixedString@Ogre@@H@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Iterator_base_aux::_Getmycont, COMDAT
; _this$ = ecx

; 457  : 		{	// Go through the aux object to get the container

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $LN4@Getmycont
$LN3@Getmycont:
	mov	DWORD PTR tv67[ebp], 0
$LN4@Getmycont:
	mov	eax, DWORD PTR tv67[ebp]

; 459  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Aux_cont::_Getcont, COMDAT
; _this$ = ecx

; 368  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 369  : 		return _Mycontainer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 370  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Aux_cont::_Getcont
_TEXT	ENDS
PUBLIC	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Inc
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Econst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 273  : 			{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 274  : 			_Inc();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Inc

; 275  : 			return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 276  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??Econst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator++
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??Econst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AV012@H@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 279  : 			{	// postincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 			const_iterator _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 281  : 			++*this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??Econst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator++

; 282  : 			return (_Tmp);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Tmp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 283  : 			}

	mov	esp, ebp
	pop	ebp
	ret	8
??Econst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE?AV012@H@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Dec
; Function compile flags: /Odtp
;	COMDAT ??Fconst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator--, COMDAT
; _this$ = ecx

; 286  : 			{	// predecrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 287  : 			_Dec();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Dec

; 288  : 			return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 289  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator--
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 315  : 			{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  : 			return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 317  : 			}

	mov	esp, ebp
	pop	ebp
	ret	4
??9const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Ranit@PAVBoneData@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ; std::_Ranit<Ogre::BoneData *,int,Ogre::BoneData * const *,Ogre::BoneData * const &>::_Ranit<Ogre::BoneData *,int,Ogre::BoneData * const *,Ogre::BoneData * const &>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@PAPAVBoneData@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@PAPAVBoneData@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@PAVBoneData@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con
$LN1@Vector_con:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@PAPAVBoneData@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??G?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator-, COMDAT
; _this$ = ecx

; 186  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@8
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@8
$LN1@operator@8:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@8:

; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 195  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@PAPAVBoneData@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@PAPAVBoneData@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@PAPAVBoneData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@PAPAVBoneData@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator+
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
PUBLIC	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@U?$pair@$$CBVFixedString@Ogre@@H@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<Ogre::FixedString const ,int>,int,std::pair<Ogre::FixedString const ,int> const *,std::pair<Ogre::FixedString const ,int> const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<Ogre::FixedString const ,int>,int,std::pair<Ogre::FixedString const ,int> const *,std::pair<Ogre::FixedString const ,int> const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Bidit@U?$pair@$$CBVFixedString@Ogre@@H@std@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Bidit@U?$pair@$$CBVFixedString@Ogre@@H@std@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Bidit<std::pair<Ogre::FixedString const ,int>,int,std::pair<Ogre::FixedString const ,int> const *,std::pair<Ogre::FixedString const ,int> const &>::_Bidit<std::pair<Ogre::FixedString const ,int>,int,std::pair<Ogre::FixedString const ,int> const *,std::pair<Ogre::FixedString const ,int> const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@U?$pair@$$CBVFixedString@Ogre@@H@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Bidit@U?$pair@$$CBVFixedString@Ogre@@H@std@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Bidit<std::pair<Ogre::FixedString const ,int>,int,std::pair<Ogre::FixedString const ,int> const *,std::pair<Ogre::FixedString const ,int> const &>::_Bidit<std::pair<Ogre::FixedString const ,int>,int,std::pair<Ogre::FixedString const ,int> const *,std::pair<Ogre::FixedString const ,int> const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVBoneData@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneData *,int,Ogre::BoneData * const *,Ogre::BoneData * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneData *,int,Ogre::BoneData * const *,Ogre::BoneData * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@PAVBoneData@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@PAVBoneData@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::BoneData *,int,Ogre::BoneData * const *,Ogre::BoneData * const &>::_Ranit<Ogre::BoneData *,int,Ogre::BoneData * const *,Ogre::BoneData * const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVBoneData@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@PAVBoneData@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::BoneData *,int,Ogre::BoneData * const *,Ogre::BoneData * const &>::_Ranit<Ogre::BoneData *,int,Ogre::BoneData * const *,Ogre::BoneData * const &>
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@U?$pair@$$CBVFixedString@Ogre@@H@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@U?$pair@$$CBVFixedString@Ogre@@H@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<Ogre::FixedString const ,int>,int,std::pair<Ogre::FixedString const ,int> const *,std::pair<Ogre::FixedString const ,int> const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<Ogre::FixedString const ,int>,int,std::pair<Ogre::FixedString const ,int> const *,std::pair<Ogre::FixedString const ,int> const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@U?$pair@$$CBVFixedString@Ogre@@H@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<Ogre::FixedString const ,int>,int,std::pair<Ogre::FixedString const ,int> const *,std::pair<Ogre::FixedString const ,int> const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<Ogre::FixedString const ,int>,int,std::pair<Ogre::FixedString const ,int> const *,std::pair<Ogre::FixedString const ,int> const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVBoneData@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVBoneData@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneData *,int,Ogre::BoneData * const *,Ogre::BoneData * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneData *,int,Ogre::BoneData * const *,Ogre::BoneData * const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVBoneData@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneData *,int,Ogre::BoneData * const *,Ogre::BoneData * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneData *,int,Ogre::BoneData * const *,Ogre::BoneData * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE@PAPAVBoneData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAVBoneData@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@PAVBoneData@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::BoneData *>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVBoneData@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::BoneData *>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
_TEXT	ENDS
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color, COMDAT

; 151  : 		{	// return reference to color in node

	push	ebp
	mov	ebp, esp

; 152  : 		return ((_Charref)(*_Pnode)._Color);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 20					; 00000014H

; 153  : 		}

	pop	ebp
	ret	0
?_Color@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Color
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QBEIXZ ; std::allocator<std::pair<Ogre::FixedString const ,int> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::max_size, COMDAT
; _this$ = ecx

; 605  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?max_size@?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QBEIXZ ; std::allocator<std::pair<Ogre::FixedString const ,int> >::max_size

; 607  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::max_size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$62903 = -4					; size = 4
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 1166 : 		{	// free entire subtree, recursively

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1167 : 		for (_Nodeptr _Pnode = _Rootnode; !_Isnil(_Pnode); _Rootnode = _Pnode)

	mov	eax, DWORD PTR __Rootnode$[ebp]
	mov	DWORD PTR __Pnode$62903[ebp], eax
	jmp	SHORT $LN3@Erase
$LN2@Erase:
	mov	ecx, DWORD PTR __Pnode$62903[ebp]
	mov	DWORD PTR __Rootnode$[ebp], ecx
$LN3@Erase:
	mov	edx, DWORD PTR __Pnode$62903[ebp]
	push	edx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN4@Erase

; 1168 : 			{	// free subtrees, then node
; 1169 : 			_Erase(_Right(_Pnode));

	mov	ecx, DWORD PTR __Pnode$62903[ebp]
	push	ecx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Erase

; 1170 : 			_Pnode = _Left(_Pnode);

	mov	eax, DWORD PTR __Pnode$62903[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$62903[ebp], ecx

; 1171 : 			this->_Alnod.destroy(_Rootnode);	// destroy, free erased node

	mov	edx, DWORD PTR __Rootnode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::destroy

; 1172 : 			this->_Alnod.deallocate(_Rootnode, 1);

	push	1
	mov	eax, DWORD PTR __Rootnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::deallocate

; 1173 : 			}

	jmp	SHORT $LN2@Erase
$LN4@Erase:

; 1174 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Erase@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Erase
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1285 : 		{	// promote right node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1286 : 		_Nodeptr _Pnode = _Right(_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1287 : 		_Right(_Wherenode) = _Left(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1288 : 
; 1289 : 		if (!_Isnil(_Left(_Pnode)))

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@Lrotate

; 1290 : 			_Parent(_Left(_Pnode)) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN5@Lrotate:

; 1291 : 		_Parent(_Pnode) = _Parent(_Wherenode);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1292 : 
; 1293 : 		if (_Wherenode == _Root())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN4@Lrotate

; 1294 : 			_Root() = _Pnode;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN3@Lrotate
$LN4@Lrotate:

; 1295 : 		else if (_Wherenode == _Left(_Parent(_Wherenode)))

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN2@Lrotate

; 1296 : 			_Left(_Parent(_Wherenode)) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1297 : 		else

	jmp	SHORT $LN3@Lrotate
$LN2@Lrotate:

; 1298 : 			_Right(_Parent(_Wherenode)) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Lrotate:

; 1299 : 
; 1300 : 		_Left(_Pnode) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1301 : 		_Parent(_Wherenode) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1302 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Lrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Lrotate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1329 : 		{	// promote left node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1330 : 		_Nodeptr _Pnode = _Left(_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1331 : 		_Left(_Wherenode) = _Right(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1332 : 
; 1333 : 		if (!_Isnil(_Right(_Pnode)))

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@Rrotate

; 1334 : 			_Parent(_Right(_Pnode)) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN5@Rrotate:

; 1335 : 		_Parent(_Pnode) = _Parent(_Wherenode);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1336 : 
; 1337 : 		if (_Wherenode == _Root())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN4@Rrotate

; 1338 : 			_Root() = _Pnode;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Root
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN3@Rrotate
$LN4@Rrotate:

; 1339 : 		else if (_Wherenode == _Right(_Parent(_Wherenode)))

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN2@Rrotate

; 1340 : 			_Right(_Parent(_Wherenode)) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1341 : 		else

	jmp	SHORT $LN3@Rrotate
$LN2@Rrotate:

; 1342 : 			_Left(_Parent(_Wherenode)) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Rrotate:

; 1343 : 
; 1344 : 		_Right(_Pnode) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1345 : 		_Parent(_Wherenode) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1346 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Rrotate@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	??0_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node::_Node
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z$0
__tryblocktable$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z$3
__unwindtable$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z
_TEXT	SEGMENT
tv86 = -36						; size = 4
_this$ = -32						; size = 4
$T67187 = -28						; size = 4
$T67186 = -24						; size = 4
__Wherenode$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1408 : 		{	// allocate a node with pointers, value, and color

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1409 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::allocate
	mov	DWORD PTR __Wherenode$[ebp], eax

; 1410 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1411 : 		new (_Wherenode) _Node(_Larg, _Parg, _Rarg, _Val, _Carg);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	push	24					; 00000018H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67187[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T67187[ebp], 0
	je	SHORT $LN4@Buynode@2
	movzx	ecx, BYTE PTR __Carg$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Rarg$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Larg$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T67187[ebp]
	call	??0_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node::_Node
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN5@Buynode@2
$LN4@Buynode@2:
	mov	DWORD PTR tv86[ebp], 0
$LN5@Buynode@2:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR $T67186[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN6@Buynode@2
__catch$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z$0:

; 1412 : 		_CATCH_ALL
; 1413 : 		this->_Alnod.deallocate(_Wherenode, 1);

	push	1
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::deallocate

; 1414 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1415 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z$1
	ret	0
$LN6@Buynode@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z$1:

; 1416 : 		return (_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
$LN3@Buynode@2:

; 1417 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z$2:
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T67187[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Buynode
PUBLIC	??$?0U?$pair@$$CBVFixedString@Ogre@@H@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node><std::pair<Ogre::FixedString const ,int> >
PUBLIC	??0?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@U?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T67206 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z PROC ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >, COMDAT
; _this$ = ecx

; 52   : 		{	// construct traits from _Parg and allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T67206[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<Ogre::FixedString const ,int> >::allocator<std::pair<Ogre::FixedString const ,int> >
	mov	ecx, DWORD PTR __Parg$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@U?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??$?0U?$pair@$$CBVFixedString@Ogre@@H@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node><std::pair<Ogre::FixedString const ,int> >

; 53   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@XZ
__ehhandler$??0?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABQAU342@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::construct
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
_TEXT	ENDS
;	COMDAT ??Fiterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Fiterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::operator--, COMDAT
; _this$ = ecx

; 487  : 			{	// predecrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 488  : 			--(*(const_iterator *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??Fconst_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::operator--

; 489  : 			return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 490  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??Fiterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator::operator--
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$62975 = -4					; size = 4
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Dec, COMDAT
; _this$ = ecx

; 320  : 			{	// move to node with next smaller value

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 321  : 
; 322  :  #if _HAS_ITERATOR_DEBUGGING
; 323  : 			if (this->_Mycont == 0
; 324  : 				|| _Ptr == 0)
; 325  : 				{
; 326  : 				_DEBUG_ERROR("map/set iterator not decrementable");
; 327  : 				_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 				}
; 329  :  #else
; 330  : 			_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN10@Dec
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN10@Dec:

; 331  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 332  : 
; 333  : 			if (_Isnil(_Ptr))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN9@Dec

; 334  : 			{
; 335  : 				_Ptr = _Right(_Ptr);	// end() ==> rightmost

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx

; 336  :    				if (_Isnil(_Ptr))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN8@Dec

; 337  : #if _HAS_ITERATOR_DEBUGGING
; 338  : 				{
; 339  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 340  : 					_SCL_SECURE_OUT_OF_RANGE;
; 341  : 				}
; 342  : #elif _SECURE_SCL
; 343  : 				{
; 344  :     				_SCL_SECURE_OUT_OF_RANGE;

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN8@Dec:

; 345  : 				}
; 346  : #else
; 347  : 				return;	// begin() shouldn't be incremented, don't move
; 348  : #endif
; 349  : 			}

	jmp	$LN11@Dec
$LN9@Dec:

; 350  : 			else if (!_Isnil(_Left(_Ptr)))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN4@Dec

; 351  : 				_Ptr = _Max(_Left(_Ptr));	// ==> largest of left subtree

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Max@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Max
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 352  : 			else

	jmp	SHORT $LN11@Dec
$LN4@Dec:

; 353  : 				{	// climb looking for left subtree
; 354  : 				_Nodeptr _Pnode;
; 355  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 356  : 					&& _Ptr == _Left(_Pnode))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$62975[ebp], ecx
	mov	edx, DWORD PTR __Pnode$62975[ebp]
	push	edx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN3@Dec
	mov	ecx, DWORD PTR __Pnode$62975[ebp]
	push	ecx
	call	?_Left@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Left
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN3@Dec

; 357  : 					_Ptr = _Pnode;	// ==> parent while left subtree

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$62975[ebp]
	mov	DWORD PTR [edx+4], eax
	jmp	SHORT $LN4@Dec
$LN3@Dec:

; 358  : 				if (_Isnil(_Ptr))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN2@Dec

; 359  :  #if _HAS_ITERATOR_DEBUGGING
; 360  :  					{
; 361  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 362  : 					_SCL_SECURE_OUT_OF_RANGE;
; 363  : 					}
; 364  :  #elif _SECURE_SCL
; 365  : 					{
; 366  : 					_SCL_SECURE_OUT_OF_RANGE;

	call	DWORD PTR __imp___invalid_parameter_noinfo

; 367  : 					}
; 368  :  #else
; 369  : 					return;	// begin() shouldn't be incremented, don't move
; 370  :  #endif
; 371  : 				else

	jmp	SHORT $LN11@Dec
$LN2@Dec:

; 372  : 					_Ptr = _Pnode;	// ==> parent if not head

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$62975[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN11@Dec:

; 373  : 				}
; 374  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Dec
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$62991 = -4					; size = 4
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Inc, COMDAT
; _this$ = ecx

; 377  : 			{	// move to node with next larger value

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 378  : 
; 379  :  #if _HAS_ITERATOR_DEBUGGING
; 380  : 			if (this->_Mycont == 0
; 381  : 				|| _Ptr == 0
; 382  : 				|| _Isnil(_Ptr))
; 383  : 				{
; 384  : 				_DEBUG_ERROR("map/set iterator not incrementable");
; 385  : 				_SCL_SECURE_OUT_OF_RANGE;
; 386  : 				}
; 387  :  #else
; 388  : 			_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@Inc
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN7@Inc:

; 389  : 			if (_Isnil(_Ptr))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN6@Inc

; 390  : 				{
; 391  : 				_SCL_SECURE_OUT_OF_RANGE;

	call	DWORD PTR __imp___invalid_parameter_noinfo
	jmp	$LN8@Inc
$LN6@Inc:

; 392  : 				// end() shouldn't be incremented, don't move if _SCL_SECURE is not turned on
; 393  : 				}
; 394  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 395  : 
; 396  : 			else if (!_Isnil(_Right(_Ptr)))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN2@Inc

; 397  : 				_Ptr = _Min(_Right(_Ptr));	// ==> smallest of right subtree

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Min@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Min
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 398  : 			else

	jmp	SHORT $LN8@Inc
$LN2@Inc:

; 399  : 				{	// climb looking for right subtree
; 400  : 				_Nodeptr _Pnode;
; 401  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 402  : 					&& _Ptr == _Right(_Pnode))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?_Parent@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$62991[ebp], edx
	mov	eax, DWORD PTR __Pnode$62991[ebp]
	push	eax
	call	?_Isnil@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN1@Inc
	mov	edx, DWORD PTR __Pnode$62991[ebp]
	push	edx
	call	?_Right@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN1@Inc

; 403  : 					_Ptr = _Pnode;	// ==> parent while right subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$62991[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN2@Inc
$LN1@Inc:

; 404  : 				_Ptr = _Pnode;	// ==> parent (head if end())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$62991[ebp]
	mov	DWORD PTR [edx+4], eax
$LN8@Inc:

; 405  : 				}
; 406  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::const_iterator::_Inc
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator==
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator!=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator+=
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@1@AB_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@1@AB_N@Z PROC ; std::pair<std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator,bool>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Val2$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx+8], al

; 51   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@1@AB_N@Z ENDP ; std::pair<std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::iterator,bool>
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >::_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\map
xdata$x	SEGMENT
__unwindtable$??0?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@U?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@U?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@U?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@U?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@U?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T67234 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 1
__Al$ = 12						; size = 1
??0?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@U?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z PROC ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>, COMDAT
; _this$ = ecx

; 39   : 		{	// construct with specified comparator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@U?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T67234[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<Ogre::FixedString const ,int> >::allocator<std::pair<Ogre::FixedString const ,int> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >::_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 40   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@U?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >::~_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >
__ehhandler$??0?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@U?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@U?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@QAE@U?$less@VFixedString@Ogre@@@1@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ENDP ; std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<Ogre::FixedString const ,int> >::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@2
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@2
$LN3@max_size@2:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<Ogre::FixedString const ,int> >::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@9
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@9:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@9
$LN1@operator@9:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@9:

; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@10
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@10
$LN1@operator@10:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@10:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator==
_TEXT	ENDS
PUBLIC	??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABU01@@Z ; std::pair<Ogre::FixedString const ,int>::pair<Ogre::FixedString const ,int>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$??0_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z$0
__ehfuncinfo$??0_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
??0_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z PROC ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node::_Node, COMDAT
; _this$ = ecx

; 38   : 			{	// construct a node with value

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Larg$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Rarg$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABU01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR __Carg$[ebp]
	mov	BYTE PTR [ecx+20], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+21], 0

; 39   : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ
__ehhandler$??0_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBVFixedString@Ogre@@H@2@D@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node::_Node
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABU01@@Z$0
__ehfuncinfo$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABU01@@Z PROC ; std::pair<Ogre::FixedString const ,int>::pair<Ogre::FixedString const ,int>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FixedString@Ogre@@QAE@ABV01@@Z	; Ogre::FixedString::FixedString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@ABU01@@Z ENDP ; std::pair<Ogre::FixedString const ,int>::pair<Ogre::FixedString const ,int>
PUBLIC	??$?0U?$pair@$$CBVFixedString@Ogre@@H@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::pair<Ogre::FixedString const ,int> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T67272 = -24						; size = 4
$T67271 = -20						; size = 4
$T67270 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >::_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0U?$pair@$$CBVFixedString@Ogre@@H@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::pair<Ogre::FixedString const ,int> >

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T67272[ebp], eax
	mov	ecx, DWORD PTR $T67272[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67271[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T67271[ebp], 0
	je	SHORT $LN3@Container_@2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T67271[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@2
$LN3@Container_@2:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@2:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T67270[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T67270[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z$1:
	mov	eax, DWORD PTR $T67272[ebp]
	push	eax
	mov	ecx, DWORD PTR $T67271[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >::_Container_base_aux_alloc_real<std::allocator<std::pair<Ogre::FixedString const ,int> > >
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrearchive.h
;	COMDAT ??$serializeRawType@VMatrix4@Ogre@@@Archive@Ogre@@QAEXAAVMatrix4@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??$serializeRawType@VMatrix4@Ogre@@@Archive@Ogre@@QAEXAAVMatrix4@1@@Z PROC ; Ogre::Archive::serializeRawType<Ogre::Matrix4>, COMDAT
; _this$ = ecx

; 97   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 			serialize(&value, sizeof(T));

	push	64					; 00000040H
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize

; 99   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawType@VMatrix4@Ogre@@@Archive@Ogre@@QAEXAAVMatrix4@1@@Z ENDP ; Ogre::Archive::serializeRawType<Ogre::Matrix4>
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreprerequisites.h
_TEXT	ENDS
;	COMDAT ??$DeletePointerArray@VBoneData@Ogre@@@Ogre@@YAXAAV?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@Z
_TEXT	SEGMENT
tv81 = -16						; size = 4
$T67288 = -12						; size = 4
$T67287 = -8						; size = 4
_i$63244 = -4						; size = 4
_array$ = 8						; size = 4
??$DeletePointerArray@VBoneData@Ogre@@@Ogre@@YAXAAV?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@Z PROC ; Ogre::DeletePointerArray<Ogre::BoneData>, COMDAT

; 271  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 272  : 		for(size_t i=0; i<array.size(); i++)

	mov	DWORD PTR _i$63244[ebp], 0
	jmp	SHORT $LN3@DeletePoin
$LN2@DeletePoin:
	mov	eax, DWORD PTR _i$63244[ebp]
	add	eax, 1
	mov	DWORD PTR _i$63244[ebp], eax
$LN3@DeletePoin:
	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	cmp	DWORD PTR _i$63244[ebp], eax
	jae	SHORT $LN1@DeletePoin

; 273  : 		{
; 274  : 			delete array[i];

	mov	ecx, DWORD PTR _i$63244[ebp]
	push	ecx
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAPAVBoneData@Ogre@@I@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T67288[ebp], edx
	mov	eax, DWORD PTR $T67288[ebp]
	mov	DWORD PTR $T67287[ebp], eax
	cmp	DWORD PTR $T67287[ebp], 0
	je	SHORT $LN6@DeletePoin
	push	1
	mov	ecx, DWORD PTR $T67287[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T67287[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN7@DeletePoin
$LN6@DeletePoin:
	mov	DWORD PTR tv81[ebp], 0
$LN7@DeletePoin:

; 275  : 		}

	jmp	SHORT $LN2@DeletePoin
$LN1@DeletePoin:

; 276  : 		array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?clear@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::clear

; 277  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$DeletePointerArray@VBoneData@Ogre@@@Ogre@@YAXAAV?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@Z ENDP ; Ogre::DeletePointerArray<Ogre::BoneData>
_TEXT	ENDS
PUBLIC	?resize@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::resize
EXTRN	?writeObject@Archive@Ogre@@QAEXPAVBaseObject@2@@Z:PROC ; Ogre::Archive::writeObject
EXTRN	?readObject@Archive@Ogre@@QAEPAVBaseObject@2@XZ:PROC ; Ogre::Archive::readObject
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrearchive.h
;	COMDAT ??$?6VBoneData@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_i$63265 = -16						; size = 4
_pobj$63258 = -12					; size = 4
_i$63254 = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$?6VBoneData@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@Z PROC ; Ogre::Archive::operator<<<Ogre::BoneData>, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			uint num;
; 63   : 
; 64   : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@operator@11

; 65   : 			{
; 66   : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 67   : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::resize

; 68   : 				for(uint i=0; i<num; i++)

	mov	DWORD PTR _i$63254[ebp], 0
	jmp	SHORT $LN9@operator@11
$LN8@operator@11:
	mov	eax, DWORD PTR _i$63254[ebp]
	add	eax, 1
	mov	DWORD PTR _i$63254[ebp], eax
$LN9@operator@11:
	mov	ecx, DWORD PTR _i$63254[ebp]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN7@operator@11

; 69   : 				{
; 70   : 					BaseObject *pobj = readObject();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readObject@Archive@Ogre@@QAEPAVBaseObject@2@XZ ; Ogre::Archive::readObject
	mov	DWORD PTR _pobj$63258[ebp], eax

; 71   : 					if(pobj == NULL) array[i] = NULL;

	cmp	DWORD PTR _pobj$63258[ebp], 0
	jne	SHORT $LN6@operator@11
	mov	edx, DWORD PTR _i$63254[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAPAVBoneData@Ogre@@I@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator[]
	mov	DWORD PTR [eax], 0

; 72   : 					else

	jmp	SHORT $LN5@operator@11
$LN6@operator@11:

; 73   : 					{
; 74   : 						assert(IS_KIND_OF(T, pobj));
; 75   : 						array[i] = static_cast<T *>(pobj);

	mov	eax, DWORD PTR _i$63254[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAPAVBoneData@Ogre@@I@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator[]
	mov	ecx, DWORD PTR _pobj$63258[ebp]
	mov	DWORD PTR [eax], ecx
$LN5@operator@11:

; 76   : 					}
; 77   : 				}

	jmp	SHORT $LN8@operator@11
$LN7@operator@11:

; 78   : 			}
; 79   : 			else

	jmp	SHORT $LN4@operator@11
$LN10@operator@11:

; 80   : 			{
; 81   : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	mov	DWORD PTR _num$[ebp], eax

; 82   : 				write(&num, sizeof(num));

	push	4
	lea	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 83   : 				for(uint i=0; i<num; i++)

	mov	DWORD PTR _i$63265[ebp], 0
	jmp	SHORT $LN3@operator@11
$LN2@operator@11:
	mov	eax, DWORD PTR _i$63265[ebp]
	add	eax, 1
	mov	DWORD PTR _i$63265[ebp], eax
$LN3@operator@11:
	mov	ecx, DWORD PTR _i$63265[ebp]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN4@operator@11

; 84   : 				{
; 85   : 					writeObject(array[i]);

	mov	edx, DWORD PTR _i$63265[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEAAPAVBoneData@Ogre@@I@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?writeObject@Archive@Ogre@@QAEXPAVBaseObject@2@@Z ; Ogre::Archive::writeObject

; 86   : 				}

	jmp	SHORT $LN2@operator@11
$LN4@operator@11:

; 87   : 			}
; 88   : 
; 89   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 90   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$?6VBoneData@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@Z ENDP ; Ogre::Archive::operator<<<Ogre::BoneData>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@PAPAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@2@@stdext@@YAPAPAVBoneData@Ogre@@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVBoneData@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@1@0PAPAV23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@1@0PAPAV23@@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Ucopy<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@PAPAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@2@@stdext@@YAPAPAVBoneData@Ogre@@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVBoneData@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@1@0PAPAV23@@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Ucopy<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAVBoneData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::BoneData * *,Ogre::BoneData * *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneData * *>
PUBLIC	??$_Iter_random@PAPAVBoneData@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneData@Ogre@@0@Z ; std::_Iter_random<Ogre::BoneData * *,Ogre::BoneData * *>
PUBLIC	??$_Ptr_cat@PAPAVBoneData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BoneData * *,Ogre::BoneData * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVBoneData@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00@Z
_TEXT	SEGMENT
$T67299 = -3						; size = 1
$T67298 = -2						; size = 1
$T67297 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVBoneData@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00@Z PROC ; stdext::unchecked_copy<Ogre::BoneData * *,Ogre::BoneData * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T67297[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVBoneData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BoneData * *,Ogre::BoneData * *>
	add	esp, 8
	mov	BYTE PTR $T67298[ebp], al
	movzx	eax, BYTE PTR $T67297[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T67298[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67299[ebp]
	push	ecx
	call	??$_Iter_random@PAPAVBoneData@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneData@Ogre@@0@Z ; std::_Iter_random<Ogre::BoneData * *,Ogre::BoneData * *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneData * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneData * *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAPAVBoneData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::BoneData * *,Ogre::BoneData * *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVBoneData@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00@Z ENDP ; stdext::unchecked_copy<Ogre::BoneData * *,Ogre::BoneData * *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAPAVBoneData@Ogre@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAPAVBoneData@Ogre@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV23@00@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Ucopy<Ogre::BoneData * *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAPAVBoneData@Ogre@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV23@00@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Ucopy<Ogre::BoneData * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAXPAPAVBoneData@Ogre@@0AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAXPAPAVBoneData@Ogre@@0AAV?$allocator@PAVBoneData@Ogre@@@0@@Z
_TEXT	SEGMENT
$T67304 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAXPAPAVBoneData@Ogre@@0AAV?$allocator@PAVBoneData@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::BoneData *> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAVBoneData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BoneData * *,Ogre::BoneData * *>
	add	esp, 8
	mov	BYTE PTR $T67304[ebp], al
	movzx	edx, BYTE PTR $T67304[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAXPAPAVBoneData@Ogre@@0AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BoneData *> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAXPAPAVBoneData@Ogre@@0AAV?$allocator@PAVBoneData@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::BoneData *> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAPAVBoneData@Ogre@@IPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAXPAPAVBoneData@Ogre@@IABQAV12@AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAPAVBoneData@Ogre@@IPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAXPAPAVBoneData@Ogre@@IABQAV12@AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T67308 = -2						; size = 1
$T67307 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAPAVBoneData@Ogre@@IPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAXPAPAVBoneData@Ogre@@IABQAV12@AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *,std::allocator<Ogre::BoneData *> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T67307[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVBoneData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BoneData * *,Ogre::BoneData * *>
	add	esp, 8
	mov	BYTE PTR $T67308[ebp], al
	movzx	eax, BYTE PTR $T67307[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T67308[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAPAVBoneData@Ogre@@IPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAXPAPAVBoneData@Ogre@@IABQAV12@AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAPAVBoneData@Ogre@@IPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAXPAPAVBoneData@Ogre@@IABQAV12@AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVBoneData@Ogre@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVBoneData@Ogre@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV23@00@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Umove<Ogre::BoneData * *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAVBoneData@Ogre@@@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEPAPAVBoneData@Ogre@@PAPAV23@00@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Umove<Ogre::BoneData * *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAPAVBoneData@Ogre@@PAV12@@std@@YAXPAPAVBoneData@Ogre@@0ABQAV12@@Z ; std::_Fill<Ogre::BoneData * *,Ogre::BoneData *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAPAVBoneData@Ogre@@PAV12@@std@@YAXPAPAVBoneData@Ogre@@0ABQAV12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAPAVBoneData@Ogre@@PAV12@@std@@YAXPAPAVBoneData@Ogre@@0ABQAV12@@Z PROC ; std::fill<Ogre::BoneData * *,Ogre::BoneData *>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneData * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneData * *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAPAVBoneData@Ogre@@PAV12@@std@@YAXPAPAVBoneData@Ogre@@0ABQAV12@@Z ; std::_Fill<Ogre::BoneData * *,Ogre::BoneData *>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAPAVBoneData@Ogre@@PAV12@@std@@YAXPAPAVBoneData@Ogre@@0ABQAV12@@Z ENDP ; std::fill<Ogre::BoneData * *,Ogre::BoneData *>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAPAVBoneData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::BoneData * *,Ogre::BoneData * *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAPAVBoneData@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVBoneData@Ogre@@@Z ; std::_Move_cat<Ogre::BoneData * *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAPAVBoneData@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00@Z
_TEXT	SEGMENT
$T67317 = -3						; size = 1
$T67316 = -2						; size = 1
$T67315 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAPAVBoneData@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00@Z PROC ; stdext::_Unchecked_move_backward<Ogre::BoneData * *,Ogre::BoneData * *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T67315[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAPAVBoneData@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVBoneData@Ogre@@@Z ; std::_Move_cat<Ogre::BoneData * *>
	add	esp, 4
	mov	BYTE PTR $T67316[ebp], al
	movzx	edx, BYTE PTR $T67315[ebp]
	push	edx
	movzx	eax, BYTE PTR $T67316[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T67317[ebp]
	push	eax
	call	??$_Iter_random@PAPAVBoneData@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneData@Ogre@@0@Z ; std::_Iter_random<Ogre::BoneData * *,Ogre::BoneData * *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneData * *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneData * *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAPAVBoneData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::BoneData * *,Ogre::BoneData * *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAPAVBoneData@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00@Z ENDP ; stdext::_Unchecked_move_backward<Ogre::BoneData * *,Ogre::BoneData * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0PAVBoneData@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVBoneData@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVBoneData@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVBoneData@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BoneData *>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVBoneData@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVBoneData@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BoneData *>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Allocate@PAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@IPAPAV12@@Z
_TEXT	SEGMENT
$T67322 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@IPAPAV12@@Z PROC ; std::_Allocate<Ogre::BoneData *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T67322[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T67322[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@IPAPAV12@@Z ENDP ; std::_Allocate<Ogre::BoneData *>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_alloc@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0
__ehfuncinfo$??1bad_alloc@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_alloc@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1bad_alloc@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 381  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??1bad_alloc@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1bad_alloc@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ		; std::bad_alloc::~bad_alloc
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@15
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@15:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Tmp$63842 = -1					; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 17   : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp
	push	ecx

; 18   : 	if (&_Left != &_Right)

	mov	eax, DWORD PTR __Left$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	SHORT $LN2@swap

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	ecx, DWORD PTR __Left$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR __Tmp$63842[ebp], dl

; 21   : 
; 22   : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 23   : 		_Right = _Tmp;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	cl, BYTE PTR __Tmp$63842[ebp]
	mov	BYTE PTR [eax], cl
$LN2@swap:

; 24   : 		}
; 25   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBVFixedString@Ogre@@H@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBVFixedString@Ogre@@H@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *><std::pair<Ogre::FixedString const ,int> >, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$pair@$$CBVFixedString@Ogre@@H@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *><std::pair<Ogre::FixedString const ,int> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@@Z PROC ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T67351 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T67351[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T67351[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBVFixedString@Ogre@@H@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBVFixedString@Ogre@@H@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node><std::pair<Ogre::FixedString const ,int> >, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$pair@$$CBVFixedString@Ogre@@H@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node><std::pair<Ogre::FixedString const ,int> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T67356 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@3
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 24					; 00000018H
	jae	SHORT $LN2@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T67356[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T67356[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 24					; 00000018H
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@3:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEPAXI@Z ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@@Z PROC ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEPAXI@Z

; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
tv68 = -12						; size = 4
$T67361 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@ABQAU120@@Z PROC ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67361[ebp], eax
	cmp	DWORD PTR $T67361[ebp], 0
	je	SHORT $LN3@Construct
	mov	edx, DWORD PTR $T67361[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T67361[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN1@Construct
$LN3@Construct:
	mov	DWORD PTR tv68[ebp], 0
$LN1@Construct:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBVFixedString@Ogre@@H@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBVFixedString@Ogre@@H@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::pair<Ogre::FixedString const ,int> >, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$pair@$$CBVFixedString@Ogre@@H@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::pair<Ogre::FixedString const ,int> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
PUBLIC	??1_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node::~_Node
; Function compile flags: /Odtp
;	COMDAT ??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEPAXI@Z PROC ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@16
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@16:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAEPAXI@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node::~_Node, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$pair@$$CBVFixedString@Ogre@@H@std@@QAE@XZ
__ehhandler$??1_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Node@?$_Tree_nod@V?$_Tmap_traits@VFixedString@Ogre@@HU?$less@VFixedString@Ogre@@@std@@V?$allocator@U?$pair@$$CBVFixedString@Ogre@@H@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_nod<std::_Tmap_traits<Ogre::FixedString,int,std::less<Ogre::FixedString>,std::allocator<std::pair<Ogre::FixedString const ,int> >,0> >::_Node::~_Node
PUBLIC	?resize@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXIPAVBoneData@Ogre@@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::resize
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?resize@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?resize@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXI@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	push	0
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXIPAVBoneData@Ogre@@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::resize

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::resize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?resize@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXIPAVBoneData@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T67397 = -64						; size = 8
$T67396 = -56						; size = 8
$T67395 = -48						; size = 8
$T67394 = -40						; size = 8
$T67393 = -32						; size = 8
$T67392 = -24						; size = 8
$T67391 = -16						; size = 8
$T67390 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
?resize@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXIPAVBoneData@Ogre@@@Z PROC ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T67391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T67390[ebp], ecx
	mov	DWORD PTR $T67390[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T67390[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T67390[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@IABQAVBoneData@Ogre@@@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Insert_n
	jmp	SHORT $LN4@resize
$LN3@resize:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T67393[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T67392[ebp], edx
	mov	DWORD PTR $T67392[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67396[ebp]
	push	edx
	lea	eax, DWORD PTR $T67395[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T67394[ebp], ecx
	mov	DWORD PTR $T67394[ebp+4], edx
	mov	eax, DWORD PTR $T67392[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T67392[ebp]
	push	ecx
	mov	edx, DWORD PTR $T67394[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T67394[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67397[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::erase
$LN4@resize:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$vector@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QAEXIPAVBoneData@Ogre@@@Z ENDP ; std::vector<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::resize
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBQAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAPAPAVBoneData@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BoneData * const *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@std@@YAPBQAVBoneData@Ogre@@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@PAPAVBoneData@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@AAPAPAVBoneData@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >,Ogre::BoneData * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@PAPAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@2@@stdext@@YAPAPAVBoneData@Ogre@@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVBoneData@Ogre@@@4@@Z
_TEXT	SEGMENT
$T67401 = -2						; size = 1
$T67400 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@PAPAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@2@@stdext@@YAPAPAVBoneData@Ogre@@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVBoneData@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T67400[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@PAPAVBoneData@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@AAPAPAVBoneData@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >,Ogre::BoneData * *>
	add	esp, 8
	mov	BYTE PTR $T67401[ebp], al
	movzx	eax, BYTE PTR $T67400[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T67401[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@std@@YAPBQAVBoneData@Ogre@@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@std@@YAPBQAVBoneData@Ogre@@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBQAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAPAPAVBoneData@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BoneData * const *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@PAPAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@2@@stdext@@YAPAPAVBoneData@Ogre@@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVBoneData@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::BoneData * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@@Z PROC ; std::_Checked_base<Ogre::BoneData * *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::BoneData * *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@@Z ENDP ; std::_Checked_base<Ogre::BoneData * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAPAVBoneData@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneData@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAPAVBoneData@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneData@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::BoneData * *,Ogre::BoneData * *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAPAVBoneData@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneData@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::BoneData * *,Ogre::BoneData * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAVBoneData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneData@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAVBoneData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneData@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::BoneData * *,Ogre::BoneData * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAPAVBoneData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneData@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::BoneData * *,Ogre::BoneData * *>
_TEXT	ENDS
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAPAVBoneData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAPAVBoneData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::BoneData * *,Ogre::BoneData * *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAPAVBoneData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::BoneData * *,Ogre::BoneData * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T67413 = -2						; size = 1
$T67412 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T67412[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVBoneData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BoneData * *,Ogre::BoneData * *>
	add	esp, 8
	mov	BYTE PTR $T67413[ebp], al
	movzx	eax, BYTE PTR $T67412[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T67413[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneData * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneData * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAXPAPAVBoneData@Ogre@@0AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAXPAPAVBoneData@Ogre@@0AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::BoneData *> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAXPAPAVBoneData@Ogre@@0AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::BoneData *> >
_TEXT	ENDS
PUBLIC	??$unchecked_fill_n@PAPAVBoneData@Ogre@@IPAV12@@stdext@@YAXPAPAVBoneData@Ogre@@IABQAV12@@Z ; stdext::unchecked_fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_fill_n@PAPAVBoneData@Ogre@@IPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAXPAPAVBoneData@Ogre@@IABQAV12@AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAPAVBoneData@Ogre@@IPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAXPAPAVBoneData@Ogre@@IABQAV12@AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *,std::allocator<Ogre::BoneData *> >, COMDAT

; 418  : 	{	// copy _Count *_Val to raw _First, using _Al, scalar type

	push	ebp
	mov	ebp, esp

; 419  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_fill_n@PAPAVBoneData@Ogre@@IPAV12@@stdext@@YAXPAPAVBoneData@Ogre@@IABQAV12@@Z ; stdext::unchecked_fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *>
	add	esp, 12					; 0000000cH

; 420  : 	}

	pop	ebp
	ret	0
??$_Uninit_fill_n@PAPAVBoneData@Ogre@@IPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAXPAPAVBoneData@Ogre@@IABQAV12@AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *,std::allocator<Ogre::BoneData *> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@U_Undefined_move_tag@4@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_uninitialized_move@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T67421 = -2						; size = 1
$T67420 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T67420[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAPAVBoneData@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVBoneData@Ogre@@@Z ; std::_Move_cat<Ogre::BoneData * *>
	add	esp, 4
	mov	BYTE PTR $T67421[ebp], al
	movzx	edx, BYTE PTR $T67420[ebp]
	push	edx
	movzx	eax, BYTE PTR $T67421[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneData * *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneData * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@U_Undefined_move_tag@4@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAPAVBoneData@Ogre@@PAV12@@std@@YAXPAPAVBoneData@Ogre@@0ABQAV12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAPAVBoneData@Ogre@@PAV12@@std@@YAXPAPAVBoneData@Ogre@@0ABQAV12@@Z PROC ; std::_Fill<Ogre::BoneData * *,Ogre::BoneData *>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill
$LN2@Fill:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@Fill
$LN4@Fill:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@PAPAVBoneData@Ogre@@PAV12@@std@@YAXPAPAVBoneData@Ogre@@0ABQAV12@@Z ENDP ; std::_Fill<Ogre::BoneData * *,Ogre::BoneData *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAPAVBoneData@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVBoneData@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAPAVBoneData@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVBoneData@Ogre@@@Z PROC ; std::_Move_cat<Ogre::BoneData * *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAPAVBoneData@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVBoneData@Ogre@@@Z ENDP ; std::_Move_cat<Ogre::BoneData * *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAPAVBoneData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::BoneData * *,Ogre::BoneData * *,std::random_access_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAPAVBoneData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T67429 = -2						; size = 1
$T67428 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAPAVBoneData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<Ogre::BoneData * *,Ogre::BoneData * *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T67428[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVBoneData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BoneData * *,Ogre::BoneData * *>
	add	esp, 8
	mov	BYTE PTR $T67429[ebp], al
	movzx	eax, BYTE PTR $T67428[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T67429[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAPAVBoneData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::BoneData * *,Ogre::BoneData * *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAPAVBoneData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<Ogre::BoneData * *,Ogre::BoneData * *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVBoneData@Ogre@@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@std@@YAPBQAVBoneData@Ogre@@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@std@@YAPBQAVBoneData@Ogre@@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVBoneData@Ogre@@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@@std@@YAPBQAVBoneData@Ogre@@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@PAPAVBoneData@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@AAPAPAVBoneData@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@PAPAVBoneData@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@AAPAPAVBoneData@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >,Ogre::BoneData * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@PAPAVBoneData@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@AAPAPAVBoneData@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >,Ogre::BoneData * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PBQAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAPAPAVBoneData@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBQAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAPAPAVBoneData@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::BoneData * const *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBQAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAPAPAVBoneData@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::BoneData * const *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::BoneData * *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::BoneData * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@2

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@2:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAPAVBoneData@Ogre@@IPAV12@@std@@YAXPAPAVBoneData@Ogre@@IABQAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *>
PUBLIC	??$_Iter_cat@PAPAVBoneData@Ogre@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneData@Ogre@@@Z ; std::_Iter_cat<Ogre::BoneData * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_fill_n@PAPAVBoneData@Ogre@@IPAV12@@stdext@@YAXPAPAVBoneData@Ogre@@IABQAV12@@Z
_TEXT	SEGMENT
$T67443 = -2						; size = 1
$T67442 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAPAVBoneData@Ogre@@IPAV12@@stdext@@YAXPAPAVBoneData@Ogre@@IABQAV12@@Z PROC ; stdext::unchecked_fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T67442[ebp], al
	movzx	ecx, BYTE PTR $T67442[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T67443[ebp]
	push	eax
	call	??$_Iter_cat@PAPAVBoneData@Ogre@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneData@Ogre@@@Z ; std::_Iter_cat<Ogre::BoneData * *>
	add	esp, 8
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Fill_n@PAPAVBoneData@Ogre@@IPAV12@@std@@YAXPAPAVBoneData@Ogre@@IABQAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *>
	add	esp, 20					; 00000014H

; 3722 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAPAVBoneData@Ogre@@IPAV12@@stdext@@YAXPAPAVBoneData@Ogre@@IABQAV12@@Z ENDP ; stdext::unchecked_fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_move@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@U_Undefined_move_tag@4@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@U_Undefined_move_tag@4@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@@stdext@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAPAVBoneData@Ogre@@PAPAV12@V?$allocator@PAVBoneData@Ogre@@@std@@U_Undefined_move_tag@4@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneData@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Ogre::BoneData * *,Ogre::BoneData * *,std::allocator<Ogre::BoneData *>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAPAVBoneData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAPAVBoneData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::BoneData * *,Ogre::BoneData * *,std::random_access_iterator_tag>, COMDAT

; 2698 : 	{	// copy [_First, _Last) backwards to [..., _Dest), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2699 : 
; 2700 :  #if _HAS_ITERATOR_DEBUGGING
; 2701 : 	_DEBUG_RANGE(_First, _Last);
; 2702 : 	if (_First != _Last)
; 2703 : 		_DEBUG_POINTER(_Dest);
; 2704 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2705 : 
; 2706 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2707 : 	/* if _OutIt is range checked, this will make sure there is enough space for 
; 2708 : 	 * the memmove
; 2709 : 	 */
; 2710 : 	_OutIt _Result = _Dest - _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, ecx
	mov	DWORD PTR __Result$[ebp], edx

; 2711 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_backw

; 2712 : 		_CRT_SECURE_MEMMOVE(&*_Result, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Off$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR __Result$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_backw:

; 2713 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2714 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAPAVBoneData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::BoneData * *,Ogre::BoneData * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEPBQAVBoneData@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVBoneData@Ogre@@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVBoneData@Ogre@@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEPBQAVBoneData@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVBoneData@Ogre@@AAV?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAPAVBoneData@Ogre@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneData@Ogre@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAPAVBoneData@Ogre@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneData@Ogre@@@Z PROC ; std::_Iter_cat<Ogre::BoneData * *>, COMDAT

; 952  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 955  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAPAVBoneData@Ogre@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneData@Ogre@@@Z ENDP ; std::_Iter_cat<Ogre::BoneData * *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAPAVBoneData@Ogre@@IPAV12@@std@@YAXPAPAVBoneData@Ogre@@IABQAV12@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *>
; Function compile flags: /Odtp
;	COMDAT ??$_Fill_n@PAPAVBoneData@Ogre@@IPAV12@@std@@YAXPAPAVBoneData@Ogre@@IABQAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T67454 = -5						; size = 1
__Last$ = -4						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAPAVBoneData@Ogre@@IPAV12@@std@@YAXPAPAVBoneData@Ogre@@IABQAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *>, COMDAT

; 3250 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3251 : 		// if _OutIt is checked, this will ensure we have enough space
; 3252 : 		_OutIt _Last = _First + _Count; (_Last);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Last$[ebp], edx

; 3253 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 3254 : 			_Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T67454[ebp], al
	movzx	ecx, BYTE PTR $T67454[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVBoneData@Ogre@@@std@@YAPAPAVBoneData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneData * *>
	add	esp, 4
	push	eax
	call	??$_Fill_n@PAPAVBoneData@Ogre@@IPAV12@@std@@YAXPAPAVBoneData@Ogre@@IABQAV12@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *>
	add	esp, 16					; 00000010H

; 3255 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAPAVBoneData@Ogre@@IPAV12@@std@@YAXPAPAVBoneData@Ogre@@IABQAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEPBQAVBoneData@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEPBQAVBoneData@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@PAVBoneData@Ogre@@V?$allocator@PAVBoneData@Ogre@@@std@@@std@@QBEPBQAVBoneData@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::BoneData *,std::allocator<Ogre::BoneData *> >::_Checked_iterator_base
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill_n@PAPAVBoneData@Ogre@@IPAV12@@std@@YAXPAPAVBoneData@Ogre@@IABQAV12@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAPAVBoneData@Ogre@@IPAV12@@std@@YAXPAPAVBoneData@Ogre@@IABQAV12@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *>, COMDAT

; 3196 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp

; 3197 : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN3@Fill_n
$LN2@Fill_n:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Fill_n:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Fill_n

; 3198 : 		*_First = _Val;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@Fill_n
$LN4@Fill_n:

; 3199 : 	}

	pop	ebp
	ret	0
??$_Fill_n@PAPAVBoneData@Ogre@@IPAV12@@std@@YAXPAPAVBoneData@Ogre@@IABQAV12@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<Ogre::BoneData * *,unsigned int,Ogre::BoneData *>
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
_TEXT	ENDS
;	COMDAT ??__ETWO_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__ETWO_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'TWO_PI'', COMDAT

; 10   : 	const float TWO_PI = ONE_PI*2;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fadd	ST(0), ST(0)
	fstp	DWORD PTR _TWO_PI
	pop	ebp
	ret	0
??__ETWO_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'TWO_PI''
text$yc	ENDS
PUBLIC	__real@3fe0000000000000
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??__EHALF_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__EHALF_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'HALF_PI'', COMDAT

; 11   : 	const float	HALF_PI = ONE_PI*0.5f;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR _HALF_PI
	pop	ebp
	ret	0
??__EHALF_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'HALF_PI''
text$yc	ENDS
EXTRN	??0RuntimeClass@Ogre@@QAE@PBDPBV01@HP6APAVBaseObject@1@XZ@Z:PROC ; Ogre::RuntimeClass::RuntimeClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreskeletondata.cpp
;	COMDAT ??__E?m_RTTI@BoneData@Ogre@@2VRuntimeClass@2@B@@YAXXZ
text$yc	SEGMENT
??__E?m_RTTI@BoneData@Ogre@@2VRuntimeClass@2@B@@YAXXZ PROC ; `dynamic initializer for 'Ogre::BoneData::m_RTTI'', COMDAT

; 7    : 	IMPLEMENT_RTTI(BoneData, Resource, 100)

	push	ebp
	mov	ebp, esp
	push	OFFSET ?newObject@BoneData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::BoneData::newObject
	push	100					; 00000064H
	push	OFFSET ?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B ; Ogre::Resource::m_RTTI
	push	OFFSET $SG59251
	mov	ecx, OFFSET ?m_RTTI@BoneData@Ogre@@2VRuntimeClass@2@B ; Ogre::BoneData::m_RTTI
	call	??0RuntimeClass@Ogre@@QAE@PBDPBV01@HP6APAVBaseObject@1@XZ@Z ; Ogre::RuntimeClass::RuntimeClass
	pop	ebp
	ret	0
??__E?m_RTTI@BoneData@Ogre@@2VRuntimeClass@2@B@@YAXXZ ENDP ; `dynamic initializer for 'Ogre::BoneData::m_RTTI''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??__E?m_RTTI@SkeletonData@Ogre@@2VRuntimeClass@2@B@@YAXXZ
text$yc	SEGMENT
??__E?m_RTTI@SkeletonData@Ogre@@2VRuntimeClass@2@B@@YAXXZ PROC ; `dynamic initializer for 'Ogre::SkeletonData::m_RTTI'', COMDAT

; 8    : 	IMPLEMENT_RTTI(SkeletonData, Resource, 100)

	push	ebp
	mov	ebp, esp
	push	OFFSET ?newObject@SkeletonData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::SkeletonData::newObject
	push	100					; 00000064H
	push	OFFSET ?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B ; Ogre::Resource::m_RTTI
	push	OFFSET $SG59255
	mov	ecx, OFFSET ?m_RTTI@SkeletonData@Ogre@@2VRuntimeClass@2@B ; Ogre::SkeletonData::m_RTTI
	call	??0RuntimeClass@Ogre@@QAE@PBDPBV01@HP6APAVBaseObject@1@XZ@Z ; Ogre::RuntimeClass::RuntimeClass
	pop	ebp
	ret	0
??__E?m_RTTI@SkeletonData@Ogre@@2VRuntimeClass@2@B@@YAXXZ ENDP ; `dynamic initializer for 'Ogre::SkeletonData::m_RTTI''
text$yc	ENDS
PUBLIC	?m_RTTI@SkeletonData@Ogre@@2VRuntimeClass@2@B	; Ogre::SkeletonData::m_RTTI
PUBLIC	?m_RTTI@BoneData@Ogre@@2VRuntimeClass@2@B	; Ogre::BoneData::m_RTTI
_BSS	SEGMENT
?m_RTTI@SkeletonData@Ogre@@2VRuntimeClass@2@B DB 014H DUP (?) ; Ogre::SkeletonData::m_RTTI
_TWO_PI	DD	01H DUP (?)
?m_RTTI@BoneData@Ogre@@2VRuntimeClass@2@B DB 014H DUP (?) ; Ogre::BoneData::m_RTTI
_HALF_PI DD	01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_TWO_PI$initializer$ DD FLAT:??__ETWO_PI@Ogre@@YAXXZ
_HALF_PI$initializer$ DD FLAT:??__EHALF_PI@Ogre@@YAXXZ
?m_RTTI$initializer$@BoneData@Ogre@@2P6AXXZA DD FLAT:??__E?m_RTTI@BoneData@Ogre@@2VRuntimeClass@2@B@@YAXXZ ; Ogre::BoneData::m_RTTI$initializer$
?m_RTTI$initializer$@SkeletonData@Ogre@@2P6AXXZA DD FLAT:??__E?m_RTTI@SkeletonData@Ogre@@2VRuntimeClass@2@B@@YAXXZ ; Ogre::SkeletonData::m_RTTI$initializer$
CRT$XCU	ENDS
END
