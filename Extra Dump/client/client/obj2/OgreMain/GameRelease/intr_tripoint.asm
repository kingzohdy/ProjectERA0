; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\sdk\ozcollide\intr_tripoint.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	?dot@Vec3f@ozcollide@@QBEMABV12@@Z		; ozcollide::Vec3f::dot
PUBLIC	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator-
PUBLIC	?isPointInsideTriangle@ozcollide@@YA_NABVVec3f@1@000@Z ; ozcollide::isPointInsideTriangle
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
; File i:\svnroot\client\sdk\ozcollide\intr_tripoint.cpp
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
_t$ = -72						; size = 4
_uu$ = -68						; size = 4
_d$ = -64						; size = 4
_invD$ = -60						; size = 4
_wu$ = -56						; size = 4
_u$ = -52						; size = 12
_uv$ = -40						; size = 4
_vv$ = -36						; size = 4
_wv$ = -32						; size = 4
_s$ = -28						; size = 4
_v$ = -24						; size = 12
_w$ = -12						; size = 12
__v0$ = 8						; size = 4
__v1$ = 12						; size = 4
__v2$ = 16						; size = 4
__pt$ = 20						; size = 4
?isPointInsideTriangle@ozcollide@@YA_NABVVec3f@1@000@Z PROC ; ozcollide::isPointInsideTriangle

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H

; 37   : 	Vec3f u = _v1 - _v0;

	mov	eax, DWORD PTR __v0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __v1$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 38   : 	Vec3f v = _v2 - _v0;

	mov	edx, DWORD PTR __v0$[ebp]
	push	edx
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR __v2$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 39   : 	Vec3f w = _pt - _v0;

	mov	ecx, DWORD PTR __v0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	ecx, DWORD PTR __pt$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 40   : 
; 41   : 	float uu = u.dot(u);

	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	lea	ecx, DWORD PTR _u$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fstp	DWORD PTR _uu$[ebp]

; 42   : 	float uv = u.dot(v);

	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _u$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fstp	DWORD PTR _uv$[ebp]

; 43   : 	float vv = v.dot(v);

	lea	edx, DWORD PTR _v$[ebp]
	push	edx
	lea	ecx, DWORD PTR _v$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fstp	DWORD PTR _vv$[ebp]

; 44   : 	float wu = w.dot(u);

	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	lea	ecx, DWORD PTR _w$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fstp	DWORD PTR _wu$[ebp]

; 45   : 	float wv = w.dot(v);

	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _w$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fstp	DWORD PTR _wv$[ebp]

; 46   : 	float d = uv * uv - uu * vv;

	fld	DWORD PTR _uv$[ebp]
	fmul	DWORD PTR _uv$[ebp]
	fld	DWORD PTR _uu$[ebp]
	fmul	DWORD PTR _vv$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _d$[ebp]

; 47   : 
; 48   : 	float invD = 1 / d;

	fld	DWORD PTR _d$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _invD$[ebp]

; 49   : 	float s = (uv * wv - vv * wu) * invD;

	fld	DWORD PTR _uv$[ebp]
	fmul	DWORD PTR _wv$[ebp]
	fld	DWORD PTR _vv$[ebp]
	fmul	DWORD PTR _wu$[ebp]
	fsubp	ST(1), ST(0)
	fmul	DWORD PTR _invD$[ebp]
	fstp	DWORD PTR _s$[ebp]

; 50   : 	if (s < 0 || s > 1)

	fld	DWORD PTR _s$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN3@isPointIns
	fld	DWORD PTR _s$[ebp]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@isPointIns
$LN3@isPointIns:

; 51   : 		return false;

	xor	al, al
	jmp	SHORT $LN5@isPointIns
$LN4@isPointIns:

; 52   : 	float t = (uv * wu - uu * wv) * invD;

	fld	DWORD PTR _uv$[ebp]
	fmul	DWORD PTR _wu$[ebp]
	fld	DWORD PTR _uu$[ebp]
	fmul	DWORD PTR _wv$[ebp]
	fsubp	ST(1), ST(0)
	fmul	DWORD PTR _invD$[ebp]
	fstp	DWORD PTR _t$[ebp]

; 53   : 	if (t < 0 || (s + t) > 1)

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN1@isPointIns
	fld	DWORD PTR _s$[ebp]
	fadd	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@isPointIns
$LN1@isPointIns:

; 54   : 		return false;

	xor	al, al
	jmp	SHORT $LN5@isPointIns
$LN2@isPointIns:

; 55   : 
; 56   : 	return true;

	mov	al, 1
$LN5@isPointIns:

; 57   : 
; 58   : /*
; 59   : 	float sum = 0;
; 60   : 
; 61   : 	Vec3f da = vertex0 - pt;
; 62   : 	Vec3f db = vertex1 - pt;
; 63   : 	Vec3f dc = vertex2 - pt;
; 64   : 
; 65   : 	da.normalize();
; 66   : 	db.normalize();
; 67   : 	dc.normalize();
; 68   : 
; 69   : 	sum += (float) SAFE_ACOS( da.dot(db) );
; 70   : 	sum += (float) SAFE_ACOS( db.dot(dc) );
; 71   : 	sum += (float) SAFE_ACOS( dc.dot(da) );
; 72   : 
; 73   : 	if (sum < OZ_TWOPI - 0.1 || sum > OZ_TWOPI + 0.1)
; 74   : 		return OZFALSE;
; 75   : 
; 76   : 	return OZTRUE;
; 77   : 	*/
; 78   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isPointInsideTriangle@ozcollide@@YA_NABVVec3f@1@000@Z ENDP ; ozcollide::isPointInsideTriangle
_TEXT	ENDS
PUBLIC	??0Vec3f@ozcollide@@QAE@MMM@Z			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
;	COMDAT ??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator-, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		return Vec3f(x - _v.x, y - _v.y, z - _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 96   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0Vec3f@ozcollide@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Vec3f@ozcollide@@QAE@MMM@Z PROC			; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __z$[ebp]
	fstp	DWORD PTR [edx+8]

; 43   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vec3f@ozcollide@@QAE@MMM@Z ENDP			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?dot@Vec3f@ozcollide@@QBEMABV12@@Z
_TEXT	SEGMENT
tv86 = -8						; size = 4
_this$ = -4						; size = 4
__v$ = 8						; size = 4
?dot@Vec3f@ozcollide@@QBEMABV12@@Z PROC			; ozcollide::Vec3f::dot, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 		return x * _v.x + y * _v.y + z * _v.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]

; 165  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?dot@Vec3f@ozcollide@@QBEMABV12@@Z ENDP			; ozcollide::Vec3f::dot
_TEXT	ENDS
PUBLIC	?isPointInsidePolygon@ozcollide@@YA_NHPBVVec3f@1@ABV21@@Z ; ozcollide::isPointInsidePolygon
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\intr_tripoint.cpp
_TEXT	SEGMENT
_pt1$6284 = -20						; size = 4
_pt2$6285 = -16						; size = 4
_pt0$6283 = -12						; size = 4
_i$6279 = -8						; size = 4
_nbTriangles$ = -4					; size = 4
__nbVertices$ = 8					; size = 4
__pnts$ = 12						; size = 4
__pt$ = 16						; size = 4
?isPointInsidePolygon@ozcollide@@YA_NHPBVVec3f@1@ABV21@@Z PROC ; ozcollide::isPointInsidePolygon

; 83   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 84   : 	int nbTriangles = _nbVertices - 2;

	mov	eax, DWORD PTR __nbVertices$[ebp]
	sub	eax, 2
	mov	DWORD PTR _nbTriangles$[ebp], eax

; 85   : 	for (int i = 0; i < nbTriangles; i++) {

	mov	DWORD PTR _i$6279[ebp], 0
	jmp	SHORT $LN4@isPointIns@2
$LN3@isPointIns@2:
	mov	ecx, DWORD PTR _i$6279[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$6279[ebp], ecx
$LN4@isPointIns@2:
	mov	edx, DWORD PTR _i$6279[ebp]
	cmp	edx, DWORD PTR _nbTriangles$[ebp]
	jge	SHORT $LN2@isPointIns@2

; 86   : 		const Vec3f &pt0 = _pnts[0];

	mov	eax, DWORD PTR __pnts$[ebp]
	mov	DWORD PTR _pt0$6283[ebp], eax

; 87   : 		const Vec3f &pt1 = _pnts[i + 1];

	mov	ecx, DWORD PTR _i$6279[ebp]
	add	ecx, 1
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __pnts$[ebp]
	mov	DWORD PTR _pt1$6284[ebp], ecx

; 88   : 		const Vec3f &pt2 = _pnts[i + 2];

	mov	edx, DWORD PTR _i$6279[ebp]
	add	edx, 2
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __pnts$[ebp]
	mov	DWORD PTR _pt2$6285[ebp], edx

; 89   : 		if (isPointInsideTriangle(pt0, pt1, pt2, _pt))

	mov	eax, DWORD PTR __pt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pt2$6285[ebp]
	push	ecx
	mov	edx, DWORD PTR _pt1$6284[ebp]
	push	edx
	mov	eax, DWORD PTR _pt0$6283[ebp]
	push	eax
	call	?isPointInsideTriangle@ozcollide@@YA_NABVVec3f@1@000@Z ; ozcollide::isPointInsideTriangle
	add	esp, 16					; 00000010H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@isPointIns@2

; 90   : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@isPointIns@2
$LN1@isPointIns@2:

; 91   : 	}

	jmp	SHORT $LN3@isPointIns@2
$LN2@isPointIns@2:

; 92   : 	return false;

	xor	al, al
$LN5@isPointIns@2:

; 93   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isPointInsidePolygon@ozcollide@@YA_NHPBVVec3f@1@ABV21@@Z ENDP ; ozcollide::isPointInsidePolygon
_TEXT	ENDS
END
