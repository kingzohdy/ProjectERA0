; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\OgreMain\tinyxml.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?condenseWhiteSpace@TiXmlBase@@0_NA		; TiXmlBase::condenseWhiteSpace
CONST	SEGMENT
$SG7044	DB	'&#x%02X;', 00H
$SG7724	DB	00H
	ORG $+2
$SG7333	DB	'%d', 00H
	ORG $+1
$SG7346	DB	'%f', 00H
	ORG $+1
$SG7375	DB	'    ', 00H
	ORG $+3
$SG7376	DB	'<%s', 00H
$SG7381	DB	' ', 00H
	ORG $+2
$SG7384	DB	' />', 00H
$SG7387	DB	'>', 00H
	ORG $+2
$SG7388	DB	'</%s>', 00H
	ORG $+2
$SG7390	DB	'>', 00H
	ORG $+2
$SG7395	DB	0aH, 00H
	ORG $+2
$SG7396	DB	0aH, 00H
	ORG $+2
$SG7400	DB	'    ', 00H
	ORG $+3
$SG7401	DB	'</%s>', 00H
	ORG $+2
$SG7469	DB	'rb', 00H
	ORG $+1
$SG7547	DB	'w', 00H
	ORG $+2
$SG7585	DB	0aH, 00H
	ORG $+2
$SG7614	DB	'%s="%s"', 00H
$SG7616	DB	'="', 00H
	ORG $+1
$SG7617	DB	'"', 00H
	ORG $+2
$SG7620	DB	'%s=''%s''', 00H
$SG7622	DB	'=''', 00H
	ORG $+1
$SG7623	DB	'''', 00H
	ORG $+2
$SG7629	DB	'%d', 00H
	ORG $+1
$SG7635	DB	'%lf', 00H
$SG7641	DB	'%d', 00H
	ORG $+1
$SG7647	DB	'%lf', 00H
$SG7672	DB	'    ', 00H
	ORG $+3
$SG7673	DB	'<!--%s-->', 00H
	ORG $+2
$SG7699	DB	0aH, 00H
	ORG $+2
$SG7703	DB	'    ', 00H
	ORG $+3
$SG7704	DB	'<![CDATA[%s]]>', 0aH, 00H
$SG7707	DB	'%s', 00H
	ORG $+1
$SG7747	DB	'<?xml ', 00H
	ORG $+1
$SG7749	DB	'<?xml ', 00H
	ORG $+1
$SG7752	DB	'version="%s" ', 00H
	ORG $+2
$SG7754	DB	'version="', 00H
	ORG $+2
$SG7755	DB	'" ', 00H
	ORG $+1
$SG7758	DB	'encoding="%s" ', 00H
	ORG $+1
$SG7760	DB	'encoding="', 00H
	ORG $+1
$SG7761	DB	'" ', 00H
	ORG $+1
$SG7764	DB	'standalone="%s" ', 00H
	ORG $+3
$SG7766	DB	'standalone="', 00H
	ORG $+3
$SG7767	DB	'" ', 00H
	ORG $+1
$SG7769	DB	'?>', 00H
	ORG $+1
$SG7771	DB	'?>', 00H
	ORG $+1
$SG7798	DB	'    ', 00H
	ORG $+3
$SG7799	DB	'<%s>', 00H
	ORG $+3
$SG7958	DB	'<', 00H
	ORG $+2
$SG7963	DB	' ', 00H
	ORG $+2
$SG7965	DB	' />', 00H
$SG7967	DB	'>', 00H
	ORG $+2
$SG7978	DB	'</', 00H
	ORG $+1
$SG7979	DB	'>', 00H
	ORG $+2
$SG7985	DB	'<![CDATA[', 00H
	ORG $+2
$SG7986	DB	']]>', 00H
$SG8000	DB	'<!--', 00H
	ORG $+3
$SG8001	DB	'-->', 00H
$SG8006	DB	'<', 00H
	ORG $+2
$SG8007	DB	'>', 00H
CONST	ENDS
_DATA	SEGMENT
?condenseWhiteSpace@TiXmlBase@@0_NA DB 01H		; TiXmlBase::condenseWhiteSpace
_DATA	ENDS
PUBLIC	?TiXmlFOpen@@YAPAU_iobuf@@PBD0@Z		; TiXmlFOpen
EXTRN	__imp__fopen_s:PROC
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_err$ = -8						; size = 4
_fp$ = -4						; size = 4
_filename$ = 8						; size = 4
_mode$ = 12						; size = 4
?TiXmlFOpen@@YAPAU_iobuf@@PBD0@Z PROC			; TiXmlFOpen

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 40   : 	#if defined(_MSC_VER) && (_MSC_VER >= 1400 )
; 41   : 		FILE* fp = 0;

	mov	DWORD PTR _fp$[ebp], 0

; 42   : 		errno_t err = fopen_s( &fp, filename, mode );

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	lea	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	DWORD PTR __imp__fopen_s
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _err$[ebp], eax

; 43   : 		if ( !err && fp )

	cmp	DWORD PTR _err$[ebp], 0
	jne	SHORT $LN1@TiXmlFOpen
	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN1@TiXmlFOpen

; 44   : 			return fp;

	mov	eax, DWORD PTR _fp$[ebp]
	jmp	SHORT $LN2@TiXmlFOpen
$LN1@TiXmlFOpen:

; 45   : 		return 0;

	xor	eax, eax
$LN2@TiXmlFOpen:

; 46   : 	#else
; 47   : 		return fopen( filename, mode );
; 48   : 	#endif
; 49   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TiXmlFOpen@@YAPAU_iobuf@@PBD0@Z ENDP			; TiXmlFOpen
_TEXT	ENDS
PUBLIC	??YTiXmlString@@QAEAAV0@D@Z			; TiXmlString::operator+=
PUBLIC	??$_snprintf_s@$0CA@@@YAHAAY0CA@DIPBDZZ		; _snprintf_s<32>
PUBLIC	?c_str@TiXmlString@@QBEPBDXZ			; TiXmlString::c_str
PUBLIC	??ATiXmlString@@QBEAADI@Z			; TiXmlString::operator[]
PUBLIC	?length@TiXmlString@@QBEIXZ			; TiXmlString::length
PUBLIC	__$ArrayPad$
PUBLIC	?EncodeString@TiXmlBase@@SAXABVTiXmlString@@PAV2@@Z ; TiXmlBase::EncodeString
EXTRN	_strlen:PROC
EXTRN	?entity@TiXmlBase@@0PAUEntity@1@A:BYTE		; TiXmlBase::entity
EXTRN	?append@TiXmlString@@QAEAAV1@PBDI@Z:PROC	; TiXmlString::append
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_buf$7036 = -44						; size = 32
__$ArrayPad$ = -12					; size = 4
_c$7015 = -5						; size = 1
_i$ = -4						; size = 4
_str$ = 8						; size = 4
_outString$ = 12					; size = 4
?EncodeString@TiXmlBase@@SAXABVTiXmlString@@PAV2@@Z PROC ; TiXmlBase::EncodeString

; 52   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 53   : 	int i=0;

	mov	DWORD PTR _i$[ebp], 0
$LN19@EncodeStri:

; 54   : 
; 55   : 	while( i<(int)str.length() )

	mov	ecx, DWORD PTR _str$[ebp]
	call	?length@TiXmlString@@QBEIXZ		; TiXmlString::length
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN20@EncodeStri

; 56   : 	{
; 57   : 		unsigned char c = (unsigned char) str[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	??ATiXmlString@@QBEAADI@Z		; TiXmlString::operator[]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$7015[ebp], cl

; 58   : 
; 59   : 		if (    c == '&' 
; 60   : 		     && i < ( (int)str.length() - 2 )
; 61   : 			 && str[i+1] == '#'
; 62   : 			 && str[i+2] == 'x' )

	movzx	edx, BYTE PTR _c$7015[ebp]
	cmp	edx, 38					; 00000026H
	jne	$LN17@EncodeStri
	mov	ecx, DWORD PTR _str$[ebp]
	call	?length@TiXmlString@@QBEIXZ		; TiXmlString::length
	sub	eax, 2
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN17@EncodeStri
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	??ATiXmlString@@QBEAADI@Z		; TiXmlString::operator[]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 35					; 00000023H
	jne	SHORT $LN17@EncodeStri
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 2
	push	edx
	mov	ecx, DWORD PTR _str$[ebp]
	call	??ATiXmlString@@QBEAADI@Z		; TiXmlString::operator[]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 120				; 00000078H
	jne	SHORT $LN17@EncodeStri
$LN16@EncodeStri:

; 63   : 		{
; 64   : 			// Hexadecimal character reference.
; 65   : 			// Pass through unchanged.
; 66   : 			// &#xA9;	-- copyright symbol, for example.
; 67   : 			//
; 68   : 			// The -1 is a bug fix from Rob Laveaux. It keeps
; 69   : 			// an overflow from happening if there is no ';'.
; 70   : 			// There are actually 2 ways to exit this loop -
; 71   : 			// while fails (error case) and break (semicolon found).
; 72   : 			// However, there is no mechanism (currently) for
; 73   : 			// this function to return an error.
; 74   : 			while ( i<(int)str.length()-1 )

	mov	ecx, DWORD PTR _str$[ebp]
	call	?length@TiXmlString@@QBEIXZ		; TiXmlString::length
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN15@EncodeStri

; 75   : 			{
; 76   : 				outString->append( str.c_str() + i, 1 );

	push	1
	mov	ecx, DWORD PTR _str$[ebp]
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outString$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 77   : 				++i;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 78   : 				if ( str[i] == ';' )

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _str$[ebp]
	call	??ATiXmlString@@QBEAADI@Z		; TiXmlString::operator[]
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 59					; 0000003bH
	jne	SHORT $LN14@EncodeStri

; 79   : 					break;

	jmp	SHORT $LN15@EncodeStri
$LN14@EncodeStri:

; 80   : 			}

	jmp	SHORT $LN16@EncodeStri
$LN15@EncodeStri:

; 81   : 		}
; 82   : 		else if ( c == '&' )

	jmp	$LN13@EncodeStri
$LN17@EncodeStri:
	movzx	ecx, BYTE PTR _c$7015[ebp]
	cmp	ecx, 38					; 00000026H
	jne	SHORT $LN12@EncodeStri

; 83   : 		{
; 84   : 			outString->append( entity[0].str, entity[0].strLength );

	mov	edx, DWORD PTR ?entity@TiXmlBase@@0PAUEntity@1@A+4
	push	edx
	mov	eax, DWORD PTR ?entity@TiXmlBase@@0PAUEntity@1@A
	push	eax
	mov	ecx, DWORD PTR _outString$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 85   : 			++i;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jmp	$LN13@EncodeStri
$LN12@EncodeStri:

; 86   : 		}
; 87   : 		else if ( c == '<' )

	movzx	edx, BYTE PTR _c$7015[ebp]
	cmp	edx, 60					; 0000003cH
	jne	SHORT $LN10@EncodeStri

; 88   : 		{
; 89   : 			outString->append( entity[1].str, entity[1].strLength );

	mov	eax, DWORD PTR ?entity@TiXmlBase@@0PAUEntity@1@A+16
	push	eax
	mov	ecx, DWORD PTR ?entity@TiXmlBase@@0PAUEntity@1@A+12
	push	ecx
	mov	ecx, DWORD PTR _outString$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 90   : 			++i;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	jmp	$LN13@EncodeStri
$LN10@EncodeStri:

; 91   : 		}
; 92   : 		else if ( c == '>' )

	movzx	eax, BYTE PTR _c$7015[ebp]
	cmp	eax, 62					; 0000003eH
	jne	SHORT $LN8@EncodeStri

; 93   : 		{
; 94   : 			outString->append( entity[2].str, entity[2].strLength );

	mov	ecx, DWORD PTR ?entity@TiXmlBase@@0PAUEntity@1@A+28
	push	ecx
	mov	edx, DWORD PTR ?entity@TiXmlBase@@0PAUEntity@1@A+24
	push	edx
	mov	ecx, DWORD PTR _outString$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 95   : 			++i;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	$LN13@EncodeStri
$LN8@EncodeStri:

; 96   : 		}
; 97   : 		else if ( c == '\"' )

	movzx	ecx, BYTE PTR _c$7015[ebp]
	cmp	ecx, 34					; 00000022H
	jne	SHORT $LN6@EncodeStri

; 98   : 		{
; 99   : 			outString->append( entity[3].str, entity[3].strLength );

	mov	edx, DWORD PTR ?entity@TiXmlBase@@0PAUEntity@1@A+40
	push	edx
	mov	eax, DWORD PTR ?entity@TiXmlBase@@0PAUEntity@1@A+36
	push	eax
	mov	ecx, DWORD PTR _outString$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 100  : 			++i;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jmp	$LN13@EncodeStri
$LN6@EncodeStri:

; 101  : 		}
; 102  : 		else if ( c == '\'' )

	movzx	edx, BYTE PTR _c$7015[ebp]
	cmp	edx, 39					; 00000027H
	jne	SHORT $LN4@EncodeStri

; 103  : 		{
; 104  : 			outString->append( entity[4].str, entity[4].strLength );

	mov	eax, DWORD PTR ?entity@TiXmlBase@@0PAUEntity@1@A+52
	push	eax
	mov	ecx, DWORD PTR ?entity@TiXmlBase@@0PAUEntity@1@A+48
	push	ecx
	mov	ecx, DWORD PTR _outString$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 105  : 			++i;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN13@EncodeStri
$LN4@EncodeStri:

; 106  : 		}
; 107  : 		else if ( c < 32 )

	movzx	eax, BYTE PTR _c$7015[ebp]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN2@EncodeStri

; 108  : 		{
; 109  : 			// Easy pass at non-alpha/numeric/symbol
; 110  : 			// Below 32 is symbolic.
; 111  : 			char buf[ 32 ];
; 112  : 			
; 113  : 			#if defined(TIXML_SNPRINTF)		
; 114  : 				TIXML_SNPRINTF( buf, sizeof(buf), "&#x%02X;", (unsigned) ( c & 0xff ) );

	movzx	ecx, BYTE PTR _c$7015[ebp]
	and	ecx, 255				; 000000ffH
	push	ecx
	push	OFFSET $SG7044
	push	32					; 00000020H
	lea	edx, DWORD PTR _buf$7036[ebp]
	push	edx
	call	??$_snprintf_s@$0CA@@@YAHAAY0CA@DIPBDZZ	; _snprintf_s<32>
	add	esp, 16					; 00000010H

; 115  : 			#else
; 116  : 				sprintf( buf, "&#x%02X;", (unsigned) ( c & 0xff ) );
; 117  : 			#endif		
; 118  : 
; 119  : 			//*ME:	warning C4267: convert 'size_t' to 'int'
; 120  : 			//*ME:	Int-Cast to make compiler happy ...
; 121  : 			outString->append( buf, (int)strlen( buf ) );

	lea	eax, DWORD PTR _buf$7036[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _buf$7036[ebp]
	push	ecx
	mov	ecx, DWORD PTR _outString$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 122  : 			++i;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 123  : 		}
; 124  : 		else

	jmp	SHORT $LN13@EncodeStri
$LN2@EncodeStri:

; 125  : 		{
; 126  : 			//char realc = (char) c;
; 127  : 			//outString->append( &realc, 1 );
; 128  : 			*outString += (char) c;	// somewhat more efficient function call.

	movzx	eax, BYTE PTR _c$7015[ebp]
	push	eax
	mov	ecx, DWORD PTR _outString$[ebp]
	call	??YTiXmlString@@QAEAAV0@D@Z		; TiXmlString::operator+=

; 129  : 			++i;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN13@EncodeStri:

; 130  : 		}
; 131  : 	}

	jmp	$LN19@EncodeStri
$LN20@EncodeStri:

; 132  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?EncodeString@TiXmlBase@@SAXABVTiXmlString@@PAV2@@Z ENDP ; TiXmlBase::EncodeString
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinystr.h
_TEXT	ENDS
;	COMDAT ??YTiXmlString@@QAEAAV0@D@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_single$ = 8						; size = 1
??YTiXmlString@@QAEAAV0@D@Z PROC			; TiXmlString::operator+=, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 		return append(&single, 1);

	push	1
	lea	eax, DWORD PTR _single$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 132  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??YTiXmlString@@QAEAAV0@D@Z ENDP			; TiXmlString::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?c_str@TiXmlString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@TiXmlString@@QBEPBDXZ PROC			; TiXmlString::c_str, COMDAT
; _this$ = ecx

; 142  : 	const char * c_str () const { return rep_->str; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@TiXmlString@@QBEPBDXZ ENDP			; TiXmlString::c_str
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?length@TiXmlString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?length@TiXmlString@@QBEIXZ PROC			; TiXmlString::length, COMDAT
; _this$ = ecx

; 148  : 	size_type length () const { return rep_->size; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	0
?length@TiXmlString@@QBEIXZ ENDP			; TiXmlString::length
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??ATiXmlString@@QBEAADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??ATiXmlString@@QBEAADI@Z PROC				; TiXmlString::operator[], COMDAT
; _this$ = ecx

; 169  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		assert( index < length() );
; 171  : 		return rep_->str[ index ];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx+8]

; 172  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??ATiXmlString@@QBEAADI@Z ENDP				; TiXmlString::operator[]
_TEXT	ENDS
PUBLIC	??1TiXmlString@@QAE@XZ				; TiXmlString::~TiXmlString
PUBLIC	??1TiXmlBase@@UAE@XZ				; TiXmlBase::~TiXmlBase
PUBLIC	??0TiXmlString@@QAE@XZ				; TiXmlString::TiXmlString
PUBLIC	??_7TiXmlNode@@6B@				; TiXmlNode::`vftable'
PUBLIC	??0TiXmlBase@@QAE@XZ				; TiXmlBase::TiXmlBase
PUBLIC	??0TiXmlNode@@IAE@W4NodeType@0@@Z		; TiXmlNode::TiXmlNode
PUBLIC	??_R4TiXmlNode@@6B@				; TiXmlNode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlNode@@@8				; TiXmlNode `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlNode@@8				; TiXmlNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlNode@@8				; TiXmlNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlNode@@8			; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@TiXmlBase@@8			; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVTiXmlBase@@@8				; TiXmlBase `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlBase@@8				; TiXmlBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlBase@@8				; TiXmlBase::`RTTI Base Class Array'
PUBLIC	?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ	; TiXmlNode::ToDocument
PUBLIC	?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ	; TiXmlNode::ToDocument
PUBLIC	?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ	; TiXmlNode::ToElement
PUBLIC	?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ	; TiXmlNode::ToElement
PUBLIC	?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ	; TiXmlNode::ToComment
PUBLIC	?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ	; TiXmlNode::ToComment
PUBLIC	?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ	; TiXmlNode::ToUnknown
PUBLIC	?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ	; TiXmlNode::ToUnknown
PUBLIC	?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ		; TiXmlNode::ToText
PUBLIC	?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ		; TiXmlNode::ToText
PUBLIC	?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ ; TiXmlNode::ToDeclaration
PUBLIC	?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ ; TiXmlNode::ToDeclaration
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ETiXmlNode@@UAEPAXI@Z:PROC			; TiXmlNode::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R2TiXmlBase@@8
; File i:\svnroot\client\ogremain\tinyxml.cpp
rdata$r	SEGMENT
??_R2TiXmlBase@@8 DD FLAT:??_R1A@?0A@EA@TiXmlBase@@8	; TiXmlBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TiXmlBase@@8
rdata$r	SEGMENT
??_R3TiXmlBase@@8 DD 00H				; TiXmlBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlBase@@@8
_DATA	SEGMENT
??_R0?AVTiXmlBase@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlBase@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlBase@@8 DD FLAT:??_R0?AVTiXmlBase@@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@TiXmlNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlNode@@8 DD FLAT:??_R0?AVTiXmlNode@@@8 ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlNode@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlNode@@8
rdata$r	SEGMENT
??_R2TiXmlNode@@8 DD FLAT:??_R1A@?0A@EA@TiXmlNode@@8	; TiXmlNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlNode@@8
rdata$r	SEGMENT
??_R3TiXmlNode@@8 DD 00H				; TiXmlNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2TiXmlNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlNode@@@8
_DATA	SEGMENT
??_R0?AVTiXmlNode@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlNode@@6B@
rdata$r	SEGMENT
??_R4TiXmlNode@@6B@ DD 00H				; TiXmlNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlNode@@@8
	DD	FLAT:??_R3TiXmlNode@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlNode@@6B@
CONST	SEGMENT
??_7TiXmlNode@@6B@ DD FLAT:??_R4TiXmlNode@@6B@		; TiXmlNode::`vftable'
	DD	FLAT:??_ETiXmlNode@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
	DD	FLAT:?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0TiXmlNode@@IAE@W4NodeType@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlNode@@IAE@W4NodeType@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TiXmlNode@@IAE@W4NodeType@0@@Z$1
__ehfuncinfo$??0TiXmlNode@@IAE@W4NodeType@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0TiXmlNode@@IAE@W4NodeType@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__type$ = 8						; size = 4
??0TiXmlNode@@IAE@W4NodeType@0@@Z PROC			; TiXmlNode::TiXmlNode
; _this$ = ecx

; 136  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlNode@@IAE@W4NodeType@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlBase@@QAE@XZ			; TiXmlBase::TiXmlBase
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlNode@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 137  : 	parent = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 138  : 	type = _type;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __type$[ebp]
	mov	DWORD PTR [edx+20], eax

; 139  : 	firstChild = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 140  : 	lastChild = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0

; 141  : 	prev = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 142  : 	next = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 143  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0TiXmlNode@@IAE@W4NodeType@0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlBase@@UAE@XZ			; TiXmlBase::~TiXmlBase
__unwindfunclet$??0TiXmlNode@@IAE@W4NodeType@0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??0TiXmlNode@@IAE@W4NodeType@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlNode@@IAE@W4NodeType@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlNode@@IAE@W4NodeType@0@@Z ENDP			; TiXmlNode::TiXmlNode
EXTRN	?nullrep_@TiXmlString@@0URep@1@A:BYTE		; TiXmlString::nullrep_
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinystr.h
;	COMDAT ??0TiXmlString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TiXmlString@@QAE@XZ PROC				; TiXmlString::TiXmlString, COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ?nullrep_@TiXmlString@@0URep@1@A ; TiXmlString::nullrep_

; 80   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0TiXmlString@@QAE@XZ ENDP				; TiXmlString::TiXmlString
_TEXT	ENDS
PUBLIC	?quit@TiXmlString@@AAEXXZ			; TiXmlString::quit
; Function compile flags: /Odtp
;	COMDAT ??1TiXmlString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1TiXmlString@@QAE@XZ PROC				; TiXmlString::~TiXmlString, COMDAT
; _this$ = ecx

; 105  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 		quit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?quit@TiXmlString@@AAEXXZ		; TiXmlString::quit

; 107  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1TiXmlString@@QAE@XZ ENDP				; TiXmlString::~TiXmlString
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ?quit@TiXmlString@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T8344 = -4						; size = 4
?quit@TiXmlString@@AAEXXZ PROC				; TiXmlString::quit, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		if (rep_ != &nullrep_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?nullrep_@TiXmlString@@0URep@1@A ; TiXmlString::nullrep_
	je	SHORT $LN2@quit

; 256  : 		{
; 257  : 			// The rep_ is really an array of ints. (see the allocator, above).
; 258  : 			// Cast it back before delete, so the compiler won't incorrectly call destructors.
; 259  : 			delete [] ( reinterpret_cast<int*>( rep_ ) );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T8344[ebp], edx
	mov	eax, DWORD PTR $T8344[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@quit:

; 260  : 		}
; 261  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?quit@TiXmlString@@AAEXXZ ENDP				; TiXmlString::quit
_TEXT	ENDS
PUBLIC	??0TiXmlCursor@@QAE@XZ				; TiXmlCursor::TiXmlCursor
PUBLIC	??_7TiXmlBase@@6B@				; TiXmlBase::`vftable'
PUBLIC	??_R4TiXmlBase@@6B@				; TiXmlBase::`RTTI Complete Object Locator'
EXTRN	??_ETiXmlBase@@UAEPAXI@Z:PROC			; TiXmlBase::`vector deleting destructor'
;	COMDAT ??_R4TiXmlBase@@6B@
; File i:\svnroot\client\ogremain\tinyxml.h
rdata$r	SEGMENT
??_R4TiXmlBase@@6B@ DD 00H				; TiXmlBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlBase@@@8
	DD	FLAT:??_R3TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlBase@@6B@
CONST	SEGMENT
??_7TiXmlBase@@6B@ DD FLAT:??_R4TiXmlBase@@6B@		; TiXmlBase::`vftable'
	DD	FLAT:??_ETiXmlBase@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0TiXmlBase@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TiXmlBase@@QAE@XZ PROC				; TiXmlBase::TiXmlBase, COMDAT
; _this$ = ecx

; 202  : 	TiXmlBase()	:	userData(0)		{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlBase@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0TiXmlCursor@@QAE@XZ			; TiXmlCursor::TiXmlCursor
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0TiXmlBase@@QAE@XZ ENDP				; TiXmlBase::TiXmlBase
_TEXT	ENDS
PUBLIC	?Clear@TiXmlCursor@@QAEXXZ			; TiXmlCursor::Clear
; Function compile flags: /Odtp
;	COMDAT ??0TiXmlCursor@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TiXmlCursor@@QAE@XZ PROC				; TiXmlCursor::TiXmlCursor, COMDAT
; _this$ = ecx

; 103  : 	TiXmlCursor()		{ Clear(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@TiXmlCursor@@QAEXXZ		; TiXmlCursor::Clear
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0TiXmlCursor@@QAE@XZ ENDP				; TiXmlCursor::TiXmlCursor
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Clear@TiXmlCursor@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@TiXmlCursor@@QAEXXZ PROC				; TiXmlCursor::Clear, COMDAT
; _this$ = ecx

; 104  : 	void Clear()		{ row = col = -1; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], -1
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@TiXmlCursor@@QAEXXZ ENDP				; TiXmlCursor::Clear
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1TiXmlBase@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1TiXmlBase@@UAE@XZ PROC				; TiXmlBase::~TiXmlBase, COMDAT
; _this$ = ecx

; 203  : 	virtual ~TiXmlBase()			{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlBase@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1TiXmlBase@@UAE@XZ ENDP				; TiXmlBase::~TiXmlBase
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_GTiXmlBase@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlBase@@UAEPAXI@Z PROC				; TiXmlBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlBase@@UAE@XZ			; TiXmlBase::~TiXmlBase
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlBase@@UAEPAXI@Z ENDP				; TiXmlBase::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ PROC	; TiXmlNode::ToDocument, COMDAT
; _this$ = ecx

; 698  : 	virtual const TiXmlDocument*    ToDocument()    const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ ENDP	; TiXmlNode::ToDocument
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ PROC	; TiXmlNode::ToElement, COMDAT
; _this$ = ecx

; 699  : 	virtual const TiXmlElement*     ToElement()     const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ ENDP	; TiXmlNode::ToElement
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ PROC	; TiXmlNode::ToComment, COMDAT
; _this$ = ecx

; 700  : 	virtual const TiXmlComment*     ToComment()     const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ ENDP	; TiXmlNode::ToComment
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ PROC	; TiXmlNode::ToUnknown, COMDAT
; _this$ = ecx

; 701  : 	virtual const TiXmlUnknown*     ToUnknown()     const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ ENDP	; TiXmlNode::ToUnknown
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ PROC		; TiXmlNode::ToText, COMDAT
; _this$ = ecx

; 702  : 	virtual const TiXmlText*        ToText()        const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ ENDP		; TiXmlNode::ToText
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ PROC ; TiXmlNode::ToDeclaration, COMDAT
; _this$ = ecx

; 703  : 	virtual const TiXmlDeclaration* ToDeclaration() const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ ENDP ; TiXmlNode::ToDeclaration
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ PROC	; TiXmlNode::ToDocument, COMDAT
; _this$ = ecx

; 705  : 	virtual TiXmlDocument*          ToDocument()    { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ ENDP	; TiXmlNode::ToDocument
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ PROC	; TiXmlNode::ToElement, COMDAT
; _this$ = ecx

; 706  : 	virtual TiXmlElement*           ToElement()	    { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ ENDP	; TiXmlNode::ToElement
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ PROC	; TiXmlNode::ToComment, COMDAT
; _this$ = ecx

; 707  : 	virtual TiXmlComment*           ToComment()     { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ ENDP	; TiXmlNode::ToComment
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ PROC	; TiXmlNode::ToUnknown, COMDAT
; _this$ = ecx

; 708  : 	virtual TiXmlUnknown*           ToUnknown()	    { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ ENDP	; TiXmlNode::ToUnknown
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ PROC		; TiXmlNode::ToText, COMDAT
; _this$ = ecx

; 709  : 	virtual TiXmlText*	            ToText()        { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ ENDP		; TiXmlNode::ToText
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ PROC ; TiXmlNode::ToDeclaration, COMDAT
; _this$ = ecx

; 710  : 	virtual TiXmlDeclaration*       ToDeclaration() { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ ENDP ; TiXmlNode::ToDeclaration
_TEXT	ENDS
PUBLIC	??1TiXmlNode@@UAE@XZ				; TiXmlNode::~TiXmlNode
; Function compile flags: /Odtp
;	COMDAT ??_GTiXmlNode@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlNode@@UAEPAXI@Z PROC				; TiXmlNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlNode@@UAEPAXI@Z ENDP				; TiXmlNode::`scalar deleting destructor'
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$??1TiXmlNode@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TiXmlNode@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1TiXmlNode@@UAE@XZ$1
__ehfuncinfo$??1TiXmlNode@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1TiXmlNode@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv89 = -36						; size = 4
_this$ = -32						; size = 4
$T8384 = -28						; size = 4
$T8383 = -24						; size = 4
_node$ = -20						; size = 4
_temp$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1TiXmlNode@@UAE@XZ PROC				; TiXmlNode::~TiXmlNode
; _this$ = ecx

; 147  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TiXmlNode@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlNode@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 148  : 	TiXmlNode* node = firstChild;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _node$[ebp], edx

; 149  : 	TiXmlNode* temp = 0;

	mov	DWORD PTR _temp$[ebp], 0
$LN2@TiXmlNode:

; 150  : 
; 151  : 	while ( node )

	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN3@TiXmlNode

; 152  : 	{
; 153  : 		temp = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR _temp$[ebp], eax

; 154  : 		node = node->next;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _node$[ebp], edx

; 155  : 		delete temp;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR $T8384[ebp], eax
	mov	ecx, DWORD PTR $T8384[ebp]
	mov	DWORD PTR $T8383[ebp], ecx
	cmp	DWORD PTR $T8383[ebp], 0
	je	SHORT $LN5@TiXmlNode
	push	1
	mov	edx, DWORD PTR $T8383[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T8383[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN6@TiXmlNode
$LN5@TiXmlNode:
	mov	DWORD PTR tv89[ebp], 0
$LN6@TiXmlNode:

; 156  : 	}	

	jmp	SHORT $LN2@TiXmlNode
$LN3@TiXmlNode:

; 157  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlBase@@UAE@XZ			; TiXmlBase::~TiXmlBase
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1TiXmlNode@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlBase@@UAE@XZ			; TiXmlBase::~TiXmlBase
__unwindfunclet$??1TiXmlNode@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??1TiXmlNode@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TiXmlNode@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TiXmlNode@@UAE@XZ ENDP				; TiXmlNode::~TiXmlNode
PUBLIC	?SetValue@TiXmlNode@@QAEXPBD@Z			; TiXmlNode::SetValue
PUBLIC	?CopyTo@TiXmlNode@@IBEXPAV1@@Z			; TiXmlNode::CopyTo
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_target$ = 8						; size = 4
?CopyTo@TiXmlNode@@IBEXPAV1@@Z PROC			; TiXmlNode::CopyTo
; _this$ = ecx

; 161  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 	target->SetValue (value.c_str() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	call	?SetValue@TiXmlNode@@QAEXPBD@Z		; TiXmlNode::SetValue

; 163  : 	target->userData = userData; 

	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx

; 164  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CopyTo@TiXmlNode@@IBEXPAV1@@Z ENDP			; TiXmlNode::CopyTo
_TEXT	ENDS
PUBLIC	??4TiXmlString@@QAEAAV0@PBD@Z			; TiXmlString::operator=
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
;	COMDAT ?SetValue@TiXmlNode@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__value$ = 8						; size = 4
?SetValue@TiXmlNode@@QAEXPBD@Z PROC			; TiXmlNode::SetValue, COMDAT
; _this$ = ecx

; 509  : 	void SetValue(const char * _value) { value = _value;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=
	mov	esp, ebp
	pop	ebp
	ret	4
?SetValue@TiXmlNode@@QAEXPBD@Z ENDP			; TiXmlNode::SetValue
_TEXT	ENDS
EXTRN	?assign@TiXmlString@@QAEAAV1@PBDI@Z:PROC	; TiXmlString::assign
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinystr.h
;	COMDAT ??4TiXmlString@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_copy$ = 8						; size = 4
??4TiXmlString@@QAEAAV0@PBD@Z PROC			; TiXmlString::operator=, COMDAT
; _this$ = ecx

; 111  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return assign( copy, (size_type)strlen(copy));

	mov	eax, DWORD PTR _copy$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _copy$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::assign

; 113  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??4TiXmlString@@QAEAAV0@PBD@Z ENDP			; TiXmlString::operator=
_TEXT	ENDS
PUBLIC	?Clear@TiXmlNode@@QAEXXZ			; TiXmlNode::Clear
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
tv77 = -24						; size = 4
_this$ = -20						; size = 4
$T8400 = -16						; size = 4
$T8399 = -12						; size = 4
_node$ = -8						; size = 4
_temp$ = -4						; size = 4
?Clear@TiXmlNode@@QAEXXZ PROC				; TiXmlNode::Clear
; _this$ = ecx

; 168  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 	TiXmlNode* node = firstChild;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _node$[ebp], ecx

; 170  : 	TiXmlNode* temp = 0;

	mov	DWORD PTR _temp$[ebp], 0
$LN2@Clear:

; 171  : 
; 172  : 	while ( node )

	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN1@Clear

; 173  : 	{
; 174  : 		temp = node;

	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR _temp$[ebp], edx

; 175  : 		node = node->next;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _node$[ebp], ecx

; 176  : 		delete temp;

	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR $T8400[ebp], edx
	mov	eax, DWORD PTR $T8400[ebp]
	mov	DWORD PTR $T8399[ebp], eax
	cmp	DWORD PTR $T8399[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T8399[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T8399[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv77[ebp], 0
$LN6@Clear:

; 177  : 	}	

	jmp	SHORT $LN2@Clear
$LN1@Clear:

; 178  : 
; 179  : 	firstChild = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 180  : 	lastChild = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0

; 181  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@TiXmlNode@@QAEXXZ ENDP				; TiXmlNode::Clear
_TEXT	ENDS
PUBLIC	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ	; TiXmlNode::GetDocument
PUBLIC	?Type@TiXmlNode@@QBEHXZ				; TiXmlNode::Type
PUBLIC	?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z	; TiXmlNode::LinkEndChild
EXTRN	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:PROC ; TiXmlDocument::SetError
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = -16						; size = 4
_this$ = -12						; size = 4
$T8405 = -8						; size = 4
$T8404 = -4						; size = 4
_node$ = 8						; size = 4
?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z PROC		; TiXmlNode::LinkEndChild
; _this$ = ecx

; 185  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 186  : 	assert( node->parent == 0 || node->parent == this );
; 187  : 	assert( node->GetDocument() == 0 || node->GetDocument() == this->GetDocument() );
; 188  : 
; 189  : 	if ( node->Type() == TiXmlNode::DOCUMENT )

	mov	ecx, DWORD PTR _node$[ebp]
	call	?Type@TiXmlNode@@QBEHXZ			; TiXmlNode::Type
	test	eax, eax
	jne	SHORT $LN4@LinkEndChi

; 190  : 	{
; 191  : 		delete node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR $T8405[ebp], eax
	mov	ecx, DWORD PTR $T8405[ebp]
	mov	DWORD PTR $T8404[ebp], ecx
	cmp	DWORD PTR $T8404[ebp], 0
	je	SHORT $LN7@LinkEndChi
	push	1
	mov	edx, DWORD PTR $T8404[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T8404[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN8@LinkEndChi
$LN7@LinkEndChi:
	mov	DWORD PTR tv77[ebp], 0
$LN8@LinkEndChi:

; 192  : 		if ( GetDocument() ) GetDocument()->SetError( TIXML_ERROR_DOCUMENT_TOP_ONLY, 0, 0, TIXML_ENCODING_UNKNOWN );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	test	eax, eax
	je	SHORT $LN3@LinkEndChi
	push	0
	push	0
	push	0
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	mov	ecx, eax
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN3@LinkEndChi:

; 193  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN5@LinkEndChi
$LN4@LinkEndChi:

; 194  : 	}
; 195  : 
; 196  : 	node->parent = this;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 197  : 
; 198  : 	node->prev = lastChild;

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+36], ecx

; 199  : 	node->next = 0;

	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+40], 0

; 200  : 
; 201  : 	if ( lastChild )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@LinkEndChi

; 202  : 		lastChild->next = node;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+40], eax

; 203  : 	else

	jmp	SHORT $LN1@LinkEndChi
$LN2@LinkEndChi:

; 204  : 		firstChild = node;			// it was an empty list.

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+24], edx
$LN1@LinkEndChi:

; 205  : 
; 206  : 	lastChild = node;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 207  : 	return node;

	mov	eax, DWORD PTR _node$[ebp]
$LN5@LinkEndChi:

; 208  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ENDP		; TiXmlNode::LinkEndChild
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
_TEXT	ENDS
;	COMDAT ?Type@TiXmlNode@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@TiXmlNode@@QBEHXZ PROC				; TiXmlNode::Type, COMDAT
; _this$ = ecx

; 685  : 	int Type() const	{ return type; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@TiXmlNode@@QBEHXZ ENDP				; TiXmlNode::Type
_TEXT	ENDS
PUBLIC	?GetDocument@TiXmlNode@@QBEPBVTiXmlDocument@@XZ	; TiXmlNode::GetDocument
; Function compile flags: /Odtp
;	COMDAT ?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ PROC	; TiXmlNode::GetDocument, COMDAT
; _this$ = ecx

; 691  : 	TiXmlDocument* GetDocument() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 692  : 		return const_cast< TiXmlDocument* >( (const_cast< const TiXmlNode* >(this))->GetDocument() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QBEPBVTiXmlDocument@@XZ ; TiXmlNode::GetDocument

; 693  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ENDP	; TiXmlNode::GetDocument
_TEXT	ENDS
PUBLIC	?InsertEndChild@TiXmlNode@@QAEPAV1@ABV1@@Z	; TiXmlNode::InsertEndChild
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$ = -4						; size = 4
_addThis$ = 8						; size = 4
?InsertEndChild@TiXmlNode@@QAEPAV1@ABV1@@Z PROC		; TiXmlNode::InsertEndChild
; _this$ = ecx

; 212  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 213  : 	if ( addThis.Type() == TiXmlNode::DOCUMENT )

	mov	ecx, DWORD PTR _addThis$[ebp]
	call	?Type@TiXmlNode@@QBEHXZ			; TiXmlNode::Type
	test	eax, eax
	jne	SHORT $LN3@InsertEndC

; 214  : 	{
; 215  : 		if ( GetDocument() ) GetDocument()->SetError( TIXML_ERROR_DOCUMENT_TOP_ONLY, 0, 0, TIXML_ENCODING_UNKNOWN );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	test	eax, eax
	je	SHORT $LN2@InsertEndC
	push	0
	push	0
	push	0
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	mov	ecx, eax
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN2@InsertEndC:

; 216  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@InsertEndC
$LN3@InsertEndC:

; 217  : 	}
; 218  : 	TiXmlNode* node = addThis.Clone();

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _addThis$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	mov	DWORD PTR _node$[ebp], eax

; 219  : 	if ( !node )

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN1@InsertEndC

; 220  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@InsertEndC
$LN1@InsertEndC:

; 221  : 
; 222  : 	return LinkEndChild( node );

	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild
$LN4@InsertEndC:

; 223  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?InsertEndChild@TiXmlNode@@QAEPAV1@ABV1@@Z ENDP		; TiXmlNode::InsertEndChild
_TEXT	ENDS
PUBLIC	?InsertBeforeChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z ; TiXmlNode::InsertBeforeChild
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$ = -4						; size = 4
_beforeThis$ = 8					; size = 4
_addThis$ = 12						; size = 4
?InsertBeforeChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z PROC	; TiXmlNode::InsertBeforeChild
; _this$ = ecx

; 227  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 228  : 	if ( !beforeThis || beforeThis->parent != this ) {

	cmp	DWORD PTR _beforeThis$[ebp], 0
	je	SHORT $LN6@InsertBefo
	mov	eax, DWORD PTR _beforeThis$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN7@InsertBefo
$LN6@InsertBefo:

; 229  : 		return 0;

	xor	eax, eax
	jmp	$LN8@InsertBefo
$LN7@InsertBefo:

; 230  : 	}
; 231  : 	if ( addThis.Type() == TiXmlNode::DOCUMENT )

	mov	ecx, DWORD PTR _addThis$[ebp]
	call	?Type@TiXmlNode@@QBEHXZ			; TiXmlNode::Type
	test	eax, eax
	jne	SHORT $LN5@InsertBefo

; 232  : 	{
; 233  : 		if ( GetDocument() ) GetDocument()->SetError( TIXML_ERROR_DOCUMENT_TOP_ONLY, 0, 0, TIXML_ENCODING_UNKNOWN );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	test	eax, eax
	je	SHORT $LN4@InsertBefo
	push	0
	push	0
	push	0
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	mov	ecx, eax
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN4@InsertBefo:

; 234  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN8@InsertBefo
$LN5@InsertBefo:

; 235  : 	}
; 236  : 
; 237  : 	TiXmlNode* node = addThis.Clone();

	mov	edx, DWORD PTR _addThis$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _addThis$[ebp]
	mov	edx, DWORD PTR [eax+60]
	call	edx
	mov	DWORD PTR _node$[ebp], eax

; 238  : 	if ( !node )

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN3@InsertBefo

; 239  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN8@InsertBefo
$LN3@InsertBefo:

; 240  : 	node->parent = this;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 241  : 
; 242  : 	node->next = beforeThis;

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _beforeThis$[ebp]
	mov	DWORD PTR [edx+40], eax

; 243  : 	node->prev = beforeThis->prev;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _beforeThis$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax

; 244  : 	if ( beforeThis->prev )

	mov	ecx, DWORD PTR _beforeThis$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN2@InsertBefo

; 245  : 	{
; 246  : 		beforeThis->prev->next = node;

	mov	edx, DWORD PTR _beforeThis$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+40], ecx

; 247  : 	}
; 248  : 	else

	jmp	SHORT $LN1@InsertBefo
$LN2@InsertBefo:

; 249  : 	{
; 250  : 		assert( firstChild == beforeThis );
; 251  : 		firstChild = node;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+24], eax
$LN1@InsertBefo:

; 252  : 	}
; 253  : 	beforeThis->prev = node;

	mov	ecx, DWORD PTR _beforeThis$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+36], edx

; 254  : 	return node;

	mov	eax, DWORD PTR _node$[ebp]
$LN8@InsertBefo:

; 255  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?InsertBeforeChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z ENDP	; TiXmlNode::InsertBeforeChild
_TEXT	ENDS
PUBLIC	?InsertAfterChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z ; TiXmlNode::InsertAfterChild
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$ = -4						; size = 4
_afterThis$ = 8						; size = 4
_addThis$ = 12						; size = 4
?InsertAfterChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z PROC	; TiXmlNode::InsertAfterChild
; _this$ = ecx

; 259  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 260  : 	if ( !afterThis || afterThis->parent != this ) {

	cmp	DWORD PTR _afterThis$[ebp], 0
	je	SHORT $LN6@InsertAfte
	mov	eax, DWORD PTR _afterThis$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN7@InsertAfte
$LN6@InsertAfte:

; 261  : 		return 0;

	xor	eax, eax
	jmp	$LN8@InsertAfte
$LN7@InsertAfte:

; 262  : 	}
; 263  : 	if ( addThis.Type() == TiXmlNode::DOCUMENT )

	mov	ecx, DWORD PTR _addThis$[ebp]
	call	?Type@TiXmlNode@@QBEHXZ			; TiXmlNode::Type
	test	eax, eax
	jne	SHORT $LN5@InsertAfte

; 264  : 	{
; 265  : 		if ( GetDocument() ) GetDocument()->SetError( TIXML_ERROR_DOCUMENT_TOP_ONLY, 0, 0, TIXML_ENCODING_UNKNOWN );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	test	eax, eax
	je	SHORT $LN4@InsertAfte
	push	0
	push	0
	push	0
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	mov	ecx, eax
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN4@InsertAfte:

; 266  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN8@InsertAfte
$LN5@InsertAfte:

; 267  : 	}
; 268  : 
; 269  : 	TiXmlNode* node = addThis.Clone();

	mov	edx, DWORD PTR _addThis$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _addThis$[ebp]
	mov	edx, DWORD PTR [eax+60]
	call	edx
	mov	DWORD PTR _node$[ebp], eax

; 270  : 	if ( !node )

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN3@InsertAfte

; 271  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN8@InsertAfte
$LN3@InsertAfte:

; 272  : 	node->parent = this;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 273  : 
; 274  : 	node->prev = afterThis;

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _afterThis$[ebp]
	mov	DWORD PTR [edx+36], eax

; 275  : 	node->next = afterThis->next;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _afterThis$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax

; 276  : 	if ( afterThis->next )

	mov	ecx, DWORD PTR _afterThis$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN2@InsertAfte

; 277  : 	{
; 278  : 		afterThis->next->prev = node;

	mov	edx, DWORD PTR _afterThis$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 279  : 	}
; 280  : 	else

	jmp	SHORT $LN1@InsertAfte
$LN2@InsertAfte:

; 281  : 	{
; 282  : 		assert( lastChild == afterThis );
; 283  : 		lastChild = node;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+28], eax
$LN1@InsertAfte:

; 284  : 	}
; 285  : 	afterThis->next = node;

	mov	ecx, DWORD PTR _afterThis$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+40], edx

; 286  : 	return node;

	mov	eax, DWORD PTR _node$[ebp]
$LN8@InsertAfte:

; 287  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?InsertAfterChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z ENDP	; TiXmlNode::InsertAfterChild
_TEXT	ENDS
PUBLIC	?ReplaceChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z	; TiXmlNode::ReplaceChild
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv95 = -20						; size = 4
_this$ = -16						; size = 4
$T8417 = -12						; size = 4
$T8416 = -8						; size = 4
_node$ = -4						; size = 4
_replaceThis$ = 8					; size = 4
_withThis$ = 12						; size = 4
?ReplaceChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z PROC	; TiXmlNode::ReplaceChild
; _this$ = ecx

; 291  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 	if ( replaceThis->parent != this )

	mov	eax, DWORD PTR _replaceThis$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN6@ReplaceChi

; 293  : 		return 0;

	xor	eax, eax
	jmp	$LN7@ReplaceChi
$LN6@ReplaceChi:

; 294  : 
; 295  : 	TiXmlNode* node = withThis.Clone();

	mov	edx, DWORD PTR _withThis$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _withThis$[ebp]
	mov	edx, DWORD PTR [eax+60]
	call	edx
	mov	DWORD PTR _node$[ebp], eax

; 296  : 	if ( !node )

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN5@ReplaceChi

; 297  : 		return 0;

	xor	eax, eax
	jmp	$LN7@ReplaceChi
$LN5@ReplaceChi:

; 298  : 
; 299  : 	node->next = replaceThis->next;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _replaceThis$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx

; 300  : 	node->prev = replaceThis->prev;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _replaceThis$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx

; 301  : 
; 302  : 	if ( replaceThis->next )

	mov	eax, DWORD PTR _replaceThis$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN4@ReplaceChi

; 303  : 		replaceThis->next->prev = node;

	mov	ecx, DWORD PTR _replaceThis$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+36], eax

; 304  : 	else

	jmp	SHORT $LN3@ReplaceChi
$LN4@ReplaceChi:

; 305  : 		lastChild = node;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+28], edx
$LN3@ReplaceChi:

; 306  : 
; 307  : 	if ( replaceThis->prev )

	mov	eax, DWORD PTR _replaceThis$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN2@ReplaceChi

; 308  : 		replaceThis->prev->next = node;

	mov	ecx, DWORD PTR _replaceThis$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+40], eax

; 309  : 	else

	jmp	SHORT $LN1@ReplaceChi
$LN2@ReplaceChi:

; 310  : 		firstChild = node;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+24], edx
$LN1@ReplaceChi:

; 311  : 
; 312  : 	delete replaceThis;

	mov	eax, DWORD PTR _replaceThis$[ebp]
	mov	DWORD PTR $T8417[ebp], eax
	mov	ecx, DWORD PTR $T8417[ebp]
	mov	DWORD PTR $T8416[ebp], ecx
	cmp	DWORD PTR $T8416[ebp], 0
	je	SHORT $LN9@ReplaceChi
	push	1
	mov	edx, DWORD PTR $T8416[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T8416[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN10@ReplaceChi
$LN9@ReplaceChi:
	mov	DWORD PTR tv95[ebp], 0
$LN10@ReplaceChi:

; 313  : 	node->parent = this;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 314  : 	return node;

	mov	eax, DWORD PTR _node$[ebp]
$LN7@ReplaceChi:

; 315  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ReplaceChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z ENDP	; TiXmlNode::ReplaceChild
_TEXT	ENDS
PUBLIC	?RemoveChild@TiXmlNode@@QAE_NPAV1@@Z		; TiXmlNode::RemoveChild
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv90 = -16						; size = 4
_this$ = -12						; size = 4
$T8422 = -8						; size = 4
$T8421 = -4						; size = 4
_removeThis$ = 8					; size = 4
?RemoveChild@TiXmlNode@@QAE_NPAV1@@Z PROC		; TiXmlNode::RemoveChild
; _this$ = ecx

; 319  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 320  : 	if ( removeThis->parent != this )

	mov	eax, DWORD PTR _removeThis$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN5@RemoveChil

; 321  : 	{	
; 322  : 		assert( 0 );
; 323  : 		return false;

	xor	al, al
	jmp	SHORT $LN6@RemoveChil
$LN5@RemoveChil:

; 324  : 	}
; 325  : 
; 326  : 	if ( removeThis->next )

	mov	edx, DWORD PTR _removeThis$[ebp]
	cmp	DWORD PTR [edx+40], 0
	je	SHORT $LN4@RemoveChil

; 327  : 		removeThis->next->prev = removeThis->prev;

	mov	eax, DWORD PTR _removeThis$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _removeThis$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax

; 328  : 	else

	jmp	SHORT $LN3@RemoveChil
$LN4@RemoveChil:

; 329  : 		lastChild = removeThis->prev;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _removeThis$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+28], eax
$LN3@RemoveChil:

; 330  : 
; 331  : 	if ( removeThis->prev )

	mov	ecx, DWORD PTR _removeThis$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN2@RemoveChil

; 332  : 		removeThis->prev->next = removeThis->next;

	mov	edx, DWORD PTR _removeThis$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _removeThis$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx

; 333  : 	else

	jmp	SHORT $LN1@RemoveChil
$LN2@RemoveChil:

; 334  : 		firstChild = removeThis->next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _removeThis$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+24], edx
$LN1@RemoveChil:

; 335  : 
; 336  : 	delete removeThis;

	mov	eax, DWORD PTR _removeThis$[ebp]
	mov	DWORD PTR $T8422[ebp], eax
	mov	ecx, DWORD PTR $T8422[ebp]
	mov	DWORD PTR $T8421[ebp], ecx
	cmp	DWORD PTR $T8421[ebp], 0
	je	SHORT $LN8@RemoveChil
	push	1
	mov	edx, DWORD PTR $T8421[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T8421[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN9@RemoveChil
$LN8@RemoveChil:
	mov	DWORD PTR tv90[ebp], 0
$LN9@RemoveChil:

; 337  : 	return true;

	mov	al, 1
$LN6@RemoveChil:

; 338  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveChild@TiXmlNode@@QAE_NPAV1@@Z ENDP		; TiXmlNode::RemoveChild
_TEXT	ENDS
PUBLIC	?Value@TiXmlNode@@QBEPBDXZ			; TiXmlNode::Value
PUBLIC	?FirstChild@TiXmlNode@@QBEPBV1@PBD@Z		; TiXmlNode::FirstChild
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$ = -4						; size = 4
__value$ = 8						; size = 4
?FirstChild@TiXmlNode@@QBEPBV1@PBD@Z PROC		; TiXmlNode::FirstChild
; _this$ = ecx

; 341  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 342  : 	const TiXmlNode* node;
; 343  : 	for ( node = firstChild; node; node = node->next )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _node$[ebp], ecx
	jmp	SHORT $LN4@FirstChild
$LN3@FirstChild:
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _node$[ebp], eax
$LN4@FirstChild:
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN2@FirstChild

; 344  : 	{
; 345  : 		if ( strcmp( node->Value(), _value ) == 0 )

	mov	ecx, DWORD PTR __value$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _node$[ebp]
	call	?Value@TiXmlNode@@QBEPBDXZ		; TiXmlNode::Value
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@FirstChild

; 346  : 			return node;

	mov	eax, DWORD PTR _node$[ebp]
	jmp	SHORT $LN5@FirstChild
$LN1@FirstChild:

; 347  : 	}

	jmp	SHORT $LN3@FirstChild
$LN2@FirstChild:

; 348  : 	return 0;

	xor	eax, eax
$LN5@FirstChild:

; 349  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FirstChild@TiXmlNode@@QBEPBV1@PBD@Z ENDP		; TiXmlNode::FirstChild
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
_TEXT	ENDS
;	COMDAT ?Value@TiXmlNode@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Value@TiXmlNode@@QBEPBDXZ PROC				; TiXmlNode::Value, COMDAT
; _this$ = ecx

; 488  : 	const char *Value() const { return value.c_str (); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	mov	esp, ebp
	pop	ebp
	ret	0
?Value@TiXmlNode@@QBEPBDXZ ENDP				; TiXmlNode::Value
_TEXT	ENDS
PUBLIC	?LastChild@TiXmlNode@@QBEPBV1@PBD@Z		; TiXmlNode::LastChild
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$ = -4						; size = 4
__value$ = 8						; size = 4
?LastChild@TiXmlNode@@QBEPBV1@PBD@Z PROC		; TiXmlNode::LastChild
; _this$ = ecx

; 353  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 354  : 	const TiXmlNode* node;
; 355  : 	for ( node = lastChild; node; node = node->prev )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _node$[ebp], ecx
	jmp	SHORT $LN4@LastChild
$LN3@LastChild:
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _node$[ebp], eax
$LN4@LastChild:
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN2@LastChild

; 356  : 	{
; 357  : 		if ( strcmp( node->Value(), _value ) == 0 )

	mov	ecx, DWORD PTR __value$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _node$[ebp]
	call	?Value@TiXmlNode@@QBEPBDXZ		; TiXmlNode::Value
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@LastChild

; 358  : 			return node;

	mov	eax, DWORD PTR _node$[ebp]
	jmp	SHORT $LN5@LastChild
$LN1@LastChild:

; 359  : 	}

	jmp	SHORT $LN3@LastChild
$LN2@LastChild:

; 360  : 	return 0;

	xor	eax, eax
$LN5@LastChild:

; 361  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LastChild@TiXmlNode@@QBEPBV1@PBD@Z ENDP		; TiXmlNode::LastChild
_TEXT	ENDS
PUBLIC	?NextSibling@TiXmlNode@@QBEPBV1@XZ		; TiXmlNode::NextSibling
PUBLIC	?FirstChild@TiXmlNode@@QBEPBV1@XZ		; TiXmlNode::FirstChild
PUBLIC	?IterateChildren@TiXmlNode@@QBEPBV1@PBV1@@Z	; TiXmlNode::IterateChildren
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_previous$ = 8						; size = 4
?IterateChildren@TiXmlNode@@QBEPBV1@PBV1@@Z PROC	; TiXmlNode::IterateChildren
; _this$ = ecx

; 365  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 366  : 	if ( !previous )

	cmp	DWORD PTR _previous$[ebp], 0
	jne	SHORT $LN2@IterateChi

; 367  : 	{
; 368  : 		return FirstChild();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::FirstChild
	jmp	SHORT $LN3@IterateChi

; 369  : 	}
; 370  : 	else

	jmp	SHORT $LN3@IterateChi
$LN2@IterateChi:

; 371  : 	{
; 372  : 		assert( previous->parent == this );
; 373  : 		return previous->NextSibling();

	mov	ecx, DWORD PTR _previous$[ebp]
	call	?NextSibling@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::NextSibling
$LN3@IterateChi:

; 374  : 	}
; 375  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IterateChildren@TiXmlNode@@QBEPBV1@PBV1@@Z ENDP	; TiXmlNode::IterateChildren
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
_TEXT	ENDS
;	COMDAT ?FirstChild@TiXmlNode@@QBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FirstChild@TiXmlNode@@QBEPBV1@XZ PROC			; TiXmlNode::FirstChild, COMDAT
; _this$ = ecx

; 523  : 	const TiXmlNode* FirstChild()	const		{ return firstChild; }	///< The first child of this node. Will be null if there are no children.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?FirstChild@TiXmlNode@@QBEPBV1@XZ ENDP			; TiXmlNode::FirstChild
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?NextSibling@TiXmlNode@@QBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NextSibling@TiXmlNode@@QBEPBV1@XZ PROC			; TiXmlNode::NextSibling, COMDAT
; _this$ = ecx

; 632  : 	const TiXmlNode* NextSibling() const				{ return next; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?NextSibling@TiXmlNode@@QBEPBV1@XZ ENDP			; TiXmlNode::NextSibling
_TEXT	ENDS
PUBLIC	?NextSibling@TiXmlNode@@QBEPBV1@PBD@Z		; TiXmlNode::NextSibling
PUBLIC	?IterateChildren@TiXmlNode@@QBEPBV1@PBDPBV1@@Z	; TiXmlNode::IterateChildren
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 4
_previous$ = 12						; size = 4
?IterateChildren@TiXmlNode@@QBEPBV1@PBDPBV1@@Z PROC	; TiXmlNode::IterateChildren
; _this$ = ecx

; 379  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 	if ( !previous )

	cmp	DWORD PTR _previous$[ebp], 0
	jne	SHORT $LN2@IterateChi@2

; 381  : 	{
; 382  : 		return FirstChild( val );

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@TiXmlNode@@QBEPBV1@PBD@Z	; TiXmlNode::FirstChild
	jmp	SHORT $LN3@IterateChi@2

; 383  : 	}
; 384  : 	else

	jmp	SHORT $LN3@IterateChi@2
$LN2@IterateChi@2:

; 385  : 	{
; 386  : 		assert( previous->parent == this );
; 387  : 		return previous->NextSibling( val );

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _previous$[ebp]
	call	?NextSibling@TiXmlNode@@QBEPBV1@PBD@Z	; TiXmlNode::NextSibling
$LN3@IterateChi@2:

; 388  : 	}
; 389  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?IterateChildren@TiXmlNode@@QBEPBV1@PBDPBV1@@Z ENDP	; TiXmlNode::IterateChildren
; Function compile flags: /Odtp
_this$ = -8						; size = 4
_node$ = -4						; size = 4
__value$ = 8						; size = 4
?NextSibling@TiXmlNode@@QBEPBV1@PBD@Z PROC		; TiXmlNode::NextSibling
; _this$ = ecx

; 393  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 394  : 	const TiXmlNode* node;
; 395  : 	for ( node = next; node; node = node->next )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _node$[ebp], ecx
	jmp	SHORT $LN4@NextSiblin
$LN3@NextSiblin:
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _node$[ebp], eax
$LN4@NextSiblin:
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN2@NextSiblin

; 396  : 	{
; 397  : 		if ( strcmp( node->Value(), _value ) == 0 )

	mov	ecx, DWORD PTR __value$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _node$[ebp]
	call	?Value@TiXmlNode@@QBEPBDXZ		; TiXmlNode::Value
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@NextSiblin

; 398  : 			return node;

	mov	eax, DWORD PTR _node$[ebp]
	jmp	SHORT $LN5@NextSiblin
$LN1@NextSiblin:

; 399  : 	}

	jmp	SHORT $LN3@NextSiblin
$LN2@NextSiblin:

; 400  : 	return 0;

	xor	eax, eax
$LN5@NextSiblin:

; 401  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?NextSibling@TiXmlNode@@QBEPBV1@PBD@Z ENDP		; TiXmlNode::NextSibling
_TEXT	ENDS
PUBLIC	?PreviousSibling@TiXmlNode@@QBEPBV1@PBD@Z	; TiXmlNode::PreviousSibling
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$ = -4						; size = 4
__value$ = 8						; size = 4
?PreviousSibling@TiXmlNode@@QBEPBV1@PBD@Z PROC		; TiXmlNode::PreviousSibling
; _this$ = ecx

; 405  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 406  : 	const TiXmlNode* node;
; 407  : 	for ( node = prev; node; node = node->prev )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _node$[ebp], ecx
	jmp	SHORT $LN4@PreviousSi
$LN3@PreviousSi:
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _node$[ebp], eax
$LN4@PreviousSi:
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN2@PreviousSi

; 408  : 	{
; 409  : 		if ( strcmp( node->Value(), _value ) == 0 )

	mov	ecx, DWORD PTR __value$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _node$[ebp]
	call	?Value@TiXmlNode@@QBEPBDXZ		; TiXmlNode::Value
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PreviousSi

; 410  : 			return node;

	mov	eax, DWORD PTR _node$[ebp]
	jmp	SHORT $LN5@PreviousSi
$LN1@PreviousSi:

; 411  : 	}

	jmp	SHORT $LN3@PreviousSi
$LN2@PreviousSi:

; 412  : 	return 0;

	xor	eax, eax
$LN5@PreviousSi:

; 413  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?PreviousSibling@TiXmlNode@@QBEPBV1@PBD@Z ENDP		; TiXmlNode::PreviousSibling
_TEXT	ENDS
PUBLIC	?Remove@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z ; TiXmlAttributeSet::Remove
PUBLIC	?Find@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@PBD@Z ; TiXmlAttributeSet::Find
PUBLIC	?RemoveAttribute@TiXmlElement@@QAEXPBD@Z	; TiXmlElement::RemoveAttribute
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv82 = -20						; size = 4
_this$ = -16						; size = 4
$T8439 = -12						; size = 4
$T8438 = -8						; size = 4
_node$ = -4						; size = 4
_name$ = 8						; size = 4
?RemoveAttribute@TiXmlElement@@QAEXPBD@Z PROC		; TiXmlElement::RemoveAttribute
; _this$ = ecx

; 417  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 418  :     #ifdef TIXML_USE_STL
; 419  : 	TIXML_STRING str( name );
; 420  : 	TiXmlAttribute* node = attributeSet.Find( str );
; 421  : 	#else
; 422  : 	TiXmlAttribute* node = attributeSet.Find( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Find@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@PBD@Z ; TiXmlAttributeSet::Find
	mov	DWORD PTR _node$[ebp], eax

; 423  : 	#endif
; 424  : 	if ( node )

	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN2@RemoveAttr

; 425  : 	{
; 426  : 		attributeSet.Remove( node );

	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Remove@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z ; TiXmlAttributeSet::Remove

; 427  : 		delete node;

	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR $T8439[ebp], edx
	mov	eax, DWORD PTR $T8439[ebp]
	mov	DWORD PTR $T8438[ebp], eax
	cmp	DWORD PTR $T8438[ebp], 0
	je	SHORT $LN4@RemoveAttr
	push	1
	mov	ecx, DWORD PTR $T8438[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T8438[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN2@RemoveAttr
$LN4@RemoveAttr:
	mov	DWORD PTR tv82[ebp], 0
$LN2@RemoveAttr:

; 428  : 	}
; 429  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveAttribute@TiXmlElement@@QAEXPBD@Z ENDP		; TiXmlElement::RemoveAttribute
_TEXT	ENDS
PUBLIC	?Find@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@PBD@Z ; TiXmlAttributeSet::Find
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
;	COMDAT ?Find@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__name$ = 8						; size = 4
?Find@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@PBD@Z PROC ; TiXmlAttributeSet::Find, COMDAT
; _this$ = ecx

; 919  : 	TiXmlAttribute*	Find( const char* _name ) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 920  : 		return const_cast< TiXmlAttribute* >( (const_cast< const TiXmlAttributeSet* >(this))->Find( _name ) );

	mov	eax, DWORD PTR __name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@PBD@Z ; TiXmlAttributeSet::Find

; 921  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Find@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@PBD@Z ENDP ; TiXmlAttributeSet::Find
_TEXT	ENDS
PUBLIC	?FirstChildElement@TiXmlNode@@QBEPBVTiXmlElement@@XZ ; TiXmlNode::FirstChildElement
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$ = -4						; size = 4
?FirstChildElement@TiXmlNode@@QBEPBVTiXmlElement@@XZ PROC ; TiXmlNode::FirstChildElement
; _this$ = ecx

; 432  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 433  : 	const TiXmlNode* node;
; 434  : 
; 435  : 	for (	node = FirstChild();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::FirstChild
	mov	DWORD PTR _node$[ebp], eax

; 436  : 			node;

	jmp	SHORT $LN4@FirstChild@2
$LN3@FirstChild@2:

; 437  : 			node = node->NextSibling() )

	mov	ecx, DWORD PTR _node$[ebp]
	call	?NextSibling@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::NextSibling
	mov	DWORD PTR _node$[ebp], eax
$LN4@FirstChild@2:
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN2@FirstChild@2

; 438  : 	{
; 439  : 		if ( node->ToElement() )

	mov	eax, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	test	eax, eax
	je	SHORT $LN1@FirstChild@2

; 440  : 			return node->ToElement();

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	jmp	SHORT $LN5@FirstChild@2
$LN1@FirstChild@2:

; 441  : 	}

	jmp	SHORT $LN3@FirstChild@2
$LN2@FirstChild@2:

; 442  : 	return 0;

	xor	eax, eax
$LN5@FirstChild@2:

; 443  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FirstChildElement@TiXmlNode@@QBEPBVTiXmlElement@@XZ ENDP ; TiXmlNode::FirstChildElement
_TEXT	ENDS
PUBLIC	?FirstChildElement@TiXmlNode@@QBEPBVTiXmlElement@@PBD@Z ; TiXmlNode::FirstChildElement
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$ = -4						; size = 4
__value$ = 8						; size = 4
?FirstChildElement@TiXmlNode@@QBEPBVTiXmlElement@@PBD@Z PROC ; TiXmlNode::FirstChildElement
; _this$ = ecx

; 447  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 448  : 	const TiXmlNode* node;
; 449  : 
; 450  : 	for (	node = FirstChild( _value );

	mov	eax, DWORD PTR __value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@TiXmlNode@@QBEPBV1@PBD@Z	; TiXmlNode::FirstChild
	mov	DWORD PTR _node$[ebp], eax

; 451  : 			node;

	jmp	SHORT $LN4@FirstChild@3
$LN3@FirstChild@3:

; 452  : 			node = node->NextSibling( _value ) )

	mov	ecx, DWORD PTR __value$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _node$[ebp]
	call	?NextSibling@TiXmlNode@@QBEPBV1@PBD@Z	; TiXmlNode::NextSibling
	mov	DWORD PTR _node$[ebp], eax
$LN4@FirstChild@3:
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN2@FirstChild@3

; 453  : 	{
; 454  : 		if ( node->ToElement() )

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	test	eax, eax
	je	SHORT $LN1@FirstChild@3

; 455  : 			return node->ToElement();

	mov	eax, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	jmp	SHORT $LN5@FirstChild@3
$LN1@FirstChild@3:

; 456  : 	}

	jmp	SHORT $LN3@FirstChild@3
$LN2@FirstChild@3:

; 457  : 	return 0;

	xor	eax, eax
$LN5@FirstChild@3:

; 458  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FirstChildElement@TiXmlNode@@QBEPBVTiXmlElement@@PBD@Z ENDP ; TiXmlNode::FirstChildElement
_TEXT	ENDS
PUBLIC	?NextSiblingElement@TiXmlNode@@QBEPBVTiXmlElement@@XZ ; TiXmlNode::NextSiblingElement
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$ = -4						; size = 4
?NextSiblingElement@TiXmlNode@@QBEPBVTiXmlElement@@XZ PROC ; TiXmlNode::NextSiblingElement
; _this$ = ecx

; 462  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 463  : 	const TiXmlNode* node;
; 464  : 
; 465  : 	for (	node = NextSibling();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NextSibling@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::NextSibling
	mov	DWORD PTR _node$[ebp], eax

; 466  : 			node;

	jmp	SHORT $LN4@NextSiblin@2
$LN3@NextSiblin@2:

; 467  : 			node = node->NextSibling() )

	mov	ecx, DWORD PTR _node$[ebp]
	call	?NextSibling@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::NextSibling
	mov	DWORD PTR _node$[ebp], eax
$LN4@NextSiblin@2:
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN2@NextSiblin@2

; 468  : 	{
; 469  : 		if ( node->ToElement() )

	mov	eax, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	test	eax, eax
	je	SHORT $LN1@NextSiblin@2

; 470  : 			return node->ToElement();

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	jmp	SHORT $LN5@NextSiblin@2
$LN1@NextSiblin@2:

; 471  : 	}

	jmp	SHORT $LN3@NextSiblin@2
$LN2@NextSiblin@2:

; 472  : 	return 0;

	xor	eax, eax
$LN5@NextSiblin@2:

; 473  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?NextSiblingElement@TiXmlNode@@QBEPBVTiXmlElement@@XZ ENDP ; TiXmlNode::NextSiblingElement
_TEXT	ENDS
PUBLIC	?NextSiblingElement@TiXmlNode@@QBEPBVTiXmlElement@@PBD@Z ; TiXmlNode::NextSiblingElement
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$ = -4						; size = 4
__value$ = 8						; size = 4
?NextSiblingElement@TiXmlNode@@QBEPBVTiXmlElement@@PBD@Z PROC ; TiXmlNode::NextSiblingElement
; _this$ = ecx

; 477  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 478  : 	const TiXmlNode* node;
; 479  : 
; 480  : 	for (	node = NextSibling( _value );

	mov	eax, DWORD PTR __value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NextSibling@TiXmlNode@@QBEPBV1@PBD@Z	; TiXmlNode::NextSibling
	mov	DWORD PTR _node$[ebp], eax

; 481  : 			node;

	jmp	SHORT $LN4@NextSiblin@3
$LN3@NextSiblin@3:

; 482  : 			node = node->NextSibling( _value ) )

	mov	ecx, DWORD PTR __value$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _node$[ebp]
	call	?NextSibling@TiXmlNode@@QBEPBV1@PBD@Z	; TiXmlNode::NextSibling
	mov	DWORD PTR _node$[ebp], eax
$LN4@NextSiblin@3:
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN2@NextSiblin@3

; 483  : 	{
; 484  : 		if ( node->ToElement() )

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	test	eax, eax
	je	SHORT $LN1@NextSiblin@3

; 485  : 			return node->ToElement();

	mov	eax, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	jmp	SHORT $LN5@NextSiblin@3
$LN1@NextSiblin@3:

; 486  : 	}

	jmp	SHORT $LN3@NextSiblin@3
$LN2@NextSiblin@3:

; 487  : 	return 0;

	xor	eax, eax
$LN5@NextSiblin@3:

; 488  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?NextSiblingElement@TiXmlNode@@QBEPBVTiXmlElement@@PBD@Z ENDP ; TiXmlNode::NextSiblingElement
; Function compile flags: /Odtp
_this$ = -8						; size = 4
_node$ = -4						; size = 4
?GetDocument@TiXmlNode@@QBEPBVTiXmlDocument@@XZ PROC	; TiXmlNode::GetDocument
; _this$ = ecx

; 492  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 493  : 	const TiXmlNode* node;
; 494  : 
; 495  : 	for( node = this; node; node = node->parent )

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN4@GetDocumen
$LN3@GetDocumen:
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _node$[ebp], edx
$LN4@GetDocumen:
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN2@GetDocumen

; 496  : 	{
; 497  : 		if ( node->ToDocument() )

	mov	eax, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	test	eax, eax
	je	SHORT $LN1@GetDocumen

; 498  : 			return node->ToDocument();

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	jmp	SHORT $LN5@GetDocumen
$LN1@GetDocumen:

; 499  : 	}

	jmp	SHORT $LN3@GetDocumen
$LN2@GetDocumen:

; 500  : 	return 0;

	xor	eax, eax
$LN5@GetDocumen:

; 501  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDocument@TiXmlNode@@QBEPBVTiXmlDocument@@XZ ENDP	; TiXmlNode::GetDocument
_TEXT	ENDS
PUBLIC	??1TiXmlAttributeSet@@QAE@XZ			; TiXmlAttributeSet::~TiXmlAttributeSet
PUBLIC	??0TiXmlAttributeSet@@QAE@XZ			; TiXmlAttributeSet::TiXmlAttributeSet
PUBLIC	??_7TiXmlElement@@6B@				; TiXmlElement::`vftable'
PUBLIC	??0TiXmlElement@@QAE@PBD@Z			; TiXmlElement::TiXmlElement
PUBLIC	??_R4TiXmlElement@@6B@				; TiXmlElement::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlElement@@@8			; TiXmlElement `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlElement@@8				; TiXmlElement::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlElement@@8				; TiXmlElement::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlElement@@8			; TiXmlElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Print@TiXmlElement@@UBEXPAU_iobuf@@H@Z		; TiXmlElement::Print
PUBLIC	?ToElement@TiXmlElement@@UAEPAV1@XZ		; TiXmlElement::ToElement
PUBLIC	?ToElement@TiXmlElement@@UBEPBV1@XZ		; TiXmlElement::ToElement
PUBLIC	?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ	; TiXmlElement::Clone
PUBLIC	?Accept@TiXmlElement@@UBE_NPAVTiXmlVisitor@@@Z	; TiXmlElement::Accept
EXTRN	??_ETiXmlElement@@UAEPAXI@Z:PROC		; TiXmlElement::`vector deleting destructor'
EXTRN	?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:PROC ; TiXmlElement::Parse
;	COMDAT ??_R1A@?0A@EA@TiXmlElement@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlElement@@8 DD FLAT:??_R0?AVTiXmlElement@@@8 ; TiXmlElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlElement@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlElement@@8
rdata$r	SEGMENT
??_R2TiXmlElement@@8 DD FLAT:??_R1A@?0A@EA@TiXmlElement@@8 ; TiXmlElement::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlNode@@8
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlElement@@8
rdata$r	SEGMENT
??_R3TiXmlElement@@8 DD 00H				; TiXmlElement::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TiXmlElement@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlElement@@@8
_DATA	SEGMENT
??_R0?AVTiXmlElement@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlElement `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlElement@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlElement@@6B@
rdata$r	SEGMENT
??_R4TiXmlElement@@6B@ DD 00H				; TiXmlElement::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlElement@@@8
	DD	FLAT:??_R3TiXmlElement@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlElement@@6B@
CONST	SEGMENT
??_7TiXmlElement@@6B@ DD FLAT:??_R4TiXmlElement@@6B@	; TiXmlElement::`vftable'
	DD	FLAT:??_ETiXmlElement@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlElement@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	FLAT:?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
	DD	FLAT:?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
	DD	FLAT:?ToElement@TiXmlElement@@UAEPAV1@XZ
	DD	FLAT:?ToElement@TiXmlElement@@UBEPBV1@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
	DD	FLAT:?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ
	DD	FLAT:?Accept@TiXmlElement@@UBE_NPAVTiXmlVisitor@@@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0TiXmlElement@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlElement@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TiXmlElement@@QAE@PBD@Z$1
__ehfuncinfo$??0TiXmlElement@@QAE@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0TiXmlElement@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__value$ = 8						; size = 4
??0TiXmlElement@@QAE@PBD@Z PROC				; TiXmlElement::TiXmlElement
; _this$ = ecx

; 506  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlElement@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlElement@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0TiXmlAttributeSet@@QAE@XZ		; TiXmlAttributeSet::TiXmlAttributeSet
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 507  : 	firstChild = lastChild = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0

; 508  : 	value = _value;

	mov	eax, DWORD PTR __value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 509  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0TiXmlElement@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__unwindfunclet$??0TiXmlElement@@QAE@PBD@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1TiXmlAttributeSet@@QAE@XZ		; TiXmlAttributeSet::~TiXmlAttributeSet
__ehhandler$??0TiXmlElement@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlElement@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlElement@@QAE@PBD@Z ENDP				; TiXmlElement::TiXmlElement
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
;	COMDAT ?ToElement@TiXmlElement@@UBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToElement@TiXmlElement@@UBEPBV1@XZ PROC		; TiXmlElement::ToElement, COMDAT
; _this$ = ecx

; 1124 : 	virtual const TiXmlElement*     ToElement()     const { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ToElement@TiXmlElement@@UBEPBV1@XZ ENDP		; TiXmlElement::ToElement
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToElement@TiXmlElement@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToElement@TiXmlElement@@UAEPAV1@XZ PROC		; TiXmlElement::ToElement, COMDAT
; _this$ = ecx

; 1125 : 	virtual TiXmlElement*           ToElement()	          { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ToElement@TiXmlElement@@UAEPAV1@XZ ENDP		; TiXmlElement::ToElement
_TEXT	ENDS
PUBLIC	??1TiXmlElement@@UAE@XZ				; TiXmlElement::~TiXmlElement
; Function compile flags: /Odtp
;	COMDAT ??_GTiXmlElement@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlElement@@UAEPAXI@Z PROC			; TiXmlElement::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlElement@@UAE@XZ			; TiXmlElement::~TiXmlElement
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlElement@@UAEPAXI@Z ENDP			; TiXmlElement::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?CopyTo@TiXmlElement@@IBEXPAV1@@Z		; TiXmlElement::CopyTo
PUBLIC	??0TiXmlElement@@QAE@ABV0@@Z			; TiXmlElement::TiXmlElement
xdata$x	SEGMENT
__unwindtable$??0TiXmlElement@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlElement@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TiXmlElement@@QAE@ABV0@@Z$1
__ehfuncinfo$??0TiXmlElement@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0TiXmlElement@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_copy$ = 8						; size = 4
??0TiXmlElement@@QAE@ABV0@@Z PROC			; TiXmlElement::TiXmlElement
; _this$ = ecx

; 524  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlElement@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlElement@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0TiXmlAttributeSet@@QAE@XZ		; TiXmlAttributeSet::TiXmlAttributeSet
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 525  : 	firstChild = lastChild = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0

; 526  : 	copy.CopyTo( this );	

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _copy$[ebp]
	call	?CopyTo@TiXmlElement@@IBEXPAV1@@Z	; TiXmlElement::CopyTo

; 527  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0TiXmlElement@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__unwindfunclet$??0TiXmlElement@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1TiXmlAttributeSet@@QAE@XZ		; TiXmlAttributeSet::~TiXmlAttributeSet
__ehhandler$??0TiXmlElement@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlElement@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlElement@@QAE@ABV0@@Z ENDP			; TiXmlElement::TiXmlElement
PUBLIC	?ClearThis@TiXmlElement@@IAEXXZ			; TiXmlElement::ClearThis
PUBLIC	??4TiXmlElement@@QAEXABV0@@Z			; TiXmlElement::operator=
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
??4TiXmlElement@@QAEXABV0@@Z PROC			; TiXmlElement::operator=
; _this$ = ecx

; 531  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 532  : 	ClearThis();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearThis@TiXmlElement@@IAEXXZ		; TiXmlElement::ClearThis

; 533  : 	base.CopyTo( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	call	?CopyTo@TiXmlElement@@IBEXPAV1@@Z	; TiXmlElement::CopyTo

; 534  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??4TiXmlElement@@QAEXABV0@@Z ENDP			; TiXmlElement::operator=
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$??1TiXmlElement@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TiXmlElement@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1TiXmlElement@@UAE@XZ$1
__ehfuncinfo$??1TiXmlElement@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1TiXmlElement@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1TiXmlElement@@UAE@XZ PROC				; TiXmlElement::~TiXmlElement
; _this$ = ecx

; 538  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TiXmlElement@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlElement@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 539  : 	ClearThis();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearThis@TiXmlElement@@IAEXXZ		; TiXmlElement::ClearThis

; 540  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1TiXmlAttributeSet@@QAE@XZ		; TiXmlAttributeSet::~TiXmlAttributeSet
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1TiXmlElement@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__unwindfunclet$??1TiXmlElement@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1TiXmlAttributeSet@@QAE@XZ		; TiXmlAttributeSet::~TiXmlAttributeSet
__ehhandler$??1TiXmlElement@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TiXmlElement@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TiXmlElement@@UAE@XZ ENDP				; TiXmlElement::~TiXmlElement
PUBLIC	?First@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@XZ ; TiXmlAttributeSet::First
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv89 = -20						; size = 4
_this$ = -16						; size = 4
$T8479 = -12						; size = 4
$T8478 = -8						; size = 4
_node$7280 = -4						; size = 4
?ClearThis@TiXmlElement@@IAEXXZ PROC			; TiXmlElement::ClearThis
; _this$ = ecx

; 544  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 545  : 	Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@TiXmlNode@@QAEXXZ		; TiXmlNode::Clear
$LN2@ClearThis:

; 546  : 	while( attributeSet.First() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?First@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@XZ ; TiXmlAttributeSet::First
	test	eax, eax
	je	SHORT $LN3@ClearThis

; 547  : 	{
; 548  : 		TiXmlAttribute* node = attributeSet.First();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?First@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@XZ ; TiXmlAttributeSet::First
	mov	DWORD PTR _node$7280[ebp], eax

; 549  : 		attributeSet.Remove( node );

	mov	eax, DWORD PTR _node$7280[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Remove@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z ; TiXmlAttributeSet::Remove

; 550  : 		delete node;

	mov	ecx, DWORD PTR _node$7280[ebp]
	mov	DWORD PTR $T8479[ebp], ecx
	mov	edx, DWORD PTR $T8479[ebp]
	mov	DWORD PTR $T8478[ebp], edx
	cmp	DWORD PTR $T8478[ebp], 0
	je	SHORT $LN5@ClearThis
	push	1
	mov	eax, DWORD PTR $T8478[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T8478[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN6@ClearThis
$LN5@ClearThis:
	mov	DWORD PTR tv89[ebp], 0
$LN6@ClearThis:

; 551  : 	}

	jmp	SHORT $LN2@ClearThis
$LN3@ClearThis:

; 552  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearThis@TiXmlElement@@IAEXXZ ENDP			; TiXmlElement::ClearThis
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
_TEXT	ENDS
;	COMDAT ?First@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@XZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?First@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@XZ PROC	; TiXmlAttributeSet::First, COMDAT
; _this$ = ecx

; 914  : 	TiXmlAttribute* First()					{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	ecx, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@First
	mov	DWORD PTR tv67[ebp], 0
	jmp	SHORT $LN4@First
$LN3@First:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR tv67[ebp], eax
$LN4@First:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?First@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@XZ ENDP	; TiXmlAttributeSet::First
_TEXT	ENDS
PUBLIC	?Value@TiXmlAttribute@@QBEPBDXZ			; TiXmlAttribute::Value
PUBLIC	?Attribute@TiXmlElement@@QBEPBDPBD@Z		; TiXmlElement::Attribute
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$ = -4						; size = 4
_name$ = 8						; size = 4
?Attribute@TiXmlElement@@QBEPBDPBD@Z PROC		; TiXmlElement::Attribute
; _this$ = ecx

; 556  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 557  : 	const TiXmlAttribute* node = attributeSet.Find( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Find@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@PBD@Z ; TiXmlAttributeSet::Find
	mov	DWORD PTR _node$[ebp], eax

; 558  : 	if ( node )

	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN1@Attribute

; 559  : 		return node->Value();

	mov	ecx, DWORD PTR _node$[ebp]
	call	?Value@TiXmlAttribute@@QBEPBDXZ		; TiXmlAttribute::Value
	jmp	SHORT $LN2@Attribute
$LN1@Attribute:

; 560  : 	return 0;

	xor	eax, eax
$LN2@Attribute:

; 561  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Attribute@TiXmlElement@@QBEPBDPBD@Z ENDP		; TiXmlElement::Attribute
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
_TEXT	ENDS
;	COMDAT ?Value@TiXmlAttribute@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Value@TiXmlAttribute@@QBEPBDXZ PROC			; TiXmlAttribute::Value, COMDAT
; _this$ = ecx

; 813  : 	const char*		Value() const		{ return value.c_str(); }		///< Return the value of this attribute.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	mov	esp, ebp
	pop	ebp
	ret	0
?Value@TiXmlAttribute@@QBEPBDXZ ENDP			; TiXmlAttribute::Value
_TEXT	ENDS
PUBLIC	?Attribute@TiXmlElement@@QBEPBDPBDPAH@Z		; TiXmlElement::Attribute
EXTRN	__imp__atoi:PROC
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_s$ = -4						; size = 4
_name$ = 8						; size = 4
_i$ = 12						; size = 4
?Attribute@TiXmlElement@@QBEPBDPBDPAH@Z PROC		; TiXmlElement::Attribute
; _this$ = ecx

; 576  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 577  : 	const char* s = Attribute( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attribute@TiXmlElement@@QBEPBDPBD@Z	; TiXmlElement::Attribute
	mov	DWORD PTR _s$[ebp], eax

; 578  : 	if ( i )

	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN3@Attribute@2

; 579  : 	{
; 580  : 		if ( s ) {

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN2@Attribute@2

; 581  : 			*i = atoi( s );

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	DWORD PTR __imp__atoi
	add	esp, 4
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx], eax

; 582  : 		}
; 583  : 		else {

	jmp	SHORT $LN3@Attribute@2
$LN2@Attribute@2:

; 584  : 			*i = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax], 0
$LN3@Attribute@2:

; 585  : 		}
; 586  : 	}
; 587  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 588  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Attribute@TiXmlElement@@QBEPBDPBDPAH@Z ENDP		; TiXmlElement::Attribute
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	?Attribute@TiXmlElement@@QBEPBDPBDPAN@Z		; TiXmlElement::Attribute
EXTRN	__imp__atof:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
_this$ = -8						; size = 4
_s$ = -4						; size = 4
_name$ = 8						; size = 4
_d$ = 12						; size = 4
?Attribute@TiXmlElement@@QBEPBDPBDPAN@Z PROC		; TiXmlElement::Attribute
; _this$ = ecx

; 610  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 611  : 	const char* s = Attribute( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attribute@TiXmlElement@@QBEPBDPBD@Z	; TiXmlElement::Attribute
	mov	DWORD PTR _s$[ebp], eax

; 612  : 	if ( d )

	cmp	DWORD PTR _d$[ebp], 0
	je	SHORT $LN1@Attribute@3

; 613  : 	{
; 614  : 		if ( s ) {

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN2@Attribute@3

; 615  : 			*d = atof( s );

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	DWORD PTR __imp__atof
	add	esp, 4
	mov	edx, DWORD PTR _d$[ebp]
	fstp	QWORD PTR [edx]

; 616  : 		}
; 617  : 		else {

	jmp	SHORT $LN1@Attribute@3
$LN2@Attribute@3:

; 618  : 			*d = 0;

	mov	eax, DWORD PTR _d$[ebp]
	fldz
	fstp	QWORD PTR [eax]
$LN1@Attribute@3:

; 619  : 		}
; 620  : 	}
; 621  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 622  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Attribute@TiXmlElement@@QBEPBDPBDPAN@Z ENDP		; TiXmlElement::Attribute
_TEXT	ENDS
PUBLIC	?QueryIntValue@TiXmlAttribute@@QBEHPAH@Z	; TiXmlAttribute::QueryIntValue
PUBLIC	?QueryIntAttribute@TiXmlElement@@QBEHPBDPAH@Z	; TiXmlElement::QueryIntAttribute
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$ = -4						; size = 4
_name$ = 8						; size = 4
_ival$ = 12						; size = 4
?QueryIntAttribute@TiXmlElement@@QBEHPBDPAH@Z PROC	; TiXmlElement::QueryIntAttribute
; _this$ = ecx

; 644  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 645  : 	const TiXmlAttribute* node = attributeSet.Find( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Find@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@PBD@Z ; TiXmlAttributeSet::Find
	mov	DWORD PTR _node$[ebp], eax

; 646  : 	if ( !node )

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN1@QueryIntAt

; 647  : 		return TIXML_NO_ATTRIBUTE;

	mov	eax, 1
	jmp	SHORT $LN2@QueryIntAt
$LN1@QueryIntAt:

; 648  : 	return node->QueryIntValue( ival );

	mov	ecx, DWORD PTR _ival$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _node$[ebp]
	call	?QueryIntValue@TiXmlAttribute@@QBEHPAH@Z ; TiXmlAttribute::QueryIntValue
$LN2@QueryIntAt:

; 649  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?QueryIntAttribute@TiXmlElement@@QBEHPBDPAH@Z ENDP	; TiXmlElement::QueryIntAttribute
_TEXT	ENDS
PUBLIC	?QueryDoubleValue@TiXmlAttribute@@QBEHPAN@Z	; TiXmlAttribute::QueryDoubleValue
PUBLIC	?QueryDoubleAttribute@TiXmlElement@@QBEHPBDPAN@Z ; TiXmlElement::QueryDoubleAttribute
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$ = -4						; size = 4
_name$ = 8						; size = 4
_dval$ = 12						; size = 4
?QueryDoubleAttribute@TiXmlElement@@QBEHPBDPAN@Z PROC	; TiXmlElement::QueryDoubleAttribute
; _this$ = ecx

; 664  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 665  : 	const TiXmlAttribute* node = attributeSet.Find( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Find@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@PBD@Z ; TiXmlAttributeSet::Find
	mov	DWORD PTR _node$[ebp], eax

; 666  : 	if ( !node )

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN1@QueryDoubl

; 667  : 		return TIXML_NO_ATTRIBUTE;

	mov	eax, 1
	jmp	SHORT $LN2@QueryDoubl
$LN1@QueryDoubl:

; 668  : 	return node->QueryDoubleValue( dval );

	mov	ecx, DWORD PTR _dval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _node$[ebp]
	call	?QueryDoubleValue@TiXmlAttribute@@QBEHPAN@Z ; TiXmlAttribute::QueryDoubleValue
$LN2@QueryDoubl:

; 669  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?QueryDoubleAttribute@TiXmlElement@@QBEHPBDPAN@Z ENDP	; TiXmlElement::QueryDoubleAttribute
_TEXT	ENDS
PUBLIC	?SetAttribute@TiXmlElement@@QAEXPBD0@Z		; TiXmlElement::SetAttribute
PUBLIC	??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ		; _snprintf_s<64>
PUBLIC	__$ArrayPad$
PUBLIC	?SetAttribute@TiXmlElement@@QAEXPBDH@Z		; TiXmlElement::SetAttribute
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -76						; size = 4
_buf$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_val$ = 12						; size = 4
?SetAttribute@TiXmlElement@@QAEXPBDH@Z PROC		; TiXmlElement::SetAttribute
; _this$ = ecx

; 684  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 685  : 	char buf[64];
; 686  : 	#if defined(TIXML_SNPRINTF)		
; 687  : 		TIXML_SNPRINTF( buf, sizeof(buf), "%d", val );

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	push	OFFSET $SG7333
	push	64					; 00000040H
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ	; _snprintf_s<64>
	add	esp, 16					; 00000010H

; 688  : 	#else
; 689  : 		sprintf( buf, "%d", val );
; 690  : 	#endif
; 691  : 	SetAttribute( name, buf );

	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAttribute@TiXmlElement@@QAEXPBD0@Z	; TiXmlElement::SetAttribute

; 692  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?SetAttribute@TiXmlElement@@QAEXPBDH@Z ENDP		; TiXmlElement::SetAttribute
_TEXT	ENDS
PUBLIC	??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ	; _snprintf_s<256>
PUBLIC	__$ArrayPad$
PUBLIC	?SetDoubleAttribute@TiXmlElement@@QAEXPBDN@Z	; TiXmlElement::SetDoubleAttribute
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -268						; size = 4
_buf$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_val$ = 12						; size = 8
?SetDoubleAttribute@TiXmlElement@@QAEXPBDN@Z PROC	; TiXmlElement::SetDoubleAttribute
; _this$ = ecx

; 706  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 707  : 	char buf[256];
; 708  : 	#if defined(TIXML_SNPRINTF)		
; 709  : 		TIXML_SNPRINTF( buf, sizeof(buf), "%f", val );

	sub	esp, 8
	fld	QWORD PTR _val$[ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET $SG7346
	push	256					; 00000100H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ ; _snprintf_s<256>
	add	esp, 20					; 00000014H

; 710  : 	#else
; 711  : 		sprintf( buf, "%f", val );
; 712  : 	#endif
; 713  : 	SetAttribute( name, buf );

	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAttribute@TiXmlElement@@QAEXPBD0@Z	; TiXmlElement::SetAttribute

; 714  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetDoubleAttribute@TiXmlElement@@QAEXPBDN@Z ENDP	; TiXmlElement::SetDoubleAttribute
_TEXT	ENDS
PUBLIC	?Add@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z ; TiXmlAttributeSet::Add
PUBLIC	??0TiXmlAttribute@@QAE@PBD0@Z			; TiXmlAttribute::TiXmlAttribute
PUBLIC	?SetValue@TiXmlAttribute@@QAEXPBD@Z		; TiXmlAttribute::SetValue
EXTRN	??2@YAPAXI@Z:PROC				; operator new
xdata$x	SEGMENT
__unwindtable$?SetAttribute@TiXmlElement@@QAEXPBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetAttribute@TiXmlElement@@QAEXPBD0@Z$0
__ehfuncinfo$?SetAttribute@TiXmlElement@@QAEXPBD0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetAttribute@TiXmlElement@@QAEXPBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv80 = -48						; size = 4
_this$ = -44						; size = 4
$T8502 = -40						; size = 4
$T8501 = -36						; size = 4
_document$7363 = -32					; size = 4
_node$ = -28						; size = 4
__value$ = -24						; size = 4
_attrib$ = -20						; size = 4
__name$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_cname$ = 8						; size = 4
_cvalue$ = 12						; size = 4
?SetAttribute@TiXmlElement@@QAEXPBD0@Z PROC		; TiXmlElement::SetAttribute
; _this$ = ecx

; 718  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetAttribute@TiXmlElement@@QAEXPBD0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 719  :     #ifdef TIXML_USE_STL
; 720  : 	TIXML_STRING _name( cname );
; 721  : 	TIXML_STRING _value( cvalue );
; 722  : 	#else
; 723  : 	const char* _name = cname;

	mov	eax, DWORD PTR _cname$[ebp]
	mov	DWORD PTR __name$[ebp], eax

; 724  : 	const char* _value = cvalue;

	mov	ecx, DWORD PTR _cvalue$[ebp]
	mov	DWORD PTR __value$[ebp], ecx

; 725  : 	#endif
; 726  : 
; 727  : 	TiXmlAttribute* node = attributeSet.Find( _name );

	mov	edx, DWORD PTR __name$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Find@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@PBD@Z ; TiXmlAttributeSet::Find
	mov	DWORD PTR _node$[ebp], eax

; 728  : 	if ( node )

	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN4@SetAttribu

; 729  : 	{
; 730  : 		node->SetValue( _value );

	mov	eax, DWORD PTR __value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	call	?SetValue@TiXmlAttribute@@QAEXPBD@Z	; TiXmlAttribute::SetValue

; 731  : 		return;

	jmp	$LN5@SetAttribu
$LN4@SetAttribu:

; 732  : 	}
; 733  : 
; 734  : 	TiXmlAttribute* attrib = new TiXmlAttribute( cname, cvalue );

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8502[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8502[ebp], 0
	je	SHORT $LN7@SetAttribu
	mov	ecx, DWORD PTR _cvalue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cname$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T8502[ebp]
	call	??0TiXmlAttribute@@QAE@PBD0@Z		; TiXmlAttribute::TiXmlAttribute
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN8@SetAttribu
$LN7@SetAttribu:
	mov	DWORD PTR tv80[ebp], 0
$LN8@SetAttribu:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T8501[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T8501[ebp]
	mov	DWORD PTR _attrib$[ebp], ecx

; 735  : 	if ( attrib )

	cmp	DWORD PTR _attrib$[ebp], 0
	je	SHORT $LN3@SetAttribu

; 736  : 	{
; 737  : 		attributeSet.Add( attrib );

	mov	edx, DWORD PTR _attrib$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Add@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z ; TiXmlAttributeSet::Add

; 738  : 	}
; 739  : 	else

	jmp	SHORT $LN5@SetAttribu
$LN3@SetAttribu:

; 740  : 	{
; 741  : 		TiXmlDocument* document = GetDocument();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	mov	DWORD PTR _document$7363[ebp], eax

; 742  : 		if ( document ) document->SetError( TIXML_ERROR_OUT_OF_MEMORY, 0, 0, TIXML_ENCODING_UNKNOWN );

	cmp	DWORD PTR _document$7363[ebp], 0
	je	SHORT $LN5@SetAttribu
	push	0
	push	0
	push	0
	push	3
	mov	ecx, DWORD PTR _document$7363[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN5@SetAttribu:

; 743  : 	}
; 744  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetAttribute@TiXmlElement@@QAEXPBD0@Z$0:
	mov	eax, DWORD PTR $T8502[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetAttribute@TiXmlElement@@QAEXPBD0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetAttribute@TiXmlElement@@QAEXPBD0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetAttribute@TiXmlElement@@QAEXPBD0@Z ENDP		; TiXmlElement::SetAttribute
PUBLIC	??_7TiXmlAttribute@@6B@				; TiXmlAttribute::`vftable'
PUBLIC	??_R4TiXmlAttribute@@6B@			; TiXmlAttribute::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlAttribute@@@8			; TiXmlAttribute `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlAttribute@@8				; TiXmlAttribute::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlAttribute@@8				; TiXmlAttribute::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlAttribute@@8			; TiXmlAttribute::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z	; TiXmlAttribute::Print
EXTRN	??_ETiXmlAttribute@@UAEPAXI@Z:PROC		; TiXmlAttribute::`vector deleting destructor'
EXTRN	?Parse@TiXmlAttribute@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:PROC ; TiXmlAttribute::Parse
;	COMDAT ??_R1A@?0A@EA@TiXmlAttribute@@8
; File i:\svnroot\client\ogremain\tinyxml.h
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlAttribute@@8 DD FLAT:??_R0?AVTiXmlAttribute@@@8 ; TiXmlAttribute::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlAttribute@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlAttribute@@8
rdata$r	SEGMENT
??_R2TiXmlAttribute@@8 DD FLAT:??_R1A@?0A@EA@TiXmlAttribute@@8 ; TiXmlAttribute::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlAttribute@@8
rdata$r	SEGMENT
??_R3TiXmlAttribute@@8 DD 00H				; TiXmlAttribute::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2TiXmlAttribute@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlAttribute@@@8
_DATA	SEGMENT
??_R0?AVTiXmlAttribute@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlAttribute `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlAttribute@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlAttribute@@6B@
rdata$r	SEGMENT
??_R4TiXmlAttribute@@6B@ DD 00H				; TiXmlAttribute::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlAttribute@@@8
	DD	FLAT:??_R3TiXmlAttribute@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlAttribute@@6B@
CONST	SEGMENT
??_7TiXmlAttribute@@6B@ DD FLAT:??_R4TiXmlAttribute@@6B@ ; TiXmlAttribute::`vftable'
	DD	FLAT:??_ETiXmlAttribute@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlAttribute@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0TiXmlAttribute@@QAE@PBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlAttribute@@QAE@PBD0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TiXmlAttribute@@QAE@PBD0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0TiXmlAttribute@@QAE@PBD0@Z$2
__ehfuncinfo$??0TiXmlAttribute@@QAE@PBD0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0TiXmlAttribute@@QAE@PBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0TiXmlAttribute@@QAE@PBD0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__name$ = 8						; size = 4
__value$ = 12						; size = 4
??0TiXmlAttribute@@QAE@PBD0@Z PROC			; TiXmlAttribute::TiXmlAttribute, COMDAT
; _this$ = ecx

; 804  : 	TiXmlAttribute( const char * _name, const char * _value )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlAttribute@@QAE@PBD0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlBase@@QAE@XZ			; TiXmlBase::TiXmlBase
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlAttribute@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 805  : 	{
; 806  : 		name = _name;

	mov	ecx, DWORD PTR __name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 807  : 		value = _value;

	mov	edx, DWORD PTR __value$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 808  : 		document = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 809  : 		prev = next = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0

; 810  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TiXmlAttribute@@QAE@PBD0@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlBase@@UAE@XZ			; TiXmlBase::~TiXmlBase
__unwindfunclet$??0TiXmlAttribute@@QAE@PBD0@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$??0TiXmlAttribute@@QAE@PBD0@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??0TiXmlAttribute@@QAE@PBD0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlAttribute@@QAE@PBD0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlAttribute@@QAE@PBD0@Z ENDP			; TiXmlAttribute::TiXmlAttribute
; Function compile flags: /Odtp
;	COMDAT ?SetValue@TiXmlAttribute@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__value$ = 8						; size = 4
?SetValue@TiXmlAttribute@@QAEXPBD@Z PROC		; TiXmlAttribute::SetValue, COMDAT
; _this$ = ecx

; 837  : 	void SetValue( const char* _value )	{ value = _value; }				///< Set the value.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=
	mov	esp, ebp
	pop	ebp
	ret	4
?SetValue@TiXmlAttribute@@QAEXPBD@Z ENDP		; TiXmlAttribute::SetValue
_TEXT	ENDS
PUBLIC	?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z ; TiXmlAttribute::Print
; Function compile flags: /Odtp
;	COMDAT ?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cfile$ = 8						; size = 4
_depth$ = 12						; size = 4
?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z PROC		; TiXmlAttribute::Print, COMDAT
; _this$ = ecx

; 871  : 	virtual void Print( FILE* cfile, int depth ) const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 872  : 		Print( cfile, depth, 0 );

	push	0
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cfile$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z ; TiXmlAttribute::Print

; 873  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z ENDP		; TiXmlAttribute::Print
_TEXT	ENDS
PUBLIC	??1TiXmlAttribute@@UAE@XZ			; TiXmlAttribute::~TiXmlAttribute
; Function compile flags: /Odtp
;	COMDAT ??_GTiXmlAttribute@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlAttribute@@UAEPAXI@Z PROC			; TiXmlAttribute::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlAttribute@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlAttribute@@UAEPAXI@Z ENDP			; TiXmlAttribute::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1TiXmlAttribute@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TiXmlAttribute@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1TiXmlAttribute@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1TiXmlAttribute@@UAE@XZ$2
__ehfuncinfo$??1TiXmlAttribute@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1TiXmlAttribute@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1TiXmlAttribute@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1TiXmlAttribute@@UAE@XZ PROC				; TiXmlAttribute::~TiXmlAttribute, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TiXmlAttribute@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlBase@@UAE@XZ			; TiXmlBase::~TiXmlBase
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1TiXmlAttribute@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlBase@@UAE@XZ			; TiXmlBase::~TiXmlBase
__unwindfunclet$??1TiXmlAttribute@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$??1TiXmlAttribute@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??1TiXmlAttribute@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TiXmlAttribute@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TiXmlAttribute@@UAE@XZ ENDP				; TiXmlAttribute::~TiXmlAttribute
PUBLIC	?NextSibling@TiXmlNode@@QAEPAV1@XZ		; TiXmlNode::NextSibling
PUBLIC	?Next@TiXmlAttribute@@QBEPBV1@XZ		; TiXmlAttribute::Next
PUBLIC	?First@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@XZ ; TiXmlAttributeSet::First
EXTRN	__imp__fprintf:PROC
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_node$ = -12						; size = 4
_attrib$ = -8						; size = 4
_i$ = -4						; size = 4
_cfile$ = 8						; size = 4
_depth$ = 12						; size = 4
?Print@TiXmlElement@@UBEXPAU_iobuf@@H@Z PROC		; TiXmlElement::Print
; _this$ = ecx

; 772  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 773  : 	int i;
; 774  : 	assert( cfile );
; 775  : 	for ( i=0; i<depth; i++ ) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN17@Print
$LN16@Print:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN17@Print:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _depth$[ebp]
	jge	SHORT $LN15@Print

; 776  : 		fprintf( cfile, "    " );

	push	OFFSET $SG7375
	mov	edx, DWORD PTR _cfile$[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 8

; 777  : 	}

	jmp	SHORT $LN16@Print
$LN15@Print:

; 778  : 
; 779  : 	fprintf( cfile, "<%s", value.c_str() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	push	OFFSET $SG7376
	mov	eax, DWORD PTR _cfile$[ebp]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH

; 780  : 
; 781  : 	const TiXmlAttribute* attrib;
; 782  : 	for ( attrib = attributeSet.First(); attrib; attrib = attrib->Next() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?First@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@XZ ; TiXmlAttributeSet::First
	mov	DWORD PTR _attrib$[ebp], eax
	jmp	SHORT $LN14@Print
$LN13@Print:
	mov	ecx, DWORD PTR _attrib$[ebp]
	call	?Next@TiXmlAttribute@@QBEPBV1@XZ	; TiXmlAttribute::Next
	mov	DWORD PTR _attrib$[ebp], eax
$LN14@Print:
	cmp	DWORD PTR _attrib$[ebp], 0
	je	SHORT $LN12@Print

; 783  : 	{
; 784  : 		fprintf( cfile, " " );

	push	OFFSET $SG7381
	mov	ecx, DWORD PTR _cfile$[ebp]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 8

; 785  : 		attrib->Print( cfile, depth );

	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _cfile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attrib$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _attrib$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 786  : 	}

	jmp	SHORT $LN13@Print
$LN12@Print:

; 787  : 
; 788  : 	// There are 3 different formatting approaches:
; 789  : 	// 1) An element without children is printed as a <foo /> node
; 790  : 	// 2) An element with only a text child is printed as <foo> text </foo>
; 791  : 	// 3) An element with children is printed on multiple lines.
; 792  : 	TiXmlNode* node;
; 793  : 	if ( !firstChild )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN11@Print

; 794  : 	{
; 795  : 		fprintf( cfile, " />" );

	push	OFFSET $SG7384
	mov	edx, DWORD PTR _cfile$[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	jmp	$LN18@Print
$LN11@Print:

; 796  : 	}
; 797  : 	else if ( firstChild == lastChild && firstChild->ToText() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+28]
	jne	SHORT $LN9@Print
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+44]
	call	eax
	test	eax, eax
	je	SHORT $LN9@Print

; 798  : 	{
; 799  : 		fprintf( cfile, ">" );

	push	OFFSET $SG7387
	mov	ecx, DWORD PTR _cfile$[ebp]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 8

; 800  : 		firstChild->Print( cfile, depth + 1 );

	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _cfile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 801  : 		fprintf( cfile, "</%s>", value.c_str() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	push	OFFSET $SG7388
	mov	ecx, DWORD PTR _cfile$[ebp]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH

; 802  : 	}
; 803  : 	else

	jmp	$LN18@Print
$LN9@Print:

; 804  : 	{
; 805  : 		fprintf( cfile, ">" );

	push	OFFSET $SG7390
	mov	edx, DWORD PTR _cfile$[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 8

; 806  : 
; 807  : 		for ( node = firstChild; node; node=node->NextSibling() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _node$[ebp], ecx
	jmp	SHORT $LN7@Print
$LN6@Print:
	mov	ecx, DWORD PTR _node$[ebp]
	call	?NextSibling@TiXmlNode@@QAEPAV1@XZ	; TiXmlNode::NextSibling
	mov	DWORD PTR _node$[ebp], eax
$LN7@Print:
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN5@Print

; 808  : 		{
; 809  : 			if ( !node->ToText() )

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	test	eax, eax
	jne	SHORT $LN4@Print

; 810  : 			{
; 811  : 				fprintf( cfile, "\n" );

	push	OFFSET $SG7395
	mov	eax, DWORD PTR _cfile$[ebp]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN4@Print:

; 812  : 			}
; 813  : 			node->Print( cfile, depth+1 );

	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _cfile$[ebp]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 814  : 		}

	jmp	SHORT $LN6@Print
$LN5@Print:

; 815  : 		fprintf( cfile, "\n" );

	push	OFFSET $SG7396
	mov	ecx, DWORD PTR _cfile$[ebp]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 8

; 816  : 		for( i=0; i<depth; ++i ) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Print
$LN2@Print:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@Print:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _depth$[ebp]
	jge	SHORT $LN1@Print

; 817  : 			fprintf( cfile, "    " );

	push	OFFSET $SG7400
	mov	ecx, DWORD PTR _cfile$[ebp]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 8

; 818  : 		}

	jmp	SHORT $LN2@Print
$LN1@Print:

; 819  : 		fprintf( cfile, "</%s>", value.c_str() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	push	OFFSET $SG7401
	mov	edx, DWORD PTR _cfile$[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
$LN18@Print:

; 820  : 	}
; 821  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Print@TiXmlElement@@UBEXPAU_iobuf@@H@Z ENDP		; TiXmlElement::Print
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
_TEXT	ENDS
;	COMDAT ?NextSibling@TiXmlNode@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NextSibling@TiXmlNode@@QAEPAV1@XZ PROC			; TiXmlNode::NextSibling, COMDAT
; _this$ = ecx

; 633  : 	TiXmlNode* NextSibling()							{ return next; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?NextSibling@TiXmlNode@@QAEPAV1@XZ ENDP			; TiXmlNode::NextSibling
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?First@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@XZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?First@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@XZ PROC	; TiXmlAttributeSet::First, COMDAT
; _this$ = ecx

; 913  : 	const TiXmlAttribute* First()	const	{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	ecx, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@First@2
	mov	DWORD PTR tv67[ebp], 0
	jmp	SHORT $LN4@First@2
$LN3@First@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR tv67[ebp], eax
$LN4@First@2:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?First@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@XZ ENDP	; TiXmlAttributeSet::First
_TEXT	ENDS
PUBLIC	?Name@TiXmlAttribute@@QBEPBDXZ			; TiXmlAttribute::Name
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_node$ = -8						; size = 4
_attribute$ = -4					; size = 4
_target$ = 8						; size = 4
?CopyTo@TiXmlElement@@IBEXPAV1@@Z PROC			; TiXmlElement::CopyTo
; _this$ = ecx

; 825  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 826  : 	// superclass:
; 827  : 	TiXmlNode::CopyTo( target );

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyTo@TiXmlNode@@IBEXPAV1@@Z		; TiXmlNode::CopyTo

; 828  : 
; 829  : 	// Element class: 
; 830  : 	// Clone the attributes, then clone the children.
; 831  : 	const TiXmlAttribute* attribute = 0;

	mov	DWORD PTR _attribute$[ebp], 0

; 832  : 	for(	attribute = attributeSet.First();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?First@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@XZ ; TiXmlAttributeSet::First
	mov	DWORD PTR _attribute$[ebp], eax

; 833  : 	attribute;

	jmp	SHORT $LN6@CopyTo
$LN5@CopyTo:

; 834  : 	attribute = attribute->Next() )

	mov	ecx, DWORD PTR _attribute$[ebp]
	call	?Next@TiXmlAttribute@@QBEPBV1@XZ	; TiXmlAttribute::Next
	mov	DWORD PTR _attribute$[ebp], eax
$LN6@CopyTo:
	cmp	DWORD PTR _attribute$[ebp], 0
	je	SHORT $LN4@CopyTo

; 835  : 	{
; 836  : 		target->SetAttribute( attribute->Name(), attribute->Value() );

	mov	ecx, DWORD PTR _attribute$[ebp]
	call	?Value@TiXmlAttribute@@QBEPBDXZ		; TiXmlAttribute::Value
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	call	?Name@TiXmlAttribute@@QBEPBDXZ		; TiXmlAttribute::Name
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	call	?SetAttribute@TiXmlElement@@QAEXPBD0@Z	; TiXmlElement::SetAttribute

; 837  : 	}

	jmp	SHORT $LN5@CopyTo
$LN4@CopyTo:

; 838  : 
; 839  : 	TiXmlNode* node = 0;

	mov	DWORD PTR _node$[ebp], 0

; 840  : 	for ( node = firstChild; node; node = node->NextSibling() )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _node$[ebp], edx
	jmp	SHORT $LN3@CopyTo
$LN2@CopyTo:
	mov	ecx, DWORD PTR _node$[ebp]
	call	?NextSibling@TiXmlNode@@QAEPAV1@XZ	; TiXmlNode::NextSibling
	mov	DWORD PTR _node$[ebp], eax
$LN3@CopyTo:
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN7@CopyTo

; 841  : 	{
; 842  : 		target->LinkEndChild( node->Clone() );

	mov	eax, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	call	?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild
	jmp	SHORT $LN2@CopyTo
$LN7@CopyTo:

; 843  : 	}
; 844  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CopyTo@TiXmlElement@@IBEXPAV1@@Z ENDP			; TiXmlElement::CopyTo
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
_TEXT	ENDS
;	COMDAT ?Name@TiXmlAttribute@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Name@TiXmlAttribute@@QBEPBDXZ PROC			; TiXmlAttribute::Name, COMDAT
; _this$ = ecx

; 812  : 	const char*		Name()  const		{ return name.c_str(); }		///< Return the name of this attribute.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	mov	esp, ebp
	pop	ebp
	ret	0
?Name@TiXmlAttribute@@QBEPBDXZ ENDP			; TiXmlAttribute::Name
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$7419 = -4						; size = 4
_visitor$ = 8						; size = 4
?Accept@TiXmlElement@@UBE_NPAVTiXmlVisitor@@@Z PROC	; TiXmlElement::Accept
; _this$ = ecx

; 847  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 848  : 	if ( visitor->VisitEnter( *this, attributeSet.First() ) ) 

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?First@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@XZ ; TiXmlAttributeSet::First
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@Accept

; 849  : 	{
; 850  : 		for ( const TiXmlNode* node=FirstChild(); node; node=node->NextSibling() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::FirstChild
	mov	DWORD PTR _node$7419[ebp], eax
	jmp	SHORT $LN4@Accept
$LN3@Accept:
	mov	ecx, DWORD PTR _node$7419[ebp]
	call	?NextSibling@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::NextSibling
	mov	DWORD PTR _node$7419[ebp], eax
$LN4@Accept:
	cmp	DWORD PTR _node$7419[ebp], 0
	je	SHORT $LN5@Accept

; 851  : 		{
; 852  : 			if ( !node->Accept( visitor ) )

	mov	edx, DWORD PTR _visitor$[ebp]
	push	edx
	mov	eax, DWORD PTR _node$7419[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _node$7419[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@Accept

; 853  : 				break;

	jmp	SHORT $LN5@Accept
$LN1@Accept:

; 854  : 		}

	jmp	SHORT $LN3@Accept
$LN5@Accept:

; 855  : 	}
; 856  : 	return visitor->VisitExit( *this );

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 857  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Accept@TiXmlElement@@UBE_NPAVTiXmlVisitor@@@Z ENDP	; TiXmlElement::Accept
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ$0
__ehfuncinfo$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv78 = -32						; size = 4
_this$ = -28						; size = 4
$T8551 = -24						; size = 4
$T8550 = -20						; size = 4
_clone$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ PROC		; TiXmlElement::Clone
; _this$ = ecx

; 861  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 862  : 	TiXmlElement* clone = new TiXmlElement( Value() );

	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8551[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8551[ebp], 0
	je	SHORT $LN4@Clone
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@TiXmlNode@@QBEPBDXZ		; TiXmlNode::Value
	push	eax
	mov	ecx, DWORD PTR $T8551[ebp]
	call	??0TiXmlElement@@QAE@PBD@Z		; TiXmlElement::TiXmlElement
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN5@Clone
$LN4@Clone:
	mov	DWORD PTR tv78[ebp], 0
$LN5@Clone:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR $T8550[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T8550[ebp]
	mov	DWORD PTR _clone$[ebp], ecx

; 863  : 	if ( !clone )

	cmp	DWORD PTR _clone$[ebp], 0
	jne	SHORT $LN1@Clone

; 864  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@Clone
$LN1@Clone:

; 865  : 
; 866  : 	CopyTo( clone );

	mov	edx, DWORD PTR _clone$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyTo@TiXmlElement@@IBEXPAV1@@Z	; TiXmlElement::CopyTo

; 867  : 	return clone;

	mov	eax, DWORD PTR _clone$[ebp]
$LN2@Clone:

; 868  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ$0:
	mov	eax, DWORD PTR $T8551[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ ENDP		; TiXmlElement::Clone
PUBLIC	?GetText@TiXmlElement@@QBEPBDXZ			; TiXmlElement::GetText
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_childText$7438 = -8					; size = 4
_child$ = -4						; size = 4
?GetText@TiXmlElement@@QBEPBDXZ PROC			; TiXmlElement::GetText
; _this$ = ecx

; 872  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 873  : 	const TiXmlNode* child = this->FirstChild();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::FirstChild
	mov	DWORD PTR _child$[ebp], eax

; 874  : 	if ( child ) {

	cmp	DWORD PTR _child$[ebp], 0
	je	SHORT $LN2@GetText

; 875  : 		const TiXmlText* childText = child->ToText();

	mov	eax, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _child$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	mov	DWORD PTR _childText$7438[ebp], eax

; 876  : 		if ( childText ) {

	cmp	DWORD PTR _childText$7438[ebp], 0
	je	SHORT $LN2@GetText

; 877  : 			return childText->Value();

	mov	ecx, DWORD PTR _childText$7438[ebp]
	call	?Value@TiXmlNode@@QBEPBDXZ		; TiXmlNode::Value
	jmp	SHORT $LN3@GetText
$LN2@GetText:

; 878  : 		}
; 879  : 	}
; 880  : 	return 0;

	xor	eax, eax
$LN3@GetText:

; 881  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetText@TiXmlElement@@QBEPBDXZ ENDP			; TiXmlElement::GetText
_TEXT	ENDS
PUBLIC	?ClearError@TiXmlDocument@@QAEXXZ		; TiXmlDocument::ClearError
PUBLIC	??_7TiXmlDocument@@6B@				; TiXmlDocument::`vftable'
PUBLIC	??0TiXmlDocument@@QAE@XZ			; TiXmlDocument::TiXmlDocument
PUBLIC	??_R4TiXmlDocument@@6B@				; TiXmlDocument::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlDocument@@@8			; TiXmlDocument `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlDocument@@8				; TiXmlDocument::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlDocument@@8				; TiXmlDocument::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlDocument@@8			; TiXmlDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Print@TiXmlDocument@@UBEXPAU_iobuf@@H@Z	; TiXmlDocument::Print
PUBLIC	?ToDocument@TiXmlDocument@@UAEPAV1@XZ		; TiXmlDocument::ToDocument
PUBLIC	?ToDocument@TiXmlDocument@@UBEPBV1@XZ		; TiXmlDocument::ToDocument
PUBLIC	?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ	; TiXmlDocument::Clone
PUBLIC	?Accept@TiXmlDocument@@UBE_NPAVTiXmlVisitor@@@Z	; TiXmlDocument::Accept
EXTRN	??_ETiXmlDocument@@UAEPAXI@Z:PROC		; TiXmlDocument::`vector deleting destructor'
EXTRN	?Parse@TiXmlDocument@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:PROC ; TiXmlDocument::Parse
;	COMDAT ??_R1A@?0A@EA@TiXmlDocument@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlDocument@@8 DD FLAT:??_R0?AVTiXmlDocument@@@8 ; TiXmlDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlDocument@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlDocument@@8
rdata$r	SEGMENT
??_R2TiXmlDocument@@8 DD FLAT:??_R1A@?0A@EA@TiXmlDocument@@8 ; TiXmlDocument::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlNode@@8
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlDocument@@8
rdata$r	SEGMENT
??_R3TiXmlDocument@@8 DD 00H				; TiXmlDocument::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TiXmlDocument@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlDocument@@@8
_DATA	SEGMENT
??_R0?AVTiXmlDocument@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlDocument `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlDocument@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlDocument@@6B@
rdata$r	SEGMENT
??_R4TiXmlDocument@@6B@ DD 00H				; TiXmlDocument::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlDocument@@@8
	DD	FLAT:??_R3TiXmlDocument@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlDocument@@6B@
CONST	SEGMENT
??_7TiXmlDocument@@6B@ DD FLAT:??_R4TiXmlDocument@@6B@	; TiXmlDocument::`vftable'
	DD	FLAT:??_ETiXmlDocument@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlDocument@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlDocument@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	FLAT:?ToDocument@TiXmlDocument@@UAEPAV1@XZ
	DD	FLAT:?ToDocument@TiXmlDocument@@UBEPBV1@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
	DD	FLAT:?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ
	DD	FLAT:?Accept@TiXmlDocument@@UBE_NPAVTiXmlVisitor@@@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0TiXmlDocument@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlDocument@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TiXmlDocument@@QAE@XZ$1
__ehfuncinfo$??0TiXmlDocument@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0TiXmlDocument@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0TiXmlDocument@@QAE@XZ PROC				; TiXmlDocument::TiXmlDocument
; _this$ = ecx

; 885  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlDocument@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlDocument@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0TiXmlCursor@@QAE@XZ			; TiXmlCursor::TiXmlCursor

; 886  : 	tabsize = 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], 4

; 887  : 	useMicrosoftBOM = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+68], 0

; 888  : 	ClearError();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearError@TiXmlDocument@@QAEXXZ	; TiXmlDocument::ClearError

; 889  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0TiXmlDocument@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__unwindfunclet$??0TiXmlDocument@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??0TiXmlDocument@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlDocument@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlDocument@@QAE@XZ ENDP				; TiXmlDocument::TiXmlDocument
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File i:\svnroot\client\ogremain\tinyxml.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?ClearError@TiXmlDocument@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearError@TiXmlDocument@@QAEXXZ PROC			; TiXmlDocument::ClearError, COMDAT
; _this$ = ecx

; 1510 : 	void ClearError()						{	error = false; 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0

; 1511 : 												errorId = 0; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 0

; 1512 : 												errorDesc = ""; 

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 1513 : 												errorLocation.row = errorLocation.col = 0; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0

; 1514 : 												//errorLocation.last = 0; 
; 1515 : 											}

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearError@TiXmlDocument@@QAEXXZ ENDP			; TiXmlDocument::ClearError
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToDocument@TiXmlDocument@@UBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDocument@TiXmlDocument@@UBEPBV1@XZ PROC		; TiXmlDocument::ToDocument, COMDAT
; _this$ = ecx

; 1531 : 	virtual const TiXmlDocument*    ToDocument()    const { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDocument@TiXmlDocument@@UBEPBV1@XZ ENDP		; TiXmlDocument::ToDocument
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToDocument@TiXmlDocument@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDocument@TiXmlDocument@@UAEPAV1@XZ PROC		; TiXmlDocument::ToDocument, COMDAT
; _this$ = ecx

; 1532 : 	virtual TiXmlDocument*          ToDocument()          { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDocument@TiXmlDocument@@UAEPAV1@XZ ENDP		; TiXmlDocument::ToDocument
_TEXT	ENDS
PUBLIC	??1TiXmlDocument@@UAE@XZ			; TiXmlDocument::~TiXmlDocument
; Function compile flags: /Odtp
;	COMDAT ??_GTiXmlDocument@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlDocument@@UAEPAXI@Z PROC			; TiXmlDocument::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlDocument@@UAE@XZ		; TiXmlDocument::~TiXmlDocument
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlDocument@@UAEPAXI@Z ENDP			; TiXmlDocument::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1TiXmlDocument@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TiXmlDocument@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1TiXmlDocument@@UAE@XZ$1
__ehfuncinfo$??1TiXmlDocument@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1TiXmlDocument@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1TiXmlDocument@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1TiXmlDocument@@UAE@XZ PROC				; TiXmlDocument::~TiXmlDocument, COMDAT
; _this$ = ecx

; 1401 : 	virtual ~TiXmlDocument() {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TiXmlDocument@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlDocument@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1TiXmlDocument@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__unwindfunclet$??1TiXmlDocument@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??1TiXmlDocument@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TiXmlDocument@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TiXmlDocument@@UAE@XZ ENDP				; TiXmlDocument::~TiXmlDocument
PUBLIC	??0TiXmlDocument@@QAE@PBD@Z			; TiXmlDocument::TiXmlDocument
xdata$x	SEGMENT
__unwindtable$??0TiXmlDocument@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlDocument@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TiXmlDocument@@QAE@PBD@Z$1
__ehfuncinfo$??0TiXmlDocument@@QAE@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0TiXmlDocument@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_documentName$ = 8					; size = 4
??0TiXmlDocument@@QAE@PBD@Z PROC			; TiXmlDocument::TiXmlDocument
; _this$ = ecx

; 892  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlDocument@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlDocument@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0TiXmlCursor@@QAE@XZ			; TiXmlCursor::TiXmlCursor

; 893  : 	tabsize = 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], 4

; 894  : 	useMicrosoftBOM = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+68], 0

; 895  : 	value = documentName;

	mov	eax, DWORD PTR _documentName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 896  : 	ClearError();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearError@TiXmlDocument@@QAEXXZ	; TiXmlDocument::ClearError

; 897  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0TiXmlDocument@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__unwindfunclet$??0TiXmlDocument@@QAE@PBD@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??0TiXmlDocument@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlDocument@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlDocument@@QAE@PBD@Z ENDP			; TiXmlDocument::TiXmlDocument
PUBLIC	?CopyTo@TiXmlDocument@@ABEXPAV1@@Z		; TiXmlDocument::CopyTo
PUBLIC	??0TiXmlDocument@@QAE@ABV0@@Z			; TiXmlDocument::TiXmlDocument
xdata$x	SEGMENT
__unwindtable$??0TiXmlDocument@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlDocument@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TiXmlDocument@@QAE@ABV0@@Z$1
__ehfuncinfo$??0TiXmlDocument@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0TiXmlDocument@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_copy$ = 8						; size = 4
??0TiXmlDocument@@QAE@ABV0@@Z PROC			; TiXmlDocument::TiXmlDocument
; _this$ = ecx

; 912  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlDocument@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlDocument@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0TiXmlCursor@@QAE@XZ			; TiXmlCursor::TiXmlCursor

; 913  : 	copy.CopyTo( this );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _copy$[ebp]
	call	?CopyTo@TiXmlDocument@@ABEXPAV1@@Z	; TiXmlDocument::CopyTo

; 914  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0TiXmlDocument@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__unwindfunclet$??0TiXmlDocument@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??0TiXmlDocument@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlDocument@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlDocument@@QAE@ABV0@@Z ENDP			; TiXmlDocument::TiXmlDocument
PUBLIC	??4TiXmlDocument@@QAEXABV0@@Z			; TiXmlDocument::operator=
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_copy$ = 8						; size = 4
??4TiXmlDocument@@QAEXABV0@@Z PROC			; TiXmlDocument::operator=
; _this$ = ecx

; 918  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 919  : 	Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@TiXmlNode@@QAEXXZ		; TiXmlNode::Clear

; 920  : 	copy.CopyTo( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _copy$[ebp]
	call	?CopyTo@TiXmlDocument@@ABEXPAV1@@Z	; TiXmlDocument::CopyTo

; 921  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??4TiXmlDocument@@QAEXABV0@@Z ENDP			; TiXmlDocument::operator=
_TEXT	ENDS
PUBLIC	?LoadFile@TiXmlDocument@@QAE_NPBDW4TiXmlEncoding@@@Z ; TiXmlDocument::LoadFile
PUBLIC	?LoadFile@TiXmlDocument@@QAE_NW4TiXmlEncoding@@@Z ; TiXmlDocument::LoadFile
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_encoding$ = 8						; size = 4
?LoadFile@TiXmlDocument@@QAE_NW4TiXmlEncoding@@@Z PROC	; TiXmlDocument::LoadFile
; _this$ = ecx

; 925  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 926  : 	// See STL_STRING_BUG below.
; 927  : 	//StringToBuffer buf( value );
; 928  : 
; 929  : 	return LoadFile( Value(), encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@TiXmlNode@@QBEPBDXZ		; TiXmlNode::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadFile@TiXmlDocument@@QAE_NPBDW4TiXmlEncoding@@@Z ; TiXmlDocument::LoadFile

; 930  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LoadFile@TiXmlDocument@@QAE_NW4TiXmlEncoding@@@Z ENDP	; TiXmlDocument::LoadFile
_TEXT	ENDS
PUBLIC	?SaveFile@TiXmlDocument@@QBE_NPBD@Z		; TiXmlDocument::SaveFile
PUBLIC	?SaveFile@TiXmlDocument@@QBE_NXZ		; TiXmlDocument::SaveFile
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SaveFile@TiXmlDocument@@QBE_NXZ PROC			; TiXmlDocument::SaveFile
; _this$ = ecx

; 934  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 935  : 	// See STL_STRING_BUG below.
; 936  : //	StringToBuffer buf( value );
; 937  : //
; 938  : //	if ( buf.buffer && SaveFile( buf.buffer ) )
; 939  : //		return true;
; 940  : //
; 941  : //	return false;
; 942  : 	return SaveFile( Value() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@TiXmlNode@@QBEPBDXZ		; TiXmlNode::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveFile@TiXmlDocument@@QBE_NPBD@Z	; TiXmlDocument::SaveFile

; 943  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveFile@TiXmlDocument@@QBE_NXZ ENDP			; TiXmlDocument::SaveFile
_TEXT	ENDS
PUBLIC	?LoadFile@TiXmlDocument@@QAE_NPAU_iobuf@@W4TiXmlEncoding@@@Z ; TiXmlDocument::LoadFile
PUBLIC	??4TiXmlString@@QAEAAV0@ABV0@@Z			; TiXmlString::operator=
PUBLIC	??0TiXmlString@@QAE@PBD@Z			; TiXmlString::TiXmlString
EXTRN	__imp__fclose:PROC
xdata$x	SEGMENT
__unwindtable$?LoadFile@TiXmlDocument@@QAE_NPBDW4TiXmlEncoding@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadFile@TiXmlDocument@@QAE_NPBDW4TiXmlEncoding@@@Z$0
__ehfuncinfo$?LoadFile@TiXmlDocument@@QAE_NPBDW4TiXmlEncoding@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadFile@TiXmlDocument@@QAE_NPBDW4TiXmlEncoding@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T8604 = -23						; size = 1
$T8603 = -22						; size = 1
_result$7471 = -21					; size = 1
_filename$ = -20					; size = 4
_file$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__filename$ = 8						; size = 4
_encoding$ = 12						; size = 4
?LoadFile@TiXmlDocument@@QAE_NPBDW4TiXmlEncoding@@@Z PROC ; TiXmlDocument::LoadFile
; _this$ = ecx

; 946  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadFile@TiXmlDocument@@QAE_NPBDW4TiXmlEncoding@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 947  : 	// There was a really terrifying little bug here. The code:
; 948  : 	//		value = filename
; 949  : 	// in the STL case, cause the assignment method of the std::string to
; 950  : 	// be called. What is strange, is that the std::string had the same
; 951  : 	// address as it's c_str() method, and so bad things happen. Looks
; 952  : 	// like a bug in the Microsoft STL implementation.
; 953  : 	// Add an extra string to avoid the crash.
; 954  : 	TIXML_STRING filename( _filename );

	mov	eax, DWORD PTR __filename$[ebp]
	push	eax
	lea	ecx, DWORD PTR _filename$[ebp]
	call	??0TiXmlString@@QAE@PBD@Z		; TiXmlString::TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 955  : 	value = filename;

	lea	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4TiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator=

; 956  : 
; 957  : 	// reading in binary mode so that tinyxml can normalize the EOL
; 958  : 	FILE* file = TiXmlFOpen( value.c_str (), "rb" );	

	push	OFFSET $SG7469
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	call	?TiXmlFOpen@@YAPAU_iobuf@@PBD0@Z	; TiXmlFOpen
	add	esp, 8
	mov	DWORD PTR _file$[ebp], eax

; 959  : 
; 960  : 	if ( file )

	cmp	DWORD PTR _file$[ebp], 0
	je	SHORT $LN2@LoadFile

; 961  : 	{
; 962  : 		bool result = LoadFile( file, encoding );

	mov	edx, DWORD PTR _encoding$[ebp]
	push	edx
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadFile@TiXmlDocument@@QAE_NPAU_iobuf@@W4TiXmlEncoding@@@Z ; TiXmlDocument::LoadFile
	mov	BYTE PTR _result$7471[ebp], al

; 963  : 		fclose( file );

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	DWORD PTR __imp__fclose
	add	esp, 4

; 964  : 		return result;

	mov	dl, BYTE PTR _result$7471[ebp]
	mov	BYTE PTR $T8603[ebp], dl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _filename$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	al, BYTE PTR $T8603[ebp]
	jmp	SHORT $LN3@LoadFile

; 965  : 	}
; 966  : 	else

	jmp	SHORT $LN1@LoadFile
$LN2@LoadFile:

; 967  : 	{
; 968  : 		SetError( TIXML_ERROR_OPENING_FILE, 0, 0, TIXML_ENCODING_UNKNOWN );

	push	0
	push	0
	push	0
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError

; 969  : 		return false;

	mov	BYTE PTR $T8604[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _filename$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	al, BYTE PTR $T8604[ebp]
	jmp	SHORT $LN3@LoadFile
$LN1@LoadFile:

; 970  : 	}
; 971  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _filename$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
$LN3@LoadFile:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadFile@TiXmlDocument@@QAE_NPBDW4TiXmlEncoding@@@Z$0:
	lea	ecx, DWORD PTR _filename$[ebp]
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$?LoadFile@TiXmlDocument@@QAE_NPBDW4TiXmlEncoding@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadFile@TiXmlDocument@@QAE_NPBDW4TiXmlEncoding@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadFile@TiXmlDocument@@QAE_NPBDW4TiXmlEncoding@@@Z ENDP ; TiXmlDocument::LoadFile
PUBLIC	?start@TiXmlString@@ABEPADXZ			; TiXmlString::start
PUBLIC	?init@TiXmlString@@AAEXI@Z			; TiXmlString::init
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinystr.h
;	COMDAT ??0TiXmlString@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_copy$ = 8						; size = 4
??0TiXmlString@@QAE@PBD@Z PROC				; TiXmlString::TiXmlString, COMDAT
; _this$ = ecx

; 91   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 92   : 		init( static_cast<size_type>( strlen(copy) ));

	mov	ecx, DWORD PTR _copy$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@TiXmlString@@AAEXI@Z		; TiXmlString::init

; 93   : 		memcpy(start(), copy, length());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@TiXmlString@@QBEIXZ		; TiXmlString::length
	push	eax
	mov	edx, DWORD PTR _copy$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?start@TiXmlString@@ABEPADXZ		; TiXmlString::start
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 94   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0TiXmlString@@QAE@PBD@Z ENDP				; TiXmlString::TiXmlString
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??4TiXmlString@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_copy$ = 8						; size = 4
??4TiXmlString@@QAEAAV0@ABV0@@Z PROC			; TiXmlString::operator=, COMDAT
; _this$ = ecx

; 117  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 		return assign(copy.start(), copy.length());

	mov	ecx, DWORD PTR _copy$[ebp]
	call	?length@TiXmlString@@QBEIXZ		; TiXmlString::length
	push	eax
	mov	ecx, DWORD PTR _copy$[ebp]
	call	?start@TiXmlString@@ABEPADXZ		; TiXmlString::start
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::assign

; 119  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??4TiXmlString@@QAEAAV0@ABV0@@Z ENDP			; TiXmlString::operator=
_TEXT	ENDS
PUBLIC	?init@TiXmlString@@AAEXII@Z			; TiXmlString::init
; Function compile flags: /Odtp
;	COMDAT ?init@TiXmlString@@AAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sz$ = 8						; size = 4
?init@TiXmlString@@AAEXI@Z PROC				; TiXmlString::init, COMDAT
; _this$ = ecx

; 220  : 	void init(size_type sz) { init(sz, sz); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@TiXmlString@@AAEXII@Z		; TiXmlString::init
	mov	esp, ebp
	pop	ebp
	ret	4
?init@TiXmlString@@AAEXI@Z ENDP				; TiXmlString::init
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?start@TiXmlString@@ABEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?start@TiXmlString@@ABEPADXZ PROC			; TiXmlString::start, COMDAT
; _this$ = ecx

; 222  : 	char* start() const { return rep_->str; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?start@TiXmlString@@ABEPADXZ ENDP			; TiXmlString::start
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?init@TiXmlString@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T8619 = -12						; size = 4
_intsNeeded$5783 = -8					; size = 4
_bytesNeeded$5781 = -4					; size = 4
_sz$ = 8						; size = 4
_cap$ = 12						; size = 4
?init@TiXmlString@@AAEXII@Z PROC			; TiXmlString::init, COMDAT
; _this$ = ecx

; 232  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 233  : 		if (cap)

	cmp	DWORD PTR _cap$[ebp], 0
	je	SHORT $LN2@init

; 234  : 		{
; 235  : 			// Lee: the original form:
; 236  : 			//	rep_ = static_cast<Rep*>(operator new(sizeof(Rep) + cap));
; 237  : 			// doesn't work in some cases of new being overloaded. Switching
; 238  : 			// to the normal allocation, although use an 'int' for systems
; 239  : 			// that are overly picky about structure alignment.
; 240  : 			const size_type bytesNeeded = sizeof(Rep) + cap;

	mov	eax, DWORD PTR _cap$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _bytesNeeded$5781[ebp], eax

; 241  : 			const size_type intsNeeded = ( bytesNeeded + sizeof(int) - 1 ) / sizeof( int ); 

	mov	ecx, DWORD PTR _bytesNeeded$5781[ebp]
	add	ecx, 3
	shr	ecx, 2
	mov	DWORD PTR _intsNeeded$5783[ebp], ecx

; 242  : 			rep_ = reinterpret_cast<Rep*>( new int[ intsNeeded ] );

	xor	ecx, ecx
	mov	eax, DWORD PTR _intsNeeded$5783[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8619[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T8619[ebp]
	mov	DWORD PTR [eax], ecx

; 243  : 
; 244  : 			rep_->str[ rep_->size = sz ] = '\0';

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _sz$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _sz$[ebp]
	mov	BYTE PTR [eax+ecx+8], 0

; 245  : 			rep_->capacity = cap;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cap$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 246  : 		}
; 247  : 		else

	jmp	SHORT $LN3@init
$LN2@init:

; 248  : 		{
; 249  : 			rep_ = &nullrep_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ?nullrep_@TiXmlString@@0URep@1@A ; TiXmlString::nullrep_
$LN3@init:

; 250  : 		}
; 251  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?init@TiXmlString@@AAEXII@Z ENDP			; TiXmlString::init
_TEXT	ENDS
PUBLIC	?Error@TiXmlDocument@@QBE_NXZ			; TiXmlDocument::Error
PUBLIC	?LoadBuffer@TiXmlDocument@@QAE_NPBDIW4TiXmlEncoding@@@Z ; TiXmlDocument::LoadBuffer
EXTRN	?reserve@TiXmlString@@QAEXI@Z:PROC		; TiXmlString::reserve
xdata$x	SEGMENT
__unwindtable$?LoadBuffer@TiXmlDocument@@QAE_NPBDIW4TiXmlEncoding@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadBuffer@TiXmlDocument@@QAE_NPBDIW4TiXmlEncoding@@@Z$0
__ehfuncinfo$?LoadBuffer@TiXmlDocument@@QAE_NPBDIW4TiXmlEncoding@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadBuffer@TiXmlDocument@@QAE_NPBDIW4TiXmlEncoding@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T8623 = -26						; size = 1
$T8622 = -25						; size = 1
_data$ = -24						; size = 4
_lastPos$ = -20						; size = 4
_p$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_buf$ = 8						; size = 4
_length$ = 12						; size = 4
_encoding$ = 16						; size = 4
?LoadBuffer@TiXmlDocument@@QAE_NPBDIW4TiXmlEncoding@@@Z PROC ; TiXmlDocument::LoadBuffer
; _this$ = ecx

; 974  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadBuffer@TiXmlDocument@@QAE_NPBDIW4TiXmlEncoding@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 975  : 	TIXML_STRING data;

	lea	ecx, DWORD PTR _data$[ebp]
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 976  : 	data.reserve( length );

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$[ebp]
	call	?reserve@TiXmlString@@QAEXI@Z		; TiXmlString::reserve

; 977  : 
; 978  : 	const char* lastPos = buf;

	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _lastPos$[ebp], ecx

; 979  : 	const char* p = buf;

	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _p$[ebp], edx
$LN12@LoadBuffer:

; 980  : 
; 981  : 	while(p<buf+length) {

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	cmp	DWORD PTR _p$[ebp], eax
	jae	$LN11@LoadBuffer

; 982  : 		assert( p < (buf+length) );
; 983  : 		if ( *p == 0xa ) {

	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN10@LoadBuffer

; 984  : 			// Newline character. No special rules for this. Append all the characters
; 985  : 			// since the last string, and include the newline.
; 986  : 			data.append( lastPos, (p-lastPos+1) );	// append, include the newline

	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _lastPos$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _lastPos$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _data$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 987  : 			++p;									// move past the newline

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx

; 988  : 			lastPos = p;							// and point to the new buffer (may be 0)

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _lastPos$[ebp], eax
	jmp	SHORT $LN9@LoadBuffer
$LN10@LoadBuffer:

; 989  : 			assert( p <= (buf+length) );
; 990  : 		}
; 991  : 		else if ( *p == 0xd ) {

	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN8@LoadBuffer

; 992  : 			// Carriage return. Append what we have so far, then
; 993  : 			// handle moving forward in the buffer.
; 994  : 			if ( (p-lastPos) > 0 ) {

	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _lastPos$[ebp]
	test	eax, eax
	jle	SHORT $LN7@LoadBuffer

; 995  : 				data.append( lastPos, p-lastPos );	// do not add the CR

	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR _lastPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lastPos$[ebp]
	push	edx
	lea	ecx, DWORD PTR _data$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append
$LN7@LoadBuffer:

; 996  : 			}
; 997  : 			data += (char)0xa;						// a proper newline

	push	10					; 0000000aH
	lea	ecx, DWORD PTR _data$[ebp]
	call	??YTiXmlString@@QAEAAV0@D@Z		; TiXmlString::operator+=

; 998  : 
; 999  : 			if ( *(p+1) == 0xa ) {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN6@LoadBuffer

; 1000 : 				// Carriage return - new line sequence
; 1001 : 				p += 2;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx

; 1002 : 				lastPos = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _lastPos$[ebp], eax

; 1003 : 				assert( p <= (buf+length) );
; 1004 : 			}
; 1005 : 			else {

	jmp	SHORT $LN5@LoadBuffer
$LN6@LoadBuffer:

; 1006 : 				// it was followed by something else...that is presumably characters again.
; 1007 : 				++p;

	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx

; 1008 : 				lastPos = p;

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _lastPos$[ebp], edx
$LN5@LoadBuffer:

; 1009 : 				assert( p <= (buf+length) );
; 1010 : 			}
; 1011 : 		}
; 1012 : 		else {

	jmp	SHORT $LN9@LoadBuffer
$LN8@LoadBuffer:

; 1013 : 			++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN9@LoadBuffer:

; 1014 : 		}
; 1015 : 	}

	jmp	$LN12@LoadBuffer
$LN11@LoadBuffer:

; 1016 : 	// Handle any left over characters.
; 1017 : 	if ( p-lastPos ) {

	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR _lastPos$[ebp]
	je	SHORT $LN3@LoadBuffer

; 1018 : 		data.append( lastPos, p-lastPos );

	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR _lastPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _lastPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append
$LN3@LoadBuffer:

; 1019 : 	}		
; 1020 : 
; 1021 : 	Parse( data.c_str(), 0, encoding );

	mov	ecx, DWORD PTR _encoding$[ebp]
	push	ecx
	push	0
	lea	ecx, DWORD PTR _data$[ebp]
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx

; 1022 : 
; 1023 : 	if (  Error() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Error@TiXmlDocument@@QBE_NXZ		; TiXmlDocument::Error
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@LoadBuffer

; 1024 : 		return false;

	mov	BYTE PTR $T8622[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _data$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	al, BYTE PTR $T8622[ebp]
	jmp	SHORT $LN13@LoadBuffer

; 1025 : 	else

	jmp	SHORT $LN1@LoadBuffer
$LN2@LoadBuffer:

; 1026 : 		return true;

	mov	BYTE PTR $T8623[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _data$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	al, BYTE PTR $T8623[ebp]
	jmp	SHORT $LN13@LoadBuffer
$LN1@LoadBuffer:

; 1027 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _data$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
$LN13@LoadBuffer:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadBuffer@TiXmlDocument@@QAE_NPBDIW4TiXmlEncoding@@@Z$0:
	lea	ecx, DWORD PTR _data$[ebp]
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$?LoadBuffer@TiXmlDocument@@QAE_NPBDIW4TiXmlEncoding@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadBuffer@TiXmlDocument@@QAE_NPBDIW4TiXmlEncoding@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadBuffer@TiXmlDocument@@QAE_NPBDIW4TiXmlEncoding@@@Z ENDP ; TiXmlDocument::LoadBuffer
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
;	COMDAT ?Error@TiXmlDocument@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Error@TiXmlDocument@@QBE_NXZ PROC			; TiXmlDocument::Error, COMDAT
; _this$ = ecx

; 1459 : 	bool Error() const						{ return error; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?Error@TiXmlDocument@@QBE_NXZ ENDP			; TiXmlDocument::Error
_TEXT	ENDS
EXTRN	__imp__fread:PROC
EXTRN	__imp__ftell:PROC
EXTRN	__imp__fseek:PROC
xdata$x	SEGMENT
__unwindtable$?LoadFile@TiXmlDocument@@QAE_NPAU_iobuf@@W4TiXmlEncoding@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadFile@TiXmlDocument@@QAE_NPAU_iobuf@@W4TiXmlEncoding@@@Z$0
__ehfuncinfo$?LoadFile@TiXmlDocument@@QAE_NPAU_iobuf@@W4TiXmlEncoding@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadFile@TiXmlDocument@@QAE_NPAU_iobuf@@W4TiXmlEncoding@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T8637 = -50						; size = 1
$T8636 = -49						; size = 1
$T8635 = -48						; size = 4
$T8634 = -41						; size = 1
$T8633 = -40						; size = 4
$T8632 = -36						; size = 4
_data$ = -32						; size = 4
_buf$ = -28						; size = 4
_lastPos$ = -24						; size = 4
_length$ = -20						; size = 4
_p$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_file$ = 8						; size = 4
_encoding$ = 12						; size = 4
?LoadFile@TiXmlDocument@@QAE_NPAU_iobuf@@W4TiXmlEncoding@@@Z PROC ; TiXmlDocument::LoadFile
; _this$ = ecx

; 1030 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadFile@TiXmlDocument@@QAE_NPAU_iobuf@@W4TiXmlEncoding@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1031 : 	if ( !file ) 

	cmp	DWORD PTR _file$[ebp], 0
	jne	SHORT $LN15@LoadFile@2

; 1032 : 	{
; 1033 : 		SetError( TIXML_ERROR_OPENING_FILE, 0, 0, TIXML_ENCODING_UNKNOWN );

	push	0
	push	0
	push	0
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError

; 1034 : 		return false;

	xor	al, al
	jmp	$LN16@LoadFile@2
$LN15@LoadFile@2:

; 1035 : 	}
; 1036 : 
; 1037 : 	// Delete the existing data:
; 1038 : 	Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@TiXmlNode@@QAEXXZ		; TiXmlNode::Clear

; 1039 : 	location.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Clear@TiXmlCursor@@QAEXXZ		; TiXmlCursor::Clear

; 1040 : 
; 1041 : 	// Get the file size, so we can pre-allocate the string. HUGE speed impact.
; 1042 : 	long length = 0;

	mov	DWORD PTR _length$[ebp], 0

; 1043 : 	fseek( file, 0, SEEK_END );

	push	2
	push	0
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	DWORD PTR __imp__fseek
	add	esp, 12					; 0000000cH

; 1044 : 	length = ftell( file );

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	DWORD PTR __imp__ftell
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax

; 1045 : 	fseek( file, 0, SEEK_SET );

	push	0
	push	0
	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	call	DWORD PTR __imp__fseek
	add	esp, 12					; 0000000cH

; 1046 : 
; 1047 : 	// Strange case, but good to handle up front.
; 1048 : 	if ( length <= 0 )

	cmp	DWORD PTR _length$[ebp], 0
	jg	SHORT $LN14@LoadFile@2

; 1049 : 	{
; 1050 : 		SetError( TIXML_ERROR_DOCUMENT_EMPTY, 0, 0, TIXML_ENCODING_UNKNOWN );

	push	0
	push	0
	push	0
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError

; 1051 : 		return false;

	xor	al, al
	jmp	$LN16@LoadFile@2
$LN14@LoadFile@2:

; 1052 : 	}
; 1053 : 
; 1054 : 	// If we have a file, assume it is all one big XML file, and read it in.
; 1055 : 	// The document parser may decide the document ends sooner than the entire file, however.
; 1056 : 	TIXML_STRING data;

	lea	ecx, DWORD PTR _data$[ebp]
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1057 : 	data.reserve( length );

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$[ebp]
	call	?reserve@TiXmlString@@QAEXI@Z		; TiXmlString::reserve

; 1058 : 
; 1059 : 	// Subtle bug here. TinyXml did use fgets. But from the XML spec:
; 1060 : 	// 2.11 End-of-Line Handling
; 1061 : 	// <snip>
; 1062 : 	// <quote>
; 1063 : 	// ...the XML processor MUST behave as if it normalized all line breaks in external 
; 1064 : 	// parsed entities (including the document entity) on input, before parsing, by translating 
; 1065 : 	// both the two-character sequence #xD #xA and any #xD that is not followed by #xA to 
; 1066 : 	// a single #xA character.
; 1067 : 	// </quote>
; 1068 : 	//
; 1069 : 	// It is not clear fgets does that, and certainly isn't clear it works cross platform. 
; 1070 : 	// Generally, you expect fgets to translate from the convention of the OS to the c/unix
; 1071 : 	// convention, and not work generally.
; 1072 : 
; 1073 : 	/*
; 1074 : 	while( fgets( buf, sizeof(buf), file ) )
; 1075 : 	{
; 1076 : 		data += buf;
; 1077 : 	}
; 1078 : 	*/
; 1079 : 
; 1080 : 	char* buf = new char[ length+1 ];

	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, 1
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8632[ebp], eax
	mov	edx, DWORD PTR $T8632[ebp]
	mov	DWORD PTR _buf$[ebp], edx

; 1081 : 	buf[0] = 0;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	BYTE PTR [eax], 0

; 1082 : 
; 1083 : 	if ( fread( buf, length, 1, file ) != 1 ) {

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__fread
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN13@LoadFile@2

; 1084 : 		delete [] buf;

	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR $T8633[ebp], ecx
	mov	edx, DWORD PTR $T8633[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1085 : 		SetError( TIXML_ERROR_OPENING_FILE, 0, 0, TIXML_ENCODING_UNKNOWN );

	push	0
	push	0
	push	0
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError

; 1086 : 		return false;

	mov	BYTE PTR $T8634[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _data$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	al, BYTE PTR $T8634[ebp]
	jmp	$LN16@LoadFile@2
$LN13@LoadFile@2:

; 1087 : 	}
; 1088 : 
; 1089 : 	const char* lastPos = buf;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _lastPos$[ebp], eax

; 1090 : 	const char* p = buf;

	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 1091 : 
; 1092 : 	buf[length] = 0;

	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _length$[ebp]
	mov	BYTE PTR [edx], 0
$LN12@LoadFile@2:

; 1093 : 	while( *p ) {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN11@LoadFile@2

; 1094 : 		assert( p < (buf+length) );
; 1095 : 		if ( *p == 0xa ) {

	mov	edx, DWORD PTR _p$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN10@LoadFile@2

; 1096 : 			// Newline character. No special rules for this. Append all the characters
; 1097 : 			// since the last string, and include the newline.
; 1098 : 			data.append( lastPos, (p-lastPos+1) );	// append, include the newline

	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR _lastPos$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _lastPos$[ebp]
	push	edx
	lea	ecx, DWORD PTR _data$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 1099 : 			++p;									// move past the newline

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1100 : 			lastPos = p;							// and point to the new buffer (may be 0)

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _lastPos$[ebp], ecx
	jmp	SHORT $LN9@LoadFile@2
$LN10@LoadFile@2:

; 1101 : 			assert( p <= (buf+length) );
; 1102 : 		}
; 1103 : 		else if ( *p == 0xd ) {

	mov	edx, DWORD PTR _p$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN8@LoadFile@2

; 1104 : 			// Carriage return. Append what we have so far, then
; 1105 : 			// handle moving forward in the buffer.
; 1106 : 			if ( (p-lastPos) > 0 ) {

	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR _lastPos$[ebp]
	test	ecx, ecx
	jle	SHORT $LN7@LoadFile@2

; 1107 : 				data.append( lastPos, p-lastPos );	// do not add the CR

	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR _lastPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _lastPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append
$LN7@LoadFile@2:

; 1108 : 			}
; 1109 : 			data += (char)0xa;						// a proper newline

	push	10					; 0000000aH
	lea	ecx, DWORD PTR _data$[ebp]
	call	??YTiXmlString@@QAEAAV0@D@Z		; TiXmlString::operator+=

; 1110 : 
; 1111 : 			if ( *(p+1) == 0xa ) {

	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx+1]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN6@LoadFile@2

; 1112 : 				// Carriage return - new line sequence
; 1113 : 				p += 2;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax

; 1114 : 				lastPos = p;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _lastPos$[ebp], ecx

; 1115 : 				assert( p <= (buf+length) );
; 1116 : 			}
; 1117 : 			else {

	jmp	SHORT $LN5@LoadFile@2
$LN6@LoadFile@2:

; 1118 : 				// it was followed by something else...that is presumably characters again.
; 1119 : 				++p;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx

; 1120 : 				lastPos = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _lastPos$[ebp], eax
$LN5@LoadFile@2:

; 1121 : 				assert( p <= (buf+length) );
; 1122 : 			}
; 1123 : 		}
; 1124 : 		else {

	jmp	SHORT $LN9@LoadFile@2
$LN8@LoadFile@2:

; 1125 : 			++p;

	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN9@LoadFile@2:

; 1126 : 		}
; 1127 : 	}

	jmp	$LN12@LoadFile@2
$LN11@LoadFile@2:

; 1128 : 	// Handle any left over characters.
; 1129 : 	if ( p-lastPos ) {

	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR _lastPos$[ebp]
	je	SHORT $LN3@LoadFile@2

; 1130 : 		data.append( lastPos, p-lastPos );

	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _lastPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lastPos$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _data$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append
$LN3@LoadFile@2:

; 1131 : 	}		
; 1132 : 	delete [] buf;

	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR $T8635[ebp], edx
	mov	eax, DWORD PTR $T8635[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1133 : 	buf = 0;

	mov	DWORD PTR _buf$[ebp], 0

; 1134 : 
; 1135 : 	Parse( data.c_str(), 0, encoding );

	mov	ecx, DWORD PTR _encoding$[ebp]
	push	ecx
	push	0
	lea	ecx, DWORD PTR _data$[ebp]
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx

; 1136 : 
; 1137 : 	if (  Error() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Error@TiXmlDocument@@QBE_NXZ		; TiXmlDocument::Error
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@LoadFile@2

; 1138 :         return false;

	mov	BYTE PTR $T8636[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _data$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	al, BYTE PTR $T8636[ebp]
	jmp	SHORT $LN16@LoadFile@2

; 1139 :     else

	jmp	SHORT $LN1@LoadFile@2
$LN2@LoadFile@2:

; 1140 : 		return true;

	mov	BYTE PTR $T8637[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _data$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	al, BYTE PTR $T8637[ebp]
	jmp	SHORT $LN16@LoadFile@2
$LN1@LoadFile@2:

; 1141 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _data$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
$LN16@LoadFile@2:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadFile@TiXmlDocument@@QAE_NPAU_iobuf@@W4TiXmlEncoding@@@Z$0:
	lea	ecx, DWORD PTR _data$[ebp]
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$?LoadFile@TiXmlDocument@@QAE_NPAU_iobuf@@W4TiXmlEncoding@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadFile@TiXmlDocument@@QAE_NPAU_iobuf@@W4TiXmlEncoding@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadFile@TiXmlDocument@@QAE_NPAU_iobuf@@W4TiXmlEncoding@@@Z ENDP ; TiXmlDocument::LoadFile
PUBLIC	?SaveFile@TiXmlDocument@@QBE_NPAU_iobuf@@@Z	; TiXmlDocument::SaveFile
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_result$7549 = -5					; size = 1
_fp$ = -4						; size = 4
_filename$ = 8						; size = 4
?SaveFile@TiXmlDocument@@QBE_NPBD@Z PROC		; TiXmlDocument::SaveFile
; _this$ = ecx

; 1145 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 	// The old c stuff lives on...
; 1147 : 	FILE* fp = TiXmlFOpen( filename, "w" );

	push	OFFSET $SG7547
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	?TiXmlFOpen@@YAPAU_iobuf@@PBD0@Z	; TiXmlFOpen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 1148 : 	if ( fp )

	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN1@SaveFile

; 1149 : 	{
; 1150 : 		bool result = SaveFile( fp );

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveFile@TiXmlDocument@@QBE_NPAU_iobuf@@@Z ; TiXmlDocument::SaveFile
	mov	BYTE PTR _result$7549[ebp], al

; 1151 : 		fclose( fp );

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	DWORD PTR __imp__fclose
	add	esp, 4

; 1152 : 		return result;

	mov	al, BYTE PTR _result$7549[ebp]
	jmp	SHORT $LN2@SaveFile
$LN1@SaveFile:

; 1153 : 	}
; 1154 : 	return false;

	xor	al, al
$LN2@SaveFile:

; 1155 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SaveFile@TiXmlDocument@@QBE_NPBD@Z ENDP		; TiXmlDocument::SaveFile
_TEXT	ENDS
EXTRN	__imp__ferror:PROC
EXTRN	__imp__fputc:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_TIXML_UTF_LEAD_2$7557 = -3				; size = 1
_TIXML_UTF_LEAD_1$7556 = -2				; size = 1
_TIXML_UTF_LEAD_0$7555 = -1				; size = 1
_fp$ = 8						; size = 4
?SaveFile@TiXmlDocument@@QBE_NPAU_iobuf@@@Z PROC	; TiXmlDocument::SaveFile
; _this$ = ecx

; 1159 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1160 : 	if ( useMicrosoftBOM ) 

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+68]
	test	ecx, ecx
	je	SHORT $LN1@SaveFile@2

; 1161 : 	{
; 1162 : 		const unsigned char TIXML_UTF_LEAD_0 = 0xefU;

	mov	BYTE PTR _TIXML_UTF_LEAD_0$7555[ebp], 239 ; 000000efH

; 1163 : 		const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;

	mov	BYTE PTR _TIXML_UTF_LEAD_1$7556[ebp], 187 ; 000000bbH

; 1164 : 		const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;

	mov	BYTE PTR _TIXML_UTF_LEAD_2$7557[ebp], 191 ; 000000bfH

; 1165 : 
; 1166 : 		fputc( TIXML_UTF_LEAD_0, fp );

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	239					; 000000efH
	call	DWORD PTR __imp__fputc
	add	esp, 8

; 1167 : 		fputc( TIXML_UTF_LEAD_1, fp );

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	187					; 000000bbH
	call	DWORD PTR __imp__fputc
	add	esp, 8

; 1168 : 		fputc( TIXML_UTF_LEAD_2, fp );

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	191					; 000000bfH
	call	DWORD PTR __imp__fputc
	add	esp, 8
$LN1@SaveFile@2:

; 1169 : 	}
; 1170 : 	Print( fp, 0 );

	push	0
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 1171 : 	return (ferror(fp) == 0);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	DWORD PTR __imp__ferror
	add	esp, 4
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 1172 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SaveFile@TiXmlDocument@@QBE_NPAU_iobuf@@@Z ENDP	; TiXmlDocument::SaveFile
; Function compile flags: /Odtp
_this$ = -8						; size = 4
_node$ = -4						; size = 4
_target$ = 8						; size = 4
?CopyTo@TiXmlDocument@@ABEXPAV1@@Z PROC			; TiXmlDocument::CopyTo
; _this$ = ecx

; 1176 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1177 : 	TiXmlNode::CopyTo( target );

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyTo@TiXmlNode@@IBEXPAV1@@Z		; TiXmlNode::CopyTo

; 1178 : 
; 1179 : 	target->error = error;

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+44]
	mov	BYTE PTR [ecx+44], al

; 1180 : 	target->errorId = errorId;

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+48], eax

; 1181 : 	target->errorDesc = errorDesc;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 52					; 00000034H
	call	??4TiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator=

; 1182 : 	target->tabsize = tabsize;

	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR [edx+56], ecx

; 1183 : 	target->errorLocation = errorLocation;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR [edx+64]
	mov	edx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [edx+60], eax
	mov	DWORD PTR [edx+64], ecx

; 1184 : 	target->useMicrosoftBOM = useMicrosoftBOM;

	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+68]
	mov	BYTE PTR [eax+68], dl

; 1185 : 
; 1186 : 	TiXmlNode* node = 0;

	mov	DWORD PTR _node$[ebp], 0

; 1187 : 	for ( node = firstChild; node; node = node->NextSibling() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _node$[ebp], ecx
	jmp	SHORT $LN3@CopyTo@2
$LN2@CopyTo@2:
	mov	ecx, DWORD PTR _node$[ebp]
	call	?NextSibling@TiXmlNode@@QAEPAV1@XZ	; TiXmlNode::NextSibling
	mov	DWORD PTR _node$[ebp], eax
$LN3@CopyTo@2:
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN4@CopyTo@2

; 1188 : 	{
; 1189 : 		target->LinkEndChild( node->Clone() );

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [eax+60]
	call	edx
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	call	?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild
	jmp	SHORT $LN2@CopyTo@2
$LN4@CopyTo@2:

; 1190 : 	}	
; 1191 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CopyTo@TiXmlDocument@@ABEXPAV1@@Z ENDP			; TiXmlDocument::CopyTo
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ$0
__ehfuncinfo$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv71 = -32						; size = 4
_this$ = -28						; size = 4
$T8648 = -24						; size = 4
$T8647 = -20						; size = 4
_clone$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ PROC		; TiXmlDocument::Clone
; _this$ = ecx

; 1195 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1196 : 	TiXmlDocument* clone = new TiXmlDocument();

	push	72					; 00000048H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8648[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8648[ebp], 0
	je	SHORT $LN4@Clone@2
	mov	ecx, DWORD PTR $T8648[ebp]
	call	??0TiXmlDocument@@QAE@XZ		; TiXmlDocument::TiXmlDocument
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN5@Clone@2
$LN4@Clone@2:
	mov	DWORD PTR tv71[ebp], 0
$LN5@Clone@2:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T8647[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T8647[ebp]
	mov	DWORD PTR _clone$[ebp], ecx

; 1197 : 	if ( !clone )

	cmp	DWORD PTR _clone$[ebp], 0
	jne	SHORT $LN1@Clone@2

; 1198 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@Clone@2
$LN1@Clone@2:

; 1199 : 
; 1200 : 	CopyTo( clone );

	mov	edx, DWORD PTR _clone$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyTo@TiXmlDocument@@ABEXPAV1@@Z	; TiXmlDocument::CopyTo

; 1201 : 	return clone;

	mov	eax, DWORD PTR _clone$[ebp]
$LN2@Clone@2:

; 1202 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ$0:
	mov	eax, DWORD PTR $T8648[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ ENDP		; TiXmlDocument::Clone
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$7581 = -4						; size = 4
_cfile$ = 8						; size = 4
_depth$ = 12						; size = 4
?Print@TiXmlDocument@@UBEXPAU_iobuf@@H@Z PROC		; TiXmlDocument::Print
; _this$ = ecx

; 1206 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1207 : 	assert( cfile );
; 1208 : 	for ( const TiXmlNode* node=FirstChild(); node; node=node->NextSibling() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::FirstChild
	mov	DWORD PTR _node$7581[ebp], eax
	jmp	SHORT $LN3@Print@2
$LN2@Print@2:
	mov	ecx, DWORD PTR _node$7581[ebp]
	call	?NextSibling@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::NextSibling
	mov	DWORD PTR _node$7581[ebp], eax
$LN3@Print@2:
	cmp	DWORD PTR _node$7581[ebp], 0
	je	SHORT $LN4@Print@2

; 1209 : 	{
; 1210 : 		node->Print( cfile, depth );

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cfile$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$7581[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _node$7581[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx

; 1211 : 		fprintf( cfile, "\n" );

	push	OFFSET $SG7585
	mov	eax, DWORD PTR _cfile$[ebp]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	jmp	SHORT $LN2@Print@2
$LN4@Print@2:

; 1212 : 	}
; 1213 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Print@TiXmlDocument@@UBEXPAU_iobuf@@H@Z ENDP		; TiXmlDocument::Print
; Function compile flags: /Odtp
_this$ = -8						; size = 4
_node$7591 = -4						; size = 4
_visitor$ = 8						; size = 4
?Accept@TiXmlDocument@@UBE_NPAVTiXmlVisitor@@@Z PROC	; TiXmlDocument::Accept
; _this$ = ecx

; 1217 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1218 : 	if ( visitor->VisitEnter( *this ) )

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@Accept@2

; 1219 : 	{
; 1220 : 		for ( const TiXmlNode* node=FirstChild(); node; node=node->NextSibling() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::FirstChild
	mov	DWORD PTR _node$7591[ebp], eax
	jmp	SHORT $LN4@Accept@2
$LN3@Accept@2:
	mov	ecx, DWORD PTR _node$7591[ebp]
	call	?NextSibling@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::NextSibling
	mov	DWORD PTR _node$7591[ebp], eax
$LN4@Accept@2:
	cmp	DWORD PTR _node$7591[ebp], 0
	je	SHORT $LN5@Accept@2

; 1221 : 		{
; 1222 : 			if ( !node->Accept( visitor ) )

	mov	edx, DWORD PTR _visitor$[ebp]
	push	edx
	mov	eax, DWORD PTR _node$7591[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _node$7591[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@Accept@2

; 1223 : 				break;

	jmp	SHORT $LN5@Accept@2
$LN1@Accept@2:

; 1224 : 		}

	jmp	SHORT $LN3@Accept@2
$LN5@Accept@2:

; 1225 : 	}
; 1226 : 	return visitor->VisitExit( *this );

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 1227 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Accept@TiXmlDocument@@UBE_NPAVTiXmlVisitor@@@Z ENDP	; TiXmlDocument::Accept
_TEXT	ENDS
PUBLIC	?empty@TiXmlString@@QBE_NXZ			; TiXmlString::empty
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Next@TiXmlAttribute@@QBEPBV1@XZ PROC			; TiXmlAttribute::Next
; _this$ = ecx

; 1231 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1232 : 	// We are using knowledge of the sentinel. The sentinel
; 1233 : 	// have a value or name.
; 1234 : 	if ( next->value.empty() && next->name.empty() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 24					; 00000018H
	call	?empty@TiXmlString@@QBE_NXZ		; TiXmlString::empty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Next
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	add	ecx, 20					; 00000014H
	call	?empty@TiXmlString@@QBE_NXZ		; TiXmlString::empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@Next

; 1235 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@Next
$LN1@Next:

; 1236 : 	return next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+32]
$LN2@Next:

; 1237 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Next@TiXmlAttribute@@QBEPBV1@XZ ENDP			; TiXmlAttribute::Next
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinystr.h
_TEXT	ENDS
;	COMDAT ?empty@TiXmlString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?empty@TiXmlString@@QBE_NXZ PROC			; TiXmlString::empty, COMDAT
; _this$ = ecx

; 154  : 	bool empty () const { return rep_->size == 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
	cmp	DWORD PTR [ecx], 0
	sete	al
	mov	esp, ebp
	pop	ebp
	ret	0
?empty@TiXmlString@@QBE_NXZ ENDP			; TiXmlString::empty
_TEXT	ENDS
PUBLIC	?Previous@TiXmlAttribute@@QBEPBV1@XZ		; TiXmlAttribute::Previous
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Previous@TiXmlAttribute@@QBEPBV1@XZ PROC		; TiXmlAttribute::Previous
; _this$ = ecx

; 1251 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1252 : 	// We are using knowledge of the sentinel. The sentinel
; 1253 : 	// have a value or name.
; 1254 : 	if ( prev->value.empty() && prev->name.empty() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 24					; 00000018H
	call	?empty@TiXmlString@@QBE_NXZ		; TiXmlString::empty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Previous
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	add	ecx, 20					; 00000014H
	call	?empty@TiXmlString@@QBE_NXZ		; TiXmlString::empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@Previous

; 1255 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@Previous
$LN1@Previous:

; 1256 : 	return prev;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+28]
$LN2@Previous:

; 1257 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Previous@TiXmlAttribute@@QBEPBV1@XZ ENDP		; TiXmlAttribute::Previous
_TEXT	ENDS
PUBLIC	??YTiXmlString@@QAEAAV0@PBD@Z			; TiXmlString::operator+=
PUBLIC	??YTiXmlString@@QAEAAV0@ABV0@@Z			; TiXmlString::operator+=
PUBLIC	?find@TiXmlString@@QBEID@Z			; TiXmlString::find
EXTRN	?npos@TiXmlString@@2IB:DWORD			; TiXmlString::npos
xdata$x	SEGMENT
__unwindtable$?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z$1
__ehfuncinfo$?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -24						; size = 4
_n$ = -20						; size = 4
_v$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_cfile$ = 8						; size = 4
___formal$ = 12						; size = 4
_str$ = 16						; size = 4
?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z PROC ; TiXmlAttribute::Print
; _this$ = ecx

; 1271 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1272 : 	TIXML_STRING n, v;

	lea	ecx, DWORD PTR _n$[ebp]
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _v$[ebp]
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1273 : 
; 1274 : 	EncodeString( name, &n );

	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	call	?EncodeString@TiXmlBase@@SAXABVTiXmlString@@PAV2@@Z ; TiXmlBase::EncodeString
	add	esp, 8

; 1275 : 	EncodeString( value, &v );

	lea	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	?EncodeString@TiXmlBase@@SAXABVTiXmlString@@PAV2@@Z ; TiXmlBase::EncodeString
	add	esp, 8

; 1276 : 
; 1277 : 	if (value.find ('\"') == TIXML_STRING::npos) {

	push	34					; 00000022H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?find@TiXmlString@@QBEID@Z		; TiXmlString::find
	cmp	eax, DWORD PTR ?npos@TiXmlString@@2IB	; TiXmlString::npos
	jne	SHORT $LN6@Print@3

; 1278 : 		if ( cfile ) {

	cmp	DWORD PTR _cfile$[ebp], 0
	je	SHORT $LN5@Print@3

; 1279 : 		fprintf (cfile, "%s=\"%s\"", n.c_str(), v.c_str() );

	lea	ecx, DWORD PTR _v$[ebp]
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	lea	ecx, DWORD PTR _n$[ebp]
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	push	OFFSET $SG7614
	mov	ecx, DWORD PTR _cfile$[ebp]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
$LN5@Print@3:

; 1280 : 		}
; 1281 : 		if ( str ) {

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN4@Print@3

; 1282 : 			(*str) += n; (*str) += "=\""; (*str) += v; (*str) += "\"";

	lea	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator+=
	push	OFFSET $SG7616
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator+=
	push	OFFSET $SG7617
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=
$LN4@Print@3:

; 1283 : 		}
; 1284 : 	}
; 1285 : 	else {

	jmp	SHORT $LN3@Print@3
$LN6@Print@3:

; 1286 : 		if ( cfile ) {

	cmp	DWORD PTR _cfile$[ebp], 0
	je	SHORT $LN2@Print@3

; 1287 : 		fprintf (cfile, "%s='%s'", n.c_str(), v.c_str() );

	lea	ecx, DWORD PTR _v$[ebp]
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	lea	ecx, DWORD PTR _n$[ebp]
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	push	OFFSET $SG7620
	mov	ecx, DWORD PTR _cfile$[ebp]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
$LN2@Print@3:

; 1288 : 		}
; 1289 : 		if ( str ) {

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN3@Print@3

; 1290 : 			(*str) += n; (*str) += "='"; (*str) += v; (*str) += "'";

	lea	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator+=
	push	OFFSET $SG7622
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator+=
	push	OFFSET $SG7623
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=
$LN3@Print@3:

; 1291 : 		}
; 1292 : 	}
; 1293 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _v$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _n$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z$0:
	lea	ecx, DWORD PTR _n$[ebp]
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z$1:
	lea	ecx, DWORD PTR _v$[ebp]
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z ENDP ; TiXmlAttribute::Print
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinystr.h
;	COMDAT ??YTiXmlString@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_suffix$ = 8						; size = 4
??YTiXmlString@@QAEAAV0@PBD@Z PROC			; TiXmlString::operator+=, COMDAT
; _this$ = ecx

; 124  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 		return append(suffix, static_cast<size_type>( strlen(suffix) ));

	mov	eax, DWORD PTR _suffix$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _suffix$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 126  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??YTiXmlString@@QAEAAV0@PBD@Z ENDP			; TiXmlString::operator+=
_TEXT	ENDS
PUBLIC	?data@TiXmlString@@QBEPBDXZ			; TiXmlString::data
; Function compile flags: /Odtp
;	COMDAT ??YTiXmlString@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_suffix$ = 8						; size = 4
??YTiXmlString@@QAEAAV0@ABV0@@Z PROC			; TiXmlString::operator+=, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 		return append(suffix.data(), suffix.length());

	mov	ecx, DWORD PTR _suffix$[ebp]
	call	?length@TiXmlString@@QBEIXZ		; TiXmlString::length
	push	eax
	mov	ecx, DWORD PTR _suffix$[ebp]
	call	?data@TiXmlString@@QBEPBDXZ		; TiXmlString::data
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 138  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??YTiXmlString@@QAEAAV0@ABV0@@Z ENDP			; TiXmlString::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?data@TiXmlString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?data@TiXmlString@@QBEPBDXZ PROC			; TiXmlString::data, COMDAT
; _this$ = ecx

; 145  : 	const char * data () const { return rep_->str; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?data@TiXmlString@@QBEPBDXZ ENDP			; TiXmlString::data
_TEXT	ENDS
PUBLIC	?find@TiXmlString@@QBEIDI@Z			; TiXmlString::find
; Function compile flags: /Odtp
;	COMDAT ?find@TiXmlString@@QBEID@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lookup$ = 8						; size = 1
?find@TiXmlString@@QBEID@Z PROC				; TiXmlString::find, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 		return find(lookup, 0);

	push	0
	movzx	eax, BYTE PTR _lookup$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?find@TiXmlString@@QBEIDI@Z		; TiXmlString::find

; 178  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?find@TiXmlString@@QBEID@Z ENDP				; TiXmlString::find
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?find@TiXmlString@@QBEIDI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_p$5759 = -4						; size = 4
_tofind$ = 8						; size = 1
_offset$ = 12						; size = 4
?find@TiXmlString@@QBEIDI@Z PROC			; TiXmlString::find, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 		if (offset >= length()) return npos;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@TiXmlString@@QBEIXZ		; TiXmlString::length
	cmp	DWORD PTR _offset$[ebp], eax
	jb	SHORT $LN5@find
	mov	eax, DWORD PTR ?npos@TiXmlString@@2IB	; TiXmlString::npos
	jmp	SHORT $LN6@find
$LN5@find:

; 184  : 
; 185  : 		for (const char* p = c_str() + offset; *p != '\0'; ++p)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _p$5759[ebp], eax
	jmp	SHORT $LN4@find
$LN3@find:
	mov	eax, DWORD PTR _p$5759[ebp]
	add	eax, 1
	mov	DWORD PTR _p$5759[ebp], eax
$LN4@find:
	mov	ecx, DWORD PTR _p$5759[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN2@find

; 186  : 		{
; 187  : 		   if (*p == tofind) return static_cast< size_type >( p - c_str() );

	mov	eax, DWORD PTR _p$5759[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _tofind$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN1@find
	mov	ecx, DWORD PTR _this$[ebp]
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	mov	ecx, DWORD PTR _p$5759[ebp]
	sub	ecx, eax
	mov	eax, ecx
	jmp	SHORT $LN6@find
$LN1@find:

; 188  : 		}

	jmp	SHORT $LN3@find
$LN2@find:

; 189  : 		return npos;

	mov	eax, DWORD PTR ?npos@TiXmlString@@2IB	; TiXmlString::npos
$LN6@find:

; 190  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?find@TiXmlString@@QBEIDI@Z ENDP			; TiXmlString::find
_TEXT	ENDS
EXTRN	__imp__sscanf_s:PROC
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ival$ = 8						; size = 4
?QueryIntValue@TiXmlAttribute@@QBEHPAH@Z PROC		; TiXmlAttribute::QueryIntValue
; _this$ = ecx

; 1297 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1298 : 	if ( TIXML_SSCANF( value.c_str(), "%d", ival ) == 1 )

	mov	eax, DWORD PTR _ival$[ebp]
	push	eax
	push	OFFSET $SG7629
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	call	DWORD PTR __imp__sscanf_s
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN1@QueryIntVa

; 1299 : 		return TIXML_SUCCESS;

	xor	eax, eax
	jmp	SHORT $LN2@QueryIntVa
$LN1@QueryIntVa:

; 1300 : 	return TIXML_WRONG_TYPE;

	mov	eax, 2
$LN2@QueryIntVa:

; 1301 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?QueryIntValue@TiXmlAttribute@@QBEHPAH@Z ENDP		; TiXmlAttribute::QueryIntValue
; Function compile flags: /Odtp
_this$ = -4						; size = 4
_dval$ = 8						; size = 4
?QueryDoubleValue@TiXmlAttribute@@QBEHPAN@Z PROC	; TiXmlAttribute::QueryDoubleValue
; _this$ = ecx

; 1304 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1305 : 	if ( TIXML_SSCANF( value.c_str(), "%lf", dval ) == 1 )

	mov	eax, DWORD PTR _dval$[ebp]
	push	eax
	push	OFFSET $SG7635
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	call	DWORD PTR __imp__sscanf_s
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN1@QueryDoubl@2

; 1306 : 		return TIXML_SUCCESS;

	xor	eax, eax
	jmp	SHORT $LN2@QueryDoubl@2
$LN1@QueryDoubl@2:

; 1307 : 	return TIXML_WRONG_TYPE;

	mov	eax, 2
$LN2@QueryDoubl@2:

; 1308 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?QueryDoubleValue@TiXmlAttribute@@QBEHPAN@Z ENDP	; TiXmlAttribute::QueryDoubleValue
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SetIntValue@TiXmlAttribute@@QAEXH@Z		; TiXmlAttribute::SetIntValue
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -76						; size = 4
_buf$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
__value$ = 8						; size = 4
?SetIntValue@TiXmlAttribute@@QAEXH@Z PROC		; TiXmlAttribute::SetIntValue
; _this$ = ecx

; 1311 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1312 : 	char buf [64];
; 1313 : 	#if defined(TIXML_SNPRINTF)		
; 1314 : 		TIXML_SNPRINTF(buf, sizeof(buf), "%d", _value);

	mov	eax, DWORD PTR __value$[ebp]
	push	eax
	push	OFFSET $SG7641
	push	64					; 00000040H
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ	; _snprintf_s<64>
	add	esp, 16					; 00000010H

; 1315 : 	#else
; 1316 : 		sprintf (buf, "%d", _value);
; 1317 : 	#endif
; 1318 : 	SetValue (buf);

	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValue@TiXmlAttribute@@QAEXPBD@Z	; TiXmlAttribute::SetValue

; 1319 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?SetIntValue@TiXmlAttribute@@QAEXH@Z ENDP		; TiXmlAttribute::SetIntValue
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SetDoubleValue@TiXmlAttribute@@QAEXN@Z		; TiXmlAttribute::SetDoubleValue
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -268						; size = 4
_buf$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
__value$ = 8						; size = 8
?SetDoubleValue@TiXmlAttribute@@QAEXN@Z PROC		; TiXmlAttribute::SetDoubleValue
; _this$ = ecx

; 1322 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1323 : 	char buf [256];
; 1324 : 	#if defined(TIXML_SNPRINTF)		
; 1325 : 		TIXML_SNPRINTF( buf, sizeof(buf), "%lf", _value);

	sub	esp, 8
	fld	QWORD PTR __value$[ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET $SG7647
	push	256					; 00000100H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ ; _snprintf_s<256>
	add	esp, 20					; 00000014H

; 1326 : 	#else
; 1327 : 		sprintf (buf, "%lf", _value);
; 1328 : 	#endif
; 1329 : 	SetValue (buf);

	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValue@TiXmlAttribute@@QAEXPBD@Z	; TiXmlAttribute::SetValue

; 1330 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?SetDoubleValue@TiXmlAttribute@@QAEXN@Z ENDP		; TiXmlAttribute::SetDoubleValue
_TEXT	ENDS
PUBLIC	?IntValue@TiXmlAttribute@@QBEHXZ		; TiXmlAttribute::IntValue
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IntValue@TiXmlAttribute@@QBEHXZ PROC			; TiXmlAttribute::IntValue
; _this$ = ecx

; 1333 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1334 : 	return atoi (value.c_str ());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	call	DWORD PTR __imp__atoi
	add	esp, 4

; 1335 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IntValue@TiXmlAttribute@@QBEHXZ ENDP			; TiXmlAttribute::IntValue
_TEXT	ENDS
PUBLIC	?DoubleValue@TiXmlAttribute@@QBENXZ		; TiXmlAttribute::DoubleValue
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DoubleValue@TiXmlAttribute@@QBENXZ PROC		; TiXmlAttribute::DoubleValue
; _this$ = ecx

; 1338 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1339 : 	return atof (value.c_str ());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4

; 1340 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DoubleValue@TiXmlAttribute@@QBENXZ ENDP		; TiXmlAttribute::DoubleValue
_TEXT	ENDS
PUBLIC	?CopyTo@TiXmlComment@@IBEXPAV1@@Z		; TiXmlComment::CopyTo
PUBLIC	??_7TiXmlComment@@6B@				; TiXmlComment::`vftable'
PUBLIC	??0TiXmlComment@@QAE@ABV0@@Z			; TiXmlComment::TiXmlComment
PUBLIC	??_R4TiXmlComment@@6B@				; TiXmlComment::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlComment@@@8			; TiXmlComment `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlComment@@8				; TiXmlComment::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlComment@@8				; TiXmlComment::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlComment@@8			; TiXmlComment::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Print@TiXmlComment@@UBEXPAU_iobuf@@H@Z		; TiXmlComment::Print
PUBLIC	?ToComment@TiXmlComment@@UAEPAV1@XZ		; TiXmlComment::ToComment
PUBLIC	?ToComment@TiXmlComment@@UBEPBV1@XZ		; TiXmlComment::ToComment
PUBLIC	?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ	; TiXmlComment::Clone
PUBLIC	?Accept@TiXmlComment@@UBE_NPAVTiXmlVisitor@@@Z	; TiXmlComment::Accept
EXTRN	??_ETiXmlComment@@UAEPAXI@Z:PROC		; TiXmlComment::`vector deleting destructor'
EXTRN	?Parse@TiXmlComment@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:PROC ; TiXmlComment::Parse
;	COMDAT ??_R1A@?0A@EA@TiXmlComment@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlComment@@8 DD FLAT:??_R0?AVTiXmlComment@@@8 ; TiXmlComment::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlComment@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlComment@@8
rdata$r	SEGMENT
??_R2TiXmlComment@@8 DD FLAT:??_R1A@?0A@EA@TiXmlComment@@8 ; TiXmlComment::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlNode@@8
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlComment@@8
rdata$r	SEGMENT
??_R3TiXmlComment@@8 DD 00H				; TiXmlComment::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TiXmlComment@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlComment@@@8
_DATA	SEGMENT
??_R0?AVTiXmlComment@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlComment `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlComment@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlComment@@6B@
rdata$r	SEGMENT
??_R4TiXmlComment@@6B@ DD 00H				; TiXmlComment::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlComment@@@8
	DD	FLAT:??_R3TiXmlComment@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlComment@@6B@
CONST	SEGMENT
??_7TiXmlComment@@6B@ DD FLAT:??_R4TiXmlComment@@6B@	; TiXmlComment::`vftable'
	DD	FLAT:??_ETiXmlComment@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlComment@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlComment@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	FLAT:?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
	DD	FLAT:?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
	DD	FLAT:?ToComment@TiXmlComment@@UAEPAV1@XZ
	DD	FLAT:?ToComment@TiXmlComment@@UBEPBV1@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
	DD	FLAT:?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ
	DD	FLAT:?Accept@TiXmlComment@@UBE_NPAVTiXmlVisitor@@@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0TiXmlComment@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlComment@@QAE@ABV0@@Z$0
__ehfuncinfo$??0TiXmlComment@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0TiXmlComment@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_copy$ = 8						; size = 4
??0TiXmlComment@@QAE@ABV0@@Z PROC			; TiXmlComment::TiXmlComment
; _this$ = ecx

; 1344 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlComment@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlComment@@6B@

; 1345 : 	copy.CopyTo( this );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _copy$[ebp]
	call	?CopyTo@TiXmlComment@@IBEXPAV1@@Z	; TiXmlComment::CopyTo

; 1346 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0TiXmlComment@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__ehhandler$??0TiXmlComment@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlComment@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlComment@@QAE@ABV0@@Z ENDP			; TiXmlComment::TiXmlComment
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
;	COMDAT ?ToComment@TiXmlComment@@UBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToComment@TiXmlComment@@UBEPBV1@XZ PROC		; TiXmlComment::ToComment, COMDAT
; _this$ = ecx

; 1178 : 	virtual const TiXmlComment*  ToComment() const { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@TiXmlComment@@UBEPBV1@XZ ENDP		; TiXmlComment::ToComment
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToComment@TiXmlComment@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToComment@TiXmlComment@@UAEPAV1@XZ PROC		; TiXmlComment::ToComment, COMDAT
; _this$ = ecx

; 1179 : 	virtual TiXmlComment*  ToComment() { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@TiXmlComment@@UAEPAV1@XZ ENDP		; TiXmlComment::ToComment
_TEXT	ENDS
PUBLIC	??1TiXmlComment@@UAE@XZ				; TiXmlComment::~TiXmlComment
; Function compile flags: /Odtp
;	COMDAT ??_GTiXmlComment@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlComment@@UAEPAXI@Z PROC			; TiXmlComment::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlComment@@UAE@XZ			; TiXmlComment::~TiXmlComment
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlComment@@UAEPAXI@Z ENDP			; TiXmlComment::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1TiXmlComment@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TiXmlComment@@UAE@XZ$0
__ehfuncinfo$??1TiXmlComment@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1TiXmlComment@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1TiXmlComment@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1TiXmlComment@@UAE@XZ PROC				; TiXmlComment::~TiXmlComment, COMDAT
; _this$ = ecx

; 1166 : 	virtual ~TiXmlComment()	{}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TiXmlComment@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlComment@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1TiXmlComment@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__ehhandler$??1TiXmlComment@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TiXmlComment@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TiXmlComment@@UAE@XZ ENDP				; TiXmlComment::~TiXmlComment
PUBLIC	??4TiXmlComment@@QAEXABV0@@Z			; TiXmlComment::operator=
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
??4TiXmlComment@@QAEXABV0@@Z PROC			; TiXmlComment::operator=
; _this$ = ecx

; 1350 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1351 : 	Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@TiXmlNode@@QAEXXZ		; TiXmlNode::Clear

; 1352 : 	base.CopyTo( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	call	?CopyTo@TiXmlComment@@IBEXPAV1@@Z	; TiXmlComment::CopyTo

; 1353 : }

	mov	esp, ebp
	pop	ebp
	ret	4
??4TiXmlComment@@QAEXABV0@@Z ENDP			; TiXmlComment::operator=
; Function compile flags: /Odtp
_this$ = -8						; size = 4
_i$7668 = -4						; size = 4
_cfile$ = 8						; size = 4
_depth$ = 12						; size = 4
?Print@TiXmlComment@@UBEXPAU_iobuf@@H@Z PROC		; TiXmlComment::Print
; _this$ = ecx

; 1357 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1358 : 	assert( cfile );
; 1359 : 	for ( int i=0; i<depth; i++ )

	mov	DWORD PTR _i$7668[ebp], 0
	jmp	SHORT $LN3@Print@4
$LN2@Print@4:
	mov	eax, DWORD PTR _i$7668[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7668[ebp], eax
$LN3@Print@4:
	mov	ecx, DWORD PTR _i$7668[ebp]
	cmp	ecx, DWORD PTR _depth$[ebp]
	jge	SHORT $LN1@Print@4

; 1360 : 	{
; 1361 : 		fprintf( cfile,  "    " );

	push	OFFSET $SG7672
	mov	edx, DWORD PTR _cfile$[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 8

; 1362 : 	}

	jmp	SHORT $LN2@Print@4
$LN1@Print@4:

; 1363 : 	fprintf( cfile, "<!--%s-->", value.c_str() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	push	OFFSET $SG7673
	mov	eax, DWORD PTR _cfile$[ebp]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH

; 1364 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Print@TiXmlComment@@UBEXPAU_iobuf@@H@Z ENDP		; TiXmlComment::Print
; Function compile flags: /Odtp
_this$ = -4						; size = 4
_target$ = 8						; size = 4
?CopyTo@TiXmlComment@@IBEXPAV1@@Z PROC			; TiXmlComment::CopyTo
; _this$ = ecx

; 1368 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1369 : 	TiXmlNode::CopyTo( target );

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyTo@TiXmlNode@@IBEXPAV1@@Z		; TiXmlNode::CopyTo

; 1370 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CopyTo@TiXmlComment@@IBEXPAV1@@Z ENDP			; TiXmlComment::CopyTo
; Function compile flags: /Odtp
_this$ = -4						; size = 4
_visitor$ = 8						; size = 4
?Accept@TiXmlComment@@UBE_NPAVTiXmlVisitor@@@Z PROC	; TiXmlComment::Accept
; _this$ = ecx

; 1374 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1375 : 	return visitor->Visit( *this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 1376 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Accept@TiXmlComment@@UBE_NPAVTiXmlVisitor@@@Z ENDP	; TiXmlComment::Accept
_TEXT	ENDS
PUBLIC	??0TiXmlComment@@QAE@XZ				; TiXmlComment::TiXmlComment
xdata$x	SEGMENT
__unwindtable$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ$0
__ehfuncinfo$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv71 = -32						; size = 4
_this$ = -28						; size = 4
$T8714 = -24						; size = 4
$T8713 = -20						; size = 4
_clone$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ PROC		; TiXmlComment::Clone
; _this$ = ecx

; 1380 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1381 : 	TiXmlComment* clone = new TiXmlComment();

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8714[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8714[ebp], 0
	je	SHORT $LN4@Clone@3
	mov	ecx, DWORD PTR $T8714[ebp]
	call	??0TiXmlComment@@QAE@XZ			; TiXmlComment::TiXmlComment
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN5@Clone@3
$LN4@Clone@3:
	mov	DWORD PTR tv71[ebp], 0
$LN5@Clone@3:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T8713[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T8713[ebp]
	mov	DWORD PTR _clone$[ebp], ecx

; 1382 : 
; 1383 : 	if ( !clone )

	cmp	DWORD PTR _clone$[ebp], 0
	jne	SHORT $LN1@Clone@3

; 1384 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@Clone@3
$LN1@Clone@3:

; 1385 : 
; 1386 : 	CopyTo( clone );

	mov	edx, DWORD PTR _clone$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyTo@TiXmlComment@@IBEXPAV1@@Z	; TiXmlComment::CopyTo

; 1387 : 	return clone;

	mov	eax, DWORD PTR _clone$[ebp]
$LN2@Clone@3:

; 1388 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ$0:
	mov	eax, DWORD PTR $T8714[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ ENDP		; TiXmlComment::Clone
;	COMDAT xdata$x
; File i:\svnroot\client\ogremain\tinyxml.h
xdata$x	SEGMENT
__unwindtable$??0TiXmlComment@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlComment@@QAE@XZ$0
__ehfuncinfo$??0TiXmlComment@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0TiXmlComment@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0TiXmlComment@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0TiXmlComment@@QAE@XZ PROC				; TiXmlComment::TiXmlComment, COMDAT
; _this$ = ecx

; 1158 : 	TiXmlComment() : TiXmlNode( TiXmlNode::COMMENT ) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlComment@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlComment@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TiXmlComment@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__ehhandler$??0TiXmlComment@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlComment@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlComment@@QAE@XZ ENDP				; TiXmlComment::TiXmlComment
PUBLIC	?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z		; TiXmlText::Print
xdata$x	SEGMENT
__unwindtable$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z$0
__ehfuncinfo$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -24						; size = 4
_buffer$7706 = -20					; size = 4
_i$7698 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_cfile$ = 8						; size = 4
_depth$ = 12						; size = 4
?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z PROC		; TiXmlText::Print
; _this$ = ecx

; 1392 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1393 : 	assert( cfile );
; 1394 : 	if ( cdata )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+44]
	test	ecx, ecx
	je	SHORT $LN5@Print@5

; 1395 : 	{
; 1396 : 		int i;
; 1397 : 		fprintf( cfile, "\n" );

	push	OFFSET $SG7699
	mov	edx, DWORD PTR _cfile$[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 8

; 1398 : 		for ( i=0; i<depth; i++ ) {

	mov	DWORD PTR _i$7698[ebp], 0
	jmp	SHORT $LN4@Print@5
$LN3@Print@5:
	mov	eax, DWORD PTR _i$7698[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7698[ebp], eax
$LN4@Print@5:
	mov	ecx, DWORD PTR _i$7698[ebp]
	cmp	ecx, DWORD PTR _depth$[ebp]
	jge	SHORT $LN2@Print@5

; 1399 : 			fprintf( cfile, "    " );

	push	OFFSET $SG7703
	mov	edx, DWORD PTR _cfile$[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 8

; 1400 : 		}

	jmp	SHORT $LN3@Print@5
$LN2@Print@5:

; 1401 : 		fprintf( cfile, "<![CDATA[%s]]>\n", value.c_str() );	// unformatted output

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	push	OFFSET $SG7704
	mov	eax, DWORD PTR _cfile$[ebp]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH

; 1402 : 	}
; 1403 : 	else

	jmp	SHORT $LN6@Print@5
$LN5@Print@5:

; 1404 : 	{
; 1405 : 		TIXML_STRING buffer;

	lea	ecx, DWORD PTR _buffer$7706[ebp]
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1406 : 		EncodeString( value, &buffer );

	lea	ecx, DWORD PTR _buffer$7706[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	call	?EncodeString@TiXmlBase@@SAXABVTiXmlString@@PAV2@@Z ; TiXmlBase::EncodeString
	add	esp, 8

; 1407 : 		fprintf( cfile, "%s", buffer.c_str() );

	lea	ecx, DWORD PTR _buffer$7706[ebp]
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	push	OFFSET $SG7707
	mov	eax, DWORD PTR _cfile$[ebp]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH

; 1408 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$7706[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
$LN6@Print@5:

; 1409 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z$0:
	lea	ecx, DWORD PTR _buffer$7706[ebp]
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z ENDP		; TiXmlText::Print
PUBLIC	?CopyTo@TiXmlText@@IBEXPAV1@@Z			; TiXmlText::CopyTo
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_target$ = 8						; size = 4
?CopyTo@TiXmlText@@IBEXPAV1@@Z PROC			; TiXmlText::CopyTo
; _this$ = ecx

; 1413 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1414 : 	TiXmlNode::CopyTo( target );

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyTo@TiXmlNode@@IBEXPAV1@@Z		; TiXmlNode::CopyTo

; 1415 : 	target->cdata = cdata;

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+44]
	mov	BYTE PTR [ecx+44], al

; 1416 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CopyTo@TiXmlText@@IBEXPAV1@@Z ENDP			; TiXmlText::CopyTo
_TEXT	ENDS
PUBLIC	?Accept@TiXmlText@@UBE_NPAVTiXmlVisitor@@@Z	; TiXmlText::Accept
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_visitor$ = 8						; size = 4
?Accept@TiXmlText@@UBE_NPAVTiXmlVisitor@@@Z PROC	; TiXmlText::Accept
; _this$ = ecx

; 1420 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1421 : 	return visitor->Visit( *this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax

; 1422 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Accept@TiXmlText@@UBE_NPAVTiXmlVisitor@@@Z ENDP	; TiXmlText::Accept
_TEXT	ENDS
PUBLIC	??0TiXmlText@@QAE@PBD@Z				; TiXmlText::TiXmlText
PUBLIC	?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ		; TiXmlText::Clone
xdata$x	SEGMENT
__unwindtable$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ$0
__ehfuncinfo$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv72 = -32						; size = 4
_this$ = -28						; size = 4
$T8741 = -24						; size = 4
$T8740 = -20						; size = 4
_clone$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ PROC		; TiXmlText::Clone
; _this$ = ecx

; 1426 : {	

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1427 : 	TiXmlText* clone = 0;

	mov	DWORD PTR _clone$[ebp], 0

; 1428 : 	clone = new TiXmlText( "" );

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8741[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8741[ebp], 0
	je	SHORT $LN4@Clone@4
	push	OFFSET $SG7724
	mov	ecx, DWORD PTR $T8741[ebp]
	call	??0TiXmlText@@QAE@PBD@Z			; TiXmlText::TiXmlText
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN5@Clone@4
$LN4@Clone@4:
	mov	DWORD PTR tv72[ebp], 0
$LN5@Clone@4:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T8740[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T8740[ebp]
	mov	DWORD PTR _clone$[ebp], ecx

; 1429 : 
; 1430 : 	if ( !clone )

	cmp	DWORD PTR _clone$[ebp], 0
	jne	SHORT $LN1@Clone@4

; 1431 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@Clone@4
$LN1@Clone@4:

; 1432 : 
; 1433 : 	CopyTo( clone );

	mov	edx, DWORD PTR _clone$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyTo@TiXmlText@@IBEXPAV1@@Z		; TiXmlText::CopyTo

; 1434 : 	return clone;

	mov	eax, DWORD PTR _clone$[ebp]
$LN2@Clone@4:

; 1435 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ$0:
	mov	eax, DWORD PTR $T8741[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ ENDP		; TiXmlText::Clone
PUBLIC	??_7TiXmlText@@6B@				; TiXmlText::`vftable'
PUBLIC	??_R4TiXmlText@@6B@				; TiXmlText::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlText@@@8				; TiXmlText `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlText@@8				; TiXmlText::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlText@@8				; TiXmlText::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlText@@8			; TiXmlText::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ToText@TiXmlText@@UAEPAV1@XZ			; TiXmlText::ToText
PUBLIC	?ToText@TiXmlText@@UBEPBV1@XZ			; TiXmlText::ToText
EXTRN	??_ETiXmlText@@UAEPAXI@Z:PROC			; TiXmlText::`vector deleting destructor'
EXTRN	?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:PROC ; TiXmlText::Parse
;	COMDAT ??_R1A@?0A@EA@TiXmlText@@8
; File i:\svnroot\client\ogremain\tinyxml.h
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlText@@8 DD FLAT:??_R0?AVTiXmlText@@@8 ; TiXmlText::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlText@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlText@@8
rdata$r	SEGMENT
??_R2TiXmlText@@8 DD FLAT:??_R1A@?0A@EA@TiXmlText@@8	; TiXmlText::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlNode@@8
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlText@@8
rdata$r	SEGMENT
??_R3TiXmlText@@8 DD 00H				; TiXmlText::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TiXmlText@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlText@@@8
_DATA	SEGMENT
??_R0?AVTiXmlText@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlText `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlText@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlText@@6B@
rdata$r	SEGMENT
??_R4TiXmlText@@6B@ DD 00H				; TiXmlText::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlText@@@8
	DD	FLAT:??_R3TiXmlText@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlText@@6B@
CONST	SEGMENT
??_7TiXmlText@@6B@ DD FLAT:??_R4TiXmlText@@6B@		; TiXmlText::`vftable'
	DD	FLAT:??_ETiXmlText@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	FLAT:?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
	DD	FLAT:?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
	DD	FLAT:?ToText@TiXmlText@@UAEPAV1@XZ
	DD	FLAT:?ToText@TiXmlText@@UBEPBV1@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
	DD	FLAT:?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ
	DD	FLAT:?Accept@TiXmlText@@UBE_NPAVTiXmlVisitor@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0TiXmlText@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlText@@QAE@PBD@Z$0
__ehfuncinfo$??0TiXmlText@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0TiXmlText@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0TiXmlText@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_initValue$ = 8						; size = 4
??0TiXmlText@@QAE@PBD@Z PROC				; TiXmlText::TiXmlText, COMDAT
; _this$ = ecx

; 1213 : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlText@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlText@@6B@

; 1214 : 		SetValue( initValue );

	mov	ecx, DWORD PTR _initValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValue@TiXmlNode@@QAEXPBD@Z		; TiXmlNode::SetValue

; 1215 : 		cdata = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+44], 0

; 1216 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TiXmlText@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__ehhandler$??0TiXmlText@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlText@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlText@@QAE@PBD@Z ENDP				; TiXmlText::TiXmlText
; Function compile flags: /Odtp
;	COMDAT ?ToText@TiXmlText@@UBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToText@TiXmlText@@UBEPBV1@XZ PROC			; TiXmlText::ToText, COMDAT
; _this$ = ecx

; 1241 : 	virtual const TiXmlText* ToText() const { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@TiXmlText@@UBEPBV1@XZ ENDP			; TiXmlText::ToText
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToText@TiXmlText@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToText@TiXmlText@@UAEPAV1@XZ PROC			; TiXmlText::ToText, COMDAT
; _this$ = ecx

; 1242 : 	virtual TiXmlText*       ToText()       { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@TiXmlText@@UAEPAV1@XZ ENDP			; TiXmlText::ToText
_TEXT	ENDS
PUBLIC	??1TiXmlText@@UAE@XZ				; TiXmlText::~TiXmlText
; Function compile flags: /Odtp
;	COMDAT ??_GTiXmlText@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlText@@UAEPAXI@Z PROC				; TiXmlText::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlText@@UAE@XZ			; TiXmlText::~TiXmlText
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlText@@UAEPAXI@Z ENDP				; TiXmlText::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1TiXmlText@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TiXmlText@@UAE@XZ$0
__ehfuncinfo$??1TiXmlText@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1TiXmlText@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1TiXmlText@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1TiXmlText@@UAE@XZ PROC				; TiXmlText::~TiXmlText, COMDAT
; _this$ = ecx

; 1217 : 	virtual ~TiXmlText() {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TiXmlText@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlText@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1TiXmlText@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__ehhandler$??1TiXmlText@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TiXmlText@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TiXmlText@@UAE@XZ ENDP				; TiXmlText::~TiXmlText
PUBLIC	??_7TiXmlDeclaration@@6B@			; TiXmlDeclaration::`vftable'
PUBLIC	??0TiXmlDeclaration@@QAE@PBD00@Z		; TiXmlDeclaration::TiXmlDeclaration
PUBLIC	??_R4TiXmlDeclaration@@6B@			; TiXmlDeclaration::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlDeclaration@@@8			; TiXmlDeclaration `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlDeclaration@@8			; TiXmlDeclaration::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlDeclaration@@8			; TiXmlDeclaration::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlDeclaration@@8		; TiXmlDeclaration::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z	; TiXmlDeclaration::Print
PUBLIC	?ToDeclaration@TiXmlDeclaration@@UAEPAV1@XZ	; TiXmlDeclaration::ToDeclaration
PUBLIC	?ToDeclaration@TiXmlDeclaration@@UBEPBV1@XZ	; TiXmlDeclaration::ToDeclaration
PUBLIC	?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ	; TiXmlDeclaration::Clone
PUBLIC	?Accept@TiXmlDeclaration@@UBE_NPAVTiXmlVisitor@@@Z ; TiXmlDeclaration::Accept
PUBLIC	?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@HPAVTiXmlString@@@Z ; TiXmlDeclaration::Print
EXTRN	??_ETiXmlDeclaration@@UAEPAXI@Z:PROC		; TiXmlDeclaration::`vector deleting destructor'
EXTRN	?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:PROC ; TiXmlDeclaration::Parse
;	COMDAT ??_R1A@?0A@EA@TiXmlDeclaration@@8
; File i:\svnroot\client\ogremain\tinyxml.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlDeclaration@@8 DD FLAT:??_R0?AVTiXmlDeclaration@@@8 ; TiXmlDeclaration::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlDeclaration@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlDeclaration@@8
rdata$r	SEGMENT
??_R2TiXmlDeclaration@@8 DD FLAT:??_R1A@?0A@EA@TiXmlDeclaration@@8 ; TiXmlDeclaration::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlNode@@8
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlDeclaration@@8
rdata$r	SEGMENT
??_R3TiXmlDeclaration@@8 DD 00H				; TiXmlDeclaration::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TiXmlDeclaration@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlDeclaration@@@8
_DATA	SEGMENT
??_R0?AVTiXmlDeclaration@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlDeclaration `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlDeclaration@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlDeclaration@@6B@
rdata$r	SEGMENT
??_R4TiXmlDeclaration@@6B@ DD 00H			; TiXmlDeclaration::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlDeclaration@@@8
	DD	FLAT:??_R3TiXmlDeclaration@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlDeclaration@@6B@
CONST	SEGMENT
??_7TiXmlDeclaration@@6B@ DD FLAT:??_R4TiXmlDeclaration@@6B@ ; TiXmlDeclaration::`vftable'
	DD	FLAT:??_ETiXmlDeclaration@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	FLAT:?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
	DD	FLAT:?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ
	DD	FLAT:?ToDeclaration@TiXmlDeclaration@@UAEPAV1@XZ
	DD	FLAT:?ToDeclaration@TiXmlDeclaration@@UBEPBV1@XZ
	DD	FLAT:?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ
	DD	FLAT:?Accept@TiXmlDeclaration@@UBE_NPAVTiXmlVisitor@@@Z
	DD	FLAT:?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@HPAVTiXmlString@@@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0TiXmlDeclaration@@QAE@PBD00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlDeclaration@@QAE@PBD00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TiXmlDeclaration@@QAE@PBD00@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0TiXmlDeclaration@@QAE@PBD00@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0TiXmlDeclaration@@QAE@PBD00@Z$3
__ehfuncinfo$??0TiXmlDeclaration@@QAE@PBD00@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0TiXmlDeclaration@@QAE@PBD00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__version$ = 8						; size = 4
__encoding$ = 12					; size = 4
__standalone$ = 16					; size = 4
??0TiXmlDeclaration@@QAE@PBD00@Z PROC			; TiXmlDeclaration::TiXmlDeclaration
; _this$ = ecx

; 1442 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlDeclaration@@QAE@PBD00@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlDeclaration@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1443 : 	version = _version;

	mov	ecx, DWORD PTR __version$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 1444 : 	encoding = _encoding;

	mov	edx, DWORD PTR __encoding$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 1445 : 	standalone = _standalone;

	mov	eax, DWORD PTR __standalone$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 1446 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0TiXmlDeclaration@@QAE@PBD00@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__unwindfunclet$??0TiXmlDeclaration@@QAE@PBD00@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$??0TiXmlDeclaration@@QAE@PBD00@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$??0TiXmlDeclaration@@QAE@PBD00@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??0TiXmlDeclaration@@QAE@PBD00@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlDeclaration@@QAE@PBD00@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlDeclaration@@QAE@PBD00@Z ENDP			; TiXmlDeclaration::TiXmlDeclaration
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
;	COMDAT ?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cfile$ = 8						; size = 4
_depth$ = 12						; size = 4
?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z PROC	; TiXmlDeclaration::Print, COMDAT
; _this$ = ecx

; 1311 : 	virtual void Print( FILE* cfile, int depth ) const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1312 : 		Print( cfile, depth, 0 );

	push	0
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cfile$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+68]
	call	edx

; 1313 : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z ENDP	; TiXmlDeclaration::Print
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToDeclaration@TiXmlDeclaration@@UBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDeclaration@TiXmlDeclaration@@UBEPBV1@XZ PROC	; TiXmlDeclaration::ToDeclaration, COMDAT
; _this$ = ecx

; 1317 : 	virtual const TiXmlDeclaration* ToDeclaration() const { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDeclaration@TiXmlDeclaration@@UBEPBV1@XZ ENDP	; TiXmlDeclaration::ToDeclaration
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToDeclaration@TiXmlDeclaration@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDeclaration@TiXmlDeclaration@@UAEPAV1@XZ PROC	; TiXmlDeclaration::ToDeclaration, COMDAT
; _this$ = ecx

; 1318 : 	virtual TiXmlDeclaration*       ToDeclaration()       { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDeclaration@TiXmlDeclaration@@UAEPAV1@XZ ENDP	; TiXmlDeclaration::ToDeclaration
_TEXT	ENDS
PUBLIC	??1TiXmlDeclaration@@UAE@XZ			; TiXmlDeclaration::~TiXmlDeclaration
; Function compile flags: /Odtp
;	COMDAT ??_GTiXmlDeclaration@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlDeclaration@@UAEPAXI@Z PROC			; TiXmlDeclaration::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlDeclaration@@UAE@XZ		; TiXmlDeclaration::~TiXmlDeclaration
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlDeclaration@@UAEPAXI@Z ENDP			; TiXmlDeclaration::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1TiXmlDeclaration@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$3
__ehfuncinfo$??1TiXmlDeclaration@@UAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1TiXmlDeclaration@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1TiXmlDeclaration@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1TiXmlDeclaration@@UAE@XZ PROC			; TiXmlDeclaration::~TiXmlDeclaration, COMDAT
; _this$ = ecx

; 1298 : 	virtual ~TiXmlDeclaration()	{}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TiXmlDeclaration@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlDeclaration@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??1TiXmlDeclaration@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TiXmlDeclaration@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TiXmlDeclaration@@UAE@XZ ENDP			; TiXmlDeclaration::~TiXmlDeclaration
PUBLIC	?CopyTo@TiXmlDeclaration@@IBEXPAV1@@Z		; TiXmlDeclaration::CopyTo
PUBLIC	??0TiXmlDeclaration@@QAE@ABV0@@Z		; TiXmlDeclaration::TiXmlDeclaration
xdata$x	SEGMENT
__unwindtable$??0TiXmlDeclaration@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlDeclaration@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TiXmlDeclaration@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0TiXmlDeclaration@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0TiXmlDeclaration@@QAE@ABV0@@Z$3
__ehfuncinfo$??0TiXmlDeclaration@@QAE@ABV0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0TiXmlDeclaration@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_copy$ = 8						; size = 4
??0TiXmlDeclaration@@QAE@ABV0@@Z PROC			; TiXmlDeclaration::TiXmlDeclaration
; _this$ = ecx

; 1464 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlDeclaration@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlDeclaration@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1465 : 	copy.CopyTo( this );	

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _copy$[ebp]
	call	?CopyTo@TiXmlDeclaration@@IBEXPAV1@@Z	; TiXmlDeclaration::CopyTo

; 1466 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0TiXmlDeclaration@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__unwindfunclet$??0TiXmlDeclaration@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$??0TiXmlDeclaration@@QAE@ABV0@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$??0TiXmlDeclaration@@QAE@ABV0@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??0TiXmlDeclaration@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlDeclaration@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlDeclaration@@QAE@ABV0@@Z ENDP			; TiXmlDeclaration::TiXmlDeclaration
PUBLIC	??4TiXmlDeclaration@@QAEXABV0@@Z		; TiXmlDeclaration::operator=
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_copy$ = 8						; size = 4
??4TiXmlDeclaration@@QAEXABV0@@Z PROC			; TiXmlDeclaration::operator=
; _this$ = ecx

; 1470 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1471 : 	Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@TiXmlNode@@QAEXXZ		; TiXmlNode::Clear

; 1472 : 	copy.CopyTo( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _copy$[ebp]
	call	?CopyTo@TiXmlDeclaration@@IBEXPAV1@@Z	; TiXmlDeclaration::CopyTo

; 1473 : }

	mov	esp, ebp
	pop	ebp
	ret	4
??4TiXmlDeclaration@@QAEXABV0@@Z ENDP			; TiXmlDeclaration::operator=
; Function compile flags: /Odtp
_this$ = -4						; size = 4
_cfile$ = 8						; size = 4
___formal$ = 12						; size = 4
_str$ = 16						; size = 4
?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@HPAVTiXmlString@@@Z PROC ; TiXmlDeclaration::Print
; _this$ = ecx

; 1477 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1478 : 	if ( cfile ) fprintf( cfile, "<?xml " );

	cmp	DWORD PTR _cfile$[ebp], 0
	je	SHORT $LN13@Print@6
	push	OFFSET $SG7747
	mov	eax, DWORD PTR _cfile$[ebp]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN13@Print@6:

; 1479 : 	if ( str )	 (*str) += "<?xml ";

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN12@Print@6
	push	OFFSET $SG7749
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=
$LN12@Print@6:

; 1480 : 
; 1481 : 	if ( !version.empty() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?empty@TiXmlString@@QBE_NXZ		; TiXmlString::empty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN11@Print@6

; 1482 : 		if ( cfile ) fprintf (cfile, "version=\"%s\" ", version.c_str ());

	cmp	DWORD PTR _cfile$[ebp], 0
	je	SHORT $LN10@Print@6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	push	OFFSET $SG7752
	mov	edx, DWORD PTR _cfile$[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
$LN10@Print@6:

; 1483 : 		if ( str ) { (*str) += "version=\""; (*str) += version; (*str) += "\" "; }

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN11@Print@6
	push	OFFSET $SG7754
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator+=
	push	OFFSET $SG7755
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=
$LN11@Print@6:

; 1484 : 	}
; 1485 : 	if ( !encoding.empty() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?empty@TiXmlString@@QBE_NXZ		; TiXmlString::empty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN8@Print@6

; 1486 : 		if ( cfile ) fprintf (cfile, "encoding=\"%s\" ", encoding.c_str ());

	cmp	DWORD PTR _cfile$[ebp], 0
	je	SHORT $LN7@Print@6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	push	OFFSET $SG7758
	mov	edx, DWORD PTR _cfile$[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
$LN7@Print@6:

; 1487 : 		if ( str ) { (*str) += "encoding=\""; (*str) += encoding; (*str) += "\" "; }

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN8@Print@6
	push	OFFSET $SG7760
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator+=
	push	OFFSET $SG7761
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=
$LN8@Print@6:

; 1488 : 	}
; 1489 : 	if ( !standalone.empty() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?empty@TiXmlString@@QBE_NXZ		; TiXmlString::empty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN5@Print@6

; 1490 : 		if ( cfile ) fprintf (cfile, "standalone=\"%s\" ", standalone.c_str ());

	cmp	DWORD PTR _cfile$[ebp], 0
	je	SHORT $LN4@Print@6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	push	OFFSET $SG7764
	mov	edx, DWORD PTR _cfile$[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
$LN4@Print@6:

; 1491 : 		if ( str ) { (*str) += "standalone=\""; (*str) += standalone; (*str) += "\" "; }

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN5@Print@6
	push	OFFSET $SG7766
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator+=
	push	OFFSET $SG7767
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=
$LN5@Print@6:

; 1492 : 	}
; 1493 : 	if ( cfile ) fprintf( cfile, "?>" );

	cmp	DWORD PTR _cfile$[ebp], 0
	je	SHORT $LN2@Print@6
	push	OFFSET $SG7769
	mov	ecx, DWORD PTR _cfile$[ebp]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN2@Print@6:

; 1494 : 	if ( str )	 (*str) += "?>";

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN14@Print@6
	push	OFFSET $SG7771
	mov	ecx, DWORD PTR _str$[ebp]
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=
$LN14@Print@6:

; 1495 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@HPAVTiXmlString@@@Z ENDP ; TiXmlDeclaration::Print
; Function compile flags: /Odtp
_this$ = -4						; size = 4
_target$ = 8						; size = 4
?CopyTo@TiXmlDeclaration@@IBEXPAV1@@Z PROC		; TiXmlDeclaration::CopyTo
; _this$ = ecx

; 1499 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1500 : 	TiXmlNode::CopyTo( target );

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyTo@TiXmlNode@@IBEXPAV1@@Z		; TiXmlNode::CopyTo

; 1501 : 
; 1502 : 	target->version = version;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	push	ecx
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 44					; 0000002cH
	call	??4TiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator=

; 1503 : 	target->encoding = encoding;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 48					; 00000030H
	call	??4TiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator=

; 1504 : 	target->standalone = standalone;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 52					; 00000034H
	call	??4TiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator=

; 1505 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CopyTo@TiXmlDeclaration@@IBEXPAV1@@Z ENDP		; TiXmlDeclaration::CopyTo
; Function compile flags: /Odtp
_this$ = -4						; size = 4
_visitor$ = 8						; size = 4
?Accept@TiXmlDeclaration@@UBE_NPAVTiXmlVisitor@@@Z PROC	; TiXmlDeclaration::Accept
; _this$ = ecx

; 1509 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1510 : 	return visitor->Visit( *this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1511 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Accept@TiXmlDeclaration@@UBE_NPAVTiXmlVisitor@@@Z ENDP	; TiXmlDeclaration::Accept
_TEXT	ENDS
PUBLIC	??0TiXmlDeclaration@@QAE@XZ			; TiXmlDeclaration::TiXmlDeclaration
xdata$x	SEGMENT
__unwindtable$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ$0
__ehfuncinfo$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv71 = -32						; size = 4
_this$ = -28						; size = 4
$T8817 = -24						; size = 4
$T8816 = -20						; size = 4
_clone$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ PROC	; TiXmlDeclaration::Clone
; _this$ = ecx

; 1515 : {	

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1516 : 	TiXmlDeclaration* clone = new TiXmlDeclaration();

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8817[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8817[ebp], 0
	je	SHORT $LN4@Clone@5
	mov	ecx, DWORD PTR $T8817[ebp]
	call	??0TiXmlDeclaration@@QAE@XZ		; TiXmlDeclaration::TiXmlDeclaration
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN5@Clone@5
$LN4@Clone@5:
	mov	DWORD PTR tv71[ebp], 0
$LN5@Clone@5:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T8816[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T8816[ebp]
	mov	DWORD PTR _clone$[ebp], ecx

; 1517 : 
; 1518 : 	if ( !clone )

	cmp	DWORD PTR _clone$[ebp], 0
	jne	SHORT $LN1@Clone@5

; 1519 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@Clone@5
$LN1@Clone@5:

; 1520 : 
; 1521 : 	CopyTo( clone );

	mov	edx, DWORD PTR _clone$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyTo@TiXmlDeclaration@@IBEXPAV1@@Z	; TiXmlDeclaration::CopyTo

; 1522 : 	return clone;

	mov	eax, DWORD PTR _clone$[ebp]
$LN2@Clone@5:

; 1523 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ$0:
	mov	eax, DWORD PTR $T8817[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ ENDP	; TiXmlDeclaration::Clone
;	COMDAT xdata$x
; File i:\svnroot\client\ogremain\tinyxml.h
xdata$x	SEGMENT
__unwindtable$??0TiXmlDeclaration@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$3
__ehfuncinfo$??0TiXmlDeclaration@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0TiXmlDeclaration@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0TiXmlDeclaration@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0TiXmlDeclaration@@QAE@XZ PROC			; TiXmlDeclaration::TiXmlDeclaration, COMDAT
; _this$ = ecx

; 1281 : 	TiXmlDeclaration()   : TiXmlNode( TiXmlNode::DECLARATION ) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlDeclaration@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlDeclaration@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??0TiXmlDeclaration@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlDeclaration@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlDeclaration@@QAE@XZ ENDP			; TiXmlDeclaration::TiXmlDeclaration
PUBLIC	?Print@TiXmlUnknown@@UBEXPAU_iobuf@@H@Z		; TiXmlUnknown::Print
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$7794 = -4						; size = 4
_cfile$ = 8						; size = 4
_depth$ = 12						; size = 4
?Print@TiXmlUnknown@@UBEXPAU_iobuf@@H@Z PROC		; TiXmlUnknown::Print
; _this$ = ecx

; 1527 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1528 : 	for ( int i=0; i<depth; i++ )

	mov	DWORD PTR _i$7794[ebp], 0
	jmp	SHORT $LN3@Print@7
$LN2@Print@7:
	mov	eax, DWORD PTR _i$7794[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7794[ebp], eax
$LN3@Print@7:
	mov	ecx, DWORD PTR _i$7794[ebp]
	cmp	ecx, DWORD PTR _depth$[ebp]
	jge	SHORT $LN1@Print@7

; 1529 : 		fprintf( cfile, "    " );

	push	OFFSET $SG7798
	mov	edx, DWORD PTR _cfile$[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	jmp	SHORT $LN2@Print@7
$LN1@Print@7:

; 1530 : 	fprintf( cfile, "<%s>", value.c_str() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	push	OFFSET $SG7799
	mov	eax, DWORD PTR _cfile$[ebp]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH

; 1531 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Print@TiXmlUnknown@@UBEXPAU_iobuf@@H@Z ENDP		; TiXmlUnknown::Print
_TEXT	ENDS
PUBLIC	?CopyTo@TiXmlUnknown@@IBEXPAV1@@Z		; TiXmlUnknown::CopyTo
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_target$ = 8						; size = 4
?CopyTo@TiXmlUnknown@@IBEXPAV1@@Z PROC			; TiXmlUnknown::CopyTo
; _this$ = ecx

; 1535 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1536 : 	TiXmlNode::CopyTo( target );

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyTo@TiXmlNode@@IBEXPAV1@@Z		; TiXmlNode::CopyTo

; 1537 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CopyTo@TiXmlUnknown@@IBEXPAV1@@Z ENDP			; TiXmlUnknown::CopyTo
_TEXT	ENDS
PUBLIC	?Accept@TiXmlUnknown@@UBE_NPAVTiXmlVisitor@@@Z	; TiXmlUnknown::Accept
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_visitor$ = 8						; size = 4
?Accept@TiXmlUnknown@@UBE_NPAVTiXmlVisitor@@@Z PROC	; TiXmlUnknown::Accept
; _this$ = ecx

; 1541 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1542 : 	return visitor->Visit( *this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax

; 1543 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Accept@TiXmlUnknown@@UBE_NPAVTiXmlVisitor@@@Z ENDP	; TiXmlUnknown::Accept
_TEXT	ENDS
PUBLIC	??0TiXmlUnknown@@QAE@XZ				; TiXmlUnknown::TiXmlUnknown
PUBLIC	?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ	; TiXmlUnknown::Clone
xdata$x	SEGMENT
__unwindtable$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ$0
__ehfuncinfo$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv71 = -32						; size = 4
_this$ = -28						; size = 4
$T8842 = -24						; size = 4
$T8841 = -20						; size = 4
_clone$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ PROC		; TiXmlUnknown::Clone
; _this$ = ecx

; 1547 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1548 : 	TiXmlUnknown* clone = new TiXmlUnknown();

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8842[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8842[ebp], 0
	je	SHORT $LN4@Clone@6
	mov	ecx, DWORD PTR $T8842[ebp]
	call	??0TiXmlUnknown@@QAE@XZ			; TiXmlUnknown::TiXmlUnknown
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN5@Clone@6
$LN4@Clone@6:
	mov	DWORD PTR tv71[ebp], 0
$LN5@Clone@6:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T8841[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T8841[ebp]
	mov	DWORD PTR _clone$[ebp], ecx

; 1549 : 
; 1550 : 	if ( !clone )

	cmp	DWORD PTR _clone$[ebp], 0
	jne	SHORT $LN1@Clone@6

; 1551 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@Clone@6
$LN1@Clone@6:

; 1552 : 
; 1553 : 	CopyTo( clone );

	mov	edx, DWORD PTR _clone$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyTo@TiXmlUnknown@@IBEXPAV1@@Z	; TiXmlUnknown::CopyTo

; 1554 : 	return clone;

	mov	eax, DWORD PTR _clone$[ebp]
$LN2@Clone@6:

; 1555 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ$0:
	mov	eax, DWORD PTR $T8842[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ ENDP		; TiXmlUnknown::Clone
PUBLIC	??_7TiXmlUnknown@@6B@				; TiXmlUnknown::`vftable'
PUBLIC	??_R4TiXmlUnknown@@6B@				; TiXmlUnknown::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlUnknown@@@8			; TiXmlUnknown `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlUnknown@@8				; TiXmlUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlUnknown@@8				; TiXmlUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlUnknown@@8			; TiXmlUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ToUnknown@TiXmlUnknown@@UAEPAV1@XZ		; TiXmlUnknown::ToUnknown
PUBLIC	?ToUnknown@TiXmlUnknown@@UBEPBV1@XZ		; TiXmlUnknown::ToUnknown
EXTRN	??_ETiXmlUnknown@@UAEPAXI@Z:PROC		; TiXmlUnknown::`vector deleting destructor'
EXTRN	?Parse@TiXmlUnknown@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:PROC ; TiXmlUnknown::Parse
;	COMDAT ??_R1A@?0A@EA@TiXmlUnknown@@8
; File i:\svnroot\client\ogremain\tinyxml.h
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlUnknown@@8 DD FLAT:??_R0?AVTiXmlUnknown@@@8 ; TiXmlUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlUnknown@@8
rdata$r	SEGMENT
??_R2TiXmlUnknown@@8 DD FLAT:??_R1A@?0A@EA@TiXmlUnknown@@8 ; TiXmlUnknown::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlNode@@8
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlUnknown@@8
rdata$r	SEGMENT
??_R3TiXmlUnknown@@8 DD 00H				; TiXmlUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TiXmlUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlUnknown@@@8
_DATA	SEGMENT
??_R0?AVTiXmlUnknown@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlUnknown@@6B@
rdata$r	SEGMENT
??_R4TiXmlUnknown@@6B@ DD 00H				; TiXmlUnknown::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlUnknown@@@8
	DD	FLAT:??_R3TiXmlUnknown@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlUnknown@@6B@
CONST	SEGMENT
??_7TiXmlUnknown@@6B@ DD FLAT:??_R4TiXmlUnknown@@6B@	; TiXmlUnknown::`vftable'
	DD	FLAT:??_ETiXmlUnknown@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlUnknown@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlUnknown@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	FLAT:?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
	DD	FLAT:?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ
	DD	FLAT:?ToUnknown@TiXmlUnknown@@UAEPAV1@XZ
	DD	FLAT:?ToUnknown@TiXmlUnknown@@UBEPBV1@XZ
	DD	FLAT:?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
	DD	FLAT:?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ
	DD	FLAT:?Accept@TiXmlUnknown@@UBE_NPAVTiXmlVisitor@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0TiXmlUnknown@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlUnknown@@QAE@XZ$0
__ehfuncinfo$??0TiXmlUnknown@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0TiXmlUnknown@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0TiXmlUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0TiXmlUnknown@@QAE@XZ PROC				; TiXmlUnknown::TiXmlUnknown, COMDAT
; _this$ = ecx

; 1349 : 	TiXmlUnknown() : TiXmlNode( TiXmlNode::UNKNOWN )	{}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlUnknown@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlUnknown@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TiXmlUnknown@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__ehhandler$??0TiXmlUnknown@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlUnknown@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlUnknown@@QAE@XZ ENDP				; TiXmlUnknown::TiXmlUnknown
; Function compile flags: /Odtp
;	COMDAT ?ToUnknown@TiXmlUnknown@@UBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToUnknown@TiXmlUnknown@@UBEPBV1@XZ PROC		; TiXmlUnknown::ToUnknown, COMDAT
; _this$ = ecx

; 1362 : 	virtual const TiXmlUnknown*     ToUnknown()     const { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ToUnknown@TiXmlUnknown@@UBEPBV1@XZ ENDP		; TiXmlUnknown::ToUnknown
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ToUnknown@TiXmlUnknown@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToUnknown@TiXmlUnknown@@UAEPAV1@XZ PROC		; TiXmlUnknown::ToUnknown, COMDAT
; _this$ = ecx

; 1363 : 	virtual TiXmlUnknown*           ToUnknown()	    { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ToUnknown@TiXmlUnknown@@UAEPAV1@XZ ENDP		; TiXmlUnknown::ToUnknown
_TEXT	ENDS
PUBLIC	??1TiXmlUnknown@@UAE@XZ				; TiXmlUnknown::~TiXmlUnknown
; Function compile flags: /Odtp
;	COMDAT ??_GTiXmlUnknown@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlUnknown@@UAEPAXI@Z PROC			; TiXmlUnknown::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlUnknown@@UAE@XZ			; TiXmlUnknown::~TiXmlUnknown
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlUnknown@@UAEPAXI@Z ENDP			; TiXmlUnknown::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1TiXmlUnknown@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TiXmlUnknown@@UAE@XZ$0
__ehfuncinfo$??1TiXmlUnknown@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1TiXmlUnknown@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1TiXmlUnknown@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1TiXmlUnknown@@UAE@XZ PROC				; TiXmlUnknown::~TiXmlUnknown, COMDAT
; _this$ = ecx

; 1350 : 	virtual ~TiXmlUnknown() {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TiXmlUnknown@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlUnknown@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1TiXmlUnknown@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__ehhandler$??1TiXmlUnknown@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TiXmlUnknown@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TiXmlUnknown@@UAE@XZ ENDP				; TiXmlUnknown::~TiXmlUnknown
PUBLIC	??0TiXmlAttribute@@QAE@XZ			; TiXmlAttribute::TiXmlAttribute
xdata$x	SEGMENT
__unwindtable$??0TiXmlAttributeSet@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlAttributeSet@@QAE@XZ$0
__ehfuncinfo$??0TiXmlAttributeSet@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0TiXmlAttributeSet@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0TiXmlAttributeSet@@QAE@XZ PROC			; TiXmlAttributeSet::TiXmlAttributeSet
; _this$ = ecx

; 1559 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlAttributeSet@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlAttribute@@QAE@XZ		; TiXmlAttribute::TiXmlAttribute
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1560 : 	sentinel.next = &sentinel;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 1561 : 	sentinel.prev = &sentinel;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], eax

; 1562 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0TiXmlAttributeSet@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlAttribute@@UAE@XZ
__ehhandler$??0TiXmlAttributeSet@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlAttributeSet@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlAttributeSet@@QAE@XZ ENDP			; TiXmlAttributeSet::TiXmlAttributeSet
;	COMDAT xdata$x
; File i:\svnroot\client\ogremain\tinyxml.h
xdata$x	SEGMENT
__unwindtable$??0TiXmlAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TiXmlAttribute@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0TiXmlAttribute@@QAE@XZ$2
__ehfuncinfo$??0TiXmlAttribute@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0TiXmlAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0TiXmlAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0TiXmlAttribute@@QAE@XZ PROC				; TiXmlAttribute::TiXmlAttribute, COMDAT
; _this$ = ecx

; 787  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlAttribute@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlBase@@QAE@XZ			; TiXmlBase::TiXmlBase
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlAttribute@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 788  : 		document = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 789  : 		prev = next = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 790  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TiXmlAttribute@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlBase@@UAE@XZ			; TiXmlBase::~TiXmlBase
__unwindfunclet$??0TiXmlAttribute@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$??0TiXmlAttribute@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??0TiXmlAttribute@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlAttribute@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlAttribute@@QAE@XZ ENDP				; TiXmlAttribute::TiXmlAttribute
xdata$x	SEGMENT
__unwindtable$??1TiXmlAttributeSet@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TiXmlAttributeSet@@QAE@XZ$0
__ehfuncinfo$??1TiXmlAttributeSet@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1TiXmlAttributeSet@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1TiXmlAttributeSet@@QAE@XZ PROC			; TiXmlAttributeSet::~TiXmlAttributeSet
; _this$ = ecx

; 1566 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TiXmlAttributeSet@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1567 : 	assert( sentinel.next == &sentinel );
; 1568 : 	assert( sentinel.prev == &sentinel );
; 1569 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlAttribute@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1TiXmlAttributeSet@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlAttribute@@UAE@XZ
__ehhandler$??1TiXmlAttributeSet@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TiXmlAttributeSet@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TiXmlAttributeSet@@QAE@XZ ENDP			; TiXmlAttributeSet::~TiXmlAttributeSet
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_addMe$ = 8						; size = 4
?Add@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z PROC	; TiXmlAttributeSet::Add
; _this$ = ecx

; 1573 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1574 :     #ifdef TIXML_USE_STL
; 1575 : 	assert( !Find( TIXML_STRING( addMe->Name() ) ) );	// Shouldn't be multiply adding to the set.
; 1576 : 	#else
; 1577 : 	assert( !Find( addMe->Name() ) );	// Shouldn't be multiply adding to the set.
; 1578 : 	#endif
; 1579 : 
; 1580 : 	addMe->next = &sentinel;

	mov	eax, DWORD PTR _addMe$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 1581 : 	addMe->prev = sentinel.prev;

	mov	edx, DWORD PTR _addMe$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+28], ecx

; 1582 : 
; 1583 : 	sentinel.prev->next = addMe;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _addMe$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 1584 : 	sentinel.prev      = addMe;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _addMe$[ebp]
	mov	DWORD PTR [edx+28], eax

; 1585 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Add@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z ENDP	; TiXmlAttributeSet::Add
; Function compile flags: /Odtp
_this$ = -8						; size = 4
_node$ = -4						; size = 4
_removeMe$ = 8						; size = 4
?Remove@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z PROC ; TiXmlAttributeSet::Remove
; _this$ = ecx

; 1588 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1589 : 	TiXmlAttribute* node;
; 1590 : 
; 1591 : 	for( node = sentinel.next; node != &sentinel; node = node->next )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _node$[ebp], ecx
	jmp	SHORT $LN4@Remove
$LN3@Remove:
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _node$[ebp], eax
$LN4@Remove:
	mov	ecx, DWORD PTR _node$[ebp]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN5@Remove

; 1592 : 	{
; 1593 : 		if ( node == removeMe )

	mov	edx, DWORD PTR _node$[ebp]
	cmp	edx, DWORD PTR _removeMe$[ebp]
	jne	SHORT $LN1@Remove

; 1594 : 		{
; 1595 : 			node->prev->next = node->next;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax

; 1596 : 			node->next->prev = node->prev;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+28], ecx

; 1597 : 			node->next = 0;

	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+32], 0

; 1598 : 			node->prev = 0;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+28], 0

; 1599 : 			return;

	jmp	SHORT $LN5@Remove
$LN1@Remove:

; 1600 : 		}
; 1601 : 	}

	jmp	SHORT $LN3@Remove
$LN5@Remove:

; 1602 : 	assert( 0 );		// we tried to remove a non-linked attribute.
; 1603 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z ENDP ; TiXmlAttributeSet::Remove
; Function compile flags: /Odtp
_this$ = -8						; size = 4
_node$7844 = -4						; size = 4
_name$ = 8						; size = 4
?Find@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@PBD@Z PROC ; TiXmlAttributeSet::Find
; _this$ = ecx

; 1632 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1633 : 	for( const TiXmlAttribute* node = sentinel.next; node != &sentinel; node = node->next )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _node$7844[ebp], ecx
	jmp	SHORT $LN4@Find
$LN3@Find:
	mov	edx, DWORD PTR _node$7844[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _node$7844[ebp], eax
$LN4@Find:
	mov	ecx, DWORD PTR _node$7844[ebp]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Find

; 1634 : 	{
; 1635 : 		if ( strcmp( node->name.c_str(), name ) == 0 )

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	ecx, DWORD PTR _node$7844[ebp]
	add	ecx, 20					; 00000014H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@Find

; 1636 : 			return node;

	mov	eax, DWORD PTR _node$7844[ebp]
	jmp	SHORT $LN5@Find
$LN1@Find:

; 1637 : 	}

	jmp	SHORT $LN3@Find
$LN2@Find:

; 1638 : 	return 0;

	xor	eax, eax
$LN5@Find:

; 1639 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Find@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@PBD@Z ENDP ; TiXmlAttributeSet::Find
_TEXT	ENDS
PUBLIC	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z		; TiXmlHandle::TiXmlHandle
PUBLIC	?FirstChild@TiXmlNode@@QAEPAV1@XZ		; TiXmlNode::FirstChild
PUBLIC	?FirstChild@TiXmlHandle@@QBE?AV1@XZ		; TiXmlHandle::FirstChild
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_child$7854 = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?FirstChild@TiXmlHandle@@QBE?AV1@XZ PROC		; TiXmlHandle::FirstChild
; _this$ = ecx

; 1691 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1692 : 	if ( node )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@FirstChild@4

; 1693 : 	{
; 1694 : 		TiXmlNode* child = node->FirstChild();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?FirstChild@TiXmlNode@@QAEPAV1@XZ	; TiXmlNode::FirstChild
	mov	DWORD PTR _child$7854[ebp], eax

; 1695 : 		if ( child )

	cmp	DWORD PTR _child$7854[ebp], 0
	je	SHORT $LN2@FirstChild@4

; 1696 : 			return TiXmlHandle( child );

	mov	edx, DWORD PTR _child$7854[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@FirstChild@4
$LN2@FirstChild@4:

; 1697 : 	}
; 1698 : 	return TiXmlHandle( 0 );

	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@FirstChild@4:

; 1699 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FirstChild@TiXmlHandle@@QBE?AV1@XZ ENDP		; TiXmlHandle::FirstChild
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
_TEXT	ENDS
;	COMDAT ?FirstChild@TiXmlNode@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FirstChild@TiXmlNode@@QAEPAV1@XZ PROC			; TiXmlNode::FirstChild, COMDAT
; _this$ = ecx

; 524  : 	TiXmlNode* FirstChild()						{ return firstChild; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?FirstChild@TiXmlNode@@QAEPAV1@XZ ENDP			; TiXmlNode::FirstChild
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__node$ = 8						; size = 4
??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z PROC		; TiXmlHandle::TiXmlHandle, COMDAT
; _this$ = ecx

; 1641 : 	TiXmlHandle( TiXmlNode* _node )					{ this->node = _node; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __node$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ENDP		; TiXmlHandle::TiXmlHandle
_TEXT	ENDS
PUBLIC	?FirstChild@TiXmlNode@@QAEPAV1@PBD@Z		; TiXmlNode::FirstChild
PUBLIC	?FirstChild@TiXmlHandle@@QBE?AV1@PBD@Z		; TiXmlHandle::FirstChild
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_child$7864 = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_value$ = 12						; size = 4
?FirstChild@TiXmlHandle@@QBE?AV1@PBD@Z PROC		; TiXmlHandle::FirstChild
; _this$ = ecx

; 1703 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1704 : 	if ( node )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@FirstChild@5

; 1705 : 	{
; 1706 : 		TiXmlNode* child = node->FirstChild( value );

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?FirstChild@TiXmlNode@@QAEPAV1@PBD@Z	; TiXmlNode::FirstChild
	mov	DWORD PTR _child$7864[ebp], eax

; 1707 : 		if ( child )

	cmp	DWORD PTR _child$7864[ebp], 0
	je	SHORT $LN2@FirstChild@5

; 1708 : 			return TiXmlHandle( child );

	mov	eax, DWORD PTR _child$7864[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@FirstChild@5
$LN2@FirstChild@5:

; 1709 : 	}
; 1710 : 	return TiXmlHandle( 0 );

	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@FirstChild@5:

; 1711 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?FirstChild@TiXmlHandle@@QBE?AV1@PBD@Z ENDP		; TiXmlHandle::FirstChild
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
_TEXT	ENDS
;	COMDAT ?FirstChild@TiXmlNode@@QAEPAV1@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__value$ = 8						; size = 4
?FirstChild@TiXmlNode@@QAEPAV1@PBD@Z PROC		; TiXmlNode::FirstChild, COMDAT
; _this$ = ecx

; 527  : 	TiXmlNode* FirstChild( const char * _value ) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 528  : 		// Call through to the const version - safe since nothing is changed. Exiting syntax: cast this to a const (always safe)
; 529  : 		// call the method, cast the return back to non-const.
; 530  : 		return const_cast< TiXmlNode* > ((const_cast< const TiXmlNode* >(this))->FirstChild( _value ));

	mov	eax, DWORD PTR __value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@TiXmlNode@@QBEPBV1@PBD@Z	; TiXmlNode::FirstChild

; 531  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?FirstChild@TiXmlNode@@QAEPAV1@PBD@Z ENDP		; TiXmlNode::FirstChild
_TEXT	ENDS
PUBLIC	?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ ; TiXmlNode::FirstChildElement
PUBLIC	?FirstChildElement@TiXmlHandle@@QBE?AV1@XZ	; TiXmlHandle::FirstChildElement
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_child$7873 = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?FirstChildElement@TiXmlHandle@@QBE?AV1@XZ PROC		; TiXmlHandle::FirstChildElement
; _this$ = ecx

; 1715 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1716 : 	if ( node )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@FirstChild@6

; 1717 : 	{
; 1718 : 		TiXmlElement* child = node->FirstChildElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ ; TiXmlNode::FirstChildElement
	mov	DWORD PTR _child$7873[ebp], eax

; 1719 : 		if ( child )

	cmp	DWORD PTR _child$7873[ebp], 0
	je	SHORT $LN2@FirstChild@6

; 1720 : 			return TiXmlHandle( child );

	mov	edx, DWORD PTR _child$7873[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@FirstChild@6
$LN2@FirstChild@6:

; 1721 : 	}
; 1722 : 	return TiXmlHandle( 0 );

	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@FirstChild@6:

; 1723 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FirstChildElement@TiXmlHandle@@QBE?AV1@XZ ENDP		; TiXmlHandle::FirstChildElement
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
_TEXT	ENDS
;	COMDAT ?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ PROC ; TiXmlNode::FirstChildElement, COMDAT
; _this$ = ecx

; 666  : 	TiXmlElement* FirstChildElement() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 667  : 		return const_cast< TiXmlElement* >( (const_cast< const TiXmlNode* >(this))->FirstChildElement() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChildElement@TiXmlNode@@QBEPBVTiXmlElement@@XZ ; TiXmlNode::FirstChildElement

; 668  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ ENDP ; TiXmlNode::FirstChildElement
_TEXT	ENDS
PUBLIC	?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@PBD@Z ; TiXmlNode::FirstChildElement
PUBLIC	?FirstChildElement@TiXmlHandle@@QBE?AV1@PBD@Z	; TiXmlHandle::FirstChildElement
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_child$7883 = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_value$ = 12						; size = 4
?FirstChildElement@TiXmlHandle@@QBE?AV1@PBD@Z PROC	; TiXmlHandle::FirstChildElement
; _this$ = ecx

; 1727 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1728 : 	if ( node )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@FirstChild@7

; 1729 : 	{
; 1730 : 		TiXmlElement* child = node->FirstChildElement( value );

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@PBD@Z ; TiXmlNode::FirstChildElement
	mov	DWORD PTR _child$7883[ebp], eax

; 1731 : 		if ( child )

	cmp	DWORD PTR _child$7883[ebp], 0
	je	SHORT $LN2@FirstChild@7

; 1732 : 			return TiXmlHandle( child );

	mov	eax, DWORD PTR _child$7883[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@FirstChild@7
$LN2@FirstChild@7:

; 1733 : 	}
; 1734 : 	return TiXmlHandle( 0 );

	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@FirstChild@7:

; 1735 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?FirstChildElement@TiXmlHandle@@QBE?AV1@PBD@Z ENDP	; TiXmlHandle::FirstChildElement
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
_TEXT	ENDS
;	COMDAT ?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__value$ = 8						; size = 4
?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@PBD@Z PROC ; TiXmlNode::FirstChildElement, COMDAT
; _this$ = ecx

; 672  : 	TiXmlElement* FirstChildElement( const char * _value ) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 673  : 		return const_cast< TiXmlElement* >( (const_cast< const TiXmlNode* >(this))->FirstChildElement( _value ) );

	mov	eax, DWORD PTR __value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChildElement@TiXmlNode@@QBEPBVTiXmlElement@@PBD@Z ; TiXmlNode::FirstChildElement

; 674  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@PBD@Z ENDP ; TiXmlNode::FirstChildElement
_TEXT	ENDS
PUBLIC	?Child@TiXmlHandle@@QBE?AV1@H@Z			; TiXmlHandle::Child
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_child$7894 = -8					; size = 4
_i$7893 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_count$ = 12						; size = 4
?Child@TiXmlHandle@@QBE?AV1@H@Z PROC			; TiXmlHandle::Child
; _this$ = ecx

; 1739 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1740 : 	if ( node )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Child

; 1741 : 	{
; 1742 : 		int i;
; 1743 : 		TiXmlNode* child = node->FirstChild();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?FirstChild@TiXmlNode@@QAEPAV1@XZ	; TiXmlNode::FirstChild
	mov	DWORD PTR _child$7894[ebp], eax

; 1744 : 		for (	i=0;

	mov	DWORD PTR _i$7893[ebp], 0

; 1745 : 				child && i<count;

	jmp	SHORT $LN4@Child
$LN3@Child:

; 1746 : 				child = child->NextSibling(), ++i )

	mov	ecx, DWORD PTR _child$7894[ebp]
	call	?NextSibling@TiXmlNode@@QAEPAV1@XZ	; TiXmlNode::NextSibling
	mov	DWORD PTR _child$7894[ebp], eax
	mov	edx, DWORD PTR _i$7893[ebp]
	add	edx, 1
	mov	DWORD PTR _i$7893[ebp], edx
$LN4@Child:
	cmp	DWORD PTR _child$7894[ebp], 0
	je	SHORT $LN2@Child
	mov	eax, DWORD PTR _i$7893[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN2@Child

; 1747 : 		{
; 1748 : 			// nothing
; 1749 : 		}

	jmp	SHORT $LN3@Child
$LN2@Child:

; 1750 : 		if ( child )

	cmp	DWORD PTR _child$7894[ebp], 0
	je	SHORT $LN5@Child

; 1751 : 			return TiXmlHandle( child );

	mov	ecx, DWORD PTR _child$7894[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN6@Child
$LN5@Child:

; 1752 : 	}
; 1753 : 	return TiXmlHandle( 0 );

	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN6@Child:

; 1754 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Child@TiXmlHandle@@QBE?AV1@H@Z ENDP			; TiXmlHandle::Child
_TEXT	ENDS
PUBLIC	?NextSibling@TiXmlNode@@QAEPAV1@PBD@Z		; TiXmlNode::NextSibling
PUBLIC	?Child@TiXmlHandle@@QBE?AV1@PBDH@Z		; TiXmlHandle::Child
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_child$7909 = -8					; size = 4
_i$7908 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_value$ = 12						; size = 4
_count$ = 16						; size = 4
?Child@TiXmlHandle@@QBE?AV1@PBDH@Z PROC			; TiXmlHandle::Child
; _this$ = ecx

; 1758 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1759 : 	if ( node )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Child@2

; 1760 : 	{
; 1761 : 		int i;
; 1762 : 		TiXmlNode* child = node->FirstChild( value );

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?FirstChild@TiXmlNode@@QAEPAV1@PBD@Z	; TiXmlNode::FirstChild
	mov	DWORD PTR _child$7909[ebp], eax

; 1763 : 		for (	i=0;

	mov	DWORD PTR _i$7908[ebp], 0

; 1764 : 				child && i<count;

	jmp	SHORT $LN4@Child@2
$LN3@Child@2:

; 1765 : 				child = child->NextSibling( value ), ++i )

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _child$7909[ebp]
	call	?NextSibling@TiXmlNode@@QAEPAV1@PBD@Z	; TiXmlNode::NextSibling
	mov	DWORD PTR _child$7909[ebp], eax
	mov	ecx, DWORD PTR _i$7908[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$7908[ebp], ecx
$LN4@Child@2:
	cmp	DWORD PTR _child$7909[ebp], 0
	je	SHORT $LN2@Child@2
	mov	edx, DWORD PTR _i$7908[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jge	SHORT $LN2@Child@2

; 1766 : 		{
; 1767 : 			// nothing
; 1768 : 		}

	jmp	SHORT $LN3@Child@2
$LN2@Child@2:

; 1769 : 		if ( child )

	cmp	DWORD PTR _child$7909[ebp], 0
	je	SHORT $LN5@Child@2

; 1770 : 			return TiXmlHandle( child );

	mov	eax, DWORD PTR _child$7909[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN6@Child@2
$LN5@Child@2:

; 1771 : 	}
; 1772 : 	return TiXmlHandle( 0 );

	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN6@Child@2:

; 1773 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Child@TiXmlHandle@@QBE?AV1@PBDH@Z ENDP			; TiXmlHandle::Child
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
_TEXT	ENDS
;	COMDAT ?NextSibling@TiXmlNode@@QAEPAV1@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__next$ = 8						; size = 4
?NextSibling@TiXmlNode@@QAEPAV1@PBD@Z PROC		; TiXmlNode::NextSibling, COMDAT
; _this$ = ecx

; 637  : 	TiXmlNode* NextSibling( const char* _next ) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 638  : 		return const_cast< TiXmlNode* >( (const_cast< const TiXmlNode* >(this))->NextSibling( _next ) );

	mov	eax, DWORD PTR __next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NextSibling@TiXmlNode@@QBEPBV1@PBD@Z	; TiXmlNode::NextSibling

; 639  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?NextSibling@TiXmlNode@@QAEPAV1@PBD@Z ENDP		; TiXmlNode::NextSibling
_TEXT	ENDS
PUBLIC	?NextSiblingElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ ; TiXmlNode::NextSiblingElement
PUBLIC	?ChildElement@TiXmlHandle@@QBE?AV1@H@Z		; TiXmlHandle::ChildElement
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_child$7923 = -8					; size = 4
_i$7922 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_count$ = 12						; size = 4
?ChildElement@TiXmlHandle@@QBE?AV1@H@Z PROC		; TiXmlHandle::ChildElement
; _this$ = ecx

; 1777 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1778 : 	if ( node )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@ChildEleme

; 1779 : 	{
; 1780 : 		int i;
; 1781 : 		TiXmlElement* child = node->FirstChildElement();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ ; TiXmlNode::FirstChildElement
	mov	DWORD PTR _child$7923[ebp], eax

; 1782 : 		for (	i=0;

	mov	DWORD PTR _i$7922[ebp], 0

; 1783 : 				child && i<count;

	jmp	SHORT $LN4@ChildEleme
$LN3@ChildEleme:

; 1784 : 				child = child->NextSiblingElement(), ++i )

	mov	ecx, DWORD PTR _child$7923[ebp]
	call	?NextSiblingElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ ; TiXmlNode::NextSiblingElement
	mov	DWORD PTR _child$7923[ebp], eax
	mov	edx, DWORD PTR _i$7922[ebp]
	add	edx, 1
	mov	DWORD PTR _i$7922[ebp], edx
$LN4@ChildEleme:
	cmp	DWORD PTR _child$7923[ebp], 0
	je	SHORT $LN2@ChildEleme
	mov	eax, DWORD PTR _i$7922[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN2@ChildEleme

; 1785 : 		{
; 1786 : 			// nothing
; 1787 : 		}

	jmp	SHORT $LN3@ChildEleme
$LN2@ChildEleme:

; 1788 : 		if ( child )

	cmp	DWORD PTR _child$7923[ebp], 0
	je	SHORT $LN5@ChildEleme

; 1789 : 			return TiXmlHandle( child );

	mov	ecx, DWORD PTR _child$7923[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN6@ChildEleme
$LN5@ChildEleme:

; 1790 : 	}
; 1791 : 	return TiXmlHandle( 0 );

	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN6@ChildEleme:

; 1792 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ChildElement@TiXmlHandle@@QBE?AV1@H@Z ENDP		; TiXmlHandle::ChildElement
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
_TEXT	ENDS
;	COMDAT ?NextSiblingElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NextSiblingElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ PROC ; TiXmlNode::NextSiblingElement, COMDAT
; _this$ = ecx

; 646  : 	TiXmlElement* NextSiblingElement() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 		return const_cast< TiXmlElement* >( (const_cast< const TiXmlNode* >(this))->NextSiblingElement() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NextSiblingElement@TiXmlNode@@QBEPBVTiXmlElement@@XZ ; TiXmlNode::NextSiblingElement

; 648  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?NextSiblingElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ ENDP ; TiXmlNode::NextSiblingElement
_TEXT	ENDS
PUBLIC	?NextSiblingElement@TiXmlNode@@QAEPAVTiXmlElement@@PBD@Z ; TiXmlNode::NextSiblingElement
PUBLIC	?ChildElement@TiXmlHandle@@QBE?AV1@PBDH@Z	; TiXmlHandle::ChildElement
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_child$7938 = -8					; size = 4
_i$7937 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_value$ = 12						; size = 4
_count$ = 16						; size = 4
?ChildElement@TiXmlHandle@@QBE?AV1@PBDH@Z PROC		; TiXmlHandle::ChildElement
; _this$ = ecx

; 1796 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1797 : 	if ( node )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@ChildEleme@2

; 1798 : 	{
; 1799 : 		int i;
; 1800 : 		TiXmlElement* child = node->FirstChildElement( value );

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@PBD@Z ; TiXmlNode::FirstChildElement
	mov	DWORD PTR _child$7938[ebp], eax

; 1801 : 		for (	i=0;

	mov	DWORD PTR _i$7937[ebp], 0

; 1802 : 				child && i<count;

	jmp	SHORT $LN4@ChildEleme@2
$LN3@ChildEleme@2:

; 1803 : 				child = child->NextSiblingElement( value ), ++i )

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _child$7938[ebp]
	call	?NextSiblingElement@TiXmlNode@@QAEPAVTiXmlElement@@PBD@Z ; TiXmlNode::NextSiblingElement
	mov	DWORD PTR _child$7938[ebp], eax
	mov	ecx, DWORD PTR _i$7937[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$7937[ebp], ecx
$LN4@ChildEleme@2:
	cmp	DWORD PTR _child$7938[ebp], 0
	je	SHORT $LN2@ChildEleme@2
	mov	edx, DWORD PTR _i$7937[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jge	SHORT $LN2@ChildEleme@2

; 1804 : 		{
; 1805 : 			// nothing
; 1806 : 		}

	jmp	SHORT $LN3@ChildEleme@2
$LN2@ChildEleme@2:

; 1807 : 		if ( child )

	cmp	DWORD PTR _child$7938[ebp], 0
	je	SHORT $LN5@ChildEleme@2

; 1808 : 			return TiXmlHandle( child );

	mov	eax, DWORD PTR _child$7938[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN6@ChildEleme@2
$LN5@ChildEleme@2:

; 1809 : 	}
; 1810 : 	return TiXmlHandle( 0 );

	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z	; TiXmlHandle::TiXmlHandle
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN6@ChildEleme@2:

; 1811 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ChildElement@TiXmlHandle@@QBE?AV1@PBDH@Z ENDP		; TiXmlHandle::ChildElement
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
_TEXT	ENDS
;	COMDAT ?NextSiblingElement@TiXmlNode@@QAEPAVTiXmlElement@@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__next$ = 8						; size = 4
?NextSiblingElement@TiXmlNode@@QAEPAVTiXmlElement@@PBD@Z PROC ; TiXmlNode::NextSiblingElement, COMDAT
; _this$ = ecx

; 655  : 	TiXmlElement* NextSiblingElement( const char *_next ) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return const_cast< TiXmlElement* >( (const_cast< const TiXmlNode* >(this))->NextSiblingElement( _next ) );

	mov	eax, DWORD PTR __next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NextSiblingElement@TiXmlNode@@QBEPBVTiXmlElement@@PBD@Z ; TiXmlNode::NextSiblingElement

; 657  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?NextSiblingElement@TiXmlNode@@QAEPAVTiXmlElement@@PBD@Z ENDP ; TiXmlNode::NextSiblingElement
_TEXT	ENDS
PUBLIC	?VisitEnter@TiXmlPrinter@@UAE_NABVTiXmlDocument@@@Z ; TiXmlPrinter::VisitEnter
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?VisitEnter@TiXmlPrinter@@UAE_NABVTiXmlDocument@@@Z PROC ; TiXmlPrinter::VisitEnter
; _this$ = ecx

; 1815 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1816 : 	return true;

	mov	al, 1

; 1817 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?VisitEnter@TiXmlPrinter@@UAE_NABVTiXmlDocument@@@Z ENDP ; TiXmlPrinter::VisitEnter
_TEXT	ENDS
PUBLIC	?VisitExit@TiXmlPrinter@@UAE_NABVTiXmlDocument@@@Z ; TiXmlPrinter::VisitExit
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?VisitExit@TiXmlPrinter@@UAE_NABVTiXmlDocument@@@Z PROC	; TiXmlPrinter::VisitExit
; _this$ = ecx

; 1820 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1821 : 	return true;

	mov	al, 1

; 1822 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?VisitExit@TiXmlPrinter@@UAE_NABVTiXmlDocument@@@Z ENDP	; TiXmlPrinter::VisitExit
_TEXT	ENDS
PUBLIC	?CDATA@TiXmlText@@QBE_NXZ			; TiXmlText::CDATA
PUBLIC	?LastChild@TiXmlNode@@QBEPBV1@XZ		; TiXmlNode::LastChild
PUBLIC	?DoLineBreak@TiXmlPrinter@@AAEXXZ		; TiXmlPrinter::DoLineBreak
PUBLIC	?DoIndent@TiXmlPrinter@@AAEXXZ			; TiXmlPrinter::DoIndent
PUBLIC	?VisitEnter@TiXmlPrinter@@UAE_NABVTiXmlElement@@PBVTiXmlAttribute@@@Z ; TiXmlPrinter::VisitEnter
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv166 = -16						; size = 4
tv141 = -12						; size = 4
_this$ = -8						; size = 4
_attrib$7959 = -4					; size = 4
_element$ = 8						; size = 4
_firstAttribute$ = 12					; size = 4
?VisitEnter@TiXmlPrinter@@UAE_NABVTiXmlElement@@PBVTiXmlAttribute@@@Z PROC ; TiXmlPrinter::VisitEnter
; _this$ = ecx

; 1825 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1826 : 	DoIndent();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoIndent@TiXmlPrinter@@AAEXXZ		; TiXmlPrinter::DoIndent

; 1827 : 	buffer += "<";

	push	OFFSET $SG7958
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1828 : 	buffer += element.Value();

	mov	ecx, DWORD PTR _element$[ebp]
	call	?Value@TiXmlNode@@QBEPBDXZ		; TiXmlNode::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1829 : 
; 1830 : 	for( const TiXmlAttribute* attrib = firstAttribute; attrib; attrib = attrib->Next() )

	mov	eax, DWORD PTR _firstAttribute$[ebp]
	mov	DWORD PTR _attrib$7959[ebp], eax
	jmp	SHORT $LN7@VisitEnter
$LN6@VisitEnter:
	mov	ecx, DWORD PTR _attrib$7959[ebp]
	call	?Next@TiXmlAttribute@@QBEPBV1@XZ	; TiXmlAttribute::Next
	mov	DWORD PTR _attrib$7959[ebp], eax
$LN7@VisitEnter:
	cmp	DWORD PTR _attrib$7959[ebp], 0
	je	SHORT $LN5@VisitEnter

; 1831 : 	{
; 1832 : 		buffer += " ";

	push	OFFSET $SG7963
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1833 : 		attrib->Print( 0, 0, &buffer );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _attrib$7959[ebp]
	call	?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z ; TiXmlAttribute::Print

; 1834 : 	}

	jmp	SHORT $LN6@VisitEnter
$LN5@VisitEnter:

; 1835 : 
; 1836 : 	if ( !element.FirstChild() ) 

	mov	ecx, DWORD PTR _element$[ebp]
	call	?FirstChild@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::FirstChild
	test	eax, eax
	jne	SHORT $LN4@VisitEnter

; 1837 : 	{
; 1838 : 		buffer += " />";

	push	OFFSET $SG7965
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1839 : 		DoLineBreak();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoLineBreak@TiXmlPrinter@@AAEXXZ	; TiXmlPrinter::DoLineBreak

; 1840 : 	}
; 1841 : 	else 

	jmp	SHORT $LN3@VisitEnter
$LN4@VisitEnter:

; 1842 : 	{
; 1843 : 		buffer += ">";

	push	OFFSET $SG7967
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1844 : 		if (    element.FirstChild()->ToText()
; 1845 : 			  && element.LastChild() == element.FirstChild()
; 1846 : 			  && element.FirstChild()->ToText()->CDATA() == false )

	mov	ecx, DWORD PTR _element$[ebp]
	call	?FirstChild@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::FirstChild
	mov	DWORD PTR tv141[ebp], eax
	mov	edx, DWORD PTR tv141[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv141[ebp]
	mov	edx, DWORD PTR [eax+48]
	call	edx
	test	eax, eax
	je	SHORT $LN2@VisitEnter
	mov	ecx, DWORD PTR _element$[ebp]
	call	?LastChild@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::LastChild
	mov	esi, eax
	mov	ecx, DWORD PTR _element$[ebp]
	call	?FirstChild@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::FirstChild
	cmp	esi, eax
	jne	SHORT $LN2@VisitEnter
	mov	ecx, DWORD PTR _element$[ebp]
	call	?FirstChild@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::FirstChild
	mov	DWORD PTR tv166[ebp], eax
	mov	eax, DWORD PTR tv166[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv166[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	mov	ecx, eax
	call	?CDATA@TiXmlText@@QBE_NXZ		; TiXmlText::CDATA
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@VisitEnter

; 1847 : 		{
; 1848 : 			simpleTextPrint = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+8], 1

; 1849 : 			// no DoLineBreak()!
; 1850 : 		}
; 1851 : 		else

	jmp	SHORT $LN3@VisitEnter
$LN2@VisitEnter:

; 1852 : 		{
; 1853 : 			DoLineBreak();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoLineBreak@TiXmlPrinter@@AAEXXZ	; TiXmlPrinter::DoLineBreak
$LN3@VisitEnter:

; 1854 : 		}
; 1855 : 	}
; 1856 : 	++depth;	

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1857 : 	return true;

	mov	al, 1

; 1858 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?VisitEnter@TiXmlPrinter@@UAE_NABVTiXmlElement@@PBVTiXmlAttribute@@@Z ENDP ; TiXmlPrinter::VisitEnter
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
_TEXT	ENDS
;	COMDAT ?LastChild@TiXmlNode@@QBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LastChild@TiXmlNode@@QBEPBV1@XZ PROC			; TiXmlNode::LastChild, COMDAT
; _this$ = ecx

; 532  : 	const TiXmlNode* LastChild() const	{ return lastChild; }		/// The last child of this node. Will be null if there are no children.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?LastChild@TiXmlNode@@QBEPBV1@XZ ENDP			; TiXmlNode::LastChild
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?CDATA@TiXmlText@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CDATA@TiXmlText@@QBE_NXZ PROC				; TiXmlText::CDATA, COMDAT
; _this$ = ecx

; 1235 : 	bool CDATA() const				{ return cdata; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?CDATA@TiXmlText@@QBE_NXZ ENDP				; TiXmlText::CDATA
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?DoIndent@TiXmlPrinter@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$6985 = -4						; size = 4
?DoIndent@TiXmlPrinter@@AAEXXZ PROC			; TiXmlPrinter::DoIndent, COMDAT
; _this$ = ecx

; 1784 : 	void DoIndent()	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1785 : 		for( int i=0; i<depth; ++i )

	mov	DWORD PTR _i$6985[ebp], 0
	jmp	SHORT $LN3@DoIndent
$LN2@DoIndent:
	mov	eax, DWORD PTR _i$6985[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6985[ebp], eax
$LN3@DoIndent:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$6985[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jge	SHORT $LN4@DoIndent

; 1786 : 			buffer += indent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator+=
	jmp	SHORT $LN2@DoIndent
$LN4@DoIndent:

; 1787 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?DoIndent@TiXmlPrinter@@AAEXXZ ENDP			; TiXmlPrinter::DoIndent
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?DoLineBreak@TiXmlPrinter@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DoLineBreak@TiXmlPrinter@@AAEXXZ PROC			; TiXmlPrinter::DoLineBreak, COMDAT
; _this$ = ecx

; 1788 : 	void DoLineBreak() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1789 : 		buffer += lineBreak;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator+=

; 1790 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?DoLineBreak@TiXmlPrinter@@AAEXXZ ENDP			; TiXmlPrinter::DoLineBreak
_TEXT	ENDS
PUBLIC	?VisitExit@TiXmlPrinter@@UAE_NABVTiXmlElement@@@Z ; TiXmlPrinter::VisitExit
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_element$ = 8						; size = 4
?VisitExit@TiXmlPrinter@@UAE_NABVTiXmlElement@@@Z PROC	; TiXmlPrinter::VisitExit
; _this$ = ecx

; 1862 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1863 : 	--depth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1864 : 	if ( !element.FirstChild() ) 

	mov	ecx, DWORD PTR _element$[ebp]
	call	?FirstChild@TiXmlNode@@QBEPBV1@XZ	; TiXmlNode::FirstChild
	test	eax, eax
	jne	SHORT $LN4@VisitExit

; 1865 : 	{
; 1866 : 		// nothing.
; 1867 : 	}
; 1868 : 	else 

	jmp	SHORT $LN3@VisitExit
$LN4@VisitExit:

; 1869 : 	{
; 1870 : 		if ( simpleTextPrint )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN2@VisitExit

; 1871 : 		{
; 1872 : 			simpleTextPrint = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+8], 0

; 1873 : 		}
; 1874 : 		else

	jmp	SHORT $LN1@VisitExit
$LN2@VisitExit:

; 1875 : 		{
; 1876 : 			DoIndent();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoIndent@TiXmlPrinter@@AAEXXZ		; TiXmlPrinter::DoIndent
$LN1@VisitExit:

; 1877 : 		}
; 1878 : 		buffer += "</";

	push	OFFSET $SG7978
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1879 : 		buffer += element.Value();

	mov	ecx, DWORD PTR _element$[ebp]
	call	?Value@TiXmlNode@@QBEPBDXZ		; TiXmlNode::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1880 : 		buffer += ">";

	push	OFFSET $SG7979
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1881 : 		DoLineBreak();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoLineBreak@TiXmlPrinter@@AAEXXZ	; TiXmlPrinter::DoLineBreak
$LN3@VisitExit:

; 1882 : 	}
; 1883 : 	return true;

	mov	al, 1

; 1884 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?VisitExit@TiXmlPrinter@@UAE_NABVTiXmlElement@@@Z ENDP	; TiXmlPrinter::VisitExit
_TEXT	ENDS
PUBLIC	?ValueTStr@TiXmlNode@@QBEABVTiXmlString@@XZ	; TiXmlNode::ValueTStr
PUBLIC	?Visit@TiXmlPrinter@@UAE_NABVTiXmlText@@@Z	; TiXmlPrinter::Visit
xdata$x	SEGMENT
__unwindtable$?Visit@TiXmlPrinter@@UAE_NABVTiXmlText@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Visit@TiXmlPrinter@@UAE_NABVTiXmlText@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Visit@TiXmlPrinter@@UAE_NABVTiXmlText@@@Z$1
__ehfuncinfo$?Visit@TiXmlPrinter@@UAE_NABVTiXmlText@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Visit@TiXmlPrinter@@UAE_NABVTiXmlText@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -24						; size = 4
_str$7991 = -20						; size = 4
_str$7989 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_text$ = 8						; size = 4
?Visit@TiXmlPrinter@@UAE_NABVTiXmlText@@@Z PROC		; TiXmlPrinter::Visit
; _this$ = ecx

; 1888 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Visit@TiXmlPrinter@@UAE_NABVTiXmlText@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1889 : 	if ( text.CDATA() )

	mov	ecx, DWORD PTR _text$[ebp]
	call	?CDATA@TiXmlText@@QBE_NXZ		; TiXmlText::CDATA
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@Visit

; 1890 : 	{
; 1891 : 		DoIndent();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoIndent@TiXmlPrinter@@AAEXXZ		; TiXmlPrinter::DoIndent

; 1892 : 		buffer += "<![CDATA[";

	push	OFFSET $SG7985
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1893 : 		buffer += text.Value();

	mov	ecx, DWORD PTR _text$[ebp]
	call	?Value@TiXmlNode@@QBEPBDXZ		; TiXmlNode::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1894 : 		buffer += "]]>";

	push	OFFSET $SG7986
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1895 : 		DoLineBreak();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoLineBreak@TiXmlPrinter@@AAEXXZ	; TiXmlPrinter::DoLineBreak
	jmp	$LN3@Visit
$LN4@Visit:

; 1896 : 	}
; 1897 : 	else if ( simpleTextPrint )

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	test	edx, edx
	je	SHORT $LN2@Visit

; 1898 : 	{
; 1899 : 		TIXML_STRING str;

	lea	ecx, DWORD PTR _str$7989[ebp]
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1900 : 		TiXmlBase::EncodeString( text.ValueTStr(), &str );

	lea	eax, DWORD PTR _str$7989[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?ValueTStr@TiXmlNode@@QBEABVTiXmlString@@XZ ; TiXmlNode::ValueTStr
	push	eax
	call	?EncodeString@TiXmlBase@@SAXABVTiXmlString@@PAV2@@Z ; TiXmlBase::EncodeString
	add	esp, 8

; 1901 : 		buffer += str;

	lea	ecx, DWORD PTR _str$7989[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator+=

; 1902 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _str$7989[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString

; 1903 : 	else

	jmp	SHORT $LN3@Visit
$LN2@Visit:

; 1904 : 	{
; 1905 : 		DoIndent();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoIndent@TiXmlPrinter@@AAEXXZ		; TiXmlPrinter::DoIndent

; 1906 : 		TIXML_STRING str;

	lea	ecx, DWORD PTR _str$7991[ebp]
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1907 : 		TiXmlBase::EncodeString( text.ValueTStr(), &str );

	lea	edx, DWORD PTR _str$7991[ebp]
	push	edx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?ValueTStr@TiXmlNode@@QBEABVTiXmlString@@XZ ; TiXmlNode::ValueTStr
	push	eax
	call	?EncodeString@TiXmlBase@@SAXABVTiXmlString@@PAV2@@Z ; TiXmlBase::EncodeString
	add	esp, 8

; 1908 : 		buffer += str;

	lea	eax, DWORD PTR _str$7991[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator+=

; 1909 : 		DoLineBreak();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoLineBreak@TiXmlPrinter@@AAEXXZ	; TiXmlPrinter::DoLineBreak

; 1910 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _str$7991[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
$LN3@Visit:

; 1911 : 	return true;

	mov	al, 1

; 1912 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Visit@TiXmlPrinter@@UAE_NABVTiXmlText@@@Z$0:
	lea	ecx, DWORD PTR _str$7989[ebp]
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$?Visit@TiXmlPrinter@@UAE_NABVTiXmlText@@@Z$1:
	lea	ecx, DWORD PTR _str$7991[ebp]
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$?Visit@TiXmlPrinter@@UAE_NABVTiXmlText@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Visit@TiXmlPrinter@@UAE_NABVTiXmlText@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Visit@TiXmlPrinter@@UAE_NABVTiXmlText@@@Z ENDP		; TiXmlPrinter::Visit
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.h
;	COMDAT ?ValueTStr@TiXmlNode@@QBEABVTiXmlString@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ValueTStr@TiXmlNode@@QBEABVTiXmlString@@XZ PROC	; TiXmlNode::ValueTStr, COMDAT
; _this$ = ecx

; 498  : 	const TIXML_STRING& ValueTStr() const { return value; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	mov	esp, ebp
	pop	ebp
	ret	0
?ValueTStr@TiXmlNode@@QBEABVTiXmlString@@XZ ENDP	; TiXmlNode::ValueTStr
_TEXT	ENDS
PUBLIC	?Visit@TiXmlPrinter@@UAE_NABVTiXmlDeclaration@@@Z ; TiXmlPrinter::Visit
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\tinyxml.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_declaration$ = 8					; size = 4
?Visit@TiXmlPrinter@@UAE_NABVTiXmlDeclaration@@@Z PROC	; TiXmlPrinter::Visit
; _this$ = ecx

; 1916 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1917 : 	DoIndent();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoIndent@TiXmlPrinter@@AAEXXZ		; TiXmlPrinter::DoIndent

; 1918 : 	declaration.Print( 0, 0, &buffer );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _declaration$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _declaration$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 1919 : 	DoLineBreak();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoLineBreak@TiXmlPrinter@@AAEXXZ	; TiXmlPrinter::DoLineBreak

; 1920 : 	return true;

	mov	al, 1

; 1921 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Visit@TiXmlPrinter@@UAE_NABVTiXmlDeclaration@@@Z ENDP	; TiXmlPrinter::Visit
_TEXT	ENDS
PUBLIC	?Visit@TiXmlPrinter@@UAE_NABVTiXmlComment@@@Z	; TiXmlPrinter::Visit
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_comment$ = 8						; size = 4
?Visit@TiXmlPrinter@@UAE_NABVTiXmlComment@@@Z PROC	; TiXmlPrinter::Visit
; _this$ = ecx

; 1925 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1926 : 	DoIndent();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoIndent@TiXmlPrinter@@AAEXXZ		; TiXmlPrinter::DoIndent

; 1927 : 	buffer += "<!--";

	push	OFFSET $SG8000
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1928 : 	buffer += comment.Value();

	mov	ecx, DWORD PTR _comment$[ebp]
	call	?Value@TiXmlNode@@QBEPBDXZ		; TiXmlNode::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1929 : 	buffer += "-->";

	push	OFFSET $SG8001
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1930 : 	DoLineBreak();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoLineBreak@TiXmlPrinter@@AAEXXZ	; TiXmlPrinter::DoLineBreak

; 1931 : 	return true;

	mov	al, 1

; 1932 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Visit@TiXmlPrinter@@UAE_NABVTiXmlComment@@@Z ENDP	; TiXmlPrinter::Visit
_TEXT	ENDS
PUBLIC	?Visit@TiXmlPrinter@@UAE_NABVTiXmlUnknown@@@Z	; TiXmlPrinter::Visit
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unknown$ = 8						; size = 4
?Visit@TiXmlPrinter@@UAE_NABVTiXmlUnknown@@@Z PROC	; TiXmlPrinter::Visit
; _this$ = ecx

; 1936 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1937 : 	DoIndent();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoIndent@TiXmlPrinter@@AAEXXZ		; TiXmlPrinter::DoIndent

; 1938 : 	buffer += "<";

	push	OFFSET $SG8006
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1939 : 	buffer += unknown.Value();

	mov	ecx, DWORD PTR _unknown$[ebp]
	call	?Value@TiXmlNode@@QBEPBDXZ		; TiXmlNode::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1940 : 	buffer += ">";

	push	OFFSET $SG8007
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=

; 1941 : 	DoLineBreak();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoLineBreak@TiXmlPrinter@@AAEXXZ	; TiXmlPrinter::DoLineBreak

; 1942 : 	return true;

	mov	al, 1

; 1943 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Visit@TiXmlPrinter@@UAE_NABVTiXmlUnknown@@@Z ENDP	; TiXmlPrinter::Visit
_TEXT	ENDS
EXTRN	__imp___vsnprintf_s:PROC
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\stdio.h
;	COMDAT ??$_snprintf_s@$0CA@@@YAHAAY0CA@DIPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Dest$ = 8						; size = 4
__MaxCount$ = 12					; size = 4
__Format$ = 16						; size = 4
??$_snprintf_s@$0CA@@@YAHAAY0CA@DIPBDZZ PROC		; _snprintf_s<32>, COMDAT

; 318  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2_ARGLIST(int, _snprintf_s, _vsnprintf_s, char, _Dest, _In_ size_t, _MaxCount, _In_z_ _Printf_format_string_ const char *,_Format)

	push	ebp
	mov	ebp, esp
	push	ecx
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __MaxCount$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp___vsnprintf_s
	add	esp, 20					; 00000014H
	mov	esp, ebp
	pop	ebp
	ret	0
??$_snprintf_s@$0CA@@@YAHAAY0CA@DIPBDZZ ENDP		; _snprintf_s<32>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Dest$ = 8						; size = 4
__MaxCount$ = 12					; size = 4
__Format$ = 16						; size = 4
??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ PROC		; _snprintf_s<64>, COMDAT

; 318  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2_ARGLIST(int, _snprintf_s, _vsnprintf_s, char, _Dest, _In_ size_t, _MaxCount, _In_z_ _Printf_format_string_ const char *,_Format)

	push	ebp
	mov	ebp, esp
	push	ecx
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __MaxCount$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp___vsnprintf_s
	add	esp, 20					; 00000014H
	mov	esp, ebp
	pop	ebp
	ret	0
??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ ENDP		; _snprintf_s<64>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Dest$ = 8						; size = 4
__MaxCount$ = 12					; size = 4
__Format$ = 16						; size = 4
??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ PROC		; _snprintf_s<256>, COMDAT

; 318  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2_ARGLIST(int, _snprintf_s, _vsnprintf_s, char, _Dest, _In_ size_t, _MaxCount, _In_z_ _Printf_format_string_ const char *,_Format)

	push	ebp
	mov	ebp, esp
	push	ecx
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __MaxCount$[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp___vsnprintf_s
	add	esp, 20					; 00000014H
	mov	esp, ebp
	pop	ebp
	ret	0
??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ ENDP		; _snprintf_s<256>
_TEXT	ENDS
END
