; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\OgreMain\OgreRay.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG5713
_DATA	ENDS
CONST	SEGMENT
$SG5713	DB	'bad allocation', 00H
	ORG $+1
_MAX_FLOAT DD	07f7fffffr			; 3.40282e+038
_ONE_PI	DD	040490fd0r			; 3.14159
_EPSILON DD	03727c5acr			; 1e-005
_RADS_PER_DEG DD 03c8efa35r			; 0.0174533
_DEGS_PER_RAD DD 042652ee1r			; 57.2958
CONST	ENDS
PUBLIC	??_7DataStream@Ogre@@6B@			; Ogre::DataStream::`vftable'
PUBLIC	??0DataStream@Ogre@@QAE@XZ			; Ogre::DataStream::DataStream
PUBLIC	??_R4DataStream@Ogre@@6B@			; Ogre::DataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStream@Ogre@@@8			; Ogre::DataStream `RTTI Type Descriptor'
PUBLIC	??_R3DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStream@Ogre@@8		; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`vector deleting destructor'
PUBLIC	?size@DataStream@Ogre@@UBEIXZ			; Ogre::DataStream::size
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__purecall:PROC
EXTRN	?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::readLine
EXTRN	?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; Ogre::DataStream::getLine
EXTRN	?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; Ogre::DataStream::getAsString
EXTRN	?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::skipLine
;	COMDAT ??_R1A@?0A@EA@DataStream@Ogre@@8
; File i:\svnroot\client\ogremain\ogredatastream.h
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStream@Ogre@@8 DD FLAT:??_R0?AVDataStream@Ogre@@@8 ; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStream@Ogre@@8
rdata$r	SEGMENT
??_R2DataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8 ; Ogre::DataStream::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStream@Ogre@@8
rdata$r	SEGMENT
??_R3DataStream@Ogre@@8 DD 00H				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::DataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStream@Ogre@@6B@ DD 00H			; Ogre::DataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStream@Ogre@@@8
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStream@Ogre@@6B@
CONST	SEGMENT
??_7DataStream@Ogre@@6B@ DD FLAT:??_R4DataStream@Ogre@@6B@ ; Ogre::DataStream::`vftable'
	DD	FLAT:??_EDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0DataStream@Ogre@@QAE@XZ PROC				; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 68   : 		DataStream() : mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@XZ ENDP				; Ogre::DataStream::DataStream
PUBLIC	??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Ogre::DataStream::DataStream
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 70   : 		DataStream(const String& name) : mName(name), mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Ogre::DataStream::DataStream
PUBLIC	?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Ogre::DataStream::getName
; Function compile flags: /Odtp
;	COMDAT ?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Ogre::DataStream::getName, COMDAT
; _this$ = ecx

; 72   : 		const String& getName(void) { return mName; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Ogre::DataStream::getName
_TEXT	ENDS
PUBLIC	??1DataStream@Ogre@@UAE@XZ			; Ogre::DataStream::~DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1DataStream@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0
__ehfuncinfo$??1DataStream@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1DataStream@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1DataStream@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DataStream@Ogre@@UAE@XZ PROC				; Ogre::DataStream::~DataStream, COMDAT
; _this$ = ecx

; 73   : 		virtual ~DataStream() {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1DataStream@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1DataStream@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1DataStream@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1DataStream@Ogre@@UAE@XZ ENDP				; Ogre::DataStream::~DataStream
; Function compile flags: /Odtp
;	COMDAT ?size@DataStream@Ogre@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@DataStream@Ogre@@UBEIXZ PROC			; Ogre::DataStream::size, COMDAT
; _this$ = ecx

; 157  : 		virtual size_t size(void) const { return mSize; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?size@DataStream@Ogre@@UBEIXZ ENDP			; Ogre::DataStream::size
_TEXT	ENDS
PUBLIC	??0DataStream@Ogre@@QAE@ABV01@@Z		; Ogre::DataStream::DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV01@@Z PROC			; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::DataStream::DataStream
PUBLIC	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::DataStream::operator=
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::DataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::DataStream::operator=
_TEXT	ENDS
PUBLIC	??_GDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`scalar deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_EDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DataStream@Ogre@@UAE@XZ	; Ogre::DataStream::~DataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	36					; 00000024H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ		; Ogre::MemoryDataStream::getPtr
; Function compile flags: /Odtp
;	COMDAT ?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC		; Ogre::MemoryDataStream::getPtr, COMDAT
; _this$ = ecx

; 267  : 		uchar* getPtr(void) { return mData; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP		; Ogre::MemoryDataStream::getPtr
_TEXT	ENDS
PUBLIC	?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ	; Ogre::MemoryDataStream::getCurrentPtr
; Function compile flags: /Odtp
;	COMDAT ?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC	; Ogre::MemoryDataStream::getCurrentPtr, COMDAT
; _this$ = ecx

; 270  : 		uchar* getCurrentPtr(void) { return mPos; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP	; Ogre::MemoryDataStream::getCurrentPtr
_TEXT	ENDS
PUBLIC	?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ	; Ogre::MemoryDataStream::getMemoryImage
; Function compile flags: /Odtp
;	COMDAT ?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ PROC	; Ogre::MemoryDataStream::getMemoryImage, COMDAT
; _this$ = ecx

; 307  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 			return mData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]

; 309  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ ENDP	; Ogre::MemoryDataStream::getMemoryImage
_TEXT	ENDS
PUBLIC	?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ; Ogre::MemoryDataStream::setFreeOnClose
; Function compile flags: /Odtp
;	COMDAT ?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_freeOnClose$ = 8					; size = 4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z PROC ; Ogre::MemoryDataStream::setFreeOnClose, COMDAT
; _this$ = ecx

; 313  : 		void setFreeOnClose(void (*freeOnClose)(void *)) { mFreeOnClose = freeOnClose; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _freeOnClose$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ENDP ; Ogre::MemoryDataStream::setFreeOnClose
_TEXT	ENDS
PUBLIC	??_7MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`vftable'
PUBLIC	??0MemoryDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??_R4MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMemoryDataStream@Ogre@@@8		; Ogre::MemoryDataStream `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDataStream@Ogre@@8		; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`vector deleting destructor'
EXTRN	?read@MemoryDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::MemoryDataStream::read
EXTRN	?write@MemoryDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::MemoryDataStream::write
EXTRN	?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::readLine
EXTRN	?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::skipLine
EXTRN	?skip@MemoryDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::MemoryDataStream::skip
EXTRN	?seek@MemoryDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::MemoryDataStream::seek
EXTRN	?tell@MemoryDataStream@Ogre@@UBEIXZ:PROC	; Ogre::MemoryDataStream::tell
EXTRN	?eof@MemoryDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::MemoryDataStream::eof
EXTRN	?close@MemoryDataStream@Ogre@@UAEXXZ:PROC	; Ogre::MemoryDataStream::close
;	COMDAT ??_R1A@?0A@EA@MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 DD FLAT:??_R0?AVMemoryDataStream@Ogre@@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDataStream@Ogre@@8 DD 00H			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MemoryDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4MemoryDataStream@Ogre@@6B@ DD 00H			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMemoryDataStream@Ogre@@@8
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7MemoryDataStream@Ogre@@6B@
CONST	SEGMENT
??_7MemoryDataStream@Ogre@@6B@ DD FLAT:??_R4MemoryDataStream@Ogre@@6B@ ; Ogre::MemoryDataStream::`vftable'
	DD	FLAT:??_EMemoryDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@MemoryDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@MemoryDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@MemoryDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@MemoryDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@MemoryDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@MemoryDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@MemoryDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::MemoryDataStream::MemoryDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7MemoryDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+44], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+48], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+44], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+48], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`scalar deleting destructor'
EXTRN	??1MemoryDataStream@Ogre@@UAE@XZ:PROC		; Ogre::MemoryDataStream::~MemoryDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@2
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`vftable'
PUBLIC	??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??_R4FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileStreamDataStream@Ogre@@@8		; Ogre::FileStreamDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8	; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`vector deleting destructor'
EXTRN	?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileStreamDataStream::read
EXTRN	?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileStreamDataStream::write
EXTRN	?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::FileStreamDataStream::readLine
EXTRN	?skip@FileStreamDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileStreamDataStream::skip
EXTRN	?seek@FileStreamDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileStreamDataStream::seek
EXTRN	?tell@FileStreamDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileStreamDataStream::tell
EXTRN	?eof@FileStreamDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileStreamDataStream::eof
EXTRN	?close@FileStreamDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileStreamDataStream::close
EXTRN	?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileStreamDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 DD FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileStreamDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileStreamDataStream@Ogre@@8 DD 00H		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileStreamDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileStreamDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileStreamDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileStreamDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileStreamDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileStreamDataStream@Ogre@@6B@ DD 00H		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileStreamDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileStreamDataStream@Ogre@@6B@ DD FLAT:??_R4FileStreamDataStream@Ogre@@6B@ ; Ogre::FileStreamDataStream::`vftable'
	DD	FLAT:??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileStreamDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileStreamDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileStreamDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileStreamDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileStreamDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileStreamDataStream::FileStreamDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileStreamDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+40]
	mov	BYTE PTR [edx+40], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileStreamDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileStreamDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+40]
	mov	BYTE PTR [ecx+40], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileStreamDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`scalar deleting destructor'
EXTRN	??1FileStreamDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileStreamDataStream::~FileStreamDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1FileStreamDataStream@Ogre@@UAE@XZ ; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@3
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`vftable'
PUBLIC	??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??_R4FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileHandleDataStream@Ogre@@@8		; Ogre::FileHandleDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8	; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`vector deleting destructor'
EXTRN	?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileHandleDataStream::read
EXTRN	?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileHandleDataStream::write
EXTRN	?skip@FileHandleDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileHandleDataStream::skip
EXTRN	?seek@FileHandleDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileHandleDataStream::seek
EXTRN	?tell@FileHandleDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileHandleDataStream::tell
EXTRN	?eof@FileHandleDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileHandleDataStream::eof
EXTRN	?close@FileHandleDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileHandleDataStream::close
EXTRN	?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileHandleDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 DD FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileHandleDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileHandleDataStream@Ogre@@8 DD 00H		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileHandleDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileHandleDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileHandleDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileHandleDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileHandleDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileHandleDataStream@Ogre@@6B@ DD 00H		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileHandleDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileHandleDataStream@Ogre@@6B@ DD FLAT:??_R4FileHandleDataStream@Ogre@@6B@ ; Ogre::FileHandleDataStream::`vftable'
	DD	FLAT:??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileHandleDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileHandleDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileHandleDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileHandleDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileHandleDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileHandleDataStream::FileHandleDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileHandleDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileHandleDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileHandleDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileHandleDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`scalar deleting destructor'
EXTRN	??1FileHandleDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileHandleDataStream::~FileHandleDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@4
	push	OFFSET ??1FileHandleDataStream@Ogre@@UAE@XZ ; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@4
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@4
$LN3@vector@4:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@4:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`vftable'
PUBLIC	??1DataStreamObject@Ogre@@MAE@XZ		; Ogre::DataStreamObject::~DataStreamObject
PUBLIC	??_R4DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStreamObject@Ogre@@@8		; Ogre::DataStreamObject `RTTI Type Descriptor'
PUBLIC	??_R3DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStreamObject@Ogre@@8		; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStreamObject@Ogre@@8 DD FLAT:??_R0?AVDataStreamObject@Ogre@@@8 ; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R2DataStreamObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStreamObject@Ogre@@8 ; Ogre::DataStreamObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R3DataStreamObject@Ogre@@8 DD 00H			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStreamObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStreamObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::DataStreamObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStreamObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStreamObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStreamObject@Ogre@@6B@ DD 00H			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStreamObject@Ogre@@@8
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStreamObject@Ogre@@6B@
CONST	SEGMENT
??_7DataStreamObject@Ogre@@6B@ DD FLAT:??_R4DataStreamObject@Ogre@@6B@ ; Ogre::DataStreamObject::`vftable'
	DD	FLAT:??_EDataStreamObject@Ogre@@MAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??1DataStreamObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DataStreamObject@Ogre@@MAE@XZ PROC			; Ogre::DataStreamObject::~DataStreamObject, COMDAT
; _this$ = ecx

; 445  : 		virtual ~DataStreamObject(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1DataStreamObject@Ogre@@MAE@XZ ENDP			; Ogre::DataStreamObject::~DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@XZ		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DataStreamObject@Ogre@@QAE@XZ PROC			; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DataStreamObject@Ogre@@QAE@XZ ENDP			; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@ABV01@@Z		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z PROC		; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::DataStreamObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::DataStreamObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::DataStreamObject::operator=
_TEXT	ENDS
PUBLIC	??_GDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@5
	push	OFFSET ??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@5
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@5
$LN3@vector@5:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@5:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`vftable'
PUBLIC	??0ObjectDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??_R4ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVObjectDataStream@Ogre@@@8		; Ogre::ObjectDataStream `RTTI Type Descriptor'
PUBLIC	??_R3ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ObjectDataStream@Ogre@@8		; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`vector deleting destructor'
EXTRN	?read@ObjectDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::ObjectDataStream::read
EXTRN	?write@ObjectDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::ObjectDataStream::write
EXTRN	?skip@ObjectDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::ObjectDataStream::skip
EXTRN	?seek@ObjectDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::ObjectDataStream::seek
EXTRN	?tell@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::tell
EXTRN	?eof@ObjectDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::ObjectDataStream::eof
EXTRN	?size@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::size
EXTRN	?close@ObjectDataStream@Ogre@@UAEXXZ:PROC	; Ogre::ObjectDataStream::close
EXTRN	?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::ObjectDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 DD FLAT:??_R0?AVObjectDataStream@Ogre@@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2ObjectDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3ObjectDataStream@Ogre@@8 DD 00H			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVObjectDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVObjectDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::ObjectDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVObjectDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ObjectDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4ObjectDataStream@Ogre@@6B@ DD 00H			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVObjectDataStream@Ogre@@@8
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7ObjectDataStream@Ogre@@6B@
CONST	SEGMENT
??_7ObjectDataStream@Ogre@@6B@ DD FLAT:??_R4ObjectDataStream@Ogre@@6B@ ; Ogre::ObjectDataStream::`vftable'
	DD	FLAT:??_EObjectDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@ObjectDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@ObjectDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@ObjectDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@ObjectDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@ObjectDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@ObjectDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::ObjectDataStream::ObjectDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ObjectDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::ObjectDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::ObjectDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::ObjectDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`scalar deleting destructor'
EXTRN	??1ObjectDataStream@Ogre@@UAE@XZ:PROC		; Ogre::ObjectDataStream::~ObjectDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@6
	push	OFFSET ??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@6
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@6
$LN3@vector@6:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@6:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDelegation::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDelegation::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDelegation::operator=
_TEXT	ENDS
PUBLIC	?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ	; Ogre::RuntimeClass::getBaseClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebaseobject.h
;	COMDAT ?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ PROC	; Ogre::RuntimeClass::getBaseClass, COMDAT
; _this$ = ecx

; 20   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 21   : 			return m_pBaseClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 22   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ ENDP	; Ogre::RuntimeClass::getBaseClass
_TEXT	ENDS
PUBLIC	?getClassName@RuntimeClass@Ogre@@QBEPBDXZ	; Ogre::RuntimeClass::getClassName
; Function compile flags: /Odtp
;	COMDAT ?getClassName@RuntimeClass@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ PROC		; Ogre::RuntimeClass::getClassName, COMDAT
; _this$ = ecx

; 25   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 26   : 			return m_pClassName; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ ENDP		; Ogre::RuntimeClass::getClassName
_TEXT	ENDS
PUBLIC	?getVersion@RuntimeClass@Ogre@@QBEHXZ		; Ogre::RuntimeClass::getVersion
; Function compile flags: /Odtp
;	COMDAT ?getVersion@RuntimeClass@Ogre@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVersion@RuntimeClass@Ogre@@QBEHXZ PROC		; Ogre::RuntimeClass::getVersion, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Version;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getVersion@RuntimeClass@Ogre@@QBEHXZ ENDP		; Ogre::RuntimeClass::getVersion
_TEXT	ENDS
PUBLIC	?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ; Ogre::RuntimeClass::newObject
; Function compile flags: /Odtp
;	COMDAT ?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ PROC ; Ogre::RuntimeClass::newObject, COMDAT
; _this$ = ecx

; 35   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 			return (*m_pNewFunc)();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx

; 37   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ENDP ; Ogre::RuntimeClass::newObject
_TEXT	ENDS
PUBLIC	??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::RuntimeClass::operator=
; Function compile flags: /Odtp
;	COMDAT ??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::RuntimeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::RuntimeClass::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::BaseObject::getRTTI
EXTRN	?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::BaseObject::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::BaseObject::getRTTI, COMDAT
; _this$ = ecx

; 56   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 			return &m_RTTI;

	mov	eax, OFFSET ?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B ; Ogre::BaseObject::m_RTTI

; 58   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::BaseObject::getRTTI
_TEXT	ENDS
PUBLIC	?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ; Ogre::BaseObject::isExactKindOf
; Function compile flags: /Odtp
;	COMDAT ?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_prtti$ = 8						; size = 4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z PROC ; Ogre::BaseObject::isExactKindOf, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			return (getRTTI() == prtti);

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	xor	ecx, ecx
	cmp	eax, DWORD PTR _prtti$[ebp]
	sete	cl
	mov	al, cl

; 63   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ENDP ; Ogre::BaseObject::isExactKindOf
_TEXT	ENDS
PUBLIC	?release@BaseObject@Ogre@@UAEXXZ		; Ogre::BaseObject::release
; Function compile flags: /Odtp
;	COMDAT ?release@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?release@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::release, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			m_RefCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 70   : 			if(m_RefCount <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN2@release

; 71   : 			{
; 72   : 				deleteThis();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
$LN2@release:

; 73   : 			}
; 74   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?release@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::release
_TEXT	ENDS
PUBLIC	?addRef@BaseObject@Ogre@@UAEXXZ			; Ogre::BaseObject::addRef
; Function compile flags: /Odtp
;	COMDAT ?addRef@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?addRef@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::addRef, COMDAT
; _this$ = ecx

; 77   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 			m_RefCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 79   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?addRef@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::addRef
_TEXT	ENDS
PUBLIC	?getRefCount@BaseObject@Ogre@@UAEHXZ		; Ogre::BaseObject::getRefCount
; Function compile flags: /Odtp
;	COMDAT ?getRefCount@BaseObject@Ogre@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRefCount@BaseObject@Ogre@@UAEHXZ PROC		; Ogre::BaseObject::getRefCount, COMDAT
; _this$ = ecx

; 82   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 			return m_RefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 84   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRefCount@BaseObject@Ogre@@UAEHXZ ENDP		; Ogre::BaseObject::getRefCount
_TEXT	ENDS
PUBLIC	?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::BaseObject::_serialize
; Function compile flags: /Odtp
;	COMDAT ?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z PROC	; Ogre::BaseObject::_serialize, COMDAT
; _this$ = ecx

; 87   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ENDP	; Ogre::BaseObject::_serialize
_TEXT	ENDS
PUBLIC	??_7BaseObject@Ogre@@6B@			; Ogre::BaseObject::`vftable'
PUBLIC	??0BaseObject@Ogre@@IAE@XZ			; Ogre::BaseObject::BaseObject
PUBLIC	??_R4BaseObject@Ogre@@6B@			; Ogre::BaseObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBaseObject@Ogre@@@8			; Ogre::BaseObject `RTTI Type Descriptor'
PUBLIC	??_R3BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BaseObject@Ogre@@8		; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVMemoryDelegation@Ogre@@@8		; Ogre::MemoryDelegation `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`vector deleting destructor'
PUBLIC	?deleteThis@BaseObject@Ogre@@MAEXXZ		; Ogre::BaseObject::deleteThis
;	COMDAT ??_R1A@?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDelegation@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDelegation@Ogre@@8 DD 00H			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDelegation@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDelegation@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDelegation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDelegation@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R13?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BaseObject@Ogre@@8 DD FLAT:??_R0?AVBaseObject@Ogre@@@8 ; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R2BaseObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8 ; Ogre::BaseObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R3BaseObject@Ogre@@8 DD 00H				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBaseObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVBaseObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::BaseObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBaseObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BaseObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4BaseObject@Ogre@@6B@ DD 00H			; Ogre::BaseObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBaseObject@Ogre@@@8
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7BaseObject@Ogre@@6B@
CONST	SEGMENT
??_7BaseObject@Ogre@@6B@ DD FLAT:??_R4BaseObject@Ogre@@6B@ ; Ogre::BaseObject::`vftable'
	DD	FLAT:?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EBaseObject@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0BaseObject@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BaseObject@Ogre@@IAE@XZ PROC				; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx

; 92   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 1

; 93   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BaseObject@Ogre@@IAE@XZ ENDP				; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??1BaseObject@Ogre@@MAE@XZ			; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
;	COMDAT ??1BaseObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BaseObject@Ogre@@MAE@XZ PROC				; Ogre::BaseObject::~BaseObject, COMDAT
; _this$ = ecx

; 96   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1BaseObject@Ogre@@MAE@XZ ENDP				; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deleteThis@BaseObject@Ogre@@MAEXXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T63220 = -8						; size = 4
$T63219 = -4						; size = 4
?deleteThis@BaseObject@Ogre@@MAEXXZ PROC		; Ogre::BaseObject::deleteThis, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 			delete this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T63220[ebp], eax
	mov	ecx, DWORD PTR $T63220[ebp]
	mov	DWORD PTR $T63219[ebp], ecx
	cmp	DWORD PTR $T63219[ebp], 0
	je	SHORT $LN3@deleteThis
	push	1
	mov	edx, DWORD PTR $T63219[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T63219[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN1@deleteThis
$LN3@deleteThis:
	mov	DWORD PTR tv70[ebp], 0
$LN1@deleteThis:

; 102  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?deleteThis@BaseObject@Ogre@@MAEXXZ ENDP		; Ogre::BaseObject::deleteThis
_TEXT	ENDS
PUBLIC	??0BaseObject@Ogre@@QAE@ABV01@@Z		; Ogre::BaseObject::BaseObject
; Function compile flags: /Odtp
;	COMDAT ??0BaseObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0BaseObject@Ogre@@QAE@ABV01@@Z PROC			; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@BaseObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@BaseObject
$LN3@BaseObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@BaseObject:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BaseObject@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BaseObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BaseObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BaseObject::operator=
_TEXT	ENDS
PUBLIC	??_GBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`scalar deleting destructor'
EXTRN	??3MemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VMemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete[]
; Function compile flags: /Odtp
;	COMDAT ??_EBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@7
	push	OFFSET ??1BaseObject@Ogre@@MAE@XZ	; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@7
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@7
$LN3@vector@7:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@7
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@7:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Archive@Ogre@@6B@				; Ogre::Archive::`vftable'
PUBLIC	??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z	; Ogre::Archive::Archive
PUBLIC	??_R4Archive@Ogre@@6B@				; Ogre::Archive::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVArchive@Ogre@@@8			; Ogre::Archive `RTTI Type Descriptor'
PUBLIC	??_R3Archive@Ogre@@8				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Archive@Ogre@@8				; Ogre::Archive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Archive@Ogre@@8			; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Archive@Ogre@@8
; File i:\svnroot\client\ogremain\ogrearchive.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Archive@Ogre@@8 DD FLAT:??_R0?AVArchive@Ogre@@@8 ; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Archive@Ogre@@8
rdata$r	SEGMENT
??_R2Archive@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Archive@Ogre@@8 ; Ogre::Archive::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Archive@Ogre@@8
rdata$r	SEGMENT
??_R3Archive@Ogre@@8 DD 00H				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVArchive@Ogre@@@8
_DATA	SEGMENT
??_R0?AVArchive@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Archive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArchive@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Archive@Ogre@@6B@
rdata$r	SEGMENT
??_R4Archive@Ogre@@6B@ DD 00H				; Ogre::Archive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArchive@Ogre@@@8
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Archive@Ogre@@6B@
CONST	SEGMENT
??_7Archive@Ogre@@6B@ DD FLAT:??_R4Archive@Ogre@@6B@	; Ogre::Archive::`vftable'
	DD	FLAT:??_EArchive@Ogre@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstream$ = 8						; size = 4
_mode$ = 12						; size = 4
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z PROC		; Ogre::Archive::Archive, COMDAT
; _this$ = ecx

; 22   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pstream$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 23   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z ENDP		; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??1Archive@Ogre@@UAE@XZ				; Ogre::Archive::~Archive
; Function compile flags: /Odtp
;	COMDAT ??1Archive@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Archive@Ogre@@UAE@XZ PROC				; Ogre::Archive::~Archive, COMDAT
; _this$ = ecx

; 26   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1Archive@Ogre@@UAE@XZ ENDP				; Ogre::Archive::~Archive
_TEXT	ENDS
PUBLIC	?isLoading@Archive@Ogre@@QAE_NXZ		; Ogre::Archive::isLoading
; Function compile flags: /Odtp
;	COMDAT ?isLoading@Archive@Ogre@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isLoading@Archive@Ogre@@QAE_NXZ PROC			; Ogre::Archive::isLoading, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Mode==MODE_LOAD;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+8], 1
	sete	cl
	mov	al, cl

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?isLoading@Archive@Ogre@@QAE_NXZ ENDP			; Ogre::Archive::isLoading
_TEXT	ENDS
PUBLIC	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z	; Ogre::Archive::serialize
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAD@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAD@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 108  : 		SERIALIZE_PRIMITIVE_FUNC(char)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAD@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAF@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAF@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 109  : 		SERIALIZE_PRIMITIVE_FUNC(short)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAF@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAH@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAH@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 110  : 		SERIALIZE_PRIMITIVE_FUNC(int)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAH@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_J@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_J@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 111  : 		SERIALIZE_PRIMITIVE_FUNC(int64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_J@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAE@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAE@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 112  : 		SERIALIZE_PRIMITIVE_FUNC(uchar)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAE@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAG@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAG@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 113  : 		SERIALIZE_PRIMITIVE_FUNC(ushort)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAG@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAI@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAI@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 114  : 		SERIALIZE_PRIMITIVE_FUNC(uint)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAI@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_K@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_K@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 115  : 		SERIALIZE_PRIMITIVE_FUNC(uint64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_K@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_N@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_N@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 116  : 		SERIALIZE_PRIMITIVE_FUNC(bool)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_N@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAM@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAM@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 117  : 		SERIALIZE_PRIMITIVE_FUNC(float)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAM@Z ENDP			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z PROC		; Ogre::Archive::serialize, COMDAT
; _this$ = ecx

; 155  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 			if(isLoading()) m_pStream->read(pbuf, len);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@serialize
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	jmp	SHORT $LN1@serialize
$LN2@serialize:

; 157  : 			else m_pStream->write(pbuf, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN1@serialize:

; 158  : 
; 159  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 160  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ENDP		; Ogre::Archive::serialize
_TEXT	ENDS
PUBLIC	?read@Archive@Ogre@@QAEXPAXI@Z			; Ogre::Archive::read
; Function compile flags: /Odtp
;	COMDAT ?read@Archive@Ogre@@QAEXPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?read@Archive@Ogre@@QAEXPAXI@Z PROC			; Ogre::Archive::read, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			m_pStream->read(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 165  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?read@Archive@Ogre@@QAEXPAXI@Z ENDP			; Ogre::Archive::read
_TEXT	ENDS
PUBLIC	?write@Archive@Ogre@@QAEXPBXI@Z			; Ogre::Archive::write
; Function compile flags: /Odtp
;	COMDAT ?write@Archive@Ogre@@QAEXPBXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?write@Archive@Ogre@@QAEXPBXI@Z PROC			; Ogre::Archive::write, COMDAT
; _this$ = ecx

; 168  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 			m_pStream->write(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 170  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?write@Archive@Ogre@@QAEXPBXI@Z ENDP			; Ogre::Archive::write
_TEXT	ENDS
PUBLIC	??0Archive@Ogre@@QAE@ABV01@@Z			; Ogre::Archive::Archive
; Function compile flags: /Odtp
;	COMDAT ??0Archive@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Archive@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Archive::Archive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Archive@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??4Archive@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Archive::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Archive@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Archive::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Archive::operator=
_TEXT	ENDS
PUBLIC	??_GArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@8
	push	OFFSET ??1Archive@Ogre@@UAE@XZ		; Ogre::Archive::~Archive
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@8
$LN3@vector@8:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@8:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@XZ				; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ??0Vector3@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector3@Ogre@@QAE@XZ PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 49   : 		Vector3(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@Ogre@@QAE@XZ ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@ABV01@@Z			; Ogre::Vector3::Vector3
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0Vector3@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 50   : 		Vector3(const Vector3 &rhs)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		{
; 52   : 			x = rhs.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 53   : 			y = rhs.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 54   : 			z = rhs.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 55   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@MMM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
??0Vector3@Ogre@@QAE@MMM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 56   : 		Vector3( float x1, float y1, float z1 ) : x(x1), y(y1), z(z1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector3@Ogre@@QAE@MMM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@M@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@M@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 57   : 		Vector3(float v) : x(v), y(v), z(v){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@M@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@PAM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@PAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@PAM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 58   : 		Vector3(float* v) : x(v[0]), y(v[1]), z(v[2]){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@PAM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??4Vector3@Ogre@@QAEABV01@ABV01@@Z		; Ogre::Vector3::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Vector3@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z PROC			; Ogre::Vector3::operator=, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			x = vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 63   : 			y = vec.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 64   : 			z = vec.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 65   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 66   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z ENDP			; Ogre::Vector3::operator=
_TEXT	ENDS
PUBLIC	??YVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??YVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator+=, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			x += vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 70   : 			y += vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 71   : 			z += vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 72   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator+=
_TEXT	ENDS
PUBLIC	??ZVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??ZVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator-=, COMDAT
; _this$ = ecx

; 74   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 			x -= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 76   : 			y -= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 77   : 			z -= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 78   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator-=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XVector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 81   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 			x *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 83   : 			y *= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 84   : 			z *= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 85   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??XVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 88   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 			x *= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 90   : 			y *= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 91   : 			z *= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 92   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??_0Vector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator/=
; Function compile flags: /Odtp
;	COMDAT ??_0Vector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??_0Vector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator/=, COMDAT
; _this$ = ecx

; 95   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 			x /= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 97   : 			y /= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fdiv	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 98   : 			z /= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fdiv	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 99   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??_0Vector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator/=
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QAEPAMXZ			; Ogre::Vector3::operator float *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QAEPAMXZ PROC				; Ogre::Vector3::operator float *, COMDAT
; _this$ = ecx

; 101  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 103  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QAEPAMXZ ENDP				; Ogre::Vector3::operator float *
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QBEPBMXZ			; Ogre::Vector3::operator float const *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QBEPBMXZ PROC				; Ogre::Vector3::operator float const *, COMDAT
; _this$ = ecx

; 105  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 107  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QBEPBMXZ ENDP				; Ogre::Vector3::operator float const *
_TEXT	ENDS
PUBLIC	??HVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator+
; Function compile flags: /Odtp
;	COMDAT ??HVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??HVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator+, COMDAT
; _this$ = ecx

; 109  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??HVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator+
_TEXT	ENDS
PUBLIC	??GVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator-
; Function compile flags: /Odtp
;	COMDAT ??GVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??GVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator-, COMDAT
; _this$ = ecx

; 113  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 			return Vector3(-x, -y, -z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 115  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??GVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator-
_TEXT	ENDS
PUBLIC	??8Vector3@Ogre@@QBE_NABV01@@Z			; Ogre::Vector3::operator==
; Function compile flags: /Odtp
;	COMDAT ??8Vector3@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??8Vector3@Ogre@@QBE_NABV01@@Z PROC			; Ogre::Vector3::operator==, COMDAT
; _this$ = ecx

; 117  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 			return (x==vec.x && y==vec.y && z==vec.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv77[ebp]

; 119  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector3@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::Vector3::operator==
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXMMM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
?setElement@Vector3@Ogre@@QAEXMMM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			x = x1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]

; 123  : 			y = y1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]

; 124  : 			z = z1;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]

; 125  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setElement@Vector3@Ogre@@QAEXMMM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXPAM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXPAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?setElement@Vector3@Ogre@@QAEXPAM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 127  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 			x = p[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 129  : 			y = p[1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 130  : 			z = p[2];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 131  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setElement@Vector3@Ogre@@QAEXPAM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?Sqrt@Ogre@@YAMM@Z				; Ogre::Sqrt
PUBLIC	?length@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::length
; Function compile flags: /Odtp
;	COMDAT ?length@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?length@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::length, COMDAT
; _this$ = ecx

; 133  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 			return (float)Sqrt(x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@Ogre@@YAMM@Z			; Ogre::Sqrt
	add	esp, 4

; 135  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::length
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
;	COMDAT ?Sqrt@Ogre@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Sqrt@Ogre@@YAMM@Z PROC					; Ogre::Sqrt, COMDAT

; 59   : 	{

	push	ebp
	mov	ebp, esp

; 60   : 		return (float)sqrt(x);

	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 61   : 	}

	pop	ebp
	ret	0
?Sqrt@Ogre@@YAMM@Z ENDP					; Ogre::Sqrt
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?lengthSqr@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::lengthSqr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ?lengthSqr@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?lengthSqr@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::lengthSqr, COMDAT
; _this$ = ecx

; 137  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 			return (x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]

; 139  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?lengthSqr@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::lengthSqr
_TEXT	ENDS
PUBLIC	??0WorldPos@Ogre@@QAE@XZ			; Ogre::WorldPos::WorldPos
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreworldpos.h
;	COMDAT ??0WorldPos@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0WorldPos@Ogre@@QAE@XZ PROC				; Ogre::WorldPos::WorldPos, COMDAT
; _this$ = ecx

; 18   : 		WorldPos()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 19   : 		{
; 20   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0WorldPos@Ogre@@QAE@XZ ENDP				; Ogre::WorldPos::WorldPos
_TEXT	ENDS
PUBLIC	??0WorldPos@Ogre@@QAE@HHH@Z			; Ogre::WorldPos::WorldPos
; Function compile flags: /Odtp
;	COMDAT ??0WorldPos@Ogre@@QAE@HHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0WorldPos@Ogre@@QAE@HHH@Z PROC			; Ogre::WorldPos::WorldPos, COMDAT
; _this$ = ecx

; 23   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __x$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __y$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __z$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 24   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0WorldPos@Ogre@@QAE@HHH@Z ENDP			; Ogre::WorldPos::WorldPos
_TEXT	ENDS
PUBLIC	__real@4024000000000000
PUBLIC	??0WorldPos@Ogre@@QAE@ABVVector3@1@@Z		; Ogre::WorldPos::WorldPos
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0WorldPos@Ogre@@QAE@ABVVector3@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??0WorldPos@Ogre@@QAE@ABVVector3@1@@Z PROC		; Ogre::WorldPos::WorldPos, COMDAT
; _this$ = ecx

; 26   : 		WorldPos( const Vector3 &vec )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 27   : 		{
; 28   : 			x = (WPOS_T)(vec.x * UNIT);

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 29   : 			y = (WPOS_T)(vec.y * UNIT);

	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 30   : 			z = (WPOS_T)(vec.z * UNIT);

	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 31   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0WorldPos@Ogre@@QAE@ABVVector3@1@@Z ENDP		; Ogre::WorldPos::WorldPos
_TEXT	ENDS
PUBLIC	??4WorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z	; Ogre::WorldPos::operator=
; Function compile flags: /Odtp
;	COMDAT ??4WorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??4WorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z PROC		; Ogre::WorldPos::operator=, COMDAT
; _this$ = ecx

; 34   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 			x = (WPOS_T)(vec.x * UNIT);

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 36   : 			y = (WPOS_T)(vec.y * UNIT);

	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 37   : 			z = (WPOS_T)(vec.z * UNIT);

	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 38   : 
; 39   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 40   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4WorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z ENDP		; Ogre::WorldPos::operator=
_TEXT	ENDS
PUBLIC	??YWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z	; Ogre::WorldPos::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??YWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z PROC		; Ogre::WorldPos::operator+=, COMDAT
; _this$ = ecx

; 43   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 			x += (WPOS_T)(vec.x * UNIT);

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 45   : 			y += (WPOS_T)(vec.y * UNIT);

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 46   : 			z += (WPOS_T)(vec.z * UNIT);

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 47   : 
; 48   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 49   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z ENDP		; Ogre::WorldPos::operator+=
_TEXT	ENDS
PUBLIC	??YWorldPos@Ogre@@QAEABV01@ABV01@@Z		; Ogre::WorldPos::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YWorldPos@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
??YWorldPos@Ogre@@QAEABV01@ABV01@@Z PROC		; Ogre::WorldPos::operator+=, COMDAT
; _this$ = ecx

; 52   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 			x += pos.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 54   : 			y += pos.y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 55   : 			z += pos.z;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 56   : 
; 57   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 58   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YWorldPos@Ogre@@QAEABV01@ABV01@@Z ENDP		; Ogre::WorldPos::operator+=
_TEXT	ENDS
PUBLIC	??ZWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z	; Ogre::WorldPos::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??ZWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z PROC		; Ogre::WorldPos::operator-=, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			x -= (WPOS_T)(vec.x * UNIT);

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 63   : 			y -= (WPOS_T)(vec.y * UNIT);

	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 64   : 			z -= (WPOS_T)(vec.z * UNIT);

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 65   : 
; 66   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 67   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZWorldPos@Ogre@@QAEABV01@ABVVector3@1@@Z ENDP		; Ogre::WorldPos::operator-=
_TEXT	ENDS
PUBLIC	??ZWorldPos@Ogre@@QAEABV01@ABV01@@Z		; Ogre::WorldPos::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZWorldPos@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
??ZWorldPos@Ogre@@QAEABV01@ABV01@@Z PROC		; Ogre::WorldPos::operator-=, COMDAT
; _this$ = ecx

; 70   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 			x -= pos.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 72   : 			y -= pos.y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 73   : 			z -= pos.z;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 74   : 
; 75   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 76   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZWorldPos@Ogre@@QAEABV01@ABV01@@Z ENDP		; Ogre::WorldPos::operator-=
_TEXT	ENDS
PUBLIC	??HWorldPos@Ogre@@QBE?AV01@ABV01@@Z		; Ogre::WorldPos::operator+
; Function compile flags: /Odtp
;	COMDAT ??HWorldPos@Ogre@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pos$ = 12						; size = 4
??HWorldPos@Ogre@@QBE?AV01@ABV01@@Z PROC		; Ogre::WorldPos::operator+, COMDAT
; _this$ = ecx

; 79   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 			return WorldPos(x+pos.x, y+pos.y, z+pos.z);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pos$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pos$[ebp]
	add	ecx, DWORD PTR [edx+4]
	push	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0WorldPos@Ogre@@QAE@HHH@Z		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??HWorldPos@Ogre@@QBE?AV01@ABV01@@Z ENDP		; Ogre::WorldPos::operator+
_TEXT	ENDS
PUBLIC	??GWorldPos@Ogre@@QBE?AV01@ABV01@@Z		; Ogre::WorldPos::operator-
; Function compile flags: /Odtp
;	COMDAT ??GWorldPos@Ogre@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pos$ = 12						; size = 4
??GWorldPos@Ogre@@QBE?AV01@ABV01@@Z PROC		; Ogre::WorldPos::operator-, COMDAT
; _this$ = ecx

; 84   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 			return WorldPos(x-pos.x, y-pos.y, z-pos.z);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0WorldPos@Ogre@@QAE@HHH@Z		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 86   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??GWorldPos@Ogre@@QBE?AV01@ABV01@@Z ENDP		; Ogre::WorldPos::operator-
_TEXT	ENDS
PUBLIC	??HWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z	; Ogre::WorldPos::operator+
; Function compile flags: /Odtp
;	COMDAT ??HWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pos$ = 12						; size = 4
??HWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z PROC		; Ogre::WorldPos::operator+, COMDAT
; _this$ = ecx

; 89   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 			return WorldPos(x+(WPOS_T)(pos.x*UNIT), y+(WPOS_T)(pos.y*UNIT), z+(WPOS_T)(pos.z*UNIT));

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0WorldPos@Ogre@@QAE@HHH@Z		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 91   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??HWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z ENDP		; Ogre::WorldPos::operator+
_TEXT	ENDS
PUBLIC	??GWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z	; Ogre::WorldPos::operator-
; Function compile flags: /Odtp
;	COMDAT ??GWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pos$ = 12						; size = 4
??GWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z PROC		; Ogre::WorldPos::operator-, COMDAT
; _this$ = ecx

; 94   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 			return WorldPos(x-(WPOS_T)(pos.x*UNIT), y-(WPOS_T)(pos.y*UNIT), z-(WPOS_T)(pos.z*UNIT));

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, eax
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0WorldPos@Ogre@@QAE@HHH@Z		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 96   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??GWorldPos@Ogre@@QBE?AV01@ABVVector3@1@@Z ENDP		; Ogre::WorldPos::operator-
_TEXT	ENDS
PUBLIC	??DWorldPos@Ogre@@QBE?AV01@H@Z			; Ogre::WorldPos::operator*
; Function compile flags: /Odtp
;	COMDAT ??DWorldPos@Ogre@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
??DWorldPos@Ogre@@QBE?AV01@H@Z PROC			; Ogre::WorldPos::operator*, COMDAT
; _this$ = ecx

; 99   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 			return WorldPos((WPOS_T)(x*s), (WPOS_T)(y*s), (WPOS_T)(z*s));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0WorldPos@Ogre@@QAE@HHH@Z		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 101  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??DWorldPos@Ogre@@QBE?AV01@H@Z ENDP			; Ogre::WorldPos::operator*
_TEXT	ENDS
PUBLIC	??DWorldPos@Ogre@@QBE?AV01@M@Z			; Ogre::WorldPos::operator*
; Function compile flags: /Odtp
;	COMDAT ??DWorldPos@Ogre@@QBE?AV01@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
??DWorldPos@Ogre@@QBE?AV01@M@Z PROC			; Ogre::WorldPos::operator*, COMDAT
; _this$ = ecx

; 104  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 			return WorldPos((WPOS_T)(x*s), (WPOS_T)(y*s), (WPOS_T)(z*s));

	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax+8]
	fmul	DWORD PTR _s$[ebp]
	call	__ftol2_sse
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	fild	DWORD PTR [ecx+4]
	fmul	DWORD PTR _s$[ebp]
	call	__ftol2_sse
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	fild	DWORD PTR [edx]
	fmul	DWORD PTR _s$[ebp]
	call	__ftol2_sse
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0WorldPos@Ogre@@QAE@HHH@Z		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 106  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??DWorldPos@Ogre@@QBE?AV01@M@Z ENDP			; Ogre::WorldPos::operator*
_TEXT	ENDS
PUBLIC	??KWorldPos@Ogre@@QBE?AV01@H@Z			; Ogre::WorldPos::operator/
; Function compile flags: /Odtp
;	COMDAT ??KWorldPos@Ogre@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
??KWorldPos@Ogre@@QBE?AV01@H@Z PROC			; Ogre::WorldPos::operator/, COMDAT
; _this$ = ecx

; 109  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 			return WorldPos((WPOS_T)(x/s), (WPOS_T)(y/s), (WPOS_T)(z/s));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	cdq
	idiv	DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cdq
	idiv	DWORD PTR _s$[ebp]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cdq
	idiv	DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0WorldPos@Ogre@@QAE@HHH@Z		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??KWorldPos@Ogre@@QBE?AV01@H@Z ENDP			; Ogre::WorldPos::operator/
_TEXT	ENDS
PUBLIC	??8WorldPos@Ogre@@QBE_NABV01@@Z			; Ogre::WorldPos::operator==
; Function compile flags: /Odtp
;	COMDAT ??8WorldPos@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??8WorldPos@Ogre@@QBE_NABV01@@Z PROC			; Ogre::WorldPos::operator==, COMDAT
; _this$ = ecx

; 114  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 115  : 			return x==rhs.x && y==rhs.y && z==rhs.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN3@operator@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@operator@2
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN4@operator@2
$LN3@operator@2:
	mov	DWORD PTR tv71[ebp], 0
$LN4@operator@2:
	mov	al, BYTE PTR tv71[ebp]

; 116  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8WorldPos@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::WorldPos::operator==
_TEXT	ENDS
PUBLIC	??9WorldPos@Ogre@@QBE_NABV01@@Z			; Ogre::WorldPos::operator!=
; Function compile flags: /Odtp
;	COMDAT ??9WorldPos@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??9WorldPos@Ogre@@QBE_NABV01@@Z PROC			; Ogre::WorldPos::operator!=, COMDAT
; _this$ = ecx

; 119  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 			return x!=rhs.x || y!=rhs.y || z!=rhs.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator@3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN3@operator@3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@operator@3
	mov	DWORD PTR tv71[ebp], 0
	jmp	SHORT $LN4@operator@3
$LN3@operator@3:
	mov	DWORD PTR tv71[ebp], 1
$LN4@operator@3:
	mov	al, BYTE PTR tv71[ebp]

; 121  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9WorldPos@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::WorldPos::operator!=
_TEXT	ENDS
PUBLIC	?inverse@WorldPos@Ogre@@QAEXXZ			; Ogre::WorldPos::inverse
; Function compile flags: /Odtp
;	COMDAT ?inverse@WorldPos@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?inverse@WorldPos@Ogre@@QAEXXZ PROC			; Ogre::WorldPos::inverse, COMDAT
; _this$ = ecx

; 124  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 			x = -x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 126  : 			y = -y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	neg	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 127  : 			z = -z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	neg	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 128  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?inverse@WorldPos@Ogre@@QAEXXZ ENDP			; Ogre::WorldPos::inverse
_TEXT	ENDS
PUBLIC	?normalize@WorldPos@Ogre@@QBE?AVVector3@2@XZ	; Ogre::WorldPos::normalize
; Function compile flags: /Odtp
;	COMDAT ?normalize@WorldPos@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
tv133 = -48						; size = 4
tv131 = -44						; size = 4
tv129 = -40						; size = 4
_this$ = -36						; size = 4
_fy$ = -32						; size = 8
_fz$ = -24						; size = 8
_len$ = -16						; size = 8
_fx$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
?normalize@WorldPos@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::WorldPos::normalize, COMDAT
; _this$ = ecx

; 131  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 132  : 			double fx = double(x);

	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax]
	fstp	QWORD PTR _fx$[ebp]

; 133  : 			double fy = double(y);

	mov	ecx, DWORD PTR _this$[ebp]
	fild	DWORD PTR [ecx+4]
	fstp	QWORD PTR _fy$[ebp]

; 134  : 			double fz = double(z);

	mov	edx, DWORD PTR _this$[ebp]
	fild	DWORD PTR [edx+8]
	fstp	QWORD PTR _fz$[ebp]

; 135  : 			double len = sqrt( fx*fx + fy*fy + fz*fz );

	fld	QWORD PTR _fx$[ebp]
	fmul	QWORD PTR _fx$[ebp]
	fld	QWORD PTR _fy$[ebp]
	fmul	QWORD PTR _fy$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _fz$[ebp]
	fmul	QWORD PTR _fz$[ebp]
	faddp	ST(1), ST(0)
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR _len$[ebp]

; 136  : 
; 137  : 			return Vector3( float(fx/len), float(fy/len), float(fz/len) );

	fld	QWORD PTR _fz$[ebp]
	fdiv	QWORD PTR _len$[ebp]
	fstp	DWORD PTR tv129[ebp]
	fld	DWORD PTR tv129[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	QWORD PTR _fy$[ebp]
	fdiv	QWORD PTR _len$[ebp]
	fstp	DWORD PTR tv131[ebp]
	fld	DWORD PTR tv131[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	QWORD PTR _fx$[ebp]
	fdiv	QWORD PTR _len$[ebp]
	fstp	DWORD PTR tv133[ebp]
	fld	DWORD PTR tv133[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 138  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?normalize@WorldPos@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::WorldPos::normalize
_TEXT	ENDS
PUBLIC	?subtract@WorldPos@Ogre@@QBE?AVVector3@2@ABV12@@Z ; Ogre::WorldPos::subtract
PUBLIC	?toVector3@WorldPos@Ogre@@QBE?AVVector3@2@XZ	; Ogre::WorldPos::toVector3
EXTRN	?m_Origin@WorldPos@Ogre@@2V12@A:BYTE		; Ogre::WorldPos::m_Origin
; Function compile flags: /Odtp
;	COMDAT ?toVector3@WorldPos@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?toVector3@WorldPos@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::WorldPos::toVector3, COMDAT
; _this$ = ecx

; 141  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 142  : 			return subtract(m_Origin);

	push	OFFSET ?m_Origin@WorldPos@Ogre@@2V12@A	; Ogre::WorldPos::m_Origin
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?subtract@WorldPos@Ogre@@QBE?AVVector3@2@ABV12@@Z ; Ogre::WorldPos::subtract
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 143  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?toVector3@WorldPos@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::WorldPos::toVector3
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?subtract@WorldPos@Ogre@@QBE?AVVector3@2@ABV12@@Z
_TEXT	SEGMENT
tv130 = -28						; size = 4
tv129 = -24						; size = 4
tv93 = -20						; size = 4
tv92 = -16						; size = 4
tv88 = -12						; size = 4
tv87 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pos$ = 12						; size = 4
?subtract@WorldPos@Ogre@@QBE?AVVector3@2@ABV12@@Z PROC	; Ogre::WorldPos::subtract, COMDAT
; _this$ = ecx

; 146  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 			return Vector3( float(double(x-pos.x)/UNIT), float(double(y-pos.y)/UNIT), float(double(z-pos.z)/UNIT) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv87[ebp], edx
	fild	DWORD PTR tv87[ebp]
	fdiv	QWORD PTR __real@4024000000000000
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv92[ebp], edx
	fild	DWORD PTR tv92[ebp]
	fdiv	QWORD PTR __real@4024000000000000
	fstp	DWORD PTR tv93[ebp]
	fld	DWORD PTR tv93[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv129[ebp], edx
	fild	DWORD PTR tv129[ebp]
	fdiv	QWORD PTR __real@4024000000000000
	fstp	DWORD PTR tv130[ebp]
	fld	DWORD PTR tv130[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 148  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?subtract@WorldPos@Ogre@@QBE?AVVector3@2@ABV12@@Z ENDP	; Ogre::WorldPos::subtract
_TEXT	ENDS
PUBLIC	?Flt2Fix@WorldPos@Ogre@@SAHM@Z			; Ogre::WorldPos::Flt2Fix
; Function compile flags: /Odtp
;	COMDAT ?Flt2Fix@WorldPos@Ogre@@SAHM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Flt2Fix@WorldPos@Ogre@@SAHM@Z PROC			; Ogre::WorldPos::Flt2Fix, COMDAT

; 151  : 		{

	push	ebp
	mov	ebp, esp

; 152  : 			return (WPOS_T)(x*UNIT);

	fld	DWORD PTR _x$[ebp]
	fmul	QWORD PTR __real@4024000000000000
	call	__ftol2_sse

; 153  : 		}

	pop	ebp
	ret	0
?Flt2Fix@WorldPos@Ogre@@SAHM@Z ENDP			; Ogre::WorldPos::Flt2Fix
_TEXT	ENDS
PUBLIC	?Fix2Flt@WorldPos@Ogre@@SAMH@Z			; Ogre::WorldPos::Fix2Flt
; Function compile flags: /Odtp
;	COMDAT ?Fix2Flt@WorldPos@Ogre@@SAMH@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_x$ = 8							; size = 4
?Fix2Flt@WorldPos@Ogre@@SAMH@Z PROC			; Ogre::WorldPos::Fix2Flt, COMDAT

; 156  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx

; 157  : 			return float(double(x)/UNIT);

	fild	DWORD PTR _x$[ebp]
	fdiv	QWORD PTR __real@4024000000000000
	fstp	DWORD PTR tv67[ebp]
	fld	DWORD PTR tv67[ebp]

; 158  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?Fix2Flt@WorldPos@Ogre@@SAMH@Z ENDP			; Ogre::WorldPos::Fix2Flt
_TEXT	ENDS
PUBLIC	??4WorldPos@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::WorldPos::operator=
; Function compile flags: /Odtp
;	COMDAT ??4WorldPos@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4WorldPos@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::WorldPos::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4WorldPos@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::WorldPos::operator=
_TEXT	ENDS
PUBLIC	??0Ray@Ogre@@QAE@XZ				; Ogre::Ray::Ray
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreray.h
;	COMDAT ??0Ray@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Ray@Ogre@@QAE@XZ PROC				; Ogre::Ray::Ray, COMDAT
; _this$ = ecx

; 41   : 		Ray() : m_Range(MAX_FLOAT){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _MAX_FLOAT
	fstp	DWORD PTR [eax+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Ray@Ogre@@QAE@XZ ENDP				; Ogre::Ray::Ray
_TEXT	ENDS
PUBLIC	??0Ray@Ogre@@QAE@ABVVector3@1@0M@Z		; Ogre::Ray::Ray
; Function compile flags: /Odtp
;	COMDAT ??0Ray@Ogre@@QAE@ABVVector3@1@0M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_origin$ = 8						; size = 4
_dir$ = 12						; size = 4
_range$ = 16						; size = 4
??0Ray@Ogre@@QAE@ABVVector3@1@0M@Z PROC			; Ogre::Ray::Ray, COMDAT
; _this$ = ecx

; 43   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _origin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _dir$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _range$[ebp]
	fstp	DWORD PTR [edx+24]

; 44   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Ray@Ogre@@QAE@ABVVector3@1@0M@Z ENDP			; Ogre::Ray::Ray
_TEXT	ENDS
PUBLIC	??0Ray@Ogre@@QAE@ABV01@@Z			; Ogre::Ray::Ray
; Function compile flags: /Odtp
;	COMDAT ??0Ray@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Ray@Ogre@@QAE@ABV01@@Z PROC				; Ogre::Ray::Ray, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+24]
	fstp	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Ray@Ogre@@QAE@ABV01@@Z ENDP				; Ogre::Ray::Ray
_TEXT	ENDS
PUBLIC	??4Ray@Ogre@@QAEAAV01@ABV01@@Z			; Ogre::Ray::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Ray@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Ray@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Ray::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+24]
	fstp	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Ray@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Ray::operator=
_TEXT	ENDS
PUBLIC	??0WorldRay@Ogre@@QAE@XZ			; Ogre::WorldRay::WorldRay
; Function compile flags: /Odtp
;	COMDAT ??0WorldRay@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0WorldRay@Ogre@@QAE@XZ PROC				; Ogre::WorldRay::WorldRay, COMDAT
; _this$ = ecx

; 65   : 		WorldRay() : m_Range(MAX_FLOAT){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0WorldPos@Ogre@@QAE@XZ		; Ogre::WorldPos::WorldPos
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _MAX_FLOAT
	fstp	DWORD PTR [eax+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0WorldRay@Ogre@@QAE@XZ ENDP				; Ogre::WorldRay::WorldRay
_TEXT	ENDS
PUBLIC	??0WorldRay@Ogre@@QAE@ABV01@@Z			; Ogre::WorldRay::WorldRay
; Function compile flags: /Odtp
;	COMDAT ??0WorldRay@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0WorldRay@Ogre@@QAE@ABV01@@Z PROC			; Ogre::WorldRay::WorldRay, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+24]
	fstp	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0WorldRay@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::WorldRay::WorldRay
_TEXT	ENDS
PUBLIC	??4WorldRay@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::WorldRay::operator=
; Function compile flags: /Odtp
;	COMDAT ??4WorldRay@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4WorldRay@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::WorldRay::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+24]
	fstp	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4WorldRay@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::WorldRay::operator=
_TEXT	ENDS
PUBLIC	??0BoxBound@Ogre@@QAE@XZ			; Ogre::BoxBound::BoxBound
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebounding.h
;	COMDAT ??0BoxBound@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BoxBound@Ogre@@QAE@XZ PROC				; Ogre::BoxBound::BoxBound, COMDAT
; _this$ = ecx

; 14   : 		BoxBound() : m_isValid(false){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BoxBound@Ogre@@QAE@XZ ENDP				; Ogre::BoxBound::BoxBound
_TEXT	ENDS
PUBLIC	??0BoxBound@Ogre@@QAE@ABVVector3@1@0@Z		; Ogre::BoxBound::BoxBound
; Function compile flags: /Odtp
;	COMDAT ??0BoxBound@Ogre@@QAE@ABVVector3@1@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_minpos$ = 8						; size = 4
_maxpos$ = 12						; size = 4
??0BoxBound@Ogre@@QAE@ABVVector3@1@0@Z PROC		; Ogre::BoxBound::BoxBound, COMDAT
; _this$ = ecx

; 15   : 		BoxBound(const Vector3 &minpos, const Vector3 &maxpos) : m_MinPos(minpos), m_MaxPos(maxpos), m_isValid(true){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _minpos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _maxpos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+24], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0BoxBound@Ogre@@QAE@ABVVector3@1@0@Z ENDP		; Ogre::BoxBound::BoxBound
_TEXT	ENDS
PUBLIC	??0BoxBound@Ogre@@QAE@ABV01@@Z			; Ogre::BoxBound::BoxBound
; Function compile flags: /Odtp
;	COMDAT ??0BoxBound@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0BoxBound@Ogre@@QAE@ABV01@@Z PROC			; Ogre::BoxBound::BoxBound, COMDAT
; _this$ = ecx

; 16   : 		BoxBound(const BoxBound &rhs) : m_MinPos(rhs.m_MinPos), m_MaxPos(rhs.m_MaxPos), m_isValid(rhs.m_isValid){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	cl, BYTE PTR [eax+24]
	mov	BYTE PTR [edx+24], cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BoxBound@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::BoxBound::BoxBound
_TEXT	ENDS
PUBLIC	??$Max@M@Ogre@@YAMABM0@Z			; Ogre::Max<float>
PUBLIC	??$Min@M@Ogre@@YAMABM0@Z			; Ogre::Min<float>
PUBLIC	??YBoxBound@Ogre@@QAEAAV01@ABVVector3@1@@Z	; Ogre::BoxBound::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YBoxBound@Ogre@@QAEAAV01@ABVVector3@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Other$ = 8						; size = 4
??YBoxBound@Ogre@@QAEAAV01@ABVVector3@1@@Z PROC		; Ogre::BoxBound::operator+=, COMDAT
; _this$ = ecx

; 19   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 20   : 			if( m_isValid )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	$LN2@operator@4

; 21   : 			{
; 22   : #if ASM_x86
; 23   : 				__asm
; 24   : 				{
; 25   : 						mov		eax,[Other]
; 26   : 						mov		ecx,[this]
; 27   : 
; 28   : 						movss	xmm3,[eax]Vector3.x
; 29   : 						movss	xmm4,[eax]Vector3.y
; 30   : 						movss	xmm5,[eax]Vector3.z
; 31   : 
; 32   : 						movss	xmm0,[ecx]BoxBound.m_MinPos.x
; 33   : 						movss	xmm1,[ecx]BoxBound.m_MinPos.y
; 34   : 						movss	xmm2,[ecx]BoxBound.m_MinPos.z
; 35   : 						minss	xmm0,xmm3
; 36   : 						minss	xmm1,xmm4
; 37   : 						minss	xmm2,xmm5
; 38   : 						movss	[ecx]BoxBound.m_MinPos.x,xmm0
; 39   : 						movss	[ecx]BoxBound.m_MinPos.y,xmm1
; 40   : 						movss	[ecx]BoxBound.m_MinPos.z,xmm2
; 41   : 
; 42   : 						movss	xmm0,[ecx]BoxBound.m_MaxPos.x
; 43   : 						movss	xmm1,[ecx]BoxBound.m_MaxPos.y
; 44   : 						movss	xmm2,[ecx]BoxBound.m_MaxPos.z
; 45   : 						maxss	xmm0,xmm3
; 46   : 						maxss	xmm1,xmm4
; 47   : 						maxss	xmm2,xmm5
; 48   : 						movss	[ecx]BoxBound.m_MaxPos.x,xmm0
; 49   : 						movss	[ecx]BoxBound.m_MaxPos.y,xmm1
; 50   : 						movss	[ecx]BoxBound.m_MaxPos.z,xmm2
; 51   : 				}
; 52   : #else
; 53   : 				m_MinPos.x = Min( m_MinPos.x, Other.x );

	mov	edx, DWORD PTR _Other$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 54   : 				m_MinPos.y = Min( m_MinPos.y, Other.y );

	mov	edx, DWORD PTR _Other$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 55   : 				m_MinPos.z = Min( m_MinPos.z, Other.z );

	mov	edx, DWORD PTR _Other$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 56   : 
; 57   : 				m_MaxPos.x = Max( m_MaxPos.x, Other.x );

	mov	edx, DWORD PTR _Other$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 58   : 				m_MaxPos.y = Max( m_MaxPos.y, Other.y );

	mov	edx, DWORD PTR _Other$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+16]

; 59   : 				m_MaxPos.z = Max( m_MaxPos.z, Other.z );

	mov	edx, DWORD PTR _Other$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+20]

; 60   : #endif
; 61   : 			}
; 62   : 			else

	jmp	SHORT $LN1@operator@4
$LN2@operator@4:

; 63   : 			{
; 64   : 				m_MinPos = m_MaxPos = Other;

	mov	edx, DWORD PTR _Other$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 65   : 				m_isValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 1
$LN1@operator@4:

; 66   : 			}
; 67   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 68   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YBoxBound@Ogre@@QAEAAV01@ABVVector3@1@@Z ENDP		; Ogre::BoxBound::operator+=
_TEXT	ENDS
PUBLIC	??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BoxBound::operator=
PUBLIC	??YBoxBound@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BoxBound::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YBoxBound@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Other$ = 8						; size = 4
??YBoxBound@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BoxBound::operator+=, COMDAT
; _this$ = ecx

; 71   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 72   : 			if( m_isValid && Other.m_isValid )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	$LN3@operator@5
	mov	edx, DWORD PTR _Other$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	je	$LN3@operator@5

; 73   : 			{
; 74   : #if ASM_X86
; 75   : 				__asm
; 76   : 				{
; 77   : 						mov		eax,[Other]
; 78   : 						mov		ecx,[this]
; 79   : 
; 80   : 						movss	xmm0,[ecx]BoxBound.m_MinPos.x
; 81   : 						movss	xmm1,[ecx]BoxBound.m_MinPos.y
; 82   : 						movss	xmm2,[ecx]BoxBound.m_MinPos.z
; 83   : 						minss	xmm0,[eax]BoxBound.m_MinPos.x
; 84   : 						minss	xmm1,[eax]BoxBound.m_MinPos.y
; 85   : 						minss	xmm2,[eax]BoxBound.m_MinPos.z
; 86   : 						movss	[ecx]BoxBound.m_MinPos.x,xmm0
; 87   : 						movss	[ecx]BoxBound.m_MinPos.y,xmm1
; 88   : 						movss	[ecx]BoxBound.m_MinPos.z,xmm2
; 89   : 
; 90   : 						movss	xmm0,[ecx]BoxBound.m_MaxPos.x
; 91   : 						movss	xmm1,[ecx]BoxBound.m_MaxPos.y
; 92   : 						movss	xmm2,[ecx]BoxBound.m_MaxPos.z
; 93   : 						maxss	xmm0,[eax]BoxBound.m_MaxPos.x
; 94   : 						maxss	xmm1,[eax]BoxBound.m_MaxPos.y
; 95   : 						maxss	xmm2,[eax]BoxBound.m_MaxPos.z
; 96   : 						movss	[ecx]BoxBound.m_MaxPos.x,xmm0
; 97   : 						movss	[ecx]BoxBound.m_MaxPos.y,xmm1
; 98   : 						movss	[ecx]BoxBound.m_MaxPos.z,xmm2
; 99   : 				}
; 100  : #else
; 101  : 				m_MinPos.x = Min( m_MinPos.x, Other.m_MinPos.x );

	mov	ecx, DWORD PTR _Other$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax]

; 102  : 				m_MinPos.y = Min( m_MinPos.y, Other.m_MinPos.y );

	mov	ecx, DWORD PTR _Other$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 103  : 				m_MinPos.z = Min( m_MinPos.z, Other.m_MinPos.z );

	mov	ecx, DWORD PTR _Other$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	??$Min@M@Ogre@@YAMABM0@Z		; Ogre::Min<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8]

; 104  : 
; 105  : 				m_MaxPos.x = Max( m_MaxPos.x, Other.m_MaxPos.x );

	mov	ecx, DWORD PTR _Other$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+12]

; 106  : 				m_MaxPos.y = Max( m_MaxPos.y, Other.m_MaxPos.y );

	mov	ecx, DWORD PTR _Other$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+16]

; 107  : 				m_MaxPos.z = Max( m_MaxPos.z, Other.m_MaxPos.z );

	mov	ecx, DWORD PTR _Other$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	??$Max@M@Ogre@@YAMABM0@Z		; Ogre::Max<float>
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+20]
	jmp	SHORT $LN1@operator@5
$LN3@operator@5:

; 108  : #endif
; 109  : 			}
; 110  : 			else if( Other.m_isValid )

	mov	ecx, DWORD PTR _Other$[ebp]
	movzx	edx, BYTE PTR [ecx+24]
	test	edx, edx
	je	SHORT $LN1@operator@5

; 111  : 			{
; 112  : 				*this = Other;

	mov	eax, DWORD PTR _Other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z
$LN1@operator@5:

; 113  : 			}
; 114  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 115  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YBoxBound@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BoxBound::operator+=
_TEXT	ENDS
PUBLIC	?setRange@BoxBound@Ogre@@QAEXABVVector3@2@0@Z	; Ogre::BoxBound::setRange
; Function compile flags: /Odtp
;	COMDAT ?setRange@BoxBound@Ogre@@QAEXABVVector3@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_minpt$ = 8						; size = 4
_maxpt$ = 12						; size = 4
?setRange@BoxBound@Ogre@@QAEXABVVector3@2@0@Z PROC	; Ogre::BoxBound::setRange, COMDAT
; _this$ = ecx

; 118  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 119  : 			m_MinPos = minpt;

	mov	eax, DWORD PTR _minpt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 120  : 			m_MaxPos = maxpt;

	mov	ecx, DWORD PTR _maxpt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 121  : 			m_isValid = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+24], 1

; 122  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setRange@BoxBound@Ogre@@QAEXABVVector3@2@0@Z ENDP	; Ogre::BoxBound::setRange
_TEXT	ENDS
PUBLIC	??HOgre@@YA?AVVector3@0@ABV10@0@Z		; Ogre::operator+
PUBLIC	??GOgre@@YA?AVVector3@0@ABV10@0@Z		; Ogre::operator-
PUBLIC	?setCenterExtension@BoxBound@Ogre@@QAEXABVVector3@2@0@Z ; Ogre::BoxBound::setCenterExtension
; Function compile flags: /Odtp
;	COMDAT ?setCenterExtension@BoxBound@Ogre@@QAEXABVVector3@2@0@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T63406 = -24						; size = 12
$T63405 = -12						; size = 12
_center$ = 8						; size = 4
_exten$ = 12						; size = 4
?setCenterExtension@BoxBound@Ogre@@QAEXABVVector3@2@0@Z PROC ; Ogre::BoxBound::setCenterExtension, COMDAT
; _this$ = ecx

; 125  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 			m_MinPos = center-exten;

	mov	eax, DWORD PTR _exten$[ebp]
	push	eax
	mov	ecx, DWORD PTR _center$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63405[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 127  : 			m_MaxPos = center+exten;

	mov	eax, DWORD PTR _exten$[ebp]
	push	eax
	mov	ecx, DWORD PTR _center$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63406[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 128  : 			m_isValid = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 1

; 129  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setCenterExtension@BoxBound@Ogre@@QAEXABVVector3@2@0@Z ENDP ; Ogre::BoxBound::setCenterExtension
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ??HOgre@@YA?AVVector3@0@ABV10@0@Z
_TEXT	SEGMENT
tv92 = -12						; size = 4
tv89 = -8						; size = 4
tv86 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??HOgre@@YA?AVVector3@0@ABV10@0@Z PROC			; Ogre::operator+, COMDAT

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 165  : 		return Vector3(v1.x+v2.x, v1.y+v2.y, v1.z+v2.z);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v2$[ebp]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v2$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v2$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 166  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??HOgre@@YA?AVVector3@0@ABV10@0@Z ENDP			; Ogre::operator+
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??GOgre@@YA?AVVector3@0@ABV10@0@Z
_TEXT	SEGMENT
tv92 = -12						; size = 4
tv89 = -8						; size = 4
tv86 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??GOgre@@YA?AVVector3@0@ABV10@0@Z PROC			; Ogre::operator-, COMDAT

; 174  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 175  : 		return Vector3(v1.x-v2.x, v1.y-v2.y, v1.z-v2.z);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v2$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v2$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v2$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 176  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??GOgre@@YA?AVVector3@0@ABV10@0@Z ENDP			; Ogre::operator-
_TEXT	ENDS
PUBLIC	?expandBy@BoxBound@Ogre@@QBE?AV12@M@Z		; Ogre::BoxBound::expandBy
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebounding.h
;	COMDAT ?expandBy@BoxBound@Ogre@@QBE?AV12@M@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T63416 = -48						; size = 12
$T63415 = -36						; size = 12
$T63414 = -24						; size = 12
$T63413 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_w$ = 12						; size = 4
?expandBy@BoxBound@Ogre@@QBE?AV12@M@Z PROC		; Ogre::BoxBound::expandBy, COMDAT
; _this$ = ecx

; 134  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 135  : 			return BoxBound( m_MinPos - Vector3(w,w,w), m_MaxPos + Vector3(w,w,w) );

	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T63413[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T63414[ebp]
	push	ecx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T63415[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	eax, DWORD PTR $T63416[ebp]
	push	eax
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0BoxBound@Ogre@@QAE@ABVVector3@1@0@Z	; Ogre::BoxBound::BoxBound
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 136  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?expandBy@BoxBound@Ogre@@QBE?AV12@M@Z ENDP		; Ogre::BoxBound::expandBy
_TEXT	ENDS
PUBLIC	??DOgre@@YA?AVVector3@0@ABV10@M@Z		; Ogre::operator*
PUBLIC	__real@3f000000
PUBLIC	?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ	; Ogre::BoxBound::getCenter
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T63419 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::BoxBound::getCenter, COMDAT
; _this$ = ecx

; 144  : 		Vector3 getCenter() const{ return (m_MinPos + m_MaxPos)*0.5f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63419[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??DOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator*
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::BoxBound::getCenter
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ??DOgre@@YA?AVVector3@0@ABV10@M@Z
_TEXT	SEGMENT
tv87 = -12						; size = 4
tv85 = -8						; size = 4
tv83 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_s$ = 16						; size = 4
??DOgre@@YA?AVVector3@0@ABV10@M@Z PROC			; Ogre::operator*, COMDAT

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 190  : 		return Vector3(v1.x*s, v1.y*s, v1.z*s);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv85[ebp]
	fld	DWORD PTR tv85[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv87[ebp]
	fld	DWORD PTR tv87[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 191  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??DOgre@@YA?AVVector3@0@ABV10@M@Z ENDP			; Ogre::operator*
_TEXT	ENDS
PUBLIC	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ	; Ogre::BoxBound::getExtension
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebounding.h
;	COMDAT ?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T63426 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::BoxBound::getExtension, COMDAT
; _this$ = ecx

; 145  : 		Vector3 getExtension() const{ return (m_MaxPos - m_MinPos)*0.5f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T63426[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??DOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator*
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::BoxBound::getExtension
_TEXT	ENDS
PUBLIC	?getMinPos@BoxBound@Ogre@@QBEABVVector3@2@XZ	; Ogre::BoxBound::getMinPos
; Function compile flags: /Odtp
;	COMDAT ?getMinPos@BoxBound@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMinPos@BoxBound@Ogre@@QBEABVVector3@2@XZ PROC	; Ogre::BoxBound::getMinPos, COMDAT
; _this$ = ecx

; 146  : 		const Vector3 &getMinPos() const{ return m_MinPos; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getMinPos@BoxBound@Ogre@@QBEABVVector3@2@XZ ENDP	; Ogre::BoxBound::getMinPos
_TEXT	ENDS
PUBLIC	?getMaxPos@BoxBound@Ogre@@QBEABVVector3@2@XZ	; Ogre::BoxBound::getMaxPos
; Function compile flags: /Odtp
;	COMDAT ?getMaxPos@BoxBound@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxPos@BoxBound@Ogre@@QBEABVVector3@2@XZ PROC	; Ogre::BoxBound::getMaxPos, COMDAT
; _this$ = ecx

; 147  : 		const Vector3 &getMaxPos() const{ return m_MaxPos; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxPos@BoxBound@Ogre@@QBEABVVector3@2@XZ ENDP	; Ogre::BoxBound::getMaxPos
_TEXT	ENDS
PUBLIC	??$Abs@M@Ogre@@YAMABM@Z				; Ogre::Abs<float>
PUBLIC	?getRadiusInDirection@BoxBound@Ogre@@QBEMABVVector3@2@@Z ; Ogre::BoxBound::getRadiusInDirection
; Function compile flags: /Odtp
;	COMDAT ?getRadiusInDirection@BoxBound@Ogre@@QBEMABVVector3@2@@Z
_TEXT	SEGMENT
tv143 = -48						; size = 4
tv148 = -44						; size = 8
tv146 = -36						; size = 8
_this$ = -28						; size = 4
$T63435 = -24						; size = 4
$T63434 = -20						; size = 4
$T63433 = -16						; size = 4
_extent$ = -12						; size = 12
_dir$ = 8						; size = 4
?getRadiusInDirection@BoxBound@Ogre@@QBEMABVVector3@2@@Z PROC ; Ogre::BoxBound::getRadiusInDirection, COMDAT
; _this$ = ecx

; 150  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 			Vector3 extent = getExtension();

	lea	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getExtension

; 152  : 			return Abs(dir.x*extent.x) + Abs(dir.y*extent.y) + Abs(dir.z*extent.z);

	mov	ecx, DWORD PTR _dir$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR _extent$[ebp]
	fstp	DWORD PTR $T63433[ebp]
	mov	edx, DWORD PTR _dir$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _extent$[ebp+4]
	fstp	DWORD PTR $T63434[ebp]
	mov	eax, DWORD PTR _dir$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _extent$[ebp+8]
	fstp	DWORD PTR $T63435[ebp]
	lea	ecx, DWORD PTR $T63433[ebp]
	push	ecx
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	add	esp, 4
	lea	edx, DWORD PTR $T63434[ebp]
	push	edx
	fstp	QWORD PTR tv146[ebp]
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	add	esp, 4
	fadd	QWORD PTR tv146[ebp]
	lea	eax, DWORD PTR $T63435[ebp]
	push	eax
	fstp	QWORD PTR tv148[ebp]
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	add	esp, 4
	fadd	QWORD PTR tv148[ebp]
	fstp	DWORD PTR tv143[ebp]
	fld	DWORD PTR tv143[ebp]

; 153  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getRadiusInDirection@BoxBound@Ogre@@QBEMABVVector3@2@@Z ENDP ; Ogre::BoxBound::getRadiusInDirection
_TEXT	ENDS
PUBLIC	?isPointIn@BoxBound@Ogre@@QBE_NABVVector3@2@@Z	; Ogre::BoxBound::isPointIn
; Function compile flags: /Odtp
;	COMDAT ?isPointIn@BoxBound@Ogre@@QBE_NABVVector3@2@@Z
_TEXT	SEGMENT
tv94 = -8						; size = 4
_this$ = -4						; size = 4
_vPos$ = 8						; size = 4
?isPointIn@BoxBound@Ogre@@QBE_NABVVector3@2@@Z PROC	; Ogre::BoxBound::isPointIn, COMDAT
; _this$ = ecx

; 156  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 157  : 			return (vPos.x>m_MinPos.x && vPos.x<m_MaxPos.x 
; 158  : 				    &&vPos.y>m_MinPos.y && vPos.y<m_MaxPos.y
; 159  : 					&&vPos.z>m_MinPos.z && vPos.z<m_MaxPos.z );

	mov	eax, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@isPointIn
	mov	edx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointIn
	mov	ecx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@isPointIn
	mov	eax, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+16]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointIn
	mov	edx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@isPointIn
	mov	ecx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+20]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointIn
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN4@isPointIn
$LN3@isPointIn:
	mov	DWORD PTR tv94[ebp], 0
$LN4@isPointIn:
	mov	al, BYTE PTR tv94[ebp]

; 160  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isPointIn@BoxBound@Ogre@@QBE_NABVVector3@2@@Z ENDP	; Ogre::BoxBound::isPointIn
_TEXT	ENDS
PUBLIC	?isPointInXZ@BoxBound@Ogre@@QBE_NABVVector3@2@@Z ; Ogre::BoxBound::isPointInXZ
; Function compile flags: /Odtp
;	COMDAT ?isPointInXZ@BoxBound@Ogre@@QBE_NABVVector3@2@@Z
_TEXT	SEGMENT
tv83 = -8						; size = 4
_this$ = -4						; size = 4
_vPos$ = 8						; size = 4
?isPointInXZ@BoxBound@Ogre@@QBE_NABVVector3@2@@Z PROC	; Ogre::BoxBound::isPointInXZ, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			return (vPos.x>m_MinPos.x && vPos.x<m_MaxPos.x 
; 165  : 				&&vPos.z>m_MinPos.z && vPos.z<m_MaxPos.z );

	mov	eax, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@isPointInX
	mov	edx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointInX
	mov	ecx, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@isPointInX
	mov	eax, DWORD PTR _vPos$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+20]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointInX
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN4@isPointInX
$LN3@isPointInX:
	mov	DWORD PTR tv83[ebp], 0
$LN4@isPointInX:
	mov	al, BYTE PTR tv83[ebp]

; 166  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isPointInXZ@BoxBound@Ogre@@QBE_NABVVector3@2@@Z ENDP	; Ogre::BoxBound::isPointInXZ
_TEXT	ENDS
PUBLIC	?intersectBoxBound@BoxBound@Ogre@@QBE_NABV12@@Z	; Ogre::BoxBound::intersectBoxBound
; Function compile flags: /Odtp
;	COMDAT ?intersectBoxBound@BoxBound@Ogre@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
?intersectBoxBound@BoxBound@Ogre@@QBE_NABV12@@Z PROC	; Ogre::BoxBound::intersectBoxBound, COMDAT
; _this$ = ecx

; 169  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 			if( m_MinPos.x > other.m_MaxPos.x || other.m_MinPos.x > m_MaxPos.x )

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [ecx+12]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN5@intersectB
	mov	edx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@intersectB
$LN5@intersectB:

; 171  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@intersectB
$LN6@intersectB:

; 172  : 			if( m_MinPos.y > other.m_MaxPos.y || other.m_MinPos.y > m_MaxPos.y )

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [edx+16]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN3@intersectB
	mov	eax, DWORD PTR _other$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+16]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@intersectB
$LN3@intersectB:

; 173  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@intersectB
$LN4@intersectB:

; 174  : 			if( m_MinPos.z > other.m_MaxPos.z || other.m_MinPos.z > m_MaxPos.z )

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _other$[ebp]
	fld	DWORD PTR [eax+20]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN1@intersectB
	mov	ecx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+20]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@intersectB
$LN1@intersectB:

; 175  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@intersectB
$LN2@intersectB:

; 176  : 			return true;

	mov	al, 1
$LN7@intersectB:

; 177  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?intersectBoxBound@BoxBound@Ogre@@QBE_NABV12@@Z ENDP	; Ogre::BoxBound::intersectBoxBound
_TEXT	ENDS
PUBLIC	?isBoxBoundIn@BoxBound@Ogre@@QAE_NABV12@@Z	; Ogre::BoxBound::isBoxBoundIn
; Function compile flags: /Odtp
;	COMDAT ?isBoxBoundIn@BoxBound@Ogre@@QAE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_box$ = 8						; size = 4
?isBoxBoundIn@BoxBound@Ogre@@QAE_NABV12@@Z PROC		; Ogre::BoxBound::isBoxBoundIn, COMDAT
; _this$ = ecx

; 181  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 			if( box.m_MaxPos.x > m_MaxPos.x ||
; 183  : 				box.m_MinPos.x < m_MinPos.x )

	mov	eax, DWORD PTR _box$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN5@isBoxBound
	mov	edx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN6@isBoxBound
$LN5@isBoxBound:

; 184  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@isBoxBound
$LN6@isBoxBound:

; 185  : 			if( box.m_MaxPos.y > m_MaxPos.y ||
; 186  : 				box.m_MinPos.y < m_MinPos.y )

	mov	ecx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+16]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN3@isBoxBound
	mov	eax, DWORD PTR _box$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@isBoxBound
$LN3@isBoxBound:

; 187  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@isBoxBound
$LN4@isBoxBound:

; 188  : 			if( box.m_MaxPos.z > m_MaxPos.z ||
; 189  : 				box.m_MinPos.z < m_MinPos.z )

	mov	edx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN1@isBoxBound
	mov	ecx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@isBoxBound
$LN1@isBoxBound:

; 190  : 				return false;

	xor	al, al
	jmp	SHORT $LN7@isBoxBound
$LN2@isBoxBound:

; 191  : 
; 192  : 			return true;

	mov	al, 1
$LN7@isBoxBound:

; 193  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isBoxBoundIn@BoxBound@Ogre@@QAE_NABV12@@Z ENDP		; Ogre::BoxBound::isBoxBoundIn
_TEXT	ENDS
PUBLIC	?Abs@Ogre@@YA?AVVector3@1@ABV21@@Z		; Ogre::Abs
PUBLIC	?isBoxBoundOut@BoxBound@Ogre@@QBE_NABV12@@Z	; Ogre::BoxBound::isBoxBoundOut
; Function compile flags: /Odtp
;	COMDAT ?isBoxBoundOut@BoxBound@Ogre@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -88						; size = 4
$T63454 = -84						; size = 12
$T63453 = -72						; size = 12
$T63452 = -60						; size = 12
$T63451 = -48						; size = 12
$T63450 = -36						; size = 12
_vRadius$ = -24						; size = 12
_vDis$ = -12						; size = 12
_box$ = 8						; size = 4
?isBoxBoundOut@BoxBound@Ogre@@QBE_NABV12@@Z PROC	; Ogre::BoxBound::isBoxBoundOut, COMDAT
; _this$ = ecx

; 197  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 198  : 			Vector3 vDis = Abs(box.getCenter() - getCenter());

	lea	eax, DWORD PTR $T63450[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getCenter
	push	eax
	lea	ecx, DWORD PTR $T63451[ebp]
	push	ecx
	mov	ecx, DWORD PTR _box$[ebp]
	call	?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getCenter
	push	eax
	lea	edx, DWORD PTR $T63452[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _vDis$[ebp]
	push	eax
	call	?Abs@Ogre@@YA?AVVector3@1@ABV21@@Z	; Ogre::Abs
	add	esp, 8

; 199  : 			Vector3 vRadius = box.getExtension() + getExtension();

	lea	ecx, DWORD PTR $T63453[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getExtension
	push	eax
	lea	edx, DWORD PTR $T63454[ebp]
	push	edx
	mov	ecx, DWORD PTR _box$[ebp]
	call	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getExtension
	push	eax
	lea	eax, DWORD PTR _vRadius$[ebp]
	push	eax
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH

; 200  : 
; 201  : 			if( vDis.x > vRadius.x || vDis.y > vRadius.y || vDis.z > vRadius.z )

	fld	DWORD PTR _vDis$[ebp]
	fld	DWORD PTR _vRadius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN1@isBoxBound@2
	fld	DWORD PTR _vDis$[ebp+4]
	fld	DWORD PTR _vRadius$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN1@isBoxBound@2
	fld	DWORD PTR _vDis$[ebp+8]
	fld	DWORD PTR _vRadius$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@isBoxBound@2
$LN1@isBoxBound@2:

; 202  : 				return true;

	mov	al, 1
	jmp	SHORT $LN3@isBoxBound@2
$LN2@isBoxBound@2:

; 203  : 
; 204  : 			return false;

	xor	al, al
$LN3@isBoxBound@2:

; 205  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isBoxBoundOut@BoxBound@Ogre@@QBE_NABV12@@Z ENDP	; Ogre::BoxBound::isBoxBoundOut
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ?Abs@Ogre@@YA?AVVector3@1@ABV21@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?Abs@Ogre@@YA?AVVector3@1@ABV21@@Z PROC			; Ogre::Abs, COMDAT

; 204  : 	{

	push	ebp
	mov	ebp, esp

; 205  : 		return Vector3( Abs(v.x), Abs(v.y), Abs(v.z) );

	mov	eax, DWORD PTR _v$[ebp]
	add	eax, 8
	push	eax
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 4
	push	ecx
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 206  : 	}

	pop	ebp
	ret	0
?Abs@Ogre@@YA?AVVector3@1@ABV21@@Z ENDP			; Ogre::Abs
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BoxBound::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+24]
	mov	BYTE PTR [edx+24], cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BoxBound@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BoxBound::operator=
_TEXT	ENDS
PUBLIC	??0SphereBound@Ogre@@QAE@XZ			; Ogre::SphereBound::SphereBound
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebounding.h
;	COMDAT ??0SphereBound@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SphereBound@Ogre@@QAE@XZ PROC			; Ogre::SphereBound::SphereBound, COMDAT
; _this$ = ecx

; 221  : 		SphereBound(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0SphereBound@Ogre@@QAE@XZ ENDP			; Ogre::SphereBound::SphereBound
_TEXT	ENDS
PUBLIC	?getCenter@SphereBound@Ogre@@QBEABVVector3@2@XZ	; Ogre::SphereBound::getCenter
; Function compile flags: /Odtp
;	COMDAT ?getCenter@SphereBound@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCenter@SphereBound@Ogre@@QBEABVVector3@2@XZ PROC	; Ogre::SphereBound::getCenter, COMDAT
; _this$ = ecx

; 229  : 		const Vector3 &getCenter() const{ return m_Center; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCenter@SphereBound@Ogre@@QBEABVVector3@2@XZ ENDP	; Ogre::SphereBound::getCenter
_TEXT	ENDS
PUBLIC	?getRadius@SphereBound@Ogre@@QBEMXZ		; Ogre::SphereBound::getRadius
; Function compile flags: /Odtp
;	COMDAT ?getRadius@SphereBound@Ogre@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRadius@SphereBound@Ogre@@QBEMXZ PROC		; Ogre::SphereBound::getRadius, COMDAT
; _this$ = ecx

; 230  : 		float   getRadius() const{ return m_Radius; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?getRadius@SphereBound@Ogre@@QBEMXZ ENDP		; Ogre::SphereBound::getRadius
_TEXT	ENDS
PUBLIC	?isPointIn@SphereBound@Ogre@@QBE_NABVVector3@2@@Z ; Ogre::SphereBound::isPointIn
; Function compile flags: /Odtp
;	COMDAT ?isPointIn@SphereBound@Ogre@@QBE_NABVVector3@2@@Z
_TEXT	SEGMENT
tv79 = -24						; size = 4
tv89 = -20						; size = 4
_this$ = -16						; size = 4
$T63467 = -12						; size = 12
_vPos$ = 8						; size = 4
?isPointIn@SphereBound@Ogre@@QBE_NABVVector3@2@@Z PROC	; Ogre::SphereBound::isPointIn, COMDAT
; _this$ = ecx

; 233  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 			return ( (vPos - m_Center).lengthSqr() < m_Radius * m_Radius );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vPos$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63467[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?lengthSqr@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::lengthSqr
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@isPointIn@2
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN4@isPointIn@2
$LN3@isPointIn@2:
	mov	DWORD PTR tv79[ebp], 0
$LN4@isPointIn@2:
	mov	al, BYTE PTR tv79[ebp]

; 235  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isPointIn@SphereBound@Ogre@@QBE_NABVVector3@2@@Z ENDP	; Ogre::SphereBound::isPointIn
_TEXT	ENDS
PUBLIC	??0SphereBound@Ogre@@QAE@ABV01@@Z		; Ogre::SphereBound::SphereBound
; Function compile flags: /Odtp
;	COMDAT ??0SphereBound@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0SphereBound@Ogre@@QAE@ABV01@@Z PROC			; Ogre::SphereBound::SphereBound, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [edx+12]
	fstp	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0SphereBound@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::SphereBound::SphereBound
_TEXT	ENDS
PUBLIC	??4SphereBound@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::SphereBound::operator=
; Function compile flags: /Odtp
;	COMDAT ??4SphereBound@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4SphereBound@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::SphereBound::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [edx+12]
	fstp	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4SphereBound@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::SphereBound::operator=
_TEXT	ENDS
PUBLIC	??0BoxSphereBound@Ogre@@QAE@XZ			; Ogre::BoxSphereBound::BoxSphereBound
; Function compile flags: /Odtp
;	COMDAT ??0BoxSphereBound@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BoxSphereBound@Ogre@@QAE@XZ PROC			; Ogre::BoxSphereBound::BoxSphereBound, COMDAT
; _this$ = ecx

; 252  : 		BoxSphereBound()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3

; 253  : 		{
; 254  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BoxSphereBound@Ogre@@QAE@XZ ENDP			; Ogre::BoxSphereBound::BoxSphereBound
_TEXT	ENDS
PUBLIC	?fromBoxBound@BoxSphereBound@Ogre@@QAEXABVBoxBound@2@@Z ; Ogre::BoxSphereBound::fromBoxBound
PUBLIC	??0BoxSphereBound@Ogre@@QAE@ABVBoxBound@1@@Z	; Ogre::BoxSphereBound::BoxSphereBound
; Function compile flags: /Odtp
;	COMDAT ??0BoxSphereBound@Ogre@@QAE@ABVBoxBound@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_box$ = 8						; size = 4
??0BoxSphereBound@Ogre@@QAE@ABVBoxBound@1@@Z PROC	; Ogre::BoxSphereBound::BoxSphereBound, COMDAT
; _this$ = ecx

; 256  : 		BoxSphereBound(const BoxBound &box)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3

; 257  : 		{
; 258  : 			fromBoxBound(box);

	mov	eax, DWORD PTR _box$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?fromBoxBound@BoxSphereBound@Ogre@@QAEXABVBoxBound@2@@Z ; Ogre::BoxSphereBound::fromBoxBound

; 259  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BoxSphereBound@Ogre@@QAE@ABVBoxBound@1@@Z ENDP	; Ogre::BoxSphereBound::BoxSphereBound
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	?reset@BoxSphereBound@Ogre@@QAEXXZ		; Ogre::BoxSphereBound::reset
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?reset@BoxSphereBound@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T63480 = -12						; size = 12
?reset@BoxSphereBound@Ogre@@QAEXXZ PROC			; Ogre::BoxSphereBound::reset, COMDAT
; _this$ = ecx

; 262  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 			m_Center = m_Extent = Vector3(0,0,0);

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T63480[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 264  : 			m_Radius = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+24]

; 265  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?reset@BoxSphereBound@Ogre@@QAEXXZ ENDP			; Ogre::BoxSphereBound::reset
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?fromBoxBound@BoxSphereBound@Ogre@@QAEXABVBoxBound@2@@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T63486 = -24						; size = 12
$T63485 = -12						; size = 12
_box$ = 8						; size = 4
?fromBoxBound@BoxSphereBound@Ogre@@QAEXABVBoxBound@2@@Z PROC ; Ogre::BoxSphereBound::fromBoxBound, COMDAT
; _this$ = ecx

; 268  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 269  : 			m_Center = box.getCenter();

	lea	eax, DWORD PTR $T63485[ebp]
	push	eax
	mov	ecx, DWORD PTR _box$[ebp]
	call	?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getCenter
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 270  : 			m_Extent = box.getExtension();

	lea	ecx, DWORD PTR $T63486[ebp]
	push	ecx
	mov	ecx, DWORD PTR _box$[ebp]
	call	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getExtension
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 271  : 
; 272  : 			m_Radius = m_Extent.length();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?length@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::length
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+24]

; 273  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?fromBoxBound@BoxSphereBound@Ogre@@QAEXABVBoxBound@2@@Z ENDP ; Ogre::BoxSphereBound::fromBoxBound
_TEXT	ENDS
PUBLIC	?getSphere@BoxSphereBound@Ogre@@QBE?AVSphereBound@2@XZ ; Ogre::BoxSphereBound::getSphere
; Function compile flags: /Odtp
;	COMDAT ?getSphere@BoxSphereBound@Ogre@@QBE?AVSphereBound@2@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_sphere$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?getSphere@BoxSphereBound@Ogre@@QBE?AVSphereBound@2@XZ PROC ; Ogre::BoxSphereBound::getSphere, COMDAT
; _this$ = ecx

; 276  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 			SphereBound sphere;

	lea	ecx, DWORD PTR _sphere$[ebp]
	call	??0SphereBound@Ogre@@QAE@XZ		; Ogre::SphereBound::SphereBound

; 278  : 			sphere.m_Center = m_Center;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sphere$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 279  : 			sphere.m_Radius = m_Radius;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+24]
	fstp	DWORD PTR _sphere$[ebp+12]

; 280  : 			return sphere;

	lea	edx, DWORD PTR _sphere$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0SphereBound@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 281  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getSphere@BoxSphereBound@Ogre@@QBE?AVSphereBound@2@XZ ENDP ; Ogre::BoxSphereBound::getSphere
_TEXT	ENDS
PUBLIC	?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ ; Ogre::BoxSphereBound::getBox
; Function compile flags: /Odtp
;	COMDAT ?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T63492 = -52						; size = 12
$T63491 = -40						; size = 12
_box$ = -28						; size = 28
___$ReturnUdt$ = 8					; size = 4
?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ PROC	; Ogre::BoxSphereBound::getBox, COMDAT
; _this$ = ecx

; 284  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 			BoxBound box;

	lea	ecx, DWORD PTR _box$[ebp]
	call	??0BoxBound@Ogre@@QAE@XZ		; Ogre::BoxBound::BoxBound

; 286  : 			box.m_MinPos = m_Center - m_Extent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63491[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _box$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 287  : 			box.m_MaxPos = m_Center + m_Extent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63492[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _box$[ebp+12]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 288  : 			box.m_isValid = true;

	mov	BYTE PTR _box$[ebp+24], 1

; 289  : 			return box;

	lea	eax, DWORD PTR _box$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0BoxBound@Ogre@@QAE@ABV01@@Z		; Ogre::BoxBound::BoxBound
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 290  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ ENDP	; Ogre::BoxSphereBound::getBox
_TEXT	ENDS
PUBLIC	?getMin@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ	; Ogre::BoxSphereBound::getMin
; Function compile flags: /Odtp
;	COMDAT ?getMin@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getMin@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::BoxSphereBound::getMin, COMDAT
; _this$ = ecx

; 310  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 311  : 			return m_Center-m_Extent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 312  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getMin@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::BoxSphereBound::getMin
_TEXT	ENDS
PUBLIC	?getMax@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ	; Ogre::BoxSphereBound::getMax
; Function compile flags: /Odtp
;	COMDAT ?getMax@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getMax@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::BoxSphereBound::getMax, COMDAT
; _this$ = ecx

; 315  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  : 			return m_Center+m_Extent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 317  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getMax@BoxSphereBound@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::BoxSphereBound::getMax
_TEXT	ENDS
PUBLIC	?getCenter@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ ; Ogre::BoxSphereBound::getCenter
; Function compile flags: /Odtp
;	COMDAT ?getCenter@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCenter@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ PROC	; Ogre::BoxSphereBound::getCenter, COMDAT
; _this$ = ecx

; 320  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 321  : 			return m_Center;

	mov	eax, DWORD PTR _this$[ebp]

; 322  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getCenter@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ ENDP	; Ogre::BoxSphereBound::getCenter
_TEXT	ENDS
PUBLIC	?getExtension@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ ; Ogre::BoxSphereBound::getExtension
; Function compile flags: /Odtp
;	COMDAT ?getExtension@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getExtension@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ PROC ; Ogre::BoxSphereBound::getExtension, COMDAT
; _this$ = ecx

; 325  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 326  : 			return m_Extent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH

; 327  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getExtension@BoxSphereBound@Ogre@@QBEABVVector3@2@XZ ENDP ; Ogre::BoxSphereBound::getExtension
_TEXT	ENDS
PUBLIC	??KOgre@@YA?AVVector3@0@ABV10@M@Z		; Ogre::operator/
PUBLIC	__real@40000000
PUBLIC	?fromBox@BoxSphereBound@Ogre@@QAEXABVVector3@2@0@Z ; Ogre::BoxSphereBound::fromBox
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?fromBox@BoxSphereBound@Ogre@@QAEXABVVector3@2@0@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T63506 = -48						; size = 12
$T63505 = -36						; size = 12
$T63504 = -24						; size = 12
$T63503 = -12						; size = 12
_minpt$ = 8						; size = 4
_maxpt$ = 12						; size = 4
?fromBox@BoxSphereBound@Ogre@@QAEXABVVector3@2@0@Z PROC	; Ogre::BoxSphereBound::fromBox, COMDAT
; _this$ = ecx

; 330  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 331  : 			m_Center = (minpt + maxpt)/2.0f;

	push	ecx
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _maxpt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _minpt$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63503[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T63504[ebp]
	push	eax
	call	??KOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator/
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 332  : 			m_Extent = (maxpt - minpt)/2.0f;

	push	ecx
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _minpt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _maxpt$[ebp]
	push	edx
	lea	eax, DWORD PTR $T63505[ebp]
	push	eax
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T63506[ebp]
	push	ecx
	call	??KOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator/
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 333  : 			m_Radius = m_Extent.length();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?length@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::length
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+24]

; 334  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?fromBox@BoxSphereBound@Ogre@@QAEXABVVector3@2@0@Z ENDP	; Ogre::BoxSphereBound::fromBox
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ??KOgre@@YA?AVVector3@0@ABV10@M@Z
_TEXT	SEGMENT
tv87 = -12						; size = 4
tv85 = -8						; size = 4
tv83 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_s$ = 16						; size = 4
??KOgre@@YA?AVVector3@0@ABV10@M@Z PROC			; Ogre::operator/, COMDAT

; 199  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 200  : 		return Vector3(v1.x/s, v1.y/s, v1.z/s);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	fdiv	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx+4]
	fdiv	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv85[ebp]
	fld	DWORD PTR tv85[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx]
	fdiv	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv87[ebp]
	fld	DWORD PTR tv87[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 201  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??KOgre@@YA?AVVector3@0@ABV10@M@Z ENDP			; Ogre::operator/
_TEXT	ENDS
PUBLIC	?intersect@BoxSphereBound@Ogre@@QBE_NABV12@@Z	; Ogre::BoxSphereBound::intersect
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebounding.h
;	COMDAT ?intersect@BoxSphereBound@Ogre@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -60						; size = 4
_box1$ = -56						; size = 28
_box2$ = -28						; size = 28
_other$ = 8						; size = 4
?intersect@BoxSphereBound@Ogre@@QBE_NABV12@@Z PROC	; Ogre::BoxSphereBound::intersect, COMDAT
; _this$ = ecx

; 337  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 338  : 			BoxBound box1 = getBox();

	lea	eax, DWORD PTR _box1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ ; Ogre::BoxSphereBound::getBox

; 339  : 			BoxBound box2 = other.getBox();

	lea	ecx, DWORD PTR _box2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _other$[ebp]
	call	?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ ; Ogre::BoxSphereBound::getBox

; 340  : 			return box1.intersectBoxBound(box2);

	lea	edx, DWORD PTR _box2$[ebp]
	push	edx
	lea	ecx, DWORD PTR _box1$[ebp]
	call	?intersectBoxBound@BoxBound@Ogre@@QBE_NABV12@@Z ; Ogre::BoxBound::intersectBoxBound

; 341  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?intersect@BoxSphereBound@Ogre@@QBE_NABV12@@Z ENDP	; Ogre::BoxSphereBound::intersect
_TEXT	ENDS
PUBLIC	??0BoxSphereBound@Ogre@@QAE@ABV01@@Z		; Ogre::BoxSphereBound::BoxSphereBound
; Function compile flags: /Odtp
;	COMDAT ??0BoxSphereBound@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0BoxSphereBound@Ogre@@QAE@ABV01@@Z PROC		; Ogre::BoxSphereBound::BoxSphereBound, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+24]
	fstp	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BoxSphereBound@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::BoxSphereBound::BoxSphereBound
_TEXT	ENDS
PUBLIC	??4BoxSphereBound@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::BoxSphereBound::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BoxSphereBound@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BoxSphereBound@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BoxSphereBound::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+24]
	fstp	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BoxSphereBound@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BoxSphereBound::operator=
_TEXT	ENDS
PUBLIC	??0Plane@Ogre@@QAE@XZ				; Ogre::Plane::Plane
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreplane.h
;	COMDAT ??0Plane@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Plane@Ogre@@QAE@XZ PROC				; Ogre::Plane::Plane, COMDAT
; _this$ = ecx

; 71   : 		Plane()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3

; 72   : 		{
; 73   : 			//assert(0);
; 74   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Plane@Ogre@@QAE@XZ ENDP				; Ogre::Plane::Plane
_TEXT	ENDS
PUBLIC	?setFromNormalAndPoint@Plane@Ogre@@QAEXABVVector3@2@0@Z ; Ogre::Plane::setFromNormalAndPoint
PUBLIC	??0Plane@Ogre@@QAE@ABVVector3@1@0@Z		; Ogre::Plane::Plane
; Function compile flags: /Odtp
;	COMDAT ??0Plane@Ogre@@QAE@ABVVector3@1@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_normal$ = 8						; size = 4
_point$ = 12						; size = 4
??0Plane@Ogre@@QAE@ABVVector3@1@0@Z PROC		; Ogre::Plane::Plane, COMDAT
; _this$ = ecx

; 76   : 		Plane( const Vector3 &normal, const Vector3 &point )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3

; 77   : 		{
; 78   : 			setFromNormalAndPoint(normal,point);

	mov	eax, DWORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _normal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setFromNormalAndPoint@Plane@Ogre@@QAEXABVVector3@2@0@Z ; Ogre::Plane::setFromNormalAndPoint

; 79   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Plane@Ogre@@QAE@ABVVector3@1@0@Z ENDP		; Ogre::Plane::Plane
_TEXT	ENDS
PUBLIC	??0Plane@Ogre@@QAE@ABVVector3@1@M@Z		; Ogre::Plane::Plane
; Function compile flags: /Odtp
;	COMDAT ??0Plane@Ogre@@QAE@ABVVector3@1@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_normal$ = 8						; size = 4
_offset$ = 12						; size = 4
??0Plane@Ogre@@QAE@ABVVector3@1@M@Z PROC		; Ogre::Plane::Plane, COMDAT
; _this$ = ecx

; 82   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _normal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _offset$[ebp]
	fstp	DWORD PTR [ecx+12]

; 83   : 			assert( isValid() );
; 84   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Plane@Ogre@@QAE@ABVVector3@1@M@Z ENDP		; Ogre::Plane::Plane
_TEXT	ENDS
PUBLIC	?isValid@Plane@Ogre@@QBE_NXZ			; Ogre::Plane::isValid
; Function compile flags: /Odtp
;	COMDAT ?isValid@Plane@Ogre@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isValid@Plane@Ogre@@QBE_NXZ PROC			; Ogre::Plane::isValid, COMDAT
; _this$ = ecx

; 92   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 			assert( IsFloatValid(m_offset) );
; 94   : 			return true;

	mov	al, 1

; 95   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?isValid@Plane@Ogre@@QBE_NXZ ENDP			; Ogre::Plane::isValid
_TEXT	ENDS
PUBLIC	?setFromPlaneParam@Plane@Ogre@@QAEXQBM@Z	; Ogre::Plane::setFromPlaneParam
; Function compile flags: /Odtp
;	COMDAT ?setFromPlaneParam@Plane@Ogre@@QAEXQBM@Z
_TEXT	SEGMENT
tv142 = -12						; size = 4
_this$ = -8						; size = 4
_len$ = -4						; size = 4
_plane$ = 8						; size = 4
?setFromPlaneParam@Plane@Ogre@@QAEXQBM@Z PROC		; Ogre::Plane::setFromPlaneParam, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 			float len = (float)Sqrt( plane[0]*plane[0] + plane[1]*plane[1] + plane[2]*plane[2] );

	mov	eax, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _plane$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _plane$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _plane$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv142[ebp]
	fld	DWORD PTR tv142[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@Ogre@@YAMM@Z			; Ogre::Sqrt
	add	esp, 4
	fstp	DWORD PTR _len$[ebp]

; 102  : 			m_normal.x = plane[0] / len;

	mov	eax, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 103  : 			m_normal.y = plane[1] / len;

	mov	edx, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [edx+4]
	fdiv	DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 104  : 			m_normal.z = plane[2] / len;

	mov	ecx, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [ecx+8]
	fdiv	DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 105  : 			m_offset   = plane[3] / len;

	mov	eax, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [eax+12]
	fdiv	DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 106  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setFromPlaneParam@Plane@Ogre@@QAEXQBM@Z ENDP		; Ogre::Plane::setFromPlaneParam
_TEXT	ENDS
PUBLIC	?DotProduct@Ogre@@YAMABVVector3@1@0@Z		; Ogre::DotProduct
; Function compile flags: /Odtp
;	COMDAT ?setFromNormalAndPoint@Plane@Ogre@@QAEXABVVector3@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_normal$ = 8						; size = 4
_point$ = 12						; size = 4
?setFromNormalAndPoint@Plane@Ogre@@QAEXABVVector3@2@0@Z PROC ; Ogre::Plane::setFromNormalAndPoint, COMDAT
; _this$ = ecx

; 109  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 			m_normal = normal;

	mov	eax, DWORD PTR _normal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 111  : 			m_offset = - DotProduct( m_normal, point );

	mov	ecx, DWORD PTR _point$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fchs
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+12]

; 112  : 
; 113  : 			assert(isValid());
; 114  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setFromNormalAndPoint@Plane@Ogre@@QAEXABVVector3@2@0@Z ENDP ; Ogre::Plane::setFromNormalAndPoint
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ?DotProduct@Ogre@@YAMABVVector3@1@0@Z
_TEXT	SEGMENT
tv86 = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?DotProduct@Ogre@@YAMABVVector3@1@0@Z PROC		; Ogre::DotProduct, COMDAT

; 263  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 264  : 		return v1.x*v2.x + v1.y*v2.y + v1.z*v2.z;

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]

; 265  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?DotProduct@Ogre@@YAMABVVector3@1@0@Z ENDP		; Ogre::DotProduct
_TEXT	ENDS
PUBLIC	?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ; Ogre::Plane::distanceToPoint
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreplane.h
;	COMDAT ?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
_point$ = 8						; size = 4
?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z PROC	; Ogre::Plane::distanceToPoint, COMDAT
; _this$ = ecx

; 122  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 			assert(isValid());
; 124  : 			return DotProduct(m_normal, point) + m_offset;

	mov	eax, DWORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [edx+12]
	fstp	DWORD PTR tv78[ebp]
	fld	DWORD PTR tv78[ebp]

; 125  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ENDP	; Ogre::Plane::distanceToPoint
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	?pointSideGE@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@@Z ; Ogre::Plane::pointSideGE
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?pointSideGE@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
_this$ = -8						; size = 4
_d$ = -4						; size = 4
_point$ = 8						; size = 4
?pointSideGE@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@@Z PROC ; Ogre::Plane::pointSideGE, COMDAT
; _this$ = ecx

; 128  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 			assert(isValid());
; 130  : 			const float d = distanceToPoint(point);

	mov	eax, DWORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ; Ogre::Plane::distanceToPoint
	fstp	DWORD PTR _d$[ebp]

; 131  : 			return ( d >= 0.f ) ? FRONT : BACK;

	fld	DWORD PTR _d$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@pointSideG
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN4@pointSideG
$LN3@pointSideG:
	mov	DWORD PTR tv69[ebp], 1
$LN4@pointSideG:
	mov	eax, DWORD PTR tv69[ebp]

; 132  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?pointSideGE@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@@Z ENDP ; Ogre::Plane::pointSideGE
_TEXT	ENDS
PUBLIC	?pointSideOrOn@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@M@Z ; Ogre::Plane::pointSideOrOn
; Function compile flags: /Odtp
;	COMDAT ?pointSideOrOn@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_d$ = -4						; size = 4
_point$ = 8						; size = 4
_rOnTolerance$ = 12					; size = 4
?pointSideOrOn@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@M@Z PROC ; Ogre::Plane::pointSideOrOn, COMDAT
; _this$ = ecx

; 135  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 136  : 			assert(isValid());
; 137  : 			const float d = distanceToPoint(point);

	mov	eax, DWORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ; Ogre::Plane::distanceToPoint
	fstp	DWORD PTR _d$[ebp]

; 138  : 			if ( d > rOnTolerance )

	fld	DWORD PTR _d$[ebp]
	fld	DWORD PTR _rOnTolerance$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@pointSideO

; 139  : 				return FRONT;

	xor	eax, eax
	jmp	SHORT $LN3@pointSideO
$LN2@pointSideO:

; 140  : 			if ( d <-rOnTolerance )

	fld	DWORD PTR _rOnTolerance$[ebp]
	fchs
	fld	DWORD PTR _d$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@pointSideO

; 141  : 				return BACK;

	mov	eax, 1
	jmp	SHORT $LN3@pointSideO
$LN1@pointSideO:

; 142  : 			return INTERSECT;

	mov	eax, 2
$LN3@pointSideO:

; 143  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?pointSideOrOn@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@M@Z ENDP ; Ogre::Plane::pointSideOrOn
_TEXT	ENDS
PUBLIC	?translate@Plane@Ogre@@QAEXABVVector3@2@@Z	; Ogre::Plane::translate
; Function compile flags: /Odtp
;	COMDAT ?translate@Plane@Ogre@@QAEXABVVector3@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?translate@Plane@Ogre@@QAEXABVVector3@2@@Z PROC		; Ogre::Plane::translate, COMDAT
; _this$ = ecx

; 160  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 			assert(isValid());
; 162  : 			// slide the offset
; 163  : 			m_offset -= DotProduct( v, m_normal );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	fsubr	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+12]

; 164  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?translate@Plane@Ogre@@QAEXABVVector3@2@@Z ENDP		; Ogre::Plane::translate
_TEXT	ENDS
PUBLIC	?moveForwards@Plane@Ogre@@QAEXM@Z		; Ogre::Plane::moveForwards
; Function compile flags: /Odtp
;	COMDAT ?moveForwards@Plane@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rDelta$ = 8						; size = 4
?moveForwards@Plane@Ogre@@QAEXM@Z PROC			; Ogre::Plane::moveForwards, COMDAT
; _this$ = ecx

; 170  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 			assert(isValid());
; 172  : 			m_offset -= rDelta;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR _rDelta$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 173  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?moveForwards@Plane@Ogre@@QAEXM@Z ENDP			; Ogre::Plane::moveForwards
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	__real@bf800000
PUBLIC	?flipNormal@Plane@Ogre@@QAEXXZ			; Ogre::Plane::flipNormal
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?flipNormal@Plane@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?flipNormal@Plane@Ogre@@QAEXXZ PROC			; Ogre::Plane::flipNormal, COMDAT
; _this$ = ecx

; 176  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 			assert(isValid());
; 178  : 			m_normal *= -1.0f;

	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??XVector3@Ogre@@QAEXM@Z		; Ogre::Vector3::operator*=

; 179  : 			m_offset *= -1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	QWORD PTR __real@bff0000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 180  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?flipNormal@Plane@Ogre@@QAEXXZ ENDP			; Ogre::Plane::flipNormal
_TEXT	ENDS
PUBLIC	?solveForX@Plane@Ogre@@QBEMMM@Z			; Ogre::Plane::solveForX
; Function compile flags: /Odtp
;	COMDAT ?solveForX@Plane@Ogre@@QBEMMM@Z
_TEXT	SEGMENT
tv92 = -8						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
_z$ = 12						; size = 4
?solveForX@Plane@Ogre@@QBEMMM@Z PROC			; Ogre::Plane::solveForX, COMDAT
; _this$ = ecx

; 183  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 184  : 			if( m_normal.x ) return -(m_normal.y*y + m_normal.z*z + m_offset)/m_normal.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@solveForX
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fmul	DWORD PTR _z$[ebp]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+12]
	fchs
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	jmp	SHORT $LN1@solveForX

; 185  : 			else

	jmp	SHORT $LN1@solveForX
$LN2@solveForX:

; 186  : 			{
; 187  : 				assert(0);
; 188  : 				return 0;

	fldz
$LN1@solveForX:

; 189  : 			}
; 190  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?solveForX@Plane@Ogre@@QBEMMM@Z ENDP			; Ogre::Plane::solveForX
_TEXT	ENDS
PUBLIC	?solveForY@Plane@Ogre@@QBEMMM@Z			; Ogre::Plane::solveForY
; Function compile flags: /Odtp
;	COMDAT ?solveForY@Plane@Ogre@@QBEMMM@Z
_TEXT	SEGMENT
tv93 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_z$ = 12						; size = 4
?solveForY@Plane@Ogre@@QBEMMM@Z PROC			; Ogre::Plane::solveForY, COMDAT
; _this$ = ecx

; 192  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 193  : 			if( m_normal.y ) return -(m_normal.x*x + m_normal.z*z + m_offset)/m_normal.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@solveForY
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fmul	DWORD PTR _z$[ebp]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+12]
	fchs
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx+4]
	fstp	DWORD PTR tv93[ebp]
	fld	DWORD PTR tv93[ebp]
	jmp	SHORT $LN1@solveForY

; 194  : 			else

	jmp	SHORT $LN1@solveForY
$LN2@solveForY:

; 195  : 			{
; 196  : 				assert(0);
; 197  : 				return 0;

	fldz
$LN1@solveForY:

; 198  : 			}
; 199  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?solveForY@Plane@Ogre@@QBEMMM@Z ENDP			; Ogre::Plane::solveForY
_TEXT	ENDS
PUBLIC	?solveForZ@Plane@Ogre@@QBEMMM@Z			; Ogre::Plane::solveForZ
; Function compile flags: /Odtp
;	COMDAT ?solveForZ@Plane@Ogre@@QBEMMM@Z
_TEXT	SEGMENT
tv93 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?solveForZ@Plane@Ogre@@QBEMMM@Z PROC			; Ogre::Plane::solveForZ, COMDAT
; _this$ = ecx

; 201  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 			if( m_normal.z ) return -(m_normal.x*x + m_normal.y*y + m_offset)/m_normal.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@solveForZ
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _y$[ebp]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+12]
	fchs
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv93[ebp]
	fld	DWORD PTR tv93[ebp]
	jmp	SHORT $LN1@solveForZ

; 203  : 			else

	jmp	SHORT $LN1@solveForZ
$LN2@solveForZ:

; 204  : 			{
; 205  : 				assert(0);
; 206  : 				return 0;

	fldz
$LN1@solveForZ:

; 207  : 			}
; 208  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?solveForZ@Plane@Ogre@@QBEMMM@Z ENDP			; Ogre::Plane::solveForZ
_TEXT	ENDS
PUBLIC	?segmentIntersec@Plane@Ogre@@QBE_NAAVVector3@2@ABV32@1@Z ; Ogre::Plane::segmentIntersec
; Function compile flags: /Odtp
;	COMDAT ?segmentIntersec@Plane@Ogre@@QBE_NAAVVector3@2@ABV32@1@Z
_TEXT	SEGMENT
tv140 = -64						; size = 4
_this$ = -60						; size = 4
$T63562 = -56						; size = 12
$T63561 = -44						; size = 12
$T63560 = -32						; size = 12
$T63559 = -20						; size = 12
_fDis0$ = -8						; size = 4
_fDis1$ = -4						; size = 4
_vOut$ = 8						; size = 4
_vP0$ = 12						; size = 4
_vP1$ = 16						; size = 4
?segmentIntersec@Plane@Ogre@@QBE_NAAVVector3@2@ABV32@1@Z PROC ; Ogre::Plane::segmentIntersec, COMDAT
; _this$ = ecx

; 212  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 213  : 			float fDis0 = distanceToPoint(vP0);

	mov	eax, DWORD PTR _vP0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ; Ogre::Plane::distanceToPoint
	fstp	DWORD PTR _fDis0$[ebp]

; 214  : 			float fDis1 = distanceToPoint(vP1);

	mov	ecx, DWORD PTR _vP1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ; Ogre::Plane::distanceToPoint
	fstp	DWORD PTR _fDis1$[ebp]

; 215  : 			if( fDis0 * fDis1 >= 0 )

	fld	DWORD PTR _fDis0$[ebp]
	fmul	DWORD PTR _fDis1$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN1@segmentInt

; 216  : 				return false;

	xor	al, al
	jmp	SHORT $LN2@segmentInt
$LN1@segmentInt:

; 217  : 
; 218  : 			vOut = vP0 + (vP1 - vP0) * fDis0 / (fDis0 - fDis1);

	fld	DWORD PTR _fDis0$[ebp]
	fsub	DWORD PTR _fDis1$[ebp]
	fstp	DWORD PTR tv140[ebp]
	fld	DWORD PTR tv140[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fDis0$[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _vP0$[ebp]
	push	edx
	mov	eax, DWORD PTR _vP1$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T63559[ebp]
	push	ecx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T63560[ebp]
	push	edx
	call	??DOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T63561[ebp]
	push	eax
	call	??KOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator/
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _vP0$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63562[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _vOut$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 219  : 			return true;

	mov	al, 1
$LN2@segmentInt:

; 220  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?segmentIntersec@Plane@Ogre@@QBE_NAAVVector3@2@ABV32@1@Z ENDP ; Ogre::Plane::segmentIntersec
_TEXT	ENDS
PUBLIC	_fabsf
PUBLIC	?segmentSide@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@0M@Z ; Ogre::Plane::segmentSide
; Function compile flags: /Odtp
;	COMDAT ?segmentSide@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@0M@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_dFm$ = -8						; size = 4
_dTo$ = -4						; size = 4
_fm$ = 8						; size = 4
_to$ = 12						; size = 4
_radius$ = 16						; size = 4
?segmentSide@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@0M@Z PROC ; Ogre::Plane::segmentSide, COMDAT
; _this$ = ecx

; 223  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 224  : 			assert(isValid());
; 225  : 
; 226  : 			const float dFm = distanceToPoint(fm);

	mov	eax, DWORD PTR _fm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ; Ogre::Plane::distanceToPoint
	fstp	DWORD PTR _dFm$[ebp]

; 227  : 			const float dTo = distanceToPoint(to);

	mov	ecx, DWORD PTR _to$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?distanceToPoint@Plane@Ogre@@QBEMABVVector3@2@@Z ; Ogre::Plane::distanceToPoint
	fstp	DWORD PTR _dTo$[ebp]

; 228  : 
; 229  : 			if ( fabsf(dFm) <= EPSILON && fabsf(dTo) <= EPSILON )

	push	ecx
	fld	DWORD PTR _dFm$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fld	DWORD PTR _EPSILON
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN6@segmentSid
	push	ecx
	fld	DWORD PTR _dTo$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fld	DWORD PTR _EPSILON
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN6@segmentSid

; 230  : 			{
; 231  : 				return ON;

	mov	eax, 3
	jmp	SHORT $LN1@segmentSid
	jmp	SHORT $LN1@segmentSid
$LN6@segmentSid:

; 232  : 			}
; 233  : 			else if ( dFm < -radius && dTo < -radius )

	fld	DWORD PTR _radius$[ebp]
	fchs
	fld	DWORD PTR _dFm$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@segmentSid
	fld	DWORD PTR _radius$[ebp]
	fchs
	fld	DWORD PTR _dTo$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@segmentSid

; 234  : 			{
; 235  : 				return BACK;

	mov	eax, 1
	jmp	SHORT $LN1@segmentSid
	jmp	SHORT $LN1@segmentSid
$LN4@segmentSid:

; 236  : 			}
; 237  : 			else if ( dFm >  radius && dTo >  radius )

	fld	DWORD PTR _dFm$[ebp]
	fld	DWORD PTR _radius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@segmentSid
	fld	DWORD PTR _dTo$[ebp]
	fld	DWORD PTR _radius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@segmentSid

; 238  : 			{
; 239  : 				return FRONT;

	xor	eax, eax
	jmp	SHORT $LN1@segmentSid

; 240  : 			}
; 241  : 			else

	jmp	SHORT $LN1@segmentSid
$LN2@segmentSid:

; 242  : 			{
; 243  : 				return INTERSECT;

	mov	eax, 2
$LN1@segmentSid:

; 244  : 			}
; 245  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?segmentSide@Plane@Ogre@@QBE?AW4ESIDE_T@12@ABVVector3@2@0M@Z ENDP ; Ogre::Plane::segmentSide
_TEXT	ENDS
EXTRN	_fabs:PROC
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 384  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
PUBLIC	?getVec4@Plane@Ogre@@QBEABVVector4@2@XZ		; Ogre::Plane::getVec4
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreplane.h
;	COMDAT ?getVec4@Plane@Ogre@@QBEABVVector4@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVec4@Plane@Ogre@@QBEABVVector4@2@XZ PROC		; Ogre::Plane::getVec4, COMDAT
; _this$ = ecx

; 251  : 		{ return *((Vector4 *)&m_normal); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getVec4@Plane@Ogre@@QBEABVVector4@2@XZ ENDP		; Ogre::Plane::getVec4
_TEXT	ENDS
PUBLIC	?getNormal@Plane@Ogre@@QBEABVVector3@2@XZ	; Ogre::Plane::getNormal
; Function compile flags: /Odtp
;	COMDAT ?getNormal@Plane@Ogre@@QBEABVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNormal@Plane@Ogre@@QBEABVVector3@2@XZ PROC		; Ogre::Plane::getNormal, COMDAT
; _this$ = ecx

; 254  : 		{ return m_normal; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getNormal@Plane@Ogre@@QBEABVVector3@2@XZ ENDP		; Ogre::Plane::getNormal
_TEXT	ENDS
PUBLIC	?getOffset@Plane@Ogre@@QBE?BMXZ			; Ogre::Plane::getOffset
; Function compile flags: /Odtp
;	COMDAT ?getOffset@Plane@Ogre@@QBE?BMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getOffset@Plane@Ogre@@QBE?BMXZ PROC			; Ogre::Plane::getOffset, COMDAT
; _this$ = ecx

; 257  : 		{ return(m_offset); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?getOffset@Plane@Ogre@@QBE?BMXZ ENDP			; Ogre::Plane::getOffset
_TEXT	ENDS
PUBLIC	??0Plane@Ogre@@QAE@ABV01@@Z			; Ogre::Plane::Plane
; Function compile flags: /Odtp
;	COMDAT ??0Plane@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Plane@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Plane::Plane, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [edx+12]
	fstp	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Plane@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Plane::Plane
_TEXT	ENDS
PUBLIC	??4Plane@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Plane::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Plane@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Plane@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Plane::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [edx+12]
	fstp	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Plane@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Plane::operator=
_TEXT	ENDS
PUBLIC	??0WorldPlane@Ogre@@QAE@XZ			; Ogre::WorldPlane::WorldPlane
; Function compile flags: /Odtp
;	COMDAT ??0WorldPlane@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0WorldPlane@Ogre@@QAE@XZ PROC				; Ogre::WorldPlane::WorldPlane, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0WorldPos@Ogre@@QAE@XZ		; Ogre::WorldPos::WorldPos
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0WorldPlane@Ogre@@QAE@XZ ENDP				; Ogre::WorldPlane::WorldPlane
_TEXT	ENDS
PUBLIC	??0WorldPlane@Ogre@@QAE@ABV01@@Z		; Ogre::WorldPlane::WorldPlane
; Function compile flags: /Odtp
;	COMDAT ??0WorldPlane@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0WorldPlane@Ogre@@QAE@ABV01@@Z PROC			; Ogre::WorldPlane::WorldPlane, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0WorldPlane@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::WorldPlane::WorldPlane
_TEXT	ENDS
PUBLIC	??4WorldPlane@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::WorldPlane::operator=
; Function compile flags: /Odtp
;	COMDAT ??4WorldPlane@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4WorldPlane@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::WorldPlane::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4WorldPlane@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::WorldPlane::operator=
_TEXT	ENDS
PUBLIC	?intersectHorizon@Ray@Ogre@@QBE_NMPAM@Z		; Ogre::Ray::intersectHorizon
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreray.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_t$ = -4						; size = 4
_y$ = 8							; size = 4
_pt$ = 12						; size = 4
?intersectHorizon@Ray@Ogre@@QBE_NMPAM@Z PROC		; Ogre::Ray::intersectHorizon
; _this$ = ecx

; 9    : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 10   : 		if( m_Dir.y == 0 ) return false;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@intersectH
	xor	al, al
	jmp	SHORT $LN5@intersectH
$LN4@intersectH:

; 11   : 
; 12   : 		float t = (y-m_Origin.y) / m_Dir.y;

	fld	DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [edx+16]
	fstp	DWORD PTR _t$[ebp]

; 13   : 		if( t<0 || t>m_Range ) return false;

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN2@intersectH
	fld	DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+24]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@intersectH
$LN2@intersectH:
	xor	al, al
	jmp	SHORT $LN5@intersectH
$LN3@intersectH:

; 14   : 
; 15   : 		if( pt ) *pt = t;

	cmp	DWORD PTR _pt$[ebp], 0
	je	SHORT $LN1@intersectH
	mov	ecx, DWORD PTR _pt$[ebp]
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [ecx]
$LN1@intersectH:

; 16   : 		return true;

	mov	al, 1
$LN5@intersectH:

; 17   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?intersectHorizon@Ray@Ogre@@QBE_NMPAM@Z ENDP		; Ogre::Ray::intersectHorizon
_TEXT	ENDS
PUBLIC	__real@3eb0c6f7a0b5ed8d
PUBLIC	?intersectPlane@Ray@Ogre@@QBE_NPBVPlane@2@PAM@Z	; Ogre::Ray::intersectPlane
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-006
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T63587 = -60						; size = 12
$T63586 = -48						; size = 12
_t$ = -36						; size = 4
_epsilon$ = -32						; size = 8
_normal$ = -20						; size = 4
_temp$ = -16						; size = 4
_vec$ = -12						; size = 12
_plane$ = 8						; size = 4
_pt$ = 12						; size = 4
?intersectPlane@Ray@Ogre@@QBE_NPBVPlane@2@PAM@Z PROC	; Ogre::Ray::intersectPlane
; _this$ = ecx

; 20   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 21   : 		const double epsilon = 0.000001;

	fld	QWORD PTR __real@3eb0c6f7a0b5ed8d
	fstp	QWORD PTR _epsilon$[ebp]

; 22   : 		const Vector3 &normal = plane->getNormal();

	mov	ecx, DWORD PTR _plane$[ebp]
	call	?getNormal@Plane@Ogre@@QBEABVVector3@2@XZ ; Ogre::Plane::getNormal
	mov	DWORD PTR _normal$[ebp], eax

; 23   : 
; 24   : 		float temp = DotProduct( m_Dir, normal );

	mov	eax, DWORD PTR _normal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fstp	DWORD PTR _temp$[ebp]

; 25   : 		if( temp<epsilon && temp>-epsilon ) return false;

	fld	DWORD PTR _temp$[ebp]
	fcomp	QWORD PTR _epsilon$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@intersectP
	fld	DWORD PTR _temp$[ebp]
	fld	QWORD PTR _epsilon$[ebp]
	fchs
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@intersectP
	xor	al, al
	jmp	$LN5@intersectP
$LN4@intersectP:

; 26   : 
; 27   : 		Vector3 vec = -normal*plane->getOffset() - m_Origin;

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _plane$[ebp]
	call	?getOffset@Plane@Ogre@@QBE?BMXZ		; Ogre::Plane::getOffset
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T63586[ebp]
	push	eax
	mov	ecx, DWORD PTR _normal$[ebp]
	call	??GVector3@Ogre@@QBE?AV01@XZ		; Ogre::Vector3::operator-
	push	eax
	lea	ecx, DWORD PTR $T63587[ebp]
	push	ecx
	call	??DOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _vec$[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH

; 28   : 		float t = DotProduct(vec, normal) / temp;

	mov	eax, DWORD PTR _normal$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fdiv	DWORD PTR _temp$[ebp]
	fstp	DWORD PTR _t$[ebp]

; 29   : 		if( t<0 || t>m_Range ) return false;

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN2@intersectP
	fld	DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+24]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@intersectP
$LN2@intersectP:
	xor	al, al
	jmp	SHORT $LN5@intersectP
$LN3@intersectP:

; 30   : 
; 31   : 		if( pt ) *pt = t;

	cmp	DWORD PTR _pt$[ebp], 0
	je	SHORT $LN1@intersectP
	mov	eax, DWORD PTR _pt$[ebp]
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [eax]
$LN1@intersectP:

; 32   : 		return true;

	mov	al, 1
$LN5@intersectP:

; 33   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?intersectPlane@Ray@Ogre@@QBE_NPBVPlane@2@PAM@Z ENDP	; Ogre::Ray::intersectPlane
_TEXT	ENDS
PUBLIC	?intersectBox@Ray@Ogre@@QBE_NPBVBoxBound@2@PAM@Z ; Ogre::Ray::intersectBox
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv246 = -112						; size = 4
tv192 = -108						; size = 4
tv138 = -104						; size = 4
_this$ = -100						; size = 4
$T63591 = -96						; size = 12
_t$58218 = -84						; size = 4
_z$58217 = -80						; size = 4
_x$58220 = -76						; size = 4
_y$58221 = -72						; size = 4
_t$58209 = -68						; size = 4
_z$58212 = -64						; size = 4
_y$58208 = -60						; size = 4
_x$58211 = -56						; size = 4
_t$58200 = -52						; size = 4
_z$58203 = -48						; size = 4
_x$58199 = -44						; size = 4
_y$58202 = -40						; size = 4
_origin$ = -36						; size = 12
_maxpt$ = -24						; size = 12
_minpt$ = -12						; size = 12
_pbox$ = 8						; size = 4
_pt$ = 12						; size = 4
?intersectBox@Ray@Ogre@@QBE_NPBVBoxBound@2@PAM@Z PROC	; Ogre::Ray::intersectBox
; _this$ = ecx

; 36   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	DWORD PTR _this$[ebp], ecx

; 37   : 		Vector3 origin = m_Origin - pbox->getCenter();

	lea	eax, DWORD PTR $T63591[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbox$[ebp]
	call	?getCenter@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getCenter
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR _origin$[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH

; 38   : 		Vector3 maxpt = pbox->getExtension();

	lea	eax, DWORD PTR _maxpt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbox$[ebp]
	call	?getExtension@BoxBound@Ogre@@QBE?AVVector3@2@XZ ; Ogre::BoxBound::getExtension

; 39   : 		Vector3 minpt = -maxpt;

	lea	ecx, DWORD PTR _minpt$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _maxpt$[ebp]
	call	??GVector3@Ogre@@QBE?AV01@XZ		; Ogre::Vector3::operator-

; 40   : 
; 41   : 		if( origin.x>=minpt.x && origin.x<=maxpt.x &&origin.y>=minpt.y && origin.y<=maxpt.y &&origin.z>=minpt.z && origin.z<=maxpt.z )

	fld	DWORD PTR _origin$[ebp]
	fld	DWORD PTR _minpt$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN17@intersectB@2
	fld	DWORD PTR _origin$[ebp]
	fld	DWORD PTR _maxpt$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN17@intersectB@2
	fld	DWORD PTR _origin$[ebp+4]
	fld	DWORD PTR _minpt$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN17@intersectB@2
	fld	DWORD PTR _origin$[ebp+4]
	fld	DWORD PTR _maxpt$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN17@intersectB@2
	fld	DWORD PTR _origin$[ebp+8]
	fld	DWORD PTR _minpt$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN17@intersectB@2
	fld	DWORD PTR _origin$[ebp+8]
	fld	DWORD PTR _maxpt$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN17@intersectB@2

; 42   : 		{
; 43   : 			if( pt ) *pt = 0;

	cmp	DWORD PTR _pt$[ebp], 0
	je	SHORT $LN16@intersectB@2
	mov	edx, DWORD PTR _pt$[ebp]
	fldz
	fstp	DWORD PTR [edx]
$LN16@intersectB@2:

; 44   : 			return true;

	mov	al, 1
	jmp	$LN18@intersectB@2
$LN17@intersectB@2:

; 45   : 		}
; 46   : 
; 47   : 		if( (origin.x<minpt.x || origin.x>maxpt.x) && m_Dir.x!=0 )

	fld	DWORD PTR _origin$[ebp]
	fld	DWORD PTR _minpt$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN14@intersectB@2
	fld	DWORD PTR _origin$[ebp]
	fld	DWORD PTR _maxpt$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	$LN12@intersectB@2
$LN14@intersectB@2:
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN12@intersectB@2

; 48   : 		{
; 49   : 			float x = origin.x<minpt.x ? minpt.x : maxpt.x;

	fld	DWORD PTR _origin$[ebp]
	fld	DWORD PTR _minpt$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN20@intersectB@2
	fld	DWORD PTR _minpt$[ebp]
	fstp	DWORD PTR tv138[ebp]
	jmp	SHORT $LN21@intersectB@2
$LN20@intersectB@2:
	fld	DWORD PTR _maxpt$[ebp]
	fstp	DWORD PTR tv138[ebp]
$LN21@intersectB@2:
	fld	DWORD PTR tv138[ebp]
	fstp	DWORD PTR _x$58199[ebp]

; 50   : 			float t = (x - origin.x) / m_Dir.x;

	fld	DWORD PTR _x$58199[ebp]
	fsub	DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx+12]
	fstp	DWORD PTR _t$58200[ebp]

; 51   : 			if( t < 0 ) return false;

	fld	DWORD PTR _t$58200[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN13@intersectB@2
	xor	al, al
	jmp	$LN18@intersectB@2
$LN13@intersectB@2:

; 52   : 
; 53   : 			float y = origin.y + t*m_Dir.y;

	fld	DWORD PTR _t$58200[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+16]
	fadd	DWORD PTR _origin$[ebp+4]
	fstp	DWORD PTR _y$58202[ebp]

; 54   : 			float z = origin.z + t*m_Dir.z;

	fld	DWORD PTR _t$58200[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+20]
	fadd	DWORD PTR _origin$[ebp+8]
	fstp	DWORD PTR _z$58203[ebp]

; 55   : 			if( y>minpt.y && y<maxpt.y && z>minpt.z && z<maxpt.z )

	fld	DWORD PTR _y$58202[ebp]
	fld	DWORD PTR _minpt$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN12@intersectB@2
	fld	DWORD PTR _y$58202[ebp]
	fld	DWORD PTR _maxpt$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN12@intersectB@2
	fld	DWORD PTR _z$58203[ebp]
	fld	DWORD PTR _minpt$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN12@intersectB@2
	fld	DWORD PTR _z$58203[ebp]
	fld	DWORD PTR _maxpt$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN12@intersectB@2

; 56   : 			{
; 57   : 				if( pt ) *pt = t;

	cmp	DWORD PTR _pt$[ebp], 0
	je	SHORT $LN11@intersectB@2
	mov	ecx, DWORD PTR _pt$[ebp]
	fld	DWORD PTR _t$58200[ebp]
	fstp	DWORD PTR [ecx]
$LN11@intersectB@2:

; 58   : 				return true;

	mov	al, 1
	jmp	$LN18@intersectB@2
$LN12@intersectB@2:

; 59   : 			}
; 60   : 		}
; 61   : 
; 62   : 		if( (origin.y<minpt.y || origin.y>maxpt.y) && m_Dir.y!=0 )

	fld	DWORD PTR _origin$[ebp+4]
	fld	DWORD PTR _minpt$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN9@intersectB@2
	fld	DWORD PTR _origin$[ebp+4]
	fld	DWORD PTR _maxpt$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	$LN7@intersectB@2
$LN9@intersectB@2:
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+16]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN7@intersectB@2

; 63   : 		{
; 64   : 			float y = origin.y<minpt.y ? minpt.y : maxpt.y;

	fld	DWORD PTR _origin$[ebp+4]
	fld	DWORD PTR _minpt$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN22@intersectB@2
	fld	DWORD PTR _minpt$[ebp+4]
	fstp	DWORD PTR tv192[ebp]
	jmp	SHORT $LN23@intersectB@2
$LN22@intersectB@2:
	fld	DWORD PTR _maxpt$[ebp+4]
	fstp	DWORD PTR tv192[ebp]
$LN23@intersectB@2:
	fld	DWORD PTR tv192[ebp]
	fstp	DWORD PTR _y$58208[ebp]

; 65   : 			float t = (y - origin.y) / m_Dir.y;

	fld	DWORD PTR _y$58208[ebp]
	fsub	DWORD PTR _origin$[ebp+4]
	mov	eax, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [eax+16]
	fstp	DWORD PTR _t$58209[ebp]

; 66   : 			if( t < 0 ) return false;

	fld	DWORD PTR _t$58209[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN8@intersectB@2
	xor	al, al
	jmp	$LN18@intersectB@2
$LN8@intersectB@2:

; 67   : 
; 68   : 			float x = origin.x + t*m_Dir.x;

	fld	DWORD PTR _t$58209[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	fadd	DWORD PTR _origin$[ebp]
	fstp	DWORD PTR _x$58211[ebp]

; 69   : 			float z = origin.z + t*m_Dir.z;

	fld	DWORD PTR _t$58209[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+20]
	fadd	DWORD PTR _origin$[ebp+8]
	fstp	DWORD PTR _z$58212[ebp]

; 70   : 			if( x>minpt.x && x<maxpt.x && z>minpt.z && z<maxpt.z )

	fld	DWORD PTR _x$58211[ebp]
	fld	DWORD PTR _minpt$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN7@intersectB@2
	fld	DWORD PTR _x$58211[ebp]
	fld	DWORD PTR _maxpt$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@intersectB@2
	fld	DWORD PTR _z$58212[ebp]
	fld	DWORD PTR _minpt$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN7@intersectB@2
	fld	DWORD PTR _z$58212[ebp]
	fld	DWORD PTR _maxpt$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@intersectB@2

; 71   : 			{
; 72   : 				if( pt ) *pt = t;

	cmp	DWORD PTR _pt$[ebp], 0
	je	SHORT $LN6@intersectB@2
	mov	eax, DWORD PTR _pt$[ebp]
	fld	DWORD PTR _t$58209[ebp]
	fstp	DWORD PTR [eax]
$LN6@intersectB@2:

; 73   : 				return true;

	mov	al, 1
	jmp	$LN18@intersectB@2
$LN7@intersectB@2:

; 74   : 			}
; 75   : 		}
; 76   : 
; 77   : 		if( (origin.z<minpt.z || origin.z>maxpt.z) && m_Dir.z!=0 )

	fld	DWORD PTR _origin$[ebp+8]
	fld	DWORD PTR _minpt$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN4@intersectB@2
	fld	DWORD PTR _origin$[ebp+8]
	fld	DWORD PTR _maxpt$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	$LN2@intersectB@2
$LN4@intersectB@2:
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+20]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN2@intersectB@2

; 78   : 		{
; 79   : 			float z = origin.z<minpt.z ? minpt.z : maxpt.z;

	fld	DWORD PTR _origin$[ebp+8]
	fld	DWORD PTR _minpt$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN24@intersectB@2
	fld	DWORD PTR _minpt$[ebp+8]
	fstp	DWORD PTR tv246[ebp]
	jmp	SHORT $LN25@intersectB@2
$LN24@intersectB@2:
	fld	DWORD PTR _maxpt$[ebp+8]
	fstp	DWORD PTR tv246[ebp]
$LN25@intersectB@2:
	fld	DWORD PTR tv246[ebp]
	fstp	DWORD PTR _z$58217[ebp]

; 80   : 			float t = (z - origin.z) / m_Dir.z;

	fld	DWORD PTR _z$58217[ebp]
	fsub	DWORD PTR _origin$[ebp+8]
	mov	edx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [edx+20]
	fstp	DWORD PTR _t$58218[ebp]

; 81   : 			if( t < 0 ) return false;

	fld	DWORD PTR _t$58218[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@intersectB@2
	xor	al, al
	jmp	SHORT $LN18@intersectB@2
$LN3@intersectB@2:

; 82   : 
; 83   : 			float x = origin.x + t*m_Dir.x;

	fld	DWORD PTR _t$58218[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+12]
	fadd	DWORD PTR _origin$[ebp]
	fstp	DWORD PTR _x$58220[ebp]

; 84   : 			float y = origin.y + t*m_Dir.y;

	fld	DWORD PTR _t$58218[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	fadd	DWORD PTR _origin$[ebp+4]
	fstp	DWORD PTR _y$58221[ebp]

; 85   : 			if( x>minpt.x && x<maxpt.x && y>minpt.y && y<maxpt.y )

	fld	DWORD PTR _x$58220[ebp]
	fld	DWORD PTR _minpt$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@intersectB@2
	fld	DWORD PTR _x$58220[ebp]
	fld	DWORD PTR _maxpt$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@intersectB@2
	fld	DWORD PTR _y$58221[ebp]
	fld	DWORD PTR _minpt$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@intersectB@2
	fld	DWORD PTR _y$58221[ebp]
	fld	DWORD PTR _maxpt$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@intersectB@2

; 86   : 			{
; 87   : 				if( pt ) *pt = t;

	cmp	DWORD PTR _pt$[ebp], 0
	je	SHORT $LN1@intersectB@2
	mov	edx, DWORD PTR _pt$[ebp]
	fld	DWORD PTR _t$58218[ebp]
	fstp	DWORD PTR [edx]
$LN1@intersectB@2:

; 88   : 				return true;

	mov	al, 1
	jmp	SHORT $LN18@intersectB@2
$LN2@intersectB@2:

; 89   : 			}
; 90   : 		}
; 91   : 
; 92   : 		return false;

	xor	al, al
$LN18@intersectB@2:

; 93   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?intersectBox@Ray@Ogre@@QBE_NPBVBoxBound@2@PAM@Z ENDP	; Ogre::Ray::intersectBox
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	?intersectSphere@Ray@Ogre@@QBE_NPBVSphereBound@2@PAM@Z ; Ogre::Ray::intersectSphere
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
tv236 = -64						; size = 8
tv234 = -56						; size = 8
_this$ = -48						; size = 4
_inv_a$58240 = -44					; size = 4
_root$58239 = -40					; size = 4
_diff$ = -36						; size = 12
_t$ = -24						; size = 8
_c$ = -16						; size = 4
_b$ = -12						; size = 4
_discr$ = -8						; size = 4
_a$ = -4						; size = 4
_sphere$ = 8						; size = 4
_pt$ = 12						; size = 4
?intersectSphere@Ray@Ogre@@QBE_NPBVSphereBound@2@PAM@Z PROC ; Ogre::Ray::intersectSphere
; _this$ = ecx

; 96   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 		Vector3 diff = m_Origin - sphere->getCenter();

	mov	ecx, DWORD PTR _sphere$[ebp]
	call	?getCenter@SphereBound@Ogre@@QBEABVVector3@2@XZ ; Ogre::SphereBound::getCenter
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _diff$[ebp]
	push	ecx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH

; 98   : 		float a = m_Dir.lengthSqr();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?lengthSqr@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::lengthSqr
	fstp	DWORD PTR _a$[ebp]

; 99   : 		float b = DotProduct(diff, m_Dir);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	lea	eax, DWORD PTR _diff$[ebp]
	push	eax
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fstp	DWORD PTR _b$[ebp]

; 100  : 		float c = diff.lengthSqr() - sphere->getRadius()*sphere->getRadius();

	lea	ecx, DWORD PTR _diff$[ebp]
	call	?lengthSqr@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::lengthSqr
	mov	ecx, DWORD PTR _sphere$[ebp]
	fstp	QWORD PTR tv234[ebp]
	call	?getRadius@SphereBound@Ogre@@QBEMXZ	; Ogre::SphereBound::getRadius
	mov	ecx, DWORD PTR _sphere$[ebp]
	fstp	QWORD PTR tv236[ebp]
	call	?getRadius@SphereBound@Ogre@@QBEMXZ	; Ogre::SphereBound::getRadius
	fmul	QWORD PTR tv236[ebp]
	fsubr	QWORD PTR tv234[ebp]
	fstp	DWORD PTR _c$[ebp]

; 101  : 
; 102  : 		float t[2];
; 103  : 		float discr = b*b - a*c;

	fld	DWORD PTR _b$[ebp]
	fmul	DWORD PTR _b$[ebp]
	fld	DWORD PTR _a$[ebp]
	fmul	DWORD PTR _c$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _discr$[ebp]

; 104  : 		if(discr < 0)

	fld	DWORD PTR _discr$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN13@intersectS

; 105  : 		{
; 106  : 			return false;

	xor	al, al
	jmp	$LN14@intersectS
	jmp	$LN1@intersectS
$LN13@intersectS:

; 107  : 		}
; 108  : 		else if(discr > 0)

	fld	DWORD PTR _discr$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN11@intersectS

; 109  : 		{
; 110  : 			float root = Sqrt(discr);

	push	ecx
	fld	DWORD PTR _discr$[ebp]
	fstp	DWORD PTR [esp]
	call	?Sqrt@Ogre@@YAMM@Z			; Ogre::Sqrt
	add	esp, 4
	fstp	DWORD PTR _root$58239[ebp]

; 111  : 			float inv_a = 1.0f/a;

	fld	DWORD PTR _a$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _inv_a$58240[ebp]

; 112  : 			t[0] = (-b - root)*inv_a;

	fld	DWORD PTR _b$[ebp]
	fchs
	fsub	DWORD PTR _root$58239[ebp]
	fmul	DWORD PTR _inv_a$58240[ebp]
	fstp	DWORD PTR _t$[ebp]

; 113  : 			t[1] = (-b + root)*inv_a;

	fld	DWORD PTR _b$[ebp]
	fchs
	fadd	DWORD PTR _root$58239[ebp]
	fmul	DWORD PTR _inv_a$58240[ebp]
	fstp	DWORD PTR _t$[ebp+4]

; 114  : 
; 115  : 			if(t[1] < 0)

	fld	DWORD PTR _t$[ebp+4]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN10@intersectS

; 116  : 			{
; 117  : 				return false;

	xor	al, al
	jmp	SHORT $LN14@intersectS
	jmp	SHORT $LN5@intersectS
$LN10@intersectS:

; 118  : 			}
; 119  : 			else if(t[0] >= 0)

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN8@intersectS

; 120  : 			{
; 121  : 				if(pt) *pt = t[0];

	cmp	DWORD PTR _pt$[ebp], 0
	je	SHORT $LN7@intersectS
	mov	ecx, DWORD PTR _pt$[ebp]
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [ecx]
$LN7@intersectS:

; 122  : 			}
; 123  : 			else

	jmp	SHORT $LN5@intersectS
$LN8@intersectS:

; 124  : 			{
; 125  : 				if(pt) *pt = t[1];

	cmp	DWORD PTR _pt$[ebp], 0
	je	SHORT $LN5@intersectS
	mov	edx, DWORD PTR _pt$[ebp]
	fld	DWORD PTR _t$[ebp+4]
	fstp	DWORD PTR [edx]
$LN5@intersectS:

; 126  : 			}
; 127  : 		}
; 128  : 		else

	jmp	SHORT $LN1@intersectS
$LN11@intersectS:

; 129  : 		{
; 130  : 			t[0] = -b/a;

	fld	DWORD PTR _b$[ebp]
	fchs
	fdiv	DWORD PTR _a$[ebp]
	fstp	DWORD PTR _t$[ebp]

; 131  : 			if(t[0] >= 0)

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@intersectS

; 132  : 			{
; 133  : 				if(pt) *pt = t[0];

	cmp	DWORD PTR _pt$[ebp], 0
	je	SHORT $LN2@intersectS
	mov	eax, DWORD PTR _pt$[ebp]
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [eax]
$LN2@intersectS:

; 134  : 			}

	jmp	SHORT $LN1@intersectS
$LN3@intersectS:

; 135  : 			else return false;

	xor	al, al
	jmp	SHORT $LN14@intersectS
$LN1@intersectS:

; 136  : 		}
; 137  : 
; 138  : 		return true;

	mov	al, 1
$LN14@intersectS:

; 139  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?intersectSphere@Ray@Ogre@@QBE_NPBVSphereBound@2@PAM@Z ENDP ; Ogre::Ray::intersectSphere
_TEXT	ENDS
PUBLIC	?intersectBoxSphere@Ray@Ogre@@QBE_NPBVBoxSphereBound@2@PAM@Z ; Ogre::Ray::intersectBoxSphere
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -32						; size = 4
_box$ = -28						; size = 28
_pboxsphere$ = 8					; size = 4
_pt$ = 12						; size = 4
?intersectBoxSphere@Ray@Ogre@@QBE_NPBVBoxSphereBound@2@PAM@Z PROC ; Ogre::Ray::intersectBoxSphere
; _this$ = ecx

; 142  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 		BoxBound box = pboxsphere->getBox();

	lea	eax, DWORD PTR _box$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pboxsphere$[ebp]
	call	?getBox@BoxSphereBound@Ogre@@QBE?AVBoxBound@2@XZ ; Ogre::BoxSphereBound::getBox

; 144  : 
; 145  : 		return intersectBox(&box, NULL);

	push	0
	lea	ecx, DWORD PTR _box$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?intersectBox@Ray@Ogre@@QBE_NPBVBoxBound@2@PAM@Z ; Ogre::Ray::intersectBox

; 146  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?intersectBoxSphere@Ray@Ogre@@QBE_NPBVBoxSphereBound@2@PAM@Z ENDP ; Ogre::Ray::intersectBoxSphere
_TEXT	ENDS
PUBLIC	?CrossProduct@Ogre@@YA?AVVector3@1@ABV21@0@Z	; Ogre::CrossProduct
PUBLIC	?intersectTriangle@Ray@Ogre@@QBE_NABVVector3@2@00PAM@Z ; Ogre::Ray::intersectTriangle
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -140						; size = 4
$T63607 = -136						; size = 12
$T63606 = -124						; size = 12
$T63605 = -112						; size = 12
$T63604 = -100						; size = 12
$T63603 = -88						; size = 12
_t$ = -76						; size = 4
_E1$ = -72						; size = 12
_r$ = -60						; size = 4
_E2$ = -56						; size = 12
_S$ = -44						; size = 12
_u$ = -32						; size = 4
_P$ = -28						; size = 12
_Q$ = -16						; size = 12
_v$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_v3$ = 16						; size = 4
_pt$ = 20						; size = 4
?intersectTriangle@Ray@Ogre@@QBE_NABVVector3@2@00PAM@Z PROC ; Ogre::Ray::intersectTriangle
; _this$ = ecx

; 156  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	mov	DWORD PTR _this$[ebp], ecx

; 157  : 		Vector3 E1, E2, S, P, Q;

	lea	ecx, DWORD PTR _E1$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	lea	ecx, DWORD PTR _E2$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	lea	ecx, DWORD PTR _S$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	lea	ecx, DWORD PTR _P$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	lea	ecx, DWORD PTR _Q$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3

; 158  : 		E1 = v2 - v1;

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63603[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _E1$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 159  : 		E2 = v3 - v1;

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v3$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63604[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _E2$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 160  : 		S = m_Origin - v1;

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63605[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _S$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 161  : 
; 162  : 		P = CrossProduct( m_Dir, E2 );

	lea	eax, DWORD PTR _E2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T63606[ebp]
	push	edx
	call	?CrossProduct@Ogre@@YA?AVVector3@1@ABV21@0@Z ; Ogre::CrossProduct
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _P$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 163  : 		Q = CrossProduct( S, E1 );

	lea	eax, DWORD PTR _E1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _S$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63607[ebp]
	push	edx
	call	?CrossProduct@Ogre@@YA?AVVector3@1@ABV21@0@Z ; Ogre::CrossProduct
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _Q$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 164  : 
; 165  : 		float r = DotProduct( P, E1 );

	lea	eax, DWORD PTR _E1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _P$[ebp]
	push	ecx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fstp	DWORD PTR _r$[ebp]

; 166  : 		if( r == 0 ) return false;

	fld	DWORD PTR _r$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@intersectT
	xor	al, al
	jmp	$LN6@intersectT
$LN5@intersectT:

; 167  : 		r = 1.0f / r;

	fld	DWORD PTR _r$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _r$[ebp]

; 168  : 
; 169  : 		//if( t < 0 ) not intersect ray but intersect line
; 170  : 		float t = DotProduct(Q, E2) * r;

	lea	edx, DWORD PTR _E2$[ebp]
	push	edx
	lea	eax, DWORD PTR _Q$[ebp]
	push	eax
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fmul	DWORD PTR _r$[ebp]
	fstp	DWORD PTR _t$[ebp]

; 171  : 		if( t<0 || t>m_Range ) return false;

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN3@intersectT
	fld	DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+24]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@intersectT
$LN3@intersectT:
	xor	al, al
	jmp	SHORT $LN6@intersectT
$LN4@intersectT:

; 172  : 
; 173  : 		float u = DotProduct(P, S) * r;

	lea	edx, DWORD PTR _S$[ebp]
	push	edx
	lea	eax, DWORD PTR _P$[ebp]
	push	eax
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fmul	DWORD PTR _r$[ebp]
	fstp	DWORD PTR _u$[ebp]

; 174  : 		float v = DotProduct(Q, m_Dir) * r;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR _Q$[ebp]
	push	edx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fmul	DWORD PTR _r$[ebp]
	fstp	DWORD PTR _v$[ebp]

; 175  : 
; 176  : 		if( u>=0 && v>=0 && u+v<=1.0f )

	fld	DWORD PTR _u$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN2@intersectT
	fld	DWORD PTR _v$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN2@intersectT
	fld	DWORD PTR _u$[ebp]
	fadd	DWORD PTR _v$[ebp]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN2@intersectT

; 177  : 		{
; 178  : 			if( pt ) *pt = t;

	cmp	DWORD PTR _pt$[ebp], 0
	je	SHORT $LN1@intersectT
	mov	eax, DWORD PTR _pt$[ebp]
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [eax]
$LN1@intersectT:

; 179  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@intersectT
$LN2@intersectT:

; 180  : 		}
; 181  : 		return false;

	xor	al, al
$LN6@intersectT:

; 182  : 	}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?intersectTriangle@Ray@Ogre@@QBE_NABVVector3@2@00PAM@Z ENDP ; Ogre::Ray::intersectTriangle
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ?CrossProduct@Ogre@@YA?AVVector3@1@ABV21@0@Z
_TEXT	SEGMENT
tv146 = -12						; size = 4
tv141 = -8						; size = 4
tv136 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?CrossProduct@Ogre@@YA?AVVector3@1@ABV21@0@Z PROC	; Ogre::CrossProduct, COMDAT

; 268  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 269  : 		return Vector3(v1.y*v2.z-v1.z*v2.y, v1.z*v2.x-v1.x*v2.z, v1.x*v2.y-v1.y*v2.x);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv136[ebp]
	fld	DWORD PTR tv136[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [edx]
	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [ecx+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv141[ebp]
	fld	DWORD PTR tv141[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [edx+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv146[ebp]
	fld	DWORD PTR tv146[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 270  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?CrossProduct@Ogre@@YA?AVVector3@1@ABV21@0@Z ENDP	; Ogre::CrossProduct
_TEXT	ENDS
PUBLIC	?intersectQuad@Ray@Ogre@@QBE_NABVVector3@2@00PAM@Z ; Ogre::Ray::intersectQuad
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreray.cpp
_TEXT	SEGMENT
_this$ = -140						; size = 4
$T63615 = -136						; size = 12
$T63614 = -124						; size = 12
$T63613 = -112						; size = 12
$T63612 = -100						; size = 12
$T63611 = -88						; size = 12
_t$ = -76						; size = 4
_E1$ = -72						; size = 12
_r$ = -60						; size = 4
_E2$ = -56						; size = 12
_S$ = -44						; size = 12
_u$ = -32						; size = 4
_P$ = -28						; size = 12
_Q$ = -16						; size = 12
_v$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_v3$ = 16						; size = 4
_pt$ = 20						; size = 4
?intersectQuad@Ray@Ogre@@QBE_NABVVector3@2@00PAM@Z PROC	; Ogre::Ray::intersectQuad
; _this$ = ecx

; 188  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	mov	DWORD PTR _this$[ebp], ecx

; 189  : 		Vector3 E1, E2, S, P, Q;

	lea	ecx, DWORD PTR _E1$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	lea	ecx, DWORD PTR _E2$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	lea	ecx, DWORD PTR _S$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	lea	ecx, DWORD PTR _P$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	lea	ecx, DWORD PTR _Q$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3

; 190  : 		E1 = v2-v1;

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63611[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _E1$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 191  : 		E2 = v3-v1;

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v3$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63612[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _E2$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 192  : 		S = m_Origin-v1;

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63613[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _S$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 193  : 
; 194  : 		P = CrossProduct( m_Dir, E2 );

	lea	eax, DWORD PTR _E2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T63614[ebp]
	push	edx
	call	?CrossProduct@Ogre@@YA?AVVector3@1@ABV21@0@Z ; Ogre::CrossProduct
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _P$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 195  : 		Q = CrossProduct( S, E1 );

	lea	eax, DWORD PTR _E1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _S$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63615[ebp]
	push	edx
	call	?CrossProduct@Ogre@@YA?AVVector3@1@ABV21@0@Z ; Ogre::CrossProduct
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _Q$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 196  : 
; 197  : 		float r = DotProduct( P, E1 );

	lea	eax, DWORD PTR _E1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _P$[ebp]
	push	ecx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fstp	DWORD PTR _r$[ebp]

; 198  : 		if( r == 0 ) return false;

	fld	DWORD PTR _r$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@intersectQ
	xor	al, al
	jmp	$LN5@intersectQ
$LN4@intersectQ:

; 199  : 		r = 1.0f / r;

	fld	DWORD PTR _r$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _r$[ebp]

; 200  : 
; 201  : 		//if( t < 0 ) not intersect ray but intersect line
; 202  : 		float t = DotProduct(Q, E2) * r;

	lea	edx, DWORD PTR _E2$[ebp]
	push	edx
	lea	eax, DWORD PTR _Q$[ebp]
	push	eax
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fmul	DWORD PTR _r$[ebp]
	fstp	DWORD PTR _t$[ebp]

; 203  : 		if( t<0 && t>m_Range ) return false;

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@intersectQ
	fld	DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+24]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@intersectQ
	xor	al, al
	jmp	$LN5@intersectQ
$LN3@intersectQ:

; 204  : 
; 205  : 		float u = DotProduct(P, S) * r;

	lea	edx, DWORD PTR _S$[ebp]
	push	edx
	lea	eax, DWORD PTR _P$[ebp]
	push	eax
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fmul	DWORD PTR _r$[ebp]
	fstp	DWORD PTR _u$[ebp]

; 206  : 		float v = DotProduct(Q, m_Dir) * r;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR _Q$[ebp]
	push	edx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fmul	DWORD PTR _r$[ebp]
	fstp	DWORD PTR _v$[ebp]

; 207  : 
; 208  : 		if( u>=0 && v>=0 && u<=1.0f && v<=1.0f )

	fld	DWORD PTR _u$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN2@intersectQ
	fld	DWORD PTR _v$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN2@intersectQ
	fld	DWORD PTR _u$[ebp]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN2@intersectQ
	fld	DWORD PTR _v$[ebp]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN2@intersectQ

; 209  : 		{
; 210  : 			if( pt ) *pt = t;

	cmp	DWORD PTR _pt$[ebp], 0
	je	SHORT $LN1@intersectQ
	mov	eax, DWORD PTR _pt$[ebp]
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [eax]
$LN1@intersectQ:

; 211  : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@intersectQ
$LN2@intersectQ:

; 212  : 		}
; 213  : 		return false;

	xor	al, al
$LN5@intersectQ:

; 214  : 	}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?intersectQuad@Ray@Ogre@@QBE_NABVVector3@2@00PAM@Z ENDP	; Ogre::Ray::intersectQuad
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__real@4000000000000000
PUBLIC	?SqrDistance@Ogre@@YAMABVRay@1@ABUSegment@1@PAM2@Z ; Ogre::SqrDistance
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
$T63617 = -64						; size = 4
_fInvDet$58344 = -60					; size = 4
_fT$ = -56						; size = 4
_fA01$ = -52						; size = 4
_fB0$ = -48						; size = 4
_fA11$ = -44						; size = 4
_fB1$ = -40						; size = 4
_fA00$ = -36						; size = 4
_fDet$ = -32						; size = 4
_fC$ = -28						; size = 4
_fTmp$ = -24						; size = 4
_kDiff$ = -20						; size = 12
_fS$ = -8						; size = 4
_fSqrDist$ = -4						; size = 4
_rkRay$ = 8						; size = 4
_rkSeg$ = 12						; size = 4
_pfRayP$ = 16						; size = 4
_pfSegP$ = 20						; size = 4
?SqrDistance@Ogre@@YAMABVRay@1@ABUSegment@1@PAM2@Z PROC	; Ogre::SqrDistance

; 222  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 223  : 		Vector3 kDiff = rkRay.m_Origin - rkSeg.m_Origin;

	mov	eax, DWORD PTR _rkSeg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rkRay$[ebp]
	push	ecx
	lea	edx, DWORD PTR _kDiff$[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH

; 224  : 		float fA00 = rkRay.m_Dir.lengthSqr();

	mov	ecx, DWORD PTR _rkRay$[ebp]
	add	ecx, 12					; 0000000cH
	call	?lengthSqr@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::lengthSqr
	fstp	DWORD PTR _fA00$[ebp]

; 225  : 		float fA01 = -DotProduct(rkRay.m_Dir, rkSeg.m_Dir);

	mov	eax, DWORD PTR _rkSeg$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _rkRay$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fchs
	fstp	DWORD PTR _fA01$[ebp]

; 226  : 		float fA11 = rkSeg.m_Dir.lengthSqr();

	mov	ecx, DWORD PTR _rkSeg$[ebp]
	add	ecx, 12					; 0000000cH
	call	?lengthSqr@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::lengthSqr
	fstp	DWORD PTR _fA11$[ebp]

; 227  : 		float fB0 = DotProduct(kDiff, rkRay.m_Dir);

	mov	edx, DWORD PTR _rkRay$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	lea	eax, DWORD PTR _kDiff$[ebp]
	push	eax
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fstp	DWORD PTR _fB0$[ebp]

; 228  : 		float fC = kDiff.lengthSqr();

	lea	ecx, DWORD PTR _kDiff$[ebp]
	call	?lengthSqr@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::lengthSqr
	fstp	DWORD PTR _fC$[ebp]

; 229  : 		float fDet = Abs(fA00*fA11-fA01*fA01);

	fld	DWORD PTR _fA00$[ebp]
	fmul	DWORD PTR _fA11$[ebp]
	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fA01$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR $T63617[ebp]
	lea	ecx, DWORD PTR $T63617[ebp]
	push	ecx
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	add	esp, 4
	fstp	DWORD PTR _fDet$[ebp]

; 230  : 		float fB1, fS, fT, fSqrDist, fTmp;
; 231  : 
; 232  : 		if ( fDet >= EPSILON )

	fld	DWORD PTR _fDet$[ebp]
	fld	DWORD PTR _EPSILON
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$LN40@SqrDistanc

; 233  : 		{
; 234  : 			// ray and segment are not parallel
; 235  : 			fB1 = -DotProduct(kDiff, rkSeg.m_Dir);

	mov	edx, DWORD PTR _rkSeg$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	lea	eax, DWORD PTR _kDiff$[ebp]
	push	eax
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fchs
	fstp	DWORD PTR _fB1$[ebp]

; 236  : 			fS = fA01*fB1-fA11*fB0;

	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fB1$[ebp]
	fld	DWORD PTR _fA11$[ebp]
	fmul	DWORD PTR _fB0$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _fS$[ebp]

; 237  : 			fT = fA01*fB0-fA00*fB1;

	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fB0$[ebp]
	fld	DWORD PTR _fA00$[ebp]
	fmul	DWORD PTR _fB1$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _fT$[ebp]

; 238  : 
; 239  : 			if ( fS >= (float)0.0 )

	fld	DWORD PTR _fS$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	$LN39@SqrDistanc

; 240  : 			{
; 241  : 				if ( fT >= (float)0.0 )

	fld	DWORD PTR _fT$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	$LN38@SqrDistanc

; 242  : 				{
; 243  : 					if ( fT <= fDet )  // region 0

	fld	DWORD PTR _fT$[ebp]
	fld	DWORD PTR _fDet$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN37@SqrDistanc

; 244  : 					{
; 245  : 						// minimum at interior points of ray and segment
; 246  : 						float fInvDet = ((float)1.0)/fDet;

	fld	DWORD PTR _fDet$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _fInvDet$58344[ebp]

; 247  : 						fS *= fInvDet;

	fld	DWORD PTR _fS$[ebp]
	fmul	DWORD PTR _fInvDet$58344[ebp]
	fstp	DWORD PTR _fS$[ebp]

; 248  : 						fT *= fInvDet;

	fld	DWORD PTR _fT$[ebp]
	fmul	DWORD PTR _fInvDet$58344[ebp]
	fstp	DWORD PTR _fT$[ebp]

; 249  : 						fSqrDist = fS*(fA00*fS+fA01*fT+((float)2.0)*fB0) +
; 250  : 							fT*(fA01*fS+fA11*fT+((float)2.0)*fB1)+fC;

	fld	DWORD PTR _fA00$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _fB0$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _fS$[ebp]
	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fld	DWORD PTR _fA11$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _fT$[ebp]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]

; 251  : 					}
; 252  : 					else  // region 1

	jmp	SHORT $LN34@SqrDistanc
$LN37@SqrDistanc:

; 253  : 					{
; 254  : 						fT = (float)1.0;

	fld1
	fstp	DWORD PTR _fT$[ebp]

; 255  : 						if ( fB0 >= -fA01 )

	fld	DWORD PTR _fA01$[ebp]
	fchs
	fld	DWORD PTR _fB0$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN35@SqrDistanc

; 256  : 						{
; 257  : 							fS = (float)0.0;

	fldz
	fstp	DWORD PTR _fS$[ebp]

; 258  : 							fSqrDist = fA11+((float)2.0)*fB1+fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR _fA11$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]

; 259  : 						}
; 260  : 						else

	jmp	SHORT $LN34@SqrDistanc
$LN35@SqrDistanc:

; 261  : 						{
; 262  : 							fTmp = fA01 + fB0;

	fld	DWORD PTR _fA01$[ebp]
	fadd	DWORD PTR _fB0$[ebp]
	fstp	DWORD PTR _fTmp$[ebp]

; 263  : 							fS = -fTmp/fA00;

	fld	DWORD PTR _fTmp$[ebp]
	fchs
	fdiv	DWORD PTR _fA00$[ebp]
	fstp	DWORD PTR _fS$[ebp]

; 264  : 							fSqrDist = fTmp*fS+fA11+((float)2.0)*fB1+fC;

	fld	DWORD PTR _fTmp$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fadd	DWORD PTR _fA11$[ebp]
	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]
$LN34@SqrDistanc:

; 265  : 						}
; 266  : 					}
; 267  : 				}
; 268  : 				else  // region 5

	jmp	SHORT $LN31@SqrDistanc
$LN38@SqrDistanc:

; 269  : 				{
; 270  : 					fT = (float)0.0;

	fldz
	fstp	DWORD PTR _fT$[ebp]

; 271  : 					if ( fB0 >= (float)0.0 )

	fld	DWORD PTR _fB0$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN32@SqrDistanc

; 272  : 					{
; 273  : 						fS = (float)0.0;

	fldz
	fstp	DWORD PTR _fS$[ebp]

; 274  : 						fSqrDist = fC;

	fld	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]

; 275  : 					}
; 276  : 					else

	jmp	SHORT $LN31@SqrDistanc
$LN32@SqrDistanc:

; 277  : 					{
; 278  : 						fS = -fB0/fA00;

	fld	DWORD PTR _fB0$[ebp]
	fchs
	fdiv	DWORD PTR _fA00$[ebp]
	fstp	DWORD PTR _fS$[ebp]

; 279  : 						fSqrDist = fB0*fS+fC;

	fld	DWORD PTR _fB0$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]
$LN31@SqrDistanc:

; 280  : 					}
; 281  : 				}
; 282  : 			}
; 283  : 			else

	jmp	$LN10@SqrDistanc
$LN39@SqrDistanc:

; 284  : 			{
; 285  : 				if ( fT <= (float)0.0 )  // region 4

	fld	DWORD PTR _fT$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$LN29@SqrDistanc

; 286  : 				{
; 287  : 					if ( fB0 < (float)0.0 )

	fld	DWORD PTR _fB0$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN28@SqrDistanc

; 288  : 					{
; 289  : 						fS = -fB0/fA00;

	fld	DWORD PTR _fB0$[ebp]
	fchs
	fdiv	DWORD PTR _fA00$[ebp]
	fstp	DWORD PTR _fS$[ebp]

; 290  : 						fT = (float)0.0;

	fldz
	fstp	DWORD PTR _fT$[ebp]

; 291  : 						fSqrDist = fB0*fS+fC;

	fld	DWORD PTR _fB0$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]

; 292  : 					}
; 293  : 					else

	jmp	SHORT $LN23@SqrDistanc
$LN28@SqrDistanc:

; 294  : 					{
; 295  : 						fS = (float)0.0;

	fldz
	fstp	DWORD PTR _fS$[ebp]

; 296  : 						if ( fB1 >= (float)0.0 )

	fld	DWORD PTR _fB1$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN26@SqrDistanc

; 297  : 						{
; 298  : 							fT = (float)0.0;

	fldz
	fstp	DWORD PTR _fT$[ebp]

; 299  : 							fSqrDist = fC;

	fld	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]
	jmp	SHORT $LN23@SqrDistanc
$LN26@SqrDistanc:

; 300  : 						}
; 301  : 						else if ( -fB1 >= fA11 )

	fld	DWORD PTR _fB1$[ebp]
	fchs
	fld	DWORD PTR _fA11$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN24@SqrDistanc

; 302  : 						{
; 303  : 							fT = (float)1.0;

	fld1
	fstp	DWORD PTR _fT$[ebp]

; 304  : 							fSqrDist = fA11+((float)2.0)*fB1+fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR _fA11$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]

; 305  : 						}
; 306  : 						else

	jmp	SHORT $LN23@SqrDistanc
$LN24@SqrDistanc:

; 307  : 						{
; 308  : 							fT = -fB1/fA11;

	fld	DWORD PTR _fB1$[ebp]
	fchs
	fdiv	DWORD PTR _fA11$[ebp]
	fstp	DWORD PTR _fT$[ebp]

; 309  : 							fSqrDist = fB1*fT+fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]
$LN23@SqrDistanc:

; 310  : 						}
; 311  : 					}

	jmp	$LN10@SqrDistanc
$LN29@SqrDistanc:

; 312  : 				}
; 313  : 				else if ( fT <= fDet )  // region 3

	fld	DWORD PTR _fT$[ebp]
	fld	DWORD PTR _fDet$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN21@SqrDistanc

; 314  : 				{
; 315  : 					fS = (float)0.0;

	fldz
	fstp	DWORD PTR _fS$[ebp]

; 316  : 					if ( fB1 >= (float)0.0 )

	fld	DWORD PTR _fB1$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN20@SqrDistanc

; 317  : 					{
; 318  : 						fT = (float)0.0;

	fldz
	fstp	DWORD PTR _fT$[ebp]

; 319  : 						fSqrDist = fC;

	fld	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]
	jmp	SHORT $LN17@SqrDistanc
$LN20@SqrDistanc:

; 320  : 					}
; 321  : 					else if ( -fB1 >= fA11 )

	fld	DWORD PTR _fB1$[ebp]
	fchs
	fld	DWORD PTR _fA11$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN18@SqrDistanc

; 322  : 					{
; 323  : 						fT = (float)1.0;

	fld1
	fstp	DWORD PTR _fT$[ebp]

; 324  : 						fSqrDist = fA11+((float)2.0)*fB1+fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR _fA11$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]

; 325  : 					}
; 326  : 					else

	jmp	SHORT $LN17@SqrDistanc
$LN18@SqrDistanc:

; 327  : 					{
; 328  : 						fT = -fB1/fA11;

	fld	DWORD PTR _fB1$[ebp]
	fchs
	fdiv	DWORD PTR _fA11$[ebp]
	fstp	DWORD PTR _fT$[ebp]

; 329  : 						fSqrDist = fB1*fT+fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]
$LN17@SqrDistanc:

; 330  : 					}
; 331  : 				}
; 332  : 				else  // region 2

	jmp	$LN10@SqrDistanc
$LN21@SqrDistanc:

; 333  : 				{
; 334  : 					fTmp = fA01+fB0;

	fld	DWORD PTR _fA01$[ebp]
	fadd	DWORD PTR _fB0$[ebp]
	fstp	DWORD PTR _fTmp$[ebp]

; 335  : 					if ( fTmp < (float)0.0 )

	fld	DWORD PTR _fTmp$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN15@SqrDistanc

; 336  : 					{
; 337  : 						fS = -fTmp/fA00;

	fld	DWORD PTR _fTmp$[ebp]
	fchs
	fdiv	DWORD PTR _fA00$[ebp]
	fstp	DWORD PTR _fS$[ebp]

; 338  : 						fT = (float)1.0;

	fld1
	fstp	DWORD PTR _fT$[ebp]

; 339  : 						fSqrDist = fTmp*fS+fA11+((float)2.0)*fB1+fC;

	fld	DWORD PTR _fTmp$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fadd	DWORD PTR _fA11$[ebp]
	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]

; 340  : 					}
; 341  : 					else

	jmp	SHORT $LN10@SqrDistanc
$LN15@SqrDistanc:

; 342  : 					{
; 343  : 						fS = (float)0.0;

	fldz
	fstp	DWORD PTR _fS$[ebp]

; 344  : 						if ( fB1 >= (float)0.0 )

	fld	DWORD PTR _fB1$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN13@SqrDistanc

; 345  : 						{
; 346  : 							fT = (float)0.0;

	fldz
	fstp	DWORD PTR _fT$[ebp]

; 347  : 							fSqrDist = fC;

	fld	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]
	jmp	SHORT $LN10@SqrDistanc
$LN13@SqrDistanc:

; 348  : 						}
; 349  : 						else if ( -fB1 >= fA11 )

	fld	DWORD PTR _fB1$[ebp]
	fchs
	fld	DWORD PTR _fA11$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN11@SqrDistanc

; 350  : 						{
; 351  : 							fT = (float)1.0;

	fld1
	fstp	DWORD PTR _fT$[ebp]

; 352  : 							fSqrDist = fA11+((float)2.0)*fB1+fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR _fA11$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]

; 353  : 						}
; 354  : 						else

	jmp	SHORT $LN10@SqrDistanc
$LN11@SqrDistanc:

; 355  : 						{
; 356  : 							fT = -fB1/fA11;

	fld	DWORD PTR _fB1$[ebp]
	fchs
	fdiv	DWORD PTR _fA11$[ebp]
	fstp	DWORD PTR _fT$[ebp]

; 357  : 							fSqrDist = fB1*fT+fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]
$LN10@SqrDistanc:

; 358  : 						}
; 359  : 					}
; 360  : 				}
; 361  : 			}
; 362  : 		}
; 363  : 		else

	jmp	$LN3@SqrDistanc
$LN40@SqrDistanc:

; 364  : 		{
; 365  : 			// ray and segment are parallel
; 366  : 			if ( fA01 > (float)0.0 )

	fld	DWORD PTR _fA01$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN8@SqrDistanc

; 367  : 			{
; 368  : 				// opposite direction vectors
; 369  : 				fT = (float)0.0;

	fldz
	fstp	DWORD PTR _fT$[ebp]

; 370  : 				if ( fB0 >= (float)0.0 )

	fld	DWORD PTR _fB0$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN7@SqrDistanc

; 371  : 				{
; 372  : 					fS = (float)0.0;

	fldz
	fstp	DWORD PTR _fS$[ebp]

; 373  : 					fSqrDist = fC;

	fld	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]

; 374  : 				}
; 375  : 				else

	jmp	SHORT $LN6@SqrDistanc
$LN7@SqrDistanc:

; 376  : 				{
; 377  : 					fS = -fB0/fA00;

	fld	DWORD PTR _fB0$[ebp]
	fchs
	fdiv	DWORD PTR _fA00$[ebp]
	fstp	DWORD PTR _fS$[ebp]

; 378  : 					fSqrDist = fB0*fS+fC;

	fld	DWORD PTR _fB0$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]
$LN6@SqrDistanc:

; 379  : 				}
; 380  : 			}
; 381  : 			else

	jmp	SHORT $LN3@SqrDistanc
$LN8@SqrDistanc:

; 382  : 			{
; 383  : 				// same direction vectors
; 384  : 				fB1 = -DotProduct(kDiff, rkSeg.m_Dir);

	mov	ecx, DWORD PTR _rkSeg$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR _kDiff$[ebp]
	push	edx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fchs
	fstp	DWORD PTR _fB1$[ebp]

; 385  : 				fT = (float)1.0;

	fld1
	fstp	DWORD PTR _fT$[ebp]

; 386  : 				fTmp = fA01+fB0;

	fld	DWORD PTR _fA01$[ebp]
	fadd	DWORD PTR _fB0$[ebp]
	fstp	DWORD PTR _fTmp$[ebp]

; 387  : 				if ( fTmp >= (float)0.0 )

	fld	DWORD PTR _fTmp$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN4@SqrDistanc

; 388  : 				{
; 389  : 					fS = (float)0.0;

	fldz
	fstp	DWORD PTR _fS$[ebp]

; 390  : 					fSqrDist = fA11+((float)2.0)*fB1+fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR _fA11$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]

; 391  : 				}
; 392  : 				else

	jmp	SHORT $LN3@SqrDistanc
$LN4@SqrDistanc:

; 393  : 				{
; 394  : 					fS = -fTmp/fA00;

	fld	DWORD PTR _fTmp$[ebp]
	fchs
	fdiv	DWORD PTR _fA00$[ebp]
	fstp	DWORD PTR _fS$[ebp]

; 395  : 					fSqrDist = fTmp*fS+fA11+((float)2.0)*fB1+fC;

	fld	DWORD PTR _fTmp$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fadd	DWORD PTR _fA11$[ebp]
	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _fSqrDist$[ebp]
$LN3@SqrDistanc:

; 396  : 				}
; 397  : 			}
; 398  : 		}
; 399  : 
; 400  : 		if ( pfRayP )

	cmp	DWORD PTR _pfRayP$[ebp], 0
	je	SHORT $LN2@SqrDistanc

; 401  : 			*pfRayP = fS;

	mov	eax, DWORD PTR _pfRayP$[ebp]
	fld	DWORD PTR _fS$[ebp]
	fstp	DWORD PTR [eax]
$LN2@SqrDistanc:

; 402  : 
; 403  : 		if ( pfSegP )

	cmp	DWORD PTR _pfSegP$[ebp], 0
	je	SHORT $LN1@SqrDistanc

; 404  : 			*pfSegP = fT;

	mov	ecx, DWORD PTR _pfSegP$[ebp]
	fld	DWORD PTR _fT$[ebp]
	fstp	DWORD PTR [ecx]
$LN1@SqrDistanc:

; 405  : 
; 406  : 		return Abs(fSqrDist);

	lea	edx, DWORD PTR _fSqrDist$[ebp]
	push	edx
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	add	esp, 4

; 407  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?SqrDistance@Ogre@@YAMABVRay@1@ABUSegment@1@PAM2@Z ENDP	; Ogre::SqrDistance
_TEXT	ENDS
PUBLIC	??0Segment@Ogre@@QAE@XZ				; Ogre::Segment::Segment
PUBLIC	?intersectCapsule@Ray@Ogre@@QBE_NABVVector3@2@0M@Z ; Ogre::Ray::intersectCapsule
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -28						; size = 4
_seg$ = -24						; size = 24
_bottom_center$ = 8					; size = 4
_height$ = 12						; size = 4
_radius$ = 16						; size = 4
?intersectCapsule@Ray@Ogre@@QBE_NABVVector3@2@0M@Z PROC	; Ogre::Ray::intersectCapsule
; _this$ = ecx

; 410  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 411  : 		Segment seg;

	lea	ecx, DWORD PTR _seg$[ebp]
	call	??0Segment@Ogre@@QAE@XZ

; 412  : 		seg.m_Origin = bottom_center;

	mov	eax, DWORD PTR _bottom_center$[ebp]
	push	eax
	lea	ecx, DWORD PTR _seg$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 413  : 		seg.m_Dir = height;

	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _seg$[ebp+12]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 414  : 
; 415  : 		if(SqrDistance(*this, seg, NULL, NULL) < radius*radius) return true;

	push	0
	push	0
	lea	edx, DWORD PTR _seg$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?SqrDistance@Ogre@@YAMABVRay@1@ABUSegment@1@PAM2@Z ; Ogre::SqrDistance
	add	esp, 16					; 00000010H
	fld	DWORD PTR _radius$[ebp]
	fmul	DWORD PTR _radius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@intersectC
	mov	al, 1
	jmp	SHORT $LN1@intersectC
	jmp	SHORT $LN1@intersectC
$LN2@intersectC:

; 416  : 		else return false;

	xor	al, al
$LN1@intersectC:

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?intersectCapsule@Ray@Ogre@@QBE_NABVVector3@2@0M@Z ENDP	; Ogre::Ray::intersectCapsule
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0Segment@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Segment@Ogre@@QAE@XZ PROC				; Ogre::Segment::Segment, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Segment@Ogre@@QAE@XZ ENDP				; Ogre::Segment::Segment
_TEXT	ENDS
PUBLIC	?WorldPosDiff@Ogre@@YAXAAVVector3@1@ABVWorldPos@1@1@Z ; Ogre::WorldPosDiff
PUBLIC	?getRelativeRay@WorldRay@Ogre@@QBEXAAVRay@2@ABVWorldPos@2@@Z ; Ogre::WorldRay::getRelativeRay
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ray$ = 8						; size = 4
_pt$ = 12						; size = 4
?getRelativeRay@WorldRay@Ogre@@QBEXAAVRay@2@ABVWorldPos@2@@Z PROC ; Ogre::WorldRay::getRelativeRay
; _this$ = ecx

; 420  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 421  : 		WorldPosDiff(ray.m_Origin, m_Origin, pt);

	mov	eax, DWORD PTR _pt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ray$[ebp]
	push	edx
	call	?WorldPosDiff@Ogre@@YAXAAVVector3@1@ABVWorldPos@1@1@Z ; Ogre::WorldPosDiff
	add	esp, 12					; 0000000cH

; 422  : 		ray.m_Dir = m_Dir;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _ray$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 423  : 		ray.m_Range = m_Range;

	mov	ecx, DWORD PTR _ray$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+24]
	fstp	DWORD PTR [ecx+24]

; 424  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?getRelativeRay@WorldRay@Ogre@@QBEXAAVRay@2@ABVWorldPos@2@@Z ENDP ; Ogre::WorldRay::getRelativeRay
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreworldpos.h
_TEXT	ENDS
;	COMDAT ?WorldPosDiff@Ogre@@YAXAAVVector3@1@ABVWorldPos@1@1@Z
_TEXT	SEGMENT
$T63627 = -12						; size = 12
_vec$ = 8						; size = 4
_p1$ = 12						; size = 4
_p2$ = 16						; size = 4
?WorldPosDiff@Ogre@@YAXAAVVector3@1@ABVWorldPos@1@1@Z PROC ; Ogre::WorldPosDiff, COMDAT

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 177  : 		vec = p1.subtract(p2);

	mov	eax, DWORD PTR _p2$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T63627[ebp]
	push	ecx
	mov	ecx, DWORD PTR _p1$[ebp]
	call	?subtract@WorldPos@Ogre@@QBE?AVVector3@2@ABV12@@Z ; Ogre::WorldPos::subtract
	push	eax
	mov	ecx, DWORD PTR _vec$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 178  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?WorldPosDiff@Ogre@@YAXAAVVector3@1@ABVWorldPos@1@1@Z ENDP ; Ogre::WorldPosDiff
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
_TEXT	ENDS
;	COMDAT ??$Abs@M@Ogre@@YAMABM@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_x$ = 8							; size = 4
??$Abs@M@Ogre@@YAMABM@Z PROC				; Ogre::Abs<float>, COMDAT

; 125  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 126  : 		return (x<0.0f) ? (-x) : x;

	mov	eax, DWORD PTR _x$[ebp]
	fld	DWORD PTR [eax]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@Abs
	mov	ecx, DWORD PTR _x$[ebp]
	fld	DWORD PTR [ecx]
	fchs
	fstp	DWORD PTR tv68[ebp]
	jmp	SHORT $LN4@Abs
$LN3@Abs:
	mov	edx, DWORD PTR _x$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR tv68[ebp]
$LN4@Abs:
	fld	DWORD PTR tv68[ebp]

; 127  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$Abs@M@Ogre@@YAMABM@Z ENDP				; Ogre::Abs<float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$Max@M@Ogre@@YAMABM0@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$Max@M@Ogre@@YAMABM0@Z PROC				; Ogre::Max<float>, COMDAT

; 120  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 121  : 		return ( (a) > (b) ? (a) : (b) );

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@Max
	mov	edx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR tv67[ebp]
	jmp	SHORT $LN4@Max
$LN3@Max:
	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR tv67[ebp]
$LN4@Max:
	fld	DWORD PTR tv67[ebp]

; 122  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$Max@M@Ogre@@YAMABM0@Z ENDP				; Ogre::Max<float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$Min@M@Ogre@@YAMABM0@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$Min@M@Ogre@@YAMABM0@Z PROC				; Ogre::Min<float>, COMDAT

; 115  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 116  : 		return ( (a) < (b) ? (a) : (b) );

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@Min
	mov	edx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR tv67[ebp]
	jmp	SHORT $LN4@Min
$LN3@Min:
	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR tv67[ebp]
$LN4@Min:
	fld	DWORD PTR tv67[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$Min@M@Ogre@@YAMABM0@Z ENDP				; Ogre::Min<float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??__ETWO_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__ETWO_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'TWO_PI'', COMDAT

; 10   : 	const float TWO_PI = ONE_PI*2;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fadd	ST(0), ST(0)
	fstp	DWORD PTR _TWO_PI
	pop	ebp
	ret	0
??__ETWO_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'TWO_PI''
text$yc	ENDS
PUBLIC	__real@3fe0000000000000
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??__EHALF_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__EHALF_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'HALF_PI'', COMDAT

; 11   : 	const float	HALF_PI = ONE_PI*0.5f;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR _HALF_PI
	pop	ebp
	ret	0
??__EHALF_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'HALF_PI''
text$yc	ENDS
_BSS	SEGMENT
_TWO_PI	DD	01H DUP (?)
_HALF_PI DD	01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_TWO_PI$initializer$ DD FLAT:??__ETWO_PI@Ogre@@YAXXZ
_HALF_PI$initializer$ DD FLAT:??__EHALF_PI@Ogre@@YAXXZ
CRT$XCU	ENDS
END
