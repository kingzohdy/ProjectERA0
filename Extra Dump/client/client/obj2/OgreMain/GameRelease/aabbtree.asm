; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\sdk\ozcollide\aabbtree.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__real@3fc00000
PUBLIC	??_7AABBTree@ozcollide@@6B@			; ozcollide::AABBTree::`vftable'
PUBLIC	??0AABBTree@ozcollide@@AAE@W4AABBTREE_LEAFTYPE@1@H@Z ; ozcollide::AABBTree::AABBTree
PUBLIC	??_R4AABBTree@ozcollide@@6B@			; ozcollide::AABBTree::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAABBTree@ozcollide@@@8			; ozcollide::AABBTree `RTTI Type Descriptor'
PUBLIC	??_R3AABBTree@ozcollide@@8			; ozcollide::AABBTree::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AABBTree@ozcollide@@8			; ozcollide::AABBTree::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AABBTree@ozcollide@@8		; ozcollide::AABBTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__fltused:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EAABBTree@ozcollide@@EAEPAXI@Z:PROC		; ozcollide::AABBTree::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@AABBTree@ozcollide@@8
; File i:\svnroot\client\sdk\ozcollide\aabbtree.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@AABBTree@ozcollide@@8 DD FLAT:??_R0?AVAABBTree@ozcollide@@@8 ; ozcollide::AABBTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AABBTree@ozcollide@@8
rdata$r	ENDS
;	COMDAT ??_R2AABBTree@ozcollide@@8
rdata$r	SEGMENT
??_R2AABBTree@ozcollide@@8 DD FLAT:??_R1A@?0A@EA@AABBTree@ozcollide@@8 ; ozcollide::AABBTree::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3AABBTree@ozcollide@@8
rdata$r	SEGMENT
??_R3AABBTree@ozcollide@@8 DD 00H			; ozcollide::AABBTree::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2AABBTree@ozcollide@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAABBTree@ozcollide@@@8
_DATA	SEGMENT
??_R0?AVAABBTree@ozcollide@@@8 DD FLAT:??_7type_info@@6B@ ; ozcollide::AABBTree `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAABBTree@ozcollide@@', 00H
_DATA	ENDS
;	COMDAT ??_R4AABBTree@ozcollide@@6B@
rdata$r	SEGMENT
??_R4AABBTree@ozcollide@@6B@ DD 00H			; ozcollide::AABBTree::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAABBTree@ozcollide@@@8
	DD	FLAT:??_R3AABBTree@ozcollide@@8
rdata$r	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT ??_7AABBTree@ozcollide@@6B@
CONST	SEGMENT
??_7AABBTree@ozcollide@@6B@ DD FLAT:??_R4AABBTree@ozcollide@@6B@ ; ozcollide::AABBTree::`vftable'
	DD	FLAT:??_EAABBTree@ozcollide@@EAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
__leafType$ = 8						; size = 4
__leafDepth$ = 12					; size = 4
??0AABBTree@ozcollide@@AAE@W4AABBTREE_LEAFTYPE@1@H@Z PROC ; ozcollide::AABBTree::AABBTree
; _this$ = ecx

; 35   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7AABBTree@ozcollide@@6B@

; 36   : 	leafType_ = _leafType;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __leafType$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 37   : 	leafDepth_ = _leafDepth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __leafDepth$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 38   : 	nbNodes_ = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 39   : 	nbLeafs_ = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 40   : 	userDataType_ = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 41   : 	bUseTemporalCoherence_ = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+24], 0

; 42   : 	coefVolInflater_ = 1.5f;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3fc00000
	fstp	DWORD PTR [eax+28]

; 43   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0AABBTree@ozcollide@@AAE@W4AABBTREE_LEAFTYPE@1@H@Z ENDP ; ozcollide::AABBTree::AABBTree
_TEXT	ENDS
PUBLIC	??1AABBTree@ozcollide@@EAE@XZ			; ozcollide::AABBTree::~AABBTree
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GAABBTree@ozcollide@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GAABBTree@ozcollide@@EAEPAXI@Z PROC			; ozcollide::AABBTree::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AABBTree@ozcollide@@EAE@XZ		; ozcollide::AABBTree::~AABBTree
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GAABBTree@ozcollide@@EAEPAXI@Z ENDP			; ozcollide::AABBTree::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1AABBTree@ozcollide@@EAE@XZ PROC			; ozcollide::AABBTree::~AABBTree
; _this$ = ecx

; 46   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7AABBTree@ozcollide@@6B@

; 47   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1AABBTree@ozcollide@@EAE@XZ ENDP			; ozcollide::AABBTree::~AABBTree
_TEXT	ENDS
PUBLIC	?destroy@AABBTree@ozcollide@@QAEXXZ		; ozcollide::AABBTree::destroy
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T7869 = -8						; size = 4
$T7868 = -4						; size = 4
?destroy@AABBTree@ozcollide@@QAEXXZ PROC		; ozcollide::AABBTree::destroy
; _this$ = ecx

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 	delete this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T7869[ebp], eax
	mov	ecx, DWORD PTR $T7869[ebp]
	mov	DWORD PTR $T7868[ebp], ecx
	cmp	DWORD PTR $T7868[ebp], 0
	je	SHORT $LN3@destroy
	push	1
	mov	edx, DWORD PTR $T7868[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T7868[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN1@destroy
$LN3@destroy:
	mov	DWORD PTR tv70[ebp], 0
$LN1@destroy:

; 52   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?destroy@AABBTree@ozcollide@@QAEXXZ ENDP		; ozcollide::AABBTree::destroy
_TEXT	ENDS
PUBLIC	?loadBinary@AABBTree@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z ; ozcollide::AABBTree::loadBinary
EXTRN	?loadBinary@AABBTreeAABB@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z:PROC ; ozcollide::AABBTreeAABB::loadBinary
EXTRN	?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z:PROC ; ozcollide::AABBTreeSphere::loadBinary
EXTRN	?loadBinary@AABBTreePoly@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z:PROC ; ozcollide::AABBTreePoly::loadBinary
EXTRN	?close@DataIn@ozcollide@@QAE_NXZ:PROC		; ozcollide::DataIn::close
EXTRN	?readByte@DataIn@ozcollide@@QAEDXZ:PROC		; ozcollide::DataIn::readByte
EXTRN	?readDword@DataIn@ozcollide@@QAEHXZ:PROC	; ozcollide::DataIn::readDword
EXTRN	??1DataIn@ozcollide@@UAE@XZ:PROC		; ozcollide::DataIn::~DataIn
EXTRN	?open@DataIn@ozcollide@@QAE_NPBD@Z:PROC		; ozcollide::DataIn::open
EXTRN	??0DataIn@ozcollide@@QAE@XZ:PROC		; ozcollide::DataIn::DataIn
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$?loadBinary@AABBTree@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?loadBinary@AABBTree@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z$0
__ehfuncinfo$?loadBinary@AABBTree@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?loadBinary@AABBTree@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
$T7879 = -108						; size = 4
$T7878 = -104						; size = 4
$T7877 = -100						; size = 4
$T7876 = -96						; size = 4
$T7875 = -92						; size = 4
$T7874 = -88						; size = 4
$T7873 = -84						; size = 4
_err$7699 = -80						; size = 4
_tb$7698 = -76						; size = 4
_err$7693 = -72						; size = 4
_ts$7692 = -68						; size = 4
_tp$7686 = -64						; size = 4
_err$7687 = -60						; size = 4
_chunkSize$ = -56					; size = 4
_file$ = -52						; size = 28
_chunk$ = -24						; size = 4
_tr$ = -20						; size = 4
_leafType$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
__filename$ = 8						; size = 4
__tree$ = 12						; size = 4
?loadBinary@AABBTree@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z PROC ; ozcollide::AABBTree::loadBinary

; 55   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?loadBinary@AABBTree@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 56   : 	DataIn file;

	lea	ecx, DWORD PTR _file$[ebp]
	call	??0DataIn@ozcollide@@QAE@XZ		; ozcollide::DataIn::DataIn
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 57   : 	int chunk;
; 58   : 	int chunkSize;
; 59   : 	AABBTree *tr;
; 60   : 
; 61   : 	if (!file.open(_filename))

	mov	eax, DWORD PTR __filename$[ebp]
	push	eax
	lea	ecx, DWORD PTR _file$[ebp]
	call	?open@DataIn@ozcollide@@QAE_NPBD@Z	; ozcollide::DataIn::open
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN11@loadBinary

; 62   : 		return ERR_CANNOT_OPEN;

	mov	DWORD PTR $T7873[ebp], 17		; 00000011H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _file$[ebp]
	call	??1DataIn@ozcollide@@UAE@XZ		; ozcollide::DataIn::~DataIn
	mov	eax, DWORD PTR $T7873[ebp]
	jmp	$LN12@loadBinary
$LN11@loadBinary:

; 63   : 
; 64   : 	chunk = file.readDword();

	lea	ecx, DWORD PTR _file$[ebp]
	call	?readDword@DataIn@ozcollide@@QAEHXZ	; ozcollide::DataIn::readDword
	mov	DWORD PTR _chunk$[ebp], eax

; 65   : 	if (chunk != MID('A', 'A', 'B', 'B'))

	cmp	DWORD PTR _chunk$[ebp], 1111638337	; 42424141H
	je	SHORT $LN10@loadBinary

; 66   : 		return ERR_INVALID_FORMAT;

	mov	DWORD PTR $T7874[ebp], 18		; 00000012H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _file$[ebp]
	call	??1DataIn@ozcollide@@UAE@XZ		; ozcollide::DataIn::~DataIn
	mov	eax, DWORD PTR $T7874[ebp]
	jmp	$LN12@loadBinary
$LN10@loadBinary:

; 67   : 
; 68   : 	chunkSize = file.readDword();

	lea	ecx, DWORD PTR _file$[ebp]
	call	?readDword@DataIn@ozcollide@@QAEHXZ	; ozcollide::DataIn::readDword
	mov	DWORD PTR _chunkSize$[ebp], eax

; 69   : 
; 70   : 	char leafType = file.readByte();

	lea	ecx, DWORD PTR _file$[ebp]
	call	?readByte@DataIn@ozcollide@@QAEDXZ	; ozcollide::DataIn::readByte
	mov	BYTE PTR _leafType$[ebp], al

; 71   : 	file.close();

	lea	ecx, DWORD PTR _file$[ebp]
	call	?close@DataIn@ozcollide@@QAE_NXZ	; ozcollide::DataIn::close

; 72   : 
; 73   : 	if (leafType == 0) {

	movsx	edx, BYTE PTR _leafType$[ebp]
	test	edx, edx
	jne	SHORT $LN9@loadBinary

; 74   : 		AABBTreePoly *tp;
; 75   : 		ERR err = AABBTreePoly::loadBinary(_filename, &tp);

	lea	eax, DWORD PTR _tp$7686[ebp]
	push	eax
	mov	ecx, DWORD PTR __filename$[ebp]
	push	ecx
	call	?loadBinary@AABBTreePoly@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z ; ozcollide::AABBTreePoly::loadBinary
	add	esp, 8
	mov	DWORD PTR _err$7687[ebp], eax

; 76   : 		if (err)

	cmp	DWORD PTR _err$7687[ebp], 0
	je	SHORT $LN8@loadBinary

; 77   : 			return err;

	mov	edx, DWORD PTR _err$7687[ebp]
	mov	DWORD PTR $T7875[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _file$[ebp]
	call	??1DataIn@ozcollide@@UAE@XZ		; ozcollide::DataIn::~DataIn
	mov	eax, DWORD PTR $T7875[ebp]
	jmp	$LN12@loadBinary
$LN8@loadBinary:

; 78   : 		tr = tp;

	mov	eax, DWORD PTR _tp$7686[ebp]
	mov	DWORD PTR _tr$[ebp], eax
	jmp	$LN7@loadBinary
$LN9@loadBinary:

; 79   : 	}
; 80   : 	else if (leafType == 1) {

	movsx	ecx, BYTE PTR _leafType$[ebp]
	cmp	ecx, 1
	jne	SHORT $LN6@loadBinary

; 81   : 		AABBTreeSphere *ts;
; 82   : 		ERR err = AABBTreeSphere::loadBinary(_filename, &ts);

	lea	edx, DWORD PTR _ts$7692[ebp]
	push	edx
	mov	eax, DWORD PTR __filename$[ebp]
	push	eax
	call	?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z ; ozcollide::AABBTreeSphere::loadBinary
	add	esp, 8
	mov	DWORD PTR _err$7693[ebp], eax

; 83   : 		if (err)

	cmp	DWORD PTR _err$7693[ebp], 0
	je	SHORT $LN5@loadBinary

; 84   : 			return err;

	mov	ecx, DWORD PTR _err$7693[ebp]
	mov	DWORD PTR $T7876[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _file$[ebp]
	call	??1DataIn@ozcollide@@UAE@XZ		; ozcollide::DataIn::~DataIn
	mov	eax, DWORD PTR $T7876[ebp]
	jmp	$LN12@loadBinary
$LN5@loadBinary:

; 85   : 		tr = ts;

	mov	edx, DWORD PTR _ts$7692[ebp]
	mov	DWORD PTR _tr$[ebp], edx
	jmp	SHORT $LN7@loadBinary
$LN6@loadBinary:

; 86   : 	}
; 87   : 	else if (leafType == 2) {

	movsx	eax, BYTE PTR _leafType$[ebp]
	cmp	eax, 2
	jne	SHORT $LN3@loadBinary

; 88   : 		AABBTreeAABB *tb;
; 89   : 		ERR err = AABBTreeAABB::loadBinary(_filename, &tb);

	lea	ecx, DWORD PTR _tb$7698[ebp]
	push	ecx
	mov	edx, DWORD PTR __filename$[ebp]
	push	edx
	call	?loadBinary@AABBTreeAABB@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z ; ozcollide::AABBTreeAABB::loadBinary
	add	esp, 8
	mov	DWORD PTR _err$7699[ebp], eax

; 90   : 		if (err)

	cmp	DWORD PTR _err$7699[ebp], 0
	je	SHORT $LN2@loadBinary

; 91   : 			return err;

	mov	eax, DWORD PTR _err$7699[ebp]
	mov	DWORD PTR $T7877[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _file$[ebp]
	call	??1DataIn@ozcollide@@UAE@XZ		; ozcollide::DataIn::~DataIn
	mov	eax, DWORD PTR $T7877[ebp]
	jmp	SHORT $LN12@loadBinary
$LN2@loadBinary:

; 92   : 		tr = tb;

	mov	ecx, DWORD PTR _tb$7698[ebp]
	mov	DWORD PTR _tr$[ebp], ecx

; 93   : 	}
; 94   : 	else

	jmp	SHORT $LN7@loadBinary
$LN3@loadBinary:

; 95   : 		return ERR_INVALID_FORMAT;

	mov	DWORD PTR $T7878[ebp], 18		; 00000012H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _file$[ebp]
	call	??1DataIn@ozcollide@@UAE@XZ		; ozcollide::DataIn::~DataIn
	mov	eax, DWORD PTR $T7878[ebp]
	jmp	SHORT $LN12@loadBinary
$LN7@loadBinary:

; 96   : 
; 97   : 	*_tree = tr;

	mov	edx, DWORD PTR __tree$[ebp]
	mov	eax, DWORD PTR _tr$[ebp]
	mov	DWORD PTR [edx], eax

; 98   : 
; 99   : 	return NOERR;

	mov	DWORD PTR $T7879[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _file$[ebp]
	call	??1DataIn@ozcollide@@UAE@XZ		; ozcollide::DataIn::~DataIn
	mov	eax, DWORD PTR $T7879[ebp]
$LN12@loadBinary:

; 100  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?loadBinary@AABBTree@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z$0:
	lea	ecx, DWORD PTR _file$[ebp]
	jmp	??1DataIn@ozcollide@@UAE@XZ		; ozcollide::DataIn::~DataIn
__ehhandler$?loadBinary@AABBTree@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?loadBinary@AABBTree@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?loadBinary@AABBTree@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z ENDP ; ozcollide::AABBTree::loadBinary
END
