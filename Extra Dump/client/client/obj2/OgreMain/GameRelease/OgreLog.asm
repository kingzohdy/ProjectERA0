; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\OgreMain\OgreLog.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG5714
_DATA	ENDS
CONST	SEGMENT
$SG5714	DB	'bad allocation', 00H
	ORG $+1
$SG113480 DB	'log', 00H
CONST	ENDS
PUBLIC	?LogInit@Ogre@@YAHXZ				; Ogre::LogInit
EXTRN	__imp__CreateDirectoryA@8:PROC
_BSS	SEGMENT
_s_nHander DD	01H DUP (?)
_s_LogLevel DD	01H DUP (?)
_s_Line	DD	01H DUP (?)
_s_pFilename DD	01H DUP (?)
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrelog.cpp
_BSS	ENDS
_TEXT	SEGMENT
?LogInit@Ogre@@YAHXZ PROC				; Ogre::LogInit

; 18   : 	{

	push	ebp
	mov	ebp, esp

; 19   : 		s_pFilename = NULL;

	mov	DWORD PTR _s_pFilename, 0

; 20   : 		s_Line = 0;

	mov	DWORD PTR _s_Line, 0

; 21   : 		s_LogLevel = 0;

	mov	DWORD PTR _s_LogLevel, 0

; 22   : 		s_nHander = 0;

	mov	DWORD PTR _s_nHander, 0

; 23   : 		CreateDirectory("log", NULL);

	push	0
	push	OFFSET $SG113480
	call	DWORD PTR __imp__CreateDirectoryA@8

; 24   : 
; 25   : 		return 0;

	xor	eax, eax

; 26   : 	}

	pop	ebp
	ret	0
?LogInit@Ogre@@YAHXZ ENDP				; Ogre::LogInit
_TEXT	ENDS
PUBLIC	?LogRelease@Ogre@@YAXXZ				; Ogre::LogRelease
_BSS	SEGMENT
_s_pHandler DD	010H DUP (?)
; Function compile flags: /Odtp
_BSS	ENDS
_TEXT	SEGMENT
tv74 = -16						; size = 4
$T117748 = -12						; size = 4
$T117747 = -8						; size = 4
_i$113483 = -4						; size = 4
?LogRelease@Ogre@@YAXXZ PROC				; Ogre::LogRelease

; 29   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 30   : 		for( int i=0; i<s_nHander; i++ )

	mov	DWORD PTR _i$113483[ebp], 0
	jmp	SHORT $LN3@LogRelease
$LN2@LogRelease:
	mov	eax, DWORD PTR _i$113483[ebp]
	add	eax, 1
	mov	DWORD PTR _i$113483[ebp], eax
$LN3@LogRelease:
	mov	ecx, DWORD PTR _i$113483[ebp]
	cmp	ecx, DWORD PTR _s_nHander
	jge	SHORT $LN4@LogRelease

; 31   : 		{
; 32   : 			delete s_pHandler[i];

	mov	edx, DWORD PTR _i$113483[ebp]
	mov	eax, DWORD PTR _s_pHandler[edx*4]
	mov	DWORD PTR $T117748[ebp], eax
	mov	ecx, DWORD PTR $T117748[ebp]
	mov	DWORD PTR $T117747[ebp], ecx
	cmp	DWORD PTR $T117747[ebp], 0
	je	SHORT $LN6@LogRelease
	push	1
	mov	edx, DWORD PTR $T117747[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T117747[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN7@LogRelease
$LN6@LogRelease:
	mov	DWORD PTR tv74[ebp], 0
$LN7@LogRelease:

; 33   : 		}

	jmp	SHORT $LN2@LogRelease
$LN4@LogRelease:

; 34   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?LogRelease@Ogre@@YAXXZ ENDP				; Ogre::LogRelease
_TEXT	ENDS
PUBLIC	?LogAddHandler@Ogre@@YAHPAVLogHandler@1@@Z	; Ogre::LogAddHandler
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$113494 = -4						; size = 4
_phandler$ = 8						; size = 4
?LogAddHandler@Ogre@@YAHPAVLogHandler@1@@Z PROC		; Ogre::LogAddHandler

; 37   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 38   : 		if( phandler == NULL ) return -1;

	cmp	DWORD PTR _phandler$[ebp], 0
	jne	SHORT $LN6@LogAddHand
	or	eax, -1
	jmp	SHORT $LN7@LogAddHand
$LN6@LogAddHand:

; 39   : 		if( s_nHander == MAX_HANDLER ) return -1;

	cmp	DWORD PTR _s_nHander, 16		; 00000010H
	jne	SHORT $LN5@LogAddHand
	or	eax, -1
	jmp	SHORT $LN7@LogAddHand
$LN5@LogAddHand:

; 40   : 
; 41   : 		for( int i=0; i<s_nHander; i++ )

	mov	DWORD PTR _i$113494[ebp], 0
	jmp	SHORT $LN4@LogAddHand
$LN3@LogAddHand:
	mov	eax, DWORD PTR _i$113494[ebp]
	add	eax, 1
	mov	DWORD PTR _i$113494[ebp], eax
$LN4@LogAddHand:
	mov	ecx, DWORD PTR _i$113494[ebp]
	cmp	ecx, DWORD PTR _s_nHander
	jge	SHORT $LN2@LogAddHand

; 42   : 		{
; 43   : 			if( s_pHandler[i] == phandler ) return i;

	mov	edx, DWORD PTR _i$113494[ebp]
	mov	eax, DWORD PTR _s_pHandler[edx*4]
	cmp	eax, DWORD PTR _phandler$[ebp]
	jne	SHORT $LN1@LogAddHand
	mov	eax, DWORD PTR _i$113494[ebp]
	jmp	SHORT $LN7@LogAddHand
$LN1@LogAddHand:

; 44   : 		}

	jmp	SHORT $LN3@LogAddHand
$LN2@LogAddHand:

; 45   : 
; 46   : 		s_pHandler[s_nHander++] = phandler;

	mov	ecx, DWORD PTR _s_nHander
	mov	edx, DWORD PTR _phandler$[ebp]
	mov	DWORD PTR _s_pHandler[ecx*4], edx
	mov	eax, DWORD PTR _s_nHander
	add	eax, 1
	mov	DWORD PTR _s_nHander, eax

; 47   : 		return s_nHander-1;

	mov	eax, DWORD PTR _s_nHander
	sub	eax, 1
$LN7@LogAddHand:

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?LogAddHandler@Ogre@@YAHPAVLogHandler@1@@Z ENDP		; Ogre::LogAddHandler
_TEXT	ENDS
PUBLIC	?LogAddFileHandler@Ogre@@YAHPBDI@Z		; Ogre::LogAddFileHandler
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??0FileLogHandler@Ogre@@QAE@IPBDI@Z:PROC	; Ogre::FileLogHandler::FileLogHandler
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$?LogAddFileHandler@Ogre@@YAHPBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogAddFileHandler@Ogre@@YAHPBDI@Z$0
__ehfuncinfo$?LogAddFileHandler@Ogre@@YAHPBDI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LogAddFileHandler@Ogre@@YAHPBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T117754 = -24						; size = 4
$T117753 = -20						; size = 4
_phandler$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_logfile$ = 8						; size = 4
_levels$ = 12						; size = 4
?LogAddFileHandler@Ogre@@YAHPBDI@Z PROC			; Ogre::LogAddFileHandler

; 51   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogAddFileHandler@Ogre@@YAHPBDI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 52   : 		FileLogHandler *phandler = new FileLogHandler(levels, logfile, 2048);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T117754[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T117754[ebp], 0
	je	SHORT $LN3@LogAddFile
	push	2048					; 00000800H
	mov	eax, DWORD PTR _logfile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _levels$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T117754[ebp]
	call	??0FileLogHandler@Ogre@@QAE@IPBDI@Z	; Ogre::FileLogHandler::FileLogHandler
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@LogAddFile
$LN3@LogAddFile:
	mov	DWORD PTR tv74[ebp], 0
$LN4@LogAddFile:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T117753[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T117753[ebp]
	mov	DWORD PTR _phandler$[ebp], eax

; 53   : 		return LogAddHandler(phandler);

	mov	ecx, DWORD PTR _phandler$[ebp]
	push	ecx
	call	?LogAddHandler@Ogre@@YAHPAVLogHandler@1@@Z ; Ogre::LogAddHandler
	add	esp, 4

; 54   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LogAddFileHandler@Ogre@@YAHPBDI@Z$0:
	mov	eax, DWORD PTR $T117754[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?LogAddFileHandler@Ogre@@YAHPBDI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogAddFileHandler@Ogre@@YAHPBDI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogAddFileHandler@Ogre@@YAHPBDI@Z ENDP			; Ogre::LogAddFileHandler
PUBLIC	?LogSetCurParam@Ogre@@YAXPBDHI@Z		; Ogre::LogSetCurParam
; Function compile flags: /Odtp
_TEXT	SEGMENT
_pfilename$ = 8						; size = 4
_line$ = 12						; size = 4
_level$ = 16						; size = 4
?LogSetCurParam@Ogre@@YAXPBDHI@Z PROC			; Ogre::LogSetCurParam

; 57   : 	{

	push	ebp
	mov	ebp, esp

; 58   : 		s_pFilename = pfilename;

	mov	eax, DWORD PTR _pfilename$[ebp]
	mov	DWORD PTR _s_pFilename, eax

; 59   : 		s_Line = line;

	mov	ecx, DWORD PTR _line$[ebp]
	mov	DWORD PTR _s_Line, ecx

; 60   : 		s_LogLevel = level;

	mov	edx, DWORD PTR _level$[ebp]
	mov	DWORD PTR _s_LogLevel, edx

; 61   : 	}

	pop	ebp
	ret	0
?LogSetCurParam@Ogre@@YAXPBDHI@Z ENDP			; Ogre::LogSetCurParam
_TEXT	ENDS
PUBLIC	?getLevels@LogHandler@Ogre@@QAEIXZ		; Ogre::LogHandler::getLevels
PUBLIC	__$ArrayPad$
PUBLIC	?LogMessage@Ogre@@YAXPBDZZ			; Ogre::LogMessage
EXTRN	__imp__vsprintf:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_phandler$113528 = -8208				; size = 4
_i$113524 = -8204					; size = 4
_buffer$ = -8200					; size = 8192
__$ArrayPad$ = -8					; size = 4
_argptr$ = -4						; size = 4
_fmt$ = 8						; size = 4
?LogMessage@Ogre@@YAXPBDZZ PROC				; Ogre::LogMessage

; 64   : 	{

	push	ebp
	mov	ebp, esp
	mov	eax, 8208				; 00002010H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 65   : 		assert( *(uint *)fmt != 0xcdcdcdcd );
; 66   : 		va_list		argptr;
; 67   : 		char buffer[1024*8];
; 68   : 
; 69   : 		va_start( argptr, fmt );

	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _argptr$[ebp], eax

; 70   : 		vsprintf( buffer, fmt, argptr );

	mov	ecx, DWORD PTR _argptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fmt$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	DWORD PTR __imp__vsprintf
	add	esp, 12					; 0000000cH

; 71   : 		va_end( argptr );

	mov	DWORD PTR _argptr$[ebp], 0

; 72   : 
; 73   : 		for( int i=0; i<s_nHander; i++ )

	mov	DWORD PTR _i$113524[ebp], 0
	jmp	SHORT $LN4@LogMessage
$LN3@LogMessage:
	mov	ecx, DWORD PTR _i$113524[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$113524[ebp], ecx
$LN4@LogMessage:
	mov	edx, DWORD PTR _i$113524[ebp]
	cmp	edx, DWORD PTR _s_nHander
	jge	SHORT $LN5@LogMessage

; 74   : 		{
; 75   : 			LogHandler *phandler = s_pHandler[i];

	mov	eax, DWORD PTR _i$113524[ebp]
	mov	ecx, DWORD PTR _s_pHandler[eax*4]
	mov	DWORD PTR _phandler$113528[ebp], ecx

; 76   : 			if(s_LogLevel&phandler->getLevels())

	mov	ecx, DWORD PTR _phandler$113528[ebp]
	call	?getLevels@LogHandler@Ogre@@QAEIXZ	; Ogre::LogHandler::getLevels
	and	eax, DWORD PTR _s_LogLevel
	je	SHORT $LN1@LogMessage

; 77   : 			{
; 78   : 				phandler->Handle( s_pFilename, s_Line, s_LogLevel, buffer );

	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _s_LogLevel
	push	eax
	mov	ecx, DWORD PTR _s_Line
	push	ecx
	mov	edx, DWORD PTR _s_pFilename
	push	edx
	mov	eax, DWORD PTR _phandler$113528[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _phandler$113528[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN1@LogMessage:

; 79   : 			}

	jmp	SHORT $LN3@LogMessage
$LN5@LogMessage:

; 80   : 		}
; 81   : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?LogMessage@Ogre@@YAXPBDZZ ENDP				; Ogre::LogMessage
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrelog.h
_TEXT	ENDS
;	COMDAT ?getLevels@LogHandler@Ogre@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLevels@LogHandler@Ogre@@QAEIXZ PROC			; Ogre::LogHandler::getLevels, COMDAT
; _this$ = ecx

; 31   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 32   : 			return m_LevelFlags;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 33   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getLevels@LogHandler@Ogre@@QAEIXZ ENDP			; Ogre::LogHandler::getLevels
_TEXT	ENDS
END
