; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\sdk\ozcollide\intr_boxbox.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??AVec3f@ozcollide@@QBEMH@Z			; ozcollide::Vec3f::operator[]
PUBLIC	_fabsf
PUBLIC	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator-
PUBLIC	__real@358637bd
PUBLIC	?testIntersectionAABB_OBB@ozcollide@@YA_NABVBox@1@ABVOBB@1@@Z ; ozcollide::testIntersectionAABB_OBB
EXTRN	_memcpy:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@358637bd
; File i:\svnroot\client\sdk\ozcollide\intr_boxbox.cpp
CONST	SEGMENT
__real@358637bd DD 0358637bdr			; 1e-006
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
tv981 = -648						; size = 4
tv1584 = -644						; size = 8
tv1582 = -636						; size = 8
tv1580 = -628						; size = 8
tv1578 = -620						; size = 8
tv926 = -612						; size = 4
tv1576 = -608						; size = 8
tv1574 = -600						; size = 8
tv1572 = -592						; size = 8
tv1570 = -584						; size = 8
tv871 = -576						; size = 4
tv1568 = -572						; size = 8
tv1566 = -564						; size = 8
tv1564 = -556						; size = 8
tv1562 = -548						; size = 8
tv818 = -540						; size = 4
tv1560 = -536						; size = 8
tv1558 = -528						; size = 8
tv1556 = -520						; size = 8
tv1554 = -512						; size = 8
tv763 = -504						; size = 4
tv1552 = -500						; size = 8
tv1550 = -492						; size = 8
tv1548 = -484						; size = 8
tv1546 = -476						; size = 8
tv708 = -468						; size = 4
tv1544 = -464						; size = 8
tv1542 = -456						; size = 8
tv1540 = -448						; size = 8
tv1538 = -440						; size = 8
tv655 = -432						; size = 4
tv1536 = -428						; size = 8
tv1534 = -420						; size = 8
tv1532 = -412						; size = 8
tv1530 = -404						; size = 8
tv601 = -396						; size = 4
tv1528 = -392						; size = 8
tv1526 = -384						; size = 8
tv1524 = -376						; size = 8
tv1522 = -368						; size = 8
tv547 = -360						; size = 4
tv1520 = -356						; size = 8
tv1518 = -348						; size = 8
tv1516 = -340						; size = 8
tv1514 = -332						; size = 8
tv492 = -324						; size = 4
tv1512 = -320						; size = 8
tv1510 = -312						; size = 8
tv1508 = -304						; size = 8
tv1506 = -296						; size = 8
tv1504 = -288						; size = 8
tv432 = -280						; size = 4
tv1502 = -276						; size = 8
tv1500 = -268						; size = 8
tv1498 = -260						; size = 8
tv1496 = -252						; size = 8
tv1494 = -244						; size = 8
tv372 = -236						; size = 4
tv1492 = -232						; size = 8
tv1490 = -224						; size = 8
tv1488 = -216						; size = 8
tv333 = -208						; size = 4
tv1486 = -204						; size = 8
tv1484 = -196						; size = 8
tv1482 = -188						; size = 8
tv294 = -180						; size = 4
tv1480 = -176						; size = 8
tv1478 = -168						; size = 8
tv1476 = -160						; size = 8
tv1474 = -152						; size = 8
tv1472 = -144						; size = 8
tv236 = -136						; size = 4
tv1470 = -132						; size = 8
tv1468 = -124						; size = 8
tv1466 = -116						; size = 8
_t$ = -108						; size = 4
_r$ = -104						; size = 4
_Bf$ = -100						; size = 36
_b$ = -64						; size = 4
_reps$ = -60						; size = 4
_B$ = -56						; size = 36
_s$ = -20						; size = 4
_a$ = -16						; size = 4
_T$ = -12						; size = 12
__aabb$ = 8						; size = 4
__obb$ = 12						; size = 4
?testIntersectionAABB_OBB@ozcollide@@YA_NABVBox@1@ABVOBB@1@@Z PROC ; ozcollide::testIntersectionAABB_OBB

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 648				; 00000288H

; 33   : 	float t, s;
; 34   : 	int r;
; 35   : 	float Bf[3][3];
; 36   : 	float reps = (float) 1e-6;

	fld	DWORD PTR __real@358637bd
	fstp	DWORD PTR _reps$[ebp]

; 37   : 
; 38   : 	const Vec3f &a = _aabb.extent;

	mov	eax, DWORD PTR __aabb$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _a$[ebp], eax

; 39   : 	const Vec3f &b = _obb.extent;

	mov	ecx, DWORD PTR __obb$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _b$[ebp], ecx

; 40   : 	const Vec3f T = _obb.center - _aabb.center;

	mov	edx, DWORD PTR __aabb$[ebp]
	push	edx
	lea	eax, DWORD PTR _T$[ebp]
	push	eax
	mov	ecx, DWORD PTR __obb$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 41   : 
; 42   : //	float B[3][3];
; 43   : 
; 44   : //	const Matrix3x3 &m = _obb.matrix;
; 45   : //	B[0][0] = m._11;	B[0][1] = m._21;	B[0][2] = m._31;
; 46   : //	B[1][0] = m._12;	B[1][1] = m._22;	B[1][2] = m._32;
; 47   : //	B[2][0] = m._13;	B[2][1] = m._23;	B[2][2] = m._33;
; 48   : 
; 49   : 	typedef float _mat3x3[3][3];
; 50   : 	_mat3x3 B;
; 51   : 	memcpy(B, _obb.matrix.m_, sizeof(_mat3x3));

	push	36					; 00000024H
	mov	ecx, DWORD PTR __obb$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	lea	edx, DWORD PTR _B$[ebp]
	push	edx
	call	_memcpy

; 52   :   
; 53   : 	// Bf = fabs(B)
; 54   : 	Bf[0][0] = fabsf(B[0][0]);  Bf[0][0] += reps;

	add	esp, 8
	fld	DWORD PTR _B$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _Bf$[ebp]
	fld	DWORD PTR _Bf$[ebp]
	fadd	DWORD PTR _reps$[ebp]
	fstp	DWORD PTR _Bf$[ebp]

; 55   : 	Bf[0][1] = fabsf(B[0][1]);  Bf[0][1] += reps;

	push	ecx
	fld	DWORD PTR _B$[ebp+4]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _Bf$[ebp+4]
	fld	DWORD PTR _Bf$[ebp+4]
	fadd	DWORD PTR _reps$[ebp]
	fstp	DWORD PTR _Bf$[ebp+4]

; 56   : 	Bf[0][2] = fabsf(B[0][2]);  Bf[0][2] += reps;

	push	ecx
	fld	DWORD PTR _B$[ebp+8]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _Bf$[ebp+8]
	fld	DWORD PTR _Bf$[ebp+8]
	fadd	DWORD PTR _reps$[ebp]
	fstp	DWORD PTR _Bf$[ebp+8]

; 57   : 	Bf[1][0] = fabsf(B[1][0]);  Bf[1][0] += reps;

	push	ecx
	fld	DWORD PTR _B$[ebp+12]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _Bf$[ebp+12]
	fld	DWORD PTR _Bf$[ebp+12]
	fadd	DWORD PTR _reps$[ebp]
	fstp	DWORD PTR _Bf$[ebp+12]

; 58   : 	Bf[1][1] = fabsf(B[1][1]);  Bf[1][1] += reps;

	push	ecx
	fld	DWORD PTR _B$[ebp+16]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _Bf$[ebp+16]
	fld	DWORD PTR _Bf$[ebp+16]
	fadd	DWORD PTR _reps$[ebp]
	fstp	DWORD PTR _Bf$[ebp+16]

; 59   : 	Bf[1][2] = fabsf(B[1][2]);  Bf[1][2] += reps;

	push	ecx
	fld	DWORD PTR _B$[ebp+20]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _Bf$[ebp+20]
	fld	DWORD PTR _Bf$[ebp+20]
	fadd	DWORD PTR _reps$[ebp]
	fstp	DWORD PTR _Bf$[ebp+20]

; 60   : 	Bf[2][0] = fabsf(B[2][0]);  Bf[2][0] += reps;

	push	ecx
	fld	DWORD PTR _B$[ebp+24]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _Bf$[ebp+24]
	fld	DWORD PTR _Bf$[ebp+24]
	fadd	DWORD PTR _reps$[ebp]
	fstp	DWORD PTR _Bf$[ebp+24]

; 61   : 	Bf[2][1] = fabsf(B[2][1]);  Bf[2][1] += reps;

	push	ecx
	fld	DWORD PTR _B$[ebp+28]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _Bf$[ebp+28]
	fld	DWORD PTR _Bf$[ebp+28]
	fadd	DWORD PTR _reps$[ebp]
	fstp	DWORD PTR _Bf$[ebp+28]

; 62   : 	Bf[2][2] = fabsf(B[2][2]);  Bf[2][2] += reps;

	push	ecx
	fld	DWORD PTR _B$[ebp+32]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _Bf$[ebp+32]
	fld	DWORD PTR _Bf$[ebp+32]
	fadd	DWORD PTR _reps$[ebp]
	fstp	DWORD PTR _Bf$[ebp+32]

; 63   : 
; 64   : 	// if any of these tests are one-sided, then the polyhedra are disjoint
; 65   : 	r = 1;

	mov	DWORD PTR _r$[ebp], 1

; 66   : 
; 67   : 	// A1 x A2 = A0
; 68   : 	t = fabsf(T[0]);

	push	0
	lea	ecx, DWORD PTR _T$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _t$[ebp]

; 69   : 	r &= (t <= (a[0] + b[0] * Bf[0][0] + b[1] * Bf[0][1] + b[2] * Bf[0][2]));

	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	0
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1466[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp]
	fadd	QWORD PTR tv1466[ebp]
	push	1
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1468[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+4]
	fadd	QWORD PTR tv1468[ebp]
	push	2
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1470[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+8]
	fadd	QWORD PTR tv1470[ebp]
	fld	DWORD PTR _t$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN18@testInters
	mov	DWORD PTR tv236[ebp], 1
	jmp	SHORT $LN19@testInters
$LN18@testInters:
	mov	DWORD PTR tv236[ebp], 0
$LN19@testInters:
	mov	eax, DWORD PTR _r$[ebp]
	and	eax, DWORD PTR tv236[ebp]
	mov	DWORD PTR _r$[ebp], eax

; 70   : 	if (!r) return false;

	jne	SHORT $LN15@testInters
	xor	al, al
	jmp	$LN16@testInters
$LN15@testInters:

; 71   :   
; 72   : 	// B1 x B2 = B0
; 73   : 	s = T[0]*B[0][0] + T[1]*B[1][0] + T[2]*B[2][0];

	push	0
	lea	ecx, DWORD PTR _T$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp]
	push	1
	lea	ecx, DWORD PTR _T$[ebp]
	fstp	QWORD PTR tv1472[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+12]
	fadd	QWORD PTR tv1472[ebp]
	push	2
	lea	ecx, DWORD PTR _T$[ebp]
	fstp	QWORD PTR tv1474[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+24]
	fadd	QWORD PTR tv1474[ebp]
	fstp	DWORD PTR _s$[ebp]

; 74   : 	t = fabsf(s);

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _t$[ebp]

; 75   : 	r &= ( t <= (b[0] + a[0] * Bf[0][0] + a[1] * Bf[1][0] + a[2] * Bf[2][0]));

	push	0
	mov	ecx, DWORD PTR _b$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1476[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp]
	fadd	QWORD PTR tv1476[ebp]
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1478[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+12]
	fadd	QWORD PTR tv1478[ebp]
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1480[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+24]
	fadd	QWORD PTR tv1480[ebp]
	fld	DWORD PTR _t$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN20@testInters
	mov	DWORD PTR tv294[ebp], 1
	jmp	SHORT $LN21@testInters
$LN20@testInters:
	mov	DWORD PTR tv294[ebp], 0
$LN21@testInters:
	mov	ecx, DWORD PTR _r$[ebp]
	and	ecx, DWORD PTR tv294[ebp]
	mov	DWORD PTR _r$[ebp], ecx

; 76   : 	if (!r) return false;

	jne	SHORT $LN14@testInters
	xor	al, al
	jmp	$LN16@testInters
$LN14@testInters:

; 77   :     
; 78   : 	// A2 x A0 = A1
; 79   : 	t = fabsf(T[1]);

	push	1
	lea	ecx, DWORD PTR _T$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _t$[ebp]

; 80   : 	r &= ( t <=  (a[1] + b[0] * Bf[1][0] + b[1] * Bf[1][1] + b[2] * Bf[1][2]));

	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	0
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1482[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+12]
	fadd	QWORD PTR tv1482[ebp]
	push	1
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1484[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+16]
	fadd	QWORD PTR tv1484[ebp]
	push	2
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1486[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+20]
	fadd	QWORD PTR tv1486[ebp]
	fld	DWORD PTR _t$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN22@testInters
	mov	DWORD PTR tv333[ebp], 1
	jmp	SHORT $LN23@testInters
$LN22@testInters:
	mov	DWORD PTR tv333[ebp], 0
$LN23@testInters:
	mov	edx, DWORD PTR _r$[ebp]
	and	edx, DWORD PTR tv333[ebp]
	mov	DWORD PTR _r$[ebp], edx

; 81   : 	if (!r) return false;

	jne	SHORT $LN13@testInters
	xor	al, al
	jmp	$LN16@testInters
$LN13@testInters:

; 82   : 
; 83   : 	// A0 x A1 = A2
; 84   : 	t = fabsf(T[2]);

	push	2
	lea	ecx, DWORD PTR _T$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _t$[ebp]

; 85   : 	r &= ( t <= (a[2] + b[0] * Bf[2][0] + b[1] * Bf[2][1] + b[2] * Bf[2][2]));

	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	0
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1488[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+24]
	fadd	QWORD PTR tv1488[ebp]
	push	1
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1490[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+28]
	fadd	QWORD PTR tv1490[ebp]
	push	2
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1492[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+32]
	fadd	QWORD PTR tv1492[ebp]
	fld	DWORD PTR _t$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN24@testInters
	mov	DWORD PTR tv372[ebp], 1
	jmp	SHORT $LN25@testInters
$LN24@testInters:
	mov	DWORD PTR tv372[ebp], 0
$LN25@testInters:
	mov	eax, DWORD PTR _r$[ebp]
	and	eax, DWORD PTR tv372[ebp]
	mov	DWORD PTR _r$[ebp], eax

; 86   : 	if (!r) return false;

	jne	SHORT $LN12@testInters
	xor	al, al
	jmp	$LN16@testInters
$LN12@testInters:

; 87   : 
; 88   : 	// B2 x B0 = B1
; 89   : 	s = T[0]*B[0][1] + T[1]*B[1][1] + T[2]*B[2][1];

	push	0
	lea	ecx, DWORD PTR _T$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+4]
	push	1
	lea	ecx, DWORD PTR _T$[ebp]
	fstp	QWORD PTR tv1494[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+16]
	fadd	QWORD PTR tv1494[ebp]
	push	2
	lea	ecx, DWORD PTR _T$[ebp]
	fstp	QWORD PTR tv1496[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+28]
	fadd	QWORD PTR tv1496[ebp]
	fstp	DWORD PTR _s$[ebp]

; 90   : 	t = fabsf(s);

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _t$[ebp]

; 91   : 	r &= ( t <= (b[1] + a[0] * Bf[0][1] + a[1] * Bf[1][1] + a[2] * Bf[2][1]));

	push	1
	mov	ecx, DWORD PTR _b$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1498[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+4]
	fadd	QWORD PTR tv1498[ebp]
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1500[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+16]
	fadd	QWORD PTR tv1500[ebp]
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1502[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+28]
	fadd	QWORD PTR tv1502[ebp]
	fld	DWORD PTR _t$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN26@testInters
	mov	DWORD PTR tv432[ebp], 1
	jmp	SHORT $LN27@testInters
$LN26@testInters:
	mov	DWORD PTR tv432[ebp], 0
$LN27@testInters:
	mov	ecx, DWORD PTR _r$[ebp]
	and	ecx, DWORD PTR tv432[ebp]
	mov	DWORD PTR _r$[ebp], ecx

; 92   : 	if (!r) return false;

	jne	SHORT $LN11@testInters
	xor	al, al
	jmp	$LN16@testInters
$LN11@testInters:

; 93   : 
; 94   : 	// B0 x B1 = B2
; 95   : 	s = T[0]*B[0][2] + T[1]*B[1][2] + T[2]*B[2][2];

	push	0
	lea	ecx, DWORD PTR _T$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+8]
	push	1
	lea	ecx, DWORD PTR _T$[ebp]
	fstp	QWORD PTR tv1504[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+20]
	fadd	QWORD PTR tv1504[ebp]
	push	2
	lea	ecx, DWORD PTR _T$[ebp]
	fstp	QWORD PTR tv1506[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+32]
	fadd	QWORD PTR tv1506[ebp]
	fstp	DWORD PTR _s$[ebp]

; 96   : 	t = fabsf(s);

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _t$[ebp]

; 97   : 	r &= ( t <= (b[2] + a[0] * Bf[0][2] + a[1] * Bf[1][2] + a[2] * Bf[2][2]));

	push	2
	mov	ecx, DWORD PTR _b$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1508[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+8]
	fadd	QWORD PTR tv1508[ebp]
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1510[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+20]
	fadd	QWORD PTR tv1510[ebp]
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1512[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+32]
	fadd	QWORD PTR tv1512[ebp]
	fld	DWORD PTR _t$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN28@testInters
	mov	DWORD PTR tv492[ebp], 1
	jmp	SHORT $LN29@testInters
$LN28@testInters:
	mov	DWORD PTR tv492[ebp], 0
$LN29@testInters:
	mov	edx, DWORD PTR _r$[ebp]
	and	edx, DWORD PTR tv492[ebp]
	mov	DWORD PTR _r$[ebp], edx

; 98   : 	if (!r) return false;

	jne	SHORT $LN10@testInters
	xor	al, al
	jmp	$LN16@testInters
$LN10@testInters:

; 99   : 
; 100  : 	// A0 x B0
; 101  : 	s = T[2] * B[1][0] - T[1] * B[2][0];

	push	2
	lea	ecx, DWORD PTR _T$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+12]
	push	1
	lea	ecx, DWORD PTR _T$[ebp]
	fstp	QWORD PTR tv1514[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+24]
	fsubr	QWORD PTR tv1514[ebp]
	fstp	DWORD PTR _s$[ebp]

; 102  : 	t = fabsf(s);

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _t$[ebp]

; 103  :   
; 104  : 	r &= ( t <= (a[1] * Bf[2][0] + a[2] * Bf[1][0] + b[1] * Bf[0][2] + b[2] * Bf[0][1]));

	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+24]
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1516[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+12]
	fadd	QWORD PTR tv1516[ebp]
	push	1
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1518[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+8]
	fadd	QWORD PTR tv1518[ebp]
	push	2
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1520[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+4]
	fadd	QWORD PTR tv1520[ebp]
	fld	DWORD PTR _t$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN30@testInters
	mov	DWORD PTR tv547[ebp], 1
	jmp	SHORT $LN31@testInters
$LN30@testInters:
	mov	DWORD PTR tv547[ebp], 0
$LN31@testInters:
	mov	eax, DWORD PTR _r$[ebp]
	and	eax, DWORD PTR tv547[ebp]
	mov	DWORD PTR _r$[ebp], eax

; 105  : 	if (!r) return false;

	jne	SHORT $LN9@testInters
	xor	al, al
	jmp	$LN16@testInters
$LN9@testInters:

; 106  :   
; 107  : 	// A0 x B1
; 108  : 	s = T[2] * B[1][1] - T[1] * B[2][1];

	push	2
	lea	ecx, DWORD PTR _T$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+16]
	push	1
	lea	ecx, DWORD PTR _T$[ebp]
	fstp	QWORD PTR tv1522[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+28]
	fsubr	QWORD PTR tv1522[ebp]
	fstp	DWORD PTR _s$[ebp]

; 109  : 	t = fabsf(s);

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _t$[ebp]

; 110  : 	r &= ( t <= (a[1] * Bf[2][1] + a[2] * Bf[1][1] + b[0] * Bf[0][2] + b[2] * Bf[0][0]));

	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+28]
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1524[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+16]
	fadd	QWORD PTR tv1524[ebp]
	push	0
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1526[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+8]
	fadd	QWORD PTR tv1526[ebp]
	push	2
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1528[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp]
	fadd	QWORD PTR tv1528[ebp]
	fld	DWORD PTR _t$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN32@testInters
	mov	DWORD PTR tv601[ebp], 1
	jmp	SHORT $LN33@testInters
$LN32@testInters:
	mov	DWORD PTR tv601[ebp], 0
$LN33@testInters:
	mov	ecx, DWORD PTR _r$[ebp]
	and	ecx, DWORD PTR tv601[ebp]
	mov	DWORD PTR _r$[ebp], ecx

; 111  : 	if (!r) return false;

	jne	SHORT $LN8@testInters
	xor	al, al
	jmp	$LN16@testInters
$LN8@testInters:

; 112  : 
; 113  : 	// A0 x B2
; 114  : 	s = T[2] * B[1][2] - T[1] * B[2][2];

	push	2
	lea	ecx, DWORD PTR _T$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+20]
	push	1
	lea	ecx, DWORD PTR _T$[ebp]
	fstp	QWORD PTR tv1530[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+32]
	fsubr	QWORD PTR tv1530[ebp]
	fstp	DWORD PTR _s$[ebp]

; 115  : 	t = fabsf(s);

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _t$[ebp]

; 116  : 	r &= ( t <= (a[1] * Bf[2][2] + a[2] * Bf[1][2] + b[0] * Bf[0][1] + b[1] * Bf[0][0]));

	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+32]
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1532[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+20]
	fadd	QWORD PTR tv1532[ebp]
	push	0
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1534[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+4]
	fadd	QWORD PTR tv1534[ebp]
	push	1
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1536[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp]
	fadd	QWORD PTR tv1536[ebp]
	fld	DWORD PTR _t$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN34@testInters
	mov	DWORD PTR tv655[ebp], 1
	jmp	SHORT $LN35@testInters
$LN34@testInters:
	mov	DWORD PTR tv655[ebp], 0
$LN35@testInters:
	mov	edx, DWORD PTR _r$[ebp]
	and	edx, DWORD PTR tv655[ebp]
	mov	DWORD PTR _r$[ebp], edx

; 117  : 	if (!r) return false;

	jne	SHORT $LN7@testInters
	xor	al, al
	jmp	$LN16@testInters
$LN7@testInters:

; 118  : 
; 119  : 	// A1 x B0
; 120  : 	s = T[0] * B[2][0] - T[2] * B[0][0];

	push	0
	lea	ecx, DWORD PTR _T$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+24]
	push	2
	lea	ecx, DWORD PTR _T$[ebp]
	fstp	QWORD PTR tv1538[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp]
	fsubr	QWORD PTR tv1538[ebp]
	fstp	DWORD PTR _s$[ebp]

; 121  : 	t = fabsf(s);

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _t$[ebp]

; 122  : 	r &= ( t <= (a[0] * Bf[2][0] + a[2] * Bf[0][0] + b[1] * Bf[1][2] + b[2] * Bf[1][1]));

	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+24]
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1540[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp]
	fadd	QWORD PTR tv1540[ebp]
	push	1
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1542[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+20]
	fadd	QWORD PTR tv1542[ebp]
	push	2
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1544[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+16]
	fadd	QWORD PTR tv1544[ebp]
	fld	DWORD PTR _t$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN36@testInters
	mov	DWORD PTR tv708[ebp], 1
	jmp	SHORT $LN37@testInters
$LN36@testInters:
	mov	DWORD PTR tv708[ebp], 0
$LN37@testInters:
	mov	eax, DWORD PTR _r$[ebp]
	and	eax, DWORD PTR tv708[ebp]
	mov	DWORD PTR _r$[ebp], eax

; 123  : 	if (!r) return false;

	jne	SHORT $LN6@testInters
	xor	al, al
	jmp	$LN16@testInters
$LN6@testInters:

; 124  : 
; 125  : 	// A1 x B1
; 126  : 	s = T[0] * B[2][1] - T[2] * B[0][1];

	push	0
	lea	ecx, DWORD PTR _T$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+28]
	push	2
	lea	ecx, DWORD PTR _T$[ebp]
	fstp	QWORD PTR tv1546[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+4]
	fsubr	QWORD PTR tv1546[ebp]
	fstp	DWORD PTR _s$[ebp]

; 127  : 	t = fabsf(s);

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _t$[ebp]

; 128  : 	r &= ( t <= (a[0] * Bf[2][1] + a[2] * Bf[0][1] +  b[0] * Bf[1][2] + b[2] * Bf[1][0]));

	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+28]
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1548[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+4]
	fadd	QWORD PTR tv1548[ebp]
	push	0
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1550[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+20]
	fadd	QWORD PTR tv1550[ebp]
	push	2
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1552[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+12]
	fadd	QWORD PTR tv1552[ebp]
	fld	DWORD PTR _t$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN38@testInters
	mov	DWORD PTR tv763[ebp], 1
	jmp	SHORT $LN39@testInters
$LN38@testInters:
	mov	DWORD PTR tv763[ebp], 0
$LN39@testInters:
	mov	ecx, DWORD PTR _r$[ebp]
	and	ecx, DWORD PTR tv763[ebp]
	mov	DWORD PTR _r$[ebp], ecx

; 129  : 	if (!r) return false;

	jne	SHORT $LN5@testInters
	xor	al, al
	jmp	$LN16@testInters
$LN5@testInters:

; 130  : 
; 131  : 	// A1 x B2
; 132  : 	s = T[0] * B[2][2] - T[2] * B[0][2];

	push	0
	lea	ecx, DWORD PTR _T$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+32]
	push	2
	lea	ecx, DWORD PTR _T$[ebp]
	fstp	QWORD PTR tv1554[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+8]
	fsubr	QWORD PTR tv1554[ebp]
	fstp	DWORD PTR _s$[ebp]

; 133  : 	t = fabsf(s);

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _t$[ebp]

; 134  : 	r &= (t <= (a[0] * Bf[2][2] + a[2] * Bf[0][2] +  b[0] * Bf[1][1] + b[1] * Bf[1][0]));

	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+32]
	push	2
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1556[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+8]
	fadd	QWORD PTR tv1556[ebp]
	push	0
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1558[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+16]
	fadd	QWORD PTR tv1558[ebp]
	push	1
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1560[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+12]
	fadd	QWORD PTR tv1560[ebp]
	fld	DWORD PTR _t$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN40@testInters
	mov	DWORD PTR tv818[ebp], 1
	jmp	SHORT $LN41@testInters
$LN40@testInters:
	mov	DWORD PTR tv818[ebp], 0
$LN41@testInters:
	mov	edx, DWORD PTR _r$[ebp]
	and	edx, DWORD PTR tv818[ebp]
	mov	DWORD PTR _r$[ebp], edx

; 135  : 	if (!r) return false;

	jne	SHORT $LN4@testInters
	xor	al, al
	jmp	$LN16@testInters
$LN4@testInters:

; 136  : 
; 137  : 	// A2 x B0
; 138  : 	s = T[1] * B[0][0] - T[0] * B[1][0];

	push	1
	lea	ecx, DWORD PTR _T$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp]
	push	0
	lea	ecx, DWORD PTR _T$[ebp]
	fstp	QWORD PTR tv1562[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+12]
	fsubr	QWORD PTR tv1562[ebp]
	fstp	DWORD PTR _s$[ebp]

; 139  : 	t = fabsf(s);

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _t$[ebp]

; 140  : 	r &= (t <= (a[0] * Bf[1][0] + a[1] * Bf[0][0] +  b[1] * Bf[2][2] + b[2] * Bf[2][1]));

	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+12]
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1564[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp]
	fadd	QWORD PTR tv1564[ebp]
	push	1
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1566[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+32]
	fadd	QWORD PTR tv1566[ebp]
	push	2
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1568[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+28]
	fadd	QWORD PTR tv1568[ebp]
	fld	DWORD PTR _t$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN42@testInters
	mov	DWORD PTR tv871[ebp], 1
	jmp	SHORT $LN43@testInters
$LN42@testInters:
	mov	DWORD PTR tv871[ebp], 0
$LN43@testInters:
	mov	eax, DWORD PTR _r$[ebp]
	and	eax, DWORD PTR tv871[ebp]
	mov	DWORD PTR _r$[ebp], eax

; 141  : 	if (!r) return false;

	jne	SHORT $LN3@testInters
	xor	al, al
	jmp	$LN16@testInters
$LN3@testInters:

; 142  : 
; 143  : 	// A2 x B1
; 144  : 	s = T[1] * B[0][1] - T[0] * B[1][1];

	push	1
	lea	ecx, DWORD PTR _T$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+4]
	push	0
	lea	ecx, DWORD PTR _T$[ebp]
	fstp	QWORD PTR tv1570[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+16]
	fsubr	QWORD PTR tv1570[ebp]
	fstp	DWORD PTR _s$[ebp]

; 145  : 	t = fabsf(s);

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _t$[ebp]

; 146  : 	r &= ( t <= (a[0] * Bf[1][1] + a[1] * Bf[0][1] + b[0] * Bf[2][2] + b[2] * Bf[2][0]));

	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+16]
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1572[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+4]
	fadd	QWORD PTR tv1572[ebp]
	push	0
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1574[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+32]
	fadd	QWORD PTR tv1574[ebp]
	push	2
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1576[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+24]
	fadd	QWORD PTR tv1576[ebp]
	fld	DWORD PTR _t$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN44@testInters
	mov	DWORD PTR tv926[ebp], 1
	jmp	SHORT $LN45@testInters
$LN44@testInters:
	mov	DWORD PTR tv926[ebp], 0
$LN45@testInters:
	mov	ecx, DWORD PTR _r$[ebp]
	and	ecx, DWORD PTR tv926[ebp]
	mov	DWORD PTR _r$[ebp], ecx

; 147  : 	if (!r) return false;

	jne	SHORT $LN2@testInters
	xor	al, al
	jmp	$LN16@testInters
$LN2@testInters:

; 148  : 
; 149  : 	// A2 x B2
; 150  : 	s = T[1] * B[0][2] - T[0] * B[1][2];

	push	1
	lea	ecx, DWORD PTR _T$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+8]
	push	0
	lea	ecx, DWORD PTR _T$[ebp]
	fstp	QWORD PTR tv1578[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _B$[ebp+20]
	fsubr	QWORD PTR tv1578[ebp]
	fstp	DWORD PTR _s$[ebp]

; 151  : 	t = fabsf(s);

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _t$[ebp]

; 152  : 	r &= ( t <= (a[0] * Bf[1][2] + a[1] * Bf[0][2] +  b[0] * Bf[2][1] + b[1] * Bf[2][0]));

	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+20]
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	QWORD PTR tv1580[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+8]
	fadd	QWORD PTR tv1580[ebp]
	push	0
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1582[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+28]
	fadd	QWORD PTR tv1582[ebp]
	push	1
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	QWORD PTR tv1584[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	fmul	DWORD PTR _Bf$[ebp+24]
	fadd	QWORD PTR tv1584[ebp]
	fld	DWORD PTR _t$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN46@testInters
	mov	DWORD PTR tv981[ebp], 1
	jmp	SHORT $LN47@testInters
$LN46@testInters:
	mov	DWORD PTR tv981[ebp], 0
$LN47@testInters:
	mov	edx, DWORD PTR _r$[ebp]
	and	edx, DWORD PTR tv981[ebp]
	mov	DWORD PTR _r$[ebp], edx

; 153  : 	if (!r) return false;

	jne	SHORT $LN1@testInters
	xor	al, al
	jmp	SHORT $LN16@testInters
$LN1@testInters:

; 154  : 
; 155  : 	return true;

	mov	al, 1
$LN16@testInters:

; 156  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?testIntersectionAABB_OBB@ozcollide@@YA_NABVBox@1@ABVOBB@1@@Z ENDP ; ozcollide::testIntersectionAABB_OBB
_TEXT	ENDS
EXTRN	_fabs:PROC
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 384  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
PUBLIC	??0Vec3f@ozcollide@@QAE@MMM@Z			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
;	COMDAT ??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator-, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		return Vec3f(x - _v.x, y - _v.y, z - _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 96   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0Vec3f@ozcollide@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Vec3f@ozcollide@@QAE@MMM@Z PROC			; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __z$[ebp]
	fstp	DWORD PTR [edx+8]

; 43   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vec3f@ozcollide@@QAE@MMM@Z ENDP			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??AVec3f@ozcollide@@QBEMH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_val$ = -4						; size = 4
__i$ = 8						; size = 4
??AVec3f@ozcollide@@QBEMH@Z PROC			; ozcollide::Vec3f::operator[], COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		const float *val = &x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _val$[ebp], eax

; 148  : 		return val[_i];

	mov	ecx, DWORD PTR __i$[ebp]
	mov	edx, DWORD PTR _val$[ebp]
	fld	DWORD PTR [edx+ecx*4]

; 149  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??AVec3f@ozcollide@@QBEMH@Z ENDP			; ozcollide::Vec3f::operator[]
_TEXT	ENDS
END
