; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\sdk\ozcollide\intr_frustumsphere.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?testIntersectionFrustumSphere@ozcollide@@YA_NABVFrustum@1@ABVSphere@1@@Z ; ozcollide::testIntersectionFrustumSphere
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\intr_frustumsphere.cpp
_TEXT	SEGMENT
_plane$6387 = -12					; size = 4
_i$ = -8						; size = 4
_res$ = -4						; size = 4
__f$ = 8						; size = 4
__s$ = 12						; size = 4
?testIntersectionFrustumSphere@ozcollide@@YA_NABVFrustum@1@ABVSphere@1@@Z PROC ; ozcollide::testIntersectionFrustumSphere

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 35   : 	int i;
; 36   : 	float res;
; 37   : 
; 38   : 	for (i = 0; i < 6; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@testInters
$LN3@testInters:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@testInters:
	cmp	DWORD PTR _i$[ebp], 6
	jge	SHORT $LN2@testInters

; 39   : 		const Plane &plane = _f.planes[i];

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __f$[ebp]
	mov	DWORD PTR _plane$6387[ebp], ecx

; 40   : 		res =	_s.center.x * plane.a +
; 41   : 				_s.center.y * plane.b +
; 42   : 				_s.center.z * plane.c +
; 43   : 				plane.d;

	mov	edx, DWORD PTR __s$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _plane$6387[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR __s$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _plane$6387[ebp]
	fmul	DWORD PTR [edx+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR __s$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _plane$6387[ebp]
	fmul	DWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _plane$6387[ebp]
	fadd	DWORD PTR [edx+12]
	fstp	DWORD PTR _res$[ebp]

; 44   : 		if (res < -_s.radius)

	mov	eax, DWORD PTR __s$[ebp]
	fld	DWORD PTR [eax+12]
	fchs
	fld	DWORD PTR _res$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@testInters

; 45   : 			return false;

	xor	al, al
	jmp	SHORT $LN5@testInters
$LN1@testInters:

; 46   : 	}

	jmp	SHORT $LN3@testInters
$LN2@testInters:

; 47   : 	return true;

	mov	al, 1
$LN5@testInters:

; 48   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?testIntersectionFrustumSphere@ozcollide@@YA_NABVFrustum@1@ABVSphere@1@@Z ENDP ; ozcollide::testIntersectionFrustumSphere
_TEXT	ENDS
END
