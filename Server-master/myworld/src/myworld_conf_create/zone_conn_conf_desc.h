/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
********************************************************************/

#ifndef ZONE_CONN_CONF_DESC_H
#define ZONE_CONN_CONF_DESC_H


#ifndef TDR_METALIB_ZONE_CONN_VERSION 
#define TDR_METALIB_ZONE_CONN_VERSION 	10 /*version of metalib*/
#endif

#ifndef TDR_METALIB_ZONE_CONN_HASH 
#define TDR_METALIB_ZONE_CONN_HASH 	"3335754ad7d0c49e83c3efc2b3868a6f" /*hash of metalib*/
#endif
/*   
 User Define Macros.   */

#define TCONND_NAME_LEN                          	32
#define TCONND_URL_LEN                           	128
#define TCONND_MAX_TDR                           	16
#define TCONND_MAX_PDU                           	16
#define TCONND_MAX_NETTRANS                      	16
#define TCONND_DEF_SENDCHECK_INTERVAL            	10
#define TCONND_DEF_RECVCHECK_INTERVAL            	10
#define TCONND_DEFAULT_UP_PKG_LEN                	4096
#define TCONND_DEFAULT_DOWN_PKG_LEN              	65536

/* PDULenParserID*/
enum tagPDULenParserID 
{
    PDULENPARSERID_BY_TDR = 0, 	/* 使用TDR方法进行分析 */
    PDULENPARSERID_BY_NULL = 1, 	/* 通过数据中出现NULL('\0')字符分析长度 */
    PDULENPARSERID_BY_AUTH = 2, 	/* 通过数据中出现NULL('\0')字符分析长度 */
    PDULENPARSERID_BY_NONE = 10, 	/* Do nothing ,just forward */
};


#ifdef __cplusplus
extern "C" {
#endif

/*   Define c types.   */


#ifndef TDR_CUSTOM_C_TYPES
#define TDR_CUSTOM_C_TYPES
#if defined(WIN32) &&  _MSC_VER < 1300
typedef __int64 tdr_longlong;
typedef unsigned __int64 tdr_ulonglong;
#else
typedef long long tdr_longlong;
typedef unsigned long long tdr_ulonglong;
#endif  /*defined(WIN32) &&  _MSC_VER < 1300*/
typedef unsigned short tdr_wchar_t;  /**<Wchar基本数据类型*/
typedef unsigned int tdr_date_t;	/**<data基本数据类型*/
typedef unsigned int tdr_time_t;	/**<time基本数据类型*/
typedef tdr_ulonglong tdr_datetime_t;  /**<datetime基本数据类型*/
typedef unsigned long int tdr_ip_t;  /**<IPv4数据类型*/
#endif /*TDR_CUSTOM_C_TYPES*/



/*   Structs/unions prototype.   */

struct tagTransLimit;
typedef struct tagTransLimit                       	TRANSLIMIT;
typedef struct tagTransLimit                       	*LPTRANSLIMIT;

struct tagTransMetric;
typedef struct tagTransMetric                      	TRANSMETRIC;
typedef struct tagTransMetric                      	*LPTRANSMETRIC;

struct tagConnLimit;
typedef struct tagConnLimit                        	CONNLIMIT;
typedef struct tagConnLimit                        	*LPCONNLIMIT;

struct tagConnStatInfo;
typedef struct tagConnStatInfo                     	CONNSTATINFO;
typedef struct tagConnStatInfo                     	*LPCONNSTATINFO;

struct tagConnMetric;
typedef struct tagConnMetric                       	CONNMETRIC;
typedef struct tagConnMetric                       	*LPCONNMETRIC;

struct tagTDR;
typedef struct tagTDR                              	TDR;
typedef struct tagTDR                              	*LPTDR;

struct tagTDRList;
typedef struct tagTDRList                          	TDRLIST;
typedef struct tagTDRList                          	*LPTDRLIST;

struct tagPDULenTDRParser;
typedef struct tagPDULenTDRParser                  	PDULENTDRPARSER;
typedef struct tagPDULenTDRParser                  	*LPPDULENTDRPARSER;

struct tagPDULenAuthParser;
typedef struct tagPDULenAuthParser                 	PDULENAUTHPARSER;
typedef struct tagPDULenAuthParser                 	*LPPDULENAUTHPARSER;

union tagPDULenParser;
typedef union  tagPDULenParser                     	PDULENPARSER;
typedef union  tagPDULenParser                     	*LPPDULENPARSER;

struct tagPDU;
typedef struct tagPDU                              	PDU;
typedef struct tagPDU                              	*LPPDU;

struct tagPDUList;
typedef struct tagPDUList                          	PDULIST;
typedef struct tagPDUList                          	*LPPDULIST;

struct tagListener;
typedef struct tagListener                         	LISTENER;
typedef struct tagListener                         	*LPLISTENER;

struct tagListenerList;
typedef struct tagListenerList                     	LISTENERLIST;
typedef struct tagListenerList                     	*LPLISTENERLIST;

struct tagListenerRun;
typedef struct tagListenerRun                      	LISTENERRUN;
typedef struct tagListenerRun                      	*LPLISTENERRUN;

struct tagListenerRunList;
typedef struct tagListenerRunList                  	LISTENERRUNLIST;
typedef struct tagListenerRunList                  	*LPLISTENERRUNLIST;

struct tagSerializer;
typedef struct tagSerializer                       	SERIALIZER;
typedef struct tagSerializer                       	*LPSERIALIZER;

struct tagSerializerList;
typedef struct tagSerializerList                   	SERIALIZERLIST;
typedef struct tagSerializerList                   	*LPSERIALIZERLIST;

struct tagSerializerRun;
typedef struct tagSerializerRun                    	SERIALIZERRUN;
typedef struct tagSerializerRun                    	*LPSERIALIZERRUN;

struct tagSerializerRunList;
typedef struct tagSerializerRunList                	SERIALIZERRUNLIST;
typedef struct tagSerializerRunList                	*LPSERIALIZERRUNLIST;

struct tagNetTrans;
typedef struct tagNetTrans                         	NETTRANS;
typedef struct tagNetTrans                         	*LPNETTRANS;

struct tagNetTransList;
typedef struct tagNetTransList                     	NETTRANSLIST;
typedef struct tagNetTransList                     	*LPNETTRANSLIST;

struct tagNetTransRun;
typedef struct tagNetTransRun                      	NETTRANSRUN;
typedef struct tagNetTransRun                      	*LPNETTRANSRUN;

struct tagNetTransRunList;
typedef struct tagNetTransRunList                  	NETTRANSRUNLIST;
typedef struct tagNetTransRunList                  	*LPNETTRANSRUNLIST;

struct tagzone_connconf;
typedef struct tagzone_connconf                    	ZONE_CONNCONF;
typedef struct tagzone_connconf                    	*LPZONE_CONNCONF;

struct tagzone_connrun_status;
typedef struct tagzone_connrun_status              	ZONE_CONNRUN_STATUS;
typedef struct tagzone_connrun_status              	*LPZONE_CONNRUN_STATUS;



/*   Define structs/unions.   */

#pragma pack(1)

struct tagTransLimit
{
    int PkgSpeed;                       
    int ByteSpeed;                      
};

struct tagTransMetric
{
    tdr_longlong SendPkgSucc;                    
    tdr_longlong SendByteSucc;                   
    tdr_longlong SendPkgFail;                    
    tdr_longlong SendByteFail;                   
    tdr_longlong SendPkgDrop;                    
    tdr_longlong SendByteDrop;                   
    tdr_longlong RecvPkgSucc;                    
    tdr_longlong RecvByteSucc;                   
    tdr_longlong RecvPkgFail;                    
    tdr_longlong RecvByteFail;                   
    tdr_longlong RecvPkgDrop;                    
    tdr_longlong RecvByteDrop;                   
};

struct tagConnLimit
{
    int MaxConn;                        
    int Permit;                         
    int Speed;                          
};

struct tagConnStatInfo
{
    int Total;                          
    int Idle;                           
    int Wait;                           
    int Active;                         
};

struct tagConnMetric
{
    int Try;                            
    int Refuse;                         
    int NetLost;                        
    int AllocFail;                      
    int EpollFail;                      
    int AcceptFail;                     
    int NetFail;                        
};

struct tagTDR
{
    char Name[TCONND_NAME_LEN];          
    char Path[TCONND_URL_LEN];           
};

struct tagTDRList
{
    int Count;                          
    TDR TDRs[TCONND_MAX_TDR];           
};

/* 使用TDR方法来分析数据包的长度 */
struct tagPDULenTDRParser
{
    char TDR[TCONND_NAME_LEN];            	/*   PDU数据结构所在元数据描述库文件 */
    char Pkg[TCONND_NAME_LEN];            	/*   PDU数据结构元数据描述名 */
    char PkgLen[TCONND_NAME_LEN];         	/*   PDU数据结构中记录数据包总长度信息成员的元数据描述路径名 */
    char HeadLen[TCONND_NAME_LEN];        	/*   PDU数据结构中记录数据包头部长度信息的成员的元数据描述路径名 */
    char BodyLen[TCONND_NAME_LEN];        	/*   PDU数据结构中记录数据包消息体长度信息的成员的元数据描述路径名 */
};

/* 使用AUTH方法来分析数据包的长度 */
struct tagPDULenAuthParser
{
    char TDR[TCONND_NAME_LEN];            	/*   PDU数据结构所在元数据描述库文件 */
    char SendPkg[TCONND_NAME_LEN];        	/*   PDU数据结构上行数据包描述名 */
    char RecvPkg[TCONND_NAME_LEN];        	/*   PDU数据结构下行数据包描述名 */
    int SigValidSec;                    
    int AuthType;                       
};

/* 分析协议数据单元(PDU)长度信息的数据结构，用于将数据流分解成应用定义的数据通信消息 */
union tagPDULenParser
{
    PDULENTDRPARSER TDRParser;                       	/* PDULENPARSERID_BY_TDR,  使用TDR方法进行分析 */
    PDULENAUTHPARSER AuthParser;                      	/* PDULENPARSERID_BY_AUTH,  使用认证方法进行分析 */
};

struct tagPDU
{
    char Name[TCONND_NAME_LEN];          
    int UpSize;                          	/*   PDU数据单元上行包最大字节数 */
    int DownSize;                        	/*   PDU数据单元下行包最大字节数 */
    int LenParsertype;                   	/*    Bind Macrosgroup:PDULenParserID,*/
    PDULENPARSER LenParser;                       	/*   分析协议数据单元(PDU)长度信息的成员 */
};

struct tagPDUList
{
    int Count;                          
    PDU PDUs[TCONND_MAX_PDU];           
};

struct tagListener
{
    char Name[TCONND_NAME_LEN];          
    char Url[TCONND_URL_LEN];            
    int SendBuff;                       
    int RecvBuff;                       
    int MaxIdle;                        
    int Backlog;                        
    int MaxNoAuthIdle;                  
};

struct tagListenerList
{
    int Count;                          
    LISTENER Listeners[TCONND_MAX_NETTRANS]; 
};

struct tagListenerRun
{
    char Name[TCONND_NAME_LEN];          
    TRANSMETRIC TransStat;                      
    CONNMETRIC ConnStat;                       
};

struct tagListenerRunList
{
    int Count;                          
    LISTENERRUN Listeners[TCONND_MAX_NETTRANS]; 
};

struct tagSerializer
{
    char Name[TCONND_NAME_LEN];          
    char Url[TCONND_URL_LEN];            
};

struct tagSerializerList
{
    int Count;                          
    SERIALIZER Serializers[TCONND_MAX_NETTRANS];
};

struct tagSerializerRun
{
    char Name[TCONND_NAME_LEN];          
    TRANSMETRIC TransStat;                      
};

struct tagSerializerRunList
{
    int Count;                          
    SERIALIZERRUN Serializers[TCONND_MAX_NETTRANS];
};

struct tagNetTrans
{
    char Name[TCONND_NAME_LEN];          
    int UseTimeStamp;                   
    int UseWaitQueue;                   
    int QueueNotifyInterval;            
    int QueueNewWorld;                   	/*   1 开服模式 */
    int QueueLimitStart;                 	/*   开服模式，从多少连接开始启动限制 */
    int QueueLimitLast;                  	/*   开服模式，开始到结束连接限制一共持续多少秒 */
    char PDU[TCONND_NAME_LEN];           
    char Listener[TCONND_NAME_LEN];      
    char Serializer[TCONND_NAME_LEN];    
    CONNLIMIT ConnLimit;                      
    TRANSLIMIT TransLimit;                     
};

struct tagNetTransList
{
    int Count;                          
    NETTRANS NetTrans[TCONND_MAX_NETTRANS];  
};

struct tagNetTransRun
{
    char Name[TCONND_NAME_LEN];          
    CONNSTATINFO ConnInfo;                       
    CONNMETRIC ConnStat;                       
    TRANSMETRIC TransStat;                      
};

struct tagNetTransRunList
{
    int Count;                          
    NETTRANSRUN NetTrans[TCONND_MAX_NETTRANS];  
};

struct tagzone_connconf
{
    int MaxFD;                          
    TDRLIST TDRList;                        
    PDULIST PDUList;                        
    LISTENERLIST ListenerList;                   
    SERIALIZERLIST SerializerList;                 
    NETTRANSLIST NetTransList;                   
};

struct tagzone_connrun_status
{
    LISTENERRUNLIST ListenerRunList;                
    SERIALIZERRUNLIST SerializerRunList;              
    NETTRANSRUNLIST NetTransRunList;                
};


#pragma pack()

#ifdef __cplusplus
}
#endif


#endif /* ZONE_CONN_CONF_DESC_H */
