/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
********************************************************************/

#ifndef TORM_PROTOCOL_H
#define TORM_PROTOCOL_H


#ifndef TDR_METALIB_TORM_NET_VERSION 
#define TDR_METALIB_TORM_NET_VERSION 	15 /*version of metalib*/
#endif

#ifndef TDR_METALIB_TORM_NET_HASH 
#define TDR_METALIB_TORM_NET_HASH 	"08e9d4a8686a4a6b35619a6a7f0e3e23" /*hash of metalib*/
#endif
/*   
 User Define Macros.   */

#define TORM_MAGIC                               	30051
#define TORM_MAX_PKG_LEN                         	1050000
#define TORM_MAX_BODY_LEN                        	1048576
#define TORM_MAX_SUBPACK_LEN                     	65536
#define TORM_MAX_META_NAME                       	32
#define TORM_MAX_ENTRYLIST                       	256
#define TORM_MAX_WHERE_DEF                       	1024
#define TORM_MAX_INTER_CHANNEL                   	256
#define TORM_MAX_BUS_CHANNEL                     	1000

/* TORM_RESFLAGS*/
enum tagTORM_RESFLAGS 
{
    TORM_RESFLAG_RET_NOINFO = 0, 	/* 不包含OperInfo返回 */
    TORM_RESFLAG_RET_WITHINFO = 1, 	/* 包含OperInfo返回 */
    TORM_RESFLAG_ERRRET_NOINFO = 2, 	/* 出错才返回不包含OperInfo返回 */
    TORM_RESFLAG_ERRRET_WITHINFO = 3, 	/* 出错才返回包含OperInfo返回 */
    TORM_RESFLAG_NORET = 4, 	/* 不需要返回响应消息 */
};
#define TORM_MAX_ASYNCALLBACK_DATA_LEN           	1024 	/* 请求方能保留的回调数据最大字节数 */

/* TormCmds*/
enum tagTormCmds 
{
    TORM_EXGVER_REQ = 1, 	/* 进程间开始通信时的版本交换协议 */
    TORM_EXGVER_RES = 2, 
    TORM_INSERT_REQ = 3, 
    TORM_INSERT_RES = 4, 
    TORM_UPDATE_REQ = 5, 
    TORM_UPDATE_RES = 6, 
    TORM_DELETE_REQ = 7, 
    TORM_DELETE_RES = 8, 
    TORM_SELECT_REQ = 9, 
    TORM_SELECT_RES = 10, 
    TORM_SVRINFO_REQ = 11, 	/* 应用程序可能需要此协议获取OrmSvr的状态信息 */
    TORM_SVRINFO_RES = 12, 
    TORM_SELECT_COUNT_REQ = 13, 
    TORM_SELECT_COUNT_RES = 14, 
};


#ifdef __cplusplus
extern "C" {
#endif

/*   Define c types.   */


#ifndef TDR_CUSTOM_C_TYPES
#define TDR_CUSTOM_C_TYPES
#if defined(WIN32) &&  _MSC_VER < 1300
typedef __int64 tdr_longlong;
typedef unsigned __int64 tdr_ulonglong;
#else
typedef long long tdr_longlong;
typedef unsigned long long tdr_ulonglong;
#endif  /*defined(WIN32) &&  _MSC_VER < 1300*/
typedef unsigned short tdr_wchar_t;  /**<Wchar基本数据类型*/
typedef unsigned int tdr_date_t;	/**<data基本数据类型*/
typedef unsigned int tdr_time_t;	/**<time基本数据类型*/
typedef tdr_ulonglong tdr_datetime_t;  /**<datetime基本数据类型*/
typedef unsigned long int tdr_ip_t;  /**<IPv4数据类型*/
#endif /*TDR_CUSTOM_C_TYPES*/



/*   Structs/unions prototype.   */

struct tagTORMMetaNameVer;
typedef struct tagTORMMetaNameVer                  	TORMMETANAMEVER;
typedef struct tagTORMMetaNameVer                  	*LPTORMMETANAMEVER;

struct tagTORMPkgHeadComm;
typedef struct tagTORMPkgHeadComm                  	TORMPKGHEADCOMM;
typedef struct tagTORMPkgHeadComm                  	*LPTORMPKGHEADCOMM;

struct tagTORMPkgHeadCmd;
typedef struct tagTORMPkgHeadCmd                   	TORMPKGHEADCMD;
typedef struct tagTORMPkgHeadCmd                   	*LPTORMPKGHEADCMD;

struct tagTORMPkgHeadApp;
typedef struct tagTORMPkgHeadApp                   	TORMPKGHEADAPP;
typedef struct tagTORMPkgHeadApp                   	*LPTORMPKGHEADAPP;

struct tagTORMPkgHead;
typedef struct tagTORMPkgHead                      	TORMPKGHEAD;
typedef struct tagTORMPkgHead                      	*LPTORMPKGHEAD;

struct tagTORMExgVerReq;
typedef struct tagTORMExgVerReq                    	TORMEXGVERREQ;
typedef struct tagTORMExgVerReq                    	*LPTORMEXGVERREQ;

struct tagTORMExgVerRes;
typedef struct tagTORMExgVerRes                    	TORMEXGVERRES;
typedef struct tagTORMExgVerRes                    	*LPTORMEXGVERRES;

struct tagTORMSubPack;
typedef struct tagTORMSubPack                      	TORMSUBPACK;
typedef struct tagTORMSubPack                      	*LPTORMSUBPACK;

struct tagTORMEntryNameList;
typedef struct tagTORMEntryNameList                	TORMENTRYNAMELIST;
typedef struct tagTORMEntryNameList                	*LPTORMENTRYNAMELIST;

struct tagTORMOperInfo;
typedef struct tagTORMOperInfo                     	TORMOPERINFO;
typedef struct tagTORMOperInfo                     	*LPTORMOPERINFO;

struct tagTORMInsertReq;
typedef struct tagTORMInsertReq                    	TORMINSERTREQ;
typedef struct tagTORMInsertReq                    	*LPTORMINSERTREQ;

struct tagTORMInsertRes;
typedef struct tagTORMInsertRes                    	TORMINSERTRES;
typedef struct tagTORMInsertRes                    	*LPTORMINSERTRES;

struct tagTORMUpdateReq;
typedef struct tagTORMUpdateReq                    	TORMUPDATEREQ;
typedef struct tagTORMUpdateReq                    	*LPTORMUPDATEREQ;

struct tagTORMUpdateRes;
typedef struct tagTORMUpdateRes                    	TORMUPDATERES;
typedef struct tagTORMUpdateRes                    	*LPTORMUPDATERES;

struct tagTORMDeleteReq;
typedef struct tagTORMDeleteReq                    	TORMDELETEREQ;
typedef struct tagTORMDeleteReq                    	*LPTORMDELETEREQ;

struct tagTORMDeleteRes;
typedef struct tagTORMDeleteRes                    	TORMDELETERES;
typedef struct tagTORMDeleteRes                    	*LPTORMDELETERES;

struct tagTORMSelectReq;
typedef struct tagTORMSelectReq                    	TORMSELECTREQ;
typedef struct tagTORMSelectReq                    	*LPTORMSELECTREQ;

struct tagTORMSelectResult;
typedef struct tagTORMSelectResult                 	TORMSELECTRESULT;
typedef struct tagTORMSelectResult                 	*LPTORMSELECTRESULT;

struct tagTORMSelectRes;
typedef struct tagTORMSelectRes                    	TORMSELECTRES;
typedef struct tagTORMSelectRes                    	*LPTORMSELECTRES;

struct tagTORMSvrInfoReq;
typedef struct tagTORMSvrInfoReq                   	TORMSVRINFOREQ;
typedef struct tagTORMSvrInfoReq                   	*LPTORMSVRINFOREQ;

struct tagTORMChannelInfo;
typedef struct tagTORMChannelInfo                  	TORMCHANNELINFO;
typedef struct tagTORMChannelInfo                  	*LPTORMCHANNELINFO;

struct tagTORMProcessInfo;
typedef struct tagTORMProcessInfo                  	TORMPROCESSINFO;
typedef struct tagTORMProcessInfo                  	*LPTORMPROCESSINFO;

struct tagTORMInterChannelInfo;
typedef struct tagTORMInterChannelInfo             	TORMINTERCHANNELINFO;
typedef struct tagTORMInterChannelInfo             	*LPTORMINTERCHANNELINFO;

struct tagTORMSvrInfoRes;
typedef struct tagTORMSvrInfoRes                   	TORMSVRINFORES;
typedef struct tagTORMSvrInfoRes                   	*LPTORMSVRINFORES;

struct tagTORMSelectCountReq;
typedef struct tagTORMSelectCountReq               	TORMSELECTCOUNTREQ;
typedef struct tagTORMSelectCountReq               	*LPTORMSELECTCOUNTREQ;

struct tagTORMSelectCountRes;
typedef struct tagTORMSelectCountRes               	TORMSELECTCOUNTRES;
typedef struct tagTORMSelectCountRes               	*LPTORMSELECTCOUNTRES;

union tagTORMPkgBody;
typedef union  tagTORMPkgBody                      	TORMPKGBODY;
typedef union  tagTORMPkgBody                      	*LPTORMPKGBODY;

struct tagTORMPkg;
typedef struct tagTORMPkg                          	TORMPKG;
typedef struct tagTORMPkg                          	*LPTORMPKG;



/*   Define structs/unions.   */

#pragma pack(1)

struct tagTORMMetaNameVer
{
    char MetaName[TORM_MAX_META_NAME];   
    unsigned int MetaVer;                        
};

struct tagTORMPkgHeadComm
{
    unsigned short Magic;                          
    unsigned short HeadLen;                        
    unsigned int BodyLen;                        
    unsigned int InstID;                          	/*   打包此协议的进程实体号 */
};

struct tagTORMPkgHeadCmd
{
    unsigned short Cmd;                             	/*    Bind Macrosgroup:TormCmds,*/
    unsigned char Res[2];                         
    TORMMETANAMEVER MetaNameVer;                     	/*   本次操作相关MetaName和版本信息 */
    unsigned int SplitFactor;                     	/*  Ver.14 tormapi内部使用，应用层不需为此字段赋值 */
};

/* 存储应用数据，tormsvr将请求消息中的内容不作改变地拷贝到响应消息 */
struct tagTORMPkgHeadApp
{
    int AppCmd;                          	/*   应用进程操作命令ID */
    int Seq;                             	/*   请求响应序号,由应用进程使用 */
    int ObjID;                           	/*   应用进程用于标识对象 */
};

struct tagTORMPkgHead
{
    TORMPKGHEADCOMM HeadComm;                       
    TORMPKGHEADCMD HeadCmd;                        
    TORMPKGHEADAPP HeadApp;                        
    unsigned char Res[4];                         
    int AsynCallBackDataLen;             	/*  Ver.11  */
    char AsynCallBackData[TORM_MAX_ASYNCALLBACK_DATA_LEN]; 	/*  Ver.11 TORMSVR会将请求消息 中此字段中的信息原封不动地放到响应消息中，这样请求方可使用此字段保留回调数据  */
};

struct tagTORMExgVerReq
{
    unsigned int Version;                        
};

struct tagTORMExgVerRes
{
    unsigned int Version;                        
};

struct tagTORMSubPack
{
    unsigned int SubPackLen;                     
    unsigned char SubPack[TORM_MAX_SUBPACK_LEN];  
};

struct tagTORMEntryNameList
{
    unsigned int EntryNameNum;                   
    char EntryName[TORM_MAX_ENTRYLIST][TORM_MAX_META_NAME];
};

struct tagTORMOperInfo
{
    TORMSUBPACK PriKeyInfo;                      	/*   主键信息,上层应用不需要填充，由ORMAPI自动生成 */
    TORMSUBPACK SplitTableInfo;                  	/*   支持分表的信息,上层应用不需要填充，由ORMAPI自动生成 */
    TORMSUBPACK OperContent;                     	/*   操作数据信息,上层应用不需要填充，由ORMAPI自动生成 */
    unsigned int ResFlag;                         	/*   响应方式, 缺省值为TORM_RESFLAG_RET_NOINFO Bind Macrosgroup:TORM_RESFLAGS,*/
    TORMENTRYNAMELIST EntryNameList;                   	/*   若EntryNameNum为0,则操作针对头部指定的Meta */
    char WhereDef[TORM_MAX_WHERE_DEF];    	/*   没有自定操作约束(where etc.),必须设置为空串;如果此字段不是空串，ORMAPI不会自动生成主键信息 */
};

struct tagTORMInsertReq
{
    TORMOPERINFO OperInfo;                       
};

struct tagTORMInsertRes
{
    int ErrNo;                           	/*   错误码参考torm_error.h */
    TORMOPERINFO OperInfo;                       
    int DBMSErrNo;                       	/*  Ver.11 数据库返回的错误码 */
    tdr_ulonglong LastInsertID;                    	/*  Ver.12 返回本次insert操作所生成的AUTO_INCREMENT的值，此字段只有当操作数据中定义了AUTO_INCREMENT成员才有意义 */
};

struct tagTORMUpdateReq
{
    TORMOPERINFO OperInfo;                       
    unsigned int DoInsert;                        	/*   如果被更新的记录不存在，是否插入新纪录，不适用于自定义条件更新 */
};

struct tagTORMUpdateRes
{
    int ErrNo;                           	/*   错误码参考torm_error.h */
    TORMOPERINFO OperInfo;                       
    unsigned int DoInsert;                       
    int DBMSErrNo;                       	/*  Ver.11 数据库返回的错误码 */
    int AffectRows;                      	/*  Ver.11 受影响的行数 */
};

struct tagTORMDeleteReq
{
    TORMOPERINFO OperInfo;                       
};

struct tagTORMDeleteRes
{
    int ErrNo;                           	/*   错误码参考torm_error.h */
    TORMOPERINFO OperInfo;                       
    int DBMSErrNo;                       	/*  Ver.11 数据库返回的错误码 */
    int AffectRows;                      	/*  Ver.11 受影响的行数 */
};

struct tagTORMSelectReq
{
    TORMOPERINFO OperInfo;                       
    unsigned int Limit;                           	/*   如其值大于0则设置从数据库中检索出的最大记录行数,如果其值为0,则对记录行数没有限制 */
    unsigned int OffSet;                          	/*   则设置返回的第一行记录在整个结果集中的偏移量(初始行的偏移量为0),如果其值为0，则从结果集的开头返回记录行 */
};

struct tagTORMSelectResult
{
    unsigned int ResultTotal;                    
    unsigned int ThisResultStart;                
    int ResultNum;                      
    TORMSUBPACK ResultList[1];                  
};

struct tagTORMSelectRes
{
    int ErrNo;                           	/*   错误码参考torm_error.h */
    TORMOPERINFO OperInfo;                       
    int DBMSErrNo;                       	/*  Ver.11 数据库返回的错误码 */
    TORMSELECTRESULT SelectResult;                   
};

struct tagTORMSvrInfoReq
{
    int Res;                            
};

struct tagTORMChannelInfo
{
    int ChannelIdx;                     
    int UpSize;                         
    int UpHead;                         
    int UpTail;                         
    int DownSize;                       
    int DownHead;                       
    int DownTail;                       
};

struct tagTORMProcessInfo
{
    int StartTime;                      
    int DurTime;                        
    int InMsg;                          
    int InByte;                         
    int OutMsg;                         
    int OutByte;                        
    int Cache;                          
};

struct tagTORMInterChannelInfo
{
    int ChannelNum;                     
    TORMCHANNELINFO ChannelInfo[TORM_MAX_INTER_CHANNEL];
};

struct tagTORMSvrInfoRes
{
    TORMINTERCHANNELINFO InterChannelInfo;               
    TORMPROCESSINFO ProcessInfo;                    
};

/* 指定查询条件，请求tormsvr执行select count(*)操作，即请求检索出符合查询条件的记录行总数 */
struct tagTORMSelectCountReq
{
    char WhereDef[TORM_MAX_WHERE_DEF];    	/*   指定查询条件，如果为空串，则tormsvr会检索出指定数据对应数据库表中记录行总数 */
    TORMSUBPACK SplitTableInfo;                  	/*   支持分表的信息,上层应用不需要填充，由ORMAPI自动生成 */
};

struct tagTORMSelectCountRes
{
    int ErrNo;                           	/*   错误码参考torm_error.h */
    unsigned int RowsCount;                       	/*   返回数据库表中匹配查询条件的记录行总数 */
};

union tagTORMPkgBody
{
    unsigned char MaxBody[TORM_MAX_BODY_LEN];     
    TORMEXGVERREQ ExgVerReq;                       	/* TORM_EXGVER_REQ,   */
    TORMEXGVERRES ExgVerRes;                       	/* TORM_EXGVER_RES,   */
    TORMINSERTREQ InsertReq;                       	/* TORM_INSERT_REQ,   */
    TORMINSERTRES InsertRes;                       	/* TORM_INSERT_RES,   */
    TORMUPDATEREQ UpdateReq;                       	/* TORM_UPDATE_REQ,   */
    TORMUPDATERES UpdateRes;                       	/* TORM_UPDATE_RES,   */
    TORMDELETEREQ DeleteReq;                       	/* TORM_DELETE_REQ,   */
    TORMDELETERES DeleteRes;                       	/* TORM_DELETE_RES,   */
    TORMSELECTREQ SelectReq;                       	/* TORM_SELECT_REQ,   */
    TORMSELECTRES SelectRes;                       	/* TORM_SELECT_RES,   */
    TORMSVRINFOREQ OrmSvrInfoReq;                   	/* TORM_SVRINFO_REQ,   */
    TORMSVRINFORES OrmSvrInfoRes;                   	/* TORM_SVRINFO_RES,   */
    TORMSELECTCOUNTREQ SelectCountReq;                  	/* TORM_SELECT_COUNT_REQ, Ver.14  */
    TORMSELECTCOUNTRES SelectCountRes;                  	/* TORM_SELECT_COUNT_RES, Ver.14  */
};

struct tagTORMPkg
{
    TORMPKGHEAD Head;                           
    TORMPKGBODY Body;                           
};


#pragma pack()

#ifdef __cplusplus
}
#endif


#endif /* TORM_PROTOCOL_H */
