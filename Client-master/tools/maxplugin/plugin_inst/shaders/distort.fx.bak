//--------------------------------------------------------------------------------------
// File: Bloom.fx
//--------------------------------------------------------------------------------------

#define RENDER_USAGE_UI 1
#define RENDER_USAGE_GENERAL 2
#define RENDER_USAGE_REFLECT 4
#define RENDER_USAGE_SHADOWMAPGEN 8
#define RENDER_USAGE_GLOW 16


texture g_SceneTexture;              // Color texture for mesh
texture g_DistortTexture;


//--------------------------------------------------------------------------------------
// Texture samplers
//--------------------------------------------------------------------------------------
sampler SceneTextureSampler = 
sampler_state
{
    Texture = <g_SceneTexture>;
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    
    addressu	=	clamp;
    addressv	=	clamp;
};

sampler DistortSampler = 
sampler_state
{
    Texture = <g_DistortTexture>;
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    
    addressu	=	clamp;
    addressv	=	clamp;

};


//--------------------------------------------------------------------------------------
// Vertex shader output structure
//--------------------------------------------------------------------------------------
struct VS_OUTPUT
{
    float4 Position   : POSITION;   // vertex position 
    float3 TextureUV  : TEXCOORD0;  // vertex texture coords 
};

//--------------------------------------------------------------------------------------
// Pixel shader output structure
//--------------------------------------------------------------------------------------
struct PS_OUTPUT
{
    float4 RGBColor : COLOR0;  // Pixel color    
};


PS_OUTPUT DistortPass(VS_OUTPUT In)
{
	PS_OUTPUT Output;
	float2 vDistort		=	0.1f * (tex2D(DistortSampler, In.TextureUV.xy).xy - 128.0f/255.0f);	
	
	float4 vScene		=	tex2D(SceneTextureSampler, In.TextureUV.xy + vDistort);
	
	Output.RGBColor = vScene;	
	
	return Output;
   
}


technique Distort
<
	int usage = RENDER_USAGE_GENERAL;
	int lod = 0;
>
{
    pass DistortPass
    {          
        VertexShader 	 = NULL;
        PixelShader  	 = compile ps_2_0 DistortPass();
        cullmode		 = none;
        zenable			 = false; 
    }		
}


