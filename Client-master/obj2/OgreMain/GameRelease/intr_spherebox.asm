; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\sdk\ozcollide\intr_spherebox.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?testIntersectionSphereBox@ozcollide@@YA_NABVSphere@1@ABVBox@1@@Z ; ozcollide::testIntersectionSphereBox
EXTRN	?sqrDistancePointToBox@ozcollide@@YAMABVVec3f@1@ABVBox@1@PAV21@@Z:PROC ; ozcollide::sqrDistancePointToBox
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\intr_spherebox.cpp
_TEXT	SEGMENT
_rr$ = -8						; size = 4
_sqrDist$ = -4						; size = 4
__sphere$ = 8						; size = 4
__box$ = 12						; size = 4
?testIntersectionSphereBox@ozcollide@@YA_NABVSphere@1@ABVBox@1@@Z PROC ; ozcollide::testIntersectionSphereBox

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 35   : 	float sqrDist = sqrDistancePointToBox(_sphere.center, _box);

	push	0
	mov	eax, DWORD PTR __box$[ebp]
	push	eax
	mov	ecx, DWORD PTR __sphere$[ebp]
	push	ecx
	call	?sqrDistancePointToBox@ozcollide@@YAMABVVec3f@1@ABVBox@1@PAV21@@Z ; ozcollide::sqrDistancePointToBox
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _sqrDist$[ebp]

; 36   : 	float rr = _sphere.radius * _sphere.radius;

	mov	edx, DWORD PTR __sphere$[ebp]
	fld	DWORD PTR [edx+12]
	mov	eax, DWORD PTR __sphere$[ebp]
	fmul	DWORD PTR [eax+12]
	fstp	DWORD PTR _rr$[ebp]

; 37   : 	if (sqrDist > rr)

	fld	DWORD PTR _sqrDist$[ebp]
	fld	DWORD PTR _rr$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@testInters

; 38   : 		return false;

	xor	al, al
	jmp	SHORT $LN2@testInters
$LN1@testInters:

; 39   : 
; 40   : 	return true;

	mov	al, 1
$LN2@testInters:

; 41   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?testIntersectionSphereBox@ozcollide@@YA_NABVSphere@1@ABVBox@1@@Z ENDP ; ozcollide::testIntersectionSphereBox
_TEXT	ENDS
PUBLIC	??1Box@ozcollide@@QAE@XZ			; ozcollide::Box::~Box
PUBLIC	__real@3ff0000000000000
PUBLIC	??0Box@ozcollide@@QAE@XZ			; ozcollide::Box::Box
PUBLIC	??DVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator*
PUBLIC	?getCenter@Ellipsoid@ozcollide@@QBEABVVec3f@2@XZ ; ozcollide::Ellipsoid::getCenter
PUBLIC	?getInvRadii@Ellipsoid@ozcollide@@QBEABVVec3f@2@XZ ; ozcollide::Ellipsoid::getInvRadii
PUBLIC	?testIntersectionEllipsoidBox@ozcollide@@YA_NABVEllipsoid@1@ABVBox@1@@Z ; ozcollide::testIntersectionEllipsoidBox
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?testIntersectionEllipsoidBox@ozcollide@@YA_NABVEllipsoid@1@ABVBox@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?testIntersectionEllipsoidBox@ozcollide@@YA_NABVEllipsoid@1@ABVBox@1@@Z$0
__ehfuncinfo$?testIntersectionEllipsoidBox@ozcollide@@YA_NABVEllipsoid@1@ABVBox@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?testIntersectionEllipsoidBox@ozcollide@@YA_NABVEllipsoid@1@ABVBox@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
$T6862 = -78						; size = 1
$T6861 = -77						; size = 1
$T6860 = -76						; size = 12
$T6859 = -64						; size = 12
_unitPos$ = -52						; size = 12
_nbox$ = -40						; size = 24
_sqrDist$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__ellip$ = 8						; size = 4
__box$ = 12						; size = 4
?testIntersectionEllipsoidBox@ozcollide@@YA_NABVEllipsoid@1@ABVBox@1@@Z PROC ; ozcollide::testIntersectionEllipsoidBox

; 44   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?testIntersectionEllipsoidBox@ozcollide@@YA_NABVEllipsoid@1@ABVBox@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 45   : 	Vec3f unitPos = _ellip.getCenter() * _ellip.getInvRadii();

	mov	ecx, DWORD PTR __ellip$[ebp]
	call	?getInvRadii@Ellipsoid@ozcollide@@QBEABVVec3f@2@XZ ; ozcollide::Ellipsoid::getInvRadii
	push	eax
	lea	eax, DWORD PTR _unitPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR __ellip$[ebp]
	call	?getCenter@Ellipsoid@ozcollide@@QBEABVVec3f@2@XZ ; ozcollide::Ellipsoid::getCenter
	mov	ecx, eax
	call	??DVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator*

; 46   : 
; 47   : 	Box nbox;

	lea	ecx, DWORD PTR _nbox$[ebp]
	call	??0Box@ozcollide@@QAE@XZ		; ozcollide::Box::Box
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 48   : 	nbox.center = _box.center * _ellip.getInvRadii();

	mov	ecx, DWORD PTR __ellip$[ebp]
	call	?getInvRadii@Ellipsoid@ozcollide@@QBEABVVec3f@2@XZ ; ozcollide::Ellipsoid::getInvRadii
	push	eax
	lea	ecx, DWORD PTR $T6859[ebp]
	push	ecx
	mov	ecx, DWORD PTR __box$[ebp]
	call	??DVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator*
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _nbox$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nbox$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _nbox$[ebp+8], edx

; 49   : 	nbox.extent = _box.extent * _ellip.getInvRadii();

	mov	ecx, DWORD PTR __ellip$[ebp]
	call	?getInvRadii@Ellipsoid@ozcollide@@QBEABVVec3f@2@XZ ; ozcollide::Ellipsoid::getInvRadii
	push	eax
	lea	eax, DWORD PTR $T6860[ebp]
	push	eax
	mov	ecx, DWORD PTR __box$[ebp]
	add	ecx, 12					; 0000000cH
	call	??DVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _nbox$[ebp+12], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _nbox$[ebp+16], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _nbox$[ebp+20], eax

; 50   : 
; 51   : 	float sqrDist = sqrDistancePointToBox(unitPos, nbox);

	push	0
	lea	ecx, DWORD PTR _nbox$[ebp]
	push	ecx
	lea	edx, DWORD PTR _unitPos$[ebp]
	push	edx
	call	?sqrDistancePointToBox@ozcollide@@YAMABVVec3f@1@ABVBox@1@PAV21@@Z ; ozcollide::sqrDistancePointToBox
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _sqrDist$[ebp]

; 52   : 	if (sqrDist > 1)

	fld	DWORD PTR _sqrDist$[ebp]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@testInters@2

; 53   : 		return false;

	mov	BYTE PTR $T6861[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nbox$[ebp]
	call	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
	mov	al, BYTE PTR $T6861[ebp]
	jmp	SHORT $LN2@testInters@2
$LN1@testInters@2:

; 54   : 
; 55   : 	return true;

	mov	BYTE PTR $T6862[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nbox$[ebp]
	call	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
	mov	al, BYTE PTR $T6862[ebp]
$LN2@testInters@2:

; 56   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?testIntersectionEllipsoidBox@ozcollide@@YA_NABVEllipsoid@1@ABVBox@1@@Z$0:
	lea	ecx, DWORD PTR _nbox$[ebp]
	jmp	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
__ehhandler$?testIntersectionEllipsoidBox@ozcollide@@YA_NABVEllipsoid@1@ABVBox@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?testIntersectionEllipsoidBox@ozcollide@@YA_NABVEllipsoid@1@ABVBox@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?testIntersectionEllipsoidBox@ozcollide@@YA_NABVEllipsoid@1@ABVBox@1@@Z ENDP ; ozcollide::testIntersectionEllipsoidBox
PUBLIC	??0Vec3f@ozcollide@@QAE@MMM@Z			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
;	COMDAT ??DVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??DVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator*, COMDAT
; _this$ = ecx

; 104  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return Vec3f(x * _v.x, y * _v.y, z * _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 106  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??DVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator*
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0Vec3f@ozcollide@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Vec3f@ozcollide@@QAE@MMM@Z PROC			; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __z$[ebp]
	fstp	DWORD PTR [edx+8]

; 43   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vec3f@ozcollide@@QAE@MMM@Z ENDP			; ozcollide::Vec3f::Vec3f
_TEXT	ENDS
PUBLIC	??0Vec3f@ozcollide@@QAE@XZ			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\box.h
;	COMDAT ??0Box@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Box@ozcollide@@QAE@XZ PROC				; ozcollide::Box::Box, COMDAT
; _this$ = ecx

; 44   : 	ozinline Box()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f

; 45   : 	{
; 46   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Box@ozcollide@@QAE@XZ ENDP				; ozcollide::Box::Box
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
_TEXT	ENDS
;	COMDAT ??0Vec3f@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vec3f@ozcollide@@QAE@XZ PROC				; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 37   : 	ozinline Vec3f()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	{
; 39   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vec3f@ozcollide@@QAE@XZ ENDP				; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\box.h
_TEXT	ENDS
;	COMDAT ??1Box@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Box@ozcollide@@QAE@XZ PROC				; ozcollide::Box::~Box, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1Box@ozcollide@@QAE@XZ ENDP				; ozcollide::Box::~Box
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\ellipsoid.h
_TEXT	ENDS
;	COMDAT ?getCenter@Ellipsoid@ozcollide@@QBEABVVec3f@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCenter@Ellipsoid@ozcollide@@QBEABVVec3f@2@XZ PROC	; ozcollide::Ellipsoid::getCenter, COMDAT
; _this$ = ecx

; 38   : 	ozinline const Vec3f& getCenter() const { return center_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCenter@Ellipsoid@ozcollide@@QBEABVVec3f@2@XZ ENDP	; ozcollide::Ellipsoid::getCenter
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getInvRadii@Ellipsoid@ozcollide@@QBEABVVec3f@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInvRadii@Ellipsoid@ozcollide@@QBEABVVec3f@2@XZ PROC	; ozcollide::Ellipsoid::getInvRadii, COMDAT
; _this$ = ecx

; 51   : 	ozinline const Vec3f& getInvRadii() const { return invRadii_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	mov	esp, ebp
	pop	ebp
	ret	0
?getInvRadii@Ellipsoid@ozcollide@@QBEABVVec3f@2@XZ ENDP	; ozcollide::Ellipsoid::getInvRadii
_TEXT	ENDS
END
