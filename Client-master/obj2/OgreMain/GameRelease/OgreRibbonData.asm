; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\OgreMain\OgreRibbonData.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG5715
_DATA	ENDS
CONST	SEGMENT
$SG5715	DB	'bad allocation', 00H
	ORG $+1
_MAX_FLOAT DD	07f7fffffr			; 3.40282e+038
_ONE_PI	DD	040490fd0r			; 3.14159
_EPSILON DD	03727c5acr			; 1e-005
_RADS_PER_DEG DD 03c8efa35r			; 0.0174533
_DEGS_PER_RAD DD 042652ee1r			; 57.2958
$SG63316 DB	'RibbonEmitterData', 00H
CONST	ENDS
PUBLIC	??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDelegation::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDelegation::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDelegation::operator=
_TEXT	ENDS
PUBLIC	?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ	; Ogre::RuntimeClass::getBaseClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebaseobject.h
;	COMDAT ?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ PROC	; Ogre::RuntimeClass::getBaseClass, COMDAT
; _this$ = ecx

; 20   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 21   : 			return m_pBaseClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 22   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ ENDP	; Ogre::RuntimeClass::getBaseClass
_TEXT	ENDS
PUBLIC	?getClassName@RuntimeClass@Ogre@@QBEPBDXZ	; Ogre::RuntimeClass::getClassName
; Function compile flags: /Odtp
;	COMDAT ?getClassName@RuntimeClass@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ PROC		; Ogre::RuntimeClass::getClassName, COMDAT
; _this$ = ecx

; 25   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 26   : 			return m_pClassName; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ ENDP		; Ogre::RuntimeClass::getClassName
_TEXT	ENDS
PUBLIC	?getVersion@RuntimeClass@Ogre@@QBEHXZ		; Ogre::RuntimeClass::getVersion
; Function compile flags: /Odtp
;	COMDAT ?getVersion@RuntimeClass@Ogre@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVersion@RuntimeClass@Ogre@@QBEHXZ PROC		; Ogre::RuntimeClass::getVersion, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Version;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getVersion@RuntimeClass@Ogre@@QBEHXZ ENDP		; Ogre::RuntimeClass::getVersion
_TEXT	ENDS
PUBLIC	?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ; Ogre::RuntimeClass::newObject
; Function compile flags: /Odtp
;	COMDAT ?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ PROC ; Ogre::RuntimeClass::newObject, COMDAT
; _this$ = ecx

; 35   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 			return (*m_pNewFunc)();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx

; 37   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ENDP ; Ogre::RuntimeClass::newObject
_TEXT	ENDS
PUBLIC	??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::RuntimeClass::operator=
; Function compile flags: /Odtp
;	COMDAT ??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::RuntimeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::RuntimeClass::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::BaseObject::getRTTI
EXTRN	?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::BaseObject::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::BaseObject::getRTTI, COMDAT
; _this$ = ecx

; 56   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 			return &m_RTTI;

	mov	eax, OFFSET ?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B ; Ogre::BaseObject::m_RTTI

; 58   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::BaseObject::getRTTI
_TEXT	ENDS
PUBLIC	?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ; Ogre::BaseObject::isExactKindOf
; Function compile flags: /Odtp
;	COMDAT ?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_prtti$ = 8						; size = 4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z PROC ; Ogre::BaseObject::isExactKindOf, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			return (getRTTI() == prtti);

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	xor	ecx, ecx
	cmp	eax, DWORD PTR _prtti$[ebp]
	sete	cl
	mov	al, cl

; 63   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ENDP ; Ogre::BaseObject::isExactKindOf
_TEXT	ENDS
PUBLIC	?release@BaseObject@Ogre@@UAEXXZ		; Ogre::BaseObject::release
; Function compile flags: /Odtp
;	COMDAT ?release@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?release@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::release, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			m_RefCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 70   : 			if(m_RefCount <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN2@release

; 71   : 			{
; 72   : 				deleteThis();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
$LN2@release:

; 73   : 			}
; 74   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?release@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::release
_TEXT	ENDS
PUBLIC	?addRef@BaseObject@Ogre@@UAEXXZ			; Ogre::BaseObject::addRef
; Function compile flags: /Odtp
;	COMDAT ?addRef@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?addRef@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::addRef, COMDAT
; _this$ = ecx

; 77   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 			m_RefCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 79   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?addRef@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::addRef
_TEXT	ENDS
PUBLIC	?getRefCount@BaseObject@Ogre@@UAEHXZ		; Ogre::BaseObject::getRefCount
; Function compile flags: /Odtp
;	COMDAT ?getRefCount@BaseObject@Ogre@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRefCount@BaseObject@Ogre@@UAEHXZ PROC		; Ogre::BaseObject::getRefCount, COMDAT
; _this$ = ecx

; 82   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 			return m_RefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 84   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRefCount@BaseObject@Ogre@@UAEHXZ ENDP		; Ogre::BaseObject::getRefCount
_TEXT	ENDS
PUBLIC	?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::BaseObject::_serialize
; Function compile flags: /Odtp
;	COMDAT ?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z PROC	; Ogre::BaseObject::_serialize, COMDAT
; _this$ = ecx

; 87   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ENDP	; Ogre::BaseObject::_serialize
_TEXT	ENDS
PUBLIC	??_7BaseObject@Ogre@@6B@			; Ogre::BaseObject::`vftable'
PUBLIC	??0BaseObject@Ogre@@IAE@XZ			; Ogre::BaseObject::BaseObject
PUBLIC	??_R4BaseObject@Ogre@@6B@			; Ogre::BaseObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBaseObject@Ogre@@@8			; Ogre::BaseObject `RTTI Type Descriptor'
PUBLIC	??_R3BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BaseObject@Ogre@@8		; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVMemoryDelegation@Ogre@@@8		; Ogre::MemoryDelegation `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`vector deleting destructor'
PUBLIC	?deleteThis@BaseObject@Ogre@@MAEXXZ		; Ogre::BaseObject::deleteThis
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDelegation@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDelegation@Ogre@@8 DD 00H			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDelegation@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDelegation@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDelegation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDelegation@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R13?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BaseObject@Ogre@@8 DD FLAT:??_R0?AVBaseObject@Ogre@@@8 ; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R2BaseObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8 ; Ogre::BaseObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R3BaseObject@Ogre@@8 DD 00H				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBaseObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVBaseObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::BaseObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBaseObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BaseObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4BaseObject@Ogre@@6B@ DD 00H			; Ogre::BaseObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBaseObject@Ogre@@@8
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7BaseObject@Ogre@@6B@
CONST	SEGMENT
??_7BaseObject@Ogre@@6B@ DD FLAT:??_R4BaseObject@Ogre@@6B@ ; Ogre::BaseObject::`vftable'
	DD	FLAT:?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EBaseObject@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0BaseObject@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BaseObject@Ogre@@IAE@XZ PROC				; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx

; 92   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 1

; 93   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BaseObject@Ogre@@IAE@XZ ENDP				; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??1BaseObject@Ogre@@MAE@XZ			; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
;	COMDAT ??1BaseObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BaseObject@Ogre@@MAE@XZ PROC				; Ogre::BaseObject::~BaseObject, COMDAT
; _this$ = ecx

; 96   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1BaseObject@Ogre@@MAE@XZ ENDP				; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deleteThis@BaseObject@Ogre@@MAEXXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T79909 = -8						; size = 4
$T79908 = -4						; size = 4
?deleteThis@BaseObject@Ogre@@MAEXXZ PROC		; Ogre::BaseObject::deleteThis, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 			delete this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T79909[ebp], eax
	mov	ecx, DWORD PTR $T79909[ebp]
	mov	DWORD PTR $T79908[ebp], ecx
	cmp	DWORD PTR $T79908[ebp], 0
	je	SHORT $LN3@deleteThis
	push	1
	mov	edx, DWORD PTR $T79908[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T79908[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN1@deleteThis
$LN3@deleteThis:
	mov	DWORD PTR tv70[ebp], 0
$LN1@deleteThis:

; 102  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?deleteThis@BaseObject@Ogre@@MAEXXZ ENDP		; Ogre::BaseObject::deleteThis
_TEXT	ENDS
PUBLIC	??0BaseObject@Ogre@@QAE@ABV01@@Z		; Ogre::BaseObject::BaseObject
; Function compile flags: /Odtp
;	COMDAT ??0BaseObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0BaseObject@Ogre@@QAE@ABV01@@Z PROC			; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@BaseObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@BaseObject
$LN3@BaseObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@BaseObject:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BaseObject@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BaseObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BaseObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BaseObject::operator=
_TEXT	ENDS
PUBLIC	??_GBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`scalar deleting destructor'
EXTRN	??3MemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VMemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_EBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1BaseObject@Ogre@@MAE@XZ	; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z	; Ogre::FixedString::handle2Ptr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrefixedstring.h
;	COMDAT ?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z PROC		; Ogre::FixedString::handle2Ptr, COMDAT

; 22   : 		{

	push	ebp
	mov	ebp, esp

; 23   : 			return (const char *)h;

	mov	eax, DWORD PTR _h$[ebp]

; 24   : 		}

	pop	ebp
	ret	0
?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z ENDP		; Ogre::FixedString::handle2Ptr
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@XZ			; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FixedString@Ogre@@QAE@XZ PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 27   : 		FixedString() : m_StrHandle(NULL){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0FixedString@Ogre@@QAE@XZ ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PAX@Z			; Ogre::FixedString::FixedString
EXTRN	?addRef@FixedString@Ogre@@SAXPAX@Z:PROC		; Ogre::FixedString::addRef
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_h$ = 8							; size = 4
??0FixedString@Ogre@@QAE@PAX@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 29   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax], ecx

; 30   : 			addRef(h);

	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	call	?addRef@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::addRef
	add	esp, 4

; 31   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@PAX@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@ABV01@@Z		; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0FixedString@Ogre@@QAE@ABV01@@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 34   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 35   : 			addRef(m_StrHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?addRef@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::addRef
	add	esp, 4

; 36   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PBD@Z			; Ogre::FixedString::FixedString
EXTRN	?insert@FixedString@Ogre@@SAPAXPBDH@Z:PROC	; Ogre::FixedString::insert
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstr$ = 8						; size = 4
??0FixedString@Ogre@@QAE@PBD@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 38   : 		FixedString(const char *pstr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 		{
; 40   : 			m_StrHandle = insert(pstr); 

	push	-1
	mov	eax, DWORD PTR _pstr$[ebp]
	push	eax
	call	?insert@FixedString@Ogre@@SAPAXPBDH@Z	; Ogre::FixedString::insert
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 41   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@PBD@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PBDI@Z			; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstr$ = 8						; size = 4
_len$ = 12						; size = 4
??0FixedString@Ogre@@QAE@PBDI@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 43   : 		FixedString(const char *pstr, size_t len)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 		{
; 45   : 			m_StrHandle = insert(pstr, (int)len); 

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pstr$[ebp]
	push	ecx
	call	?insert@FixedString@Ogre@@SAPAXPBDH@Z	; Ogre::FixedString::insert
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 46   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0FixedString@Ogre@@QAE@PBDI@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??1FixedString@Ogre@@QAE@XZ			; Ogre::FixedString::~FixedString
EXTRN	?release@FixedString@Ogre@@SAXPAX@Z:PROC	; Ogre::FixedString::release
; Function compile flags: /Odtp
;	COMDAT ??1FixedString@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FixedString@Ogre@@QAE@XZ PROC			; Ogre::FixedString::~FixedString, COMDAT
; _this$ = ecx

; 49   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 			release(m_StrHandle); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?release@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::release
	add	esp, 4

; 51   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1FixedString@Ogre@@QAE@XZ ENDP			; Ogre::FixedString::~FixedString
_TEXT	ENDS
PUBLIC	??BFixedString@Ogre@@QBEPBDXZ			; Ogre::FixedString::operator char const *
; Function compile flags: /Odtp
;	COMDAT ??BFixedString@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BFixedString@Ogre@@QBEPBDXZ PROC			; Ogre::FixedString::operator char const *, COMDAT
; _this$ = ecx

; 54   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 			return handle2Ptr(m_StrHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z ; Ogre::FixedString::handle2Ptr
	add	esp, 4

; 56   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BFixedString@Ogre@@QBEPBDXZ ENDP			; Ogre::FixedString::operator char const *
_TEXT	ENDS
PUBLIC	?getHandle@FixedString@Ogre@@QBEPAXXZ		; Ogre::FixedString::getHandle
; Function compile flags: /Odtp
;	COMDAT ?getHandle@FixedString@Ogre@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHandle@FixedString@Ogre@@QBEPAXXZ PROC		; Ogre::FixedString::getHandle, COMDAT
; _this$ = ecx

; 59   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 			return m_StrHandle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 61   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getHandle@FixedString@Ogre@@QBEPAXXZ ENDP		; Ogre::FixedString::getHandle
_TEXT	ENDS
PUBLIC	?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ	; Ogre::Resource::getRTTI
EXTRN	?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B:BYTE	; Ogre::Resource::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreresource.h
;	COMDAT ?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::Resource::getRTTI, COMDAT
; _this$ = ecx

; 39   : 		DECLARE_RTTI_VIRTUAL(Resource)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B ; Ogre::Resource::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::Resource::getRTTI
_TEXT	ENDS
PUBLIC	?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ ; Ogre::Resource::getResPath
; Function compile flags: /Odtp
;	COMDAT ?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ PROC	; Ogre::Resource::getResPath, COMDAT
; _this$ = ecx

; 44   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 			return m_ResPath;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8

; 46   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ ENDP	; Ogre::Resource::getResPath
_TEXT	ENDS
PUBLIC	?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z ; Ogre::Resource::setResPath
EXTRN	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z:PROC	; Ogre::FixedString::operator=
; Function compile flags: /Odtp
;	COMDAT ?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_path$ = 8						; size = 4
?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z PROC	; Ogre::Resource::setResPath, COMDAT
; _this$ = ecx

; 48   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 			m_ResPath = path;

	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=

; 50   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z ENDP	; Ogre::Resource::setResPath
_TEXT	ENDS
PUBLIC	??_7Resource@Ogre@@6B@				; Ogre::Resource::`vftable'
PUBLIC	??0Resource@Ogre@@IAE@XZ			; Ogre::Resource::Resource
PUBLIC	??_R4Resource@Ogre@@6B@				; Ogre::Resource::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVResource@Ogre@@@8			; Ogre::Resource `RTTI Type Descriptor'
PUBLIC	??_R3Resource@Ogre@@8				; Ogre::Resource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Resource@Ogre@@8				; Ogre::Resource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Resource@Ogre@@8			; Ogre::Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EResource@Ogre@@MAEPAXI@Z			; Ogre::Resource::`vector deleting destructor'
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	?release@Resource@Ogre@@UAEXXZ:PROC		; Ogre::Resource::release
EXTRN	?addRef@Resource@Ogre@@UAEXXZ:PROC		; Ogre::Resource::addRef
EXTRN	?getRefCount@Resource@Ogre@@UAEHXZ:PROC		; Ogre::Resource::getRefCount
;	COMDAT ??_R1A@?0A@EA@Resource@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Resource@Ogre@@8 DD FLAT:??_R0?AVResource@Ogre@@@8 ; Ogre::Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Resource@Ogre@@8
rdata$r	SEGMENT
??_R2Resource@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Resource@Ogre@@8 ; Ogre::Resource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3Resource@Ogre@@8
rdata$r	SEGMENT
??_R3Resource@Ogre@@8 DD 00H				; Ogre::Resource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVResource@Ogre@@@8
_DATA	SEGMENT
??_R0?AVResource@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Resource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVResource@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Resource@Ogre@@6B@
rdata$r	SEGMENT
??_R4Resource@Ogre@@6B@ DD 00H				; Ogre::Resource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVResource@Ogre@@@8
	DD	FLAT:??_R3Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Resource@Ogre@@6B@
CONST	SEGMENT
??_7Resource@Ogre@@6B@ DD FLAT:??_R4Resource@Ogre@@6B@	; Ogre::Resource::`vftable'
	DD	FLAT:?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EResource@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Resource@Ogre@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@IAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@IAE@XZ$1
__ehfuncinfo$??0Resource@Ogre@@IAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Resource@Ogre@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Resource@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Resource@Ogre@@IAE@XZ PROC				; Ogre::Resource::Resource, COMDAT
; _this$ = ecx

; 72   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Resource@Ogre@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@IAE@XZ		; Ogre::BaseObject::BaseObject
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 1

; 73   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Resource@Ogre@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0Resource@Ogre@@IAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0Resource@Ogre@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Resource@Ogre@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Resource@Ogre@@IAE@XZ ENDP				; Ogre::Resource::Resource
PUBLIC	??1Resource@Ogre@@MAE@XZ			; Ogre::Resource::~Resource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Resource@Ogre@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Resource@Ogre@@MAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1Resource@Ogre@@MAE@XZ$1
__ehfuncinfo$??1Resource@Ogre@@MAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1Resource@Ogre@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1Resource@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Resource@Ogre@@MAE@XZ PROC				; Ogre::Resource::~Resource, COMDAT
; _this$ = ecx

; 76   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Resource@Ogre@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 77   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Resource@Ogre@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??1Resource@Ogre@@MAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??1Resource@Ogre@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Resource@Ogre@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Resource@Ogre@@MAE@XZ ENDP				; Ogre::Resource::~Resource
PUBLIC	??0Resource@Ogre@@QAE@ABV01@@Z			; Ogre::Resource::Resource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Resource@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$1
__ehfuncinfo$??0Resource@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Resource@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Resource@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Resource@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Resource::Resource, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Resource@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7Resource@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0FixedString@Ogre@@QAE@ABV01@@Z	; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0Resource@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Resource@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Resource@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Resource::Resource
PUBLIC	??4Resource@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Resource::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Resource@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Resource@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::Resource::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Resource@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::Resource::operator=
_TEXT	ENDS
PUBLIC	??_GResource@Ogre@@MAEPAXI@Z			; Ogre::Resource::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GResource@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GResource@Ogre@@MAEPAXI@Z PROC			; Ogre::Resource::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GResource@Ogre@@MAEPAXI@Z ENDP			; Ogre::Resource::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EResource@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EResource@Ogre@@MAEPAXI@Z PROC			; Ogre::Resource::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@2
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EResource@Ogre@@MAEPAXI@Z ENDP			; Ogre::Resource::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7DataStream@Ogre@@6B@			; Ogre::DataStream::`vftable'
PUBLIC	??0DataStream@Ogre@@QAE@XZ			; Ogre::DataStream::DataStream
PUBLIC	??_R4DataStream@Ogre@@6B@			; Ogre::DataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStream@Ogre@@@8			; Ogre::DataStream `RTTI Type Descriptor'
PUBLIC	??_R3DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStream@Ogre@@8		; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`vector deleting destructor'
PUBLIC	?size@DataStream@Ogre@@UBEIXZ			; Ogre::DataStream::size
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__purecall:PROC
EXTRN	?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::readLine
EXTRN	?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; Ogre::DataStream::getLine
EXTRN	?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; Ogre::DataStream::getAsString
EXTRN	?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::skipLine
;	COMDAT ??_R1A@?0A@EA@DataStream@Ogre@@8
; File i:\svnroot\client\ogremain\ogredatastream.h
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStream@Ogre@@8 DD FLAT:??_R0?AVDataStream@Ogre@@@8 ; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStream@Ogre@@8
rdata$r	SEGMENT
??_R2DataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8 ; Ogre::DataStream::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStream@Ogre@@8
rdata$r	SEGMENT
??_R3DataStream@Ogre@@8 DD 00H				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::DataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStream@Ogre@@6B@ DD 00H			; Ogre::DataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStream@Ogre@@@8
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStream@Ogre@@6B@
CONST	SEGMENT
??_7DataStream@Ogre@@6B@ DD FLAT:??_R4DataStream@Ogre@@6B@ ; Ogre::DataStream::`vftable'
	DD	FLAT:??_EDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0DataStream@Ogre@@QAE@XZ PROC				; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 68   : 		DataStream() : mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@XZ ENDP				; Ogre::DataStream::DataStream
PUBLIC	??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Ogre::DataStream::DataStream
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 70   : 		DataStream(const String& name) : mName(name), mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Ogre::DataStream::DataStream
PUBLIC	?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Ogre::DataStream::getName
; Function compile flags: /Odtp
;	COMDAT ?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Ogre::DataStream::getName, COMDAT
; _this$ = ecx

; 72   : 		const String& getName(void) { return mName; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Ogre::DataStream::getName
_TEXT	ENDS
PUBLIC	??1DataStream@Ogre@@UAE@XZ			; Ogre::DataStream::~DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1DataStream@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0
__ehfuncinfo$??1DataStream@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1DataStream@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1DataStream@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DataStream@Ogre@@UAE@XZ PROC				; Ogre::DataStream::~DataStream, COMDAT
; _this$ = ecx

; 73   : 		virtual ~DataStream() {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1DataStream@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1DataStream@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1DataStream@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1DataStream@Ogre@@UAE@XZ ENDP				; Ogre::DataStream::~DataStream
; Function compile flags: /Odtp
;	COMDAT ?size@DataStream@Ogre@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@DataStream@Ogre@@UBEIXZ PROC			; Ogre::DataStream::size, COMDAT
; _this$ = ecx

; 157  : 		virtual size_t size(void) const { return mSize; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?size@DataStream@Ogre@@UBEIXZ ENDP			; Ogre::DataStream::size
_TEXT	ENDS
PUBLIC	??0DataStream@Ogre@@QAE@ABV01@@Z		; Ogre::DataStream::DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV01@@Z PROC			; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::DataStream::DataStream
PUBLIC	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::DataStream::operator=
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::DataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::DataStream::operator=
_TEXT	ENDS
PUBLIC	??_GDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`scalar deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp
;	COMDAT ??_EDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1DataStream@Ogre@@UAE@XZ	; Ogre::DataStream::~DataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	36					; 00000024H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@3
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ		; Ogre::MemoryDataStream::getPtr
; Function compile flags: /Odtp
;	COMDAT ?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC		; Ogre::MemoryDataStream::getPtr, COMDAT
; _this$ = ecx

; 267  : 		uchar* getPtr(void) { return mData; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP		; Ogre::MemoryDataStream::getPtr
_TEXT	ENDS
PUBLIC	?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ	; Ogre::MemoryDataStream::getCurrentPtr
; Function compile flags: /Odtp
;	COMDAT ?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC	; Ogre::MemoryDataStream::getCurrentPtr, COMDAT
; _this$ = ecx

; 270  : 		uchar* getCurrentPtr(void) { return mPos; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP	; Ogre::MemoryDataStream::getCurrentPtr
_TEXT	ENDS
PUBLIC	?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ	; Ogre::MemoryDataStream::getMemoryImage
; Function compile flags: /Odtp
;	COMDAT ?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ PROC	; Ogre::MemoryDataStream::getMemoryImage, COMDAT
; _this$ = ecx

; 307  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 			return mData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]

; 309  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ ENDP	; Ogre::MemoryDataStream::getMemoryImage
_TEXT	ENDS
PUBLIC	?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ; Ogre::MemoryDataStream::setFreeOnClose
; Function compile flags: /Odtp
;	COMDAT ?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_freeOnClose$ = 8					; size = 4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z PROC ; Ogre::MemoryDataStream::setFreeOnClose, COMDAT
; _this$ = ecx

; 313  : 		void setFreeOnClose(void (*freeOnClose)(void *)) { mFreeOnClose = freeOnClose; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _freeOnClose$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ENDP ; Ogre::MemoryDataStream::setFreeOnClose
_TEXT	ENDS
PUBLIC	??_7MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`vftable'
PUBLIC	??0MemoryDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??_R4MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMemoryDataStream@Ogre@@@8		; Ogre::MemoryDataStream `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDataStream@Ogre@@8		; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`vector deleting destructor'
EXTRN	?read@MemoryDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::MemoryDataStream::read
EXTRN	?write@MemoryDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::MemoryDataStream::write
EXTRN	?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::readLine
EXTRN	?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::skipLine
EXTRN	?skip@MemoryDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::MemoryDataStream::skip
EXTRN	?seek@MemoryDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::MemoryDataStream::seek
EXTRN	?tell@MemoryDataStream@Ogre@@UBEIXZ:PROC	; Ogre::MemoryDataStream::tell
EXTRN	?eof@MemoryDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::MemoryDataStream::eof
EXTRN	?close@MemoryDataStream@Ogre@@UAEXXZ:PROC	; Ogre::MemoryDataStream::close
;	COMDAT ??_R1A@?0A@EA@MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 DD FLAT:??_R0?AVMemoryDataStream@Ogre@@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDataStream@Ogre@@8 DD 00H			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MemoryDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4MemoryDataStream@Ogre@@6B@ DD 00H			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMemoryDataStream@Ogre@@@8
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7MemoryDataStream@Ogre@@6B@
CONST	SEGMENT
??_7MemoryDataStream@Ogre@@6B@ DD FLAT:??_R4MemoryDataStream@Ogre@@6B@ ; Ogre::MemoryDataStream::`vftable'
	DD	FLAT:??_EMemoryDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@MemoryDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@MemoryDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@MemoryDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@MemoryDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@MemoryDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@MemoryDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@MemoryDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::MemoryDataStream::MemoryDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7MemoryDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+44], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+48], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+44], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+48], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`scalar deleting destructor'
EXTRN	??1MemoryDataStream@Ogre@@UAE@XZ:PROC		; Ogre::MemoryDataStream::~MemoryDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@4
	push	OFFSET ??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@4
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@4
$LN3@vector@4:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@4:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`vftable'
PUBLIC	??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??_R4FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileStreamDataStream@Ogre@@@8		; Ogre::FileStreamDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8	; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`vector deleting destructor'
EXTRN	?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileStreamDataStream::read
EXTRN	?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileStreamDataStream::write
EXTRN	?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::FileStreamDataStream::readLine
EXTRN	?skip@FileStreamDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileStreamDataStream::skip
EXTRN	?seek@FileStreamDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileStreamDataStream::seek
EXTRN	?tell@FileStreamDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileStreamDataStream::tell
EXTRN	?eof@FileStreamDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileStreamDataStream::eof
EXTRN	?close@FileStreamDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileStreamDataStream::close
EXTRN	?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileStreamDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 DD FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileStreamDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileStreamDataStream@Ogre@@8 DD 00H		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileStreamDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileStreamDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileStreamDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileStreamDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileStreamDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileStreamDataStream@Ogre@@6B@ DD 00H		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileStreamDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileStreamDataStream@Ogre@@6B@ DD FLAT:??_R4FileStreamDataStream@Ogre@@6B@ ; Ogre::FileStreamDataStream::`vftable'
	DD	FLAT:??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileStreamDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileStreamDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileStreamDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileStreamDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileStreamDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileStreamDataStream::FileStreamDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileStreamDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+40]
	mov	BYTE PTR [edx+40], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileStreamDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileStreamDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+40]
	mov	BYTE PTR [ecx+40], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileStreamDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`scalar deleting destructor'
EXTRN	??1FileStreamDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileStreamDataStream::~FileStreamDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@5
	push	OFFSET ??1FileStreamDataStream@Ogre@@UAE@XZ ; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@5
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@5
$LN3@vector@5:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@5:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`vftable'
PUBLIC	??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??_R4FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileHandleDataStream@Ogre@@@8		; Ogre::FileHandleDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8	; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`vector deleting destructor'
EXTRN	?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileHandleDataStream::read
EXTRN	?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileHandleDataStream::write
EXTRN	?skip@FileHandleDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileHandleDataStream::skip
EXTRN	?seek@FileHandleDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileHandleDataStream::seek
EXTRN	?tell@FileHandleDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileHandleDataStream::tell
EXTRN	?eof@FileHandleDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileHandleDataStream::eof
EXTRN	?close@FileHandleDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileHandleDataStream::close
EXTRN	?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileHandleDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 DD FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileHandleDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileHandleDataStream@Ogre@@8 DD 00H		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileHandleDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileHandleDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileHandleDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileHandleDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileHandleDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileHandleDataStream@Ogre@@6B@ DD 00H		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileHandleDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileHandleDataStream@Ogre@@6B@ DD FLAT:??_R4FileHandleDataStream@Ogre@@6B@ ; Ogre::FileHandleDataStream::`vftable'
	DD	FLAT:??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileHandleDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileHandleDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileHandleDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileHandleDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileHandleDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileHandleDataStream::FileHandleDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileHandleDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileHandleDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileHandleDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileHandleDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`scalar deleting destructor'
EXTRN	??1FileHandleDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileHandleDataStream::~FileHandleDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@6
	push	OFFSET ??1FileHandleDataStream@Ogre@@UAE@XZ ; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@6
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@6
$LN3@vector@6:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@6:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`vftable'
PUBLIC	??1DataStreamObject@Ogre@@MAE@XZ		; Ogre::DataStreamObject::~DataStreamObject
PUBLIC	??_R4DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStreamObject@Ogre@@@8		; Ogre::DataStreamObject `RTTI Type Descriptor'
PUBLIC	??_R3DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStreamObject@Ogre@@8		; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStreamObject@Ogre@@8 DD FLAT:??_R0?AVDataStreamObject@Ogre@@@8 ; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R2DataStreamObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStreamObject@Ogre@@8 ; Ogre::DataStreamObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R3DataStreamObject@Ogre@@8 DD 00H			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStreamObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStreamObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::DataStreamObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStreamObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStreamObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStreamObject@Ogre@@6B@ DD 00H			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStreamObject@Ogre@@@8
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStreamObject@Ogre@@6B@
CONST	SEGMENT
??_7DataStreamObject@Ogre@@6B@ DD FLAT:??_R4DataStreamObject@Ogre@@6B@ ; Ogre::DataStreamObject::`vftable'
	DD	FLAT:??_EDataStreamObject@Ogre@@MAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??1DataStreamObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DataStreamObject@Ogre@@MAE@XZ PROC			; Ogre::DataStreamObject::~DataStreamObject, COMDAT
; _this$ = ecx

; 445  : 		virtual ~DataStreamObject(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1DataStreamObject@Ogre@@MAE@XZ ENDP			; Ogre::DataStreamObject::~DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@XZ		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DataStreamObject@Ogre@@QAE@XZ PROC			; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DataStreamObject@Ogre@@QAE@XZ ENDP			; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@ABV01@@Z		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z PROC		; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::DataStreamObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::DataStreamObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::DataStreamObject::operator=
_TEXT	ENDS
PUBLIC	??_GDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@7
	push	OFFSET ??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@7
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@7
$LN3@vector@7:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@7:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`vftable'
PUBLIC	??0ObjectDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??_R4ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVObjectDataStream@Ogre@@@8		; Ogre::ObjectDataStream `RTTI Type Descriptor'
PUBLIC	??_R3ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ObjectDataStream@Ogre@@8		; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`vector deleting destructor'
EXTRN	?read@ObjectDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::ObjectDataStream::read
EXTRN	?write@ObjectDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::ObjectDataStream::write
EXTRN	?skip@ObjectDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::ObjectDataStream::skip
EXTRN	?seek@ObjectDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::ObjectDataStream::seek
EXTRN	?tell@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::tell
EXTRN	?eof@ObjectDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::ObjectDataStream::eof
EXTRN	?size@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::size
EXTRN	?close@ObjectDataStream@Ogre@@UAEXXZ:PROC	; Ogre::ObjectDataStream::close
EXTRN	?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::ObjectDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 DD FLAT:??_R0?AVObjectDataStream@Ogre@@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2ObjectDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3ObjectDataStream@Ogre@@8 DD 00H			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVObjectDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVObjectDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::ObjectDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVObjectDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ObjectDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4ObjectDataStream@Ogre@@6B@ DD 00H			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVObjectDataStream@Ogre@@@8
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7ObjectDataStream@Ogre@@6B@
CONST	SEGMENT
??_7ObjectDataStream@Ogre@@6B@ DD FLAT:??_R4ObjectDataStream@Ogre@@6B@ ; Ogre::ObjectDataStream::`vftable'
	DD	FLAT:??_EObjectDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@ObjectDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@ObjectDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@ObjectDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@ObjectDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@ObjectDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@ObjectDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::ObjectDataStream::ObjectDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ObjectDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::ObjectDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::ObjectDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::ObjectDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`scalar deleting destructor'
EXTRN	??1ObjectDataStream@Ogre@@UAE@XZ:PROC		; Ogre::ObjectDataStream::~ObjectDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@8
	push	OFFSET ??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@8
$LN3@vector@8:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@8:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Archive@Ogre@@6B@				; Ogre::Archive::`vftable'
PUBLIC	??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z	; Ogre::Archive::Archive
PUBLIC	??_R4Archive@Ogre@@6B@				; Ogre::Archive::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVArchive@Ogre@@@8			; Ogre::Archive `RTTI Type Descriptor'
PUBLIC	??_R3Archive@Ogre@@8				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Archive@Ogre@@8				; Ogre::Archive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Archive@Ogre@@8			; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Archive@Ogre@@8
; File i:\svnroot\client\ogremain\ogrearchive.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Archive@Ogre@@8 DD FLAT:??_R0?AVArchive@Ogre@@@8 ; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Archive@Ogre@@8
rdata$r	SEGMENT
??_R2Archive@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Archive@Ogre@@8 ; Ogre::Archive::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Archive@Ogre@@8
rdata$r	SEGMENT
??_R3Archive@Ogre@@8 DD 00H				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVArchive@Ogre@@@8
_DATA	SEGMENT
??_R0?AVArchive@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Archive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArchive@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Archive@Ogre@@6B@
rdata$r	SEGMENT
??_R4Archive@Ogre@@6B@ DD 00H				; Ogre::Archive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArchive@Ogre@@@8
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Archive@Ogre@@6B@
CONST	SEGMENT
??_7Archive@Ogre@@6B@ DD FLAT:??_R4Archive@Ogre@@6B@	; Ogre::Archive::`vftable'
	DD	FLAT:??_EArchive@Ogre@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstream$ = 8						; size = 4
_mode$ = 12						; size = 4
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z PROC		; Ogre::Archive::Archive, COMDAT
; _this$ = ecx

; 22   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pstream$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 23   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z ENDP		; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??1Archive@Ogre@@UAE@XZ				; Ogre::Archive::~Archive
; Function compile flags: /Odtp
;	COMDAT ??1Archive@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Archive@Ogre@@UAE@XZ PROC				; Ogre::Archive::~Archive, COMDAT
; _this$ = ecx

; 26   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1Archive@Ogre@@UAE@XZ ENDP				; Ogre::Archive::~Archive
_TEXT	ENDS
PUBLIC	?isLoading@Archive@Ogre@@QAE_NXZ		; Ogre::Archive::isLoading
; Function compile flags: /Odtp
;	COMDAT ?isLoading@Archive@Ogre@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isLoading@Archive@Ogre@@QAE_NXZ PROC			; Ogre::Archive::isLoading, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Mode==MODE_LOAD;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+8], 1
	sete	cl
	mov	al, cl

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?isLoading@Archive@Ogre@@QAE_NXZ ENDP			; Ogre::Archive::isLoading
_TEXT	ENDS
PUBLIC	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z	; Ogre::Archive::serialize
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAD@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAD@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 108  : 		SERIALIZE_PRIMITIVE_FUNC(char)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAD@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAF@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAF@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 109  : 		SERIALIZE_PRIMITIVE_FUNC(short)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAF@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAH@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAH@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 110  : 		SERIALIZE_PRIMITIVE_FUNC(int)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAH@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_J@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_J@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 111  : 		SERIALIZE_PRIMITIVE_FUNC(int64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_J@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAE@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAE@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 112  : 		SERIALIZE_PRIMITIVE_FUNC(uchar)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAE@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAG@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAG@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 113  : 		SERIALIZE_PRIMITIVE_FUNC(ushort)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAG@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAI@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAI@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 114  : 		SERIALIZE_PRIMITIVE_FUNC(uint)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAI@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_K@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_K@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 115  : 		SERIALIZE_PRIMITIVE_FUNC(uint64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_K@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_N@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_N@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 116  : 		SERIALIZE_PRIMITIVE_FUNC(bool)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_N@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAM@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAM@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 117  : 		SERIALIZE_PRIMITIVE_FUNC(float)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAM@Z ENDP			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z PROC		; Ogre::Archive::serialize, COMDAT
; _this$ = ecx

; 155  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 			if(isLoading()) m_pStream->read(pbuf, len);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@serialize
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	jmp	SHORT $LN1@serialize
$LN2@serialize:

; 157  : 			else m_pStream->write(pbuf, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN1@serialize:

; 158  : 
; 159  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 160  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ENDP		; Ogre::Archive::serialize
_TEXT	ENDS
PUBLIC	?read@Archive@Ogre@@QAEXPAXI@Z			; Ogre::Archive::read
; Function compile flags: /Odtp
;	COMDAT ?read@Archive@Ogre@@QAEXPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?read@Archive@Ogre@@QAEXPAXI@Z PROC			; Ogre::Archive::read, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			m_pStream->read(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 165  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?read@Archive@Ogre@@QAEXPAXI@Z ENDP			; Ogre::Archive::read
_TEXT	ENDS
PUBLIC	?write@Archive@Ogre@@QAEXPBXI@Z			; Ogre::Archive::write
; Function compile flags: /Odtp
;	COMDAT ?write@Archive@Ogre@@QAEXPBXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?write@Archive@Ogre@@QAEXPBXI@Z PROC			; Ogre::Archive::write, COMDAT
; _this$ = ecx

; 168  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 			m_pStream->write(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 170  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?write@Archive@Ogre@@QAEXPBXI@Z ENDP			; Ogre::Archive::write
_TEXT	ENDS
PUBLIC	??0Archive@Ogre@@QAE@ABV01@@Z			; Ogre::Archive::Archive
; Function compile flags: /Odtp
;	COMDAT ??0Archive@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Archive@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Archive::Archive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Archive@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??4Archive@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Archive::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Archive@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Archive::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Archive::operator=
_TEXT	ENDS
PUBLIC	??_GArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@9
	push	OFFSET ??1Archive@Ogre@@UAE@XZ		; Ogre::Archive::~Archive
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@9
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@9:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@9
$LN3@vector@9:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@9:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@9:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0ColourValue@Ogre@@QAE@MMMM@Z			; Ogre::ColourValue::ColourValue
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrecolourvalue.h
;	COMDAT ??0ColourValue@Ogre@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_red$ = 8						; size = 4
_green$ = 12						; size = 4
_blue$ = 16						; size = 4
_alpha$ = 20						; size = 4
??0ColourValue@Ogre@@QAE@MMMM@Z PROC			; Ogre::ColourValue::ColourValue, COMDAT
; _this$ = ecx

; 68   : 		{ }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _red$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _green$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _blue$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _alpha$[ebp]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0ColourValue@Ogre@@QAE@MMMM@Z ENDP			; Ogre::ColourValue::ColourValue
_TEXT	ENDS
PUBLIC	?set@ColourValue@Ogre@@QAEXMMMM@Z		; Ogre::ColourValue::set
; Function compile flags: /Odtp
;	COMDAT ?set@ColourValue@Ogre@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_red$ = 8						; size = 4
_green$ = 12						; size = 4
_blue$ = 16						; size = 4
_alpha$ = 20						; size = 4
?set@ColourValue@Ogre@@QAEXMMMM@Z PROC			; Ogre::ColourValue::set, COMDAT
; _this$ = ecx

; 76   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 			r	= red;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _red$[ebp]
	fstp	DWORD PTR [eax]

; 78   : 			g	= green;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _green$[ebp]
	fstp	DWORD PTR [ecx+4]

; 79   : 			b	= blue;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _blue$[ebp]
	fstp	DWORD PTR [edx+8]

; 80   : 			a	= alpha;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _alpha$[ebp]
	fstp	DWORD PTR [eax+12]

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?set@ColourValue@Ogre@@QAEXMMMM@Z ENDP			; Ogre::ColourValue::set
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	?saturate@ColourValue@Ogre@@QAEXXZ		; Ogre::ColourValue::saturate
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?saturate@ColourValue@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?saturate@ColourValue@Ogre@@QAEXXZ PROC			; Ogre::ColourValue::saturate, COMDAT
; _this$ = ecx

; 117  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 			if (r < 0)

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN12@saturate

; 119  : 				r = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx]
	jmp	SHORT $LN10@saturate
$LN12@saturate:

; 120  : 			else if (r > 1)

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN10@saturate

; 121  : 				r = 1;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax]
$LN10@saturate:

; 122  : 
; 123  : 			if (g < 0)

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN9@saturate

; 124  : 				g = 0;

	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+4]
	jmp	SHORT $LN7@saturate
$LN9@saturate:

; 125  : 			else if (g > 1)

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@saturate

; 126  : 				g = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [ecx+4]
$LN7@saturate:

; 127  : 
; 128  : 			if (b < 0)

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@saturate

; 129  : 				b = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]
	jmp	SHORT $LN4@saturate
$LN6@saturate:

; 130  : 			else if (b > 1)

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@saturate

; 131  : 				b = 1;

	mov	edx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [edx+8]
$LN4@saturate:

; 132  : 
; 133  : 			if (a < 0)

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@saturate

; 134  : 				a = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+12]
	jmp	SHORT $LN1@saturate
$LN3@saturate:

; 135  : 			else if (a > 1)

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+12]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@saturate

; 136  : 				a = 1;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+12]
$LN1@saturate:

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?saturate@ColourValue@Ogre@@QAEXXZ ENDP			; Ogre::ColourValue::saturate
_TEXT	ENDS
PUBLIC	?saturateCopy@ColourValue@Ogre@@QBE?AV12@XZ	; Ogre::ColourValue::saturateCopy
; Function compile flags: /Odtp
;	COMDAT ?saturateCopy@ColourValue@Ogre@@QBE?AV12@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_ret$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?saturateCopy@ColourValue@Ogre@@QBE?AV12@XZ PROC	; Ogre::ColourValue::saturateCopy, COMDAT
; _this$ = ecx

; 142  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 			ColourValue ret = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ret$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _ret$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ret$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _ret$[ebp+12], edx

; 144  : 			ret.saturate();

	lea	ecx, DWORD PTR _ret$[ebp]
	call	?saturate@ColourValue@Ogre@@QAEXXZ	; Ogre::ColourValue::saturate

; 145  : 			return ret;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _ret$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _ret$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _ret$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?saturateCopy@ColourValue@Ogre@@QBE?AV12@XZ ENDP	; Ogre::ColourValue::saturateCopy
_TEXT	ENDS
PUBLIC	??AColourValue@Ogre@@QBEMI@Z			; Ogre::ColourValue::operator[]
; Function compile flags: /Odtp
;	COMDAT ??AColourValue@Ogre@@QBEMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AColourValue@Ogre@@QBEMI@Z PROC			; Ogre::ColourValue::operator[], COMDAT
; _this$ = ecx

; 150  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 			assert( i < 4 );
; 152  : 
; 153  : 			return *(&r+i);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax*4]

; 154  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??AColourValue@Ogre@@QBEMI@Z ENDP			; Ogre::ColourValue::operator[]
_TEXT	ENDS
PUBLIC	??AColourValue@Ogre@@QAEAAMI@Z			; Ogre::ColourValue::operator[]
; Function compile flags: /Odtp
;	COMDAT ??AColourValue@Ogre@@QAEAAMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AColourValue@Ogre@@QAEAAMI@Z PROC			; Ogre::ColourValue::operator[], COMDAT
; _this$ = ecx

; 158  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 159  : 			assert( i < 4 );
; 160  : 
; 161  : 			return *(&r+i);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 162  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??AColourValue@Ogre@@QAEAAMI@Z ENDP			; Ogre::ColourValue::operator[]
_TEXT	ENDS
PUBLIC	?ptr@ColourValue@Ogre@@QAEPAMXZ			; Ogre::ColourValue::ptr
; Function compile flags: /Odtp
;	COMDAT ?ptr@ColourValue@Ogre@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ptr@ColourValue@Ogre@@QAEPAMXZ PROC			; Ogre::ColourValue::ptr, COMDAT
; _this$ = ecx

; 166  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 167  : 			return &r;

	mov	eax, DWORD PTR _this$[ebp]

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?ptr@ColourValue@Ogre@@QAEPAMXZ ENDP			; Ogre::ColourValue::ptr
_TEXT	ENDS
PUBLIC	?ptr@ColourValue@Ogre@@QBEPBMXZ			; Ogre::ColourValue::ptr
; Function compile flags: /Odtp
;	COMDAT ?ptr@ColourValue@Ogre@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ptr@ColourValue@Ogre@@QBEPBMXZ PROC			; Ogre::ColourValue::ptr, COMDAT
; _this$ = ecx

; 171  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 172  : 			return &r;

	mov	eax, DWORD PTR _this$[ebp]

; 173  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?ptr@ColourValue@Ogre@@QBEPBMXZ ENDP			; Ogre::ColourValue::ptr
_TEXT	ENDS
PUBLIC	??HColourValue@Ogre@@QBE?AV01@ABV01@@Z		; Ogre::ColourValue::operator+
; Function compile flags: /Odtp
;	COMDAT ??HColourValue@Ogre@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_kSum$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_rkVector$ = 12						; size = 4
??HColourValue@Ogre@@QBE?AV01@ABV01@@Z PROC		; Ogre::ColourValue::operator+, COMDAT
; _this$ = ecx

; 178  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 179  : 			ColourValue kSum;

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _kSum$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue

; 180  : 
; 181  : 			kSum.r = r + rkVector.r;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [ecx]
	fstp	DWORD PTR _kSum$[ebp]

; 182  : 			kSum.g = g + rkVector.g;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR _kSum$[ebp+4]

; 183  : 			kSum.b = b + rkVector.b;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [edx+8]
	fstp	DWORD PTR _kSum$[ebp+8]

; 184  : 			kSum.a = a + rkVector.a;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [ecx+12]
	fstp	DWORD PTR _kSum$[ebp+12]

; 185  : 
; 186  : 			return kSum;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR _kSum$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _kSum$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _kSum$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _kSum$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 187  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??HColourValue@Ogre@@QBE?AV01@ABV01@@Z ENDP		; Ogre::ColourValue::operator+
_TEXT	ENDS
PUBLIC	??GColourValue@Ogre@@QBE?AV01@ABV01@@Z		; Ogre::ColourValue::operator-
; Function compile flags: /Odtp
;	COMDAT ??GColourValue@Ogre@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_kDiff$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_rkVector$ = 12						; size = 4
??GColourValue@Ogre@@QBE?AV01@ABV01@@Z PROC		; Ogre::ColourValue::operator-, COMDAT
; _this$ = ecx

; 190  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 191  : 			ColourValue kDiff;

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _kDiff$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue

; 192  : 
; 193  : 			kDiff.r = r - rkVector.r;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _kDiff$[ebp]

; 194  : 			kDiff.g = g - rkVector.g;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR _kDiff$[ebp+4]

; 195  : 			kDiff.b = b - rkVector.b;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [edx+8]
	fstp	DWORD PTR _kDiff$[ebp+8]

; 196  : 			kDiff.a = a - rkVector.a;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [ecx+12]
	fstp	DWORD PTR _kDiff$[ebp+12]

; 197  : 
; 198  : 			return kDiff;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR _kDiff$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _kDiff$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _kDiff$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _kDiff$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 199  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??GColourValue@Ogre@@QBE?AV01@ABV01@@Z ENDP		; Ogre::ColourValue::operator-
_TEXT	ENDS
PUBLIC	??DColourValue@Ogre@@QBE?AV01@M@Z		; Ogre::ColourValue::operator*
; Function compile flags: /Odtp
;	COMDAT ??DColourValue@Ogre@@QBE?AV01@M@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_kProd$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_fScalar$ = 12						; size = 4
??DColourValue@Ogre@@QBE?AV01@M@Z PROC			; Ogre::ColourValue::operator*, COMDAT
; _this$ = ecx

; 202  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 			ColourValue kProd;

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _kProd$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue

; 204  : 
; 205  : 			kProd.r = fScalar*r;

	fld	DWORD PTR _fScalar$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR _kProd$[ebp]

; 206  : 			kProd.g = fScalar*g;

	fld	DWORD PTR _fScalar$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+4]
	fstp	DWORD PTR _kProd$[ebp+4]

; 207  : 			kProd.b = fScalar*b;

	fld	DWORD PTR _fScalar$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	fstp	DWORD PTR _kProd$[ebp+8]

; 208  : 			kProd.a = fScalar*a;

	fld	DWORD PTR _fScalar$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+12]
	fstp	DWORD PTR _kProd$[ebp+12]

; 209  : 
; 210  : 			return kProd;

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR _kProd$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _kProd$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _kProd$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _kProd$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 211  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??DColourValue@Ogre@@QBE?AV01@M@Z ENDP			; Ogre::ColourValue::operator*
_TEXT	ENDS
PUBLIC	??DColourValue@Ogre@@QBE?AV01@ABV01@@Z		; Ogre::ColourValue::operator*
; Function compile flags: /Odtp
;	COMDAT ??DColourValue@Ogre@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_kProd$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_rhs$ = 12						; size = 4
??DColourValue@Ogre@@QBE?AV01@ABV01@@Z PROC		; Ogre::ColourValue::operator*, COMDAT
; _this$ = ecx

; 214  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 215  : 			ColourValue kProd;

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _kProd$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue

; 216  : 
; 217  : 			kProd.r = rhs.r * r;

	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR _kProd$[ebp]

; 218  : 			kProd.g = rhs.g * g;

	mov	edx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	fstp	DWORD PTR _kProd$[ebp+4]

; 219  : 			kProd.b = rhs.b * b;

	mov	ecx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	fstp	DWORD PTR _kProd$[ebp+8]

; 220  : 			kProd.a = rhs.a * a;

	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	fstp	DWORD PTR _kProd$[ebp+12]

; 221  : 
; 222  : 			return kProd;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR _kProd$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _kProd$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _kProd$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _kProd$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 223  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??DColourValue@Ogre@@QBE?AV01@ABV01@@Z ENDP		; Ogre::ColourValue::operator*
_TEXT	ENDS
PUBLIC	??KColourValue@Ogre@@QBE?AV01@ABV01@@Z		; Ogre::ColourValue::operator/
; Function compile flags: /Odtp
;	COMDAT ??KColourValue@Ogre@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_kProd$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_rhs$ = 12						; size = 4
??KColourValue@Ogre@@QBE?AV01@ABV01@@Z PROC		; Ogre::ColourValue::operator/, COMDAT
; _this$ = ecx

; 226  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 227  : 			ColourValue kProd;

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _kProd$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue

; 228  : 
; 229  : 			kProd.r = rhs.r / r;

	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx]
	fstp	DWORD PTR _kProd$[ebp]

; 230  : 			kProd.g = rhs.g / g;

	mov	edx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [eax+4]
	fstp	DWORD PTR _kProd$[ebp+4]

; 231  : 			kProd.b = rhs.b / b;

	mov	ecx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [edx+8]
	fstp	DWORD PTR _kProd$[ebp+8]

; 232  : 			kProd.a = rhs.a / a;

	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx+12]
	fstp	DWORD PTR _kProd$[ebp+12]

; 233  : 
; 234  : 			return kProd;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR _kProd$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _kProd$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _kProd$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _kProd$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 235  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??KColourValue@Ogre@@QBE?AV01@ABV01@@Z ENDP		; Ogre::ColourValue::operator/
_TEXT	ENDS
PUBLIC	??KColourValue@Ogre@@QBE?AV01@M@Z		; Ogre::ColourValue::operator/
; Function compile flags: /Odtp
;	COMDAT ??KColourValue@Ogre@@QBE?AV01@M@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
_kDiv$ = -20						; size = 16
_fInv$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_fScalar$ = 12						; size = 4
??KColourValue@Ogre@@QBE?AV01@M@Z PROC			; Ogre::ColourValue::operator/, COMDAT
; _this$ = ecx

; 238  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 239  : 			assert( fScalar != 0.0f );
; 240  : 
; 241  : 			ColourValue kDiv;

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _kDiv$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue

; 242  : 
; 243  : 			float fInv = 1.0f / fScalar;

	fld	DWORD PTR _fScalar$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _fInv$[ebp]

; 244  : 			kDiv.r = r * fInv;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _fInv$[ebp]
	fstp	DWORD PTR _kDiv$[ebp]

; 245  : 			kDiv.g = g * fInv;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR _fInv$[ebp]
	fstp	DWORD PTR _kDiv$[ebp+4]

; 246  : 			kDiv.b = b * fInv;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fmul	DWORD PTR _fInv$[ebp]
	fstp	DWORD PTR _kDiv$[ebp+8]

; 247  : 			kDiv.a = a * fInv;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _fInv$[ebp]
	fstp	DWORD PTR _kDiv$[ebp+12]

; 248  : 
; 249  : 			return kDiv;

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR _kDiv$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _kDiv$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _kDiv$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _kDiv$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 250  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??KColourValue@Ogre@@QBE?AV01@M@Z ENDP			; Ogre::ColourValue::operator/
_TEXT	ENDS
PUBLIC	??YColourValue@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::ColourValue::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YColourValue@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rkVector$ = 8						; size = 4
??YColourValue@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::ColourValue::operator+=, COMDAT
; _this$ = ecx

; 266  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 			r += rkVector.r;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 268  : 			g += rkVector.g;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 269  : 			b += rkVector.b;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 270  : 			a += rkVector.a;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fadd	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+12]

; 271  : 
; 272  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 273  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YColourValue@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::ColourValue::operator+=
_TEXT	ENDS
PUBLIC	??ZColourValue@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::ColourValue::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZColourValue@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rkVector$ = 8						; size = 4
??ZColourValue@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::ColourValue::operator-=, COMDAT
; _this$ = ecx

; 276  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 			r -= rkVector.r;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 278  : 			g -= rkVector.g;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 279  : 			b -= rkVector.b;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 280  : 			a -= rkVector.a;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _rkVector$[ebp]
	fsub	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+12]

; 281  : 
; 282  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 283  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZColourValue@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::ColourValue::operator-=
_TEXT	ENDS
PUBLIC	??XColourValue@Ogre@@QAEAAV01@M@Z		; Ogre::ColourValue::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XColourValue@Ogre@@QAEAAV01@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fScalar$ = 8						; size = 4
??XColourValue@Ogre@@QAEAAV01@M@Z PROC			; Ogre::ColourValue::operator*=, COMDAT
; _this$ = ecx

; 286  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 287  : 			r *= fScalar;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _fScalar$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 288  : 			g *= fScalar;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _fScalar$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 289  : 			b *= fScalar;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _fScalar$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 290  : 			a *= fScalar;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _fScalar$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 291  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 292  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XColourValue@Ogre@@QAEAAV01@M@Z ENDP			; Ogre::ColourValue::operator*=
_TEXT	ENDS
PUBLIC	??_0ColourValue@Ogre@@QAEAAV01@M@Z		; Ogre::ColourValue::operator/=
; Function compile flags: /Odtp
;	COMDAT ??_0ColourValue@Ogre@@QAEAAV01@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fInv$ = -4						; size = 4
_fScalar$ = 8						; size = 4
??_0ColourValue@Ogre@@QAEAAV01@M@Z PROC			; Ogre::ColourValue::operator/=, COMDAT
; _this$ = ecx

; 295  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 296  : 			assert( fScalar != 0.0 );
; 297  : 
; 298  : 			float fInv = 1.0f / fScalar;

	fld	DWORD PTR _fScalar$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _fInv$[ebp]

; 299  : 
; 300  : 			r *= fInv;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _fInv$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 301  : 			g *= fInv;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _fInv$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 302  : 			b *= fInv;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _fInv$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 303  : 			a *= fInv;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _fInv$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 304  : 
; 305  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 306  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??_0ColourValue@Ogre@@QAEAAV01@M@Z ENDP			; Ogre::ColourValue::operator/=
_TEXT	ENDS
PUBLIC	??4ColourValue@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::ColourValue::operator=
; Function compile flags: /Odtp
;	COMDAT ??4ColourValue@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ColourValue@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::ColourValue::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4ColourValue@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::ColourValue::operator=
_TEXT	ENDS
PUBLIC	??_FColourValue@Ogre@@QAEXXZ			; Ogre::ColourValue::`default constructor closure'
; Function compile flags: /Odtp
;	COMDAT ??_FColourValue@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_FColourValue@Ogre@@QAEXXZ PROC			; Ogre::ColourValue::`default constructor closure', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue
	mov	esp, ebp
	pop	ebp
	ret	0
??_FColourValue@Ogre@@QAEXXZ ENDP			; Ogre::ColourValue::`default constructor closure'
_TEXT	ENDS
PUBLIC	??0Vector2@Ogre@@QAE@XZ				; Ogre::Vector2::Vector2
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector2.h
;	COMDAT ??0Vector2@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector2@Ogre@@QAE@XZ PROC				; Ogre::Vector2::Vector2, COMDAT
; _this$ = ecx

; 50   : 		Vector2(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector2@Ogre@@QAE@XZ ENDP				; Ogre::Vector2::Vector2
_TEXT	ENDS
PUBLIC	??0Vector2@Ogre@@QAE@MM@Z			; Ogre::Vector2::Vector2
; Function compile flags: /Odtp
;	COMDAT ??0Vector2@Ogre@@QAE@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
??0Vector2@Ogre@@QAE@MM@Z PROC				; Ogre::Vector2::Vector2, COMDAT
; _this$ = ecx

; 51   : 		Vector2( float x1, float y1 ) : x(x1), y(y1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Vector2@Ogre@@QAE@MM@Z ENDP				; Ogre::Vector2::Vector2
_TEXT	ENDS
PUBLIC	??0Vector2@Ogre@@QAE@M@Z			; Ogre::Vector2::Vector2
; Function compile flags: /Odtp
;	COMDAT ??0Vector2@Ogre@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector2@Ogre@@QAE@M@Z PROC				; Ogre::Vector2::Vector2, COMDAT
; _this$ = ecx

; 52   : 		Vector2(float v) : x(v), y(v){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector2@Ogre@@QAE@M@Z ENDP				; Ogre::Vector2::Vector2
_TEXT	ENDS
PUBLIC	??4Vector2@Ogre@@QAEABV01@ABV01@@Z		; Ogre::Vector2::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Vector2@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??4Vector2@Ogre@@QAEABV01@ABV01@@Z PROC			; Ogre::Vector2::operator=, COMDAT
; _this$ = ecx

; 55   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 			x = vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 57   : 			y = vec.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 58   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 59   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector2@Ogre@@QAEABV01@ABV01@@Z ENDP			; Ogre::Vector2::operator=
_TEXT	ENDS
PUBLIC	??YVector2@Ogre@@QAEXABV01@@Z			; Ogre::Vector2::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YVector2@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??YVector2@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector2::operator+=, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			x += vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 63   : 			y += vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 64   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YVector2@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector2::operator+=
_TEXT	ENDS
PUBLIC	??ZVector2@Ogre@@QAEXABV01@@Z			; Ogre::Vector2::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZVector2@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??ZVector2@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector2::operator-=, COMDAT
; _this$ = ecx

; 66   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 			x -= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 68   : 			y -= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 69   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector2@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector2::operator-=
_TEXT	ENDS
PUBLIC	??XVector2@Ogre@@QAEXM@Z			; Ogre::Vector2::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector2@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XVector2@Ogre@@QAEXM@Z PROC				; Ogre::Vector2::operator*=, COMDAT
; _this$ = ecx

; 71   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 72   : 			x *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 73   : 			y *= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 74   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector2@Ogre@@QAEXM@Z ENDP				; Ogre::Vector2::operator*=
_TEXT	ENDS
PUBLIC	??_0Vector2@Ogre@@QAEXM@Z			; Ogre::Vector2::operator/=
; Function compile flags: /Odtp
;	COMDAT ??_0Vector2@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??_0Vector2@Ogre@@QAEXM@Z PROC				; Ogre::Vector2::operator/=, COMDAT
; _this$ = ecx

; 76   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 			x /= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 78   : 			y /= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fdiv	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 79   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??_0Vector2@Ogre@@QAEXM@Z ENDP				; Ogre::Vector2::operator/=
_TEXT	ENDS
PUBLIC	??8Vector2@Ogre@@QAE_NABV01@@Z			; Ogre::Vector2::operator==
; Function compile flags: /Odtp
;	COMDAT ??8Vector2@Ogre@@QAE_NABV01@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??8Vector2@Ogre@@QAE_NABV01@@Z PROC			; Ogre::Vector2::operator==, COMDAT
; _this$ = ecx

; 81   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 			return x==vec.x&&y==vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv72[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv72[ebp]

; 83   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector2@Ogre@@QAE_NABV01@@Z ENDP			; Ogre::Vector2::operator==
_TEXT	ENDS
PUBLIC	??9Vector2@Ogre@@QAE_NABV01@@Z			; Ogre::Vector2::operator!=
; Function compile flags: /Odtp
;	COMDAT ??9Vector2@Ogre@@QAE_NABV01@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??9Vector2@Ogre@@QAE_NABV01@@Z PROC			; Ogre::Vector2::operator!=, COMDAT
; _this$ = ecx

; 85   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 			return x!=vec.x||y!=vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@2
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@2
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN4@operator@2
$LN3@operator@2:
	mov	DWORD PTR tv72[ebp], 1
$LN4@operator@2:
	mov	al, BYTE PTR tv72[ebp]

; 87   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9Vector2@Ogre@@QAE_NABV01@@Z ENDP			; Ogre::Vector2::operator!=
_TEXT	ENDS
PUBLIC	??BVector2@Ogre@@QAEPAMXZ			; Ogre::Vector2::operator float *
; Function compile flags: /Odtp
;	COMDAT ??BVector2@Ogre@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector2@Ogre@@QAEPAMXZ PROC				; Ogre::Vector2::operator float *, COMDAT
; _this$ = ecx

; 89   : 		operator float *(){ return &x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector2@Ogre@@QAEPAMXZ ENDP				; Ogre::Vector2::operator float *
_TEXT	ENDS
PUBLIC	??BVector2@Ogre@@QBEPBMXZ			; Ogre::Vector2::operator float const *
; Function compile flags: /Odtp
;	COMDAT ??BVector2@Ogre@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector2@Ogre@@QBEPBMXZ PROC				; Ogre::Vector2::operator float const *, COMDAT
; _this$ = ecx

; 90   : 		operator const float *() const{ return &x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector2@Ogre@@QBEPBMXZ ENDP				; Ogre::Vector2::operator float const *
_TEXT	ENDS
PUBLIC	??HVector2@Ogre@@QBE?AV01@XZ			; Ogre::Vector2::operator+
; Function compile flags: /Odtp
;	COMDAT ??HVector2@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??HVector2@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector2::operator+, COMDAT
; _this$ = ecx

; 91   : 		Vector2 operator +() const{ return *this; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??HVector2@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector2::operator+
_TEXT	ENDS
PUBLIC	??GVector2@Ogre@@QBE?AV01@XZ			; Ogre::Vector2::operator-
; Function compile flags: /Odtp
;	COMDAT ??GVector2@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??GVector2@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector2::operator-, COMDAT
; _this$ = ecx

; 92   : 		Vector2 operator -() const{ return Vector2(-x,-y);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector2@Ogre@@QAE@MM@Z		; Ogre::Vector2::Vector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??GVector2@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector2::operator-
_TEXT	ENDS
PUBLIC	?setElement@Vector2@Ogre@@QAEXMM@Z		; Ogre::Vector2::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector2@Ogre@@QAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
?setElement@Vector2@Ogre@@QAEXMM@Z PROC			; Ogre::Vector2::setElement, COMDAT
; _this$ = ecx

; 95   : 		{ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 			x = x1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]

; 97   : 			y = y1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]

; 98   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setElement@Vector2@Ogre@@QAEXMM@Z ENDP			; Ogre::Vector2::setElement
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?length@Vector2@Ogre@@QBEMXZ			; Ogre::Vector2::length
; Function compile flags: /Odtp
;	COMDAT ?length@Vector2@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv80 = -8						; size = 4
_this$ = -4						; size = 4
?length@Vector2@Ogre@@QBEMXZ PROC			; Ogre::Vector2::length, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 			return (float)sqrt(x*x + y*y);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv80[ebp]
	fld	DWORD PTR tv80[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 102  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@Vector2@Ogre@@QBEMXZ ENDP			; Ogre::Vector2::length
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?lengthSqr@Vector2@Ogre@@QBEMXZ			; Ogre::Vector2::lengthSqr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector2.h
;	COMDAT ?lengthSqr@Vector2@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
?lengthSqr@Vector2@Ogre@@QBEMXZ PROC			; Ogre::Vector2::lengthSqr, COMDAT
; _this$ = ecx

; 104  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 			return x*x + y*y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv78[ebp]
	fld	DWORD PTR tv78[ebp]

; 106  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?lengthSqr@Vector2@Ogre@@QBEMXZ ENDP			; Ogre::Vector2::lengthSqr
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@XZ				; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ??0Vector3@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector3@Ogre@@QAE@XZ PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 49   : 		Vector3(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@Ogre@@QAE@XZ ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@ABV01@@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0Vector3@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 50   : 		Vector3(const Vector3 &rhs)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		{
; 52   : 			x = rhs.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 53   : 			y = rhs.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 54   : 			z = rhs.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 55   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@MMM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
??0Vector3@Ogre@@QAE@MMM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 56   : 		Vector3( float x1, float y1, float z1 ) : x(x1), y(y1), z(z1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector3@Ogre@@QAE@MMM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@M@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@M@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 57   : 		Vector3(float v) : x(v), y(v), z(v){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@M@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@PAM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@PAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@PAM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 58   : 		Vector3(float* v) : x(v[0]), y(v[1]), z(v[2]){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@PAM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??4Vector3@Ogre@@QAEABV01@ABV01@@Z		; Ogre::Vector3::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Vector3@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z PROC			; Ogre::Vector3::operator=, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			x = vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 63   : 			y = vec.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 64   : 			z = vec.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 65   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 66   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z ENDP			; Ogre::Vector3::operator=
_TEXT	ENDS
PUBLIC	??YVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??YVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator+=, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			x += vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 70   : 			y += vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 71   : 			z += vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 72   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator+=
_TEXT	ENDS
PUBLIC	??ZVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??ZVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator-=, COMDAT
; _this$ = ecx

; 74   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 			x -= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 76   : 			y -= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 77   : 			z -= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 78   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator-=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XVector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 81   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 			x *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 83   : 			y *= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 84   : 			z *= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 85   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??XVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 88   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 			x *= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 90   : 			y *= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 91   : 			z *= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 92   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??_0Vector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator/=
; Function compile flags: /Odtp
;	COMDAT ??_0Vector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??_0Vector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator/=, COMDAT
; _this$ = ecx

; 95   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 			x /= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 97   : 			y /= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fdiv	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 98   : 			z /= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fdiv	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 99   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??_0Vector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator/=
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QAEPAMXZ			; Ogre::Vector3::operator float *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QAEPAMXZ PROC				; Ogre::Vector3::operator float *, COMDAT
; _this$ = ecx

; 101  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 103  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QAEPAMXZ ENDP				; Ogre::Vector3::operator float *
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QBEPBMXZ			; Ogre::Vector3::operator float const *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QBEPBMXZ PROC				; Ogre::Vector3::operator float const *, COMDAT
; _this$ = ecx

; 105  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 107  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QBEPBMXZ ENDP				; Ogre::Vector3::operator float const *
_TEXT	ENDS
PUBLIC	??HVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator+
; Function compile flags: /Odtp
;	COMDAT ??HVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??HVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator+, COMDAT
; _this$ = ecx

; 109  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??HVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator+
_TEXT	ENDS
PUBLIC	??GVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator-
; Function compile flags: /Odtp
;	COMDAT ??GVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??GVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator-, COMDAT
; _this$ = ecx

; 113  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 			return Vector3(-x, -y, -z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 115  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??GVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator-
_TEXT	ENDS
PUBLIC	??8Vector3@Ogre@@QBE_NABV01@@Z			; Ogre::Vector3::operator==
; Function compile flags: /Odtp
;	COMDAT ??8Vector3@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??8Vector3@Ogre@@QBE_NABV01@@Z PROC			; Ogre::Vector3::operator==, COMDAT
; _this$ = ecx

; 117  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 			return (x==vec.x && y==vec.y && z==vec.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@3
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@3
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@3
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator@3
$LN3@operator@3:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator@3:
	mov	al, BYTE PTR tv77[ebp]

; 119  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector3@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::Vector3::operator==
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXMMM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
?setElement@Vector3@Ogre@@QAEXMMM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			x = x1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]

; 123  : 			y = y1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]

; 124  : 			z = z1;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]

; 125  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setElement@Vector3@Ogre@@QAEXMMM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXPAM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXPAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?setElement@Vector3@Ogre@@QAEXPAM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 127  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 			x = p[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 129  : 			y = p[1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 130  : 			z = p[2];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 131  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setElement@Vector3@Ogre@@QAEXPAM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?Sqrt@Ogre@@YAMM@Z				; Ogre::Sqrt
PUBLIC	?length@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::length
; Function compile flags: /Odtp
;	COMDAT ?length@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?length@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::length, COMDAT
; _this$ = ecx

; 133  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 			return (float)Sqrt(x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@Ogre@@YAMM@Z			; Ogre::Sqrt
	add	esp, 4

; 135  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::length
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
_TEXT	ENDS
;	COMDAT ?Sqrt@Ogre@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Sqrt@Ogre@@YAMM@Z PROC					; Ogre::Sqrt, COMDAT

; 59   : 	{

	push	ebp
	mov	ebp, esp

; 60   : 		return (float)sqrt(x);

	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 61   : 	}

	pop	ebp
	ret	0
?Sqrt@Ogre@@YAMM@Z ENDP					; Ogre::Sqrt
_TEXT	ENDS
PUBLIC	?lengthSqr@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::lengthSqr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ?lengthSqr@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?lengthSqr@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::lengthSqr, COMDAT
; _this$ = ecx

; 137  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 			return (x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]

; 139  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?lengthSqr@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::lengthSqr
_TEXT	ENDS
PUBLIC	??0Quaternion@Ogre@@QAE@XZ			; Ogre::Quaternion::Quaternion
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrequaternion.h
;	COMDAT ??0Quaternion@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Quaternion@Ogre@@QAE@XZ PROC				; Ogre::Quaternion::Quaternion, COMDAT
; _this$ = ecx

; 54   : 		Quaternion():x(0), y(0), z(0), w(1.0f){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Quaternion@Ogre@@QAE@XZ ENDP				; Ogre::Quaternion::Quaternion
_TEXT	ENDS
PUBLIC	??0Quaternion@Ogre@@QAE@MMMM@Z			; Ogre::Quaternion::Quaternion
; Function compile flags: /Odtp
;	COMDAT ??0Quaternion@Ogre@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
_w1$ = 20						; size = 4
??0Quaternion@Ogre@@QAE@MMMM@Z PROC			; Ogre::Quaternion::Quaternion, COMDAT
; _this$ = ecx

; 55   : 		Quaternion( float x1, float y1, float z1, float w1 ) : x(x1), y(y1), z(z1), w(w1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w1$[ebp]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Quaternion@Ogre@@QAE@MMMM@Z ENDP			; Ogre::Quaternion::Quaternion
_TEXT	ENDS
PUBLIC	??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Quaternion::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_quat$ = 8						; size = 4
??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::Quaternion::operator=, COMDAT
; _this$ = ecx

; 59   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 			x = quat.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 61   : 			y = quat.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 62   : 			z = quat.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 63   : 			w = quat.w;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]

; 64   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 65   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::Quaternion::operator=
_TEXT	ENDS
PUBLIC	??XQuaternion@Ogre@@QAEXM@Z			; Ogre::Quaternion::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XQuaternion@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XQuaternion@Ogre@@QAEXM@Z PROC			; Ogre::Quaternion::operator*=, COMDAT
; _this$ = ecx

; 67   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 			x *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 69   : 			y *= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 70   : 			z *= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 71   : 			w *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 72   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XQuaternion@Ogre@@QAEXM@Z ENDP			; Ogre::Quaternion::operator*=
_TEXT	ENDS
PUBLIC	?norm@Quaternion@Ogre@@QAEMXZ			; Ogre::Quaternion::norm
; Function compile flags: /Odtp
;	COMDAT ?norm@Quaternion@Ogre@@QAEMXZ
_TEXT	SEGMENT
tv94 = -8						; size = 4
_this$ = -4						; size = 4
?norm@Quaternion@Ogre@@QAEMXZ PROC			; Ogre::Quaternion::norm, COMDAT
; _this$ = ecx

; 74   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 			return x*x+y*y+z*z+w*w;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv94[ebp]
	fld	DWORD PTR tv94[ebp]

; 76   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?norm@Quaternion@Ogre@@QAEMXZ ENDP			; Ogre::Quaternion::norm
_TEXT	ENDS
PUBLIC	?identity@Quaternion@Ogre@@QAEXXZ		; Ogre::Quaternion::identity
; Function compile flags: /Odtp
;	COMDAT ?identity@Quaternion@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?identity@Quaternion@Ogre@@QAEXXZ PROC			; Ogre::Quaternion::identity, COMDAT
; _this$ = ecx

; 78   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 79   : 			x = y = z = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx]

; 80   : 			w = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+12]

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?identity@Quaternion@Ogre@@QAEXXZ ENDP			; Ogre::Quaternion::identity
_TEXT	ENDS
PUBLIC	?inverse@Quaternion@Ogre@@QAEXXZ		; Ogre::Quaternion::inverse
; Function compile flags: /Odtp
;	COMDAT ?inverse@Quaternion@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?inverse@Quaternion@Ogre@@QAEXXZ PROC			; Ogre::Quaternion::inverse, COMDAT
; _this$ = ecx

; 83   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 			x = -x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fchs
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 85   : 			y = -y;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fchs
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 86   : 			z = -z;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fchs
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 87   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?inverse@Quaternion@Ogre@@QAEXXZ ENDP			; Ogre::Quaternion::inverse
_TEXT	ENDS
PUBLIC	?inverse@Quaternion@Ogre@@QBEXAAV12@@Z		; Ogre::Quaternion::inverse
; Function compile flags: /Odtp
;	COMDAT ?inverse@Quaternion@Ogre@@QBEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_quat$ = 8						; size = 4
?inverse@Quaternion@Ogre@@QBEXAAV12@@Z PROC		; Ogre::Quaternion::inverse, COMDAT
; _this$ = ecx

; 89   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 			quat.x = -x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fchs
	mov	ecx, DWORD PTR _quat$[ebp]
	fstp	DWORD PTR [ecx]

; 91   : 			quat.y = -y;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fchs
	mov	eax, DWORD PTR _quat$[ebp]
	fstp	DWORD PTR [eax+4]

; 92   : 			quat.z = -z;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fchs
	mov	edx, DWORD PTR _quat$[ebp]
	fstp	DWORD PTR [edx+8]

; 93   : 			quat.w = w;

	mov	eax, DWORD PTR _quat$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]

; 94   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?inverse@Quaternion@Ogre@@QBEXAAV12@@Z ENDP		; Ogre::Quaternion::inverse
_TEXT	ENDS
PUBLIC	?setElement@Quaternion@Ogre@@QAEXMMMM@Z		; Ogre::Quaternion::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Quaternion@Ogre@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
_w1$ = 20						; size = 4
?setElement@Quaternion@Ogre@@QAEXMMMM@Z PROC		; Ogre::Quaternion::setElement, COMDAT
; _this$ = ecx

; 96   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 			x = x1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]

; 98   : 			y = y1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]

; 99   : 			z = z1;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]

; 100  : 			w = w1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w1$[ebp]
	fstp	DWORD PTR [eax+12]

; 101  : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?setElement@Quaternion@Ogre@@QAEXMMMM@Z ENDP		; Ogre::Quaternion::setElement
_TEXT	ENDS
PUBLIC	??9Quaternion@Ogre@@QBE_NABV01@@Z		; Ogre::Quaternion::operator!=
EXTRN	??8Quaternion@Ogre@@QBE_NABV01@@Z:PROC		; Ogre::Quaternion::operator==
; Function compile flags: /Odtp
;	COMDAT ??9Quaternion@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_quat$ = 8						; size = 4
??9Quaternion@Ogre@@QBE_NABV01@@Z PROC			; Ogre::Quaternion::operator!=, COMDAT
; _this$ = ecx

; 105  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 			return !operator==(quat);

	mov	eax, DWORD PTR _quat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8Quaternion@Ogre@@QBE_NABV01@@Z	; Ogre::Quaternion::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 107  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9Quaternion@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::Quaternion::operator!=
_TEXT	ENDS
PUBLIC	?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix3::getRow3
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix3.h
;	COMDAT ?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z PROC		; Ogre::Matrix3::getRow3, COMDAT
; _this$ = ecx

; 67   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 			return Vector3(m[i][0], m[i][1], m[i][2]);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax+8]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx+4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 69   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z ENDP		; Ogre::Matrix3::getRow3
_TEXT	ENDS
PUBLIC	?identity@Matrix3@Ogre@@QAEXXZ			; Ogre::Matrix3::identity
; Function compile flags: /Odtp
;	COMDAT ?identity@Matrix3@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?identity@Matrix3@Ogre@@QAEXXZ PROC			; Ogre::Matrix3::identity, COMDAT
; _this$ = ecx

; 71   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 72   : 			_11=1.0f, _12=0.0f, _13=0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+8]

; 73   : 			_21=0.0f, _22=1.0f, _23=0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+20]

; 74   : 			_31=0.0f, _32=0.0f, _33=1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [edx+32]

; 75   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?identity@Matrix3@Ogre@@QAEXXZ ENDP			; Ogre::Matrix3::identity
_TEXT	ENDS
PUBLIC	?setRow@Matrix3@Ogre@@QAEXIMMM@Z		; Ogre::Matrix3::setRow
; Function compile flags: /Odtp
;	COMDAT ?setRow@Matrix3@Ogre@@QAEXIMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?setRow@Matrix3@Ogre@@QAEXIMMM@Z PROC			; Ogre::Matrix3::setRow, COMDAT
; _this$ = ecx

; 77   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 			m[i][0] = x;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [ecx+eax]

; 79   : 			m[i][1] = y;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+edx+4]

; 80   : 			m[i][2] = z;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [edx+ecx+8]

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?setRow@Matrix3@Ogre@@QAEXIMMM@Z ENDP			; Ogre::Matrix3::setRow
_TEXT	ENDS
PUBLIC	?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix3::getColumn
; Function compile flags: /Odtp
;	COMDAT ?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z PROC	; Ogre::Matrix3::getColumn, COMDAT
; _this$ = ecx

; 84   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 			return Vector3(m[0][i], m[1][i], m[2][i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4+24]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx*4+12]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx*4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 86   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z ENDP	; Ogre::Matrix3::getColumn
_TEXT	ENDS
PUBLIC	?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z		; Ogre::Matrix3::makeScaleMatrix
EXTRN	?makeScaleMatrix@Matrix3@Ogre@@QAEXABVVector3@2@@Z:PROC ; Ogre::Matrix3::makeScaleMatrix
; Function compile flags: /Odtp
;	COMDAT ?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T80318 = -12						; size = 12
_s$ = 8							; size = 4
?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z PROC		; Ogre::Matrix3::makeScaleMatrix, COMDAT
; _this$ = ecx

; 93   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 94   : 			makeScaleMatrix(Vector3(s, s, s));

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T80318[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?makeScaleMatrix@Matrix3@Ogre@@QAEXABVVector3@2@@Z ; Ogre::Matrix3::makeScaleMatrix

; 95   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z ENDP		; Ogre::Matrix3::makeScaleMatrix
_TEXT	ENDS
PUBLIC	??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Matrix3::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Matrix3::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, DWORD PTR ___that$[ebp]
	mov	ecx, 9
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Matrix3::operator=
_TEXT	ENDS
PUBLIC	??AMatrix4@Ogre@@QBEPBMI@Z			; Ogre::Matrix4::operator[]
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.h
;	COMDAT ??AMatrix4@Ogre@@QBEPBMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_irow$ = 8						; size = 4
??AMatrix4@Ogre@@QBEPBMI@Z PROC				; Ogre::Matrix4::operator[], COMDAT
; _this$ = ecx

; 88   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 			return &m[irow][0];

	mov	eax, DWORD PTR _irow$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]

; 90   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@Ogre@@QBEPBMI@Z ENDP				; Ogre::Matrix4::operator[]
_TEXT	ENDS
PUBLIC	??AMatrix4@Ogre@@QAEPAMI@Z			; Ogre::Matrix4::operator[]
; Function compile flags: /Odtp
;	COMDAT ??AMatrix4@Ogre@@QAEPAMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_irow$ = 8						; size = 4
??AMatrix4@Ogre@@QAEPAMI@Z PROC				; Ogre::Matrix4::operator[], COMDAT
; _this$ = ecx

; 92   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 			return &m[irow][0];

	mov	eax, DWORD PTR _irow$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]

; 94   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@Ogre@@QAEPAMI@Z ENDP				; Ogre::Matrix4::operator[]
_TEXT	ENDS
PUBLIC	?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z		; Ogre::Matrix4::makeScaleMatrix
EXTRN	?makeScaleMatrix@Matrix4@Ogre@@QAEXABVVector3@2@@Z:PROC ; Ogre::Matrix4::makeScaleMatrix
; Function compile flags: /Odtp
;	COMDAT ?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T80327 = -12						; size = 12
_s$ = 8							; size = 4
?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z PROC		; Ogre::Matrix4::makeScaleMatrix, COMDAT
; _this$ = ecx

; 101  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 			makeScaleMatrix(Vector3(s, s, s));

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T80327[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?makeScaleMatrix@Matrix4@Ogre@@QAEXABVVector3@2@@Z ; Ogre::Matrix4::makeScaleMatrix

; 103  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z ENDP		; Ogre::Matrix4::makeScaleMatrix
_TEXT	ENDS
PUBLIC	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z		; Ogre::Matrix4::setRow
; Function compile flags: /Odtp
;	COMDAT ?setRow@Matrix4@Ogre@@QAEXIMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_w$ = 24						; size = 4
?setRow@Matrix4@Ogre@@QAEXIMMMM@Z PROC			; Ogre::Matrix4::setRow, COMDAT
; _this$ = ecx

; 133  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 			m[i][0] = x;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [ecx+eax]

; 135  : 			m[i][1] = y;

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+edx+4]

; 136  : 			m[i][2] = z;

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [edx+ecx+8]

; 137  : 			m[i][3] = w;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [ecx+eax+12]

; 138  : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?setRow@Matrix4@Ogre@@QAEXIMMMM@Z ENDP			; Ogre::Matrix4::setRow
_TEXT	ENDS
PUBLIC	?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z		; Ogre::Matrix4::setColumn
; Function compile flags: /Odtp
;	COMDAT ?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_w$ = 24						; size = 4
?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z PROC		; Ogre::Matrix4::setColumn, COMDAT
; _this$ = ecx

; 140  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 			m[0][i] = x;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [ecx+eax*4]

; 142  : 			m[1][i] = y;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+edx*4+16]

; 143  : 			m[2][i] = z;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [edx+ecx*4+32]

; 144  : 			m[3][i] = w;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [ecx+eax*4+48]

; 145  : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z ENDP		; Ogre::Matrix4::setColumn
_TEXT	ENDS
PUBLIC	?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix4::getRow3
; Function compile flags: /Odtp
;	COMDAT ?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z PROC		; Ogre::Matrix4::getRow3, COMDAT
; _this$ = ecx

; 147  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 			return Vector3(m[i][0], m[i][1], m[i][2]);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax+8]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx+4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 149  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z ENDP		; Ogre::Matrix4::getRow3
_TEXT	ENDS
PUBLIC	?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix4::getColumn3
; Function compile flags: /Odtp
;	COMDAT ?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z PROC	; Ogre::Matrix4::getColumn3, COMDAT
; _this$ = ecx

; 151  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 			return Vector3(m[0][i], m[1][i], m[2][i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4+32]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx*4+16]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx*4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 153  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z ENDP	; Ogre::Matrix4::getColumn3
_TEXT	ENDS
PUBLIC	??0Vector4@Ogre@@QAE@MMMM@Z			; Ogre::Vector4::Vector4
PUBLIC	?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z	; Ogre::Matrix4::getRow4
; Function compile flags: /Odtp
;	COMDAT ?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z PROC		; Ogre::Matrix4::getRow4, COMDAT
; _this$ = ecx

; 155  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 			return Vector4(m[i][0], m[i][1], m[i][2], m[i][3]);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax+12]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx+8]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx+4]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector4@Ogre@@QAE@MMMM@Z		; Ogre::Vector4::Vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 157  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z ENDP		; Ogre::Matrix4::getRow4
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector4.h
_TEXT	ENDS
;	COMDAT ??0Vector4@Ogre@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
_w1$ = 20						; size = 4
??0Vector4@Ogre@@QAE@MMMM@Z PROC			; Ogre::Vector4::Vector4, COMDAT
; _this$ = ecx

; 44   : 		Vector4( float x1, float y1, float z1, float w1 ) : x(x1), y(y1), z(z1), w(w1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w1$[ebp]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Vector4@Ogre@@QAE@MMMM@Z ENDP			; Ogre::Vector4::Vector4
_TEXT	ENDS
PUBLIC	?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z	; Ogre::Matrix4::getColumn4
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.h
;	COMDAT ?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z PROC	; Ogre::Matrix4::getColumn4, COMDAT
; _this$ = ecx

; 159  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 			return Vector4(m[0][i], m[1][i], m[2][i], m[3][i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4+48]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx*4+32]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx*4+16]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector4@Ogre@@QAE@MMMM@Z		; Ogre::Vector4::Vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z ENDP	; Ogre::Matrix4::getColumn4
_TEXT	ENDS
PUBLIC	?setTranslate@Matrix4@Ogre@@QAEXMMM@Z		; Ogre::Matrix4::setTranslate
; Function compile flags: /Odtp
;	COMDAT ?setTranslate@Matrix4@Ogre@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?setTranslate@Matrix4@Ogre@@QAEXMMM@Z PROC		; Ogre::Matrix4::setTranslate, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			setRow( 3, x, y, z, 1.0f );

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 165  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setTranslate@Matrix4@Ogre@@QAEXMMM@Z ENDP		; Ogre::Matrix4::setTranslate
_TEXT	ENDS
PUBLIC	?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z	; Ogre::Matrix4::setTranslate
; Function compile flags: /Odtp
;	COMDAT ?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z PROC	; Ogre::Matrix4::setTranslate, COMDAT
; _this$ = ecx

; 167  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 			setTranslate( pos.x, pos.y, pos.z );

	mov	eax, DWORD PTR _pos$[ebp]
	push	ecx
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _pos$[ebp]
	push	ecx
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setTranslate@Matrix4@Ogre@@QAEXMMM@Z	; Ogre::Matrix4::setTranslate

; 169  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z ENDP	; Ogre::Matrix4::setTranslate
_TEXT	ENDS
PUBLIC	?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ	; Ogre::Matrix4::getTranslate
; Function compile flags: /Odtp
;	COMDAT ?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::Matrix4::getTranslate, COMDAT
; _this$ = ecx

; 171  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 172  : 			return getRow3(3);

	push	3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z ; Ogre::Matrix4::getRow3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 173  : 		};

	mov	esp, ebp
	pop	ebp
	ret	4
?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::Matrix4::getTranslate
_TEXT	ENDS
PUBLIC	?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z ; Ogre::Matrix4::transformCoord
; Function compile flags: /Odtp
;	COMDAT ?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z
_TEXT	SEGMENT
tv182 = -16						; size = 4
tv174 = -12						; size = 4
tv166 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_vec$ = 12						; size = 4
?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z PROC ; Ogre::Matrix4::transformCoord, COMDAT
; _this$ = ecx

; 233  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 		return Vector3( vec.x*_11 + vec.y*_21 + vec.z*_31 + _41,
; 235  : 			vec.x*_12 + vec.y*_22 + vec.z*_32 + _42,
; 236  : 			vec.x*_13 + vec.y*_23 + vec.z*_33 + _43 );

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+24]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+40]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+56]
	fstp	DWORD PTR tv166[ebp]
	fld	DWORD PTR tv166[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+20]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+36]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+52]
	fstp	DWORD PTR tv174[ebp]
	fld	DWORD PTR tv174[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+16]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+32]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [edx+48]
	fstp	DWORD PTR tv182[ebp]
	fld	DWORD PTR tv182[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 237  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z ENDP ; Ogre::Matrix4::transformCoord
_TEXT	ENDS
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ	; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
PUBLIC	??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::~vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ	; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
PUBLIC	??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >
PUBLIC	??0RibbonSectionDesc@Ogre@@QAE@XZ		; Ogre::RibbonSectionDesc::RibbonSectionDesc
;	COMDAT xdata$x
; File i:\svnroot\client\ogremain\ogreribbondata.h
xdata$x	SEGMENT
__unwindtable$??0RibbonSectionDesc@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RibbonSectionDesc@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0RibbonSectionDesc@Ogre@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0RibbonSectionDesc@Ogre@@QAE@XZ$2
__ehfuncinfo$??0RibbonSectionDesc@Ogre@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0RibbonSectionDesc@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0RibbonSectionDesc@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0RibbonSectionDesc@Ogre@@QAE@XZ PROC			; Ogre::RibbonSectionDesc::RibbonSectionDesc, COMDAT
; _this$ = ecx

; 65   : 		RibbonSectionDesc(){};

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RibbonSectionDesc@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RibbonSectionDesc@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::~vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >
__unwindfunclet$??0RibbonSectionDesc@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
__unwindfunclet$??0RibbonSectionDesc@Ogre@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$??0RibbonSectionDesc@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RibbonSectionDesc@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RibbonSectionDesc@Ogre@@QAE@XZ ENDP			; Ogre::RibbonSectionDesc::RibbonSectionDesc
PUBLIC	??1RibbonSectionDesc@Ogre@@QAE@XZ		; Ogre::RibbonSectionDesc::~RibbonSectionDesc
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1RibbonSectionDesc@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1RibbonSectionDesc@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1RibbonSectionDesc@Ogre@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1RibbonSectionDesc@Ogre@@QAE@XZ$2
__ehfuncinfo$??1RibbonSectionDesc@Ogre@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1RibbonSectionDesc@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1RibbonSectionDesc@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1RibbonSectionDesc@Ogre@@QAE@XZ PROC			; Ogre::RibbonSectionDesc::~RibbonSectionDesc, COMDAT
; _this$ = ecx

; 66   : 		~RibbonSectionDesc(){};

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1RibbonSectionDesc@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::~vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1RibbonSectionDesc@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::~vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >
__unwindfunclet$??1RibbonSectionDesc@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
__unwindfunclet$??1RibbonSectionDesc@Ogre@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$??1RibbonSectionDesc@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1RibbonSectionDesc@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1RibbonSectionDesc@Ogre@@QAE@XZ ENDP			; Ogre::RibbonSectionDesc::~RibbonSectionDesc
PUBLIC	??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=
PUBLIC	??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<float,std::allocator<float> >::operator=
PUBLIC	??4?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator=
PUBLIC	??4RibbonSectionDesc@Ogre@@QAEAAV01@AAV01@@Z	; Ogre::RibbonSectionDesc::operator=
; Function compile flags: /Odtp
;	COMDAT ??4RibbonSectionDesc@Ogre@@QAEAAV01@AAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_src$ = 8						; size = 4
??4RibbonSectionDesc@Ogre@@QAEAAV01@AAV01@@Z PROC	; Ogre::RibbonSectionDesc::operator=, COMDAT
; _this$ = ecx

; 74   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 			m_dots = src.m_dots;

	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator=

; 76   : 			m_vdata = src.m_vdata;

	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<float,std::allocator<float> >::operator=

; 77   : 			m_lines = src.m_lines;

	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=

; 78   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 79   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4RibbonSectionDesc@Ogre@@QAEAAV01@AAV01@@Z ENDP	; Ogre::RibbonSectionDesc::operator=
_TEXT	ENDS
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z ; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
PUBLIC	??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >
PUBLIC	??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z		; Ogre::RibbonSectionDesc::RibbonSectionDesc
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z$2
__ehfuncinfo$??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z PROC		; Ogre::RibbonSectionDesc::RibbonSectionDesc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z ; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::~vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >
__unwindfunclet$??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
__unwindfunclet$??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::RibbonSectionDesc::RibbonSectionDesc
PUBLIC	?getRTTI@RibbonEmitterData@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::RibbonEmitterData::getRTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@RibbonEmitterData@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@RibbonEmitterData@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::RibbonEmitterData::getRTTI, COMDAT
; _this$ = ecx

; 109  : 		DECLARE_RTTI(RibbonEmitterData)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@RibbonEmitterData@Ogre@@2VRuntimeClass@2@B ; Ogre::RibbonEmitterData::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@RibbonEmitterData@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::RibbonEmitterData::getRTTI
_TEXT	ENDS
PUBLIC	??0RibbonEmitterData@Ogre@@QAE@XZ		; Ogre::RibbonEmitterData::RibbonEmitterData
PUBLIC	?newObject@RibbonEmitterData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::RibbonEmitterData::newObject
EXTRN	??2MemoryDelegation@Ogre@@SAPAXI@Z:PROC		; Ogre::MemoryDelegation::operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@RibbonEmitterData@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@RibbonEmitterData@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@RibbonEmitterData@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@RibbonEmitterData@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@RibbonEmitterData@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T80390 = -20						; size = 4
$T80389 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@RibbonEmitterData@Ogre@@SAPAVBaseObject@2@XZ PROC ; Ogre::RibbonEmitterData::newObject, COMDAT

; 109  : 		DECLARE_RTTI(RibbonEmitterData)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@RibbonEmitterData@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	1372					; 0000055cH
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T80390[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T80390[ebp], 0
	je	SHORT $LN3@newObject
	mov	ecx, DWORD PTR $T80390[ebp]
	call	??0RibbonEmitterData@Ogre@@QAE@XZ	; Ogre::RibbonEmitterData::RibbonEmitterData
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject
$LN3@newObject:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T80389[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T80389[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@RibbonEmitterData@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	1372					; 0000055cH
	mov	eax, DWORD PTR $T80390[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@RibbonEmitterData@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@RibbonEmitterData@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@RibbonEmitterData@Ogre@@SAPAVBaseObject@2@XZ ENDP ; Ogre::RibbonEmitterData::newObject
PUBLIC	??1?$KeyFrameArray@M@Ogre@@UAE@XZ		; Ogre::KeyFrameArray<float>::~KeyFrameArray<float>
PUBLIC	??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ ; Ogre::KeyFrameArray<Ogre::ColourValue>::~KeyFrameArray<Ogre::ColourValue>
PUBLIC	??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z		; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
PUBLIC	??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z ; Ogre::KeyFrameArray<Ogre::ColourValue>::KeyFrameArray<Ogre::ColourValue>
PUBLIC	??_7RibbonEmitterData@Ogre@@6B@			; Ogre::RibbonEmitterData::`vftable'
PUBLIC	??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z		; Ogre::RibbonEmitterData::RibbonEmitterData
PUBLIC	??_R4RibbonEmitterData@Ogre@@6B@		; Ogre::RibbonEmitterData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRibbonEmitterData@Ogre@@@8		; Ogre::RibbonEmitterData `RTTI Type Descriptor'
PUBLIC	??_R3RibbonEmitterData@Ogre@@8			; Ogre::RibbonEmitterData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RibbonEmitterData@Ogre@@8			; Ogre::RibbonEmitterData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RibbonEmitterData@Ogre@@8		; Ogre::RibbonEmitterData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?_serialize@RibbonEmitterData@Ogre@@MAEXAAVArchive@2@H@Z ; Ogre::RibbonEmitterData::_serialize
PUBLIC	??_ERibbonEmitterData@Ogre@@MAEPAXI@Z		; Ogre::RibbonEmitterData::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@RibbonEmitterData@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RibbonEmitterData@Ogre@@8 DD FLAT:??_R0?AVRibbonEmitterData@Ogre@@@8 ; Ogre::RibbonEmitterData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RibbonEmitterData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2RibbonEmitterData@Ogre@@8
rdata$r	SEGMENT
??_R2RibbonEmitterData@Ogre@@8 DD FLAT:??_R1A@?0A@EA@RibbonEmitterData@Ogre@@8 ; Ogre::RibbonEmitterData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3RibbonEmitterData@Ogre@@8
rdata$r	SEGMENT
??_R3RibbonEmitterData@Ogre@@8 DD 00H			; Ogre::RibbonEmitterData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2RibbonEmitterData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRibbonEmitterData@Ogre@@@8
_DATA	SEGMENT
??_R0?AVRibbonEmitterData@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::RibbonEmitterData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRibbonEmitterData@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4RibbonEmitterData@Ogre@@6B@
rdata$r	SEGMENT
??_R4RibbonEmitterData@Ogre@@6B@ DD 00H			; Ogre::RibbonEmitterData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRibbonEmitterData@Ogre@@@8
	DD	FLAT:??_R3RibbonEmitterData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7RibbonEmitterData@Ogre@@6B@
CONST	SEGMENT
??_7RibbonEmitterData@Ogre@@6B@ DD FLAT:??_R4RibbonEmitterData@Ogre@@6B@ ; Ogre::RibbonEmitterData::`vftable'
	DD	FLAT:?getRTTI@RibbonEmitterData@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@RibbonEmitterData@Ogre@@MAEXAAVArchive@2@H@Z
	DD	FLAT:??_ERibbonEmitterData@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	010H
	DD	FLAT:__unwindtable$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$13
	DD	0dH
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$15
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z PROC		; Ogre::RibbonEmitterData::RibbonEmitterData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7RibbonEmitterData@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 32					; 00000020H
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 7
	rep movsd
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0RibbonSectionDesc@Ogre@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 132				; 00000084H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	call	??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 220				; 000000dcH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 308				; 00000134H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 308				; 00000134H
	call	??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 396				; 0000018cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 396				; 0000018cH
	call	??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 484				; 000001e4H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 572				; 0000023cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 572				; 0000023cH
	call	??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 660				; 00000294H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 660				; 00000294H
	call	??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 748				; 000002ecH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 836				; 00000344H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 836				; 00000344H
	call	??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 924				; 0000039cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 924				; 0000039cH
	call	??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 1012				; 000003f4H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1012				; 000003f4H
	call	??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 1100				; 0000044cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1100				; 0000044cH
	call	??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 1188				; 000004a4H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1188				; 000004a4H
	call	??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 1276				; 000004fcH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1276				; 000004fcH
	call	??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+1364]
	mov	DWORD PTR [eax+1364], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+1368]
	mov	DWORD PTR [eax+1368], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1RibbonSectionDesc@Ogre@@QAE@XZ	; Ogre::RibbonSectionDesc::~RibbonSectionDesc
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	jmp	??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 308				; 00000134H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 396				; 0000018cH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 572				; 0000023cH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 660				; 00000294H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$10:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 836				; 00000344H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$11:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 924				; 0000039cH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$12:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1012				; 000003f4H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$13:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1100				; 0000044cH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$14:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1188				; 000004a4H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z$15:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1276				; 000004fcH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__ehhandler$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RibbonEmitterData@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::RibbonEmitterData::RibbonEmitterData
PUBLIC	??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z	; Ogre::KeyFrameArray<float>::operator=
PUBLIC	??4?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAEABV01@ABV01@@Z ; Ogre::KeyFrameArray<Ogre::ColourValue>::operator=
PUBLIC	??4RibbonEmitterData@Ogre@@QAEAAV01@AAV01@@Z	; Ogre::RibbonEmitterData::operator=
; Function compile flags: /Odtp
;	COMDAT ??4RibbonEmitterData@Ogre@@QAEAAV01@AAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4RibbonEmitterData@Ogre@@QAEAAV01@AAV01@@Z PROC	; Ogre::RibbonEmitterData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 32					; 00000020H
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 7
	rep movsd
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??4RibbonSectionDesc@Ogre@@QAEAAV01@AAV01@@Z ; Ogre::RibbonSectionDesc::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 132				; 00000084H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	call	??4?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAEABV01@ABV01@@Z ; Ogre::KeyFrameArray<Ogre::ColourValue>::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 220				; 000000dcH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z ; Ogre::KeyFrameArray<float>::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 308				; 00000134H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 308				; 00000134H
	call	??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z ; Ogre::KeyFrameArray<float>::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 396				; 0000018cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 396				; 0000018cH
	call	??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z ; Ogre::KeyFrameArray<float>::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 484				; 000001e4H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z ; Ogre::KeyFrameArray<float>::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 572				; 0000023cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 572				; 0000023cH
	call	??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z ; Ogre::KeyFrameArray<float>::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 660				; 00000294H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 660				; 00000294H
	call	??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z ; Ogre::KeyFrameArray<float>::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 748				; 000002ecH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z ; Ogre::KeyFrameArray<float>::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 836				; 00000344H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 836				; 00000344H
	call	??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z ; Ogre::KeyFrameArray<float>::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 924				; 0000039cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 924				; 0000039cH
	call	??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z ; Ogre::KeyFrameArray<float>::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 1012				; 000003f4H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1012				; 000003f4H
	call	??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z ; Ogre::KeyFrameArray<float>::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 1100				; 0000044cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1100				; 0000044cH
	call	??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z ; Ogre::KeyFrameArray<float>::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 1188				; 000004a4H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1188				; 000004a4H
	call	??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z ; Ogre::KeyFrameArray<float>::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 1276				; 000004fcH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1276				; 000004fcH
	call	??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z ; Ogre::KeyFrameArray<float>::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+1364]
	mov	DWORD PTR [edx+1364], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+1368]
	mov	DWORD PTR [edx+1368], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4RibbonEmitterData@Ogre@@QAEAAV01@AAV01@@Z ENDP	; Ogre::RibbonEmitterData::operator=
_TEXT	ENDS
PUBLIC	??1RibbonEmitterData@Ogre@@MAE@XZ		; Ogre::RibbonEmitterData::~RibbonEmitterData
PUBLIC	??_GRibbonEmitterData@Ogre@@MAEPAXI@Z		; Ogre::RibbonEmitterData::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GRibbonEmitterData@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRibbonEmitterData@Ogre@@MAEPAXI@Z PROC		; Ogre::RibbonEmitterData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RibbonEmitterData@Ogre@@MAE@XZ	; Ogre::RibbonEmitterData::~RibbonEmitterData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@10
	push	1372					; 0000055cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@10:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRibbonEmitterData@Ogre@@MAEPAXI@Z ENDP		; Ogre::RibbonEmitterData::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_ERibbonEmitterData@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ERibbonEmitterData@Ogre@@MAEPAXI@Z PROC		; Ogre::RibbonEmitterData::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@10
	push	OFFSET ??1RibbonEmitterData@Ogre@@MAE@XZ ; Ogre::RibbonEmitterData::~RibbonEmitterData
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	1372					; 0000055cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@10
	push	1372					; 0000055cH
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@10:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@10
$LN3@vector@10:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RibbonEmitterData@Ogre@@MAE@XZ	; Ogre::RibbonEmitterData::~RibbonEmitterData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@10
	push	1372					; 0000055cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@10:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@10:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ERibbonEmitterData@Ogre@@MAEPAXI@Z ENDP		; Ogre::RibbonEmitterData::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
PUBLIC	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
PUBLIC	??1BaseKeyFrameArray@Ogre@@UAE@XZ		; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
PUBLIC	??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
PUBLIC	??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
PUBLIC	??_7?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@6B@ ; Ogre::KeyFrameArray<Ogre::ColourValue>::`vftable'
PUBLIC	??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z		; Ogre::BaseKeyFrameArray::BaseKeyFrameArray
PUBLIC	??_R4?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@6B@ ; Ogre::KeyFrameArray<Ogre::ColourValue>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@8 ; Ogre::KeyFrameArray<Ogre::ColourValue> `RTTI Type Descriptor'
PUBLIC	??_R3?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@8 ; Ogre::KeyFrameArray<Ogre::ColourValue>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@8 ; Ogre::KeyFrameArray<Ogre::ColourValue>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@8 ; Ogre::KeyFrameArray<Ogre::ColourValue>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@BaseKeyFrameArray@Ogre@@8		; Ogre::BaseKeyFrameArray::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVBaseKeyFrameArray@Ogre@@@8		; Ogre::BaseKeyFrameArray `RTTI Type Descriptor'
PUBLIC	??_R3BaseKeyFrameArray@Ogre@@8			; Ogre::BaseKeyFrameArray::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BaseKeyFrameArray@Ogre@@8			; Ogre::BaseKeyFrameArray::`RTTI Base Class Array'
PUBLIC	?_serialize@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::KeyFrameArray<Ogre::ColourValue>::_serialize
PUBLIC	?getNumKey@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEIXZ ; Ogre::KeyFrameArray<Ogre::ColourValue>::getNumKey
PUBLIC	?getValue@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEXHIPAX@Z ; Ogre::KeyFrameArray<Ogre::ColourValue>::getValue
EXTRN	??_E?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEPAXI@Z:PROC ; Ogre::KeyFrameArray<Ogre::ColourValue>::`vector deleting destructor'
;	COMDAT ??_R2BaseKeyFrameArray@Ogre@@8
rdata$r	SEGMENT
??_R2BaseKeyFrameArray@Ogre@@8 DD FLAT:??_R1A@?0A@EA@BaseKeyFrameArray@Ogre@@8 ; Ogre::BaseKeyFrameArray::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3BaseKeyFrameArray@Ogre@@8
rdata$r	SEGMENT
??_R3BaseKeyFrameArray@Ogre@@8 DD 00H			; Ogre::BaseKeyFrameArray::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BaseKeyFrameArray@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBaseKeyFrameArray@Ogre@@@8
_DATA	SEGMENT
??_R0?AVBaseKeyFrameArray@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::BaseKeyFrameArray `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBaseKeyFrameArray@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@BaseKeyFrameArray@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BaseKeyFrameArray@Ogre@@8 DD FLAT:??_R0?AVBaseKeyFrameArray@Ogre@@@8 ; Ogre::BaseKeyFrameArray::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BaseKeyFrameArray@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@8 DD FLAT:??_R0?AV?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@8 ; Ogre::KeyFrameArray<Ogre::ColourValue>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@8
rdata$r	SEGMENT
??_R2?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@8 DD FLAT:??_R1A@?0A@EA@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@8 ; Ogre::KeyFrameArray<Ogre::ColourValue>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseKeyFrameArray@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@8
rdata$r	SEGMENT
??_R3?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@8 DD 00H	; Ogre::KeyFrameArray<Ogre::ColourValue>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@8
_DATA	SEGMENT
??_R0?AV?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::KeyFrameArray<Ogre::ColourValue> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@6B@
rdata$r	SEGMENT
??_R4?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@6B@ DD 00H ; Ogre::KeyFrameArray<Ogre::ColourValue>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@8
	DD	FLAT:??_R3?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@6B@
CONST	SEGMENT
??_7?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@6B@ DD FLAT:??_R4?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@6B@ ; Ogre::KeyFrameArray<Ogre::ColourValue>::`vftable'
	DD	FLAT:?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_E?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?getNumKey@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEIXZ
	DD	FLAT:?getValue@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEXHIPAX@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z PROC ; Ogre::KeyFrameArray<Ogre::ColourValue>::KeyFrameArray<Ogre::ColourValue>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR [ecx+84], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
__unwindfunclet$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
__unwindfunclet$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
__ehhandler$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@ABV01@@Z ENDP ; Ogre::KeyFrameArray<Ogre::ColourValue>::KeyFrameArray<Ogre::ColourValue>
PUBLIC	??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	??_7BaseKeyFrameArray@Ogre@@6B@			; Ogre::BaseKeyFrameArray::`vftable'
PUBLIC	??_R4BaseKeyFrameArray@Ogre@@6B@		; Ogre::BaseKeyFrameArray::`RTTI Complete Object Locator'
PUBLIC	?_serialize@BaseKeyFrameArray@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::BaseKeyFrameArray::_serialize
EXTRN	??_EBaseKeyFrameArray@Ogre@@UAEPAXI@Z:PROC	; Ogre::BaseKeyFrameArray::`vector deleting destructor'
;	COMDAT ??_R4BaseKeyFrameArray@Ogre@@6B@
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
rdata$r	SEGMENT
??_R4BaseKeyFrameArray@Ogre@@6B@ DD 00H			; Ogre::BaseKeyFrameArray::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBaseKeyFrameArray@Ogre@@@8
	DD	FLAT:??_R3BaseKeyFrameArray@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7BaseKeyFrameArray@Ogre@@6B@
CONST	SEGMENT
??_7BaseKeyFrameArray@Ogre@@6B@ DD FLAT:??_R4BaseKeyFrameArray@Ogre@@6B@ ; Ogre::BaseKeyFrameArray::`vftable'
	DD	FLAT:?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseKeyFrameArray@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EBaseKeyFrameArray@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1BaseKeyFrameArray@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BaseKeyFrameArray@Ogre@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1BaseKeyFrameArray@Ogre@@UAE@XZ$1
__ehfuncinfo$??1BaseKeyFrameArray@Ogre@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1BaseKeyFrameArray@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1BaseKeyFrameArray@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BaseKeyFrameArray@Ogre@@UAE@XZ PROC			; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray, COMDAT
; _this$ = ecx

; 57   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1BaseKeyFrameArray@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseKeyFrameArray@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 58   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BaseKeyFrameArray@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??1BaseKeyFrameArray@Ogre@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
__ehhandler$??1BaseKeyFrameArray@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1BaseKeyFrameArray@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1BaseKeyFrameArray@Ogre@@UAE@XZ ENDP			; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
PUBLIC	??$serializeRawArray@UAnimRange@BaseKeyFrameArray@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
;	COMDAT ?_serialize@BaseKeyFrameArray@Ogre@@UAEXAAVArchive@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@BaseKeyFrameArray@Ogre@@UAEXAAVArchive@2@H@Z PROC ; Ogre::BaseKeyFrameArray::_serialize, COMDAT
; _this$ = ecx

; 75   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 76   : 			ar.serializeRawArray(m_Ranges);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawArray@UAnimRange@BaseKeyFrameArray@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::BaseKeyFrameArray::AnimRange>

; 77   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@BaseKeyFrameArray@Ogre@@UAEXAAVArchive@2@H@Z ENDP ; Ogre::BaseKeyFrameArray::_serialize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_GBaseKeyFrameArray@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBaseKeyFrameArray@Ogre@@UAEPAXI@Z PROC		; Ogre::BaseKeyFrameArray::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@11
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@11:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBaseKeyFrameArray@Ogre@@UAEPAXI@Z ENDP		; Ogre::BaseKeyFrameArray::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ$2
__ehfuncinfo$??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ PROC ; Ogre::KeyFrameArray<Ogre::ColourValue>::~KeyFrameArray<Ogre::ColourValue>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
__unwindfunclet$??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
__unwindfunclet$??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
__ehhandler$??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ ENDP ; Ogre::KeyFrameArray<Ogre::ColourValue>::~KeyFrameArray<Ogre::ColourValue>
PUBLIC	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	??_7?$KeyFrameArray@M@Ogre@@6B@			; Ogre::KeyFrameArray<float>::`vftable'
PUBLIC	??_R4?$KeyFrameArray@M@Ogre@@6B@		; Ogre::KeyFrameArray<float>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$KeyFrameArray@M@Ogre@@@8		; Ogre::KeyFrameArray<float> `RTTI Type Descriptor'
PUBLIC	??_R3?$KeyFrameArray@M@Ogre@@8			; Ogre::KeyFrameArray<float>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$KeyFrameArray@M@Ogre@@8			; Ogre::KeyFrameArray<float>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$KeyFrameArray@M@Ogre@@8		; Ogre::KeyFrameArray<float>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?_serialize@?$KeyFrameArray@M@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::KeyFrameArray<float>::_serialize
PUBLIC	?getNumKey@?$KeyFrameArray@M@Ogre@@UAEIXZ	; Ogre::KeyFrameArray<float>::getNumKey
PUBLIC	?getValue@?$KeyFrameArray@M@Ogre@@UAEXHIPAX@Z	; Ogre::KeyFrameArray<float>::getValue
EXTRN	??_E?$KeyFrameArray@M@Ogre@@UAEPAXI@Z:PROC	; Ogre::KeyFrameArray<float>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$KeyFrameArray@M@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$KeyFrameArray@M@Ogre@@8 DD FLAT:??_R0?AV?$KeyFrameArray@M@Ogre@@@8 ; Ogre::KeyFrameArray<float>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$KeyFrameArray@M@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2?$KeyFrameArray@M@Ogre@@8
rdata$r	SEGMENT
??_R2?$KeyFrameArray@M@Ogre@@8 DD FLAT:??_R1A@?0A@EA@?$KeyFrameArray@M@Ogre@@8 ; Ogre::KeyFrameArray<float>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseKeyFrameArray@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3?$KeyFrameArray@M@Ogre@@8
rdata$r	SEGMENT
??_R3?$KeyFrameArray@M@Ogre@@8 DD 00H			; Ogre::KeyFrameArray<float>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$KeyFrameArray@M@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$KeyFrameArray@M@Ogre@@@8
_DATA	SEGMENT
??_R0?AV?$KeyFrameArray@M@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::KeyFrameArray<float> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$KeyFrameArray@M@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$KeyFrameArray@M@Ogre@@6B@
rdata$r	SEGMENT
??_R4?$KeyFrameArray@M@Ogre@@6B@ DD 00H			; Ogre::KeyFrameArray<float>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$KeyFrameArray@M@Ogre@@@8
	DD	FLAT:??_R3?$KeyFrameArray@M@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7?$KeyFrameArray@M@Ogre@@6B@
CONST	SEGMENT
??_7?$KeyFrameArray@M@Ogre@@6B@ DD FLAT:??_R4?$KeyFrameArray@M@Ogre@@6B@ ; Ogre::KeyFrameArray<float>::`vftable'
	DD	FLAT:?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@?$KeyFrameArray@M@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_E?$KeyFrameArray@M@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?getNumKey@?$KeyFrameArray@M@Ogre@@UAEIXZ
	DD	FLAT:?getValue@?$KeyFrameArray@M@Ogre@@UAEXHIPAX@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z PROC		; Ogre::KeyFrameArray<float>::KeyFrameArray<float>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7?$KeyFrameArray@M@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR [ecx+84], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
__ehhandler$??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$KeyFrameArray@M@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$KeyFrameArray@M@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$KeyFrameArray@M@Ogre@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$KeyFrameArray@M@Ogre@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1?$KeyFrameArray@M@Ogre@@UAE@XZ$2
__ehfuncinfo$??1?$KeyFrameArray@M@Ogre@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$KeyFrameArray@M@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$KeyFrameArray@M@Ogre@@UAE@XZ PROC			; Ogre::KeyFrameArray<float>::~KeyFrameArray<float>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$KeyFrameArray@M@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
__unwindfunclet$??1?$KeyFrameArray@M@Ogre@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
__unwindfunclet$??1?$KeyFrameArray@M@Ogre@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
__ehhandler$??1?$KeyFrameArray@M@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$KeyFrameArray@M@Ogre@@UAE@XZ ENDP			; Ogre::KeyFrameArray<float>::~KeyFrameArray<float>
; Function compile flags: /Odtp
;	COMDAT ??_G?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEPAXI@Z PROC ; Ogre::KeyFrameArray<Ogre::ColourValue>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@12
	push	88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@12:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEPAXI@Z ENDP ; Ogre::KeyFrameArray<Ogre::ColourValue>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z$1
__ehfuncinfo$??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z PROC		; Ogre::BaseKeyFrameArray::BaseKeyFrameArray, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BaseKeyFrameArray@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
__ehhandler$??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BaseKeyFrameArray@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::BaseKeyFrameArray::BaseKeyFrameArray
; Function compile flags: /Odtp
;	COMDAT ??_G?$KeyFrameArray@M@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$KeyFrameArray@M@Ogre@@UAEPAXI@Z PROC		; Ogre::KeyFrameArray<float>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@13
	push	88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@13:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$KeyFrameArray@M@Ogre@@UAEPAXI@Z ENDP		; Ogre::KeyFrameArray<float>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$TBox@H@Ogre@@QAE@XZ			; Ogre::TBox<int>::TBox<int>
PUBLIC	??0PixelBox@Ogre@@QAE@XZ			; Ogre::PixelBox::PixelBox
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrepixelformat.h
;	COMDAT ??0PixelBox@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PixelBox@Ogre@@QAE@XZ PROC				; Ogre::PixelBox::PixelBox, COMDAT
; _this$ = ecx

; 183  : 		PixelBox() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$TBox@H@Ogre@@QAE@XZ		; Ogre::TBox<int>::TBox<int>
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0PixelBox@Ogre@@QAE@XZ ENDP				; Ogre::PixelBox::PixelBox
_TEXT	ENDS
PUBLIC	?setConsecutive@PixelBox@Ogre@@QAEXXZ		; Ogre::PixelBox::setConsecutive
PUBLIC	??0PixelBox@Ogre@@QAE@ABV?$TBox@H@1@W4PixelFormat@1@PAX@Z ; Ogre::PixelBox::PixelBox
; Function compile flags: /Odtp
;	COMDAT ??0PixelBox@Ogre@@QAE@ABV?$TBox@H@1@W4PixelFormat@1@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_extents$ = 8						; size = 4
_pixelFormat$ = 12					; size = 4
_pixelData$ = 16					; size = 4
??0PixelBox@Ogre@@QAE@ABV?$TBox@H@1@W4PixelFormat@1@PAX@Z PROC ; Ogre::PixelBox::PixelBox, COMDAT
; _this$ = ecx

; 193  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _extents$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pixelData$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pixelFormat$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 194  : 			setConsecutive();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?setConsecutive@PixelBox@Ogre@@QAEXXZ	; Ogre::PixelBox::setConsecutive

; 195  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0PixelBox@Ogre@@QAE@ABV?$TBox@H@1@W4PixelFormat@1@PAX@Z ENDP ; Ogre::PixelBox::PixelBox
_TEXT	ENDS
PUBLIC	??0?$TBox@H@Ogre@@QAE@HHHHHH@Z			; Ogre::TBox<int>::TBox<int>
PUBLIC	??0PixelBox@Ogre@@QAE@IIIW4PixelFormat@1@PAX@Z	; Ogre::PixelBox::PixelBox
; Function compile flags: /Odtp
;	COMDAT ??0PixelBox@Ogre@@QAE@IIIW4PixelFormat@1@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_depth$ = 16						; size = 4
_pixelFormat$ = 20					; size = 4
_pixelData$ = 24					; size = 4
??0PixelBox@Ogre@@QAE@IIIW4PixelFormat@1@PAX@Z PROC	; Ogre::PixelBox::PixelBox, COMDAT
; _this$ = ecx

; 208  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$TBox@H@Ogre@@QAE@HHHHHH@Z		; Ogre::TBox<int>::TBox<int>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pixelData$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pixelFormat$[ebp]
	mov	DWORD PTR [edx+28], eax

; 209  : 			setConsecutive();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?setConsecutive@PixelBox@Ogre@@QAEXXZ	; Ogre::PixelBox::setConsecutive

; 210  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??0PixelBox@Ogre@@QAE@IIIW4PixelFormat@1@PAX@Z ENDP	; Ogre::PixelBox::PixelBox
_TEXT	ENDS
PUBLIC	?getHeight@?$TBox@H@Ogre@@QBEHXZ		; Ogre::TBox<int>::getHeight
PUBLIC	?getWidth@?$TBox@H@Ogre@@QBEHXZ			; Ogre::TBox<int>::getWidth
; Function compile flags: /Odtp
;	COMDAT ?setConsecutive@PixelBox@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?setConsecutive@PixelBox@Ogre@@QAEXXZ PROC		; Ogre::PixelBox::setConsecutive, COMDAT
; _this$ = ecx

; 232  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 233  : 			rowPitch = getWidth();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getWidth@?$TBox@H@Ogre@@QBEHXZ		; Ogre::TBox<int>::getWidth
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 234  : 			slicePitch = getWidth()*getHeight();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getWidth@?$TBox@H@Ogre@@QBEHXZ		; Ogre::TBox<int>::getWidth
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHeight@?$TBox@H@Ogre@@QBEHXZ	; Ogre::TBox<int>::getHeight
	imul	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], esi

; 235  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?setConsecutive@PixelBox@Ogre@@QAEXXZ ENDP		; Ogre::PixelBox::setConsecutive
_TEXT	ENDS
PUBLIC	?getRowSkip@PixelBox@Ogre@@QBEIXZ		; Ogre::PixelBox::getRowSkip
; Function compile flags: /Odtp
;	COMDAT ?getRowSkip@PixelBox@Ogre@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRowSkip@PixelBox@Ogre@@QBEIXZ PROC			; Ogre::PixelBox::getRowSkip, COMDAT
; _this$ = ecx

; 240  : 		size_t getRowSkip() const { return rowPitch - getWidth(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getWidth@?$TBox@H@Ogre@@QBEHXZ		; Ogre::TBox<int>::getWidth
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	sub	edx, eax
	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	0
?getRowSkip@PixelBox@Ogre@@QBEIXZ ENDP			; Ogre::PixelBox::getRowSkip
_TEXT	ENDS
PUBLIC	?getSliceSkip@PixelBox@Ogre@@QBEIXZ		; Ogre::PixelBox::getSliceSkip
; Function compile flags: /Odtp
;	COMDAT ?getSliceSkip@PixelBox@Ogre@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSliceSkip@PixelBox@Ogre@@QBEIXZ PROC		; Ogre::PixelBox::getSliceSkip, COMDAT
; _this$ = ecx

; 245  : 		size_t getSliceSkip() const { return slicePitch - (getHeight() * rowPitch); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHeight@?$TBox@H@Ogre@@QBEHXZ	; Ogre::TBox<int>::getHeight
	mov	ecx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+36]
	sub	ecx, eax
	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?getSliceSkip@PixelBox@Ogre@@QBEIXZ ENDP		; Ogre::PixelBox::getSliceSkip
_TEXT	ENDS
PUBLIC	?isConsecutive@PixelBox@Ogre@@QBE_NXZ		; Ogre::PixelBox::isConsecutive
; Function compile flags: /Odtp
;	COMDAT ?isConsecutive@PixelBox@Ogre@@QBE_NXZ
_TEXT	SEGMENT
tv87 = -8						; size = 4
_this$ = -4						; size = 4
?isConsecutive@PixelBox@Ogre@@QBE_NXZ PROC		; Ogre::PixelBox::isConsecutive, COMDAT
; _this$ = ecx

; 251  : 		{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 			return rowPitch == getWidth() && slicePitch == getWidth()*getHeight(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getWidth@?$TBox@H@Ogre@@QBEHXZ		; Ogre::TBox<int>::getWidth
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], eax
	jne	SHORT $LN3@isConsecut
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getWidth@?$TBox@H@Ogre@@QBEHXZ		; Ogre::TBox<int>::getWidth
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHeight@?$TBox@H@Ogre@@QBEHXZ	; Ogre::TBox<int>::getHeight
	imul	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+36], esi
	jne	SHORT $LN3@isConsecut
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN4@isConsecut
$LN3@isConsecut:
	mov	DWORD PTR tv87[ebp], 0
$LN4@isConsecut:
	mov	al, BYTE PTR tv87[ebp]

; 253  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?isConsecutive@PixelBox@Ogre@@QBE_NXZ ENDP		; Ogre::PixelBox::isConsecutive
_TEXT	ENDS
PUBLIC	??4?$TBox@H@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::TBox<int>::operator=
; Function compile flags: /Odtp
;	COMDAT ??4?$TBox@H@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$TBox@H@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::TBox<int>::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$TBox@H@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::TBox<int>::operator=
_TEXT	ENDS
PUBLIC	??4PixelBox@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::PixelBox::operator=
; Function compile flags: /Odtp
;	COMDAT ??4PixelBox@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4PixelBox@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::PixelBox::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, DWORD PTR ___that$[ebp]
	mov	ecx, 10					; 0000000aH
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4PixelBox@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::PixelBox::operator=
_TEXT	ENDS
PUBLIC	??4PixelUtil@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::PixelUtil::operator=
; Function compile flags: /Odtp
;	COMDAT ??4PixelUtil@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4PixelUtil@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::PixelUtil::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4PixelUtil@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::PixelUtil::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::VertexBuffer::getRTTI
EXTRN	?m_RTTI@VertexBuffer@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::VertexBuffer::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrerendertypes.h
;	COMDAT ?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::VertexBuffer::getRTTI, COMDAT
; _this$ = ecx

; 223  : 		DECLARE_RTTI_VIRTUAL(VertexBuffer)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@VertexBuffer@Ogre@@2VRuntimeClass@2@B ; Ogre::VertexBuffer::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::VertexBuffer::getRTTI
_TEXT	ENDS
PUBLIC	??_7VertexBuffer@Ogre@@6B@			; Ogre::VertexBuffer::`vftable'
PUBLIC	??0VertexBuffer@Ogre@@QAE@XZ			; Ogre::VertexBuffer::VertexBuffer
PUBLIC	??_R4VertexBuffer@Ogre@@6B@			; Ogre::VertexBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVVertexBuffer@Ogre@@@8			; Ogre::VertexBuffer `RTTI Type Descriptor'
PUBLIC	??_R3VertexBuffer@Ogre@@8			; Ogre::VertexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VertexBuffer@Ogre@@8			; Ogre::VertexBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VertexBuffer@Ogre@@8		; Ogre::VertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EVertexBuffer@Ogre@@UAEPAXI@Z		; Ogre::VertexBuffer::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@VertexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VertexBuffer@Ogre@@8 DD FLAT:??_R0?AVVertexBuffer@Ogre@@@8 ; Ogre::VertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VertexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2VertexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R2VertexBuffer@Ogre@@8 DD FLAT:??_R1A@?0A@EA@VertexBuffer@Ogre@@8 ; Ogre::VertexBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3VertexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R3VertexBuffer@Ogre@@8 DD 00H			; Ogre::VertexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2VertexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVertexBuffer@Ogre@@@8
_DATA	SEGMENT
??_R0?AVVertexBuffer@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::VertexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVertexBuffer@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4VertexBuffer@Ogre@@6B@
rdata$r	SEGMENT
??_R4VertexBuffer@Ogre@@6B@ DD 00H			; Ogre::VertexBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVVertexBuffer@Ogre@@@8
	DD	FLAT:??_R3VertexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7VertexBuffer@Ogre@@6B@
CONST	SEGMENT
??_7VertexBuffer@Ogre@@6B@ DD FLAT:??_R4VertexBuffer@Ogre@@6B@ ; Ogre::VertexBuffer::`vftable'
	DD	FLAT:?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EVertexBuffer@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0VertexBuffer@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0VertexBuffer@Ogre@@QAE@XZ$0
__ehfuncinfo$??0VertexBuffer@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0VertexBuffer@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0VertexBuffer@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0VertexBuffer@Ogre@@QAE@XZ PROC			; Ogre::VertexBuffer::VertexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0VertexBuffer@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7VertexBuffer@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0VertexBuffer@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0VertexBuffer@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0VertexBuffer@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0VertexBuffer@Ogre@@QAE@XZ ENDP			; Ogre::VertexBuffer::VertexBuffer
PUBLIC	??1VertexBuffer@Ogre@@UAE@XZ			; Ogre::VertexBuffer::~VertexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1VertexBuffer@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1VertexBuffer@Ogre@@UAE@XZ$0
__ehfuncinfo$??1VertexBuffer@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1VertexBuffer@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1VertexBuffer@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1VertexBuffer@Ogre@@UAE@XZ PROC			; Ogre::VertexBuffer::~VertexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1VertexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1VertexBuffer@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??1VertexBuffer@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1VertexBuffer@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1VertexBuffer@Ogre@@UAE@XZ ENDP			; Ogre::VertexBuffer::~VertexBuffer
PUBLIC	??0VertexBuffer@Ogre@@QAE@ABV01@@Z		; Ogre::VertexBuffer::VertexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0VertexBuffer@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0VertexBuffer@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0VertexBuffer@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0VertexBuffer@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0VertexBuffer@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0VertexBuffer@Ogre@@QAE@ABV01@@Z PROC			; Ogre::VertexBuffer::VertexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0VertexBuffer@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7VertexBuffer@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0VertexBuffer@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0VertexBuffer@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0VertexBuffer@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0VertexBuffer@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::VertexBuffer::VertexBuffer
PUBLIC	??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::VertexBuffer::operator=
; Function compile flags: /Odtp
;	COMDAT ??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::VertexBuffer::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::VertexBuffer::operator=
_TEXT	ENDS
PUBLIC	??_GVertexBuffer@Ogre@@UAEPAXI@Z		; Ogre::VertexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GVertexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GVertexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::VertexBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VertexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@14
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@14:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GVertexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::VertexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EVertexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EVertexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::VertexBuffer::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@11
	push	OFFSET ??1VertexBuffer@Ogre@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@11
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@11:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@11
$LN3@vector@11:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VertexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@11
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@11:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@11:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EVertexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::VertexBuffer::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::IndexBuffer::getRTTI
EXTRN	?m_RTTI@IndexBuffer@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::IndexBuffer::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::IndexBuffer::getRTTI, COMDAT
; _this$ = ecx

; 230  : 		DECLARE_RTTI_VIRTUAL(IndexBuffer)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@IndexBuffer@Ogre@@2VRuntimeClass@2@B ; Ogre::IndexBuffer::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::IndexBuffer::getRTTI
_TEXT	ENDS
PUBLIC	?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z	; Ogre::IndexBuffer::setVertexRange
; Function compile flags: /Odtp
;	COMDAT ?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_num$ = 12						; size = 4
?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z PROC		; Ogre::IndexBuffer::setVertexRange, COMDAT
; _this$ = ecx

; 235  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 236  : 			m_RefVertStart = start;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 237  : 			m_RefVertNum = num;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _num$[ebp]
	mov	DWORD PTR [edx+20], eax

; 238  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z ENDP		; Ogre::IndexBuffer::setVertexRange
_TEXT	ENDS
PUBLIC	??_7IndexBuffer@Ogre@@6B@			; Ogre::IndexBuffer::`vftable'
PUBLIC	??0IndexBuffer@Ogre@@QAE@XZ			; Ogre::IndexBuffer::IndexBuffer
PUBLIC	??_R4IndexBuffer@Ogre@@6B@			; Ogre::IndexBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVIndexBuffer@Ogre@@@8			; Ogre::IndexBuffer `RTTI Type Descriptor'
PUBLIC	??_R3IndexBuffer@Ogre@@8			; Ogre::IndexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IndexBuffer@Ogre@@8			; Ogre::IndexBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IndexBuffer@Ogre@@8		; Ogre::IndexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EIndexBuffer@Ogre@@UAEPAXI@Z			; Ogre::IndexBuffer::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@IndexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IndexBuffer@Ogre@@8 DD FLAT:??_R0?AVIndexBuffer@Ogre@@@8 ; Ogre::IndexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IndexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2IndexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R2IndexBuffer@Ogre@@8 DD FLAT:??_R1A@?0A@EA@IndexBuffer@Ogre@@8 ; Ogre::IndexBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3IndexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R3IndexBuffer@Ogre@@8 DD 00H				; Ogre::IndexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2IndexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVIndexBuffer@Ogre@@@8
_DATA	SEGMENT
??_R0?AVIndexBuffer@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::IndexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVIndexBuffer@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4IndexBuffer@Ogre@@6B@
rdata$r	SEGMENT
??_R4IndexBuffer@Ogre@@6B@ DD 00H			; Ogre::IndexBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVIndexBuffer@Ogre@@@8
	DD	FLAT:??_R3IndexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7IndexBuffer@Ogre@@6B@
CONST	SEGMENT
??_7IndexBuffer@Ogre@@6B@ DD FLAT:??_R4IndexBuffer@Ogre@@6B@ ; Ogre::IndexBuffer::`vftable'
	DD	FLAT:?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EIndexBuffer@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0IndexBuffer@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0IndexBuffer@Ogre@@QAE@XZ$0
__ehfuncinfo$??0IndexBuffer@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0IndexBuffer@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0IndexBuffer@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0IndexBuffer@Ogre@@QAE@XZ PROC			; Ogre::IndexBuffer::IndexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0IndexBuffer@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IndexBuffer@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0IndexBuffer@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0IndexBuffer@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0IndexBuffer@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0IndexBuffer@Ogre@@QAE@XZ ENDP			; Ogre::IndexBuffer::IndexBuffer
PUBLIC	??1IndexBuffer@Ogre@@UAE@XZ			; Ogre::IndexBuffer::~IndexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1IndexBuffer@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1IndexBuffer@Ogre@@UAE@XZ$0
__ehfuncinfo$??1IndexBuffer@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1IndexBuffer@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1IndexBuffer@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1IndexBuffer@Ogre@@UAE@XZ PROC			; Ogre::IndexBuffer::~IndexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1IndexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1IndexBuffer@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??1IndexBuffer@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1IndexBuffer@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1IndexBuffer@Ogre@@UAE@XZ ENDP			; Ogre::IndexBuffer::~IndexBuffer
PUBLIC	??0IndexBuffer@Ogre@@QAE@ABV01@@Z		; Ogre::IndexBuffer::IndexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0IndexBuffer@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0IndexBuffer@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0IndexBuffer@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0IndexBuffer@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0IndexBuffer@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0IndexBuffer@Ogre@@QAE@ABV01@@Z PROC			; Ogre::IndexBuffer::IndexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0IndexBuffer@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7IndexBuffer@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0IndexBuffer@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0IndexBuffer@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0IndexBuffer@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0IndexBuffer@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::IndexBuffer::IndexBuffer
PUBLIC	??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::IndexBuffer::operator=
; Function compile flags: /Odtp
;	COMDAT ??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::IndexBuffer::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::IndexBuffer::operator=
_TEXT	ENDS
PUBLIC	??_GIndexBuffer@Ogre@@UAEPAXI@Z			; Ogre::IndexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GIndexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GIndexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::IndexBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1IndexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@15
	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@15:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GIndexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::IndexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EIndexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EIndexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::IndexBuffer::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@12
	push	OFFSET ??1IndexBuffer@Ogre@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@12
	push	24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@12:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@12
$LN3@vector@12:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1IndexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@12
	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@12:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@12:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EIndexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::IndexBuffer::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ	; Ogre::Texture::getRTTI
EXTRN	?m_RTTI@Texture@Ogre@@2VRuntimeClass@2@B:BYTE	; Ogre::Texture::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::Texture::getRTTI, COMDAT
; _this$ = ecx

; 248  : 		DECLARE_RTTI_VIRTUAL(Texture)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@Texture@Ogre@@2VRuntimeClass@2@B ; Ogre::Texture::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::Texture::getRTTI
_TEXT	ENDS
PUBLIC	??_7Texture@Ogre@@6B@				; Ogre::Texture::`vftable'
PUBLIC	??1Texture@Ogre@@MAE@XZ				; Ogre::Texture::~Texture
PUBLIC	??_R4Texture@Ogre@@6B@				; Ogre::Texture::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTexture@Ogre@@@8			; Ogre::Texture `RTTI Type Descriptor'
PUBLIC	??_R3Texture@Ogre@@8				; Ogre::Texture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Texture@Ogre@@8				; Ogre::Texture::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Texture@Ogre@@8			; Ogre::Texture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_ETexture@Ogre@@MAEPAXI@Z			; Ogre::Texture::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Texture@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Texture@Ogre@@8 DD FLAT:??_R0?AVTexture@Ogre@@@8 ; Ogre::Texture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Texture@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Texture@Ogre@@8
rdata$r	SEGMENT
??_R2Texture@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Texture@Ogre@@8 ; Ogre::Texture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3Texture@Ogre@@8
rdata$r	SEGMENT
??_R3Texture@Ogre@@8 DD 00H				; Ogre::Texture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2Texture@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTexture@Ogre@@@8
_DATA	SEGMENT
??_R0?AVTexture@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Texture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTexture@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Texture@Ogre@@6B@
rdata$r	SEGMENT
??_R4Texture@Ogre@@6B@ DD 00H				; Ogre::Texture::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTexture@Ogre@@@8
	DD	FLAT:??_R3Texture@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Texture@Ogre@@6B@
CONST	SEGMENT
??_7Texture@Ogre@@6B@ DD FLAT:??_R4Texture@Ogre@@6B@	; Ogre::Texture::`vftable'
	DD	FLAT:?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_ETexture@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Texture@Ogre@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Texture@Ogre@@MAE@XZ$0
__ehfuncinfo$??1Texture@Ogre@@MAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Texture@Ogre@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1Texture@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Texture@Ogre@@MAE@XZ PROC				; Ogre::Texture::~Texture, COMDAT
; _this$ = ecx

; 257  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Texture@Ogre@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Texture@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 258  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Texture@Ogre@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??1Texture@Ogre@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Texture@Ogre@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Texture@Ogre@@MAE@XZ ENDP				; Ogre::Texture::~Texture
PUBLIC	??0Texture@Ogre@@QAE@XZ				; Ogre::Texture::Texture
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Texture@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Texture@Ogre@@QAE@XZ$0
__ehfuncinfo$??0Texture@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Texture@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Texture@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Texture@Ogre@@QAE@XZ PROC				; Ogre::Texture::Texture, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Texture@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Texture@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Texture@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0Texture@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Texture@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Texture@Ogre@@QAE@XZ ENDP				; Ogre::Texture::Texture
PUBLIC	??0Texture@Ogre@@QAE@ABV01@@Z			; Ogre::Texture::Texture
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Texture@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Texture@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0Texture@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Texture@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Texture@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Texture@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Texture::Texture, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Texture@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7Texture@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Texture@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0Texture@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Texture@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Texture@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Texture::Texture
PUBLIC	??4Texture@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Texture::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Texture@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Texture@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Texture::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Texture@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Texture::operator=
_TEXT	ENDS
PUBLIC	??_GTexture@Ogre@@MAEPAXI@Z			; Ogre::Texture::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GTexture@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTexture@Ogre@@MAEPAXI@Z PROC			; Ogre::Texture::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Texture@Ogre@@MAE@XZ			; Ogre::Texture::~Texture
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@16
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@16:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTexture@Ogre@@MAEPAXI@Z ENDP			; Ogre::Texture::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_ETexture@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ETexture@Ogre@@MAEPAXI@Z PROC			; Ogre::Texture::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@13
	push	OFFSET ??1Texture@Ogre@@MAE@XZ		; Ogre::Texture::~Texture
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@13
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@13:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@13
$LN3@vector@13:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Texture@Ogre@@MAE@XZ			; Ogre::Texture::~Texture
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@13
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@13:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@13:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ETexture@Ogre@@MAEPAXI@Z ENDP			; Ogre::Texture::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4LockSection@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::LockSection::operator=
; Function compile flags: /Odtp
;	COMDAT ??4LockSection@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4LockSection@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::LockSection::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4LockSection@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::LockSection::operator=
_TEXT	ENDS
PUBLIC	??0LockFunctor@Ogre@@QAE@PAVLockSection@1@@Z	; Ogre::LockFunctor::LockFunctor
EXTRN	?Lock@LockSection@Ogre@@QAEXXZ:PROC		; Ogre::LockSection::Lock
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrelocker.h
;	COMDAT ??0LockFunctor@Ogre@@QAE@PAVLockSection@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSection$ = 8						; size = 4
??0LockFunctor@Ogre@@QAE@PAVLockSection@1@@Z PROC	; Ogre::LockFunctor::LockFunctor, COMDAT
; _this$ = ecx

; 26   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pSection$[ebp]
	mov	DWORD PTR [eax], ecx

; 27   : 			if(m_pSection == NULL) return;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN1@LockFuncto
	jmp	SHORT $LN2@LockFuncto
$LN1@LockFuncto:

; 28   : 			assert( m_pSection );
; 29   : 			m_pSection->Lock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Lock@LockSection@Ogre@@QAEXXZ		; Ogre::LockSection::Lock
$LN2@LockFuncto:

; 30   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0LockFunctor@Ogre@@QAE@PAVLockSection@1@@Z ENDP	; Ogre::LockFunctor::LockFunctor
_TEXT	ENDS
PUBLIC	??1LockFunctor@Ogre@@QAE@XZ			; Ogre::LockFunctor::~LockFunctor
EXTRN	?Unlock@LockSection@Ogre@@QAEXXZ:PROC		; Ogre::LockSection::Unlock
; Function compile flags: /Odtp
;	COMDAT ??1LockFunctor@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1LockFunctor@Ogre@@QAE@XZ PROC			; Ogre::LockFunctor::~LockFunctor, COMDAT
; _this$ = ecx

; 33   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 			if( m_pSection )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@LockFuncto@2

; 35   : 			{
; 36   : 				m_pSection->Unlock();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?Unlock@LockSection@Ogre@@QAEXXZ	; Ogre::LockSection::Unlock
$LN2@LockFuncto@2:

; 37   : 			}			
; 38   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1LockFunctor@Ogre@@QAE@XZ ENDP			; Ogre::LockFunctor::~LockFunctor
_TEXT	ENDS
PUBLIC	??4LockFunctor@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::LockFunctor::operator=
; Function compile flags: /Odtp
;	COMDAT ??4LockFunctor@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4LockFunctor@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::LockFunctor::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4LockFunctor@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::LockFunctor::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@SurfaceData@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::SurfaceData::getRTTI
EXTRN	?m_RTTI@SurfaceData@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::SurfaceData::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogretexture.h
;	COMDAT ?getRTTI@SurfaceData@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@SurfaceData@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::SurfaceData::getRTTI, COMDAT
; _this$ = ecx

; 32   : 		DECLARE_RTTI(SurfaceData)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@SurfaceData@Ogre@@2VRuntimeClass@2@B ; Ogre::SurfaceData::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@SurfaceData@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::SurfaceData::getRTTI
_TEXT	ENDS
PUBLIC	?newObject@SurfaceData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::SurfaceData::newObject
EXTRN	??0SurfaceData@Ogre@@QAE@XZ:PROC		; Ogre::SurfaceData::SurfaceData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@SurfaceData@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@SurfaceData@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@SurfaceData@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@SurfaceData@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@SurfaceData@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T80644 = -20						; size = 4
$T80643 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@SurfaceData@Ogre@@SAPAVBaseObject@2@XZ PROC	; Ogre::SurfaceData::newObject, COMDAT

; 32   : 		DECLARE_RTTI(SurfaceData)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@SurfaceData@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	60					; 0000003cH
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T80644[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T80644[ebp], 0
	je	SHORT $LN3@newObject@2
	mov	ecx, DWORD PTR $T80644[ebp]
	call	??0SurfaceData@Ogre@@QAE@XZ		; Ogre::SurfaceData::SurfaceData
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject@2
$LN3@newObject@2:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject@2:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T80643[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T80643[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@SurfaceData@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	60					; 0000003cH
	mov	eax, DWORD PTR $T80644[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@SurfaceData@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@SurfaceData@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@SurfaceData@Ogre@@SAPAVBaseObject@2@XZ ENDP	; Ogre::SurfaceData::newObject
PUBLIC	??A?$vector@DV?$allocator@D@std@@@std@@QAEAADI@Z ; std::vector<char,std::allocator<char> >::operator[]
PUBLIC	?getBits@SurfaceData@Ogre@@QAEPAXXZ		; Ogre::SurfaceData::getBits
; Function compile flags: /Odtp
;	COMDAT ?getBits@SurfaceData@Ogre@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBits@SurfaceData@Ogre@@QAEPAXXZ PROC		; Ogre::SurfaceData::getBits, COMDAT
; _this$ = ecx

; 38   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 			return &m_Pixels[0];

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@DV?$allocator@D@std@@@std@@QAEAADI@Z ; std::vector<char,std::allocator<char> >::operator[]

; 40   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getBits@SurfaceData@Ogre@@QAEPAXXZ ENDP		; Ogre::SurfaceData::getBits
_TEXT	ENDS
PUBLIC	??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
PUBLIC	??1SurfaceData@Ogre@@UAE@XZ			; Ogre::SurfaceData::~SurfaceData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1SurfaceData@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1SurfaceData@Ogre@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1SurfaceData@Ogre@@UAE@XZ$1
__ehfuncinfo$??1SurfaceData@Ogre@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1SurfaceData@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1SurfaceData@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1SurfaceData@Ogre@@UAE@XZ PROC			; Ogre::SurfaceData::~SurfaceData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1SurfaceData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1SurfaceData@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??1SurfaceData@Ogre@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
__ehhandler$??1SurfaceData@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1SurfaceData@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1SurfaceData@Ogre@@UAE@XZ ENDP			; Ogre::SurfaceData::~SurfaceData
PUBLIC	??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
PUBLIC	??_7SurfaceData@Ogre@@6B@			; Ogre::SurfaceData::`vftable'
PUBLIC	??0SurfaceData@Ogre@@QAE@ABV01@@Z		; Ogre::SurfaceData::SurfaceData
PUBLIC	??_R4SurfaceData@Ogre@@6B@			; Ogre::SurfaceData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSurfaceData@Ogre@@@8			; Ogre::SurfaceData `RTTI Type Descriptor'
PUBLIC	??_R3SurfaceData@Ogre@@8			; Ogre::SurfaceData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SurfaceData@Ogre@@8			; Ogre::SurfaceData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SurfaceData@Ogre@@8		; Ogre::SurfaceData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_ESurfaceData@Ogre@@UAEPAXI@Z			; Ogre::SurfaceData::`vector deleting destructor'
EXTRN	?_serialize@SurfaceData@Ogre@@EAEXAAVArchive@2@H@Z:PROC ; Ogre::SurfaceData::_serialize
;	COMDAT ??_R1A@?0A@EA@SurfaceData@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SurfaceData@Ogre@@8 DD FLAT:??_R0?AVSurfaceData@Ogre@@@8 ; Ogre::SurfaceData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SurfaceData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2SurfaceData@Ogre@@8
rdata$r	SEGMENT
??_R2SurfaceData@Ogre@@8 DD FLAT:??_R1A@?0A@EA@SurfaceData@Ogre@@8 ; Ogre::SurfaceData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3SurfaceData@Ogre@@8
rdata$r	SEGMENT
??_R3SurfaceData@Ogre@@8 DD 00H				; Ogre::SurfaceData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2SurfaceData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSurfaceData@Ogre@@@8
_DATA	SEGMENT
??_R0?AVSurfaceData@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::SurfaceData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSurfaceData@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SurfaceData@Ogre@@6B@
rdata$r	SEGMENT
??_R4SurfaceData@Ogre@@6B@ DD 00H			; Ogre::SurfaceData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSurfaceData@Ogre@@@8
	DD	FLAT:??_R3SurfaceData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7SurfaceData@Ogre@@6B@
CONST	SEGMENT
??_7SurfaceData@Ogre@@6B@ DD FLAT:??_R4SurfaceData@Ogre@@6B@ ; Ogre::SurfaceData::`vftable'
	DD	FLAT:?getRTTI@SurfaceData@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@SurfaceData@Ogre@@EAEXAAVArchive@2@H@Z
	DD	FLAT:??_ESurfaceData@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SurfaceData@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SurfaceData@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SurfaceData@Ogre@@QAE@ABV01@@Z$1
__ehfuncinfo$??0SurfaceData@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SurfaceData@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0SurfaceData@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0SurfaceData@Ogre@@QAE@ABV01@@Z PROC			; Ogre::SurfaceData::SurfaceData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0SurfaceData@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7SurfaceData@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+28], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SurfaceData@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0SurfaceData@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
__ehhandler$??0SurfaceData@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0SurfaceData@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0SurfaceData@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::SurfaceData::SurfaceData
PUBLIC	??4?$vector@DV?$allocator@D@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<char,std::allocator<char> >::operator=
PUBLIC	??4SurfaceData@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::SurfaceData::operator=
; Function compile flags: /Odtp
;	COMDAT ??4SurfaceData@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4SurfaceData@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::SurfaceData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4?$vector@DV?$allocator@D@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<char,std::allocator<char> >::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4SurfaceData@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::SurfaceData::operator=
_TEXT	ENDS
PUBLIC	??_GSurfaceData@Ogre@@UAEPAXI@Z			; Ogre::SurfaceData::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GSurfaceData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GSurfaceData@Ogre@@UAEPAXI@Z PROC			; Ogre::SurfaceData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SurfaceData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@17
	push	60					; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@17:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSurfaceData@Ogre@@UAEPAXI@Z ENDP			; Ogre::SurfaceData::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_ESurfaceData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ESurfaceData@Ogre@@UAEPAXI@Z PROC			; Ogre::SurfaceData::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@14
	push	OFFSET ??1SurfaceData@Ogre@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	60					; 0000003cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@14
	push	60					; 0000003cH
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@14:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@14
$LN3@vector@14:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SurfaceData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@14
	push	60					; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@14:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@14:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ESurfaceData@Ogre@@UAEPAXI@Z ENDP			; Ogre::SurfaceData::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@DummyTexture@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::DummyTexture::getRTTI
EXTRN	?m_RTTI@DummyTexture@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::DummyTexture::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@DummyTexture@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@DummyTexture@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::DummyTexture::getRTTI, COMDAT
; _this$ = ecx

; 64   : 		DECLARE_RTTI(DummyTexture)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@DummyTexture@Ogre@@2VRuntimeClass@2@B ; Ogre::DummyTexture::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@DummyTexture@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::DummyTexture::getRTTI
_TEXT	ENDS
PUBLIC	??0DummyTexture@Ogre@@QAE@XZ			; Ogre::DummyTexture::DummyTexture
PUBLIC	?newObject@DummyTexture@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::DummyTexture::newObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@DummyTexture@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@DummyTexture@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@DummyTexture@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@DummyTexture@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@DummyTexture@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T80687 = -20						; size = 4
$T80686 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@DummyTexture@Ogre@@SAPAVBaseObject@2@XZ PROC	; Ogre::DummyTexture::newObject, COMDAT

; 64   : 		DECLARE_RTTI(DummyTexture)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@DummyTexture@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	16					; 00000010H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T80687[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T80687[ebp], 0
	je	SHORT $LN3@newObject@3
	mov	ecx, DWORD PTR $T80687[ebp]
	call	??0DummyTexture@Ogre@@QAE@XZ
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject@3
$LN3@newObject@3:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject@3:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T80686[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T80686[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@DummyTexture@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	16					; 00000010H
	mov	eax, DWORD PTR $T80687[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@DummyTexture@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@DummyTexture@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@DummyTexture@Ogre@@SAPAVBaseObject@2@XZ ENDP	; Ogre::DummyTexture::newObject
PUBLIC	?getDesc@DummyTexture@Ogre@@UAEXAAUTextureDesc@2@@Z ; Ogre::DummyTexture::getDesc
; Function compile flags: /Odtp
;	COMDAT ?getDesc@DummyTexture@Ogre@@UAEXAAUTextureDesc@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_desc$ = 8						; size = 4
?getDesc@DummyTexture@Ogre@@UAEXAAUTextureDesc@2@@Z PROC ; Ogre::DummyTexture::getDesc, COMDAT
; _this$ = ecx

; 67   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 			assert(0);
; 69   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getDesc@DummyTexture@Ogre@@UAEXAAUTextureDesc@2@@Z ENDP ; Ogre::DummyTexture::getDesc
_TEXT	ENDS
PUBLIC	?getHardwareTexture@DummyTexture@Ogre@@UAEPAVHardwarePixelBuffer@2@XZ ; Ogre::DummyTexture::getHardwareTexture
; Function compile flags: /Odtp
;	COMDAT ?getHardwareTexture@DummyTexture@Ogre@@UAEPAVHardwarePixelBuffer@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHardwareTexture@DummyTexture@Ogre@@UAEPAVHardwarePixelBuffer@2@XZ PROC ; Ogre::DummyTexture::getHardwareTexture, COMDAT
; _this$ = ecx

; 72   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 73   : 			return NULL;

	xor	eax, eax

; 74   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getHardwareTexture@DummyTexture@Ogre@@UAEPAVHardwarePixelBuffer@2@XZ ENDP ; Ogre::DummyTexture::getHardwareTexture
_TEXT	ENDS
PUBLIC	?lock@DummyTexture@Ogre@@UAEPAXII_NAAULockResult@2@@Z ; Ogre::DummyTexture::lock
; Function compile flags: /Odtp
;	COMDAT ?lock@DummyTexture@Ogre@@UAEPAXII_NAAULockResult@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_face$ = 8						; size = 4
_level$ = 12						; size = 4
_readonly$ = 16						; size = 1
_lockresult$ = 20					; size = 4
?lock@DummyTexture@Ogre@@UAEPAXII_NAAULockResult@2@@Z PROC ; Ogre::DummyTexture::lock, COMDAT
; _this$ = ecx

; 77   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 			return NULL;

	xor	eax, eax

; 79   : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?lock@DummyTexture@Ogre@@UAEPAXII_NAAULockResult@2@@Z ENDP ; Ogre::DummyTexture::lock
_TEXT	ENDS
PUBLIC	?unlock@DummyTexture@Ogre@@UAEXII@Z		; Ogre::DummyTexture::unlock
; Function compile flags: /Odtp
;	COMDAT ?unlock@DummyTexture@Ogre@@UAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_face$ = 8						; size = 4
_level$ = 12						; size = 4
?unlock@DummyTexture@Ogre@@UAEXII@Z PROC		; Ogre::DummyTexture::unlock, COMDAT
; _this$ = ecx

; 82   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?unlock@DummyTexture@Ogre@@UAEXII@Z ENDP		; Ogre::DummyTexture::unlock
_TEXT	ENDS
PUBLIC	??_7DummyTexture@Ogre@@6B@			; Ogre::DummyTexture::`vftable'
PUBLIC	??1DummyTexture@Ogre@@EAE@XZ			; Ogre::DummyTexture::~DummyTexture
PUBLIC	??_R4DummyTexture@Ogre@@6B@			; Ogre::DummyTexture::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDummyTexture@Ogre@@@8			; Ogre::DummyTexture `RTTI Type Descriptor'
PUBLIC	??_R3DummyTexture@Ogre@@8			; Ogre::DummyTexture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DummyTexture@Ogre@@8			; Ogre::DummyTexture::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DummyTexture@Ogre@@8		; Ogre::DummyTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDummyTexture@Ogre@@EAEPAXI@Z		; Ogre::DummyTexture::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@DummyTexture@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DummyTexture@Ogre@@8 DD FLAT:??_R0?AVDummyTexture@Ogre@@@8 ; Ogre::DummyTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DummyTexture@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DummyTexture@Ogre@@8
rdata$r	SEGMENT
??_R2DummyTexture@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DummyTexture@Ogre@@8 ; Ogre::DummyTexture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Texture@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3DummyTexture@Ogre@@8
rdata$r	SEGMENT
??_R3DummyTexture@Ogre@@8 DD 00H			; Ogre::DummyTexture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2DummyTexture@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDummyTexture@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDummyTexture@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::DummyTexture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDummyTexture@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DummyTexture@Ogre@@6B@
rdata$r	SEGMENT
??_R4DummyTexture@Ogre@@6B@ DD 00H			; Ogre::DummyTexture::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDummyTexture@Ogre@@@8
	DD	FLAT:??_R3DummyTexture@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DummyTexture@Ogre@@6B@
CONST	SEGMENT
??_7DummyTexture@Ogre@@6B@ DD FLAT:??_R4DummyTexture@Ogre@@6B@ ; Ogre::DummyTexture::`vftable'
	DD	FLAT:?getRTTI@DummyTexture@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EDummyTexture@Ogre@@EAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?getDesc@DummyTexture@Ogre@@UAEXAAUTextureDesc@2@@Z
	DD	FLAT:?getHardwareTexture@DummyTexture@Ogre@@UAEPAVHardwarePixelBuffer@2@XZ
	DD	FLAT:?lock@DummyTexture@Ogre@@UAEPAXII_NAAULockResult@2@@Z
	DD	FLAT:?unlock@DummyTexture@Ogre@@UAEXII@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1DummyTexture@Ogre@@EAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DummyTexture@Ogre@@EAE@XZ$0
__ehfuncinfo$??1DummyTexture@Ogre@@EAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1DummyTexture@Ogre@@EAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1DummyTexture@Ogre@@EAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DummyTexture@Ogre@@EAE@XZ PROC			; Ogre::DummyTexture::~DummyTexture, COMDAT
; _this$ = ecx

; 87   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1DummyTexture@Ogre@@EAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DummyTexture@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 88   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Texture@Ogre@@MAE@XZ			; Ogre::Texture::~Texture
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1DummyTexture@Ogre@@EAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Texture@Ogre@@MAE@XZ			; Ogre::Texture::~Texture
__ehhandler$??1DummyTexture@Ogre@@EAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1DummyTexture@Ogre@@EAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1DummyTexture@Ogre@@EAE@XZ ENDP			; Ogre::DummyTexture::~DummyTexture
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DummyTexture@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DummyTexture@Ogre@@QAE@XZ$0
__ehfuncinfo$??0DummyTexture@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DummyTexture@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DummyTexture@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0DummyTexture@Ogre@@QAE@XZ PROC			; Ogre::DummyTexture::DummyTexture, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DummyTexture@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Texture@Ogre@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DummyTexture@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DummyTexture@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Texture@Ogre@@MAE@XZ			; Ogre::Texture::~Texture
__ehhandler$??0DummyTexture@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DummyTexture@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DummyTexture@Ogre@@QAE@XZ ENDP			; Ogre::DummyTexture::DummyTexture
PUBLIC	??0DummyTexture@Ogre@@QAE@ABV01@@Z		; Ogre::DummyTexture::DummyTexture
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DummyTexture@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DummyTexture@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0DummyTexture@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DummyTexture@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DummyTexture@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0DummyTexture@Ogre@@QAE@ABV01@@Z PROC			; Ogre::DummyTexture::DummyTexture, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DummyTexture@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Texture@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7DummyTexture@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DummyTexture@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Texture@Ogre@@MAE@XZ			; Ogre::Texture::~Texture
__ehhandler$??0DummyTexture@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DummyTexture@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DummyTexture@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::DummyTexture::DummyTexture
PUBLIC	??4DummyTexture@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::DummyTexture::operator=
; Function compile flags: /Odtp
;	COMDAT ??4DummyTexture@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DummyTexture@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::DummyTexture::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Texture@Ogre@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DummyTexture@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::DummyTexture::operator=
_TEXT	ENDS
PUBLIC	??_GDummyTexture@Ogre@@EAEPAXI@Z		; Ogre::DummyTexture::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GDummyTexture@Ogre@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDummyTexture@Ogre@@EAEPAXI@Z PROC			; Ogre::DummyTexture::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DummyTexture@Ogre@@EAE@XZ		; Ogre::DummyTexture::~DummyTexture
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@18
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@18:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDummyTexture@Ogre@@EAEPAXI@Z ENDP			; Ogre::DummyTexture::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EDummyTexture@Ogre@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDummyTexture@Ogre@@EAEPAXI@Z PROC			; Ogre::DummyTexture::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@15
	push	OFFSET ??1DummyTexture@Ogre@@EAE@XZ	; Ogre::DummyTexture::~DummyTexture
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@15
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@15:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@15
$LN3@vector@15:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DummyTexture@Ogre@@EAE@XZ		; Ogre::DummyTexture::~DummyTexture
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@15
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@15:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@15:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDummyTexture@Ogre@@EAEPAXI@Z ENDP			; Ogre::DummyTexture::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@TextureData@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::TextureData::getRTTI
EXTRN	?m_RTTI@TextureData@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::TextureData::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@TextureData@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@TextureData@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::TextureData::getRTTI, COMDAT
; _this$ = ecx

; 93   : 		DECLARE_RTTI(TextureData)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@TextureData@Ogre@@2VRuntimeClass@2@B ; Ogre::TextureData::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@TextureData@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::TextureData::getRTTI
_TEXT	ENDS
PUBLIC	?newObject@TextureData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::TextureData::newObject
EXTRN	??0TextureData@Ogre@@QAE@XZ:PROC		; Ogre::TextureData::TextureData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@TextureData@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@TextureData@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@TextureData@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@TextureData@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@TextureData@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T80743 = -20						; size = 4
$T80742 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@TextureData@Ogre@@SAPAVBaseObject@2@XZ PROC	; Ogre::TextureData::newObject, COMDAT

; 93   : 		DECLARE_RTTI(TextureData)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@TextureData@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	108					; 0000006cH
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T80743[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T80743[ebp], 0
	je	SHORT $LN3@newObject@4
	mov	ecx, DWORD PTR $T80743[ebp]
	call	??0TextureData@Ogre@@QAE@XZ		; Ogre::TextureData::TextureData
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject@4
$LN3@newObject@4:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject@4:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T80742[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T80742[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@TextureData@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	108					; 0000006cH
	mov	eax, DWORD PTR $T80743[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@TextureData@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@TextureData@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@TextureData@Ogre@@SAPAVBaseObject@2@XZ ENDP	; Ogre::TextureData::newObject
PUBLIC	?getDesc@TextureData@Ogre@@UAEXAAUTextureDesc@2@@Z ; Ogre::TextureData::getDesc
; Function compile flags: /Odtp
;	COMDAT ?getDesc@TextureData@Ogre@@UAEXAAUTextureDesc@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_desc$ = 8						; size = 4
?getDesc@TextureData@Ogre@@UAEXAAUTextureDesc@2@@Z PROC	; Ogre::TextureData::getDesc, COMDAT
; _this$ = ecx

; 107  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 108  : 			desc = m_Desc;

	mov	esi, DWORD PTR _this$[ebp]
	add	esi, 16					; 00000010H
	mov	ecx, 7
	mov	edi, DWORD PTR _desc$[ebp]
	rep movsd

; 109  : 		}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?getDesc@TextureData@Ogre@@UAEXAAUTextureDesc@2@@Z ENDP	; Ogre::TextureData::getDesc
_TEXT	ENDS
PUBLIC	?getWidth@TextureData@Ogre@@QAEIXZ		; Ogre::TextureData::getWidth
; Function compile flags: /Odtp
;	COMDAT ?getWidth@TextureData@Ogre@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWidth@TextureData@Ogre@@QAEIXZ PROC			; Ogre::TextureData::getWidth, COMDAT
; _this$ = ecx

; 112  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 			return m_Desc.width;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]

; 114  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getWidth@TextureData@Ogre@@QAEIXZ ENDP			; Ogre::TextureData::getWidth
_TEXT	ENDS
PUBLIC	?getHeight@TextureData@Ogre@@QAEIXZ		; Ogre::TextureData::getHeight
; Function compile flags: /Odtp
;	COMDAT ?getHeight@TextureData@Ogre@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHeight@TextureData@Ogre@@QAEIXZ PROC		; Ogre::TextureData::getHeight, COMDAT
; _this$ = ecx

; 117  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 			return m_Desc.height;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 119  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getHeight@TextureData@Ogre@@QAEIXZ ENDP		; Ogre::TextureData::getHeight
_TEXT	ENDS
PUBLIC	?getFormat@TextureData@Ogre@@QAE?AW4PixelFormat@2@XZ ; Ogre::TextureData::getFormat
; Function compile flags: /Odtp
;	COMDAT ?getFormat@TextureData@Ogre@@QAE?AW4PixelFormat@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFormat@TextureData@Ogre@@QAE?AW4PixelFormat@2@XZ PROC ; Ogre::TextureData::getFormat, COMDAT
; _this$ = ecx

; 122  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 			return m_Desc.format;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]

; 124  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getFormat@TextureData@Ogre@@QAE?AW4PixelFormat@2@XZ ENDP ; Ogre::TextureData::getFormat
_TEXT	ENDS
PUBLIC	?setStatic@TextureData@Ogre@@QAEX_N@Z		; Ogre::TextureData::setStatic
; Function compile flags: /Odtp
;	COMDAT ?setStatic@TextureData@Ogre@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_is_static$ = 8						; size = 1
?setStatic@TextureData@Ogre@@QAEX_N@Z PROC		; Ogre::TextureData::setStatic, COMDAT
; _this$ = ecx

; 142  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 			m_isStatic = is_static;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _is_static$[ebp]
	mov	BYTE PTR [eax+76], cl

; 144  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setStatic@TextureData@Ogre@@QAEX_N@Z ENDP		; Ogre::TextureData::setStatic
_TEXT	ENDS
PUBLIC	??1?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::~vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
PUBLIC	??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
PUBLIC	??_7TextureData@Ogre@@6B@			; Ogre::TextureData::`vftable'
PUBLIC	??0TextureData@Ogre@@QAE@ABV01@@Z		; Ogre::TextureData::TextureData
PUBLIC	??_R4TextureData@Ogre@@6B@			; Ogre::TextureData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTextureData@Ogre@@@8			; Ogre::TextureData `RTTI Type Descriptor'
PUBLIC	??_R3TextureData@Ogre@@8			; Ogre::TextureData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TextureData@Ogre@@8			; Ogre::TextureData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TextureData@Ogre@@8		; Ogre::TextureData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_ETextureData@Ogre@@MAEPAXI@Z			; Ogre::TextureData::`vector deleting destructor'
EXTRN	?_serialize@TextureData@Ogre@@EAEXAAVArchive@2@H@Z:PROC ; Ogre::TextureData::_serialize
EXTRN	?getHardwareTexture@TextureData@Ogre@@UAEPAVHardwarePixelBuffer@2@XZ:PROC ; Ogre::TextureData::getHardwareTexture
EXTRN	?lock@TextureData@Ogre@@UAEPAXII_NAAULockResult@2@@Z:PROC ; Ogre::TextureData::lock
EXTRN	?unlock@TextureData@Ogre@@UAEXII@Z:PROC		; Ogre::TextureData::unlock
;	COMDAT ??_R1A@?0A@EA@TextureData@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TextureData@Ogre@@8 DD FLAT:??_R0?AVTextureData@Ogre@@@8 ; Ogre::TextureData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TextureData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2TextureData@Ogre@@8
rdata$r	SEGMENT
??_R2TextureData@Ogre@@8 DD FLAT:??_R1A@?0A@EA@TextureData@Ogre@@8 ; Ogre::TextureData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Texture@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3TextureData@Ogre@@8
rdata$r	SEGMENT
??_R3TextureData@Ogre@@8 DD 00H				; Ogre::TextureData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2TextureData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTextureData@Ogre@@@8
_DATA	SEGMENT
??_R0?AVTextureData@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::TextureData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTextureData@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TextureData@Ogre@@6B@
rdata$r	SEGMENT
??_R4TextureData@Ogre@@6B@ DD 00H			; Ogre::TextureData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTextureData@Ogre@@@8
	DD	FLAT:??_R3TextureData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7TextureData@Ogre@@6B@
CONST	SEGMENT
??_7TextureData@Ogre@@6B@ DD FLAT:??_R4TextureData@Ogre@@6B@ ; Ogre::TextureData::`vftable'
	DD	FLAT:?getRTTI@TextureData@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@TextureData@Ogre@@EAEXAAVArchive@2@H@Z
	DD	FLAT:??_ETextureData@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?getDesc@TextureData@Ogre@@UAEXAAUTextureDesc@2@@Z
	DD	FLAT:?getHardwareTexture@TextureData@Ogre@@UAEPAVHardwarePixelBuffer@2@XZ
	DD	FLAT:?lock@TextureData@Ogre@@UAEPAXII_NAAULockResult@2@@Z
	DD	FLAT:?unlock@TextureData@Ogre@@UAEXII@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0TextureData@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TextureData@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TextureData@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0TextureData@Ogre@@QAE@ABV01@@Z$2
__ehfuncinfo$??0TextureData@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0TextureData@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0TextureData@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0TextureData@Ogre@@QAE@ABV01@@Z PROC			; Ogre::TextureData::TextureData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TextureData@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Texture@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7TextureData@Ogre@@6B@
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 16					; 00000010H
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 16					; 00000010H
	mov	ecx, 7
	rep movsd
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+68], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+76]
	mov	BYTE PTR [eax+76], dl
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 80					; 00000050H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TextureData@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Texture@Ogre@@MAE@XZ			; Ogre::Texture::~Texture
__unwindfunclet$??0TextureData@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::~vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
__unwindfunclet$??0TextureData@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0TextureData@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TextureData@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TextureData@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::TextureData::TextureData
PUBLIC	??4?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::operator=
PUBLIC	??4TextureData@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::TextureData::operator=
; Function compile flags: /Odtp
;	COMDAT ??4TextureData@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4TextureData@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::TextureData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Texture@Ogre@@QAEAAV01@ABV01@@Z
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 16					; 00000010H
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 16					; 00000010H
	mov	ecx, 7
	rep movsd
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 44					; 0000002cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??4?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR [edx+68], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR [edx+72], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+76]
	mov	BYTE PTR [edx+76], cl
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 80					; 00000050H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4TextureData@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::TextureData::operator=
_TEXT	ENDS
PUBLIC	??_GTextureData@Ogre@@MAEPAXI@Z			; Ogre::TextureData::`scalar deleting destructor'
EXTRN	??1TextureData@Ogre@@MAE@XZ:PROC		; Ogre::TextureData::~TextureData
; Function compile flags: /Odtp
;	COMDAT ??_GTextureData@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTextureData@Ogre@@MAEPAXI@Z PROC			; Ogre::TextureData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TextureData@Ogre@@MAE@XZ		; Ogre::TextureData::~TextureData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@19
	push	108					; 0000006cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@19:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTextureData@Ogre@@MAEPAXI@Z ENDP			; Ogre::TextureData::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_ETextureData@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ETextureData@Ogre@@MAEPAXI@Z PROC			; Ogre::TextureData::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@16
	push	OFFSET ??1TextureData@Ogre@@MAE@XZ	; Ogre::TextureData::~TextureData
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	108					; 0000006cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@16
	push	108					; 0000006cH
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@16:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@16
$LN3@vector@16:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TextureData@Ogre@@MAE@XZ		; Ogre::TextureData::~TextureData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@16
	push	108					; 0000006cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@16:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@16:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ETextureData@Ogre@@MAEPAXI@Z ENDP			; Ogre::TextureData::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@RT_TEXTURE@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::RT_TEXTURE::getRTTI
EXTRN	?m_RTTI@RT_TEXTURE@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::RT_TEXTURE::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@RT_TEXTURE@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@RT_TEXTURE@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::RT_TEXTURE::getRTTI, COMDAT
; _this$ = ecx

; 179  : 		DECLARE_RTTI(RT_TEXTURE)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@RT_TEXTURE@Ogre@@2VRuntimeClass@2@B ; Ogre::RT_TEXTURE::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@RT_TEXTURE@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::RT_TEXTURE::getRTTI
_TEXT	ENDS
PUBLIC	??0RT_TEXTURE@Ogre@@QAE@XZ			; Ogre::RT_TEXTURE::RT_TEXTURE
PUBLIC	?newObject@RT_TEXTURE@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::RT_TEXTURE::newObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@RT_TEXTURE@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@RT_TEXTURE@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@RT_TEXTURE@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@RT_TEXTURE@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@RT_TEXTURE@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T80785 = -20						; size = 4
$T80784 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@RT_TEXTURE@Ogre@@SAPAVBaseObject@2@XZ PROC	; Ogre::RT_TEXTURE::newObject, COMDAT

; 179  : 		DECLARE_RTTI(RT_TEXTURE)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@RT_TEXTURE@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	48					; 00000030H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T80785[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T80785[ebp], 0
	je	SHORT $LN3@newObject@5
	mov	ecx, DWORD PTR $T80785[ebp]
	call	??0RT_TEXTURE@Ogre@@QAE@XZ		; Ogre::RT_TEXTURE::RT_TEXTURE
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject@5
$LN3@newObject@5:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject@5:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T80784[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T80784[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@RT_TEXTURE@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	48					; 00000030H
	mov	eax, DWORD PTR $T80785[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@RT_TEXTURE@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@RT_TEXTURE@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@RT_TEXTURE@Ogre@@SAPAVBaseObject@2@XZ ENDP	; Ogre::RT_TEXTURE::newObject
PUBLIC	??_7RT_TEXTURE@Ogre@@6B@			; Ogre::RT_TEXTURE::`vftable'
PUBLIC	??_R4RT_TEXTURE@Ogre@@6B@			; Ogre::RT_TEXTURE::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRT_TEXTURE@Ogre@@@8			; Ogre::RT_TEXTURE `RTTI Type Descriptor'
PUBLIC	??_R3RT_TEXTURE@Ogre@@8				; Ogre::RT_TEXTURE::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RT_TEXTURE@Ogre@@8				; Ogre::RT_TEXTURE::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RT_TEXTURE@Ogre@@8		; Ogre::RT_TEXTURE::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_ERT_TEXTURE@Ogre@@MAEPAXI@Z			; Ogre::RT_TEXTURE::`vector deleting destructor'
PUBLIC	?getDesc@RT_TEXTURE@Ogre@@UAEXAAUTextureDesc@2@@Z ; Ogre::RT_TEXTURE::getDesc
PUBLIC	?getHardwareTexture@RT_TEXTURE@Ogre@@UAEPAVHardwarePixelBuffer@2@XZ ; Ogre::RT_TEXTURE::getHardwareTexture
EXTRN	?lock@RT_TEXTURE@Ogre@@UAEPAXII_NAAULockResult@2@@Z:PROC ; Ogre::RT_TEXTURE::lock
EXTRN	?unlock@RT_TEXTURE@Ogre@@UAEXII@Z:PROC		; Ogre::RT_TEXTURE::unlock
;	COMDAT ??_R1A@?0A@EA@RT_TEXTURE@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RT_TEXTURE@Ogre@@8 DD FLAT:??_R0?AVRT_TEXTURE@Ogre@@@8 ; Ogre::RT_TEXTURE::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RT_TEXTURE@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2RT_TEXTURE@Ogre@@8
rdata$r	SEGMENT
??_R2RT_TEXTURE@Ogre@@8 DD FLAT:??_R1A@?0A@EA@RT_TEXTURE@Ogre@@8 ; Ogre::RT_TEXTURE::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Texture@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3RT_TEXTURE@Ogre@@8
rdata$r	SEGMENT
??_R3RT_TEXTURE@Ogre@@8 DD 00H				; Ogre::RT_TEXTURE::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2RT_TEXTURE@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRT_TEXTURE@Ogre@@@8
_DATA	SEGMENT
??_R0?AVRT_TEXTURE@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::RT_TEXTURE `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRT_TEXTURE@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4RT_TEXTURE@Ogre@@6B@
rdata$r	SEGMENT
??_R4RT_TEXTURE@Ogre@@6B@ DD 00H			; Ogre::RT_TEXTURE::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRT_TEXTURE@Ogre@@@8
	DD	FLAT:??_R3RT_TEXTURE@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7RT_TEXTURE@Ogre@@6B@
CONST	SEGMENT
??_7RT_TEXTURE@Ogre@@6B@ DD FLAT:??_R4RT_TEXTURE@Ogre@@6B@ ; Ogre::RT_TEXTURE::`vftable'
	DD	FLAT:?getRTTI@RT_TEXTURE@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_ERT_TEXTURE@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?getDesc@RT_TEXTURE@Ogre@@UAEXAAUTextureDesc@2@@Z
	DD	FLAT:?getHardwareTexture@RT_TEXTURE@Ogre@@UAEPAVHardwarePixelBuffer@2@XZ
	DD	FLAT:?lock@RT_TEXTURE@Ogre@@UAEPAXII_NAAULockResult@2@@Z
	DD	FLAT:?unlock@RT_TEXTURE@Ogre@@UAEXII@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RT_TEXTURE@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RT_TEXTURE@Ogre@@QAE@XZ$0
__ehfuncinfo$??0RT_TEXTURE@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RT_TEXTURE@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0RT_TEXTURE@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0RT_TEXTURE@Ogre@@QAE@XZ PROC				; Ogre::RT_TEXTURE::RT_TEXTURE, COMDAT
; _this$ = ecx

; 181  : 		RT_TEXTURE() : m_pTexture(NULL){}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RT_TEXTURE@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Texture@Ogre@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RT_TEXTURE@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RT_TEXTURE@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Texture@Ogre@@MAE@XZ			; Ogre::Texture::~Texture
__ehhandler$??0RT_TEXTURE@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RT_TEXTURE@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RT_TEXTURE@Ogre@@QAE@XZ ENDP				; Ogre::RT_TEXTURE::RT_TEXTURE
; Function compile flags: /Odtp
;	COMDAT ?getHardwareTexture@RT_TEXTURE@Ogre@@UAEPAVHardwarePixelBuffer@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHardwareTexture@RT_TEXTURE@Ogre@@UAEPAVHardwarePixelBuffer@2@XZ PROC ; Ogre::RT_TEXTURE::getHardwareTexture, COMDAT
; _this$ = ecx

; 184  : 		virtual HardwareTexture *getHardwareTexture(){return m_pTexture;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?getHardwareTexture@RT_TEXTURE@Ogre@@UAEPAVHardwarePixelBuffer@2@XZ ENDP ; Ogre::RT_TEXTURE::getHardwareTexture
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getDesc@RT_TEXTURE@Ogre@@UAEXAAUTextureDesc@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_desc$ = 8						; size = 4
?getDesc@RT_TEXTURE@Ogre@@UAEXAAUTextureDesc@2@@Z PROC	; Ogre::RT_TEXTURE::getDesc, COMDAT
; _this$ = ecx

; 189  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 			desc = m_Desc;

	mov	esi, DWORD PTR _this$[ebp]
	add	esi, 16					; 00000010H
	mov	ecx, 7
	mov	edi, DWORD PTR _desc$[ebp]
	rep movsd

; 191  : 		}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?getDesc@RT_TEXTURE@Ogre@@UAEXAAUTextureDesc@2@@Z ENDP	; Ogre::RT_TEXTURE::getDesc
_TEXT	ENDS
PUBLIC	??0RT_TEXTURE@Ogre@@QAE@ABV01@@Z		; Ogre::RT_TEXTURE::RT_TEXTURE
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RT_TEXTURE@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RT_TEXTURE@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0RT_TEXTURE@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RT_TEXTURE@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0RT_TEXTURE@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0RT_TEXTURE@Ogre@@QAE@ABV01@@Z PROC			; Ogre::RT_TEXTURE::RT_TEXTURE, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RT_TEXTURE@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Texture@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7RT_TEXTURE@Ogre@@6B@
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 16					; 00000010H
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 16					; 00000010H
	mov	ecx, 7
	rep movsd
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+44], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RT_TEXTURE@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Texture@Ogre@@MAE@XZ			; Ogre::Texture::~Texture
__ehhandler$??0RT_TEXTURE@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RT_TEXTURE@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RT_TEXTURE@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::RT_TEXTURE::RT_TEXTURE
PUBLIC	??4RT_TEXTURE@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::RT_TEXTURE::operator=
; Function compile flags: /Odtp
;	COMDAT ??4RT_TEXTURE@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4RT_TEXTURE@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::RT_TEXTURE::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Texture@Ogre@@QAEAAV01@ABV01@@Z
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 16					; 00000010H
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 16					; 00000010H
	mov	ecx, 7
	rep movsd
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+44], eax
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4RT_TEXTURE@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::RT_TEXTURE::operator=
_TEXT	ENDS
PUBLIC	??_GRT_TEXTURE@Ogre@@MAEPAXI@Z			; Ogre::RT_TEXTURE::`scalar deleting destructor'
EXTRN	??1RT_TEXTURE@Ogre@@MAE@XZ:PROC			; Ogre::RT_TEXTURE::~RT_TEXTURE
; Function compile flags: /Odtp
;	COMDAT ??_GRT_TEXTURE@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRT_TEXTURE@Ogre@@MAEPAXI@Z PROC			; Ogre::RT_TEXTURE::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RT_TEXTURE@Ogre@@MAE@XZ		; Ogre::RT_TEXTURE::~RT_TEXTURE
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@20
	push	48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@20:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRT_TEXTURE@Ogre@@MAEPAXI@Z ENDP			; Ogre::RT_TEXTURE::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_ERT_TEXTURE@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ERT_TEXTURE@Ogre@@MAEPAXI@Z PROC			; Ogre::RT_TEXTURE::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@17
	push	OFFSET ??1RT_TEXTURE@Ogre@@MAE@XZ	; Ogre::RT_TEXTURE::~RT_TEXTURE
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@17
	push	48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@17:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@17
$LN3@vector@17:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RT_TEXTURE@Ogre@@MAE@XZ		; Ogre::RT_TEXTURE::~RT_TEXTURE
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@17
	push	48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@17:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@17:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ERT_TEXTURE@Ogre@@MAEPAXI@Z ENDP			; Ogre::RT_TEXTURE::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
PUBLIC	?GetLineSegCount@RibbonSectionDesc@Ogre@@QAEHXZ	; Ogre::RibbonSectionDesc::GetLineSegCount
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreribbondata.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_i$63323 = -12						; size = 4
_iCount$ = -8						; size = 4
_bLastDot$ = -1						; size = 1
?GetLineSegCount@RibbonSectionDesc@Ogre@@QAEHXZ PROC	; Ogre::RibbonSectionDesc::GetLineSegCount
; _this$ = ecx

; 10   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 11   : 		int iCount = 0;

	mov	DWORD PTR _iCount$[ebp], 0

; 12   : 		bool bLastDot = false;

	mov	BYTE PTR _bLastDot$[ebp], 0

; 13   : 		for(int i = 0; i < (int)m_lines.size(); i++)

	mov	DWORD PTR _i$63323[ebp], 0
	jmp	SHORT $LN5@GetLineSeg
$LN4@GetLineSeg:
	mov	eax, DWORD PTR _i$63323[ebp]
	add	eax, 1
	mov	DWORD PTR _i$63323[ebp], eax
$LN5@GetLineSeg:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	DWORD PTR _i$63323[ebp], eax
	jge	SHORT $LN3@GetLineSeg

; 14   : 		{
; 15   : 			if(m_lines[i] < 0)

	mov	ecx, DWORD PTR _i$63323[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN2@GetLineSeg

; 16   : 			{
; 17   : 				bLastDot = false;

	mov	BYTE PTR _bLastDot$[ebp], 0

; 18   : 				continue;

	jmp	SHORT $LN4@GetLineSeg
$LN2@GetLineSeg:

; 19   : 			}
; 20   : 
; 21   : 			if(bLastDot == true)

	movzx	edx, BYTE PTR _bLastDot$[ebp]
	cmp	edx, 1
	jne	SHORT $LN1@GetLineSeg

; 22   : 				iCount++;

	mov	eax, DWORD PTR _iCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _iCount$[ebp], eax
$LN1@GetLineSeg:

; 23   : 			bLastDot = true;

	mov	BYTE PTR _bLastDot$[ebp], 1

; 24   : 		}

	jmp	SHORT $LN4@GetLineSeg
$LN3@GetLineSeg:

; 25   : 		return iCount;

	mov	eax, DWORD PTR _iCount$[ebp]

; 26   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetLineSegCount@RibbonSectionDesc@Ogre@@QAEHXZ ENDP	; Ogre::RibbonSectionDesc::GetLineSegCount
_TEXT	ENDS
PUBLIC	??0?$KeyFrameArray@M@Ogre@@QAE@XZ		; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
PUBLIC	??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ ; Ogre::KeyFrameArray<Ogre::ColourValue>::KeyFrameArray<Ogre::ColourValue>
EXTRN	_memset:PROC
xdata$x	SEGMENT
__ehfuncinfo$??0RibbonEmitterData@Ogre@@QAE@XZ DD 019930522H
	DD	010H
	DD	FLAT:__unwindtable$??0RibbonEmitterData@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0RibbonEmitterData@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$14
	DD	0eH
	DD	FLAT:__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$15
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0RibbonEmitterData@Ogre@@QAE@XZ PROC			; Ogre::RibbonEmitterData::RibbonEmitterData
; _this$ = ecx

; 29   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RibbonEmitterData@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RibbonEmitterData@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0RibbonSectionDesc@Ogre@@QAE@XZ	; Ogre::RibbonSectionDesc::RibbonSectionDesc
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	call	??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ ; Ogre::KeyFrameArray<Ogre::ColourValue>::KeyFrameArray<Ogre::ColourValue>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	??0?$KeyFrameArray@M@Ogre@@QAE@XZ	; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 308				; 00000134H
	call	??0?$KeyFrameArray@M@Ogre@@QAE@XZ	; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 396				; 0000018cH
	call	??0?$KeyFrameArray@M@Ogre@@QAE@XZ	; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	??0?$KeyFrameArray@M@Ogre@@QAE@XZ	; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 572				; 0000023cH
	call	??0?$KeyFrameArray@M@Ogre@@QAE@XZ	; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 660				; 00000294H
	call	??0?$KeyFrameArray@M@Ogre@@QAE@XZ	; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??0?$KeyFrameArray@M@Ogre@@QAE@XZ	; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 836				; 00000344H
	call	??0?$KeyFrameArray@M@Ogre@@QAE@XZ	; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 924				; 0000039cH
	call	??0?$KeyFrameArray@M@Ogre@@QAE@XZ	; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1012				; 000003f4H
	call	??0?$KeyFrameArray@M@Ogre@@QAE@XZ	; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1100				; 0000044cH
	call	??0?$KeyFrameArray@M@Ogre@@QAE@XZ	; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1188				; 000004a4H
	call	??0?$KeyFrameArray@M@Ogre@@QAE@XZ	; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1276				; 000004fcH
	call	??0?$KeyFrameArray@M@Ogre@@QAE@XZ	; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1364], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1368], 0

; 30   : 		memset(&m_Desc, 0, sizeof(m_Desc));

	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 31   : 		memset(&m_DescEx, 0, sizeof(m_DescEx));

	push	28					; 0000001cH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 32   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1RibbonSectionDesc@Ogre@@QAE@XZ	; Ogre::RibbonSectionDesc::~RibbonSectionDesc
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	jmp	??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 308				; 00000134H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 396				; 0000018cH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 572				; 0000023cH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 660				; 00000294H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$10:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 836				; 00000344H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$11:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 924				; 0000039cH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$12:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1012				; 000003f4H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$13:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1100				; 0000044cH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$14:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1188				; 000004a4H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??0RibbonEmitterData@Ogre@@QAE@XZ$15:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1276				; 000004fcH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__ehhandler$??0RibbonEmitterData@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RibbonEmitterData@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RibbonEmitterData@Ogre@@QAE@XZ ENDP			; Ogre::RibbonEmitterData::RibbonEmitterData
xdata$x	SEGMENT
__ehfuncinfo$??1RibbonEmitterData@Ogre@@MAE@XZ DD 019930522H
	DD	010H
	DD	FLAT:__unwindtable$??1RibbonEmitterData@Ogre@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??1RibbonEmitterData@Ogre@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$14
	DD	0eH
	DD	FLAT:__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$15
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1RibbonEmitterData@Ogre@@MAE@XZ PROC			; Ogre::RibbonEmitterData::~RibbonEmitterData
; _this$ = ecx

; 35   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1RibbonEmitterData@Ogre@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RibbonEmitterData@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 15		; 0000000fH

; 36   : 		OGRE_RELEASE(m_pTextureRes);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1364], 0
	je	SHORT $LN2@RibbonEmit
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1364]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1364]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1364], 0
$LN2@RibbonEmit:

; 37   : 		OGRE_RELEASE(m_pMaskTextureRes);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1368], 0
	je	SHORT $LN3@RibbonEmit
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1368]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1368]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1368], 0
$LN3@RibbonEmit:

; 38   : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1276				; 000004fcH
	call	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1188				; 000004a4H
	call	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1100				; 0000044cH
	call	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1012				; 000003f4H
	call	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 924				; 0000039cH
	call	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 836				; 00000344H
	call	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 660				; 00000294H
	call	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 572				; 0000023cH
	call	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 396				; 0000018cH
	call	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 308				; 00000134H
	call	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	call	??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1RibbonSectionDesc@Ogre@@QAE@XZ	; Ogre::RibbonSectionDesc::~RibbonSectionDesc
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1RibbonSectionDesc@Ogre@@QAE@XZ	; Ogre::RibbonSectionDesc::~RibbonSectionDesc
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	jmp	??1?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAE@XZ
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 308				; 00000134H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 396				; 0000018cH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 572				; 0000023cH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 660				; 00000294H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$10:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 836				; 00000344H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$11:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 924				; 0000039cH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$12:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1012				; 000003f4H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$13:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1100				; 0000044cH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$14:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1188				; 000004a4H
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__unwindfunclet$??1RibbonEmitterData@Ogre@@MAE@XZ$15:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1276				; 000004fcH
	jmp	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
__ehhandler$??1RibbonEmitterData@Ogre@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1RibbonEmitterData@Ogre@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1RibbonEmitterData@Ogre@@MAE@XZ ENDP			; Ogre::RibbonEmitterData::~RibbonEmitterData
PUBLIC	??$serializeRawArray@H@Archive@Ogre@@QAEAAV01@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<int>
PUBLIC	??$serializeRawArray@M@Archive@Ogre@@QAEAAV01@AAV?$vector@MV?$allocator@M@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<float>
PUBLIC	??$serializeRawArray@VVector2@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::Vector2>
PUBLIC	??6Ogre@@YAAAVArchive@0@AAV10@AAVRibbonSectionDesc@0@@Z ; Ogre::operator<<
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_desc$ = 12						; size = 4
??6Ogre@@YAAAVArchive@0@AAV10@AAVRibbonSectionDesc@0@@Z PROC ; Ogre::operator<<

; 41   : 	{

	push	ebp
	mov	ebp, esp

; 42   : 		ar.serializeRawArray(desc.m_dots);

	mov	eax, DWORD PTR _desc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawArray@VVector2@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::Vector2>

; 43   : 		ar.serializeRawArray(desc.m_vdata);

	mov	ecx, DWORD PTR _desc$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawArray@M@Archive@Ogre@@QAEAAV01@AAV?$vector@MV?$allocator@M@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<float>

; 44   : 		ar.serializeRawArray(desc.m_lines);

	mov	edx, DWORD PTR _desc$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawArray@H@Archive@Ogre@@QAEAAV01@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<int>

; 45   : 
; 46   : 		return ar;

	mov	eax, DWORD PTR _ar$[ebp]

; 47   : 	}

	pop	ebp
	ret	0
??6Ogre@@YAAAVArchive@0@AAV10@AAVRibbonSectionDesc@0@@Z ENDP ; Ogre::operator<<
_TEXT	ENDS
PUBLIC	??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z ; Ogre::operator<<<float>
PUBLIC	??$?6VColourValue@Ogre@@@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@VColourValue@Ogre@@@0@@Z ; Ogre::operator<<<Ogre::ColourValue>
PUBLIC	??$serializeRawType@VRibbonDescEx@Ogre@@@Archive@Ogre@@QAEXAAVRibbonDescEx@1@@Z ; Ogre::Archive::serializeRawType<Ogre::RibbonDescEx>
PUBLIC	??$serializeRawType@VRibbonDesc@Ogre@@@Archive@Ogre@@QAEXAAVRibbonDesc@1@@Z ; Ogre::Archive::serializeRawType<Ogre::RibbonDesc>
EXTRN	?SerializeExternalTexture@Ogre@@YAXAAVArchive@1@AAPAVTextureData@1@@Z:PROC ; Ogre::SerializeExternalTexture
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_tempdata$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@RibbonEmitterData@Ogre@@MAEXAAVArchive@2@H@Z PROC ; Ogre::RibbonEmitterData::_serialize
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		ar.serializeRawType(m_Desc);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawType@VRibbonDesc@Ogre@@@Archive@Ogre@@QAEXAAVRibbonDesc@1@@Z ; Ogre::Archive::serializeRawType<Ogre::RibbonDesc>

; 52   : 		ar.serializeRawType(m_DescEx);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawType@VRibbonDescEx@Ogre@@@Archive@Ogre@@QAEXAAVRibbonDescEx@1@@Z ; Ogre::Archive::serializeRawType<Ogre::RibbonDescEx>

; 53   : 		ar << m_Template;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	eax, DWORD PTR _ar$[ebp]
	push	eax
	call	??6Ogre@@YAAAVArchive@0@AAV10@AAVRibbonSectionDesc@0@@Z ; Ogre::operator<<
	add	esp, 8

; 54   : 
; 55   : 		int tempdata;
; 56   : 		ar << tempdata;

	lea	ecx, DWORD PTR _tempdata$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??6Archive@Ogre@@QAEAAV01@AAH@Z		; Ogre::Archive::operator<<

; 57   : 		ar << m_Color;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 132				; 00000084H
	push	edx
	mov	eax, DWORD PTR _ar$[ebp]
	push	eax
	call	??$?6VColourValue@Ogre@@@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@VColourValue@Ogre@@@0@@Z ; Ogre::operator<<<Ogre::ColourValue>
	add	esp, 8

; 58   : 		ar << m_Above;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	push	ecx
	mov	edx, DWORD PTR _ar$[ebp]
	push	edx
	call	??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z ; Ogre::operator<<<float>
	add	esp, 8

; 59   : 		ar << m_Below;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 308				; 00000134H
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	push	ecx
	call	??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z ; Ogre::operator<<<float>
	add	esp, 8

; 60   : 
; 61   : 		ar << m_UVRotateKeyFrame;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 396				; 0000018cH
	push	edx
	mov	eax, DWORD PTR _ar$[ebp]
	push	eax
	call	??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z ; Ogre::operator<<<float>
	add	esp, 8

; 62   : 		ar << m_UScaleKeyFrame;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	push	ecx
	mov	edx, DWORD PTR _ar$[ebp]
	push	edx
	call	??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z ; Ogre::operator<<<float>
	add	esp, 8

; 63   : 		ar << m_VScaleKeyFrame;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 572				; 0000023cH
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	push	ecx
	call	??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z ; Ogre::operator<<<float>
	add	esp, 8

; 64   : 		ar << m_UOffsetKeyFrame;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 660				; 00000294H
	push	edx
	mov	eax, DWORD PTR _ar$[ebp]
	push	eax
	call	??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z ; Ogre::operator<<<float>
	add	esp, 8

; 65   : 		ar << m_VOffsetKeyFrame;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	push	ecx
	mov	edx, DWORD PTR _ar$[ebp]
	push	edx
	call	??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z ; Ogre::operator<<<float>
	add	esp, 8

; 66   : 
; 67   : 		ar << m_MaskUVRotateKeyFrame;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 836				; 00000344H
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	push	ecx
	call	??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z ; Ogre::operator<<<float>
	add	esp, 8

; 68   : 		ar << m_MaskUScaleKeyFrame;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 924				; 0000039cH
	push	edx
	mov	eax, DWORD PTR _ar$[ebp]
	push	eax
	call	??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z ; Ogre::operator<<<float>
	add	esp, 8

; 69   : 		ar << m_MaskVScaleKeyFrame;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1012				; 000003f4H
	push	ecx
	mov	edx, DWORD PTR _ar$[ebp]
	push	edx
	call	??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z ; Ogre::operator<<<float>
	add	esp, 8

; 70   : 		ar << m_MaskUOffsetKeyFrame;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1100				; 0000044cH
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	push	ecx
	call	??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z ; Ogre::operator<<<float>
	add	esp, 8

; 71   : 		ar << m_MaskVOffsetKeyFrame;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1188				; 000004a4H
	push	edx
	mov	eax, DWORD PTR _ar$[ebp]
	push	eax
	call	??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z ; Ogre::operator<<<float>
	add	esp, 8

; 72   : 		ar << m_MaskSeqFrameKeyFrame;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1276				; 000004fcH
	push	ecx
	mov	edx, DWORD PTR _ar$[ebp]
	push	edx
	call	??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z ; Ogre::operator<<<float>
	add	esp, 8

; 73   : 
; 74   : 		SerializeExternalTexture(ar, m_pTextureRes);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1364				; 00000554H
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	push	ecx
	call	?SerializeExternalTexture@Ogre@@YAXAAVArchive@1@AAPAVTextureData@1@@Z ; Ogre::SerializeExternalTexture
	add	esp, 8

; 75   : 		SerializeExternalTexture(ar, m_pMaskTextureRes);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1368				; 00000558H
	push	edx
	mov	eax, DWORD PTR _ar$[ebp]
	push	eax
	call	?SerializeExternalTexture@Ogre@@YAXAAVArchive@1@AAPAVTextureData@1@@Z ; Ogre::SerializeExternalTexture
	add	esp, 8

; 76   : 
; 77   : 		if(version<101 && ar.isLoading())

	cmp	DWORD PTR _version$[ebp], 101		; 00000065H
	jge	SHORT $LN2@serialize@2
	mov	ecx, DWORD PTR _ar$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@serialize@2

; 78   : 		{
; 79   : 			m_DescEx.m_iUVAddressMode = UVADDR_WRAP;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 0

; 80   : 			m_DescEx.m_iMaskUVAddrMode = UVADDR_CLAMP;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 1
$LN2@serialize@2:

; 81   : 		}
; 82   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@RibbonEmitterData@Ogre@@MAEXAAVArchive@2@H@Z ENDP ; Ogre::RibbonEmitterData::_serialize
_TEXT	ENDS
PUBLIC	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z	; Ogre::KeyFrameArray<float>::getValue
PUBLIC	?getValue@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAEXHIAAVColourValue@2@_N@Z ; Ogre::KeyFrameArray<Ogre::ColourValue>::getValue
PUBLIC	?PrepareGenRibbon@RibbonEmitterData@Ogre@@QAEXAAURibbonEmitterFrameData@2@HI@Z ; Ogre::RibbonEmitterData::PrepareGenRibbon
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_currTick$ = -4						; size = 4
_data$ = 8						; size = 4
_seq$ = 12						; size = 4
_tick$ = 16						; size = 4
?PrepareGenRibbon@RibbonEmitterData@Ogre@@QAEXAAURibbonEmitterFrameData@2@HI@Z PROC ; Ogre::RibbonEmitterData::PrepareGenRibbon
; _this$ = ecx

; 85   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 		uint currTick = tick;

	mov	eax, DWORD PTR _tick$[ebp]
	mov	DWORD PTR _currTick$[ebp], eax

; 87   : 
; 88   : 		m_Color.getValue(seq, currTick, data.color, false);

	push	0
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _currTick$[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	call	?getValue@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAEXHIAAVColourValue@2@_N@Z ; Ogre::KeyFrameArray<Ogre::ColourValue>::getValue

; 89   : 		m_Above.getValue(seq, currTick, data.above, false);

	push	0
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _currTick$[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ; Ogre::KeyFrameArray<float>::getValue

; 90   : 		m_Below.getValue(seq, currTick, data.below, false);		

	push	0
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _currTick$[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 308				; 00000134H
	call	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ; Ogre::KeyFrameArray<float>::getValue

; 91   : 
; 92   : 		m_UVRotateKeyFrame.getValue(seq, currTick, data.uvrot, false);	

	push	0
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _currTick$[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 396				; 0000018cH
	call	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ; Ogre::KeyFrameArray<float>::getValue

; 93   : 		m_UScaleKeyFrame.getValue(seq, currTick, data.uscale, false);	

	push	0
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	edx, DWORD PTR _currTick$[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ; Ogre::KeyFrameArray<float>::getValue

; 94   : 		m_VScaleKeyFrame.getValue(seq, currTick, data.vscale, false);	

	push	0
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _currTick$[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 572				; 0000023cH
	call	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ; Ogre::KeyFrameArray<float>::getValue

; 95   : 		m_UOffsetKeyFrame.getValue(seq, currTick, data.uoffset, false);	

	push	0
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	edx, DWORD PTR _currTick$[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 660				; 00000294H
	call	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ; Ogre::KeyFrameArray<float>::getValue

; 96   : 		m_VOffsetKeyFrame.getValue(seq, currTick, data.voffset, false);	

	push	0
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	edx, DWORD PTR _currTick$[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ; Ogre::KeyFrameArray<float>::getValue

; 97   : 
; 98   : 		if(m_pMaskTextureRes != NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1368], 0
	je	$LN2@PrepareGen

; 99   : 		{
; 100  : 			m_MaskUVRotateKeyFrame.getValue(0, currTick, data.maskuvrot, false);

	push	0
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	mov	eax, DWORD PTR _currTick$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 836				; 00000344H
	call	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ; Ogre::KeyFrameArray<float>::getValue

; 101  : 			m_MaskUScaleKeyFrame.getValue(0, currTick, data.maskuscale, false);

	push	0
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	mov	edx, DWORD PTR _currTick$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 924				; 0000039cH
	call	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ; Ogre::KeyFrameArray<float>::getValue

; 102  : 			m_MaskVScaleKeyFrame.getValue(0, currTick, data.maskvscale, false);

	push	0
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR _currTick$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1012				; 000003f4H
	call	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ; Ogre::KeyFrameArray<float>::getValue

; 103  : 			m_MaskUOffsetKeyFrame.getValue(0, currTick, data.maskuoffset, false);

	push	0
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	mov	eax, DWORD PTR _currTick$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1100				; 0000044cH
	call	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ; Ogre::KeyFrameArray<float>::getValue

; 104  : 			m_MaskVOffsetKeyFrame.getValue(0, currTick, data.maskvoffset, false);

	push	0
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 60					; 0000003cH
	push	ecx
	mov	edx, DWORD PTR _currTick$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1188				; 000004a4H
	call	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ; Ogre::KeyFrameArray<float>::getValue
$LN2@PrepareGen:

; 105  : 		}
; 106  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PrepareGenRibbon@RibbonEmitterData@Ogre@@QAEXAAURibbonEmitterFrameData@2@HI@Z ENDP ; Ogre::RibbonEmitterData::PrepareGenRibbon
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	?_Tidy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ucopy<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> > >
PUBLIC	?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::begin
PUBLIC	?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::end
PUBLIC	?_Buy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Buy
PUBLIC	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
PUBLIC	??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ; std::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T80873 = -36						; size = 8
$T80872 = -28						; size = 8
$T80871 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T80871[ebp], esp
	push	eax
	call	??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ; std::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@18

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T80872[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T80873[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ucopy<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@18
__catch$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@18
	ret	0
$LN5@vector@18:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@18:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@18:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 3

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >::~_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >
PUBLIC	?_Buy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Buy
PUBLIC	??0?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z ; std::_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >
PUBLIC	??0?$allocator@VVector2@Ogre@@@std@@QAE@XZ	; std::allocator<Ogre::Vector2>::allocator<Ogre::Vector2>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T80902 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T80902[ebp], esp
	call	??0?$allocator@VVector2@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::Vector2>::allocator<Ogre::Vector2>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z ; std::_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >
PUBLIC	?_Tidy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@1@0PAV23@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Ucopy<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> > >
PUBLIC	?begin@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::begin
PUBLIC	?end@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::end
PUBLIC	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
PUBLIC	??0?$allocator@VVector2@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::Vector2>::allocator<Ogre::Vector2>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T80914 = -36						; size = 8
$T80913 = -28						; size = 8
$T80912 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T80912[ebp], esp
	push	eax
	call	??0?$allocator@VVector2@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::Vector2>::allocator<Ogre::Vector2>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z ; std::_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@19

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T80913[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T80914[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@1@0PAV23@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Ucopy<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@19
__catch$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@19
	ret	0
$LN5@vector@19:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@19:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@19:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::~vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::~vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >
PUBLIC	?deallocate@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@I@Z ; std::allocator<Ogre::Vector2>::deallocate
PUBLIC	??$_Ucopy@PAVVector2@Ogre@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV23@00@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Ucopy<Ogre::Vector2 *>
PUBLIC	?capacity@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::capacity
PUBLIC	?_Destroy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXPAVVector2@Ogre@@0@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Destroy
PUBLIC	??$unchecked_copy@PAVVector2@Ogre@@PAV12@@stdext@@YAPAVVector2@Ogre@@PAV12@00@Z ; stdext::unchecked_copy<Ogre::Vector2 *,Ogre::Vector2 *>
PUBLIC	?clear@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$65035 = -8					; size = 4
__Ptr$65025 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@4

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@4

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::clear
	jmp	$LN9@operator@4
$LN8@operator@4:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@4

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAVVector2@Ogre@@PAV12@@stdext@@YAPAVVector2@Ogre@@PAV12@00@Z ; stdext::unchecked_copy<Ogre::Vector2 *,Ogre::Vector2 *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$65025[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$65025[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXPAVVector2@Ogre@@0@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@4
$LN6@operator@4:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@4

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Ptr$65035[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$65035[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAVVector2@Ogre@@PAV12@@stdext@@YAPAVVector2@Ogre@@PAV12@00@Z ; stdext::unchecked_copy<Ogre::Vector2 *,Ogre::Vector2 *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$65035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAVVector2@Ogre@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV23@00@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Ucopy<Ogre::Vector2 *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@4
$LN4@operator@4:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@4

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXPAVVector2@Ogre@@0@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@I@Z ; std::allocator<Ogre::Vector2>::deallocate
$LN2@operator@4:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@4

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAVVector2@Ogre@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV23@00@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Ucopy<Ogre::Vector2 *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@4:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ ; std::_Vector_val<float,std::allocator<float> >::~_Vector_val<float,std::allocator<float> >
PUBLIC	?_Buy@?$vector@MV?$allocator@M@std@@@std@@IAE_NI@Z ; std::vector<float,std::allocator<float> >::_Buy
PUBLIC	??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z ; std::_Vector_val<float,std::allocator<float> >::_Vector_val<float,std::allocator<float> >
PUBLIC	??0?$allocator@M@std@@QAE@XZ			; std::allocator<float>::allocator<float>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T80942 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T80942[ebp], esp
	call	??0?$allocator@M@std@@QAE@XZ		; std::allocator<float>::allocator<float>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z ; std::_Vector_val<float,std::allocator<float> >::_Vector_val<float,std::allocator<float> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@MV?$allocator@M@std@@@std@@IAE_NI@Z ; std::vector<float,std::allocator<float> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
PUBLIC	?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ ; std::vector<float,std::allocator<float> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@@?$vector@MV?$allocator@M@std@@@std@@IAEPAMV?$_Vector_const_iterator@MV?$allocator@M@std@@@1@0PAM@Z ; std::vector<float,std::allocator<float> >::_Ucopy<std::_Vector_const_iterator<float,std::allocator<float> > >
PUBLIC	?begin@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::begin
PUBLIC	?end@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::end
PUBLIC	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
PUBLIC	??0?$allocator@M@std@@QAE@ABV01@@Z		; std::allocator<float>::allocator<float>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T80954 = -36						; size = 8
$T80953 = -28						; size = 8
$T80952 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T80952[ebp], esp
	push	eax
	call	??0?$allocator@M@std@@QAE@ABV01@@Z	; std::allocator<float>::allocator<float>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z ; std::_Vector_val<float,std::allocator<float> >::_Vector_val<float,std::allocator<float> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@MV?$allocator@M@std@@@std@@IAE_NI@Z ; std::vector<float,std::allocator<float> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@20

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T80953[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T80954[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@@?$vector@MV?$allocator@M@std@@@std@@IAEPAMV?$_Vector_const_iterator@MV?$allocator@M@std@@@1@0PAM@Z ; std::vector<float,std::allocator<float> >::_Ucopy<std::_Vector_const_iterator<float,std::allocator<float> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@20
__catch$??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ ; std::vector<float,std::allocator<float> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@20
	ret	0
$LN5@vector@20:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@20:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@20:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ ; std::vector<float,std::allocator<float> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
PUBLIC	?deallocate@?$allocator@M@std@@QAEXPAMI@Z	; std::allocator<float>::deallocate
PUBLIC	??$_Ucopy@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Ucopy<float *>
PUBLIC	?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::capacity
PUBLIC	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy
PUBLIC	??$unchecked_copy@PAMPAM@stdext@@YAPAMPAM00@Z	; stdext::unchecked_copy<float *,float *>
PUBLIC	?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ ; std::vector<float,std::allocator<float> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$65194 = -8					; size = 4
__Ptr$65184 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<float,std::allocator<float> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@5

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@5

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ ; std::vector<float,std::allocator<float> >::clear
	jmp	$LN9@operator@5
$LN8@operator@5:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@5

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAMPAM@stdext@@YAPAMPAM00@Z ; stdext::unchecked_copy<float *,float *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$65184[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$65184[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@5
$LN6@operator@5:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@5

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Ptr$65194[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$65194[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAMPAM@stdext@@YAPAMPAM00@Z ; stdext::unchecked_copy<float *,float *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$65194[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Ucopy<float *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@5
$LN4@operator@5:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@5

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@M@std@@QAEXPAMI@Z ; std::allocator<float>::deallocate
$LN2@operator@5:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@MV?$allocator@M@std@@@std@@IAE_NI@Z ; std::vector<float,std::allocator<float> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@5

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Ucopy<float *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@5:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<float,std::allocator<float> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
PUBLIC	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy
PUBLIC	??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T80982 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T80982[ebp], esp
	call	??0?$allocator@H@std@@QAE@XZ		; std::allocator<int>::allocator<int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@@?$vector@HV?$allocator@H@std@@@std@@IAEPAHV?$_Vector_const_iterator@HV?$allocator@H@std@@@1@0PAH@Z ; std::vector<int,std::allocator<int> >::_Ucopy<std::_Vector_const_iterator<int,std::allocator<int> > >
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
PUBLIC	??0?$allocator@H@std@@QAE@ABV01@@Z		; std::allocator<int>::allocator<int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T80994 = -36						; size = 8
$T80993 = -28						; size = 8
$T80992 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T80992[ebp], esp
	push	eax
	call	??0?$allocator@H@std@@QAE@ABV01@@Z	; std::allocator<int>::allocator<int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@21

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T80993[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T80994[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@@?$vector@HV?$allocator@H@std@@@std@@IAEPAHV?$_Vector_const_iterator@HV?$allocator@H@std@@@1@0PAH@Z ; std::vector<int,std::allocator<int> >::_Ucopy<std::_Vector_const_iterator<int,std::allocator<int> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@21
__catch$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@21
	ret	0
$LN5@vector@21:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@21:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@21:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
PUBLIC	??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Ucopy<int *>
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
PUBLIC	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z	; stdext::unchecked_copy<int *,int *>
PUBLIC	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$65353 = -8					; size = 4
__Ptr$65343 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<int,std::allocator<int> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@6

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@6

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
	jmp	$LN9@operator@6
$LN8@operator@6:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@6

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::unchecked_copy<int *,int *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$65343[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$65343[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@6
$LN6@operator@6:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@6

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Ptr$65353[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$65353[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::unchecked_copy<int *,int *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$65353[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Ucopy<int *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@6
$LN4@operator@6:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@6

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate
$LN2@operator@6:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@6

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Ucopy<int *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@6:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<int,std::allocator<int> >::operator=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
EXTRN	__imp___invalid_parameter_noinfo:PROC
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z PROC	; std::vector<int,std::allocator<int> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@7
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@7:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ENDP	; std::vector<int,std::allocator<int> >::operator[]
_TEXT	ENDS
PUBLIC	??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
PUBLIC	??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
PUBLIC	??0BaseKeyFrameArray@Ogre@@QAE@XZ		; Ogre::BaseKeyFrameArray::BaseKeyFrameArray
;	COMDAT xdata$x
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
xdata$x	SEGMENT
__unwindtable$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ$2
__ehfuncinfo$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ PROC ; Ogre::KeyFrameArray<Ogre::ColourValue>::KeyFrameArray<Ogre::ColourValue>, COMDAT
; _this$ = ecx

; 90   : 		KeyFrameArray() : m_Type(INTERPOL_LINEAR){}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseKeyFrameArray@Ogre@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
__unwindfunclet$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
__unwindfunclet$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
__ehhandler$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ ENDP ; Ogre::KeyFrameArray<Ogre::ColourValue>::KeyFrameArray<Ogre::ColourValue>
PUBLIC	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
; Function compile flags: /Odtp
;	COMDAT ?getNumKey@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumKey@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEIXZ PROC ; Ogre::KeyFrameArray<Ogre::ColourValue>::getNumKey, COMDAT
; _this$ = ecx

; 94   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 			return m_Array.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size

; 96   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumKey@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEIXZ ENDP ; Ogre::KeyFrameArray<Ogre::ColourValue>::getNumKey
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getValue@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEXHIPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_seq$ = 8						; size = 4
_tick$ = 12						; size = 4
_pdata$ = 16						; size = 4
?getValue@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEXHIPAX@Z PROC ; Ogre::KeyFrameArray<Ogre::ColourValue>::getValue, COMDAT
; _this$ = ecx

; 99   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 			return getValue(seq, tick, *(POSTYPE *)pdata);

	push	1
	mov	eax, DWORD PTR _pdata$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tick$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getValue@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAEXHIAAVColourValue@2@_N@Z ; Ogre::KeyFrameArray<Ogre::ColourValue>::getValue

; 101  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getValue@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEXHIPAX@Z ENDP ; Ogre::KeyFrameArray<Ogre::ColourValue>::getValue
_TEXT	ENDS
PUBLIC	??$KEYFRAME_HERMITE@VColourValue@Ogre@@@Ogre@@YAXAAVColourValue@0@MABV10@111@Z ; Ogre::KEYFRAME_HERMITE<Ogre::ColourValue>
PUBLIC	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator[]
PUBLIC	??$KEYFRAME_LERP@VColourValue@Ogre@@@Ogre@@YAXAAVColourValue@0@MABV10@1@Z ; Ogre::KEYFRAME_LERP<Ogre::ColourValue>
PUBLIC	??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
PUBLIC	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
EXTRN	__imp__rand:PROC
; Function compile flags: /Odtp
;	COMDAT ?getValue@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAEXHIAAVColourValue@2@_N@Z
_TEXT	SEGMENT
tv567 = -84						; size = 8
tv565 = -76						; size = 4
tv493 = -72						; size = 8
tv491 = -64						; size = 4
_this$ = -60						; size = 4
_tick1$65453 = -56					; size = 4
_t$65457 = -52						; size = 4
_tick2$65454 = -48					; size = 4
_middle$65448 = -44					; size = 4
_tick1$65413 = -40					; size = 4
_t$65417 = -36						; size = 4
_tick2$65414 = -32					; size = 4
_i$65399 = -28						; size = 4
_start$ = -24						; size = 4
_end$ = -20						; size = 4
_dtick$ = -16						; size = 4
_size$ = -12						; size = 4
_ntotalkeys$ = -8					; size = 4
_nseq$ = -4						; size = 4
_seq$ = 8						; size = 4
_tick$ = 12						; size = 4
_data$ = 16						; size = 4
_loop$ = 20						; size = 1
?getValue@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAEXHIAAVColourValue@2@_N@Z PROC ; Ogre::KeyFrameArray<Ogre::ColourValue>::getValue, COMDAT
; _this$ = ecx

; 104  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 			int size = (int)m_Array.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	mov	DWORD PTR _size$[ebp], eax

; 106  : 
; 107  : 			//assert(size > 0);
; 108  : 
; 109  : 			if (size == 0)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN29@getValue

; 110  : 				return;

	jmp	$LN30@getValue
$LN29@getValue:

; 111  : 			
; 112  : 			data = m_Array[0].data;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	add	eax, 4
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 113  : 
; 114  : 			int start, end;
; 115  : 			int ntotalkeys = (int)m_Array.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	mov	DWORD PTR _ntotalkeys$[ebp], eax

; 116  : 			int nseq = (int)m_Ranges.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	mov	DWORD PTR _nseq$[ebp], eax

; 117  : 
; 118  : 			if(nseq == 0)

	cmp	DWORD PTR _nseq$[ebp], 0
	jne	SHORT $LN28@getValue

; 119  : 			{
; 120  : 				start = 0;

	mov	DWORD PTR _start$[ebp], 0

; 121  : 				end = ntotalkeys-1;

	mov	ecx, DWORD PTR _ntotalkeys$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _end$[ebp], ecx

; 122  : 			}
; 123  : 			else

	jmp	SHORT $LN27@getValue
$LN28@getValue:

; 124  : 			{
; 125  : 				assert(seq>=0 && seq<nseq);
; 126  : 				start = m_Ranges[seq].begin;

	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _start$[ebp], eax

; 127  : 				end = m_Ranges[seq].end;

	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _end$[ebp], edx
$LN27@getValue:

; 128  : 				assert(start <= end);
; 129  : 			}
; 130  : 			
; 131  : 
; 132  : 			if(m_Type == INTERPOL_RANDOM)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 3
	jne	SHORT $LN26@getValue

; 133  : 			{
; 134  : 				int i = start;

	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$65399[ebp], ecx

; 135  : 				if(end > start) i += rand()%(end-start);

	mov	edx, DWORD PTR _end$[ebp]
	cmp	edx, DWORD PTR _start$[ebp]
	jle	SHORT $LN25@getValue
	call	DWORD PTR __imp__rand
	mov	ecx, DWORD PTR _end$[ebp]
	sub	ecx, DWORD PTR _start$[ebp]
	cdq
	idiv	ecx
	add	edx, DWORD PTR _i$65399[ebp]
	mov	DWORD PTR _i$65399[ebp], edx
$LN25@getValue:

; 136  : 
; 137  : 				data = m_Array[i].data;

	mov	edx, DWORD PTR _i$65399[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	add	eax, 4
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 138  : 				return;

	jmp	$LN30@getValue
$LN26@getValue:

; 139  : 			}
; 140  : 			if(start >= size)

	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jl	SHORT $LN24@getValue

; 141  : 			{
; 142  : 				start = size -1;

	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 1
	mov	DWORD PTR _start$[ebp], edx
$LN24@getValue:

; 143  : 			}
; 144  : 			if(end >= size)

	mov	eax, DWORD PTR _end$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jl	SHORT $LN23@getValue

; 145  : 			{
; 146  : 				end = size -1;

	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _end$[ebp], ecx
$LN23@getValue:

; 147  : 			}
; 148  : 			tick -= m_Array[start].tick;

	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick$[ebp], ecx

; 149  : 			uint dtick = (m_Array[end].tick - m_Array[start].tick + 1);

	mov	edx, DWORD PTR _end$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	DWORD PTR _dtick$[ebp], ecx

; 150  : 			if(dtick == 0) tick = m_Array[start].tick;

	jne	SHORT $LN22@getValue
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _tick$[ebp], eax

; 151  : 			else

	jmp	SHORT $LN17@getValue
$LN22@getValue:

; 152  : 			{	
; 153  : 				if(loop) tick = m_Array[start].tick + (tick%dtick);

	movzx	ecx, BYTE PTR _loop$[ebp]
	test	ecx, ecx
	je	SHORT $LN20@getValue
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	ecx, eax
	mov	eax, DWORD PTR _tick$[ebp]
	xor	edx, edx
	div	DWORD PTR _dtick$[ebp]
	add	edx, DWORD PTR [ecx]
	mov	DWORD PTR _tick$[ebp], edx
	jmp	SHORT $LN17@getValue
$LN20@getValue:

; 154  : 				else if(dtick < tick) tick = m_Array[end].tick;

	mov	edx, DWORD PTR _dtick$[ebp]
	cmp	edx, DWORD PTR _tick$[ebp]
	jae	SHORT $LN18@getValue
	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick$[ebp], ecx
	jmp	SHORT $LN17@getValue
$LN18@getValue:

; 155  : 				else tick = m_Array[start].tick + tick;

	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _tick$[ebp]
	mov	DWORD PTR _tick$[ebp], eax
$LN17@getValue:

; 156  : 			}
; 157  : 
; 158  : 			if ( m_nPrindex >= start && m_nPrindex  < end )  

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	cmp	edx, DWORD PTR _start$[ebp]
	jl	$LN14@getValue
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	cmp	ecx, DWORD PTR _end$[ebp]
	jge	$LN14@getValue

; 159  : 			{
; 160  : 				if ( tick > m_Array[m_nPrindex + 1].tick && m_nPrindex + 2 <= end)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN15@getValue
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 2
	cmp	eax, DWORD PTR _end$[ebp]
	jg	SHORT $LN15@getValue

; 161  : 				{
; 162  : 					m_nPrindex++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], edx
$LN15@getValue:

; 163  : 				}
; 164  : 				if ( tick >= m_Array[m_nPrindex].tick && tick <= m_Array[m_nPrindex + 1].tick )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jb	$LN14@getValue
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	ja	$LN14@getValue

; 165  : 				{
; 166  : 					uint tick1 = m_Array[m_nPrindex].tick;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick1$65413[ebp], ecx

; 167  : 					uint tick2 = m_Array[m_nPrindex+1].tick;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick2$65414[ebp], ecx

; 168  : 					if( tick1 == tick2 )

	mov	edx, DWORD PTR _tick1$65413[ebp]
	cmp	edx, DWORD PTR _tick2$65414[ebp]
	jne	SHORT $LN13@getValue

; 169  : 					{
; 170  : 						return;

	jmp	$LN30@getValue
$LN13@getValue:

; 171  : 					}
; 172  : 					assert( tick1 < tick2);
; 173  : 
; 174  : 					float t = float( int(tick-tick1) / double(tick2-tick1) );

	mov	eax, DWORD PTR _tick$[ebp]
	sub	eax, DWORD PTR _tick1$65413[ebp]
	mov	DWORD PTR tv491[ebp], eax
	fild	DWORD PTR tv491[ebp]
	mov	ecx, DWORD PTR _tick2$65414[ebp]
	sub	ecx, DWORD PTR _tick1$65413[ebp]
	mov	DWORD PTR tv493[ebp], ecx
	mov	DWORD PTR tv493[ebp+4], 0
	fild	QWORD PTR tv493[ebp]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _t$65417[ebp]

; 175  : 					if(m_Type == INTERPOL_LINEAR) KEYFRAME_LERP( data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+32], 1
	jne	SHORT $LN12@getValue
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$65417[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	??$KEYFRAME_LERP@VColourValue@Ogre@@@Ogre@@YAXAAVColourValue@0@MABV10@1@Z ; Ogre::KEYFRAME_LERP<Ogre::ColourValue>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN11@getValue
$LN12@getValue:

; 176  : 					else KEYFRAME_HERMITE(data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data, m_CtrlPt[m_nPrindex].out, m_CtrlPt[m_nPrindex + 1].in);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$65417[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	??$KEYFRAME_HERMITE@VColourValue@Ogre@@@Ogre@@YAXAAVColourValue@0@MABV10@111@Z ; Ogre::KEYFRAME_HERMITE<Ogre::ColourValue>
	add	esp, 24					; 00000018H
$LN11@getValue:

; 177  : 					return;

	jmp	$LN30@getValue
$LN14@getValue:

; 178  : 				}
; 179  : 				//while ( m_nPrindex < end)
; 180  : 				//{
; 181  : 				//	if ( tick >= m_Array[m_nPrindex].tick && tick <= m_Array[m_nPrindex + 1].tick )
; 182  : 				//	{
; 183  : 				//		uint tick1 = m_Array[m_nPrindex].tick;
; 184  : 				//		uint tick2 = m_Array[m_nPrindex+1].tick;
; 185  : 				//		if( tick1 == tick2 )
; 186  : 				//		{
; 187  : 				//			return;
; 188  : 				//		}
; 189  : 				//		assert( tick1 < tick2);
; 190  : 
; 191  : 				//		float t = float( int(tick-tick1) / double(tick2-tick1) );
; 192  : 				//		if(m_Type == INTERPOL_LINEAR) KEYFRAME_LERP( data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data);
; 193  : 				//		else KEYFRAME_HERMITE(data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data, m_CtrlPt[m_nPrindex].out, m_CtrlPt[m_nPrindex + 1].in);
; 194  : 				//		return;
; 195  : 				//	}
; 196  : 				//	m_nPrindex++;
; 197  : 				//}
; 198  : 			}
; 199  : 			//char po[100];
; 200  : 			//sprintf(po,"start %d end %d\n",start,end);
; 201  : 			//OutputDebugString(po);
; 202  : 
; 203  : 			for(;;)
; 204  : 			{
; 205  : 				if( start >= end-1 ) break;

	mov	edx, DWORD PTR _end$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _start$[ebp], edx
	jl	SHORT $LN8@getValue
	jmp	SHORT $LN9@getValue
$LN8@getValue:

; 206  : 
; 207  : 				int middle = (start+end)/2;

	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _end$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _middle$65448[ebp], eax

; 208  : 				if( tick < m_Array[middle].tick ) end = middle;

	mov	eax, DWORD PTR _middle$65448[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN7@getValue
	mov	edx, DWORD PTR _middle$65448[ebp]
	mov	DWORD PTR _end$[ebp], edx
	jmp	SHORT $LN6@getValue
$LN7@getValue:

; 209  : 				else start = middle;

	mov	eax, DWORD PTR _middle$65448[ebp]
	mov	DWORD PTR _start$[ebp], eax
$LN6@getValue:

; 210  : 			}

	jmp	SHORT $LN14@getValue
$LN9@getValue:

; 211  : 
; 212  : 			if( start == end ) data = m_Array[start].data;

	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jne	SHORT $LN5@getValue
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	add	eax, 4
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 213  : 			else

	jmp	$LN4@getValue
$LN5@getValue:

; 214  : 			{
; 215  : 				uint tick1 = m_Array[start].tick;

	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _tick1$65453[ebp], edx

; 216  : 				uint tick2 = m_Array[end].tick;

	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick2$65454[ebp], ecx

; 217  : 				if( tick1 == tick2 )

	mov	edx, DWORD PTR _tick1$65453[ebp]
	cmp	edx, DWORD PTR _tick2$65454[ebp]
	jne	SHORT $LN3@getValue

; 218  : 				{
; 219  : 					return;

	jmp	$LN30@getValue
$LN3@getValue:

; 220  : 				}
; 221  : 				assert( tick1 < tick2);
; 222  : 
; 223  : 				float t = float( int(tick-tick1) / double(tick2-tick1) );

	mov	eax, DWORD PTR _tick$[ebp]
	sub	eax, DWORD PTR _tick1$65453[ebp]
	mov	DWORD PTR tv565[ebp], eax
	fild	DWORD PTR tv565[ebp]
	mov	ecx, DWORD PTR _tick2$65454[ebp]
	sub	ecx, DWORD PTR _tick1$65453[ebp]
	mov	DWORD PTR tv567[ebp], ecx
	mov	DWORD PTR tv567[ebp+4], 0
	fild	QWORD PTR tv567[ebp]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _t$65457[ebp]

; 224  : 				if(m_Type == INTERPOL_LINEAR) KEYFRAME_LERP( data, t, m_Array[start].data, m_Array[end].data);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+32], 1
	jne	SHORT $LN2@getValue
	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$65457[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	??$KEYFRAME_LERP@VColourValue@Ogre@@@Ogre@@YAXAAVColourValue@0@MABV10@1@Z ; Ogre::KEYFRAME_LERP<Ogre::ColourValue>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@getValue
$LN2@getValue:

; 225  : 				else KEYFRAME_HERMITE(data, t, m_Array[start].data, m_Array[end].data, m_CtrlPt[start].out, m_CtrlPt[end].in);

	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	edx, DWORD PTR _end$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$65457[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	??$KEYFRAME_HERMITE@VColourValue@Ogre@@@Ogre@@YAXAAVColourValue@0@MABV10@111@Z ; Ogre::KEYFRAME_HERMITE<Ogre::ColourValue>
	add	esp, 24					; 00000018H
$LN1@getValue:

; 226  : 				m_nPrindex = start;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR [edx+84], eax
$LN4@getValue:
$LN30@getValue:

; 227  : 			}
; 228  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?getValue@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAEXHIAAVColourValue@2@_N@Z ENDP ; Ogre::KeyFrameArray<Ogre::ColourValue>::getValue
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@8
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@8:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
_TEXT	ENDS
PUBLIC	?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::empty
PUBLIC	??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
PUBLIC	??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
PUBLIC	??$serializeRawType@W4InterpolType@Ogre@@@Archive@Ogre@@QAEXAAW4InterpolType@1@@Z ; Ogre::Archive::serializeRawType<enum Ogre::InterpolType>
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
;	COMDAT ?_serialize@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEXAAVArchive@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEXAAVArchive@2@H@Z PROC ; Ogre::KeyFrameArray<Ogre::ColourValue>::_serialize, COMDAT
; _this$ = ecx

; 231  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 232  : 			ar.serializeRawType(m_Type);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawType@W4InterpolType@Ogre@@@Archive@Ogre@@QAEXAAW4InterpolType@1@@Z ; Ogre::Archive::serializeRawType<enum Ogre::InterpolType>

; 233  : 			ar.serializeRawArray(m_Array);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>

; 234  : 			ar.serializeRawArray(m_CtrlPt);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>

; 235  : 
; 236  : 			if(!m_Array.empty() && int(m_Array[0].tick)<0)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@serialize@3
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN1@serialize@3

; 237  : 			{
; 238  : 				m_Array[0].tick = 0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	mov	DWORD PTR [eax], 0
$LN1@serialize@3:

; 239  : 			}
; 240  : 
; 241  : 			BaseKeyFrameArray::_serialize(ar, version);

	mov	ecx, DWORD PTR _version$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ar$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_serialize@BaseKeyFrameArray@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::BaseKeyFrameArray::_serialize

; 242  : 			m_nPrindex	 = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], -1

; 243  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@UAEXAAVArchive@2@H@Z ENDP ; Ogre::KeyFrameArray<Ogre::ColourValue>::_serialize
_TEXT	ENDS
PUBLIC	??4?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator=
PUBLIC	??4?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator=
PUBLIC	??4?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator=
; Function compile flags: /Odtp
;	COMDAT ??4?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??4?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAEABV01@ABV01@@Z PROC ; Ogre::KeyFrameArray<Ogre::ColourValue>::operator=, COMDAT
; _this$ = ecx

; 246  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 247  : 			m_Type = rhs.m_Type;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx

; 248  : 			m_Array = rhs.m_Array;

	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator=

; 249  : 			m_Ranges = rhs.m_Ranges;

	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator=

; 250  : 			m_CtrlPt = rhs.m_CtrlPt;

	mov	edx, DWORD PTR _rhs$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??4?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator=

; 251  : 
; 252  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAEABV01@ABV01@@Z ENDP ; Ogre::KeyFrameArray<Ogre::ColourValue>::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
PUBLIC	?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> > >
PUBLIC	?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::begin
PUBLIC	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::end
PUBLIC	?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Buy
PUBLIC	??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
PUBLIC	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T81051 = -36						; size = 8
$T81050 = -28						; size = 8
$T81049 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81049[ebp], esp
	push	eax
	call	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@22

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T81050[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T81051[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@22
__catch$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@22
	ret	0
$LN5@vector@22:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@22:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@22:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
PUBLIC	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
PUBLIC	?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> > >
PUBLIC	?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::begin
PUBLIC	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::end
PUBLIC	?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Buy
PUBLIC	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
PUBLIC	??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
PUBLIC	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T81079 = -36						; size = 8
$T81078 = -28						; size = 8
$T81077 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81077[ebp], esp
	push	eax
	call	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@23

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T81078[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T81079[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@23
__catch$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@23
	ret	0
$LN5@vector@23:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@23:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@23:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
PUBLIC	??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
;	COMDAT xdata$x
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
xdata$x	SEGMENT
__unwindtable$??0?$KeyFrameArray@M@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@XZ$2
__ehfuncinfo$??0?$KeyFrameArray@M@Ogre@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$KeyFrameArray@M@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$KeyFrameArray@M@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$KeyFrameArray@M@Ogre@@QAE@XZ PROC			; Ogre::KeyFrameArray<float>::KeyFrameArray<float>, COMDAT
; _this$ = ecx

; 90   : 		KeyFrameArray() : m_Type(INTERPOL_LINEAR){}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$KeyFrameArray@M@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseKeyFrameArray@Ogre@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$KeyFrameArray@M@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
__ehhandler$??0?$KeyFrameArray@M@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$KeyFrameArray@M@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$KeyFrameArray@M@Ogre@@QAE@XZ ENDP			; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
PUBLIC	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
; Function compile flags: /Odtp
;	COMDAT ?getNumKey@?$KeyFrameArray@M@Ogre@@UAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumKey@?$KeyFrameArray@M@Ogre@@UAEIXZ PROC		; Ogre::KeyFrameArray<float>::getNumKey, COMDAT
; _this$ = ecx

; 94   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 			return m_Array.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size

; 96   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumKey@?$KeyFrameArray@M@Ogre@@UAEIXZ ENDP		; Ogre::KeyFrameArray<float>::getNumKey
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getValue@?$KeyFrameArray@M@Ogre@@UAEXHIPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_seq$ = 8						; size = 4
_tick$ = 12						; size = 4
_pdata$ = 16						; size = 4
?getValue@?$KeyFrameArray@M@Ogre@@UAEXHIPAX@Z PROC	; Ogre::KeyFrameArray<float>::getValue, COMDAT
; _this$ = ecx

; 99   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 			return getValue(seq, tick, *(POSTYPE *)pdata);

	push	1
	mov	eax, DWORD PTR _pdata$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tick$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ; Ogre::KeyFrameArray<float>::getValue

; 101  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getValue@?$KeyFrameArray@M@Ogre@@UAEXHIPAX@Z ENDP	; Ogre::KeyFrameArray<float>::getValue
_TEXT	ENDS
PUBLIC	??$KEYFRAME_HERMITE@M@Ogre@@YAXAAMMABM111@Z	; Ogre::KEYFRAME_HERMITE<float>
PUBLIC	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
PUBLIC	??$KEYFRAME_LERP@M@Ogre@@YAXAAMMABM1@Z		; Ogre::KEYFRAME_LERP<float>
PUBLIC	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
; Function compile flags: /Odtp
;	COMDAT ?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z
_TEXT	SEGMENT
tv531 = -84						; size = 8
tv529 = -76						; size = 4
tv468 = -72						; size = 8
tv466 = -64						; size = 4
_this$ = -60						; size = 4
_tick1$65825 = -56					; size = 4
_t$65829 = -52						; size = 4
_tick2$65826 = -48					; size = 4
_middle$65820 = -44					; size = 4
_tick1$65785 = -40					; size = 4
_t$65789 = -36						; size = 4
_tick2$65786 = -32					; size = 4
_i$65771 = -28						; size = 4
_start$ = -24						; size = 4
_end$ = -20						; size = 4
_dtick$ = -16						; size = 4
_size$ = -12						; size = 4
_ntotalkeys$ = -8					; size = 4
_nseq$ = -4						; size = 4
_seq$ = 8						; size = 4
_tick$ = 12						; size = 4
_data$ = 16						; size = 4
_loop$ = 20						; size = 1
?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z PROC	; Ogre::KeyFrameArray<float>::getValue, COMDAT
; _this$ = ecx

; 104  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 			int size = (int)m_Array.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	mov	DWORD PTR _size$[ebp], eax

; 106  : 
; 107  : 			//assert(size > 0);
; 108  : 
; 109  : 			if (size == 0)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN29@getValue@2

; 110  : 				return;

	jmp	$LN30@getValue@2
$LN29@getValue@2:

; 111  : 			
; 112  : 			data = m_Array[0].data;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _data$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx]

; 113  : 
; 114  : 			int start, end;
; 115  : 			int ntotalkeys = (int)m_Array.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	mov	DWORD PTR _ntotalkeys$[ebp], eax

; 116  : 			int nseq = (int)m_Ranges.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	mov	DWORD PTR _nseq$[ebp], eax

; 117  : 
; 118  : 			if(nseq == 0)

	cmp	DWORD PTR _nseq$[ebp], 0
	jne	SHORT $LN28@getValue@2

; 119  : 			{
; 120  : 				start = 0;

	mov	DWORD PTR _start$[ebp], 0

; 121  : 				end = ntotalkeys-1;

	mov	edx, DWORD PTR _ntotalkeys$[ebp]
	sub	edx, 1
	mov	DWORD PTR _end$[ebp], edx

; 122  : 			}
; 123  : 			else

	jmp	SHORT $LN27@getValue@2
$LN28@getValue@2:

; 124  : 			{
; 125  : 				assert(seq>=0 && seq<nseq);
; 126  : 				start = m_Ranges[seq].begin;

	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _start$[ebp], ecx

; 127  : 				end = m_Ranges[seq].end;

	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _end$[ebp], eax
$LN27@getValue@2:

; 128  : 				assert(start <= end);
; 129  : 			}
; 130  : 			
; 131  : 
; 132  : 			if(m_Type == INTERPOL_RANDOM)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], 3
	jne	SHORT $LN26@getValue@2

; 133  : 			{
; 134  : 				int i = start;

	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$65771[ebp], edx

; 135  : 				if(end > start) i += rand()%(end-start);

	mov	eax, DWORD PTR _end$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	jle	SHORT $LN25@getValue@2
	call	DWORD PTR __imp__rand
	mov	ecx, DWORD PTR _end$[ebp]
	sub	ecx, DWORD PTR _start$[ebp]
	cdq
	idiv	ecx
	add	edx, DWORD PTR _i$65771[ebp]
	mov	DWORD PTR _i$65771[ebp], edx
$LN25@getValue@2:

; 136  : 
; 137  : 				data = m_Array[i].data;

	mov	edx, DWORD PTR _i$65771[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _data$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx]

; 138  : 				return;

	jmp	$LN30@getValue@2
$LN26@getValue@2:

; 139  : 			}
; 140  : 			if(start >= size)

	mov	edx, DWORD PTR _start$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jl	SHORT $LN24@getValue@2

; 141  : 			{
; 142  : 				start = size -1;

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _start$[ebp], eax
$LN24@getValue@2:

; 143  : 			}
; 144  : 			if(end >= size)

	mov	ecx, DWORD PTR _end$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jl	SHORT $LN23@getValue@2

; 145  : 			{
; 146  : 				end = size -1;

	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 1
	mov	DWORD PTR _end$[ebp], edx
$LN23@getValue@2:

; 147  : 			}
; 148  : 			tick -= m_Array[start].tick;

	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick$[ebp], ecx

; 149  : 			uint dtick = (m_Array[end].tick - m_Array[start].tick + 1);

	mov	edx, DWORD PTR _end$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	DWORD PTR _dtick$[ebp], ecx

; 150  : 			if(dtick == 0) tick = m_Array[start].tick;

	jne	SHORT $LN22@getValue@2
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _tick$[ebp], eax

; 151  : 			else

	jmp	SHORT $LN17@getValue@2
$LN22@getValue@2:

; 152  : 			{	
; 153  : 				if(loop) tick = m_Array[start].tick + (tick%dtick);

	movzx	ecx, BYTE PTR _loop$[ebp]
	test	ecx, ecx
	je	SHORT $LN20@getValue@2
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, eax
	mov	eax, DWORD PTR _tick$[ebp]
	xor	edx, edx
	div	DWORD PTR _dtick$[ebp]
	add	edx, DWORD PTR [ecx]
	mov	DWORD PTR _tick$[ebp], edx
	jmp	SHORT $LN17@getValue@2
$LN20@getValue@2:

; 154  : 				else if(dtick < tick) tick = m_Array[end].tick;

	mov	edx, DWORD PTR _dtick$[ebp]
	cmp	edx, DWORD PTR _tick$[ebp]
	jae	SHORT $LN18@getValue@2
	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick$[ebp], ecx
	jmp	SHORT $LN17@getValue@2
$LN18@getValue@2:

; 155  : 				else tick = m_Array[start].tick + tick;

	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _tick$[ebp]
	mov	DWORD PTR _tick$[ebp], eax
$LN17@getValue@2:

; 156  : 			}
; 157  : 
; 158  : 			if ( m_nPrindex >= start && m_nPrindex  < end )  

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	cmp	edx, DWORD PTR _start$[ebp]
	jl	$LN14@getValue@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	cmp	ecx, DWORD PTR _end$[ebp]
	jge	$LN14@getValue@2

; 159  : 			{
; 160  : 				if ( tick > m_Array[m_nPrindex + 1].tick && m_nPrindex + 2 <= end)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN15@getValue@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 2
	cmp	eax, DWORD PTR _end$[ebp]
	jg	SHORT $LN15@getValue@2

; 161  : 				{
; 162  : 					m_nPrindex++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], edx
$LN15@getValue@2:

; 163  : 				}
; 164  : 				if ( tick >= m_Array[m_nPrindex].tick && tick <= m_Array[m_nPrindex + 1].tick )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jb	$LN14@getValue@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	ja	$LN14@getValue@2

; 165  : 				{
; 166  : 					uint tick1 = m_Array[m_nPrindex].tick;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick1$65785[ebp], ecx

; 167  : 					uint tick2 = m_Array[m_nPrindex+1].tick;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick2$65786[ebp], ecx

; 168  : 					if( tick1 == tick2 )

	mov	edx, DWORD PTR _tick1$65785[ebp]
	cmp	edx, DWORD PTR _tick2$65786[ebp]
	jne	SHORT $LN13@getValue@2

; 169  : 					{
; 170  : 						return;

	jmp	$LN30@getValue@2
$LN13@getValue@2:

; 171  : 					}
; 172  : 					assert( tick1 < tick2);
; 173  : 
; 174  : 					float t = float( int(tick-tick1) / double(tick2-tick1) );

	mov	eax, DWORD PTR _tick$[ebp]
	sub	eax, DWORD PTR _tick1$65785[ebp]
	mov	DWORD PTR tv466[ebp], eax
	fild	DWORD PTR tv466[ebp]
	mov	ecx, DWORD PTR _tick2$65786[ebp]
	sub	ecx, DWORD PTR _tick1$65785[ebp]
	mov	DWORD PTR tv468[ebp], ecx
	mov	DWORD PTR tv468[ebp+4], 0
	fild	QWORD PTR tv468[ebp]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _t$65789[ebp]

; 175  : 					if(m_Type == INTERPOL_LINEAR) KEYFRAME_LERP( data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+32], 1
	jne	SHORT $LN12@getValue@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$65789[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	??$KEYFRAME_LERP@M@Ogre@@YAXAAMMABM1@Z	; Ogre::KEYFRAME_LERP<float>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN11@getValue@2
$LN12@getValue@2:

; 176  : 					else KEYFRAME_HERMITE(data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data, m_CtrlPt[m_nPrindex].out, m_CtrlPt[m_nPrindex + 1].in);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
	add	eax, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$65789[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	??$KEYFRAME_HERMITE@M@Ogre@@YAXAAMMABM111@Z ; Ogre::KEYFRAME_HERMITE<float>
	add	esp, 24					; 00000018H
$LN11@getValue@2:

; 177  : 					return;

	jmp	$LN30@getValue@2
$LN14@getValue@2:

; 178  : 				}
; 179  : 				//while ( m_nPrindex < end)
; 180  : 				//{
; 181  : 				//	if ( tick >= m_Array[m_nPrindex].tick && tick <= m_Array[m_nPrindex + 1].tick )
; 182  : 				//	{
; 183  : 				//		uint tick1 = m_Array[m_nPrindex].tick;
; 184  : 				//		uint tick2 = m_Array[m_nPrindex+1].tick;
; 185  : 				//		if( tick1 == tick2 )
; 186  : 				//		{
; 187  : 				//			return;
; 188  : 				//		}
; 189  : 				//		assert( tick1 < tick2);
; 190  : 
; 191  : 				//		float t = float( int(tick-tick1) / double(tick2-tick1) );
; 192  : 				//		if(m_Type == INTERPOL_LINEAR) KEYFRAME_LERP( data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data);
; 193  : 				//		else KEYFRAME_HERMITE(data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data, m_CtrlPt[m_nPrindex].out, m_CtrlPt[m_nPrindex + 1].in);
; 194  : 				//		return;
; 195  : 				//	}
; 196  : 				//	m_nPrindex++;
; 197  : 				//}
; 198  : 			}
; 199  : 			//char po[100];
; 200  : 			//sprintf(po,"start %d end %d\n",start,end);
; 201  : 			//OutputDebugString(po);
; 202  : 
; 203  : 			for(;;)
; 204  : 			{
; 205  : 				if( start >= end-1 ) break;

	mov	edx, DWORD PTR _end$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _start$[ebp], edx
	jl	SHORT $LN8@getValue@2
	jmp	SHORT $LN9@getValue@2
$LN8@getValue@2:

; 206  : 
; 207  : 				int middle = (start+end)/2;

	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _end$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _middle$65820[ebp], eax

; 208  : 				if( tick < m_Array[middle].tick ) end = middle;

	mov	eax, DWORD PTR _middle$65820[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN7@getValue@2
	mov	edx, DWORD PTR _middle$65820[ebp]
	mov	DWORD PTR _end$[ebp], edx
	jmp	SHORT $LN6@getValue@2
$LN7@getValue@2:

; 209  : 				else start = middle;

	mov	eax, DWORD PTR _middle$65820[ebp]
	mov	DWORD PTR _start$[ebp], eax
$LN6@getValue@2:

; 210  : 			}

	jmp	SHORT $LN14@getValue@2
$LN9@getValue@2:

; 211  : 
; 212  : 			if( start == end ) data = m_Array[start].data;

	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jne	SHORT $LN5@getValue@2
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _data$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx]

; 213  : 			else

	jmp	$LN4@getValue@2
$LN5@getValue@2:

; 214  : 			{
; 215  : 				uint tick1 = m_Array[start].tick;

	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _tick1$65825[ebp], eax

; 216  : 				uint tick2 = m_Array[end].tick;

	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _tick2$65826[ebp], edx

; 217  : 				if( tick1 == tick2 )

	mov	eax, DWORD PTR _tick1$65825[ebp]
	cmp	eax, DWORD PTR _tick2$65826[ebp]
	jne	SHORT $LN3@getValue@2

; 218  : 				{
; 219  : 					return;

	jmp	$LN30@getValue@2
$LN3@getValue@2:

; 220  : 				}
; 221  : 				assert( tick1 < tick2);
; 222  : 
; 223  : 				float t = float( int(tick-tick1) / double(tick2-tick1) );

	mov	ecx, DWORD PTR _tick$[ebp]
	sub	ecx, DWORD PTR _tick1$65825[ebp]
	mov	DWORD PTR tv529[ebp], ecx
	fild	DWORD PTR tv529[ebp]
	mov	edx, DWORD PTR _tick2$65826[ebp]
	sub	edx, DWORD PTR _tick1$65825[ebp]
	mov	DWORD PTR tv531[ebp], edx
	mov	DWORD PTR tv531[ebp+4], 0
	fild	QWORD PTR tv531[ebp]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _t$65829[ebp]

; 224  : 				if(m_Type == INTERPOL_LINEAR) KEYFRAME_LERP( data, t, m_Array[start].data, m_Array[end].data);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 1
	jne	SHORT $LN2@getValue@2
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$65829[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	??$KEYFRAME_LERP@M@Ogre@@YAXAAMMABM1@Z	; Ogre::KEYFRAME_LERP<float>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@getValue@2
$LN2@getValue@2:

; 225  : 				else KEYFRAME_HERMITE(data, t, m_Array[start].data, m_Array[end].data, m_CtrlPt[start].out, m_CtrlPt[end].in);

	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
	add	eax, 4
	push	eax
	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$65829[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	??$KEYFRAME_HERMITE@M@Ogre@@YAXAAMMABM111@Z ; Ogre::KEYFRAME_HERMITE<float>
	add	esp, 24					; 00000018H
$LN1@getValue@2:

; 226  : 				m_nPrindex = start;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+84], ecx
$LN4@getValue@2:
$LN30@getValue@2:

; 227  : 			}
; 228  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ENDP	; Ogre::KeyFrameArray<float>::getValue
_TEXT	ENDS
PUBLIC	?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::empty
PUBLIC	??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
PUBLIC	??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
;	COMDAT ?_serialize@?$KeyFrameArray@M@Ogre@@UAEXAAVArchive@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@?$KeyFrameArray@M@Ogre@@UAEXAAVArchive@2@H@Z PROC ; Ogre::KeyFrameArray<float>::_serialize, COMDAT
; _this$ = ecx

; 231  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 232  : 			ar.serializeRawType(m_Type);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawType@W4InterpolType@Ogre@@@Archive@Ogre@@QAEXAAW4InterpolType@1@@Z ; Ogre::Archive::serializeRawType<enum Ogre::InterpolType>

; 233  : 			ar.serializeRawArray(m_Array);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::KEYFRAME_T>

; 234  : 			ar.serializeRawArray(m_CtrlPt);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>

; 235  : 
; 236  : 			if(!m_Array.empty() && int(m_Array[0].tick)<0)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@serialize@4
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN1@serialize@4

; 237  : 			{
; 238  : 				m_Array[0].tick = 0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	DWORD PTR [eax], 0
$LN1@serialize@4:

; 239  : 			}
; 240  : 
; 241  : 			BaseKeyFrameArray::_serialize(ar, version);

	mov	ecx, DWORD PTR _version$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ar$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_serialize@BaseKeyFrameArray@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::BaseKeyFrameArray::_serialize

; 242  : 			m_nPrindex	 = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], -1

; 243  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@?$KeyFrameArray@M@Ogre@@UAEXAAVArchive@2@H@Z ENDP ; Ogre::KeyFrameArray<float>::_serialize
_TEXT	ENDS
PUBLIC	??4?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator=
PUBLIC	??4?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator=
; Function compile flags: /Odtp
;	COMDAT ??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z PROC	; Ogre::KeyFrameArray<float>::operator=, COMDAT
; _this$ = ecx

; 246  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 247  : 			m_Type = rhs.m_Type;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx

; 248  : 			m_Array = rhs.m_Array;

	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator=

; 249  : 			m_Ranges = rhs.m_Ranges;

	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator=

; 250  : 			m_CtrlPt = rhs.m_CtrlPt;

	mov	edx, DWORD PTR _rhs$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??4?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator=

; 251  : 
; 252  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4?$KeyFrameArray@M@Ogre@@QAEABV01@ABV01@@Z ENDP	; Ogre::KeyFrameArray<float>::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> > >
PUBLIC	?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::begin
PUBLIC	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::end
PUBLIC	?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Buy
PUBLIC	??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T81128 = -36						; size = 8
$T81127 = -28						; size = 8
$T81126 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81126[ebp], esp
	push	eax
	call	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@24

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T81127[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T81128[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@24
__catch$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@24
	ret	0
$LN5@vector@24:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@24:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@24:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> > >
PUBLIC	?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::begin
PUBLIC	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::end
PUBLIC	?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Buy
PUBLIC	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
PUBLIC	??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T81156 = -36						; size = 8
$T81155 = -28						; size = 8
$T81154 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81154[ebp], esp
	push	eax
	call	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@25

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T81155[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T81156[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@25
__catch$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@25
	ret	0
$LN5@vector@25:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@25:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@25:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrerect.h
;	COMDAT ??0?$TBox@H@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$TBox@H@Ogre@@QAE@XZ PROC				; Ogre::TBox<int>::TBox<int>, COMDAT
; _this$ = ecx

; 68   : 		TBox(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$TBox@H@Ogre@@QAE@XZ ENDP				; Ogre::TBox<int>::TBox<int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$TBox@H@Ogre@@QAE@HHHHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_top$ = 12						; size = 4
_front$ = 16						; size = 4
_right$ = 20						; size = 4
_bottom$ = 24						; size = 4
_back$ = 28						; size = 4
??0?$TBox@H@Ogre@@QAE@HHHHHH@Z PROC			; Ogre::TBox<int>::TBox<int>, COMDAT
; _this$ = ecx

; 70   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _front$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _right$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _bottom$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _back$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 71   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0?$TBox@H@Ogre@@QAE@HHHHHH@Z ENDP			; Ogre::TBox<int>::TBox<int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getWidth@?$TBox@H@Ogre@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWidth@?$TBox@H@Ogre@@QBEHXZ PROC			; Ogre::TBox<int>::getWidth, COMDAT
; _this$ = ecx

; 73   : 		T getWidth() const{ return m_Right-m_Left; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	0
?getWidth@?$TBox@H@Ogre@@QBEHXZ ENDP			; Ogre::TBox<int>::getWidth
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getHeight@?$TBox@H@Ogre@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHeight@?$TBox@H@Ogre@@QBEHXZ PROC			; Ogre::TBox<int>::getHeight, COMDAT
; _this$ = ecx

; 74   : 		T getHeight() const{ return m_Bottom-m_Top; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?getHeight@?$TBox@H@Ogre@@QBEHXZ ENDP			; Ogre::TBox<int>::getHeight
_TEXT	ENDS
PUBLIC	?getDepth@?$TBox@H@Ogre@@QBEHXZ			; Ogre::TBox<int>::getDepth
; Function compile flags: /Odtp
;	COMDAT ?getDepth@?$TBox@H@Ogre@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDepth@?$TBox@H@Ogre@@QBEHXZ PROC			; Ogre::TBox<int>::getDepth, COMDAT
; _this$ = ecx

; 75   : 		T getDepth() const{ return m_Back-m_Front; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	sub	eax, DWORD PTR [ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?getDepth@?$TBox@H@Ogre@@QBEHXZ ENDP			; Ogre::TBox<int>::getDepth
_TEXT	ENDS
PUBLIC	?contains@?$TBox@H@Ogre@@QBE_NABV12@@Z		; Ogre::TBox<int>::contains
; Function compile flags: /Odtp
;	COMDAT ?contains@?$TBox@H@Ogre@@QBE_NABV12@@Z
_TEXT	SEGMENT
tv80 = -8						; size = 4
_this$ = -4						; size = 4
_def$ = 8						; size = 4
?contains@?$TBox@H@Ogre@@QBE_NABV12@@Z PROC		; Ogre::TBox<int>::contains, COMDAT
; _this$ = ecx

; 78   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 79   : 			return (def.m_Left >= m_Left && def.m_Top >= m_Top && def.m_Front >= m_Front &&
; 80   : 				def.m_Right <= m_Right && def.m_Bottom <= m_Bottom && def.m_Back <= m_Back);

	mov	eax, DWORD PTR _def$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN3@contains
	mov	eax, DWORD PTR _def$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jl	SHORT $LN3@contains
	mov	eax, DWORD PTR _def$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN3@contains
	mov	eax, DWORD PTR _def$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+12]
	jg	SHORT $LN3@contains
	mov	eax, DWORD PTR _def$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+16]
	jg	SHORT $LN3@contains
	mov	eax, DWORD PTR _def$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+20]
	jg	SHORT $LN3@contains
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN4@contains
$LN3@contains:
	mov	DWORD PTR tv80[ebp], 0
$LN4@contains:
	mov	al, BYTE PTR tv80[ebp]

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?contains@?$TBox@H@Ogre@@QBE_NABV12@@Z ENDP		; Ogre::TBox<int>::contains
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_Vector_val<char,std::allocator<char> >::~_Vector_val<char,std::allocator<char> >
PUBLIC	?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@@?$vector@DV?$allocator@D@std@@@std@@IAEPADV?$_Vector_const_iterator@DV?$allocator@D@std@@@1@0PAD@Z ; std::vector<char,std::allocator<char> >::_Ucopy<std::_Vector_const_iterator<char,std::allocator<char> > >
PUBLIC	?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@DV?$allocator@D@std@@@2@XZ ; std::vector<char,std::allocator<char> >::begin
PUBLIC	?end@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@DV?$allocator@D@std@@@2@XZ ; std::vector<char,std::allocator<char> >::end
PUBLIC	?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z ; std::vector<char,std::allocator<char> >::_Buy
PUBLIC	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
PUBLIC	??0?$_Vector_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_Vector_val<char,std::allocator<char> >::_Vector_val<char,std::allocator<char> >
EXTRN	__imp_??0?$allocator@D@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T81198 = -36						; size = 8
$T81197 = -28						; size = 8
$T81196 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81196[ebp], esp
	push	eax
	call	DWORD PTR __imp_??0?$allocator@D@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_Vector_val<char,std::allocator<char> >::_Vector_val<char,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z ; std::vector<char,std::allocator<char> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@26

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T81197[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@DV?$allocator@D@std@@@2@XZ ; std::vector<char,std::allocator<char> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T81198[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@DV?$allocator@D@std@@@2@XZ ; std::vector<char,std::allocator<char> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@@?$vector@DV?$allocator@D@std@@@std@@IAEPADV?$_Vector_const_iterator@DV?$allocator@D@std@@@1@0PAD@Z ; std::vector<char,std::allocator<char> >::_Ucopy<std::_Vector_const_iterator<char,std::allocator<char> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@26
__catch$??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@26
	ret	0
$LN5@vector@26:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@26:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@26:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
PUBLIC	??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ; std::vector<char,std::allocator<char> >::_Ucopy<char *>
PUBLIC	?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::capacity
PUBLIC	?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy
PUBLIC	??$unchecked_copy@PADPAD@stdext@@YAPADPAD00@Z	; stdext::unchecked_copy<char *,char *>
PUBLIC	?clear@?$vector@DV?$allocator@D@std@@@std@@QAEXXZ ; std::vector<char,std::allocator<char> >::clear
EXTRN	__imp_?deallocate@?$allocator@D@std@@QAEXPADI@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@DV?$allocator@D@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$66261 = -8					; size = 4
__Ptr$66251 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@DV?$allocator@D@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<char,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@9

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@9

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@DV?$allocator@D@std@@@std@@QAEXXZ ; std::vector<char,std::allocator<char> >::clear
	jmp	$LN9@operator@9
$LN8@operator@9:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@9

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PADPAD@stdext@@YAPADPAD00@Z ; stdext::unchecked_copy<char *,char *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$66251[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$66251[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	jmp	$LN9@operator@9
$LN6@operator@9:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@9

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	mov	ecx, DWORD PTR __Right$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR __Ptr$66261[ebp], eax

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Ptr$66261[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PADPAD@stdext@@YAPADPAD00@Z ; stdext::unchecked_copy<char *,char *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$66261[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ; std::vector<char,std::allocator<char> >::_Ucopy<char *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@9
$LN4@operator@9:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@9

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?deallocate@?$allocator@D@std@@QAEXPADI@Z
$LN2@operator@9:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z ; std::vector<char,std::allocator<char> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@9

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ; std::vector<char,std::allocator<char> >::_Ucopy<char *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@9:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@DV?$allocator@D@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<char,std::allocator<char> >::operator=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$vector@DV?$allocator@D@std@@@std@@QAEAADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@DV?$allocator@D@std@@@std@@QAEAADI@Z PROC	; std::vector<char,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@10
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@10:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	add	eax, DWORD PTR __Pos$[ebp]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@DV?$allocator@D@std@@@std@@QAEAADI@Z ENDP	; std::vector<char,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::~_Vector_val<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
PUBLIC	?_Tidy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEPAPAVSurfaceData@Ogre@@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Ucopy<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> > >
PUBLIC	?begin@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::begin
PUBLIC	?end@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::end
PUBLIC	?_Buy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Buy
PUBLIC	?size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::size
PUBLIC	??0?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z ; std::_Vector_val<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_val<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
PUBLIC	??0?$allocator@PAVSurfaceData@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SurfaceData *>::allocator<Ogre::SurfaceData *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T81230 = -36						; size = 8
$T81229 = -28						; size = 8
$T81228 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81228[ebp], esp
	push	eax
	call	??0?$allocator@PAVSurfaceData@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SurfaceData *>::allocator<Ogre::SurfaceData *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z ; std::_Vector_val<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_val<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@27

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T81229[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T81230[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEPAPAVSurfaceData@Ogre@@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Ucopy<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@27
__catch$??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@27
	ret	0
$LN5@vector@27:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@27:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@27:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::~vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::~vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
PUBLIC	?deallocate@?$allocator@PAVSurfaceData@Ogre@@@std@@QAEXPAPAVSurfaceData@Ogre@@I@Z ; std::allocator<Ogre::SurfaceData *>::deallocate
PUBLIC	??$_Ucopy@PAPAVSurfaceData@Ogre@@@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEPAPAVSurfaceData@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Ucopy<Ogre::SurfaceData * *>
PUBLIC	?capacity@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::capacity
PUBLIC	?_Destroy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEXPAPAVSurfaceData@Ogre@@0@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Destroy
PUBLIC	??$unchecked_copy@PAPAVSurfaceData@Ogre@@PAPAV12@@stdext@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::SurfaceData * *,Ogre::SurfaceData * *>
PUBLIC	?clear@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$66419 = -8					; size = 4
__Ptr$66409 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@11

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@11

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::clear
	jmp	$LN9@operator@11
$LN8@operator@11:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@11

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAPAVSurfaceData@Ogre@@PAPAV12@@stdext@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::SurfaceData * *,Ogre::SurfaceData * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$66409[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$66409[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEXPAPAVSurfaceData@Ogre@@0@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@11
$LN6@operator@11:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@11

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Ptr$66419[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$66419[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAPAVSurfaceData@Ogre@@PAPAV12@@stdext@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::SurfaceData * *,Ogre::SurfaceData * *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$66419[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVSurfaceData@Ogre@@@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEPAPAVSurfaceData@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Ucopy<Ogre::SurfaceData * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@11
$LN4@operator@11:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@11

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEXPAPAVSurfaceData@Ogre@@0@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVSurfaceData@Ogre@@@std@@QAEXPAPAVSurfaceData@Ogre@@I@Z ; std::allocator<Ogre::SurfaceData *>::deallocate
$LN2@operator@11:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@11

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVSurfaceData@Ogre@@@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEPAPAVSurfaceData@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Ucopy<Ogre::SurfaceData * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@11:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
__ehhandler$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >::~_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >
__ehhandler$??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >::~_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<float> >::~_Container_base_aux_alloc_real<std::allocator<float> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::_Vector_val<float,std::allocator<float> >::~_Vector_val<float,std::allocator<float> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<float> >::~_Container_base_aux_alloc_real<std::allocator<float> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<float> >::~_Container_base_aux_alloc_real<std::allocator<float> >
__ehhandler$??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<float,std::allocator<float> >::~_Vector_val<float,std::allocator<float> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<int> >::~_Container_base_aux_alloc_real<std::allocator<int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<int> >::~_Container_base_aux_alloc_real<std::allocator<int> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<int> >::~_Container_base_aux_alloc_real<std::allocator<int> >
__ehhandler$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
PUBLIC	??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0BaseKeyFrameArray@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BaseKeyFrameArray@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0BaseKeyFrameArray@Ogre@@QAE@XZ$1
__ehfuncinfo$??0BaseKeyFrameArray@Ogre@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0BaseKeyFrameArray@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0BaseKeyFrameArray@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0BaseKeyFrameArray@Ogre@@QAE@XZ PROC			; Ogre::BaseKeyFrameArray::BaseKeyFrameArray, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BaseKeyFrameArray@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@IAE@XZ		; Ogre::BaseObject::BaseObject
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseKeyFrameArray@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0BaseKeyFrameArray@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0BaseKeyFrameArray@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
__ehhandler$??0BaseKeyFrameArray@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BaseKeyFrameArray@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BaseKeyFrameArray@Ogre@@QAE@XZ ENDP			; Ogre::BaseKeyFrameArray::BaseKeyFrameArray
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
__ehhandler$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
__ehhandler$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
__ehhandler$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
__ehhandler$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<char> >::~_Container_base_aux_alloc_real<std::allocator<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Vector_val<char,std::allocator<char> >::~_Vector_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<char> >::~_Container_base_aux_alloc_real<std::allocator<char> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<char> >::~_Container_base_aux_alloc_real<std::allocator<char> >
__ehhandler$??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<char,std::allocator<char> >::~_Vector_val<char,std::allocator<char> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::~_Vector_val<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >
__ehhandler$??1?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::~_Vector_val<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
PUBLIC	??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T81358 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81358[ebp], esp
	call	??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ; std::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	?deallocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::deallocate
PUBLIC	??$_Ucopy@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ucopy<Ogre::BaseKeyFrameArray::AnimRange *>
PUBLIC	?capacity@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::capacity
PUBLIC	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy
PUBLIC	??$unchecked_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
PUBLIC	?clear@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$67376 = -8					; size = 4
__Ptr$67366 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@12

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@12

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::clear
	jmp	$LN9@operator@12
$LN8@operator@12:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@12

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$67366[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$67366[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@12
$LN6@operator@12:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@12

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Ptr$67376[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$67376[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$67376[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ucopy<Ogre::BaseKeyFrameArray::AnimRange *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@12
$LN4@operator@12:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@12

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::deallocate
$LN2@operator@12:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@12

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ucopy<Ogre::BaseKeyFrameArray::AnimRange *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@12:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator=
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::end
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocate
PUBLIC	?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Xlen
PUBLIC	?max_size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy
$LN2@Buy:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::deallocate
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T81378 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81378[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
__ehhandler$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 402  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity
$LN3@capacity:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@PAVVector2@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@PAVVector2@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@PAVVector2@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 3

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::erase
PUBLIC	?begin@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::begin
PUBLIC	?end@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T81415 = -40						; size = 8
$T81414 = -32						; size = 8
$T81413 = -24						; size = 8
$T81412 = -16						; size = 8
$T81411 = -8						; size = 8
?clear@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T81412[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T81411[ebp], ecx
	mov	DWORD PTR $T81411[ebp+4], edx
	lea	eax, DWORD PTR $T81414[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T81413[ebp], ecx
	mov	DWORD PTR $T81413[ebp+4], edx
	mov	eax, DWORD PTR $T81411[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T81411[ebp]
	push	ecx
	mov	edx, DWORD PTR $T81413[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T81413[ebp]
	push	eax
	lea	ecx, DWORD PTR $T81415[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@VVector2@Ogre@@@std@@QAEPAVVector2@Ogre@@I@Z ; std::allocator<Ogre::Vector2>::allocate
PUBLIC	?_Xlen@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Xlen
PUBLIC	?max_size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@2

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@2
	jmp	SHORT $LN3@Buy@2
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@2

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@2
$LN2@Buy@2:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@VVector2@Ogre@@@std@@QAEPAVVector2@Ogre@@I@Z ; std::allocator<Ogre::Vector2>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@2:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@2:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@0AAV?$allocator@VVector2@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Vector2> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXPAVVector2@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXPAVVector2@Ogre@@0@Z PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@0AAV?$allocator@VVector2@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Vector2> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXPAVVector2@Ogre@@0@Z ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@2

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXPAVVector2@Ogre@@0@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@I@Z ; std::allocator<Ogre::Vector2>::deallocate
$LN1@Tidy@2:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T81424 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81424[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@VVector2@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::Vector2>::allocator<Ogre::Vector2>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@VVector2@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::Vector2>::allocator<Ogre::Vector2>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >
__ehhandler$??0?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_val<Ogre::Vector2,std::allocator<Ogre::Vector2> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@VVector2@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@VVector2@Ogre@@@std@@QAE@XZ PROC		; std::allocator<Ogre::Vector2>::allocator<Ogre::Vector2>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@VVector2@Ogre@@@std@@QAE@XZ ENDP		; std::allocator<Ogre::Vector2>::allocator<Ogre::Vector2>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@VVector2@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@VVector2@Ogre@@@std@@QAE@ABV01@@Z PROC	; std::allocator<Ogre::Vector2>::allocator<Ogre::Vector2>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@VVector2@Ogre@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<Ogre::Vector2>::allocator<Ogre::Vector2>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@I@Z PROC ; std::allocator<Ogre::Vector2>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@I@Z ENDP ; std::allocator<Ogre::Vector2>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ PROC ; std::vector<float,std::allocator<float> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@2
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@2
$LN3@capacity@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@2:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ENDP ; std::vector<float,std::allocator<float> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::_Vector_const_iterator<float,std::allocator<float> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ PROC ; std::vector<float,std::allocator<float> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::_Vector_const_iterator<float,std::allocator<float> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ ENDP ; std::vector<float,std::allocator<float> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ PROC ; std::vector<float,std::allocator<float> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::_Vector_const_iterator<float,std::allocator<float> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ ENDP ; std::vector<float,std::allocator<float> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ PROC	; std::vector<float,std::allocator<float> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ENDP	; std::vector<float,std::allocator<float> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z ; std::vector<float,std::allocator<float> >::erase
PUBLIC	?begin@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::begin
PUBLIC	?end@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T81463 = -40						; size = 8
$T81462 = -32						; size = 8
$T81461 = -24						; size = 8
$T81460 = -16						; size = 8
$T81459 = -8						; size = 8
?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ PROC	; std::vector<float,std::allocator<float> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T81460[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T81459[ebp], ecx
	mov	DWORD PTR $T81459[ebp+4], edx
	lea	eax, DWORD PTR $T81462[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T81461[ebp], ecx
	mov	DWORD PTR $T81461[ebp+4], edx
	mov	eax, DWORD PTR $T81459[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T81459[ebp]
	push	ecx
	mov	edx, DWORD PTR $T81461[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T81461[ebp]
	push	eax
	lea	ecx, DWORD PTR $T81463[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z ; std::vector<float,std::allocator<float> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ ENDP	; std::vector<float,std::allocator<float> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@M@std@@QAEPAMI@Z		; std::allocator<float>::allocate
PUBLIC	?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ ; std::vector<float,std::allocator<float> >::_Xlen
PUBLIC	?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@MV?$allocator@M@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@MV?$allocator@M@std@@@std@@IAE_NI@Z PROC	; std::vector<float,std::allocator<float> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@3

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@3
	jmp	SHORT $LN3@Buy@3
$LN4@Buy@3:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@3

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ ; std::vector<float,std::allocator<float> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@3
$LN2@Buy@3:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@M@std@@QAEPAMI@Z	; std::allocator<float>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@3:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@3:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@MV?$allocator@M@std@@@std@@IAE_NI@Z ENDP	; std::vector<float,std::allocator<float> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z PROC ; std::vector<float,std::allocator<float> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ENDP ; std::vector<float,std::allocator<float> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ PROC	; std::vector<float,std::allocator<float> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@3

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@M@std@@QAEXPAMI@Z ; std::allocator<float>::deallocate
$LN1@Tidy@3:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ ENDP	; std::vector<float,std::allocator<float> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<float> >::_Container_base_aux_alloc_real<std::allocator<float> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T81472 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z PROC ; std::_Vector_val<float,std::allocator<float> >::_Vector_val<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81472[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@M@std@@QAE@ABV01@@Z	; std::allocator<float>::allocator<float>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<float> >::_Container_base_aux_alloc_real<std::allocator<float> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@M@std@@QAE@ABV01@@Z	; std::allocator<float>::allocator<float>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<float> >::~_Container_base_aux_alloc_real<std::allocator<float> >
__ehhandler$??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z ENDP ; std::_Vector_val<float,std::allocator<float> >::_Vector_val<float,std::allocator<float> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<float> >::~_Container_base_aux_alloc_real<std::allocator<float> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<float> >::~_Container_base_aux_alloc_real<std::allocator<float> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@M@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@M@std@@QAE@XZ PROC			; std::allocator<float>::allocator<float>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@M@std@@QAE@XZ ENDP			; std::allocator<float>::allocator<float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@M@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@M@std@@QAE@ABV01@@Z PROC			; std::allocator<float>::allocator<float>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@M@std@@QAE@ABV01@@Z ENDP			; std::allocator<float>::allocator<float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@M@std@@QAEXPAMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@M@std@@QAEXPAMI@Z PROC		; std::allocator<float>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@M@std@@QAEXPAMI@Z ENDP		; std::allocator<float>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@3
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@3
$LN3@capacity@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@3:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
_TEXT	ENDS
PUBLIC	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T81509 = -40						; size = 8
$T81508 = -32						; size = 8
$T81507 = -24						; size = 8
$T81506 = -16						; size = 8
$T81505 = -8						; size = 8
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ PROC	; std::vector<int,std::allocator<int> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T81506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T81505[ebp], ecx
	mov	DWORD PTR $T81505[ebp+4], edx
	lea	eax, DWORD PTR $T81508[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T81507[ebp], ecx
	mov	DWORD PTR $T81507[ebp+4], edx
	mov	eax, DWORD PTR $T81505[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T81505[ebp]
	push	ecx
	mov	edx, DWORD PTR $T81507[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T81507[ebp]
	push	eax
	lea	ecx, DWORD PTR $T81509[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ENDP	; std::vector<int,std::allocator<int> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z PROC	; std::vector<int,std::allocator<int> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@4

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@4
	jmp	SHORT $LN3@Buy@4
$LN4@Buy@4:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@4

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@4
$LN2@Buy@4:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@H@std@@QAEPAHI@Z	; std::allocator<int>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@4:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@4:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ENDP	; std::vector<int,std::allocator<int> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@4

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate
$LN1@Tidy@4:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<int> >::_Container_base_aux_alloc_real<std::allocator<int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T81518 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z PROC ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81518[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@H@std@@QAE@ABV01@@Z	; std::allocator<int>::allocator<int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<int> >::_Container_base_aux_alloc_real<std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@H@std@@QAE@ABV01@@Z	; std::allocator<int>::allocator<int>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<int> >::~_Container_base_aux_alloc_real<std::allocator<int> >
__ehhandler$??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ENDP ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<int> >::~_Container_base_aux_alloc_real<std::allocator<int> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<int> >::~_Container_base_aux_alloc_real<std::allocator<int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T81543 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81543[ebp], esp
	call	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
PUBLIC	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::deallocate
PUBLIC	??$_Ucopy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Ucopy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
PUBLIC	?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::capacity
PUBLIC	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Destroy
PUBLIC	??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
PUBLIC	?clear@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$67717 = -8					; size = 4
__Ptr$67707 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@13

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@13

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::clear
	jmp	$LN9@operator@13
$LN8@operator@13:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@13

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$67707[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$67707[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	jmp	$LN9@operator@13
$LN6@operator@13:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@13

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR __Right$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR __Ptr$67717[ebp], eax

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Ptr$67717[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$67717[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Ucopy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	$LN9@operator@13
$LN4@operator@13:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@13

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::deallocate
$LN2@operator@13:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@operator@13

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Ucopy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
$LN9@operator@13:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator=
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::empty, COMDAT
; _this$ = ecx

; 735  : 		{	// test if sequence is empty

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 736  : 		return (size() == 0);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 737  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::empty
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@14
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@14:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR __Pos$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::allocate
PUBLIC	?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Xlen
PUBLIC	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@5

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@5
	jmp	SHORT $LN3@Buy@5
$LN4@Buy@5:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@5

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@5
$LN2@Buy@5:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN3@Buy@5:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@5:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@5

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	mov	eax, ecx
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::deallocate
$LN1@Tidy@5:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T81569 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81569[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
__ehhandler$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T81590 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81590[ebp], esp
	call	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
PUBLIC	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::deallocate
PUBLIC	??$_Ucopy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Ucopy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
PUBLIC	?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::capacity
PUBLIC	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Destroy
PUBLIC	??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
PUBLIC	?clear@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$67780 = -8					; size = 4
__Ptr$67770 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@15

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@15

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::clear
	jmp	$LN9@operator@15
$LN8@operator@15:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@15

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$67770[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$67770[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	jmp	$LN9@operator@15
$LN6@operator@15:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@15

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	shl	eax, 5
	mov	ecx, DWORD PTR __Right$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR __Ptr$67780[ebp], eax

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Ptr$67780[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$67780[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Ucopy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@15
$LN4@operator@15:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@15

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 5
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::deallocate
$LN2@operator@15:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@15

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Ucopy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@15:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator=
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 5

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@16
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@16:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR __Pos$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator[]
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::allocate
PUBLIC	?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Xlen
PUBLIC	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@6

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@6
	jmp	SHORT $LN3@Buy@6
$LN4@Buy@6:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@6

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@6
$LN2@Buy@6:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN3@Buy@6:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@6:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@6

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 5
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::deallocate
$LN1@Tidy@6:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T81614 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81614[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
__ehhandler$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
_TEXT	ENDS
PUBLIC	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T81635 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81635[ebp], esp
	call	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::deallocate
PUBLIC	??$_Ucopy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ucopy<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
PUBLIC	?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::capacity
PUBLIC	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy
PUBLIC	??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
PUBLIC	?clear@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$67841 = -8					; size = 4
__Ptr$67831 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@17

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@17

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::clear
	jmp	$LN9@operator@17
$LN8@operator@17:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@17

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$67831[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$67831[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@17
$LN6@operator@17:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@17

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Ptr$67841[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$67841[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$67841[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ucopy<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@17
$LN4@operator@17:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@17

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::deallocate
$LN2@operator@17:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@17

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ucopy<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@17:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator=
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 3

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::empty, COMDAT
; _this$ = ecx

; 735  : 		{	// test if sequence is empty

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 736  : 		return (size() == 0);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 737  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::empty
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@18
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@18:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocate
PUBLIC	?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Xlen
PUBLIC	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@7

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@7
	jmp	SHORT $LN3@Buy@7
$LN4@Buy@7:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@7

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@7
$LN2@Buy@7:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@7:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@7:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@7

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::deallocate
$LN1@Tidy@7:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T81661 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81661[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
__ehhandler$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T81682 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81682[ebp], esp
	call	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::deallocate
PUBLIC	??$_Ucopy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ucopy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
PUBLIC	?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::capacity
PUBLIC	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy
PUBLIC	??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
PUBLIC	?clear@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$67904 = -8					; size = 4
__Ptr$67894 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@19

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@19

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::clear
	jmp	$LN9@operator@19
$LN8@operator@19:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@19

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$67894[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$67894[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@19
$LN6@operator@19:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@19

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Ptr$67904[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$67904[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$67904[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ucopy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@19
$LN4@operator@19:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@19

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::deallocate
$LN2@operator@19:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@19

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ucopy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@19:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator=
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 3

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@20
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@20:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocate
PUBLIC	?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Xlen
PUBLIC	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@8

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@8
	jmp	SHORT $LN3@Buy@8
$LN4@Buy@8:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@8

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@8
$LN2@Buy@8:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@8:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@8:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@8

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::deallocate
$LN1@Tidy@8:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T81706 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81706[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
__ehhandler$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC ; std::vector<char,std::allocator<char> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@4
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN4@capacity@4
$LN3@capacity@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv69[ebp], eax
$LN4@capacity@4:
	mov	eax, DWORD PTR tv69[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::vector<char,std::allocator<char> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<char,std::allocator<char> >::_Vector_const_iterator<char,std::allocator<char> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@DV?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@DV?$allocator@D@std@@@2@XZ PROC ; std::vector<char,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<char,std::allocator<char> >::_Vector_const_iterator<char,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@DV?$allocator@D@std@@@2@XZ ENDP ; std::vector<char,std::allocator<char> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@DV?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@DV?$allocator@D@std@@@2@XZ PROC ; std::vector<char,std::allocator<char> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<char,std::allocator<char> >::_Vector_const_iterator<char,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@DV?$allocator@D@std@@@2@XZ ENDP ; std::vector<char,std::allocator<char> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC	; std::vector<char,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP	; std::vector<char,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@0@Z ; std::vector<char,std::allocator<char> >::erase
PUBLIC	?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ ; std::vector<char,std::allocator<char> >::begin
PUBLIC	?end@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ ; std::vector<char,std::allocator<char> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@DV?$allocator@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T81741 = -40						; size = 8
$T81740 = -32						; size = 8
$T81739 = -24						; size = 8
$T81738 = -16						; size = 8
$T81737 = -8						; size = 8
?clear@?$vector@DV?$allocator@D@std@@@std@@QAEXXZ PROC	; std::vector<char,std::allocator<char> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T81738[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ ; std::vector<char,std::allocator<char> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T81737[ebp], ecx
	mov	DWORD PTR $T81737[ebp+4], edx
	lea	eax, DWORD PTR $T81740[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ ; std::vector<char,std::allocator<char> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T81739[ebp], ecx
	mov	DWORD PTR $T81739[ebp+4], edx
	mov	eax, DWORD PTR $T81737[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T81737[ebp]
	push	ecx
	mov	edx, DWORD PTR $T81739[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T81739[ebp]
	push	eax
	lea	ecx, DWORD PTR $T81741[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@0@Z ; std::vector<char,std::allocator<char> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@DV?$allocator@D@std@@@std@@QAEXXZ ENDP	; std::vector<char,std::allocator<char> >::clear
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ ; std::vector<char,std::allocator<char> >::_Xlen
PUBLIC	?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::max_size
EXTRN	__imp_?allocate@?$allocator@D@std@@QAEPADI@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z PROC	; std::vector<char,std::allocator<char> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@9

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@9
	jmp	SHORT $LN3@Buy@9
$LN4@Buy@9:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@9

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ ; std::vector<char,std::allocator<char> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@9
$LN2@Buy@9:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?allocate@?$allocator@D@std@@QAEPADI@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax
$LN3@Buy@9:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@9:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z ENDP	; std::vector<char,std::allocator<char> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@@Z ; std::_Destroy_range<std::allocator<char> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z PROC ; std::vector<char,std::allocator<char> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@@Z ; std::_Destroy_range<std::allocator<char> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ENDP ; std::vector<char,std::allocator<char> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ PROC	; std::vector<char,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@9

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?deallocate@?$allocator@D@std@@QAEXPADI@Z
$LN1@Tidy@9:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ENDP	; std::vector<char,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<char> >::_Container_base_aux_alloc_real<std::allocator<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T81750 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC ; std::_Vector_val<char,std::allocator<char> >::_Vector_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81750[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	DWORD PTR __imp_??0?$allocator@D@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<char> >::_Container_base_aux_alloc_real<std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_??0?$allocator@D@std@@QAE@ABV01@@Z

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<char> >::~_Container_base_aux_alloc_real<std::allocator<char> >
__ehhandler$??0?$_Vector_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_Vector_val<char,std::allocator<char> >::_Vector_val<char,std::allocator<char> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<char> >::~_Container_base_aux_alloc_real<std::allocator<char> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<char> >::~_Container_base_aux_alloc_real<std::allocator<char> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@5
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@5
$LN3@capacity@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@5:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@PAPAVSurfaceData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@PAPAVSurfaceData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@PAPAVSurfaceData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::erase
PUBLIC	?begin@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::begin
PUBLIC	?end@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T81783 = -40						; size = 8
$T81782 = -32						; size = 8
$T81781 = -24						; size = 8
$T81780 = -16						; size = 8
$T81779 = -8						; size = 8
?clear@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T81780[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T81779[ebp], ecx
	mov	DWORD PTR $T81779[ebp+4], edx
	lea	eax, DWORD PTR $T81782[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T81781[ebp], ecx
	mov	DWORD PTR $T81781[ebp+4], edx
	mov	eax, DWORD PTR $T81779[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T81779[ebp]
	push	ecx
	mov	edx, DWORD PTR $T81781[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T81781[ebp]
	push	eax
	lea	ecx, DWORD PTR $T81783[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVSurfaceData@Ogre@@@std@@QAEPAPAVSurfaceData@Ogre@@I@Z ; std::allocator<Ogre::SurfaceData *>::allocate
PUBLIC	?_Xlen@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Xlen
PUBLIC	?max_size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@10

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@10
	jmp	SHORT $LN3@Buy@10
$LN4@Buy@10:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@10

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@10
$LN2@Buy@10:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@PAVSurfaceData@Ogre@@@std@@QAEPAPAVSurfaceData@Ogre@@I@Z ; std::allocator<Ogre::SurfaceData *>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@10:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@10:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAXPAPAVSurfaceData@Ogre@@0AAV?$allocator@PAVSurfaceData@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SurfaceData *> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEXPAPAVSurfaceData@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEXPAPAVSurfaceData@Ogre@@0@Z PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAXPAPAVSurfaceData@Ogre@@0AAV?$allocator@PAVSurfaceData@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SurfaceData *> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEXPAPAVSurfaceData@Ogre@@0@Z ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@10

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEXPAPAVSurfaceData@Ogre@@0@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVSurfaceData@Ogre@@@std@@QAEXPAPAVSurfaceData@Ogre@@I@Z ; std::allocator<Ogre::SurfaceData *>::deallocate
$LN1@Tidy@10:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T81792 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_val<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T81792[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@PAVSurfaceData@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SurfaceData *>::allocator<Ogre::SurfaceData *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@PAVSurfaceData@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SurfaceData *>::allocator<Ogre::SurfaceData *>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >
__ehhandler$??0?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_val<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVSurfaceData@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVSurfaceData@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::SurfaceData *>::allocator<Ogre::SurfaceData *>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAVSurfaceData@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::SurfaceData *>::allocator<Ogre::SurfaceData *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVSurfaceData@Ogre@@@std@@QAEXPAPAVSurfaceData@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVSurfaceData@Ogre@@@std@@QAEXPAPAVSurfaceData@Ogre@@I@Z PROC ; std::allocator<Ogre::SurfaceData *>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVSurfaceData@Ogre@@@std@@QAEXPAPAVSurfaceData@Ogre@@I@Z ENDP ; std::allocator<Ogre::SurfaceData *>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@6
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@6
$LN3@capacity@6:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@6:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::capacity
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::max_size
_TEXT	ENDS
PUBLIC	?erase@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::erase
PUBLIC	?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::begin
PUBLIC	?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T81825 = -40						; size = 8
$T81824 = -32						; size = 8
$T81823 = -24						; size = 8
$T81822 = -16						; size = 8
$T81821 = -8						; size = 8
?clear@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T81822[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T81821[ebp], ecx
	mov	DWORD PTR $T81821[ebp+4], edx
	lea	eax, DWORD PTR $T81824[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T81823[ebp], ecx
	mov	DWORD PTR $T81823[ebp+4], edx
	mov	eax, DWORD PTR $T81821[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T81821[ebp]
	push	ecx
	mov	edx, DWORD PTR $T81823[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T81823[ebp]
	push	eax
	lea	ecx, DWORD PTR $T81825[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::clear
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T81831 = -80						; size = 28
$T81830 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T81831[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T81831[ebp]
	push	eax
	lea	ecx, DWORD PTR $T81830[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T81830[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T81831[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T81831[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Xlen
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 27   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1logic_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$1
__ehfuncinfo$??1logic_error@std@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1logic_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 31   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1logic_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??1logic_error@std@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1logic_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1logic_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Odtp
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@21
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@21:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1length_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1length_error@std@@UAE@XZ$0
__ehfuncinfo$??1length_error@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1length_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1length_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1length_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??1length_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1length_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1length_error@std@@UAE@XZ		; std::length_error::~length_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@22
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@22:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
PUBLIC	??$?0UAnimRange@BaseKeyFrameArray@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BaseKeyFrameArray::AnimRange>
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T81897 = -24						; size = 4
$T81896 = -20						; size = 4
$T81895 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0UAnimRange@BaseKeyFrameArray@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BaseKeyFrameArray::AnimRange>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T81897[ebp], eax
	mov	ecx, DWORD PTR $T81897[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T81896[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T81896[ebp], 0
	je	SHORT $LN3@Container_
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T81896[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_
$LN3@Container_:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T81895[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T81895[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T81897[ebp]
	push	eax
	mov	ecx, DWORD PTR $T81896[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 58   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 60   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 63   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 64   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@XZ PROC ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@XZ ENDP ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z PROC ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ENDP ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z PROC ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::BaseKeyFrameArray::AnimRange>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ENDP ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@PAVVector2@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@PAVVector2@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@PAVVector2@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@VVector2@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::Vector2>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@VVector2@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::Vector2>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator!=
PUBLIC	?_Make_iter@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$68450 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAVVector2@Ogre@@PAV12@@stdext@@YAPAVVector2@Ogre@@PAV12@00@Z ; stdext::unchecked_copy<Ogre::Vector2 *,Ogre::Vector2 *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$68450[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$68450[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXPAVVector2@Ogre@@0@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$68450[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T81935 = -80						; size = 28
$T81934 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T81935[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T81935[ebp]
	push	eax
	lea	ecx, DWORD PTR $T81934[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T81934[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T81935[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T81935[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Xlen
PUBLIC	??$?0VVector2@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VVector2@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Vector2>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T81947 = -24						; size = 4
$T81946 = -20						; size = 4
$T81945 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0VVector2@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VVector2@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Vector2>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T81947[ebp], eax
	mov	ecx, DWORD PTR $T81947[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T81946[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T81946[ebp], 0
	je	SHORT $LN3@Container_@2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T81946[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@2
$LN3@Container_@2:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@2:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T81945[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T81945[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T81947[ebp]
	push	eax
	mov	ecx, DWORD PTR $T81946[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@VVector2@Ogre@@@std@@@std@@IAE@V?$allocator@VVector2@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >::_Container_base_aux_alloc_real<std::allocator<Ogre::Vector2> >
PUBLIC	??$_Allocate@VVector2@Ogre@@@std@@YAPAVVector2@Ogre@@IPAV12@@Z ; std::_Allocate<Ogre::Vector2>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@VVector2@Ogre@@@std@@QAEPAVVector2@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@VVector2@Ogre@@@std@@QAEPAVVector2@Ogre@@I@Z PROC ; std::allocator<Ogre::Vector2>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@VVector2@Ogre@@@std@@YAPAVVector2@Ogre@@IPAV12@@Z ; std::_Allocate<Ogre::Vector2>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@VVector2@Ogre@@@std@@QAEPAVVector2@Ogre@@I@Z ENDP ; std::allocator<Ogre::Vector2>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ PROC ; std::vector<float,std::allocator<float> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ENDP ; std::vector<float,std::allocator<float> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ PROC ; std::vector<float,std::allocator<float> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ENDP ; std::vector<float,std::allocator<float> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@M@std@@QBEIXZ		; std::allocator<float>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ PROC ; std::vector<float,std::allocator<float> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@M@std@@QBEIXZ	; std::allocator<float>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ENDP ; std::vector<float,std::allocator<float> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator!=
PUBLIC	?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z ; std::vector<float,std::allocator<float> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$68494 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z PROC ; std::vector<float,std::allocator<float> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z ; std::vector<float,std::allocator<float> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z ; std::vector<float,std::allocator<float> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@2

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAMPAM@stdext@@YAPAMPAM00@Z ; stdext::unchecked_copy<float *,float *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$68494[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$68494[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$68494[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@2:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z ENDP ; std::vector<float,std::allocator<float> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T81971 = -80						; size = 28
$T81970 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ PROC	; std::vector<float,std::allocator<float> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T81971[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T81971[ebp]
	push	eax
	lea	ecx, DWORD PTR $T81970[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T81970[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T81971[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@3:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T81971[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ ENDP	; std::vector<float,std::allocator<float> >::_Xlen
PUBLIC	??$?0M@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@M@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><float>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T81983 = -24						; size = 4
$T81982 = -20						; size = 4
$T81981 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<float> >::_Container_base_aux_alloc_real<std::allocator<float> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0M@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@M@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><float>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T81983[ebp], eax
	mov	ecx, DWORD PTR $T81983[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T81982[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T81982[ebp], 0
	je	SHORT $LN3@Container_@3
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T81982[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@3
$LN3@Container_@3:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@3:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T81981[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T81981[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z$1:
	mov	eax, DWORD PTR $T81983[ebp]
	push	eax
	mov	ecx, DWORD PTR $T81982[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<float> >::_Container_base_aux_alloc_real<std::allocator<float> >
PUBLIC	??$_Allocate@M@std@@YAPAMIPAM@Z			; std::_Allocate<float>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@M@std@@QAEPAMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@M@std@@QAEPAMI@Z PROC		; std::allocator<float>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@M@std@@YAPAMIPAM@Z		; std::_Allocate<float>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@M@std@@QAEPAMI@Z ENDP		; std::allocator<float>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@H@std@@QBEIXZ	; std::allocator<int>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator!=
PUBLIC	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$68538 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z PROC ; std::vector<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@3

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::unchecked_copy<int *,int *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$68538[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$68538[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$68538[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@3:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ENDP ; std::vector<int,std::allocator<int> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T82007 = -80						; size = 28
$T82006 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T82007[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T82007[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82006[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T82006[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T82007[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@4:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T82007[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
PUBLIC	??$?0H@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><int>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T82019 = -24						; size = 4
$T82018 = -20						; size = 4
$T82017 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<int> >::_Container_base_aux_alloc_real<std::allocator<int> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0H@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><int>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T82019[ebp], eax
	mov	ecx, DWORD PTR $T82019[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T82018[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T82018[ebp], 0
	je	SHORT $LN3@Container_@4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T82018[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@4
$LN3@Container_@4:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@4:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T82017[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T82017[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z$1:
	mov	eax, DWORD PTR $T82019[ebp]
	push	eax
	mov	ecx, DWORD PTR $T82018[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<int> >::_Container_base_aux_alloc_real<std::allocator<int> >
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@7
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@7
$LN3@capacity@7:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@7:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::capacity
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::max_size
_TEXT	ENDS
PUBLIC	?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::erase
PUBLIC	?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::begin
PUBLIC	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T82044 = -40						; size = 8
$T82043 = -32						; size = 8
$T82042 = -24						; size = 8
$T82041 = -16						; size = 8
$T82040 = -8						; size = 8
?clear@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T82041[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82040[ebp], ecx
	mov	DWORD PTR $T82040[ebp+4], edx
	lea	eax, DWORD PTR $T82043[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82042[ebp], ecx
	mov	DWORD PTR $T82042[ebp+4], edx
	mov	eax, DWORD PTR $T82040[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T82040[ebp]
	push	ecx
	mov	edx, DWORD PTR $T82042[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82042[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82044[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::clear
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Destroy
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T82050 = -80						; size = 28
$T82049 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T82050[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T82050[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82049[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T82049[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T82050[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@5:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T82050[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Xlen
PUBLIC	??$?0UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T82062 = -24						; size = 4
$T82061 = -20						; size = 4
$T82060 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T82062[ebp], eax
	mov	ecx, DWORD PTR $T82062[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T82061[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T82061[ebp], 0
	je	SHORT $LN3@Container_@5
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T82061[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@5
$LN3@Container_@5:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@5:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T82060[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T82060[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T82062[ebp]
	push	eax
	mov	ecx, DWORD PTR $T82061[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@XZ PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@XZ ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::allocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@8
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@8
$LN3@capacity@8:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 5
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@8:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::capacity
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::max_size
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::erase
PUBLIC	?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::begin
PUBLIC	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T82091 = -40						; size = 8
$T82090 = -32						; size = 8
$T82089 = -24						; size = 8
$T82088 = -16						; size = 8
$T82087 = -8						; size = 8
?clear@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T82088[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82087[ebp], ecx
	mov	DWORD PTR $T82087[ebp+4], edx
	lea	eax, DWORD PTR $T82090[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82089[ebp], ecx
	mov	DWORD PTR $T82089[ebp+4], edx
	mov	eax, DWORD PTR $T82087[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T82087[ebp]
	push	ecx
	mov	edx, DWORD PTR $T82089[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82089[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82091[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::clear
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Destroy
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T82097 = -80						; size = 28
$T82096 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T82097[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T82097[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82096[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T82096[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T82097[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@6:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T82097[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Xlen
PUBLIC	??$?0UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T82109 = -24						; size = 4
$T82108 = -20						; size = 4
$T82107 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T82109[ebp], eax
	mov	ecx, DWORD PTR $T82109[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T82108[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T82108[ebp], 0
	je	SHORT $LN3@Container_@6
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T82108[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@6
$LN3@Container_@6:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@6:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T82107[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T82107[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T82109[ebp]
	push	eax
	mov	ecx, DWORD PTR $T82108[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@XZ PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAE@XZ ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::allocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@9
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@9
$LN3@capacity@9:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@9:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::capacity
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::max_size
_TEXT	ENDS
PUBLIC	?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::erase
PUBLIC	?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::begin
PUBLIC	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T82138 = -40						; size = 8
$T82137 = -32						; size = 8
$T82136 = -24						; size = 8
$T82135 = -16						; size = 8
$T82134 = -8						; size = 8
?clear@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T82135[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82134[ebp], ecx
	mov	DWORD PTR $T82134[ebp+4], edx
	lea	eax, DWORD PTR $T82137[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82136[ebp], ecx
	mov	DWORD PTR $T82136[ebp+4], edx
	mov	eax, DWORD PTR $T82134[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T82134[ebp]
	push	ecx
	mov	edx, DWORD PTR $T82136[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82136[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82138[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::clear
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T82144 = -80						; size = 28
$T82143 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T82144[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T82144[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82143[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T82143[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T82144[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@7:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T82144[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Xlen
PUBLIC	??$?0UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::KEYFRAME_T>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T82156 = -24						; size = 4
$T82155 = -20						; size = 4
$T82154 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::KEYFRAME_T>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T82156[ebp], eax
	mov	ecx, DWORD PTR $T82156[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T82155[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T82155[ebp], 0
	je	SHORT $LN3@Container_@7
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T82155[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@7
$LN3@Container_@7:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@7:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T82154[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T82154[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T82156[ebp]
	push	eax
	mov	ecx, DWORD PTR $T82155[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ PROC ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ ENDP ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<float>::KEYFRAME_T>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@10
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@10
$LN3@capacity@10:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@10:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::capacity
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::max_size
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::erase
PUBLIC	?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::begin
PUBLIC	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T82185 = -40						; size = 8
$T82184 = -32						; size = 8
$T82183 = -24						; size = 8
$T82182 = -16						; size = 8
$T82181 = -8						; size = 8
?clear@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T82182[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82181[ebp], ecx
	mov	DWORD PTR $T82181[ebp+4], edx
	lea	eax, DWORD PTR $T82184[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82183[ebp], ecx
	mov	DWORD PTR $T82183[ebp+4], edx
	mov	eax, DWORD PTR $T82181[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T82181[ebp]
	push	ecx
	mov	edx, DWORD PTR $T82183[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82183[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82185[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::clear
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T82191 = -80						; size = 28
$T82190 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T82191[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T82191[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82190[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T82190[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T82191[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@8:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T82191[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Xlen
PUBLIC	??$?0UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T82203 = -24						; size = 4
$T82202 = -20						; size = 4
$T82201 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::CONTROL_POINT_T>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T82203[ebp], eax
	mov	ecx, DWORD PTR $T82203[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T82202[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T82202[ebp], 0
	je	SHORT $LN3@Container_@8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T82202[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@8
$LN3@Container_@8:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@8:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T82201[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T82201[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T82203[ebp]
	push	eax
	mov	ecx, DWORD PTR $T82202[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ PROC ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ ENDP ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<char,std::allocator<char> >::_Vector_iterator<char,std::allocator<char> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ PROC ; std::vector<char,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<char,std::allocator<char> >::_Vector_iterator<char,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ ENDP ; std::vector<char,std::allocator<char> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ PROC ; std::vector<char,std::allocator<char> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<char,std::allocator<char> >::_Vector_iterator<char,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ ENDP ; std::vector<char,std::allocator<char> >::end
_TEXT	ENDS
EXTRN	__imp_?max_size@?$allocator@D@std@@QBEIXZ:PROC
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC ; std::vector<char,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?max_size@?$allocator@D@std@@QBEIXZ

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::vector<char,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<char,std::allocator<char> >::operator!=
PUBLIC	?_Make_iter@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@@Z ; std::vector<char,std::allocator<char> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$68966 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@0@Z PROC ; std::vector<char,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@@Z ; std::vector<char,std::allocator<char> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@@Z ; std::vector<char,std::allocator<char> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<char,std::allocator<char> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@4

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PADPAD@stdext@@YAPADPAD00@Z ; stdext::unchecked_copy<char *,char *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$68966[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$68966[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$68966[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@4:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@0@Z ENDP ; std::vector<char,std::allocator<char> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T82231 = -80						; size = 28
$T82230 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ PROC	; std::vector<char,std::allocator<char> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T82231[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T82231[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82230[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T82230[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T82231[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@9:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T82231[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ ENDP	; std::vector<char,std::allocator<char> >::_Xlen
PUBLIC	??$?0D@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><char>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T82243 = -24						; size = 4
$T82242 = -20						; size = 4
$T82241 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<char> >::_Container_base_aux_alloc_real<std::allocator<char> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0D@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><char>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T82243[ebp], eax
	mov	ecx, DWORD PTR $T82243[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T82242[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T82242[ebp], 0
	je	SHORT $LN3@Container_@9
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T82242[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@9
$LN3@Container_@9:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@9:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T82241[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T82241[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z$1:
	mov	eax, DWORD PTR $T82243[ebp]
	push	eax
	mov	ecx, DWORD PTR $T82242[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<char> >::_Container_base_aux_alloc_real<std::allocator<char> >
PUBLIC	??0?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@PAPAVSurfaceData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@PAPAVSurfaceData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@PAPAVSurfaceData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVSurfaceData@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::SurfaceData *>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@PAVSurfaceData@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::SurfaceData *>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::operator!=
PUBLIC	?_Make_iter@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$69002 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@5

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAPAVSurfaceData@Ogre@@PAPAV12@@stdext@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::SurfaceData * *,Ogre::SurfaceData * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$69002[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$69002[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEXPAPAVSurfaceData@Ogre@@0@Z ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$69002[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@5:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T82265 = -80						; size = 28
$T82264 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T82265[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T82265[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82264[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T82264[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T82265[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@10:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T82265[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Xlen
PUBLIC	??$?0PAVSurfaceData@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVSurfaceData@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SurfaceData *>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T82277 = -24						; size = 4
$T82276 = -20						; size = 4
$T82275 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0PAVSurfaceData@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVSurfaceData@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SurfaceData *>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T82277[ebp], eax
	mov	ecx, DWORD PTR $T82277[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T82276[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T82276[ebp], 0
	je	SHORT $LN3@Container_@10
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T82276[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@10
$LN3@Container_@10:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@10:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T82275[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T82275[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T82277[ebp]
	push	eax
	mov	ecx, DWORD PTR $T82276[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAE@V?$allocator@PAVSurfaceData@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SurfaceData *> >
PUBLIC	??$_Allocate@PAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::SurfaceData *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVSurfaceData@Ogre@@@std@@QAEPAPAVSurfaceData@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVSurfaceData@Ogre@@@std@@QAEPAPAVSurfaceData@Ogre@@I@Z PROC ; std::allocator<Ogre::SurfaceData *>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::SurfaceData *>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVSurfaceData@Ogre@@@std@@QAEPAPAVSurfaceData@Ogre@@I@Z ENDP ; std::allocator<Ogre::SurfaceData *>::allocate
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
PUBLIC	??0?$_Ranit@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ; std::_Ranit<Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &>::_Ranit<Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU123@ABU123@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con
$LN1@Vector_con:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 452  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 454  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	??0?$_Ranit@VVector2@Ogre@@HPBV12@ABV12@@std@@QAE@XZ ; std::_Ranit<Ogre::Vector2,int,Ogre::Vector2 const *,Ogre::Vector2 const &>::_Ranit<Ogre::Vector2,int,Ogre::Vector2 const *,Ogre::Vector2 const &>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@PAVVector2@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@PAVVector2@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@VVector2@Ogre@@HPBV12@ABV12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@2
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@2
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@2
$LN1@Vector_con@2:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@2:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@PAVVector2@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@MHPBMABM@std@@QAE@XZ		; std::_Ranit<float,int,float const *,float const &>::_Ranit<float,int,float const *,float const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::_Vector_const_iterator<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@MHPBMABM@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@3
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@3
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@3
$LN1@Vector_con@3:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@3:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::_Vector_const_iterator<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@HHPBHABH@std@@QAE@XZ		; std::_Ranit<int,int,int const *,int const &>::_Ranit<int,int,int const *,int const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@HHPBHABH@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@4
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@4
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@4
$LN1@Vector_con@4:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@4:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ; std::_Ranit<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const &>::_Ranit<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@5
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@5
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@5
$LN1@Vector_con@5:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@5:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ; std::_Ranit<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const &>::_Ranit<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@6
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@6
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@6
$LN1@Vector_con@6:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@6:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ; std::_Ranit<Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &>::_Ranit<Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@7
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@7
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@7
$LN1@Vector_con@7:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@7:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ; std::_Ranit<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &>::_Ranit<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@8
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@8
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@8
$LN1@Vector_con@8:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@8:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@DHPBDABD@std@@QAE@XZ		; std::_Ranit<char,int,char const *,char const &>::_Ranit<char,int,char const *,char const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<char,std::allocator<char> >::_Vector_const_iterator<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@DHPBDABD@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@9
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@9
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@9
$LN1@Vector_con@9:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@9:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<char,std::allocator<char> >::_Vector_const_iterator<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@PAVSurfaceData@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ; std::_Ranit<Ogre::SurfaceData *,int,Ogre::SurfaceData * const *,Ogre::SurfaceData * const &>::_Ranit<Ogre::SurfaceData *,int,Ogre::SurfaceData * const *,Ogre::SurfaceData * const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@PAPAVSurfaceData@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@PAPAVSurfaceData@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@PAVSurfaceData@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@10
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@10
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@10
$LN1@Vector_con@10:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@10:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@PAPAVSurfaceData@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU123@ABU123@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU123@ABU123@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &>::_Ranit<Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &>::_Ranit<Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VVector2@Ogre@@HPBV34@ABV34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Vector2,int,Ogre::Vector2 const *,Ogre::Vector2 const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Vector2,int,Ogre::Vector2 const *,Ogre::Vector2 const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@VVector2@Ogre@@HPBV12@ABV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@VVector2@Ogre@@HPBV12@ABV12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::Vector2,int,Ogre::Vector2 const *,Ogre::Vector2 const &>::_Ranit<Ogre::Vector2,int,Ogre::Vector2 const *,Ogre::Vector2 const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VVector2@Ogre@@HPBV34@ABV34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@VVector2@Ogre@@HPBV12@ABV12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::Vector2,int,Ogre::Vector2 const *,Ogre::Vector2 const &>::_Ranit<Ogre::Vector2,int,Ogre::Vector2 const *,Ogre::Vector2 const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@MHPBMABM@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@MHPBMABM@std@@QAE@XZ PROC			; std::_Ranit<float,int,float const *,float const &>::_Ranit<float,int,float const *,float const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@MHPBMABM@std@@QAE@XZ ENDP			; std::_Ranit<float,int,float const *,float const &>::_Ranit<float,int,float const *,float const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@HHPBHABH@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@HHPBHABH@std@@QAE@XZ PROC			; std::_Ranit<int,int,int const *,int const &>::_Ranit<int,int,int const *,int const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@HHPBHABH@std@@QAE@XZ ENDP			; std::_Ranit<int,int,int const *,int const &>::_Ranit<int,int,int const *,int const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const &>::_Ranit<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const &>::_Ranit<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const &>::_Ranit<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const &>::_Ranit<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &>::_Ranit<Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &>::_Ranit<Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &>::_Ranit<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &>::_Ranit<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@DHPBDABDV_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@DHPBDABD@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@DHPBDABD@std@@QAE@XZ PROC			; std::_Ranit<char,int,char const *,char const &>::_Ranit<char,int,char const *,char const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@DHPBDABDV_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@DHPBDABD@std@@QAE@XZ ENDP			; std::_Ranit<char,int,char const *,char const &>::_Ranit<char,int,char const *,char const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVSurfaceData@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SurfaceData *,int,Ogre::SurfaceData * const *,Ogre::SurfaceData * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SurfaceData *,int,Ogre::SurfaceData * const *,Ogre::SurfaceData * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@PAVSurfaceData@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@PAVSurfaceData@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::SurfaceData *,int,Ogre::SurfaceData * const *,Ogre::SurfaceData * const &>::_Ranit<Ogre::SurfaceData *,int,Ogre::SurfaceData * const *,Ogre::SurfaceData * const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVSurfaceData@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@PAVSurfaceData@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::SurfaceData *,int,Ogre::SurfaceData * const *,Ogre::SurfaceData * const &>::_Ranit<Ogre::SurfaceData *,int,Ogre::SurfaceData * const *,Ogre::SurfaceData * const &>
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VVector2@Ogre@@HPBV34@ABV34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VVector2@Ogre@@HPBV34@ABV34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Vector2,int,Ogre::Vector2 const *,Ogre::Vector2 const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Vector2,int,Ogre::Vector2 const *,Ogre::Vector2 const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VVector2@Ogre@@HPBV34@ABV34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Vector2,int,Ogre::Vector2 const *,Ogre::Vector2 const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::Vector2,int,Ogre::Vector2 const *,Ogre::Vector2 const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@DHPBDABDV_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@DHPBDABDV_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@DHPBDABDV_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVSurfaceData@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVSurfaceData@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SurfaceData *,int,Ogre::SurfaceData * const *,Ogre::SurfaceData * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SurfaceData *,int,Ogre::SurfaceData * const *,Ogre::SurfaceData * const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVSurfaceData@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SurfaceData *,int,Ogre::SurfaceData * const *,Ogre::SurfaceData * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SurfaceData *,int,Ogre::SurfaceData * const *,Ogre::SurfaceData * const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::end
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator!=
PUBLIC	?_Make_iter@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$69287 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@6

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$69287[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$69287[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$69287[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@6:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::erase
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@PAVVector2@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@VVector2@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@VVector2@Ogre@@@std@@QBEIXZ PROC	; std::allocator<Ogre::Vector2>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@2
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@2
$LN3@max_size@2:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@VVector2@Ogre@@@std@@QBEIXZ ENDP	; std::allocator<Ogre::Vector2>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z PROC ; std::vector<float,std::allocator<float> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z ENDP ; std::vector<float,std::allocator<float> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@M@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@M@std@@QBEIXZ PROC		; std::allocator<float>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@3
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@3
$LN3@max_size@3:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@3:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@M@std@@QBEIXZ ENDP		; std::allocator<float>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z PROC ; std::vector<int,std::allocator<int> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z ENDP ; std::vector<int,std::allocator<int> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@4
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@4
$LN3@max_size@4:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@4:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::end
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator!=
PUBLIC	?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$69344 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@7

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$69344[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$69344[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$69344[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@7:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::erase
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 214748364	; 0cccccccH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@5
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@5
$LN3@max_size@5:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@5:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::end
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator!=
PUBLIC	?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$69366 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@8

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$69366[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$69366[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$69366[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@8:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::erase
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 134217727	; 07ffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@6
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@6
$LN3@max_size@6:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@6:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::end
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator!=
PUBLIC	?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$69388 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@9

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$69388[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$69388[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$69388[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@9:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::erase
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@7
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@7
$LN3@max_size@7:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@7:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::end
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator!=
PUBLIC	?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$69410 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@10

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$69410[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$69410[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$69410[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@10:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::erase
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@8
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@8
$LN3@max_size@8:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@8:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@@Z PROC ; std::vector<char,std::allocator<char> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<char,std::allocator<char> >::_Vector_iterator<char,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@@Z ENDP ; std::vector<char,std::allocator<char> >::_Make_iter
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@PAPAVSurfaceData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAVSurfaceData@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@PAVSurfaceData@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::SurfaceData *>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@9
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@9
$LN3@max_size@9:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@9:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVSurfaceData@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::SurfaceData *>::max_size
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator==
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<char,std::allocator<char> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<char,std::allocator<char> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<char,std::allocator<char> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<char,std::allocator<char> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::operator!=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@PAVVector2@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@PAVVector2@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@PAVVector2@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE@PAVVector2@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::_Vector_const_iterator<float,std::allocator<float> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<char,std::allocator<char> >::_Vector_iterator<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<char,std::allocator<char> >::_Vector_const_iterator<char,std::allocator<char> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<char,std::allocator<char> >::_Vector_iterator<char,std::allocator<char> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@PAPAVSurfaceData@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@PAPAVSurfaceData@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@PAPAVSurfaceData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QAE@PAPAVSurfaceData@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Vector_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Make_iter
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Make_iter
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Make_iter
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Make_iter
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Make_iter
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator!=
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Odtp
;	COMDAT ??8?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@21
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@21
$LN1@operator@21:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@21:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator==
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 462  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 463  : 		return _Myaux == _Other._Myaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Other$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al

; 464  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 467  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 468  : 		return _Myaux != 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	mov	al, cl

; 469  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@22
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@22
$LN1@operator@22:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@22:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@23
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@23
$LN1@operator@23:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@23:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator==
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator!=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<char,std::allocator<char> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@24
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@24
$LN1@operator@24:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@24:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<char,std::allocator<char> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@25
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@25
$LN1@operator@25:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@25:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@26
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@26
$LN1@operator@26:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@26:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@27
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@27
$LN1@operator@27:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@27:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@28
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@28
$LN1@operator@28:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@28:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@29
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@29
$LN1@operator@29:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@29:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@30
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@30
$LN1@operator@30:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@30:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator==
_TEXT	ENDS
PUBLIC	?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrearchive.h
;	COMDAT ??$serializeRawArray@UAnimRange@BaseKeyFrameArray@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$serializeRawArray@UAnimRange@BaseKeyFrameArray@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@Z PROC ; Ogre::Archive::serializeRawArray<Ogre::BaseKeyFrameArray::AnimRange>, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			uint num;
; 123  : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@serializeR

; 124  : 			{
; 125  : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 126  : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize

; 127  : 				if(num > 0) read(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN3@serializeR
	mov	eax, DWORD PTR _num$[ebp]
	shl	eax, 3
	push	eax
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read
$LN3@serializeR:

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN2@serializeR
$LN4@serializeR:

; 130  : 			{
; 131  : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	mov	DWORD PTR _num$[ebp], eax

; 132  : 				write(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 133  : 				if(num > 0) write(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN2@serializeR
	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 3
	push	edx
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write
$LN2@serializeR:

; 134  : 			}
; 135  : 
; 136  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawArray@UAnimRange@BaseKeyFrameArray@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@Z ENDP ; Ogre::Archive::serializeRawArray<Ogre::BaseKeyFrameArray::AnimRange>
_TEXT	ENDS
PUBLIC	??A?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAVVector2@Ogre@@I@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator[]
PUBLIC	?resize@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::resize
; Function compile flags: /Odtp
;	COMDAT ??$serializeRawArray@VVector2@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$serializeRawArray@VVector2@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@Z PROC ; Ogre::Archive::serializeRawArray<Ogre::Vector2>, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			uint num;
; 123  : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@serializeR@2

; 124  : 			{
; 125  : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 126  : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::resize

; 127  : 				if(num > 0) read(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN3@serializeR@2
	mov	eax, DWORD PTR _num$[ebp]
	shl	eax, 3
	push	eax
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAVVector2@Ogre@@I@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read
$LN3@serializeR@2:

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN2@serializeR@2
$LN4@serializeR@2:

; 130  : 			{
; 131  : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	mov	DWORD PTR _num$[ebp], eax

; 132  : 				write(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 133  : 				if(num > 0) write(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN2@serializeR@2
	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 3
	push	edx
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAVVector2@Ogre@@I@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write
$LN2@serializeR@2:

; 134  : 			}
; 135  : 
; 136  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawArray@VVector2@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@Z ENDP ; Ogre::Archive::serializeRawArray<Ogre::Vector2>
_TEXT	ENDS
PUBLIC	??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z ; std::vector<float,std::allocator<float> >::operator[]
PUBLIC	?resize@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::resize
; Function compile flags: /Odtp
;	COMDAT ??$serializeRawArray@M@Archive@Ogre@@QAEAAV01@AAV?$vector@MV?$allocator@M@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$serializeRawArray@M@Archive@Ogre@@QAEAAV01@AAV?$vector@MV?$allocator@M@std@@@std@@@Z PROC ; Ogre::Archive::serializeRawArray<float>, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			uint num;
; 123  : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@serializeR@3

; 124  : 			{
; 125  : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 126  : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::resize

; 127  : 				if(num > 0) read(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN3@serializeR@3
	mov	eax, DWORD PTR _num$[ebp]
	shl	eax, 2
	push	eax
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z ; std::vector<float,std::allocator<float> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read
$LN3@serializeR@3:

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN2@serializeR@3
$LN4@serializeR@3:

; 130  : 			{
; 131  : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	mov	DWORD PTR _num$[ebp], eax

; 132  : 				write(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 133  : 				if(num > 0) write(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN2@serializeR@3
	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 2
	push	edx
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z ; std::vector<float,std::allocator<float> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write
$LN2@serializeR@3:

; 134  : 			}
; 135  : 
; 136  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawArray@M@Archive@Ogre@@QAEAAV01@AAV?$vector@MV?$allocator@M@std@@@std@@@Z ENDP ; Ogre::Archive::serializeRawArray<float>
_TEXT	ENDS
PUBLIC	?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::resize
; Function compile flags: /Odtp
;	COMDAT ??$serializeRawArray@H@Archive@Ogre@@QAEAAV01@AAV?$vector@HV?$allocator@H@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$serializeRawArray@H@Archive@Ogre@@QAEAAV01@AAV?$vector@HV?$allocator@H@std@@@std@@@Z PROC ; Ogre::Archive::serializeRawArray<int>, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			uint num;
; 123  : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@serializeR@4

; 124  : 			{
; 125  : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 126  : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::resize

; 127  : 				if(num > 0) read(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN3@serializeR@4
	mov	eax, DWORD PTR _num$[ebp]
	shl	eax, 2
	push	eax
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read
$LN3@serializeR@4:

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN2@serializeR@4
$LN4@serializeR@4:

; 130  : 			{
; 131  : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	DWORD PTR _num$[ebp], eax

; 132  : 				write(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 133  : 				if(num > 0) write(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN2@serializeR@4
	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 2
	push	edx
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write
$LN2@serializeR@4:

; 134  : 			}
; 135  : 
; 136  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawArray@H@Archive@Ogre@@QAEAAV01@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ENDP ; Ogre::Archive::serializeRawArray<int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$serializeRawType@VRibbonDesc@Ogre@@@Archive@Ogre@@QAEXAAVRibbonDesc@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??$serializeRawType@VRibbonDesc@Ogre@@@Archive@Ogre@@QAEXAAVRibbonDesc@1@@Z PROC ; Ogre::Archive::serializeRawType<Ogre::RibbonDesc>, COMDAT
; _this$ = ecx

; 97   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 			serialize(&value, sizeof(T));

	push	16					; 00000010H
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize

; 99   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawType@VRibbonDesc@Ogre@@@Archive@Ogre@@QAEXAAVRibbonDesc@1@@Z ENDP ; Ogre::Archive::serializeRawType<Ogre::RibbonDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$serializeRawType@VRibbonDescEx@Ogre@@@Archive@Ogre@@QAEXAAVRibbonDescEx@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??$serializeRawType@VRibbonDescEx@Ogre@@@Archive@Ogre@@QAEXAAVRibbonDescEx@1@@Z PROC ; Ogre::Archive::serializeRawType<Ogre::RibbonDescEx>, COMDAT
; _this$ = ecx

; 97   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 			serialize(&value, sizeof(T));

	push	28					; 0000001cH
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize

; 99   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawType@VRibbonDescEx@Ogre@@@Archive@Ogre@@QAEXAAVRibbonDescEx@1@@Z ENDP ; Ogre::Archive::serializeRawType<Ogre::RibbonDescEx>
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
_TEXT	ENDS
;	COMDAT ??$?6VColourValue@Ogre@@@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@VColourValue@Ogre@@@0@@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_frames$ = 12						; size = 4
??$?6VColourValue@Ogre@@@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@VColourValue@Ogre@@@0@@Z PROC ; Ogre::operator<<<Ogre::ColourValue>, COMDAT

; 296  : 	{

	push	ebp
	mov	ebp, esp

; 297  : 		frames._serialize(ar, 100);

	push	100					; 00000064H
	mov	eax, DWORD PTR _ar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frames$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _frames$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 298  : 		return ar;

	mov	eax, DWORD PTR _ar$[ebp]

; 299  : 	}

	pop	ebp
	ret	0
??$?6VColourValue@Ogre@@@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@VColourValue@Ogre@@@0@@Z ENDP ; Ogre::operator<<<Ogre::ColourValue>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_frames$ = 12						; size = 4
??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z PROC ; Ogre::operator<<<float>, COMDAT

; 296  : 	{

	push	ebp
	mov	ebp, esp

; 297  : 		frames._serialize(ar, 100);

	push	100					; 00000064H
	mov	eax, DWORD PTR _ar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frames$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _frames$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 298  : 		return ar;

	mov	eax, DWORD PTR _ar$[ebp]

; 299  : 	}

	pop	ebp
	ret	0
??$?6M@Ogre@@YAAAVArchive@0@AAV10@AAV?$KeyFrameArray@M@0@@Z ENDP ; Ogre::operator<<<float>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@PAUAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@2@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@1@0PAU234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@1@0PAU234@@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ucopy<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@PAUAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@2@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@1@0PAU234@@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ucopy<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> > >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@PAVVector2@Ogre@@V?$allocator@VVector2@Ogre@@@2@@stdext@@YAPAVVector2@Ogre@@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@0PAV12@AAV?$allocator@VVector2@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@1@0PAV23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@1@0PAV23@@Z PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Ucopy<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@PAVVector2@Ogre@@V?$allocator@VVector2@Ogre@@@2@@stdext@@YAPAVVector2@Ogre@@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@0PAV12@AAV?$allocator@VVector2@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@1@0PAV23@@Z ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Ucopy<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAVVector2@Ogre@@PAV12@@std@@YAPAVVector2@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::Vector2 *,Ogre::Vector2 *>
PUBLIC	??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Vector2 *>
PUBLIC	??$_Iter_random@PAVVector2@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVVector2@Ogre@@0@Z ; std::_Iter_random<Ogre::Vector2 *,Ogre::Vector2 *>
PUBLIC	??$_Ptr_cat@PAVVector2@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVVector2@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Vector2 *,Ogre::Vector2 *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAVVector2@Ogre@@PAV12@@stdext@@YAPAVVector2@Ogre@@PAV12@00@Z
_TEXT	SEGMENT
$T82539 = -3						; size = 1
$T82538 = -2						; size = 1
$T82537 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAVVector2@Ogre@@PAV12@@stdext@@YAPAVVector2@Ogre@@PAV12@00@Z PROC ; stdext::unchecked_copy<Ogre::Vector2 *,Ogre::Vector2 *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T82537[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAVVector2@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVVector2@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Vector2 *,Ogre::Vector2 *>
	add	esp, 8
	mov	BYTE PTR $T82538[ebp], al
	movzx	eax, BYTE PTR $T82537[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T82538[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82539[ebp]
	push	ecx
	call	??$_Iter_random@PAVVector2@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVVector2@Ogre@@0@Z ; std::_Iter_random<Ogre::Vector2 *,Ogre::Vector2 *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Vector2 *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Vector2 *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAVVector2@Ogre@@PAV12@@std@@YAPAVVector2@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::Vector2 *,Ogre::Vector2 *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAVVector2@Ogre@@PAV12@@stdext@@YAPAVVector2@Ogre@@PAV12@00@Z ENDP ; stdext::unchecked_copy<Ogre::Vector2 *,Ogre::Vector2 *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAVVector2@Ogre@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAVVector2@Ogre@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV23@00@Z PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Ucopy<Ogre::Vector2 *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAVVector2@Ogre@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV23@00@Z ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Ucopy<Ogre::Vector2 *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@PAMV?$allocator@M@2@@stdext@@YAPAMV?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@0PAMAAV?$allocator@M@2@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<float,std::allocator<float> >,float *,std::allocator<float> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@@?$vector@MV?$allocator@M@std@@@std@@IAEPAMV?$_Vector_const_iterator@MV?$allocator@M@std@@@1@0PAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@@?$vector@MV?$allocator@M@std@@@std@@IAEPAMV?$_Vector_const_iterator@MV?$allocator@M@std@@@1@0PAM@Z PROC ; std::vector<float,std::allocator<float> >::_Ucopy<std::_Vector_const_iterator<float,std::allocator<float> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@PAMV?$allocator@M@2@@stdext@@YAPAMV?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@0PAMAAV?$allocator@M@2@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<float,std::allocator<float> >,float *,std::allocator<float> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@@?$vector@MV?$allocator@M@std@@@std@@IAEPAMV?$_Vector_const_iterator@MV?$allocator@M@std@@@1@0PAM@Z ENDP ; std::vector<float,std::allocator<float> >::_Ucopy<std::_Vector_const_iterator<float,std::allocator<float> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<float *,float *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z		; std::_Checked_base<float *>
PUBLIC	??$_Iter_random@PAMPAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM0@Z ; std::_Iter_random<float *,float *>
PUBLIC	??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z ; std::_Ptr_cat<float *,float *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAMPAM@stdext@@YAPAMPAM00@Z
_TEXT	SEGMENT
$T82548 = -3						; size = 1
$T82547 = -2						; size = 1
$T82546 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAMPAM@stdext@@YAPAMPAM00@Z PROC	; stdext::unchecked_copy<float *,float *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T82546[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z ; std::_Ptr_cat<float *,float *>
	add	esp, 8
	mov	BYTE PTR $T82547[ebp], al
	movzx	eax, BYTE PTR $T82546[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T82547[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82548[ebp]
	push	ecx
	call	??$_Iter_random@PAMPAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM0@Z ; std::_Iter_random<float *,float *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<float *,float *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAMPAM@stdext@@YAPAMPAM00@Z ENDP	; stdext::unchecked_copy<float *,float *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z ; stdext::unchecked_uninitialized_copy<float *,float *,std::allocator<float> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z PROC ; std::vector<float,std::allocator<float> >::_Ucopy<float *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z ; stdext::unchecked_uninitialized_copy<float *,float *,std::allocator<float> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ENDP ; std::vector<float,std::allocator<float> >::_Ucopy<float *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@PAHV?$allocator@H@2@@stdext@@YAPAHV?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@0PAHAAV?$allocator@H@2@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<int,std::allocator<int> >,int *,std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@@?$vector@HV?$allocator@H@std@@@std@@IAEPAHV?$_Vector_const_iterator@HV?$allocator@H@std@@@1@0PAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@@?$vector@HV?$allocator@H@std@@@std@@IAEPAHV?$_Vector_const_iterator@HV?$allocator@H@std@@@1@0PAH@Z PROC ; std::vector<int,std::allocator<int> >::_Ucopy<std::_Vector_const_iterator<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@PAHV?$allocator@H@2@@stdext@@YAPAHV?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@0PAHAAV?$allocator@H@2@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<int,std::allocator<int> >,int *,std::allocator<int> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@@?$vector@HV?$allocator@H@std@@@std@@IAEPAHV?$_Vector_const_iterator@HV?$allocator@H@std@@@1@0PAH@Z ENDP ; std::vector<int,std::allocator<int> >::_Ucopy<std::_Vector_const_iterator<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<int *,int *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z		; std::_Checked_base<int *>
PUBLIC	??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z ; std::_Iter_random<int *,int *>
PUBLIC	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T82557 = -3						; size = 1
$T82556 = -2						; size = 1
$T82555 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z PROC	; stdext::unchecked_copy<int *,int *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T82555[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
	add	esp, 8
	mov	BYTE PTR $T82556[ebp], al
	movzx	eax, BYTE PTR $T82555[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T82556[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82557[ebp]
	push	ecx
	call	??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z ; std::_Iter_random<int *,int *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<int *,int *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ENDP	; stdext::unchecked_copy<int *,int *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Ucopy<int *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Ucopy<int *>
_TEXT	ENDS
PUBLIC	?Lerp@Ogre@@YA?AVColourValue@1@ABV21@0M@Z	; Ogre::Lerp
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
;	COMDAT ??$KEYFRAME_LERP@VColourValue@Ogre@@@Ogre@@YAXAAVColourValue@0@MABV10@1@Z
_TEXT	SEGMENT
$T82562 = -16						; size = 16
_dest$ = 8						; size = 4
_t$ = 12						; size = 4
_src1$ = 16						; size = 4
_src2$ = 20						; size = 4
??$KEYFRAME_LERP@VColourValue@Ogre@@@Ogre@@YAXAAVColourValue@0@MABV10@1@Z PROC ; Ogre::KEYFRAME_LERP<Ogre::ColourValue>, COMDAT

; 24   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 25   : 		dest = Lerp(src1, src2, t);

	push	ecx
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _src2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src1$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T82562[ebp]
	push	edx
	call	?Lerp@Ogre@@YA?AVColourValue@1@ABV21@0M@Z ; Ogre::Lerp
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 26   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$KEYFRAME_LERP@VColourValue@Ogre@@@Ogre@@YAXAAVColourValue@0@MABV10@1@Z ENDP ; Ogre::KEYFRAME_LERP<Ogre::ColourValue>
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrecolourvalue.h
_TEXT	ENDS
;	COMDAT ?Lerp@Ogre@@YA?AVColourValue@1@ABV21@0M@Z
_TEXT	SEGMENT
tv165 = -16						; size = 4
tv160 = -12						; size = 4
tv155 = -8						; size = 4
tv150 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_t$ = 20						; size = 4
?Lerp@Ogre@@YA?AVColourValue@1@ABV21@0M@Z PROC		; Ogre::Lerp, COMDAT

; 323  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 324  : 		return ColourValue(v1.r+(v2.r-v1.r)*t, v1.g+(v2.g-v1.g)*t,v1.b+(v2.b-v1.b)*t, v1.a+(v2.a-v1.a)*t);

	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _v1$[ebp]
	fsub	DWORD PTR [ecx+12]
	fmul	DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx+12]
	fstp	DWORD PTR tv150[ebp]
	fld	DWORD PTR tv150[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v1$[ebp]
	fsub	DWORD PTR [ecx+8]
	fmul	DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx+8]
	fstp	DWORD PTR tv155[ebp]
	fld	DWORD PTR tv155[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _v1$[ebp]
	fsub	DWORD PTR [ecx+4]
	fmul	DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx+4]
	fstp	DWORD PTR tv160[ebp]
	fld	DWORD PTR tv160[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v1$[ebp]
	fsub	DWORD PTR [ecx]
	fmul	DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR tv165[ebp]
	fld	DWORD PTR tv165[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 325  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@Ogre@@YA?AVColourValue@1@ABV21@0M@Z ENDP		; Ogre::Lerp
_TEXT	ENDS
PUBLIC	__real@c000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4000000000000000
;	COMDAT __real@c000000000000000
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??$KEYFRAME_HERMITE@VColourValue@Ogre@@@Ogre@@YAXAAVColourValue@0@MABV10@111@Z
_TEXT	SEGMENT
$T82573 = -128						; size = 16
$T82572 = -112						; size = 16
$T82571 = -96						; size = 16
$T82570 = -80						; size = 16
$T82569 = -64						; size = 16
$T82568 = -48						; size = 16
$T82567 = -32						; size = 16
_h3$ = -16						; size = 4
_h4$ = -12						; size = 4
_h1$ = -8						; size = 4
_h2$ = -4						; size = 4
_dest$ = 8						; size = 4
_r$ = 12						; size = 4
_v1$ = 16						; size = 4
_v2$ = 20						; size = 4
_in$ = 24						; size = 4
_out$ = 28						; size = 4
??$KEYFRAME_HERMITE@VColourValue@Ogre@@@Ogre@@YAXAAVColourValue@0@MABV10@111@Z PROC ; Ogre::KEYFRAME_HERMITE<Ogre::ColourValue>, COMDAT

; 35   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H

; 36   : 		// basis functions
; 37   : 		float h1 = 2.0f*r*r*r - 3.0f*r*r + 1.0f;

	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fmul	DWORD PTR _r$[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR _h1$[ebp]

; 38   : 		float h2 = -2.0f*r*r*r + 3.0f*r*r;

	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fmul	DWORD PTR _r$[ebp]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _h2$[ebp]

; 39   : 		float h3 = r*r*r - 2.0f*r*r + r;

	fld	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fmul	DWORD PTR _r$[ebp]
	fsubp	ST(1), ST(0)
	fadd	DWORD PTR _r$[ebp]
	fstp	DWORD PTR _h3$[ebp]

; 40   : 		float h4 = r*r*r - r*r;

	fld	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _h4$[ebp]

; 41   : 
; 42   : 		// interpolation
; 43   : 		dest = v1*h1 + v2*h2 + in*h3 + out*h4;

	push	ecx
	fld	DWORD PTR _h4$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T82572[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	??DColourValue@Ogre@@QBE?AV01@M@Z	; Ogre::ColourValue::operator*
	push	eax
	lea	ecx, DWORD PTR $T82573[ebp]
	push	ecx
	push	ecx
	fld	DWORD PTR _h3$[ebp]
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR $T82570[ebp]
	push	edx
	mov	ecx, DWORD PTR _in$[ebp]
	call	??DColourValue@Ogre@@QBE?AV01@M@Z	; Ogre::ColourValue::operator*
	push	eax
	lea	eax, DWORD PTR $T82571[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _h2$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T82568[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v2$[ebp]
	call	??DColourValue@Ogre@@QBE?AV01@M@Z	; Ogre::ColourValue::operator*
	push	eax
	lea	edx, DWORD PTR $T82569[ebp]
	push	edx
	push	ecx
	fld	DWORD PTR _h1$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T82567[ebp]
	push	eax
	mov	ecx, DWORD PTR _v1$[ebp]
	call	??DColourValue@Ogre@@QBE?AV01@M@Z	; Ogre::ColourValue::operator*
	mov	ecx, eax
	call	??HColourValue@Ogre@@QBE?AV01@ABV01@@Z	; Ogre::ColourValue::operator+
	mov	ecx, eax
	call	??HColourValue@Ogre@@QBE?AV01@ABV01@@Z	; Ogre::ColourValue::operator+
	mov	ecx, eax
	call	??HColourValue@Ogre@@QBE?AV01@ABV01@@Z	; Ogre::ColourValue::operator+
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$KEYFRAME_HERMITE@VColourValue@Ogre@@@Ogre@@YAXAAVColourValue@0@MABV10@111@Z ENDP ; Ogre::KEYFRAME_HERMITE<Ogre::ColourValue>
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrearchive.h
_TEXT	ENDS
;	COMDAT ??$serializeRawType@W4InterpolType@Ogre@@@Archive@Ogre@@QAEXAAW4InterpolType@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??$serializeRawType@W4InterpolType@Ogre@@@Archive@Ogre@@QAEXAAW4InterpolType@1@@Z PROC ; Ogre::Archive::serializeRawType<enum Ogre::InterpolType>, COMDAT
; _this$ = ecx

; 97   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 			serialize(&value, sizeof(T));

	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize

; 99   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawType@W4InterpolType@Ogre@@@Archive@Ogre@@QAEXAAW4InterpolType@1@@Z ENDP ; Ogre::Archive::serializeRawType<enum Ogre::InterpolType>
_TEXT	ENDS
PUBLIC	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::resize
; Function compile flags: /Odtp
;	COMDAT ??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@Z PROC ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			uint num;
; 123  : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@serializeR@5

; 124  : 			{
; 125  : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 126  : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::resize

; 127  : 				if(num > 0) read(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN3@serializeR@5
	mov	eax, DWORD PTR _num$[ebp]
	imul	eax, 20					; 00000014H
	push	eax
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read
$LN3@serializeR@5:

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN2@serializeR@5
$LN4@serializeR@5:

; 130  : 			{
; 131  : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	mov	DWORD PTR _num$[ebp], eax

; 132  : 				write(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 133  : 				if(num > 0) write(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN2@serializeR@5
	mov	edx, DWORD PTR _num$[ebp]
	imul	edx, 20					; 00000014H
	push	edx
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write
$LN2@serializeR@5:

; 134  : 			}
; 135  : 
; 136  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@Z ENDP ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::resize
; Function compile flags: /Odtp
;	COMDAT ??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@Z PROC ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			uint num;
; 123  : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@serializeR@6

; 124  : 			{
; 125  : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 126  : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::resize

; 127  : 				if(num > 0) read(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN3@serializeR@6
	mov	eax, DWORD PTR _num$[ebp]
	shl	eax, 5
	push	eax
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read
$LN3@serializeR@6:

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN2@serializeR@6
$LN4@serializeR@6:

; 130  : 			{
; 131  : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	mov	DWORD PTR _num$[ebp], eax

; 132  : 				write(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 133  : 				if(num > 0) write(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN2@serializeR@6
	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 5
	push	edx
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write
$LN2@serializeR@6:

; 134  : 			}
; 135  : 
; 136  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@Z ENDP ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@2@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@1@0PAU234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@1@0PAU234@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@2@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@1@0PAU234@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> > >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@2@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@1@0PAU234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@1@0PAU234@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@2@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@1@0PAU234@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> > >
_TEXT	ENDS
PUBLIC	?Lerp@Ogre@@YAMMMM@Z				; Ogre::Lerp
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
;	COMDAT ??$KEYFRAME_LERP@M@Ogre@@YAXAAMMABM1@Z
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_t$ = 12						; size = 4
_src1$ = 16						; size = 4
_src2$ = 20						; size = 4
??$KEYFRAME_LERP@M@Ogre@@YAXAAMMABM1@Z PROC		; Ogre::KEYFRAME_LERP<float>, COMDAT

; 24   : 	{

	push	ebp
	mov	ebp, esp

; 25   : 		dest = Lerp(src1, src2, t);

	push	ecx
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _src2$[ebp]
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _src1$[ebp]
	push	ecx
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [esp]
	call	?Lerp@Ogre@@YAMMMM@Z			; Ogre::Lerp
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _dest$[ebp]
	fstp	DWORD PTR [edx]

; 26   : 	}

	pop	ebp
	ret	0
??$KEYFRAME_LERP@M@Ogre@@YAXAAMMABM1@Z ENDP		; Ogre::KEYFRAME_LERP<float>
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
_TEXT	ENDS
;	COMDAT ?Lerp@Ogre@@YAMMMM@Z
_TEXT	SEGMENT
tv74 = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_t$ = 16						; size = 4
?Lerp@Ogre@@YAMMMM@Z PROC				; Ogre::Lerp, COMDAT

; 135  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 136  : 		return v1+(v2-v1)*t;

	fld	DWORD PTR _v2$[ebp]
	fsub	DWORD PTR _v1$[ebp]
	fmul	DWORD PTR _t$[ebp]
	fadd	DWORD PTR _v1$[ebp]
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]

; 137  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@Ogre@@YAMMMM@Z ENDP				; Ogre::Lerp
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
_TEXT	ENDS
;	COMDAT ??$KEYFRAME_HERMITE@M@Ogre@@YAXAAMMABM111@Z
_TEXT	SEGMENT
_h3$ = -16						; size = 4
_h4$ = -12						; size = 4
_h1$ = -8						; size = 4
_h2$ = -4						; size = 4
_dest$ = 8						; size = 4
_r$ = 12						; size = 4
_v1$ = 16						; size = 4
_v2$ = 20						; size = 4
_in$ = 24						; size = 4
_out$ = 28						; size = 4
??$KEYFRAME_HERMITE@M@Ogre@@YAXAAMMABM111@Z PROC	; Ogre::KEYFRAME_HERMITE<float>, COMDAT

; 35   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 36   : 		// basis functions
; 37   : 		float h1 = 2.0f*r*r*r - 3.0f*r*r + 1.0f;

	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fmul	DWORD PTR _r$[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR _h1$[ebp]

; 38   : 		float h2 = -2.0f*r*r*r + 3.0f*r*r;

	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fmul	DWORD PTR _r$[ebp]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _h2$[ebp]

; 39   : 		float h3 = r*r*r - 2.0f*r*r + r;

	fld	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fmul	DWORD PTR _r$[ebp]
	fsubp	ST(1), ST(0)
	fadd	DWORD PTR _r$[ebp]
	fstp	DWORD PTR _h3$[ebp]

; 40   : 		float h4 = r*r*r - r*r;

	fld	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _h4$[ebp]

; 41   : 
; 42   : 		// interpolation
; 43   : 		dest = v1*h1 + v2*h2 + in*h3 + out*h4;

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR _h2$[ebp]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _in$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR _h3$[ebp]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _out$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _h4$[ebp]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _dest$[ebp]
	fstp	DWORD PTR [ecx]

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$KEYFRAME_HERMITE@M@Ogre@@YAXAAMMABM111@Z ENDP	; Ogre::KEYFRAME_HERMITE<float>
_TEXT	ENDS
PUBLIC	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrearchive.h
;	COMDAT ??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z PROC ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			uint num;
; 123  : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@serializeR@7

; 124  : 			{
; 125  : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 126  : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize

; 127  : 				if(num > 0) read(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN3@serializeR@7
	mov	eax, DWORD PTR _num$[ebp]
	shl	eax, 3
	push	eax
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read
$LN3@serializeR@7:

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN2@serializeR@7
$LN4@serializeR@7:

; 130  : 			{
; 131  : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	mov	DWORD PTR _num$[ebp], eax

; 132  : 				write(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 133  : 				if(num > 0) write(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN2@serializeR@7
	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 3
	push	edx
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write
$LN2@serializeR@7:

; 134  : 			}
; 135  : 
; 136  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z ENDP ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize
; Function compile flags: /Odtp
;	COMDAT ??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z PROC ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			uint num;
; 123  : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@serializeR@8

; 124  : 			{
; 125  : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 126  : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize

; 127  : 				if(num > 0) read(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN3@serializeR@8
	mov	eax, DWORD PTR _num$[ebp]
	shl	eax, 3
	push	eax
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read
$LN3@serializeR@8:

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN2@serializeR@8
$LN4@serializeR@8:

; 130  : 			{
; 131  : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	mov	DWORD PTR _num$[ebp], eax

; 132  : 				write(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 133  : 				if(num > 0) write(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN2@serializeR@8
	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 3
	push	edx
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write
$LN2@serializeR@8:

; 134  : 			}
; 135  : 
; 136  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z ENDP ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@2@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@1@0PAU234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@1@0PAU234@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@2@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@1@0PAU234@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> > >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@2@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@1@0PAU234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@1@0PAU234@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@2@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@1@0PAU234@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ucopy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> > >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@PADV?$allocator@D@2@@stdext@@YAPADV?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@0PADAAV?$allocator@D@2@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<char,std::allocator<char> >,char *,std::allocator<char> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@@?$vector@DV?$allocator@D@std@@@std@@IAEPADV?$_Vector_const_iterator@DV?$allocator@D@std@@@1@0PAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@@?$vector@DV?$allocator@D@std@@@std@@IAEPADV?$_Vector_const_iterator@DV?$allocator@D@std@@@1@0PAD@Z PROC ; std::vector<char,std::allocator<char> >::_Ucopy<std::_Vector_const_iterator<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@PADV?$allocator@D@2@@stdext@@YAPADV?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@0PADAAV?$allocator@D@2@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<char,std::allocator<char> >,char *,std::allocator<char> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@@?$vector@DV?$allocator@D@std@@@std@@IAEPADV?$_Vector_const_iterator@DV?$allocator@D@std@@@1@0PAD@Z ENDP ; std::vector<char,std::allocator<char> >::_Ucopy<std::_Vector_const_iterator<char,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PADPADUrandom_access_iterator_tag@std@@@std@@YAPADPAD00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<char *,char *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAD@std@@YAPADAAPAD@Z		; std::_Checked_base<char *>
PUBLIC	??$_Iter_random@PADPAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD0@Z ; std::_Iter_random<char *,char *>
PUBLIC	??$_Ptr_cat@PADPAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAD0@Z ; std::_Ptr_cat<char *,char *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PADPAD@stdext@@YAPADPAD00@Z
_TEXT	SEGMENT
$T82610 = -3						; size = 1
$T82609 = -2						; size = 1
$T82608 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PADPAD@stdext@@YAPADPAD00@Z PROC	; stdext::unchecked_copy<char *,char *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T82608[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PADPAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAD0@Z ; std::_Ptr_cat<char *,char *>
	add	esp, 8
	mov	BYTE PTR $T82609[ebp], al
	movzx	eax, BYTE PTR $T82608[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T82609[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82610[ebp]
	push	ecx
	call	??$_Iter_random@PADPAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD0@Z ; std::_Iter_random<char *,char *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAD@std@@YAPADAAPAD@Z	; std::_Checked_base<char *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAD@std@@YAPADAAPAD@Z	; std::_Checked_base<char *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PADPADUrandom_access_iterator_tag@std@@@std@@YAPADPAD00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<char *,char *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PADPAD@stdext@@YAPADPAD00@Z ENDP	; stdext::unchecked_copy<char *,char *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PADPADV?$allocator@D@std@@@stdext@@YAPADPAD00AAV?$allocator@D@std@@@Z ; stdext::unchecked_uninitialized_copy<char *,char *,std::allocator<char> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z PROC ; std::vector<char,std::allocator<char> >::_Ucopy<char *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PADPADV?$allocator@D@std@@@stdext@@YAPADPAD00AAV?$allocator@D@std@@@Z ; stdext::unchecked_uninitialized_copy<char *,char *,std::allocator<char> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ENDP ; std::vector<char,std::allocator<char> >::_Ucopy<char *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@PAPAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@2@@stdext@@YAPAPAVSurfaceData@Ogre@@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVSurfaceData@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEPAPAVSurfaceData@Ogre@@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@1@0PAPAV23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEPAPAVSurfaceData@Ogre@@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@1@0PAPAV23@@Z PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Ucopy<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@PAPAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@2@@stdext@@YAPAPAVSurfaceData@Ogre@@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVSurfaceData@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEPAPAVSurfaceData@Ogre@@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@1@0PAPAV23@@Z ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Ucopy<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAVSurfaceData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::SurfaceData * *,Ogre::SurfaceData * *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAPAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::SurfaceData * *>
PUBLIC	??$_Iter_random@PAPAVSurfaceData@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVSurfaceData@Ogre@@0@Z ; std::_Iter_random<Ogre::SurfaceData * *,Ogre::SurfaceData * *>
PUBLIC	??$_Ptr_cat@PAPAVSurfaceData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVSurfaceData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SurfaceData * *,Ogre::SurfaceData * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVSurfaceData@Ogre@@PAPAV12@@stdext@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00@Z
_TEXT	SEGMENT
$T82619 = -3						; size = 1
$T82618 = -2						; size = 1
$T82617 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVSurfaceData@Ogre@@PAPAV12@@stdext@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00@Z PROC ; stdext::unchecked_copy<Ogre::SurfaceData * *,Ogre::SurfaceData * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T82617[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVSurfaceData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVSurfaceData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SurfaceData * *,Ogre::SurfaceData * *>
	add	esp, 8
	mov	BYTE PTR $T82618[ebp], al
	movzx	eax, BYTE PTR $T82617[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T82618[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82619[ebp]
	push	ecx
	call	??$_Iter_random@PAPAVSurfaceData@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVSurfaceData@Ogre@@0@Z ; std::_Iter_random<Ogre::SurfaceData * *,Ogre::SurfaceData * *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::SurfaceData * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::SurfaceData * *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAPAVSurfaceData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::SurfaceData * *,Ogre::SurfaceData * *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVSurfaceData@Ogre@@PAPAV12@@stdext@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00@Z ENDP ; stdext::unchecked_copy<Ogre::SurfaceData * *,Ogre::SurfaceData * *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAPAVSurfaceData@Ogre@@PAPAV12@V?$allocator@PAVSurfaceData@Ogre@@@std@@@stdext@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00AAV?$allocator@PAVSurfaceData@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::SurfaceData * *,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAPAVSurfaceData@Ogre@@@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEPAPAVSurfaceData@Ogre@@PAPAV23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAPAVSurfaceData@Ogre@@@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEPAPAVSurfaceData@Ogre@@PAPAV23@00@Z PROC ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Ucopy<Ogre::SurfaceData * *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVSurfaceData@Ogre@@PAPAV12@V?$allocator@PAVSurfaceData@Ogre@@@std@@@stdext@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00AAV?$allocator@PAVSurfaceData@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::SurfaceData * *,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAPAVSurfaceData@Ogre@@@?$vector@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@IAEPAPAVSurfaceData@Ogre@@PAPAV23@00@Z ENDP ; std::vector<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Ucopy<Ogre::SurfaceData * *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
PUBLIC	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
PUBLIC	??$_Iter_random@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Iter_random<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
PUBLIC	??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T82626 = -3						; size = 1
$T82625 = -2						; size = 1
$T82624 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z PROC ; stdext::unchecked_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T82624[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T82625[ebp], al
	movzx	eax, BYTE PTR $T82624[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T82625[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82626[ebp]
	push	ecx
	call	??$_Iter_random@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Iter_random<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z ENDP ; stdext::unchecked_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ucopy<Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ucopy<Ogre::BaseKeyFrameArray::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@0AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Vector2> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@0AAV?$allocator@VVector2@Ogre@@@0@@Z
_TEXT	SEGMENT
$T82631 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@0AAV?$allocator@VVector2@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::Vector2> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVVector2@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVVector2@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Vector2 *,Ogre::Vector2 *>
	add	esp, 8
	mov	BYTE PTR $T82631[ebp], al
	movzx	edx, BYTE PTR $T82631[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@0AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::Vector2> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@0AAV?$allocator@VVector2@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::Vector2> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<float> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@@Z
_TEXT	SEGMENT
$T82634 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@@Z PROC ; std::_Destroy_range<std::allocator<float> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z ; std::_Ptr_cat<float *,float *>
	add	esp, 8
	mov	BYTE PTR $T82634[ebp], al
	movzx	edx, BYTE PTR $T82634[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<float> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@@Z ENDP ; std::_Destroy_range<std::allocator<float> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
$T82637 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
	add	esp, 8
	mov	BYTE PTR $T82637[ebp], al
	movzx	edx, BYTE PTR $T82637[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
PUBLIC	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
PUBLIC	??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
PUBLIC	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T82642 = -3						; size = 1
$T82641 = -2						; size = 1
$T82640 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z PROC ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T82640[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T82641[ebp], al
	movzx	eax, BYTE PTR $T82640[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T82641[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82642[ebp]
	push	ecx
	call	??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ENDP ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Ucopy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Ucopy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
PUBLIC	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
PUBLIC	??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
PUBLIC	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T82649 = -3						; size = 1
$T82648 = -2						; size = 1
$T82647 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z PROC ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T82647[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T82648[ebp], al
	movzx	eax, BYTE PTR $T82647[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T82648[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82649[ebp]
	push	ecx
	call	??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ENDP ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Ucopy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Ucopy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
PUBLIC	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
PUBLIC	??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
PUBLIC	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T82656 = -3						; size = 1
$T82655 = -2						; size = 1
$T82654 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z PROC ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T82654[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T82655[ebp], al
	movzx	eax, BYTE PTR $T82654[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T82655[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82656[ebp]
	push	ecx
	call	??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ENDP ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ucopy<Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ucopy<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
PUBLIC	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
PUBLIC	??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
PUBLIC	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T82663 = -3						; size = 1
$T82662 = -2						; size = 1
$T82661 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z PROC ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T82661[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T82662[ebp], al
	movzx	eax, BYTE PTR $T82661[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T82662[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82663[ebp]
	push	ecx
	call	??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ENDP ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ucopy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ucopy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<char> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@@Z
_TEXT	SEGMENT
$T82668 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@@Z PROC ; std::_Destroy_range<std::allocator<char> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PADPAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAD0@Z ; std::_Ptr_cat<char *,char *>
	add	esp, 8
	mov	BYTE PTR $T82668[ebp], al
	movzx	edx, BYTE PTR $T82668[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<char> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@@Z ENDP ; std::_Destroy_range<std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAXPAPAVSurfaceData@Ogre@@0AAV?$allocator@PAVSurfaceData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SurfaceData *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAXPAPAVSurfaceData@Ogre@@0AAV?$allocator@PAVSurfaceData@Ogre@@@0@@Z
_TEXT	SEGMENT
$T82671 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAXPAPAVSurfaceData@Ogre@@0AAV?$allocator@PAVSurfaceData@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::SurfaceData *> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAVSurfaceData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVSurfaceData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SurfaceData * *,Ogre::SurfaceData * *>
	add	esp, 8
	mov	BYTE PTR $T82671[ebp], al
	movzx	edx, BYTE PTR $T82671[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAXPAPAVSurfaceData@Ogre@@0AAV?$allocator@PAVSurfaceData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SurfaceData *> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAXPAPAVSurfaceData@Ogre@@0AAV?$allocator@PAVSurfaceData@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::SurfaceData *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@@Z
_TEXT	SEGMENT
$T82674 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T82674[ebp], al
	movzx	edx, BYTE PTR $T82674[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0UAnimRange@BaseKeyFrameArray@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UAnimRange@BaseKeyFrameArray@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BaseKeyFrameArray::AnimRange>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UAnimRange@BaseKeyFrameArray@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BaseKeyFrameArray::AnimRange>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Allocate@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@IPAU123@@Z
_TEXT	SEGMENT
$T82679 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@IPAU123@@Z PROC ; std::_Allocate<Ogre::BaseKeyFrameArray::AnimRange>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T82679[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T82679[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@IPAU123@@Z ENDP ; std::_Allocate<Ogre::BaseKeyFrameArray::AnimRange>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_alloc@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0
__ehfuncinfo$??1bad_alloc@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_alloc@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1bad_alloc@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 381  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??1bad_alloc@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1bad_alloc@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ		; std::bad_alloc::~bad_alloc
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@23
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@23:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0VVector2@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VVector2@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0VVector2@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VVector2@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Vector2>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0VVector2@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VVector2@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::Vector2>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@VVector2@Ogre@@@std@@YAPAVVector2@Ogre@@IPAV12@@Z
_TEXT	SEGMENT
$T82704 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VVector2@Ogre@@@std@@YAPAVVector2@Ogre@@IPAV12@@Z PROC ; std::_Allocate<Ogre::Vector2>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T82704[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T82704[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@VVector2@Ogre@@@std@@YAPAVVector2@Ogre@@IPAV12@@Z ENDP ; std::_Allocate<Ogre::Vector2>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0M@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@M@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0M@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@M@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><float>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0M@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@M@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@M@std@@YAPAMIPAM@Z
_TEXT	SEGMENT
$T82709 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@M@std@@YAPAMIPAM@Z PROC			; std::_Allocate<float>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@3
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T82709[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T82709[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@3:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@M@std@@YAPAMIPAM@Z ENDP			; std::_Allocate<float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0H@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0H@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><int>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0H@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
$T82714 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@4
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T82714[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T82714[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@4:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@@Z
_TEXT	SEGMENT
$T82717 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T82717[ebp], al
	movzx	edx, BYTE PTR $T82717[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IPAU123@@Z
_TEXT	SEGMENT
$T82722 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IPAU123@@Z PROC ; std::_Allocate<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@5
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 20					; 00000014H
	jae	SHORT $LN2@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T82722[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T82722[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 20					; 00000014H
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@5:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IPAU123@@Z ENDP ; std::_Allocate<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@@Z
_TEXT	SEGMENT
$T82725 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T82725[ebp], al
	movzx	edx, BYTE PTR $T82725[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IPAU123@@Z
_TEXT	SEGMENT
$T82730 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IPAU123@@Z PROC ; std::_Allocate<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@6

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@6
$LN3@Allocate@6:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 32					; 00000020H
	jae	SHORT $LN2@Allocate@6

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T82730[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T82730[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@6:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 5
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@6:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IPAU123@@Z ENDP ; std::_Allocate<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@@Z
_TEXT	SEGMENT
$T82733 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T82733[ebp], al
	movzx	edx, BYTE PTR $T82733[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z
_TEXT	SEGMENT
$T82738 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z PROC ; std::_Allocate<Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@7

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@7
$LN3@Allocate@7:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN2@Allocate@7

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T82738[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T82738[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@7:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@7:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z ENDP ; std::_Allocate<Ogre::KeyFrameArray<float>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@@Z
_TEXT	SEGMENT
$T82741 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T82741[ebp], al
	movzx	edx, BYTE PTR $T82741[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z
_TEXT	SEGMENT
$T82746 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z PROC ; std::_Allocate<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@8

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@8
$LN3@Allocate@8:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN2@Allocate@8

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T82746[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T82746[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@8:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@8:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z ENDP ; std::_Allocate<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0D@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><char>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0D@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><char>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0PAVSurfaceData@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVSurfaceData@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVSurfaceData@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVSurfaceData@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SurfaceData *>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVSurfaceData@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVSurfaceData@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SurfaceData *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@IPAPAV12@@Z
_TEXT	SEGMENT
$T82753 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@IPAPAV12@@Z PROC ; std::_Allocate<Ogre::SurfaceData *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@9

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@9
$LN3@Allocate@9:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@9

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T82753[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T82753[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@9:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@9:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@IPAPAV12@@Z ENDP ; std::_Allocate<Ogre::SurfaceData *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T82756 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@10

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@10
$LN3@Allocate@10:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@10

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T82756[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T82756[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@10:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@10:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
PUBLIC	?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXIUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T82768 = -8						; size = 8
__Newsize$ = 8						; size = 4
?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXI@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	xor	eax, eax
	mov	DWORD PTR $T82768[ebp], eax
	mov	DWORD PTR $T82768[ebp+4], eax
	mov	ecx, DWORD PTR $T82768[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T82768[ebp]
	push	edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXIUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize
_TEXT	ENDS
PUBLIC	?resize@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEXIVVector2@Ogre@@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::resize
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T82771 = -8						; size = 8
__Newsize$ = 8						; size = 4
?resize@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEXI@Z PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	lea	ecx, DWORD PTR $T82771[ebp]
	call	??0Vector2@Ogre@@QAE@XZ			; Ogre::Vector2::Vector2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEXIVVector2@Ogre@@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::resize

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::resize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAVVector2@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAVVector2@Ogre@@I@Z PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@31
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@31:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAVVector2@Ogre@@I@Z ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator[]
_TEXT	ENDS
PUBLIC	?resize@?$vector@MV?$allocator@M@std@@@std@@QAEXIM@Z ; std::vector<float,std::allocator<float> >::resize
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?resize@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z PROC ; std::vector<float,std::allocator<float> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@MV?$allocator@M@std@@@std@@QAEXIM@Z ; std::vector<float,std::allocator<float> >::resize

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ENDP ; std::vector<float,std::allocator<float> >::resize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z PROC	; std::vector<float,std::allocator<float> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@32
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@32:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z ENDP	; std::vector<float,std::allocator<float> >::operator[]
_TEXT	ENDS
PUBLIC	?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIH@Z ; std::vector<int,std::allocator<int> >::resize
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z PROC ; std::vector<int,std::allocator<int> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	push	0
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIH@Z ; std::vector<int,std::allocator<int> >::resize

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::resize
_TEXT	ENDS
PUBLIC	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::resize
PUBLIC	??0KEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ ; Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T::KEYFRAME_T
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T82782 = -20						; size = 20
__Newsize$ = 8						; size = 4
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	lea	ecx, DWORD PTR $T82782[ebp]
	call	??0KEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::resize

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::resize
_TEXT	ENDS
PUBLIC	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::resize
PUBLIC	??0CONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ ; Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T::CONTROL_POINT_T
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T82785 = -32						; size = 32
__Newsize$ = 8						; size = 4
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	lea	ecx, DWORD PTR $T82785[ebp]
	call	??0CONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ
	sub	esp, 32					; 00000020H
	mov	ecx, 8
	mov	esi, eax
	mov	edi, esp
	rep movsd
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::resize

; 714  : 		}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::resize
_TEXT	ENDS
PUBLIC	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T82788 = -8						; size = 8
__Newsize$ = 8						; size = 4
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	xor	eax, eax
	mov	DWORD PTR $T82788[ebp], eax
	mov	DWORD PTR $T82788[ebp+4], eax
	mov	ecx, DWORD PTR $T82788[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T82788[ebp]
	push	edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize
_TEXT	ENDS
PUBLIC	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T82791 = -8						; size = 8
__Newsize$ = 8						; size = 4
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	xor	eax, eax
	mov	DWORD PTR $T82791[ebp], eax
	mov	DWORD PTR $T82791[ebp+4], eax
	mov	ecx, DWORD PTR $T82791[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T82791[ebp]
	push	edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0KEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0KEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ PROC ; Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T::KEYFRAME_T, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0KEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ ENDP ; Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T::KEYFRAME_T
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0CONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ PROC ; Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T::CONTROL_POINT_T, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0ColourValue@Ogre@@QAE@MMMM@Z		; Ogre::ColourValue::ColourValue
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@QAE@XZ ENDP ; Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T::CONTROL_POINT_T
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+
PUBLIC	?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXIUAnimRange@BaseKeyFrameArray@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T82805 = -64						; size = 8
$T82804 = -56						; size = 8
$T82803 = -48						; size = 8
$T82802 = -40						; size = 8
$T82801 = -32						; size = 8
$T82800 = -24						; size = 8
$T82799 = -16						; size = 8
$T82798 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 8
?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXIUAnimRange@BaseKeyFrameArray@Ogre@@@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T82799[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82798[ebp], ecx
	mov	DWORD PTR $T82798[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T82798[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82798[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Insert_n
	jmp	SHORT $LN4@resize
$LN3@resize:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T82801[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T82800[ebp], edx
	mov	DWORD PTR $T82800[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T82804[ebp]
	push	edx
	lea	eax, DWORD PTR $T82803[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82802[ebp], ecx
	mov	DWORD PTR $T82802[ebp+4], edx
	mov	eax, DWORD PTR $T82800[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T82800[ebp]
	push	ecx
	mov	edx, DWORD PTR $T82802[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82802[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82805[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::erase
$LN4@resize:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXIUAnimRange@BaseKeyFrameArray@Ogre@@@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator+
PUBLIC	?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEXIVVector2@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T82815 = -64						; size = 8
$T82814 = -56						; size = 8
$T82813 = -48						; size = 8
$T82812 = -40						; size = 8
$T82811 = -32						; size = 8
$T82810 = -24						; size = 8
$T82809 = -16						; size = 8
$T82808 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 8
?resize@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEXIVVector2@Ogre@@@Z PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize@2

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T82809[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82808[ebp], ecx
	mov	DWORD PTR $T82808[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T82808[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82808[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Insert_n
	jmp	SHORT $LN4@resize@2
$LN3@resize@2:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize@2

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T82811[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T82810[ebp], edx
	mov	DWORD PTR $T82810[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T82814[ebp]
	push	edx
	lea	eax, DWORD PTR $T82813[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@XZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82812[ebp], ecx
	mov	DWORD PTR $T82812[ebp+4], edx
	mov	eax, DWORD PTR $T82810[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T82810[ebp]
	push	ecx
	mov	edx, DWORD PTR $T82812[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82812[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82815[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::erase
$LN4@resize@2:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?resize@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEXIVVector2@Ogre@@@Z ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::resize
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<float,std::allocator<float> >::operator+
PUBLIC	?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z ; std::vector<float,std::allocator<float> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@MV?$allocator@M@std@@@std@@QAEXIM@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T82825 = -64						; size = 8
$T82824 = -56						; size = 8
$T82823 = -48						; size = 8
$T82822 = -40						; size = 8
$T82821 = -32						; size = 8
$T82820 = -24						; size = 8
$T82819 = -16						; size = 8
$T82818 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
?resize@?$vector@MV?$allocator@M@std@@@std@@QAEXIM@Z PROC ; std::vector<float,std::allocator<float> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize@3

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T82819[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82818[ebp], ecx
	mov	DWORD PTR $T82818[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T82818[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82818[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z ; std::vector<float,std::allocator<float> >::_Insert_n
	jmp	SHORT $LN4@resize@3
$LN3@resize@3:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize@3

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T82821[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T82820[ebp], edx
	mov	DWORD PTR $T82820[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T82824[ebp]
	push	edx
	lea	eax, DWORD PTR $T82823[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<float,std::allocator<float> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82822[ebp], ecx
	mov	DWORD PTR $T82822[ebp+4], edx
	mov	eax, DWORD PTR $T82820[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T82820[ebp]
	push	ecx
	mov	edx, DWORD PTR $T82822[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82822[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82825[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z ; std::vector<float,std::allocator<float> >::erase
$LN4@resize@3:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$vector@MV?$allocator@M@std@@@std@@QAEXIM@Z ENDP ; std::vector<float,std::allocator<float> >::resize
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<int,std::allocator<int> >::operator+
PUBLIC	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIH@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T82835 = -64						; size = 8
$T82834 = -56						; size = 8
$T82833 = -48						; size = 8
$T82832 = -40						; size = 8
$T82831 = -32						; size = 8
$T82830 = -24						; size = 8
$T82829 = -16						; size = 8
$T82828 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIH@Z PROC ; std::vector<int,std::allocator<int> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize@4

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T82829[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82828[ebp], ecx
	mov	DWORD PTR $T82828[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T82828[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82828[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n
	jmp	SHORT $LN4@resize@4
$LN3@resize@4:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize@4

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T82831[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T82830[ebp], edx
	mov	DWORD PTR $T82830[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T82834[ebp]
	push	edx
	lea	eax, DWORD PTR $T82833[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<int,std::allocator<int> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82832[ebp], ecx
	mov	DWORD PTR $T82832[ebp+4], edx
	mov	eax, DWORD PTR $T82830[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T82830[ebp]
	push	ecx
	mov	edx, DWORD PTR $T82832[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82832[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82835[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
$LN4@resize@4:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIH@Z ENDP ; std::vector<int,std::allocator<int> >::resize
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator+
PUBLIC	?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T82845 = -64						; size = 8
$T82844 = -56						; size = 8
$T82843 = -48						; size = 8
$T82842 = -40						; size = 8
$T82841 = -32						; size = 8
$T82840 = -24						; size = 8
$T82839 = -16						; size = 8
$T82838 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 20
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize@5

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T82839[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82838[ebp], ecx
	mov	DWORD PTR $T82838[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T82838[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82838[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Insert_n
	jmp	SHORT $LN4@resize@5
$LN3@resize@5:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize@5

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T82841[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T82840[ebp], edx
	mov	DWORD PTR $T82840[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T82844[ebp]
	push	edx
	lea	eax, DWORD PTR $T82843[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82842[ebp], ecx
	mov	DWORD PTR $T82842[ebp+4], edx
	mov	eax, DWORD PTR $T82840[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T82840[ebp]
	push	ecx
	mov	edx, DWORD PTR $T82842[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82842[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82845[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::erase
$LN4@resize@5:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::resize
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator+
PUBLIC	?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T82855 = -64						; size = 8
$T82854 = -56						; size = 8
$T82853 = -48						; size = 8
$T82852 = -40						; size = 8
$T82851 = -32						; size = 8
$T82850 = -24						; size = 8
$T82849 = -16						; size = 8
$T82848 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 32
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize@6

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T82849[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82848[ebp], ecx
	mov	DWORD PTR $T82848[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T82848[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82848[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Insert_n
	jmp	SHORT $LN4@resize@6
$LN3@resize@6:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize@6

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T82851[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T82850[ebp], edx
	mov	DWORD PTR $T82850[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T82854[ebp]
	push	edx
	lea	eax, DWORD PTR $T82853[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82852[ebp], ecx
	mov	DWORD PTR $T82852[ebp+4], edx
	mov	eax, DWORD PTR $T82850[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T82850[ebp]
	push	ecx
	mov	edx, DWORD PTR $T82852[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82852[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82855[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::erase
$LN4@resize@6:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::resize
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+
PUBLIC	?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T82865 = -64						; size = 8
$T82864 = -56						; size = 8
$T82863 = -48						; size = 8
$T82862 = -40						; size = 8
$T82861 = -32						; size = 8
$T82860 = -24						; size = 8
$T82859 = -16						; size = 8
$T82858 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 8
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize@7

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T82859[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82858[ebp], ecx
	mov	DWORD PTR $T82858[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T82858[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82858[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Insert_n
	jmp	SHORT $LN4@resize@7
$LN3@resize@7:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize@7

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T82861[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T82860[ebp], edx
	mov	DWORD PTR $T82860[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T82864[ebp]
	push	edx
	lea	eax, DWORD PTR $T82863[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82862[ebp], ecx
	mov	DWORD PTR $T82862[ebp+4], edx
	mov	eax, DWORD PTR $T82860[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T82860[ebp]
	push	ecx
	mov	edx, DWORD PTR $T82862[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82862[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82865[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::erase
$LN4@resize@7:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+
PUBLIC	?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T82875 = -64						; size = 8
$T82874 = -56						; size = 8
$T82873 = -48						; size = 8
$T82872 = -40						; size = 8
$T82871 = -32						; size = 8
$T82870 = -24						; size = 8
$T82869 = -16						; size = 8
$T82868 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 8
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize@8

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T82869[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82868[ebp], ecx
	mov	DWORD PTR $T82868[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T82868[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82868[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Insert_n
	jmp	SHORT $LN4@resize@8
$LN3@resize@8:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize@8

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T82871[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T82870[ebp], edx
	mov	DWORD PTR $T82870[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T82874[ebp]
	push	edx
	lea	eax, DWORD PTR $T82873[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T82872[ebp], ecx
	mov	DWORD PTR $T82872[ebp+4], edx
	mov	eax, DWORD PTR $T82870[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T82870[ebp]
	push	ecx
	mov	edx, DWORD PTR $T82872[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T82872[ebp]
	push	eax
	lea	ecx, DWORD PTR $T82875[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::erase
$LN4@resize@8:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
PUBLIC	??$fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z ; std::fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>
PUBLIC	??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Umove<Ogre::BaseKeyFrameArray::AnimRange *>
PUBLIC	?_Ufill@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ufill
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$2
__catchsym$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$0
__unwindtable$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z
_TEXT	SEGMENT
tv84 = -60						; size = 4
_this$ = -56						; size = 4
__Tmp$72363 = -52					; size = 8
__Oldend$72364 = -44					; size = 4
__Tmp$72353 = -40					; size = 8
__Ncopied$72340 = -32					; size = 4
__Newvec$72338 = -28					; size = 4
__Whereoff$72339 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n
	jmp	$LN16@Insert_n
$LN14@Insert_n:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Xlen
	jmp	$LN16@Insert_n
$LN12@Insert_n:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocate
	mov	DWORD PTR __Newvec$72338[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR __Whereoff$72339[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$72340[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereoff$72339[ebp]
	mov	ecx, DWORD PTR __Newvec$72338[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$72340[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$72340[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR __Newvec$72338[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Umove<Ogre::BaseKeyFrameArray::AnimRange *>

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$72340[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$72340[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR __Whereoff$72339[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$72338[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Umove<Ogre::BaseKeyFrameArray::AnimRange *>
	jmp	SHORT $LN19@Insert_n
__catch$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72340[ebp], 1
	jle	SHORT $LN7@Insert_n

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$72339[ebp]
	mov	ecx, DWORD PTR __Newvec$72338[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR __Newvec$72338[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72340[ebp], 0
	jle	SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$72339[ebp]
	mov	edx, DWORD PTR __Newvec$72338[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	mov	eax, DWORD PTR __Whereoff$72339[ebp]
	mov	ecx, DWORD PTR __Newvec$72338[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$72338[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$1
	ret	0
$LN19@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::deallocate
$LN5@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$72338[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$72338[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$72338[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN16@Insert_n
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$72353[ebp], ecx
	mov	DWORD PTR __Tmp$72353[ebp+4], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+4]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Umove<Ogre::BaseKeyFrameArray::AnimRange *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$72353[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ufill
	jmp	SHORT $LN21@Insert_n
__catch$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$3
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	eax, DWORD PTR __Tmp$72353[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, ecx
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z ; std::fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN16@Insert_n
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$72363[ebp], eax
	mov	DWORD PTR __Tmp$72363[ebp+4], ecx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR __Oldend$72364[ebp], eax

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Oldend$72364[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Oldend$72364[ebp]
	sub	edx, ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Umove<Ogre::BaseKeyFrameArray::AnimRange *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$72364[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Oldend$72364[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$_Unchecked_move_backward@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$72363[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z ; std::fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>
	add	esp, 12					; 0000000cH
$LN16@Insert_n:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Insert_n
PUBLIC	??$_Unchecked_move_backward@PAVVector2@Ogre@@PAV12@@stdext@@YAPAVVector2@Ogre@@PAV12@00@Z ; stdext::_Unchecked_move_backward<Ogre::Vector2 *,Ogre::Vector2 *>
PUBLIC	??$fill@PAVVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@0ABV12@@Z ; std::fill<Ogre::Vector2 *,Ogre::Vector2>
PUBLIC	??$_Umove@PAVVector2@Ogre@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV23@00@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Umove<Ogre::Vector2 *>
PUBLIC	?_Ufill@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV34@IABV34@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Ufill
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z$2
__catchsym$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z$0
__unwindtable$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z
_TEXT	SEGMENT
tv84 = -60						; size = 4
_this$ = -56						; size = 4
__Tmp$72406 = -52					; size = 8
__Oldend$72407 = -44					; size = 4
__Tmp$72396 = -40					; size = 8
__Ncopied$72383 = -32					; size = 4
__Newvec$72381 = -28					; size = 4
__Whereoff$72382 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@2
	jmp	$LN16@Insert_n@2
$LN14@Insert_n@2:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n@2

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Xlen
	jmp	$LN16@Insert_n@2
$LN12@Insert_n@2:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@2

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@2
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@2
$LN17@Insert_n@2:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@2:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n@2

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n@2:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@VVector2@Ogre@@@std@@QAEPAVVector2@Ogre@@I@Z ; std::allocator<Ogre::Vector2>::allocate
	mov	DWORD PTR __Newvec$72381[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR __Whereoff$72382[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$72383[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereoff$72382[ebp]
	mov	ecx, DWORD PTR __Newvec$72381[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV34@IABV34@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$72383[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$72383[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR __Newvec$72381[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAVVector2@Ogre@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV23@00@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Umove<Ogre::Vector2 *>

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$72383[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$72383[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR __Whereoff$72382[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$72381[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAVVector2@Ogre@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV23@00@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Umove<Ogre::Vector2 *>
	jmp	SHORT $LN19@Insert_n@2
__catch$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72383[ebp], 1
	jle	SHORT $LN7@Insert_n@2

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$72382[ebp]
	mov	ecx, DWORD PTR __Newvec$72381[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR __Newvec$72381[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXPAVVector2@Ogre@@0@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Destroy
$LN7@Insert_n@2:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72383[ebp], 0
	jle	SHORT $LN6@Insert_n@2

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$72382[ebp]
	mov	edx, DWORD PTR __Newvec$72381[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	mov	eax, DWORD PTR __Whereoff$72382[ebp]
	mov	ecx, DWORD PTR __Newvec$72381[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXPAVVector2@Ogre@@0@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Destroy
$LN6@Insert_n@2:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$72381[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@I@Z ; std::allocator<Ogre::Vector2>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z$1
	ret	0
$LN19@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@Insert_n@2

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXPAVVector2@Ogre@@0@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@I@Z ; std::allocator<Ogre::Vector2>::deallocate
$LN5@Insert_n@2:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$72381[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$72381[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$72381[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN16@Insert_n@2
$LN10@Insert_n@2:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@2

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$72396[ebp], ecx
	mov	DWORD PTR __Tmp$72396[ebp+4], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+4]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAVVector2@Ogre@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV23@00@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Umove<Ogre::Vector2 *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$72396[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV34@IABV34@@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Ufill
	jmp	SHORT $LN21@Insert_n@2
__catch$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXPAVVector2@Ogre@@0@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z$3
	ret	0
$LN21@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	eax, DWORD PTR __Tmp$72396[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, ecx
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAVVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@0ABV12@@Z ; std::fill<Ogre::Vector2 *,Ogre::Vector2>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN16@Insert_n@2
$LN3@Insert_n@2:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$72406[ebp], eax
	mov	DWORD PTR __Tmp$72406[ebp+4], ecx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR __Oldend$72407[ebp], eax

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Oldend$72407[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Oldend$72407[ebp]
	sub	edx, ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAVVector2@Ogre@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV23@00@Z ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Umove<Ogre::Vector2 *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$72407[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Oldend$72407[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$_Unchecked_move_backward@PAVVector2@Ogre@@PAV12@@stdext@@YAPAVVector2@Ogre@@PAV12@00@Z ; stdext::_Unchecked_move_backward<Ogre::Vector2 *,Ogre::Vector2 *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$72406[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAVVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@0ABV12@@Z ; std::fill<Ogre::Vector2 *,Ogre::Vector2>
	add	esp, 12					; 0000000cH
$LN16@Insert_n@2:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@2@IABVVector2@Ogre@@@Z ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Insert_n
PUBLIC	??$_Unchecked_move_backward@PAMPAM@stdext@@YAPAMPAM00@Z ; stdext::_Unchecked_move_backward<float *,float *>
PUBLIC	??$fill@PAMM@std@@YAXPAM0ABM@Z			; std::fill<float *,float>
PUBLIC	??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Umove<float *>
PUBLIC	?_Ufill@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAMIABM@Z ; std::vector<float,std::allocator<float> >::_Ufill
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$2
__catchsym$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$0
__unwindtable$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z
_TEXT	SEGMENT
tv84 = -52						; size = 4
_this$ = -48						; size = 4
__Tmp$72449 = -44					; size = 4
__Oldend$72450 = -40					; size = 4
__Tmp$72439 = -36					; size = 4
__Ncopied$72426 = -32					; size = 4
__Newvec$72424 = -28					; size = 4
__Whereoff$72425 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z PROC ; std::vector<float,std::allocator<float> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@3
	jmp	$LN1@Insert_n@3
$LN14@Insert_n@3:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n@3

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ ; std::vector<float,std::allocator<float> >::_Xlen
	jmp	$LN1@Insert_n@3
$LN12@Insert_n@3:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@3

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@3
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@3
$LN17@Insert_n@3:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@3:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n@3

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n@3:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@M@std@@QAEPAMI@Z	; std::allocator<float>::allocate
	mov	DWORD PTR __Newvec$72424[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR __Whereoff$72425[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$72426[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	fwait

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereoff$72425[ebp]
	mov	ecx, DWORD PTR __Newvec$72424[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAMIABM@Z ; std::vector<float,std::allocator<float> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$72426[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$72426[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR __Newvec$72424[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Umove<float *>

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$72426[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$72426[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR __Whereoff$72425[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$72424[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Umove<float *>

; 1185 : 			_CATCH_ALL

	fwait
	jmp	SHORT $LN19@Insert_n@3
__catch$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$0:

; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72426[ebp], 1
	jle	SHORT $LN7@Insert_n@3

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$72425[ebp]
	mov	ecx, DWORD PTR __Newvec$72424[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR __Newvec$72424[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy
$LN7@Insert_n@3:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72426[ebp], 0
	jle	SHORT $LN6@Insert_n@3

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$72425[ebp]
	mov	edx, DWORD PTR __Newvec$72424[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR __Whereoff$72425[ebp]
	mov	ecx, DWORD PTR __Newvec$72424[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy
$LN6@Insert_n@3:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$72424[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@M@std@@QAEXPAMI@Z ; std::allocator<float>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN24@Insert_n@3
	ret	0
$LN19@Insert_n@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN24@Insert_n@3:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@Insert_n@3

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@M@std@@QAEXPAMI@Z ; std::allocator<float>::deallocate
$LN5@Insert_n@3:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$72424[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$72424[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$72424[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN1@Insert_n@3
$LN10@Insert_n@3:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 2
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@3

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR __Tmp$72439[ebp]

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Umove<float *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2
	fwait

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	ecx, DWORD PTR __Tmp$72439[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Where$[ebp+4]
	sar	eax, 2
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAMIABM@Z ; std::vector<float,std::allocator<float> >::_Ufill

; 1219 : 			_CATCH_ALL

	fwait
	jmp	SHORT $LN21@Insert_n@3
__catch$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$2:

; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN26@Insert_n@3
	ret	0
$LN21@Insert_n@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN26@Insert_n@3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	ecx, DWORD PTR __Tmp$72439[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, edx
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$fill@PAMM@std@@YAXPAM0ABM@Z		; std::fill<float *,float>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN1@Insert_n@3
$LN3@Insert_n@3:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR __Tmp$72449[ebp]

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR __Oldend$72450[ebp], edx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Oldend$72450[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$72450[ebp]
	sub	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Umove<float *>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$72450[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Oldend$72450[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	call	??$_Unchecked_move_backward@PAMPAM@stdext@@YAPAMPAM00@Z ; stdext::_Unchecked_move_backward<float *,float *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	ecx, DWORD PTR __Tmp$72449[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$fill@PAMM@std@@YAXPAM0ABM@Z		; std::fill<float *,float>
	add	esp, 12					; 0000000cH
$LN1@Insert_n@3:
$LN15@Insert_n@3:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z ENDP ; std::vector<float,std::allocator<float> >::_Insert_n
PUBLIC	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>
PUBLIC	??$fill@PAHH@std@@YAXPAH0ABH@Z			; std::fill<int *,int>
PUBLIC	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
PUBLIC	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$2
__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$0
__unwindtable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
_TEXT	SEGMENT
tv84 = -52						; size = 4
_this$ = -48						; size = 4
__Tmp$72492 = -44					; size = 4
__Oldend$72493 = -40					; size = 4
__Tmp$72482 = -36					; size = 4
__Ncopied$72469 = -32					; size = 4
__Newvec$72467 = -28					; size = 4
__Whereoff$72468 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z PROC ; std::vector<int,std::allocator<int> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@4
	jmp	$LN16@Insert_n@4
$LN14@Insert_n@4:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n@4

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
	jmp	$LN16@Insert_n@4
$LN12@Insert_n@4:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@4

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@4
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@4
$LN17@Insert_n@4:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@4:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n@4

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n@4:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@H@std@@QAEPAHI@Z	; std::allocator<int>::allocate
	mov	DWORD PTR __Newvec$72467[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR __Whereoff$72468[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$72469[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereoff$72468[ebp]
	mov	ecx, DWORD PTR __Newvec$72467[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$72469[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$72469[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR __Newvec$72467[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$72469[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$72469[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR __Whereoff$72468[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$72467[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
	jmp	SHORT $LN19@Insert_n@4
__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72469[ebp], 1
	jle	SHORT $LN7@Insert_n@4

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$72468[ebp]
	mov	ecx, DWORD PTR __Newvec$72467[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR __Newvec$72467[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
$LN7@Insert_n@4:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72469[ebp], 0
	jle	SHORT $LN6@Insert_n@4

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$72468[ebp]
	mov	edx, DWORD PTR __Newvec$72467[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR __Whereoff$72468[ebp]
	mov	ecx, DWORD PTR __Newvec$72467[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
$LN6@Insert_n@4:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$72467[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$1
	ret	0
$LN19@Insert_n@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@Insert_n@4

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate
$LN5@Insert_n@4:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$72467[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$72467[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$72467[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN16@Insert_n@4
$LN10@Insert_n@4:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 2
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@4

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$72482[ebp], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	edx, DWORD PTR __Tmp$72482[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR __Where$[ebp+4]
	sar	ecx, 2
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill
	jmp	SHORT $LN21@Insert_n@4
__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+4]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$3
	ret	0
$LN21@Insert_n@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	edx, DWORD PTR __Tmp$72482[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	call	??$fill@PAHH@std@@YAXPAH0ABH@Z		; std::fill<int *,int>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN16@Insert_n@4
$LN3@Insert_n@4:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$72492[ebp], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR __Oldend$72493[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Oldend$72493[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR __Oldend$72493[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$72493[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$72493[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$72492[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAHH@std@@YAXPAH0ABH@Z		; std::fill<int *,int>
	add	esp, 12					; 0000000cH
$LN16@Insert_n@4:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Insert_n
PUBLIC	??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
PUBLIC	??$fill@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
PUBLIC	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
PUBLIC	?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Ufill
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$2
__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$0
__unwindtable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
tv84 = -84						; size = 4
_this$ = -80						; size = 4
__Tmp$72535 = -76					; size = 20
__Oldend$72536 = -56					; size = 4
__Tmp$72525 = -52					; size = 20
__Ncopied$72512 = -32					; size = 4
__Newvec$72510 = -28					; size = 4
__Whereoff$72511 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@5
	jmp	$LN16@Insert_n@5
$LN14@Insert_n@5:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n@5

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Xlen
	jmp	$LN16@Insert_n@5
$LN12@Insert_n@5:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@5

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@5
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@5
$LN17@Insert_n@5:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@5:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n@5

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n@5:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::allocate
	mov	DWORD PTR __Newvec$72510[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	DWORD PTR __Whereoff$72511[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$72512[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Whereoff$72511[ebp]
	imul	ecx, 20					; 00000014H
	add	ecx, DWORD PTR __Newvec$72510[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$72512[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$72512[ebp], edx

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	eax, DWORD PTR __Newvec$72510[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>

; 1182 : 			++_Ncopied;

	mov	ecx, DWORD PTR __Ncopied$72512[ebp]
	add	ecx, 1
	mov	DWORD PTR __Ncopied$72512[ebp], ecx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	edx, DWORD PTR __Whereoff$72511[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	imul	edx, 20					; 00000014H
	add	edx, DWORD PTR __Newvec$72510[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	jmp	SHORT $LN19@Insert_n@5
__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72512[ebp], 1
	jle	SHORT $LN7@Insert_n@5

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$72511[ebp]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR __Newvec$72510[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$72510[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Destroy
$LN7@Insert_n@5:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72512[ebp], 0
	jle	SHORT $LN6@Insert_n@5

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	edx, DWORD PTR __Whereoff$72511[ebp]
	imul	edx, 20					; 00000014H
	add	edx, DWORD PTR __Newvec$72510[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 20					; 00000014H
	add	edx, eax
	push	edx
	mov	ecx, DWORD PTR __Whereoff$72511[ebp]
	imul	ecx, 20					; 00000014H
	add	ecx, DWORD PTR __Newvec$72510[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Destroy
$LN6@Insert_n@5:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$72510[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$1
	ret	0
$LN19@Insert_n@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN5@Insert_n@5

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	sub	eax, DWORD PTR [ecx+12]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::deallocate
$LN5@Insert_n@5:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	ecx, DWORD PTR __Capacity$[ebp]
	imul	ecx, 20					; 00000014H
	add	ecx, DWORD PTR __Newvec$72510[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR __Newvec$72510[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$72510[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN16@Insert_n@5
$LN10@Insert_n@5:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR __Where$[ebp+4]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@5

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$72525[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$72525[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$72525[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR __Tmp$72525[ebp+12], ecx
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR __Tmp$72525[ebp+16], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	ecx, DWORD PTR __Tmp$72525[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Where$[ebp+4]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Ufill
	jmp	SHORT $LN21@Insert_n@5
__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 20					; 00000014H
	add	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$3
	ret	0
$LN21@Insert_n@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	edx, DWORD PTR __Tmp$72525[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	call	??$fill@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@5
$LN3@Insert_n@5:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$72535[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$72535[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$72535[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$72535[ebp+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR __Tmp$72535[ebp+16], ecx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR __Oldend$72536[ebp], eax

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Oldend$72536[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR __Oldend$72536[ebp]
	sub	edx, ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$72536[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR __Oldend$72536[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$72535[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 20					; 00000014H
	add	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$fill@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
	add	esp, 12					; 0000000cH
$LN16@Insert_n@5:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Insert_n
PUBLIC	??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
PUBLIC	??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
PUBLIC	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
PUBLIC	?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Ufill
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$2
__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$0
__unwindtable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
tv84 = -108						; size = 4
_this$ = -104						; size = 4
__Tmp$72578 = -100					; size = 32
__Oldend$72579 = -68					; size = 4
__Tmp$72568 = -64					; size = 32
__Ncopied$72555 = -32					; size = 4
__Newvec$72553 = -28					; size = 4
__Whereoff$72554 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@6
	jmp	$LN16@Insert_n@6
$LN14@Insert_n@6:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n@6

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Xlen
	jmp	$LN16@Insert_n@6
$LN12@Insert_n@6:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@6

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@6
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@6
$LN17@Insert_n@6:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@6:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n@6

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n@6:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::allocate
	mov	DWORD PTR __Newvec$72553[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 5
	mov	DWORD PTR __Whereoff$72554[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$72555[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereoff$72554[ebp]
	shl	eax, 5
	add	eax, DWORD PTR __Newvec$72553[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	ecx, DWORD PTR __Ncopied$72555[ebp]
	add	ecx, 1
	mov	DWORD PTR __Ncopied$72555[ebp], ecx

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	edx, DWORD PTR __Newvec$72553[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$72555[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$72555[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR __Whereoff$72554[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 5
	add	ecx, DWORD PTR __Newvec$72553[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	jmp	SHORT $LN19@Insert_n@6
__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72555[ebp], 1
	jle	SHORT $LN7@Insert_n@6

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	edx, DWORD PTR __Whereoff$72554[ebp]
	shl	edx, 5
	add	edx, DWORD PTR __Newvec$72553[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$72553[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Destroy
$LN7@Insert_n@6:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72555[ebp], 0
	jle	SHORT $LN6@Insert_n@6

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$72554[ebp]
	shl	ecx, 5
	add	ecx, DWORD PTR __Newvec$72553[ebp]
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 5
	add	ecx, edx
	push	ecx
	mov	eax, DWORD PTR __Whereoff$72554[ebp]
	shl	eax, 5
	add	eax, DWORD PTR __Newvec$72553[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Destroy
$LN6@Insert_n@6:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$72553[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$1
	ret	0
$LN19@Insert_n@6:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN5@Insert_n@6

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 5
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::deallocate
$LN5@Insert_n@6:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	ecx, DWORD PTR __Capacity$[ebp]
	shl	ecx, 5
	add	ecx, DWORD PTR __Newvec$72553[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR __Newvec$72553[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$72553[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN16@Insert_n@6
$LN10@Insert_n@6:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 5
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@6

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	esi, DWORD PTR __Val$[ebp]
	mov	ecx, 8
	lea	edi, DWORD PTR __Tmp$72568[ebp]
	rep movsd

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	ecx, DWORD PTR __Tmp$72568[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Where$[ebp+4]
	sar	eax, 5
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Ufill
	jmp	SHORT $LN21@Insert_n@6
__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+16]
	push	ecx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$3
	ret	0
$LN21@Insert_n@6:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	ecx, DWORD PTR __Tmp$72568[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, edx
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN16@Insert_n@6
$LN3@Insert_n@6:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	esi, DWORD PTR __Val$[ebp]
	mov	ecx, 8
	lea	edi, DWORD PTR __Tmp$72578[ebp]
	rep movsd

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR __Oldend$72579[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Oldend$72579[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR __Oldend$72579[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$72579[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR __Oldend$72579[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$72578[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 5
	add	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
	add	esp, 12					; 0000000cH
$LN16@Insert_n@6:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Insert_n
PUBLIC	??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
PUBLIC	??$fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>
PUBLIC	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
PUBLIC	?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ufill
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$2
__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$0
__unwindtable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
tv84 = -60						; size = 4
_this$ = -56						; size = 4
__Tmp$72621 = -52					; size = 8
__Oldend$72622 = -44					; size = 4
__Tmp$72611 = -40					; size = 8
__Ncopied$72598 = -32					; size = 4
__Newvec$72596 = -28					; size = 4
__Whereoff$72597 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@7
	jmp	$LN16@Insert_n@7
$LN14@Insert_n@7:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n@7

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Xlen
	jmp	$LN16@Insert_n@7
$LN12@Insert_n@7:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@7

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@7
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@7
$LN17@Insert_n@7:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@7:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n@7

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n@7:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocate
	mov	DWORD PTR __Newvec$72596[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR __Whereoff$72597[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$72598[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereoff$72597[ebp]
	mov	ecx, DWORD PTR __Newvec$72596[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$72598[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$72598[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR __Newvec$72596[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<float>::KEYFRAME_T *>

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$72598[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$72598[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR __Whereoff$72597[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$72596[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	jmp	SHORT $LN19@Insert_n@7
__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72598[ebp], 1
	jle	SHORT $LN7@Insert_n@7

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$72597[ebp]
	mov	ecx, DWORD PTR __Newvec$72596[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR __Newvec$72596[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy
$LN7@Insert_n@7:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72598[ebp], 0
	jle	SHORT $LN6@Insert_n@7

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$72597[ebp]
	mov	edx, DWORD PTR __Newvec$72596[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	mov	eax, DWORD PTR __Whereoff$72597[ebp]
	mov	ecx, DWORD PTR __Newvec$72596[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy
$LN6@Insert_n@7:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$72596[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$1
	ret	0
$LN19@Insert_n@7:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@Insert_n@7

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::deallocate
$LN5@Insert_n@7:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$72596[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$72596[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$72596[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN16@Insert_n@7
$LN10@Insert_n@7:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@7

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$72611[ebp], ecx
	mov	DWORD PTR __Tmp$72611[ebp+4], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+4]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<float>::KEYFRAME_T *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$72611[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ufill
	jmp	SHORT $LN21@Insert_n@7
__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$3
	ret	0
$LN21@Insert_n@7:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	eax, DWORD PTR __Tmp$72611[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, ecx
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN16@Insert_n@7
$LN3@Insert_n@7:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$72621[ebp], eax
	mov	DWORD PTR __Tmp$72621[ebp+4], ecx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR __Oldend$72622[ebp], eax

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Oldend$72622[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Oldend$72622[ebp]
	sub	edx, ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$72622[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Oldend$72622[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$72621[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>
	add	esp, 12					; 0000000cH
$LN16@Insert_n@7:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Insert_n
PUBLIC	??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
PUBLIC	??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
PUBLIC	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
PUBLIC	?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ufill
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$2
__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$0
__unwindtable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
tv84 = -60						; size = 4
_this$ = -56						; size = 4
__Tmp$72664 = -52					; size = 8
__Oldend$72665 = -44					; size = 4
__Tmp$72654 = -40					; size = 8
__Ncopied$72641 = -32					; size = 4
__Newvec$72639 = -28					; size = 4
__Whereoff$72640 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@8
	jmp	$LN16@Insert_n@8
$LN14@Insert_n@8:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n@8

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Xlen
	jmp	$LN16@Insert_n@8
$LN12@Insert_n@8:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@8

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@8
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@8
$LN17@Insert_n@8:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@8:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n@8

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n@8:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocate
	mov	DWORD PTR __Newvec$72639[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR __Whereoff$72640[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$72641[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereoff$72640[ebp]
	mov	ecx, DWORD PTR __Newvec$72639[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$72641[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$72641[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR __Newvec$72639[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$72641[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$72641[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR __Whereoff$72640[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$72639[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	jmp	SHORT $LN19@Insert_n@8
__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72641[ebp], 1
	jle	SHORT $LN7@Insert_n@8

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$72640[ebp]
	mov	ecx, DWORD PTR __Newvec$72639[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR __Newvec$72639[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy
$LN7@Insert_n@8:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$72641[ebp], 0
	jle	SHORT $LN6@Insert_n@8

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$72640[ebp]
	mov	edx, DWORD PTR __Newvec$72639[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	mov	eax, DWORD PTR __Whereoff$72640[ebp]
	mov	ecx, DWORD PTR __Newvec$72639[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy
$LN6@Insert_n@8:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$72639[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$1
	ret	0
$LN19@Insert_n@8:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@Insert_n@8

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::deallocate
$LN5@Insert_n@8:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$72639[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$72639[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$72639[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN16@Insert_n@8
$LN10@Insert_n@8:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@8

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$72654[ebp], ecx
	mov	DWORD PTR __Tmp$72654[ebp+4], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+4]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$72654[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ufill
	jmp	SHORT $LN21@Insert_n@8
__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$3
	ret	0
$LN21@Insert_n@8:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	eax, DWORD PTR __Tmp$72654[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, ecx
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN16@Insert_n@8
$LN3@Insert_n@8:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$72664[ebp], eax
	mov	DWORD PTR __Tmp$72664[ebp+4], ecx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR __Oldend$72665[ebp], eax

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Oldend$72665[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Oldend$72665[ebp]
	sub	edx, ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$72665[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Oldend$72665[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$72664[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	add	esp, 12					; 0000000cH
$LN16@Insert_n@8:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Insert_n
PUBLIC	??Y?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator+
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<float,std::allocator<float> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<float,std::allocator<float> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<float,std::allocator<float> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<float,std::allocator<float> >::operator+
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<int,std::allocator<int> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<int,std::allocator<int> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<int,std::allocator<int> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<int,std::allocator<int> >::operator+
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator+
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator+
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU345@IABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU345@IABU345@@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU345@IABU345@@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ufill
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::Vector2 *,unsigned int,Ogre::Vector2,std::allocator<Ogre::Vector2> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV34@IABV34@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV34@IABV34@@Z PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::Vector2 *,unsigned int,Ogre::Vector2,std::allocator<Ogre::Vector2> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV34@IABV34@@Z ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Ufill
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAMIMV?$allocator@M@std@@@stdext@@YAXPAMIABMAAV?$allocator@M@std@@@Z ; stdext::unchecked_uninitialized_fill_n<float *,unsigned int,float,std::allocator<float> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAMIABM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAMIABM@Z PROC ; std::vector<float,std::allocator<float> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAMIMV?$allocator@M@std@@@stdext@@YAXPAMIABMAAV?$allocator@M@std@@@Z ; stdext::unchecked_uninitialized_fill_n<float *,unsigned int,float,std::allocator<float> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAMIABM@Z ENDP ; std::vector<float,std::allocator<float> >::_Ufill
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z PROC ; std::vector<int,std::allocator<int> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,std::allocator<int> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Ufill
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU345@IABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU345@IABU345@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR __Ptr$[ebp]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU345@IABU345@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Ufill
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU345@IABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU345@IABU345@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR __Ptr$[ebp]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU345@IABU345@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Ufill
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ufill
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ufill
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<float,std::allocator<float> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<float,std::allocator<float> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<int,std::allocator<int> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<int,std::allocator<int> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=
_TEXT	ENDS
PUBLIC	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@33
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@33:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@33
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@33
$LN1@operator@33:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@33:

; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=
_TEXT	ENDS
PUBLIC	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Iterator_base_aux::_Getmycont, COMDAT
; _this$ = ecx

; 457  : 		{	// Go through the aux object to get the container

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $LN4@Getmycont
$LN3@Getmycont:
	mov	DWORD PTR tv67[ebp], 0
$LN4@Getmycont:
	mov	eax, DWORD PTR tv67[ebp]

; 459  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Aux_cont::_Getcont, COMDAT
; _this$ = ecx

; 368  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 369  : 		return _Mycontainer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 370  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Aux_cont::_Getcont
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@34
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@34:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@34
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@34
$LN1@operator@34:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@34:

; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@35
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@35:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@35
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@35
$LN1@operator@35:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@35:

; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@36
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@36:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@36
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@36
$LN1@operator@36:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@36:

; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@37
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@37:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	esi, DWORD PTR __Off$[ebp]
	imul	esi, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	esi, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@37
	mov	esi, DWORD PTR __Off$[ebp]
	imul	esi, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	esi, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@37
$LN1@operator@37:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@37:

; 164  : 		_Myptr += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@38
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@38:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	esi, DWORD PTR __Off$[ebp]
	shl	esi, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	esi, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@38
	mov	esi, DWORD PTR __Off$[ebp]
	shl	esi, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	esi, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@38
$LN1@operator@38:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@38:

; 164  : 		_Myptr += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@39
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@39:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@39
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@39
$LN1@operator@39:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@39:

; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@40
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@40:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@40
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@40
$LN1@operator@40:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@40:

; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@std@@YAPBUAnimRange@BaseKeyFrameArray@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >,Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@PAUAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@2@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@5@@Z
_TEXT	SEGMENT
$T83133 = -2						; size = 1
$T83132 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@PAUAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@2@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@5@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83132[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T83133[ebp], al
	movzx	eax, BYTE PTR $T83132[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83133[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@std@@YAPBUAnimRange@BaseKeyFrameArray@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@std@@YAPBUAnimRange@BaseKeyFrameArray@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@PAUAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@2@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@5@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Vector2 const *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@std@@YAPBVVector2@Ogre@@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@PAVVector2@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@AAPAVVector2@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >,Ogre::Vector2 *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@PAVVector2@Ogre@@V?$allocator@VVector2@Ogre@@@2@@stdext@@YAPAVVector2@Ogre@@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@0PAV12@AAV?$allocator@VVector2@Ogre@@@4@@Z
_TEXT	SEGMENT
$T83137 = -2						; size = 1
$T83136 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@PAVVector2@Ogre@@V?$allocator@VVector2@Ogre@@@2@@stdext@@YAPAVVector2@Ogre@@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@0PAV12@AAV?$allocator@VVector2@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83136[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@PAVVector2@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@AAPAVVector2@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >,Ogre::Vector2 *>
	add	esp, 8
	mov	BYTE PTR $T83137[ebp], al
	movzx	eax, BYTE PTR $T83136[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83137[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@std@@YAPBVVector2@Ogre@@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@std@@YAPBVVector2@Ogre@@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Vector2 const *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@PAVVector2@Ogre@@V?$allocator@VVector2@Ogre@@@2@@stdext@@YAPAVVector2@Ogre@@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@0PAV12@AAV?$allocator@VVector2@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::Vector2 *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z PROC ; std::_Checked_base<Ogre::Vector2 *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::Vector2 *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z ENDP ; std::_Checked_base<Ogre::Vector2 *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAVVector2@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVVector2@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAVVector2@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVVector2@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::Vector2 *,Ogre::Vector2 *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAVVector2@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVVector2@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::Vector2 *,Ogre::Vector2 *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAVVector2@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVVector2@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVVector2@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVVector2@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::Vector2 *,Ogre::Vector2 *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAVVector2@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVVector2@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::Vector2 *,Ogre::Vector2 *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAVVector2@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVVector2@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::Vector2 *,Ogre::Vector2 *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAVVector2@Ogre@@PAV12@@std@@YAPAVVector2@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83148 = -7						; size = 1
$T83147 = -6						; size = 1
$T83146 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAVVector2@Ogre@@PAV12@@std@@YAPAVVector2@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::Vector2 *,Ogre::Vector2 *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Result$[ebp], edx

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83146[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T83147[ebp], cl
	movzx	edx, BYTE PTR $T83146[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83147[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83148[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Vector2 *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Copy_opt@PAVVector2@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVVector2@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::Vector2 *,Ogre::Vector2 *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAVVector2@Ogre@@PAV12@@std@@YAPAVVector2@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::Vector2 *,Ogre::Vector2 *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83152 = -2						; size = 1
$T83151 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83151[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAVVector2@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVVector2@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Vector2 *,Ogre::Vector2 *>
	add	esp, 8
	mov	BYTE PTR $T83152[ebp], al
	movzx	eax, BYTE PTR $T83151[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83152[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Vector2 *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Vector2 *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBMPAMV?$allocator@M@std@@@std@@YAPAMPBM0PAMAAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<float const *,float *,std::allocator<float> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@@std@@YAPBMAAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<float,std::allocator<float> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@PAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@AAPAM@Z ; std::_Ptr_cat<std::_Vector_const_iterator<float,std::allocator<float> >,float *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@PAMV?$allocator@M@2@@stdext@@YAPAMV?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@0PAMAAV?$allocator@M@2@@Z
_TEXT	SEGMENT
$T83156 = -2						; size = 1
$T83155 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@PAMV?$allocator@M@2@@stdext@@YAPAMV?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@0PAMAAV?$allocator@M@2@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<float,std::allocator<float> >,float *,std::allocator<float> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83155[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@PAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@AAPAM@Z ; std::_Ptr_cat<std::_Vector_const_iterator<float,std::allocator<float> >,float *>
	add	esp, 8
	mov	BYTE PTR $T83156[ebp], al
	movzx	eax, BYTE PTR $T83155[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83156[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@@std@@YAPBMAAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<float,std::allocator<float> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@@std@@YAPBMAAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<float,std::allocator<float> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBMPAMV?$allocator@M@std@@@std@@YAPAMPBM0PAMAAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<float const *,float *,std::allocator<float> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@PAMV?$allocator@M@2@@stdext@@YAPAMV?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@0PAMAAV?$allocator@M@2@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<float,std::allocator<float> >,float *,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAM@std@@YAPAMAAPAMU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<float *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAM@std@@YAPAMAAPAM@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAM@std@@YAPAMAAPAM@Z PROC		; std::_Checked_base<float *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAMU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<float *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAM@std@@YAPAMAAPAM@Z ENDP		; std::_Checked_base<float *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAMPAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAMPAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM0@Z PROC ; std::_Iter_random<float *,float *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAMPAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM0@Z ENDP ; std::_Iter_random<float *,float *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z PROC ; std::_Ptr_cat<float *,float *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z ENDP ; std::_Ptr_cat<float *,float *>
_TEXT	ENDS
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<float *,float *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<float *,float *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAMPAMV?$allocator@M@std@@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<float *,float *,std::allocator<float> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z
_TEXT	SEGMENT
$T83168 = -2						; size = 1
$T83167 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<float *,float *,std::allocator<float> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83167[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z ; std::_Ptr_cat<float *,float *>
	add	esp, 8
	mov	BYTE PTR $T83168[ebp], al
	movzx	eax, BYTE PTR $T83167[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83168[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAMPAMV?$allocator@M@std@@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<float *,float *,std::allocator<float> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<float *,float *,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBHPAHV?$allocator@H@std@@@std@@YAPAHPBH0PAHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int const *,int *,std::allocator<int> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@@std@@YAPBHAAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<int,std::allocator<int> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@PAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@AAPAH@Z ; std::_Ptr_cat<std::_Vector_const_iterator<int,std::allocator<int> >,int *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@PAHV?$allocator@H@2@@stdext@@YAPAHV?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@0PAHAAV?$allocator@H@2@@Z
_TEXT	SEGMENT
$T83172 = -2						; size = 1
$T83171 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@PAHV?$allocator@H@2@@stdext@@YAPAHV?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@0PAHAAV?$allocator@H@2@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<int,std::allocator<int> >,int *,std::allocator<int> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83171[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@PAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@AAPAH@Z ; std::_Ptr_cat<std::_Vector_const_iterator<int,std::allocator<int> >,int *>
	add	esp, 8
	mov	BYTE PTR $T83172[ebp], al
	movzx	eax, BYTE PTR $T83171[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83172[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@@std@@YAPBHAAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<int,std::allocator<int> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@@std@@YAPBHAAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<int,std::allocator<int> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBHPAHV?$allocator@H@std@@@std@@YAPAHPBH0PAHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int const *,int *,std::allocator<int> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@PAHV?$allocator@H@2@@stdext@@YAPAHV?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@0PAHAAV?$allocator@H@2@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<int,std::allocator<int> >,int *,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<int *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAH@std@@YAPAHAAPAH@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAH@std@@YAPAHAAPAH@Z PROC		; std::_Checked_base<int *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<int *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAH@std@@YAPAHAAPAH@Z ENDP		; std::_Checked_base<int *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z PROC ; std::_Iter_random<int *,int *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z ENDP ; std::_Iter_random<int *,int *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z PROC ; std::_Ptr_cat<int *,int *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ENDP ; std::_Ptr_cat<int *,int *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<int *,int *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt@2

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt@2:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<int *,int *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int *,int *,std::allocator<int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
$T83184 = -2						; size = 1
$T83183 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83183[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
	add	esp, 8
	mov	BYTE PTR $T83184[ebp], al
	movzx	eax, BYTE PTR $T83183[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83184[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int *,int *,std::allocator<int> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@2@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@5@@Z
_TEXT	SEGMENT
$T83188 = -2						; size = 1
$T83187 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@2@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@5@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83187[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T83188[ebp], al
	movzx	eax, BYTE PTR $T83187[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83188[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@2@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@5@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@2@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@5@@Z
_TEXT	SEGMENT
$T83192 = -2						; size = 1
$T83191 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@2@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@5@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83191[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T83192[ebp], al
	movzx	eax, BYTE PTR $T83191[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83192[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@2@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@5@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@2@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@5@@Z
_TEXT	SEGMENT
$T83196 = -2						; size = 1
$T83195 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@2@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@5@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83195[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T83196[ebp], al
	movzx	eax, BYTE PTR $T83195[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83196[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@2@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@5@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@2@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@5@@Z
_TEXT	SEGMENT
$T83200 = -2						; size = 1
$T83199 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@2@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@5@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83199[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T83200[ebp], al
	movzx	eax, BYTE PTR $T83199[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83200[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@2@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@5@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBDPADV?$allocator@D@std@@@std@@YAPADPBD0PADAAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<char const *,char *,std::allocator<char> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@@std@@YAPBDAAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<char,std::allocator<char> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@PAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@AAPAD@Z ; std::_Ptr_cat<std::_Vector_const_iterator<char,std::allocator<char> >,char *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@PADV?$allocator@D@2@@stdext@@YAPADV?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@0PADAAV?$allocator@D@2@@Z
_TEXT	SEGMENT
$T83204 = -2						; size = 1
$T83203 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@PADV?$allocator@D@2@@stdext@@YAPADV?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@0PADAAV?$allocator@D@2@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<char,std::allocator<char> >,char *,std::allocator<char> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83203[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@PAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@AAPAD@Z ; std::_Ptr_cat<std::_Vector_const_iterator<char,std::allocator<char> >,char *>
	add	esp, 8
	mov	BYTE PTR $T83204[ebp], al
	movzx	eax, BYTE PTR $T83203[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83204[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@@std@@YAPBDAAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<char,std::allocator<char> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@@std@@YAPBDAAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<char,std::allocator<char> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBDPADV?$allocator@D@std@@@std@@YAPADPBD0PADAAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<char const *,char *,std::allocator<char> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@PADV?$allocator@D@2@@stdext@@YAPADV?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@0PADAAV?$allocator@D@2@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<char,std::allocator<char> >,char *,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAD@std@@YAPADAAPADU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<char *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAD@std@@YAPADAAPAD@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAD@std@@YAPADAAPAD@Z PROC		; std::_Checked_base<char *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAD@std@@YAPADAAPADU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<char *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAD@std@@YAPADAAPAD@Z ENDP		; std::_Checked_base<char *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PADPAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PADPAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD0@Z PROC ; std::_Iter_random<char *,char *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PADPAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD0@Z ENDP ; std::_Iter_random<char *,char *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PADPAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAD0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PADPAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAD0@Z PROC ; std::_Ptr_cat<char *,char *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PADPAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAD0@Z ENDP ; std::_Ptr_cat<char *,char *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PADPADUrandom_access_iterator_tag@std@@@std@@YAPADPAD00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PADPADUrandom_access_iterator_tag@std@@@std@@YAPADPAD00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<char *,char *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Result$[ebp], ecx

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt@3

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt@3:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PADPADUrandom_access_iterator_tag@std@@@std@@YAPADPAD00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<char *,char *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<char *,char *,std::allocator<char> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PADPADV?$allocator@D@std@@@stdext@@YAPADPAD00AAV?$allocator@D@std@@@Z
_TEXT	SEGMENT
$T83216 = -2						; size = 1
$T83215 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PADPADV?$allocator@D@std@@@stdext@@YAPADPAD00AAV?$allocator@D@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<char *,char *,std::allocator<char> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83215[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PADPAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAD0@Z ; std::_Ptr_cat<char *,char *>
	add	esp, 8
	mov	BYTE PTR $T83216[ebp], al
	movzx	eax, BYTE PTR $T83215[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83216[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAD@std@@YAPADAAPAD@Z	; std::_Checked_base<char *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAD@std@@YAPADAAPAD@Z	; std::_Checked_base<char *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<char *,char *,std::allocator<char> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PADPADV?$allocator@D@std@@@stdext@@YAPADPAD00AAV?$allocator@D@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<char *,char *,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBQAVSurfaceData@Ogre@@PAPAV12@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAPAPAVSurfaceData@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVSurfaceData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SurfaceData * const *,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@@std@@YAPBQAVSurfaceData@Ogre@@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@PAPAVSurfaceData@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@AAPAPAVSurfaceData@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >,Ogre::SurfaceData * *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@PAPAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@2@@stdext@@YAPAPAVSurfaceData@Ogre@@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVSurfaceData@Ogre@@@4@@Z
_TEXT	SEGMENT
$T83220 = -2						; size = 1
$T83219 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@PAPAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@2@@stdext@@YAPAPAVSurfaceData@Ogre@@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVSurfaceData@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83219[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@PAPAVSurfaceData@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@AAPAPAVSurfaceData@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >,Ogre::SurfaceData * *>
	add	esp, 8
	mov	BYTE PTR $T83220[ebp], al
	movzx	eax, BYTE PTR $T83219[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83220[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@@std@@YAPBQAVSurfaceData@Ogre@@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@@std@@YAPBQAVSurfaceData@Ogre@@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBQAVSurfaceData@Ogre@@PAPAV12@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAPAPAVSurfaceData@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVSurfaceData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SurfaceData * const *,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@PAPAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@2@@stdext@@YAPAPAVSurfaceData@Ogre@@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVSurfaceData@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAPAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::SurfaceData * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@AAPAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAPAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@AAPAPAV12@@Z PROC ; std::_Checked_base<Ogre::SurfaceData * *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::SurfaceData * *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAPAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@AAPAPAV12@@Z ENDP ; std::_Checked_base<Ogre::SurfaceData * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAPAVSurfaceData@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVSurfaceData@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAPAVSurfaceData@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVSurfaceData@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::SurfaceData * *,Ogre::SurfaceData * *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAPAVSurfaceData@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVSurfaceData@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::SurfaceData * *,Ogre::SurfaceData * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAVSurfaceData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVSurfaceData@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAVSurfaceData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVSurfaceData@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::SurfaceData * *,Ogre::SurfaceData * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAPAVSurfaceData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVSurfaceData@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::SurfaceData * *,Ogre::SurfaceData * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAPAVSurfaceData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAPAVSurfaceData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::SurfaceData * *,Ogre::SurfaceData * *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt@4

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt@4:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAPAVSurfaceData@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::SurfaceData * *,Ogre::SurfaceData * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAVSurfaceData@Ogre@@PAPAV12@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00AAV?$allocator@PAVSurfaceData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SurfaceData * *,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVSurfaceData@Ogre@@PAPAV12@V?$allocator@PAVSurfaceData@Ogre@@@std@@@stdext@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00AAV?$allocator@PAVSurfaceData@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83232 = -2						; size = 1
$T83231 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVSurfaceData@Ogre@@PAPAV12@V?$allocator@PAVSurfaceData@Ogre@@@std@@@stdext@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00AAV?$allocator@PAVSurfaceData@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::SurfaceData * *,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83231[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVSurfaceData@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVSurfaceData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SurfaceData * *,Ogre::SurfaceData * *>
	add	esp, 8
	mov	BYTE PTR $T83232[ebp], al
	movzx	eax, BYTE PTR $T83231[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83232[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::SurfaceData * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::SurfaceData * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAPAVSurfaceData@Ogre@@PAPAV12@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00AAV?$allocator@PAVSurfaceData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SurfaceData * *,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAVSurfaceData@Ogre@@PAPAV12@V?$allocator@PAVSurfaceData@Ogre@@@std@@@stdext@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00AAV?$allocator@PAVSurfaceData@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::SurfaceData * *,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z PROC ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ENDP ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83243 = -7						; size = 1
$T83242 = -6						; size = 1
$T83241 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Result$[ebp], edx

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83241[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T83242[ebp], cl
	movzx	edx, BYTE PTR $T83241[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83242[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83243[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83247 = -2						; size = 1
$T83246 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83246[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T83247[ebp], al
	movzx	eax, BYTE PTR $T83246[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83247[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@@Z ; std::allocator<Ogre::Vector2>::destroy
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@0AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@0AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::Vector2> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@@Z ; std::allocator<Ogre::Vector2>::destroy
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@0AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::Vector2> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<float> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<float> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83264 = -7						; size = 1
$T83263 = -6						; size = 1
$T83262 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Result$[ebp], eax

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T83262[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T83263[ebp], al
	movzx	ecx, BYTE PTR $T83262[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T83263[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83264[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83268 = -2						; size = 1
$T83267 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83267[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T83268[ebp], al
	movzx	eax, BYTE PTR $T83267[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83268[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83279 = -7						; size = 1
$T83278 = -6						; size = 1
$T83277 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 5
	shl	eax, 5
	add	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Result$[ebp], eax

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	ecx, ecx
	mov	BYTE PTR $T83277[ebp], cl
	xor	edx, edx
	mov	BYTE PTR $T83278[ebp], dl
	movzx	eax, BYTE PTR $T83277[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83278[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T83279[ebp]
	push	edx
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83283 = -2						; size = 1
$T83282 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83282[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T83283[ebp], al
	movzx	eax, BYTE PTR $T83282[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83283[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83294 = -7						; size = 1
$T83293 = -6						; size = 1
$T83292 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Result$[ebp], edx

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83292[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T83293[ebp], cl
	movzx	edx, BYTE PTR $T83292[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83293[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83294[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83298 = -2						; size = 1
$T83297 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83297[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T83298[ebp], al
	movzx	eax, BYTE PTR $T83297[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83298[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83309 = -7						; size = 1
$T83308 = -6						; size = 1
$T83307 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Result$[ebp], edx

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83307[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T83308[ebp], cl
	movzx	edx, BYTE PTR $T83307[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83308[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83309[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83313 = -2						; size = 1
$T83312 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83312[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T83313[ebp], al
	movzx	eax, BYTE PTR $T83312[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83313[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<char> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<char> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAXPAPAVSurfaceData@Ogre@@0AAV?$allocator@PAVSurfaceData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAXPAPAVSurfaceData@Ogre@@0AAV?$allocator@PAVSurfaceData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::SurfaceData *> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAXPAPAVSurfaceData@Ogre@@0AAV?$allocator@PAVSurfaceData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::SurfaceData *> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::destroy
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra@2
$LN2@Destroy_ra@2:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@2:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra@2

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::destroy
	jmp	SHORT $LN2@Destroy_ra@2
$LN4@Destroy_ra@2:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::destroy
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra@3
$LN2@Destroy_ra@3:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@3:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra@3

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::destroy
	jmp	SHORT $LN2@Destroy_ra@3
$LN4@Destroy_ra@3:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::destroy
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra@4
$LN2@Destroy_ra@4:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@4:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra@4

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::destroy
	jmp	SHORT $LN2@Destroy_ra@4
$LN4@Destroy_ra@4:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::destroy
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra@5
$LN2@Destroy_ra@5:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@5:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra@5

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::destroy
	jmp	SHORT $LN2@Destroy_ra@5
$LN4@Destroy_ra@5:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::destroy
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra@6
$LN2@Destroy_ra@6:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@6:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra@6

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::destroy
	jmp	SHORT $LN2@Destroy_ra@6
$LN4@Destroy_ra@6:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Umove<Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Umove<Ogre::BaseKeyFrameArray::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z PROC ; std::fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z ENDP ; std::fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::_Move_cat<Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T83336 = -3						; size = 1
$T83335 = -2						; size = 1
$T83334 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z PROC ; stdext::_Unchecked_move_backward<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83334[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::_Move_cat<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	mov	BYTE PTR $T83335[ebp], al
	movzx	edx, BYTE PTR $T83334[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83335[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T83336[ebp]
	push	eax
	call	??$_Iter_random@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Iter_random<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z ENDP ; stdext::_Unchecked_move_backward<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAVVector2@Ogre@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAVVector2@Ogre@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV23@00@Z PROC ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Umove<Ogre::Vector2 *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAVVector2@Ogre@@@?$vector@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@IAEPAVVector2@Ogre@@PAV23@00@Z ENDP ; std::vector<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Umove<Ogre::Vector2 *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAVVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@0ABV12@@Z ; std::_Fill<Ogre::Vector2 *,Ogre::Vector2>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAVVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@0ABV12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAVVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@0ABV12@@Z PROC ; std::fill<Ogre::Vector2 *,Ogre::Vector2>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Vector2 *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Vector2 *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAVVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@0ABV12@@Z ; std::_Fill<Ogre::Vector2 *,Ogre::Vector2>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAVVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@0ABV12@@Z ENDP ; std::fill<Ogre::Vector2 *,Ogre::Vector2>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAVVector2@Ogre@@PAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAVVector2@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::Vector2 *,Ogre::Vector2 *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAVVector2@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAVVector2@Ogre@@@Z ; std::_Move_cat<Ogre::Vector2 *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAVVector2@Ogre@@PAV12@@stdext@@YAPAVVector2@Ogre@@PAV12@00@Z
_TEXT	SEGMENT
$T83345 = -3						; size = 1
$T83344 = -2						; size = 1
$T83343 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAVVector2@Ogre@@PAV12@@stdext@@YAPAVVector2@Ogre@@PAV12@00@Z PROC ; stdext::_Unchecked_move_backward<Ogre::Vector2 *,Ogre::Vector2 *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83343[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAVVector2@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAVVector2@Ogre@@@Z ; std::_Move_cat<Ogre::Vector2 *>
	add	esp, 4
	mov	BYTE PTR $T83344[ebp], al
	movzx	edx, BYTE PTR $T83343[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83344[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T83345[ebp]
	push	eax
	call	??$_Iter_random@PAVVector2@Ogre@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVVector2@Ogre@@0@Z ; std::_Iter_random<Ogre::Vector2 *,Ogre::Vector2 *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Vector2 *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Vector2 *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAVVector2@Ogre@@PAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAVVector2@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::Vector2 *,Ogre::Vector2 *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAVVector2@Ogre@@PAV12@@stdext@@YAPAVVector2@Ogre@@PAV12@00@Z ENDP ; stdext::_Unchecked_move_backward<Ogre::Vector2 *,Ogre::Vector2 *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z ; stdext::_Unchecked_uninitialized_move<float *,float *,std::allocator<float> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z PROC ; std::vector<float,std::allocator<float> >::_Umove<float *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z ; stdext::_Unchecked_uninitialized_move<float *,float *,std::allocator<float> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ENDP ; std::vector<float,std::allocator<float> >::_Umove<float *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAMM@std@@YAXPAM0ABM@Z			; std::_Fill<float *,float>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAMM@std@@YAXPAM0ABM@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAMM@std@@YAXPAM0ABM@Z PROC			; std::fill<float *,float>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAMM@std@@YAXPAM0ABM@Z		; std::_Fill<float *,float>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAMM@std@@YAXPAM0ABM@Z ENDP			; std::fill<float *,float>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<float *,float *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAM@std@@YA?AU_Undefined_move_tag@0@ABQAM@Z ; std::_Move_cat<float *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAMPAM@stdext@@YAPAMPAM00@Z
_TEXT	SEGMENT
$T83354 = -3						; size = 1
$T83353 = -2						; size = 1
$T83352 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAMPAM@stdext@@YAPAMPAM00@Z PROC ; stdext::_Unchecked_move_backward<float *,float *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83352[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAM@std@@YA?AU_Undefined_move_tag@0@ABQAM@Z ; std::_Move_cat<float *>
	add	esp, 4
	mov	BYTE PTR $T83353[ebp], al
	movzx	edx, BYTE PTR $T83352[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83353[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T83354[ebp]
	push	eax
	call	??$_Iter_random@PAMPAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM0@Z ; std::_Iter_random<float *,float *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<float *,float *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAMPAM@stdext@@YAPAMPAM00@Z ENDP ; stdext::_Unchecked_move_backward<float *,float *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::_Unchecked_uninitialized_move<int *,int *,std::allocator<int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::_Unchecked_uninitialized_move<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAHH@std@@YAXPAH0ABH@Z			; std::_Fill<int *,int>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAHH@std@@YAXPAH0ABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAHH@std@@YAXPAH0ABH@Z PROC			; std::fill<int *,int>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAHH@std@@YAXPAH0ABH@Z		; std::_Fill<int *,int>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAHH@std@@YAXPAH0ABH@Z ENDP			; std::fill<int *,int>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<int *,int *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z ; std::_Move_cat<int *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T83363 = -3						; size = 1
$T83362 = -2						; size = 1
$T83361 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z PROC ; stdext::_Unchecked_move_backward<int *,int *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83361[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z ; std::_Move_cat<int *>
	add	esp, 4
	mov	BYTE PTR $T83362[ebp], al
	movzx	edx, BYTE PTR $T83361[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83362[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T83363[ebp]
	push	eax
	call	??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z ; std::_Iter_random<int *,int *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<int *,int *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ENDP ; stdext::_Unchecked_move_backward<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z PROC ; std::fill<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z ENDP ; std::fill<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T83372 = -3						; size = 1
$T83371 = -2						; size = 1
$T83370 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z PROC ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83370[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 4
	mov	BYTE PTR $T83371[ebp], al
	movzx	edx, BYTE PTR $T83370[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83371[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T83372[ebp]
	push	eax
	call	??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ENDP ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z PROC ; std::fill<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z ENDP ; std::fill<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T83381 = -3						; size = 1
$T83380 = -2						; size = 1
$T83379 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z PROC ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83379[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 4
	mov	BYTE PTR $T83380[ebp], al
	movzx	edx, BYTE PTR $T83379[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83380[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T83381[ebp]
	push	eax
	call	??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00@Z ENDP ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z PROC ; std::fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ENDP ; std::fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T83390 = -3						; size = 1
$T83389 = -2						; size = 1
$T83388 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z PROC ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83388[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	mov	BYTE PTR $T83389[ebp], al
	movzx	edx, BYTE PTR $T83388[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83389[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T83390[ebp]
	push	eax
	call	??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ENDP ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z PROC ; std::fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ENDP ; std::fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T83399 = -3						; size = 1
$T83398 = -2						; size = 1
$T83397 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z PROC ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83397[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	mov	BYTE PTR $T83398[ebp], al
	movzx	edx, BYTE PTR $T83397[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83398[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T83399[ebp]
	push	eax
	call	??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ENDP ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83403 = -2						; size = 1
$T83402 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83402[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T83403[ebp], al
	movzx	eax, BYTE PTR $T83402[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83403[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::Vector2 *,unsigned int,Ogre::Vector2,std::allocator<Ogre::Vector2> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83407 = -2						; size = 1
$T83406 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Ogre::Vector2 *,unsigned int,Ogre::Vector2,std::allocator<Ogre::Vector2> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83406[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAVVector2@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVVector2@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Vector2 *,Ogre::Vector2 *>
	add	esp, 8
	mov	BYTE PTR $T83407[ebp], al
	movzx	eax, BYTE PTR $T83406[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83407[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::Vector2 *,unsigned int,Ogre::Vector2,std::allocator<Ogre::Vector2> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Ogre::Vector2 *,unsigned int,Ogre::Vector2,std::allocator<Ogre::Vector2> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAMIMV?$allocator@M@std@@@std@@YAXPAMIABMAAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<float *,unsigned int,float,std::allocator<float> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAMIMV?$allocator@M@std@@@stdext@@YAXPAMIABMAAV?$allocator@M@std@@@Z
_TEXT	SEGMENT
$T83411 = -2						; size = 1
$T83410 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAMIMV?$allocator@M@std@@@stdext@@YAXPAMIABMAAV?$allocator@M@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<float *,unsigned int,float,std::allocator<float> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83410[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z ; std::_Ptr_cat<float *,float *>
	add	esp, 8
	mov	BYTE PTR $T83411[ebp], al
	movzx	eax, BYTE PTR $T83410[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83411[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAMIMV?$allocator@M@std@@@std@@YAXPAMIABMAAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<float *,unsigned int,float,std::allocator<float> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAMIMV?$allocator@M@std@@@stdext@@YAXPAMIABMAAV?$allocator@M@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<float *,unsigned int,float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<int *,unsigned int,int,std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
$T83415 = -2						; size = 1
$T83414 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,std::allocator<int> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83414[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
	add	esp, 8
	mov	BYTE PTR $T83415[ebp], al
	movzx	eax, BYTE PTR $T83414[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83415[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<int *,unsigned int,int,std::allocator<int> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83419 = -2						; size = 1
$T83418 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83418[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T83419[ebp], al
	movzx	eax, BYTE PTR $T83418[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83419[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83423 = -2						; size = 1
$T83422 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83422[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T83423[ebp], al
	movzx	eax, BYTE PTR $T83422[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83423[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83427 = -2						; size = 1
$T83426 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83426[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T83427[ebp], al
	movzx	eax, BYTE PTR $T83426[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83427[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83431 = -2						; size = 1
$T83430 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83430[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T83431[ebp], al
	movzx	eax, BYTE PTR $T83430[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83431[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
_TEXT	ENDS
PUBLIC	??$_Destroy@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::_Destroy<Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z PROC ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::_Destroy<Ogre::BaseKeyFrameArray::AnimRange>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ENDP ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@VVector2@Ogre@@@std@@YAXPAVVector2@Ogre@@@Z ; std::_Destroy<Ogre::Vector2>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@@Z PROC ; std::allocator<Ogre::Vector2>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@VVector2@Ogre@@@std@@YAXPAVVector2@Ogre@@@Z ; std::_Destroy<Ogre::Vector2>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@@Z ENDP ; std::allocator<Ogre::Vector2>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<float>::KEYFRAME_T>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::destroy
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUAnimRange@BaseKeyFrameArray@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@std@@YAPBUAnimRange@BaseKeyFrameArray@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@std@@YAPBUAnimRange@BaseKeyFrameArray@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUAnimRange@BaseKeyFrameArray@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@std@@YAPBUAnimRange@BaseKeyFrameArray@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >,Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >,Ogre::BaseKeyFrameArray::AnimRange *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU345@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU345@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::construct
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::destroy
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBVVector2@Ogre@@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@std@@YAPBVVector2@Ogre@@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@std@@YAPBVVector2@Ogre@@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBVVector2@Ogre@@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@@std@@YAPBVVector2@Ogre@@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@PAVVector2@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@AAPAVVector2@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@PAVVector2@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@AAPAVVector2@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >,Ogre::Vector2 *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@PAVVector2@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@AAPAVVector2@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >,Ogre::Vector2 *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@ABV34@@Z ; std::allocator<Ogre::Vector2>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::Vector2 const *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@2
$LN5@Uninit_cop@2:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@2:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@ABV34@@Z ; std::allocator<Ogre::Vector2>::construct
	jmp	SHORT $LN5@Uninit_cop@2
$LN4@Uninit_cop@2:
	jmp	SHORT $LN10@Uninit_cop@2
__catch$??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@2
$LN2@Uninit_cop@2:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@2:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@2

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@@Z ; std::allocator<Ogre::Vector2>::destroy
	jmp	SHORT $LN2@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@2:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PBV12@0PAV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::Vector2 const *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::Vector2 *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::Vector2 *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAVVector2@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVVector2@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAVVector2@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVVector2@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::Vector2 *,Ogre::Vector2 *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@5
$LN2@Copy_opt@5:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 8
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@5:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@5

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	call	??4Vector2@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector2::operator=
	jmp	SHORT $LN2@Copy_opt@5
$LN1@Copy_opt@5:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAVVector2@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVVector2@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::Vector2 *,Ogre::Vector2 *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@3
$LN5@Uninit_cop@3:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@3:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@3

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@ABV34@@Z ; std::allocator<Ogre::Vector2>::construct
	jmp	SHORT $LN5@Uninit_cop@3
$LN4@Uninit_cop@3:
	jmp	SHORT $LN10@Uninit_cop@3
__catch$??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@3
$LN2@Uninit_cop@3:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@3:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@3

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@@Z ; std::allocator<Ogre::Vector2>::destroy
	jmp	SHORT $LN2@Uninit_cop@3
$LN1@Uninit_cop@3:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@3:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBMAAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<float,std::allocator<float> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@@std@@YAPBMAAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@@std@@YAPBMAAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<float,std::allocator<float> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBMAAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<float,std::allocator<float> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@@std@@YAPBMAAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<float,std::allocator<float> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@PAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@AAPAM@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@PAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@AAPAM@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<float,std::allocator<float> >,float *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@PAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@AAPAM@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<float,std::allocator<float> >,float *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PBMPAMV?$allocator@M@std@@@std@@YAPAMPBM0PAMAAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBMPAMV?$allocator@M@std@@@std@@YAPAMPBM0PAMAAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<float const *,float *,std::allocator<float> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@4

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@4:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBMPAMV?$allocator@M@std@@@std@@YAPAMPBM0PAMAAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<float const *,float *,std::allocator<float> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAM@std@@YAPAMAAPAMU_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAM@std@@YAPAMAAPAMU_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<float *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAM@std@@YAPAMAAPAMU_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<float *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAMPAMV?$allocator@M@std@@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAMPAMV?$allocator@M@std@@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<float *,float *,std::allocator<float> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@5

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@5:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAMPAMV?$allocator@M@std@@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<float *,float *,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBHAAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<int,std::allocator<int> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@@std@@YAPBHAAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@@std@@YAPBHAAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<int,std::allocator<int> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBHAAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<int,std::allocator<int> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@@std@@YAPBHAAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<int,std::allocator<int> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@PAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@AAPAH@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@PAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@AAPAH@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<int,std::allocator<int> >,int *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@PAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@AAPAH@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<int,std::allocator<int> >,int *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PBHPAHV?$allocator@H@std@@@std@@YAPAHPBH0PAHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBHPAHV?$allocator@H@std@@@std@@YAPAHPBH0PAHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<int const *,int *,std::allocator<int> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@6

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@6:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBHPAHV?$allocator@H@std@@@std@@YAPAHPBH0PAHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<int const *,int *,std::allocator<int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<int *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<int *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<int *,int *,std::allocator<int> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@7

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@7:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<int *,int *,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@8
$LN5@Uninit_cop@8:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@8:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@8

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::construct
	jmp	SHORT $LN5@Uninit_cop@8
$LN4@Uninit_cop@8:
	jmp	SHORT $LN10@Uninit_cop@8
__catch$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@8
$LN2@Uninit_cop@8:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@8:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@8

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::destroy
	jmp	SHORT $LN2@Uninit_cop@8
$LN1@Uninit_cop@8:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@8:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@8:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@9
$LN5@Uninit_cop@9:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@9:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@9

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::construct
	jmp	SHORT $LN5@Uninit_cop@9
$LN4@Uninit_cop@9:
	jmp	SHORT $LN10@Uninit_cop@9
__catch$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@9
$LN2@Uninit_cop@9:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@9:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@9

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::destroy
	jmp	SHORT $LN2@Uninit_cop@9
$LN1@Uninit_cop@9:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@9:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@9:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >,Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@10
$LN5@Uninit_cop@10:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@10:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@10

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::construct
	jmp	SHORT $LN5@Uninit_cop@10
$LN4@Uninit_cop@10:
	jmp	SHORT $LN10@Uninit_cop@10
__catch$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@10
$LN2@Uninit_cop@10:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@10:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@10

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::destroy
	jmp	SHORT $LN2@Uninit_cop@10
$LN1@Uninit_cop@10:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@10:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@10:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@11
$LN5@Uninit_cop@11:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@11:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@11

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::construct
	jmp	SHORT $LN5@Uninit_cop@11
$LN4@Uninit_cop@11:
	jmp	SHORT $LN10@Uninit_cop@11
__catch$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@11
$LN2@Uninit_cop@11:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@11:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@11

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::destroy
	jmp	SHORT $LN2@Uninit_cop@11
$LN1@Uninit_cop@11:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@11:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@11:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBU123@0PAU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBDAAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<char,std::allocator<char> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@@std@@YAPBDAAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@@std@@YAPBDAAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<char,std::allocator<char> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBDAAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<char,std::allocator<char> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@@std@@YAPBDAAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<char,std::allocator<char> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@PAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@AAPAD@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@PAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@AAPAD@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<char,std::allocator<char> >,char *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@PAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@AAPAD@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<char,std::allocator<char> >,char *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PBDPADV?$allocator@D@std@@@std@@YAPADPBD0PADAAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBDPADV?$allocator@D@std@@@std@@YAPADPBD0PADAAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<char const *,char *,std::allocator<char> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Result$[ebp], ecx

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@12

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@12:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBDPADV?$allocator@D@std@@@std@@YAPADPBD0PADAAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<char const *,char *,std::allocator<char> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAD@std@@YAPADAAPADU_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAD@std@@YAPADAAPADU_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<char *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAD@std@@YAPADAAPADU_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<char *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<char *,char *,std::allocator<char> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Result$[ebp], ecx

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@13

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@13:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<char *,char *,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVSurfaceData@Ogre@@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@@std@@YAPBQAVSurfaceData@Ogre@@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@@std@@YAPBQAVSurfaceData@Ogre@@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVSurfaceData@Ogre@@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@@std@@YAPBQAVSurfaceData@Ogre@@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@PAPAVSurfaceData@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@AAPAPAVSurfaceData@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@PAPAVSurfaceData@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@AAPAPAVSurfaceData@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >,Ogre::SurfaceData * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@PAPAVSurfaceData@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@AAPAPAVSurfaceData@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >,Ogre::SurfaceData * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PBQAVSurfaceData@Ogre@@PAPAV12@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAPAPAVSurfaceData@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVSurfaceData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBQAVSurfaceData@Ogre@@PAPAV12@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAPAPAVSurfaceData@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVSurfaceData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::SurfaceData * const *,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@14

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@14:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBQAVSurfaceData@Ogre@@PAPAV12@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAPAPAVSurfaceData@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVSurfaceData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::SurfaceData * const *,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAPAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::SurfaceData * *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAPAVSurfaceData@Ogre@@@std@@YAPAPAVSurfaceData@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::SurfaceData * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAVSurfaceData@Ogre@@PAPAV12@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00AAV?$allocator@PAVSurfaceData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVSurfaceData@Ogre@@PAPAV12@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00AAV?$allocator@PAVSurfaceData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::SurfaceData * *,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@15

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@15:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAVSurfaceData@Ogre@@PAPAV12@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@YAPAPAVSurfaceData@Ogre@@PAPAV12@00AAV?$allocator@PAVSurfaceData@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::SurfaceData * *,Ogre::SurfaceData * *,std::allocator<Ogre::SurfaceData *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@6
$LN2@Copy_opt@6:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 8
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@6:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@6

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_opt@6
$LN1@Copy_opt@6:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@16
$LN5@Uninit_cop@16:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@16:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@16

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU345@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::construct
	jmp	SHORT $LN5@Uninit_cop@16
$LN4@Uninit_cop@16:
	jmp	SHORT $LN10@Uninit_cop@16
__catch$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@16
$LN2@Uninit_cop@16:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@16:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@16

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::destroy
	jmp	SHORT $LN2@Uninit_cop@16
$LN1@Uninit_cop@16:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@16:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@16:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@7
$LN2@Copy_opt@7:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@7:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@7

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN2@Copy_opt@7
$LN1@Copy_opt@7:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@17
$LN5@Uninit_cop@17:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@17:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@17

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::construct
	jmp	SHORT $LN5@Uninit_cop@17
$LN4@Uninit_cop@17:
	jmp	SHORT $LN10@Uninit_cop@17
__catch$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@17
$LN2@Uninit_cop@17:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@17:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@17

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::destroy
	jmp	SHORT $LN2@Uninit_cop@17
$LN1@Uninit_cop@17:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@17:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@17:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@8
$LN2@Copy_opt@8:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@8:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@8

; 2472 : 		*_Dest = *_First;

	mov	esi, DWORD PTR __First$[ebp]
	mov	ecx, 8
	mov	edi, DWORD PTR __Dest$[ebp]
	rep movsd
	jmp	SHORT $LN2@Copy_opt@8
$LN1@Copy_opt@8:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	edi
	pop	esi
	pop	ebp
	ret	0
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@18
$LN5@Uninit_cop@18:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@18:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@18

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::construct
	jmp	SHORT $LN5@Uninit_cop@18
$LN4@Uninit_cop@18:
	jmp	SHORT $LN10@Uninit_cop@18
__catch$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@18
$LN2@Uninit_cop@18:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@18:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@18

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::destroy
	jmp	SHORT $LN2@Uninit_cop@18
$LN1@Uninit_cop@18:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@18:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@18:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@9
$LN2@Copy_opt@9:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 8
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@9:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@9

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_opt@9
$LN1@Copy_opt@9:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@19
$LN5@Uninit_cop@19:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@19:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@19

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::construct
	jmp	SHORT $LN5@Uninit_cop@19
$LN4@Uninit_cop@19:
	jmp	SHORT $LN10@Uninit_cop@19
__catch$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@19
$LN2@Uninit_cop@19:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@19:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@19

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::destroy
	jmp	SHORT $LN2@Uninit_cop@19
$LN1@Uninit_cop@19:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@19:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@19:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@10
$LN2@Copy_opt@10:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 8
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@10:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@10

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_opt@10
$LN1@Copy_opt@10:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@20
$LN5@Uninit_cop@20:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@20:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@20

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::construct
	jmp	SHORT $LN5@Uninit_cop@20
$LN4@Uninit_cop@20:
	jmp	SHORT $LN10@Uninit_cop@20
__catch$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@20
$LN2@Uninit_cop@20:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@20:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@20

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::destroy
	jmp	SHORT $LN2@Uninit_cop@20
$LN1@Uninit_cop@20:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@20:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@20:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	??$_Uninit_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_uninitialized_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83715 = -2						; size = 1
$T83714 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83714[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::_Move_cat<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	mov	BYTE PTR $T83715[ebp], al
	movzx	edx, BYTE PTR $T83714[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83715[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z PROC ; std::_Fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill
$LN2@Fill:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN2@Fill
$LN4@Fill:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z ENDP ; std::_Fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@@Z PROC ; std::_Move_cat<Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ENDP ; std::_Move_cat<Ogre::BaseKeyFrameArray::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83723 = -2						; size = 1
$T83722 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83722[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T83723[ebp], al
	movzx	eax, BYTE PTR $T83722[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83723[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@U_Undefined_move_tag@4@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83727 = -2						; size = 1
$T83726 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83726[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAVVector2@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAVVector2@Ogre@@@Z ; std::_Move_cat<Ogre::Vector2 *>
	add	esp, 4
	mov	BYTE PTR $T83727[ebp], al
	movzx	edx, BYTE PTR $T83726[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83727[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Vector2 *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Vector2 *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@U_Undefined_move_tag@4@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAVVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@0ABV12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAVVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@0ABV12@@Z PROC ; std::_Fill<Ogre::Vector2 *,Ogre::Vector2>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill@2
$LN2@Fill@2:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill@2:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill@2

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR __First$[ebp]
	call	??4Vector2@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector2::operator=
	jmp	SHORT $LN2@Fill@2
$LN4@Fill@2:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@PAVVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@0ABV12@@Z ENDP ; std::_Fill<Ogre::Vector2 *,Ogre::Vector2>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAVVector2@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAVVector2@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAVVector2@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAVVector2@Ogre@@@Z PROC ; std::_Move_cat<Ogre::Vector2 *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAVVector2@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAVVector2@Ogre@@@Z ENDP ; std::_Move_cat<Ogre::Vector2 *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAVVector2@Ogre@@PAV12@@std@@YAPAVVector2@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::Vector2 *,Ogre::Vector2 *>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAVVector2@Ogre@@PAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAVVector2@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83735 = -2						; size = 1
$T83734 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAVVector2@Ogre@@PAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAVVector2@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<Ogre::Vector2 *,Ogre::Vector2 *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83734[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAVVector2@Ogre@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVVector2@Ogre@@0@Z ; std::_Ptr_cat<Ogre::Vector2 *,Ogre::Vector2 *>
	add	esp, 8
	mov	BYTE PTR $T83735[ebp], al
	movzx	eax, BYTE PTR $T83734[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83735[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAVVector2@Ogre@@PAV12@@std@@YAPAVVector2@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::Vector2 *,Ogre::Vector2 *>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAVVector2@Ogre@@PAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAVVector2@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<Ogre::Vector2 *,Ogre::Vector2 *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAMPAMV?$allocator@M@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<float *,float *,std::allocator<float>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z
_TEXT	SEGMENT
$T83739 = -2						; size = 1
$T83738 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<float *,float *,std::allocator<float> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83738[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAM@std@@YA?AU_Undefined_move_tag@0@ABQAM@Z ; std::_Move_cat<float *>
	add	esp, 4
	mov	BYTE PTR $T83739[ebp], al
	movzx	edx, BYTE PTR $T83738[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83739[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAMPAMV?$allocator@M@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<float *,float *,std::allocator<float>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<float *,float *,std::allocator<float> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAMM@std@@YAXPAM0ABM@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAMM@std@@YAXPAM0ABM@Z PROC			; std::_Fill<float *,float>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill@3
$LN2@Fill@3:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill@3:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Fill@3

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx]
	jmp	SHORT $LN2@Fill@3
$LN1@Fill@3:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@PAMM@std@@YAXPAM0ABM@Z ENDP			; std::_Fill<float *,float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAM@std@@YA?AU_Undefined_move_tag@0@ABQAM@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAM@std@@YA?AU_Undefined_move_tag@0@ABQAM@Z PROC ; std::_Move_cat<float *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAM@std@@YA?AU_Undefined_move_tag@0@ABQAM@Z ENDP ; std::_Move_cat<float *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<float *,float *,std::random_access_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83747 = -2						; size = 1
$T83746 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<float *,float *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83746[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z ; std::_Ptr_cat<float *,float *>
	add	esp, 8
	mov	BYTE PTR $T83747[ebp], al
	movzx	eax, BYTE PTR $T83746[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83747[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<float *,float *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<float *,float *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<int *,int *,std::allocator<int>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
$T83751 = -2						; size = 1
$T83750 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<int *,int *,std::allocator<int> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83750[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z ; std::_Move_cat<int *>
	add	esp, 4
	mov	BYTE PTR $T83751[ebp], al
	movzx	edx, BYTE PTR $T83750[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83751[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<int *,int *,std::allocator<int>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<int *,int *,std::allocator<int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAHH@std@@YAXPAH0ABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAHH@std@@YAXPAH0ABH@Z PROC			; std::_Fill<int *,int>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill@4
$LN2@Fill@4:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill@4:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill@4

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@Fill@4
$LN4@Fill@4:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@PAHH@std@@YAXPAH0ABH@Z ENDP			; std::_Fill<int *,int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z PROC ; std::_Move_cat<int *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z ENDP ; std::_Move_cat<int *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<int *,int *,std::random_access_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83759 = -2						; size = 1
$T83758 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<int *,int *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83758[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
	add	esp, 8
	mov	BYTE PTR $T83759[ebp], al
	movzx	eax, BYTE PTR $T83758[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83759[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<int *,int *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<int *,int *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83763 = -2						; size = 1
$T83762 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83762[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 4
	mov	BYTE PTR $T83763[ebp], al
	movzx	edx, BYTE PTR $T83762[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83763[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z PROC ; std::_Fill<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill@5
$LN2@Fill@5:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill@5:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill@5

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], edx
	jmp	SHORT $LN2@Fill@5
$LN4@Fill@5:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z ENDP ; std::_Fill<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z PROC ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ENDP ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83771 = -2						; size = 1
$T83770 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83770[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T83771[ebp], al
	movzx	eax, BYTE PTR $T83770[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83771[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83775 = -2						; size = 1
$T83774 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83774[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 4
	mov	BYTE PTR $T83775[ebp], al
	movzx	edx, BYTE PTR $T83774[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83775[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z PROC ; std::_Fill<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill@6
$LN2@Fill@6:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill@6:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill@6

; 3159 : 		*_First = _Val;

	mov	esi, DWORD PTR __Val$[ebp]
	mov	ecx, 8
	mov	edi, DWORD PTR __First$[ebp]
	rep movsd
	jmp	SHORT $LN2@Fill@6
$LN4@Fill@6:

; 3160 : 	}

	pop	edi
	pop	esi
	pop	ebp
	ret	0
??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0ABU123@@Z ENDP ; std::_Fill<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z PROC ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ENDP ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83783 = -2						; size = 1
$T83782 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83782[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T83783[ebp], al
	movzx	eax, BYTE PTR $T83782[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83783[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83787 = -2						; size = 1
$T83786 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83786[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	mov	BYTE PTR $T83787[ebp], al
	movzx	edx, BYTE PTR $T83786[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83787[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z PROC ; std::_Fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill@7
$LN2@Fill@7:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill@7:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill@7

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN2@Fill@7
$LN4@Fill@7:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ENDP ; std::_Fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::_Move_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::_Move_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83795 = -2						; size = 1
$T83794 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83794[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T83795[ebp], al
	movzx	eax, BYTE PTR $T83794[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83795[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T83799 = -2						; size = 1
$T83798 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T83798[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	mov	BYTE PTR $T83799[ebp], al
	movzx	edx, BYTE PTR $T83798[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83799[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z PROC ; std::_Fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill@8
$LN2@Fill@8:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill@8:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill@8

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN2@Fill@8
$LN4@Fill@8:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ENDP ; std::_Fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::_Move_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::_Move_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83807 = -2						; size = 1
$T83806 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83806[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T83807[ebp], al
	movzx	eax, BYTE PTR $T83806[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83807[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil
$LN5@Uninit_fil:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU345@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::construct
	jmp	SHORT $LN5@Uninit_fil
$LN4@Uninit_fil:
	jmp	SHORT $LN10@Uninit_fil
__catch$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil
$LN2@Uninit_fil:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::destroy
	jmp	SHORT $LN2@Uninit_fil
$LN1@Uninit_fil:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil
	ret	0
$LN10@Uninit_fil:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Ogre::Vector2 *,unsigned int,Ogre::Vector2,std::allocator<Ogre::Vector2> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@2
$LN5@Uninit_fil@2:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@2:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@2

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@ABV34@@Z ; std::allocator<Ogre::Vector2>::construct
	jmp	SHORT $LN5@Uninit_fil@2
$LN4@Uninit_fil@2:
	jmp	SHORT $LN10@Uninit_fil@2
__catch$??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@2
$LN2@Uninit_fil@2:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil@2:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@2

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@@Z ; std::allocator<Ogre::Vector2>::destroy
	jmp	SHORT $LN2@Uninit_fil@2
$LN1@Uninit_fil@2:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@2
	ret	0
$LN10@Uninit_fil@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@2:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAVVector2@Ogre@@IV12@V?$allocator@VVector2@Ogre@@@std@@@std@@YAXPAVVector2@Ogre@@IABV12@AAV?$allocator@VVector2@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Ogre::Vector2 *,unsigned int,Ogre::Vector2,std::allocator<Ogre::Vector2> >
PUBLIC	??$unchecked_fill_n@PAMIM@stdext@@YAXPAMIABM@Z	; stdext::unchecked_fill_n<float *,unsigned int,float>
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_fill_n@PAMIMV?$allocator@M@std@@@std@@YAXPAMIABMAAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAMIMV?$allocator@M@std@@@std@@YAXPAMIABMAAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<float *,unsigned int,float,std::allocator<float> >, COMDAT

; 418  : 	{	// copy _Count *_Val to raw _First, using _Al, scalar type

	push	ebp
	mov	ebp, esp

; 419  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_fill_n@PAMIM@stdext@@YAXPAMIABM@Z ; stdext::unchecked_fill_n<float *,unsigned int,float>
	add	esp, 12					; 0000000cH

; 420  : 	}

	pop	ebp
	ret	0
??$_Uninit_fill_n@PAMIMV?$allocator@M@std@@@std@@YAXPAMIABMAAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<float *,unsigned int,float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z	; stdext::unchecked_fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<int *,unsigned int,int,std::allocator<int> >, COMDAT

; 418  : 	{	// copy _Count *_Val to raw _First, using _Al, scalar type

	push	ebp
	mov	ebp, esp

; 419  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ; stdext::unchecked_fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH

; 420  : 	}

	pop	ebp
	ret	0
??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<int *,unsigned int,int,std::allocator<int> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@3
$LN5@Uninit_fil@3:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@3:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@3

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::construct
	jmp	SHORT $LN5@Uninit_fil@3
$LN4@Uninit_fil@3:
	jmp	SHORT $LN10@Uninit_fil@3
__catch$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@3
$LN2@Uninit_fil@3:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil@3:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@3

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::destroy
	jmp	SHORT $LN2@Uninit_fil@3
$LN1@Uninit_fil@3:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@3
	ret	0
$LN10@Uninit_fil@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@3:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@4
$LN5@Uninit_fil@4:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@4:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@4

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::construct
	jmp	SHORT $LN5@Uninit_fil@4
$LN4@Uninit_fil@4:
	jmp	SHORT $LN10@Uninit_fil@4
__catch$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@4
$LN2@Uninit_fil@4:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil@4:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@4

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::destroy
	jmp	SHORT $LN2@Uninit_fil@4
$LN1@Uninit_fil@4:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@4
	ret	0
$LN10@Uninit_fil@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@4:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@5
$LN5@Uninit_fil@5:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@5:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@5

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::construct
	jmp	SHORT $LN5@Uninit_fil@5
$LN4@Uninit_fil@5:
	jmp	SHORT $LN10@Uninit_fil@5
__catch$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@5
$LN2@Uninit_fil@5:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil@5:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@5

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::destroy
	jmp	SHORT $LN2@Uninit_fil@5
$LN1@Uninit_fil@5:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@5
	ret	0
$LN10@Uninit_fil@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@5:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@6
$LN5@Uninit_fil@6:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@6:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@6

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::construct
	jmp	SHORT $LN5@Uninit_fil@6
$LN4@Uninit_fil@6:
	jmp	SHORT $LN10@Uninit_fil@6
__catch$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@6
$LN2@Uninit_fil@6:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil@6:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@6

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::destroy
	jmp	SHORT $LN2@Uninit_fil@6
$LN1@Uninit_fil@6:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@6
	ret	0
$LN10@Uninit_fil@6:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@6:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z PROC ; std::_Destroy<Ogre::BaseKeyFrameArray::AnimRange>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ENDP ; std::_Destroy<Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@VVector2@Ogre@@@std@@YAXPAVVector2@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@VVector2@Ogre@@@std@@YAXPAVVector2@Ogre@@@Z PROC ; std::_Destroy<Ogre::Vector2>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@VVector2@Ogre@@@std@@YAXPAVVector2@Ogre@@@Z ENDP ; std::_Destroy<Ogre::Vector2>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z PROC ; std::_Destroy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ENDP ; std::_Destroy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z PROC ; std::_Destroy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@Z ENDP ; std::_Destroy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::_Destroy<Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::_Destroy<Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::_Destroy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::_Destroy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
_TEXT	ENDS
PUBLIC	??$_Construct@UAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU123@@Z ; std::_Construct<Ogre::BaseKeyFrameArray::AnimRange,Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU345@@Z PROC ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@UAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU123@@Z ; std::_Construct<Ogre::BaseKeyFrameArray::AnimRange,Ogre::BaseKeyFrameArray::AnimRange>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU345@@Z ENDP ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@VVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@ABV12@@Z ; std::_Construct<Ogre::Vector2,Ogre::Vector2>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@ABV34@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@ABV34@@Z PROC ; std::allocator<Ogre::Vector2>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@VVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@ABV12@@Z ; std::_Construct<Ogre::Vector2,Ogre::Vector2>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@VVector2@Ogre@@@std@@QAEXPAVVector2@Ogre@@ABV34@@Z ENDP ; std::allocator<Ogre::Vector2>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU345@@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU345@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU345@@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU345@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<float>::KEYFRAME_T,Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<float>::KEYFRAME_T,Ogre::KeyFrameArray<float>::KEYFRAME_T>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::construct
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEPBUAnimRange@BaseKeyFrameArray@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Checked_iterator_base
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUAnimRange@BaseKeyFrameArray@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUAnimRange@BaseKeyFrameArray@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEPBUAnimRange@BaseKeyFrameArray@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUAnimRange@BaseKeyFrameArray@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEPBVVector2@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBVVector2@Ogre@@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBVVector2@Ogre@@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEPBVVector2@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBVVector2@Ogre@@AAV?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEPBMXZ ; std::_Vector_const_iterator<float,std::allocator<float> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBMAAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBMAAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<float,std::allocator<float> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEPBMXZ ; std::_Vector_const_iterator<float,std::allocator<float> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBMAAV?$_Vector_const_iterator@MV?$allocator@M@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<float,std::allocator<float> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEPBHXZ ; std::_Vector_const_iterator<int,std::allocator<int> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBHAAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBHAAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<int,std::allocator<int> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEPBHXZ ; std::_Vector_const_iterator<int,std::allocator<int> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBHAAV?$_Vector_const_iterator@HV?$allocator@H@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<int,std::allocator<int> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBEPBDXZ ; std::_Vector_const_iterator<char,std::allocator<char> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBDAAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBDAAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<char,std::allocator<char> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBEPBDXZ ; std::_Vector_const_iterator<char,std::allocator<char> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBDAAV?$_Vector_const_iterator@DV?$allocator@D@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<char,std::allocator<char> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEPBQAVSurfaceData@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVSurfaceData@Ogre@@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVSurfaceData@Ogre@@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEPBQAVSurfaceData@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVSurfaceData@Ogre@@AAV?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83952 = -7						; size = 1
$T83951 = -6						; size = 1
$T83950 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	shl	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$[ebp], ecx

; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T83950[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T83951[ebp], al
	movzx	ecx, BYTE PTR $T83950[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T83951[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83952[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2690 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2691 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_move@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@U_Undefined_move_tag@4@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@U_Undefined_move_tag@4@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@@stdext@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAVVector2@Ogre@@PAV12@V?$allocator@VVector2@Ogre@@@std@@U_Undefined_move_tag@4@@std@@YAPAVVector2@Ogre@@PAV12@00AAV?$allocator@VVector2@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Ogre::Vector2 *,Ogre::Vector2 *,std::allocator<Ogre::Vector2>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAVVector2@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVVector2@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::Vector2 *,Ogre::Vector2 *,std::forward_iterator_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAVVector2@Ogre@@PAV12@@std@@YAPAVVector2@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83959 = -7						; size = 1
$T83958 = -6						; size = 1
$T83957 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAVVector2@Ogre@@PAV12@@std@@YAPAVVector2@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::Vector2 *,Ogre::Vector2 *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	shl	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$[ebp], ecx

; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T83957[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T83958[ebp], al
	movzx	ecx, BYTE PTR $T83957[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T83958[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83959[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAVVector2@Ogre@@@std@@YAPAVVector2@Ogre@@AAPAV12@@Z ; std::_Checked_base<Ogre::Vector2 *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_backward_opt@PAVVector2@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVVector2@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::Vector2 *,Ogre::Vector2 *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2690 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2691 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAVVector2@Ogre@@PAV12@@std@@YAPAVVector2@Ogre@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::Vector2 *,Ogre::Vector2 *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_move@PAMPAMV?$allocator@M@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAMPAMV?$allocator@M@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<float *,float *,std::allocator<float>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z ; stdext::unchecked_uninitialized_copy<float *,float *,std::allocator<float> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAMPAMV?$allocator@M@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<float *,float *,std::allocator<float>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<float *,float *,std::random_access_iterator_tag>, COMDAT

; 2698 : 	{	// copy [_First, _Last) backwards to [..., _Dest), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2699 : 
; 2700 :  #if _HAS_ITERATOR_DEBUGGING
; 2701 : 	_DEBUG_RANGE(_First, _Last);
; 2702 : 	if (_First != _Last)
; 2703 : 		_DEBUG_POINTER(_Dest);
; 2704 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2705 : 
; 2706 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2707 : 	/* if _OutIt is range checked, this will make sure there is enough space for 
; 2708 : 	 * the memmove
; 2709 : 	 */
; 2710 : 	_OutIt _Result = _Dest - _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, ecx
	mov	DWORD PTR __Result$[ebp], edx

; 2711 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_backw

; 2712 : 		_CRT_SECURE_MEMMOVE(&*_Result, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Off$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR __Result$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_backw:

; 2713 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2714 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<float *,float *,std::random_access_iterator_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<int *,int *,std::allocator<int>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int *,int *,std::allocator<int>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<int *,int *,std::random_access_iterator_tag>, COMDAT

; 2698 : 	{	// copy [_First, _Last) backwards to [..., _Dest), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2699 : 
; 2700 :  #if _HAS_ITERATOR_DEBUGGING
; 2701 : 	_DEBUG_RANGE(_First, _Last);
; 2702 : 	if (_First != _Last)
; 2703 : 		_DEBUG_POINTER(_Dest);
; 2704 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2705 : 
; 2706 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2707 : 	/* if _OutIt is range checked, this will make sure there is enough space for 
; 2708 : 	 * the memmove
; 2709 : 	 */
; 2710 : 	_OutIt _Result = _Dest - _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, ecx
	mov	DWORD PTR __Result$[ebp], edx

; 2711 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_backw@2

; 2712 : 		_CRT_SECURE_MEMMOVE(&*_Result, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Off$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR __Result$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_backw@2:

; 2713 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2714 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<int *,int *,std::random_access_iterator_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83974 = -7						; size = 1
$T83973 = -6						; size = 1
$T83972 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	imul	eax, 20					; 00000014H
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, eax
	mov	DWORD PTR __Result$[ebp], edx

; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83972[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T83973[ebp], cl
	movzx	edx, BYTE PTR $T83972[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83973[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T83974[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2690 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2691 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83981 = -7						; size = 1
$T83980 = -6						; size = 1
$T83979 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 5
	shl	eax, 5
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$[ebp], ecx

; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T83979[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T83980[ebp], al
	movzx	ecx, BYTE PTR $T83979[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T83980[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83981[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2690 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2691 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83988 = -7						; size = 1
$T83987 = -6						; size = 1
$T83986 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	shl	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$[ebp], ecx

; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T83986[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T83987[ebp], al
	movzx	ecx, BYTE PTR $T83986[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T83987[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83988[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2690 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2691 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T83995 = -7						; size = 1
$T83994 = -6						; size = 1
$T83993 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	shl	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$[ebp], ecx

; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T83993[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T83994[ebp], al
	movzx	ecx, BYTE PTR $T83993[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T83994[ebp]
	push	edx
	movzx	eax, BYTE PTR $T83995[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2690 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2691 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAMIM@std@@YAXPAMIABMUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<float *,unsigned int,float>
PUBLIC	??$_Iter_cat@PAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM@Z ; std::_Iter_cat<float *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_fill_n@PAMIM@stdext@@YAXPAMIABM@Z
_TEXT	SEGMENT
$T83999 = -2						; size = 1
$T83998 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAMIM@stdext@@YAXPAMIABM@Z PROC	; stdext::unchecked_fill_n<float *,unsigned int,float>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T83998[ebp], al
	movzx	ecx, BYTE PTR $T83998[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T83999[ebp]
	push	eax
	call	??$_Iter_cat@PAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM@Z ; std::_Iter_cat<float *>
	add	esp, 8
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Fill_n@PAMIM@std@@YAXPAMIABMUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<float *,unsigned int,float>
	add	esp, 20					; 00000014H

; 3722 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAMIM@stdext@@YAXPAMIABM@Z ENDP	; stdext::unchecked_fill_n<float *,unsigned int,float>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int>
PUBLIC	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z
_TEXT	SEGMENT
$T84003 = -2						; size = 1
$T84002 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z PROC	; stdext::unchecked_fill_n<int *,unsigned int,int>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T84002[ebp], al
	movzx	ecx, BYTE PTR $T84002[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T84003[ebp]
	push	eax
	call	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
	add	esp, 8
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int>
	add	esp, 20					; 00000014H

; 3722 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ENDP	; stdext::unchecked_fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Construct@UAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU123@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T84006 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU123@@Z PROC ; std::_Construct<Ogre::BaseKeyFrameArray::AnimRange,Ogre::BaseKeyFrameArray::AnimRange>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T84006[ebp], eax
	cmp	DWORD PTR $T84006[ebp], 0
	je	SHORT $LN3@Construct
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T84006[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T84006[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@Construct
$LN3@Construct:
	mov	DWORD PTR tv69[ebp], 0
$LN1@Construct:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@UAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU123@@Z ENDP ; std::_Construct<Ogre::BaseKeyFrameArray::AnimRange,Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Construct@VVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@ABV12@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T84011 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@VVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@ABV12@@Z PROC ; std::_Construct<Ogre::Vector2,Ogre::Vector2>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T84011[ebp], eax
	cmp	DWORD PTR $T84011[ebp], 0
	je	SHORT $LN3@Construct@2
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T84011[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T84011[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@Construct@2
$LN3@Construct@2:
	mov	DWORD PTR tv69[ebp], 0
$LN1@Construct@2:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@VVector2@Ogre@@V12@@std@@YAXPAVVector2@Ogre@@ABV12@@Z ENDP ; std::_Construct<Ogre::Vector2,Ogre::Vector2>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU123@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T84016 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU123@@Z PROC ; std::_Construct<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	20					; 00000014H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T84016[ebp], eax
	cmp	DWORD PTR $T84016[ebp], 0
	je	SHORT $LN3@Construct@3
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T84016[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR $T84016[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@Construct@3
$LN3@Construct@3:
	mov	DWORD PTR tv69[ebp], 0
$LN1@Construct@3:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU123@@Z ENDP ; std::_Construct<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU123@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T84021 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU123@@Z PROC ; std::_Construct<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	32					; 00000020H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T84021[ebp], eax
	cmp	DWORD PTR $T84021[ebp], 0
	je	SHORT $LN3@Construct@4
	mov	esi, DWORD PTR __Val$[ebp]
	mov	ecx, 8
	mov	edi, DWORD PTR $T84021[ebp]
	rep movsd
	mov	edx, DWORD PTR $T84021[ebp]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN1@Construct@4
$LN3@Construct@4:
	mov	DWORD PTR tv69[ebp], 0
$LN1@Construct@4:

; 53   : 	}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@ABU123@@Z ENDP ; std::_Construct<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Construct@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T84026 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z PROC ; std::_Construct<Ogre::KeyFrameArray<float>::KEYFRAME_T,Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T84026[ebp], eax
	cmp	DWORD PTR $T84026[ebp], 0
	je	SHORT $LN3@Construct@5
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T84026[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T84026[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@Construct@5
$LN3@Construct@5:
	mov	DWORD PTR tv69[ebp], 0
$LN1@Construct@5:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z ENDP ; std::_Construct<Ogre::KeyFrameArray<float>::KEYFRAME_T,Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T84031 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z PROC ; std::_Construct<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T84031[ebp], eax
	cmp	DWORD PTR $T84031[ebp], 0
	je	SHORT $LN3@Construct@6
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T84031[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T84031[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@Construct@6
$LN3@Construct@6:
	mov	DWORD PTR tv69[ebp], 0
$LN1@Construct@6:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z ENDP ; std::_Construct<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEPBUAnimRange@BaseKeyFrameArray@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEPBUAnimRange@BaseKeyFrameArray@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEPBUAnimRange@BaseKeyFrameArray@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEPBVVector2@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEPBVVector2@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@VVector2@Ogre@@V?$allocator@VVector2@Ogre@@@std@@@std@@QBEPBVVector2@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::Vector2,std::allocator<Ogre::Vector2> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEPBMXZ PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEPBMXZ ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEPBHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEPBHXZ PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEPBHXZ ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEPBUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@@std@@@std@@QBEPBUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEPBUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEPBUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBEPBDXZ PROC ; std::_Vector_const_iterator<char,std::allocator<char> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBEPBDXZ ENDP ; std::_Vector_const_iterator<char,std::allocator<char> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEPBQAVSurfaceData@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEPBQAVSurfaceData@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@PAVSurfaceData@Ogre@@V?$allocator@PAVSurfaceData@Ogre@@@std@@@std@@QBEPBQAVSurfaceData@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::SurfaceData *,std::allocator<Ogre::SurfaceData *> >::_Checked_iterator_base
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
$LN2@Copy_backw@3:

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_backw@3

; 2676 : 		*--_Dest = *--_Last;

	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Last$[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Dest$[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_backw@3
$LN1@Copy_backw@3:

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2678 : 	}

	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAVVector2@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVVector2@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAVVector2@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVVector2@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::Vector2 *,Ogre::Vector2 *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
$LN2@Copy_backw@4:

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_backw@4

; 2676 : 		*--_Dest = *--_Last;

	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Last$[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Dest$[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	call	??4Vector2@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector2::operator=
	jmp	SHORT $LN2@Copy_backw@4
$LN1@Copy_backw@4:

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2678 : 	}

	pop	ebp
	ret	0
??$_Copy_backward_opt@PAVVector2@Ogre@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVVector2@Ogre@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::Vector2 *,Ogre::Vector2 *,std::forward_iterator_tag>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
$LN2@Copy_backw@5:

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_backw@5

; 2676 : 		*--_Dest = *--_Last;

	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 20					; 00000014H
	mov	DWORD PTR __Last$[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, 20					; 00000014H
	mov	DWORD PTR __Dest$[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN2@Copy_backw@5
$LN1@Copy_backw@5:

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2678 : 	}

	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::KEYFRAME_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
$LN2@Copy_backw@6:

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_backw@6

; 2676 : 		*--_Dest = *--_Last;

	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 32					; 00000020H
	mov	DWORD PTR __Last$[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, 32					; 00000020H
	mov	DWORD PTR __Dest$[ebp], edx
	mov	esi, DWORD PTR __Last$[ebp]
	mov	ecx, 8
	mov	edi, DWORD PTR __Dest$[ebp]
	rep movsd
	jmp	SHORT $LN2@Copy_backw@6
$LN1@Copy_backw@6:

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2678 : 	}

	pop	edi
	pop	esi
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VColourValue@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::ColourValue>::CONTROL_POINT_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
$LN2@Copy_backw@7:

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_backw@7

; 2676 : 		*--_Dest = *--_Last;

	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Last$[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Dest$[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_backw@7
$LN1@Copy_backw@7:

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2678 : 	}

	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
$LN2@Copy_backw@8:

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_backw@8

; 2676 : 		*--_Dest = *--_Last;

	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Last$[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Dest$[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_backw@8
$LN1@Copy_backw@8:

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2678 : 	}

	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM@Z PROC ; std::_Iter_cat<float *>, COMDAT

; 952  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 955  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM@Z ENDP ; std::_Iter_cat<float *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAMIM@std@@YAXPAMIABMU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<float *,unsigned int,float>
; Function compile flags: /Odtp
;	COMDAT ??$_Fill_n@PAMIM@std@@YAXPAMIABMUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T84070 = -5						; size = 1
__Last$ = -4						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAMIM@std@@YAXPAMIABMUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<float *,unsigned int,float>, COMDAT

; 3250 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3251 : 		// if _OutIt is checked, this will ensure we have enough space
; 3252 : 		_OutIt _Last = _First + _Count; (_Last);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Last$[ebp], edx

; 3253 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 3254 : 			_Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T84070[ebp], al
	movzx	ecx, BYTE PTR $T84070[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	call	??$_Fill_n@PAMIM@std@@YAXPAMIABMU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<float *,unsigned int,float>
	add	esp, 16					; 00000010H

; 3255 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAMIM@std@@YAXPAMIABMUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<float *,unsigned int,float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z PROC ; std::_Iter_cat<int *>, COMDAT

; 952  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 955  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ENDP ; std::_Iter_cat<int *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp
;	COMDAT ??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T84075 = -5						; size = 1
__Last$ = -4						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<int *,unsigned int,int>, COMDAT

; 3250 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3251 : 		// if _OutIt is checked, this will ensure we have enough space
; 3252 : 		_OutIt _Last = _First + _Count; (_Last);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Last$[ebp], edx

; 3253 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 3254 : 			_Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T84075[ebp], al
	movzx	ecx, BYTE PTR $T84075[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	call	??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int>
	add	esp, 16					; 00000010H

; 3255 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Fill_n@PAMIM@std@@YAXPAMIABMU_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAMIM@std@@YAXPAMIABMU_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<float *,unsigned int,float>, COMDAT

; 3196 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp

; 3197 : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN3@Fill_n
$LN2@Fill_n:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Fill_n:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Fill_n

; 3198 : 		*_First = _Val;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx]
	jmp	SHORT $LN2@Fill_n
$LN1@Fill_n:

; 3199 : 	}

	pop	ebp
	ret	0
??$_Fill_n@PAMIM@std@@YAXPAMIABMU_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<float *,unsigned int,float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<int *,unsigned int,int>, COMDAT

; 3196 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp

; 3197 : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN3@Fill_n@2
$LN2@Fill_n@2:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Fill_n@2:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Fill_n@2

; 3198 : 		*_First = _Val;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@Fill_n@2
$LN4@Fill_n@2:

; 3199 : 	}

	pop	ebp
	ret	0
??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
_TEXT	ENDS
;	COMDAT ??__ETWO_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__ETWO_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'TWO_PI'', COMDAT

; 10   : 	const float TWO_PI = ONE_PI*2;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fadd	ST(0), ST(0)
	fstp	DWORD PTR _TWO_PI
	pop	ebp
	ret	0
??__ETWO_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'TWO_PI''
text$yc	ENDS
PUBLIC	__real@3fe0000000000000
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??__EHALF_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__EHALF_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'HALF_PI'', COMDAT

; 11   : 	const float	HALF_PI = ONE_PI*0.5f;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR _HALF_PI
	pop	ebp
	ret	0
??__EHALF_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'HALF_PI''
text$yc	ENDS
EXTRN	??0RuntimeClass@Ogre@@QAE@PBDPBV01@HP6APAVBaseObject@1@XZ@Z:PROC ; Ogre::RuntimeClass::RuntimeClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreribbondata.cpp
;	COMDAT ??__E?m_RTTI@RibbonEmitterData@Ogre@@2VRuntimeClass@2@B@@YAXXZ
text$yc	SEGMENT
??__E?m_RTTI@RibbonEmitterData@Ogre@@2VRuntimeClass@2@B@@YAXXZ PROC ; `dynamic initializer for 'Ogre::RibbonEmitterData::m_RTTI'', COMDAT

; 7    : 	IMPLEMENT_RTTI(RibbonEmitterData, Resource, 101)

	push	ebp
	mov	ebp, esp
	push	OFFSET ?newObject@RibbonEmitterData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::RibbonEmitterData::newObject
	push	101					; 00000065H
	push	OFFSET ?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B ; Ogre::Resource::m_RTTI
	push	OFFSET $SG63316
	mov	ecx, OFFSET ?m_RTTI@RibbonEmitterData@Ogre@@2VRuntimeClass@2@B ; Ogre::RibbonEmitterData::m_RTTI
	call	??0RuntimeClass@Ogre@@QAE@PBDPBV01@HP6APAVBaseObject@1@XZ@Z ; Ogre::RuntimeClass::RuntimeClass
	pop	ebp
	ret	0
??__E?m_RTTI@RibbonEmitterData@Ogre@@2VRuntimeClass@2@B@@YAXXZ ENDP ; `dynamic initializer for 'Ogre::RibbonEmitterData::m_RTTI''
text$yc	ENDS
PUBLIC	?m_RTTI@RibbonEmitterData@Ogre@@2VRuntimeClass@2@B ; Ogre::RibbonEmitterData::m_RTTI
_BSS	SEGMENT
?m_RTTI@RibbonEmitterData@Ogre@@2VRuntimeClass@2@B DB 014H DUP (?) ; Ogre::RibbonEmitterData::m_RTTI
_TWO_PI	DD	01H DUP (?)
_HALF_PI DD	01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_TWO_PI$initializer$ DD FLAT:??__ETWO_PI@Ogre@@YAXXZ
_HALF_PI$initializer$ DD FLAT:??__EHALF_PI@Ogre@@YAXXZ
?m_RTTI$initializer$@RibbonEmitterData@Ogre@@2P6AXXZA DD FLAT:??__E?m_RTTI@RibbonEmitterData@Ogre@@2VRuntimeClass@2@B@@YAXXZ ; Ogre::RibbonEmitterData::m_RTTI$initializer$
CRT$XCU	ENDS
END
