; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\sdk\ozcollide\plane.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??0Plane@ozcollide@@QAE@XZ			; ozcollide::Plane::Plane
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\plane.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Plane@ozcollide@@QAE@XZ PROC				; ozcollide::Plane::Plane
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 32   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Plane@ozcollide@@QAE@XZ ENDP				; ozcollide::Plane::Plane
_TEXT	ENDS
PUBLIC	??0Plane@ozcollide@@QAE@MMMM@Z			; ozcollide::Plane::Plane
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
__a$ = 8						; size = 4
__b$ = 12						; size = 4
__c$ = 16						; size = 4
__d$ = 20						; size = 4
??0Plane@ozcollide@@QAE@MMMM@Z PROC			; ozcollide::Plane::Plane
; _this$ = ecx

; 35   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 	a = _a;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __a$[ebp]
	fstp	DWORD PTR [eax]

; 37   : 	b = _b;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __b$[ebp]
	fstp	DWORD PTR [ecx+4]

; 38   : 	c = _c;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __c$[ebp]
	fstp	DWORD PTR [edx+8]

; 39   : 	d = _d;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __d$[ebp]
	fstp	DWORD PTR [eax+12]

; 40   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Plane@ozcollide@@QAE@MMMM@Z ENDP			; ozcollide::Plane::Plane
_TEXT	ENDS
PUBLIC	?normalize@Vec3f@ozcollide@@QAEXXZ		; ozcollide::Vec3f::normalize
PUBLIC	??UVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator|
PUBLIC	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator-
PUBLIC	?fromPoints@Plane@ozcollide@@QAEXABVVec3f@2@00@Z ; ozcollide::Plane::fromPoints
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -40						; size = 4
_v0$ = -36						; size = 12
_v1$ = -24						; size = 12
_n$ = -12						; size = 12
__p0$ = 8						; size = 4
__p1$ = 12						; size = 4
__p2$ = 16						; size = 4
?fromPoints@Plane@ozcollide@@QAEXABVVec3f@2@00@Z PROC	; ozcollide::Plane::fromPoints
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 	Vec3f v0(_p0 - _p1);

	mov	eax, DWORD PTR __p1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __p0$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 45   : 	Vec3f v1(_p2 - _p1);

	mov	edx, DWORD PTR __p1$[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR __p2$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 46   : 	Vec3f n = v1 | v0;

	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _n$[ebp]
	push	edx
	lea	ecx, DWORD PTR _v1$[ebp]
	call	??UVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator|

; 47   : 	n.normalize();

	lea	ecx, DWORD PTR _n$[ebp]
	call	?normalize@Vec3f@ozcollide@@QAEXXZ	; ozcollide::Vec3f::normalize

; 48   : 	a = n.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _n$[ebp]
	fstp	DWORD PTR [eax]

; 49   : 	b = n.y;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _n$[ebp+4]
	fstp	DWORD PTR [ecx+4]

; 50   : 	c = n.z;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _n$[ebp+8]
	fstp	DWORD PTR [edx+8]

; 51   : 	d = -(_p0.x * a + _p0.y * b + _p0.z * c);

	mov	eax, DWORD PTR __p0$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR __p0$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR __p0$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fchs
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+12]

; 52   : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?fromPoints@Plane@ozcollide@@QAEXABVVec3f@2@00@Z ENDP	; ozcollide::Plane::fromPoints
_TEXT	ENDS
PUBLIC	??0Vec3f@ozcollide@@QAE@MMM@Z			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
;	COMDAT ??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator-, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		return Vec3f(x - _v.x, y - _v.y, z - _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 96   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0Vec3f@ozcollide@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Vec3f@ozcollide@@QAE@MMM@Z PROC			; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __z$[ebp]
	fstp	DWORD PTR [edx+8]

; 43   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vec3f@ozcollide@@QAE@MMM@Z ENDP			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??UVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv146 = -16						; size = 4
tv141 = -12						; size = 4
tv136 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__d$ = 12						; size = 4
??UVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator|, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 		return Vec3f(y * _d.z - z * _d.y,
; 127  : 			z * _d.x - x * _d.z,
; 128  : 			x * _d.y - y * _d.x);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __d$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __d$[ebp]
	fmul	DWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv136[ebp]
	fld	DWORD PTR tv136[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __d$[ebp]
	fmul	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __d$[ebp]
	fmul	DWORD PTR [ecx+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv141[ebp]
	fld	DWORD PTR tv141[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __d$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __d$[ebp]
	fmul	DWORD PTR [edx+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv146[ebp]
	fld	DWORD PTR tv146[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 129  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??UVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator|
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@0000000000000000
PUBLIC	?len@Vec3f@ozcollide@@QBEMXZ			; ozcollide::Vec3f::len
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?normalize@Vec3f@ozcollide@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_ln$ = -8						; size = 4
_div$ = -4						; size = 4
?normalize@Vec3f@ozcollide@@QAEXXZ PROC			; ozcollide::Vec3f::normalize, COMDAT
; _this$ = ecx

; 168  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 		float ln = len();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?len@Vec3f@ozcollide@@QBEMXZ		; ozcollide::Vec3f::len
	fstp	DWORD PTR _ln$[ebp]

; 170  : 		if (!ln)

	fld	DWORD PTR _ln$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@normalize

; 171  : 			return;

	jmp	SHORT $LN2@normalize
$LN1@normalize:

; 172  : 		float div = 1.0f / ln;

	fld	DWORD PTR _ln$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _div$[ebp]

; 173  : 		x *= div;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _div$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 174  : 		y *= div;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _div$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 175  : 		z *= div;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _div$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]
$LN2@normalize:

; 176  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?normalize@Vec3f@ozcollide@@QAEXXZ ENDP			; ozcollide::Vec3f::normalize
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Odtp
;	COMDAT ?len@Vec3f@ozcollide@@QBEMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_len$ = -4						; size = 4
?len@Vec3f@ozcollide@@QBEMXZ PROC			; ozcollide::Vec3f::len, COMDAT
; _this$ = ecx

; 152  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 		float len = x * x + y * y + z * z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _len$[ebp]

; 154  : 		return (float) sqrt(len);

	push	ecx
	fld	DWORD PTR _len$[ebp]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 155  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?len@Vec3f@ozcollide@@QBEMXZ ENDP			; ozcollide::Vec3f::len
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?fromPointsNN@Plane@ozcollide@@QAEXABVVec3f@2@00@Z ; ozcollide::Plane::fromPointsNN
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\plane.cpp
_TEXT	SEGMENT
_this$ = -40						; size = 4
_v0$ = -36						; size = 12
_v1$ = -24						; size = 12
_n$ = -12						; size = 12
__p0$ = 8						; size = 4
__p1$ = 12						; size = 4
__p2$ = 16						; size = 4
?fromPointsNN@Plane@ozcollide@@QAEXABVVec3f@2@00@Z PROC	; ozcollide::Plane::fromPointsNN
; _this$ = ecx

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 	Vec3f v0(_p0 - _p1);

	mov	eax, DWORD PTR __p1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __p0$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 57   : 	Vec3f v1(_p2 - _p1);

	mov	edx, DWORD PTR __p1$[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR __p2$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 58   : 	Vec3f n = v1 | v0;

	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _n$[ebp]
	push	edx
	lea	ecx, DWORD PTR _v1$[ebp]
	call	??UVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator|

; 59   : 	a = n.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _n$[ebp]
	fstp	DWORD PTR [eax]

; 60   : 	b = n.y;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _n$[ebp+4]
	fstp	DWORD PTR [ecx+4]

; 61   : 	c = n.z;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _n$[ebp+8]
	fstp	DWORD PTR [edx+8]

; 62   : 	d = -(_p0.x * a + _p0.y * b + _p0.z * c);

	mov	eax, DWORD PTR __p0$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR __p0$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR __p0$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fchs
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+12]

; 63   : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?fromPointsNN@Plane@ozcollide@@QAEXABVVec3f@2@00@Z ENDP	; ozcollide::Plane::fromPointsNN
_TEXT	ENDS
PUBLIC	?fromPointAndNormal@Plane@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Plane::fromPointAndNormal
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_nn$ = -12						; size = 12
__p$ = 8						; size = 4
__n$ = 12						; size = 4
?fromPointAndNormal@Plane@ozcollide@@QAEXABVVec3f@2@0@Z PROC ; ozcollide::Plane::fromPointAndNormal
; _this$ = ecx

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 	Vec3f nn = _n;

	mov	eax, DWORD PTR __n$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _nn$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _nn$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _nn$[ebp+8], eax

; 68   : 	nn.normalize();

	lea	ecx, DWORD PTR _nn$[ebp]
	call	?normalize@Vec3f@ozcollide@@QAEXXZ	; ozcollide::Vec3f::normalize

; 69   : 	a = nn.x;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _nn$[ebp]
	fstp	DWORD PTR [ecx]

; 70   : 	b = nn.y;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _nn$[ebp+4]
	fstp	DWORD PTR [edx+4]

; 71   : 	c = nn.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _nn$[ebp+8]
	fstp	DWORD PTR [eax+8]

; 72   : 	d = -(_p.x * a + _p.y * b + _p.z * c);

	mov	ecx, DWORD PTR __p$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx]
	mov	eax, DWORD PTR __p$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR __p$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+8]
	faddp	ST(1), ST(0)
	fchs
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 73   : }

	mov	esp, ebp
	pop	ebp
	ret	8
?fromPointAndNormal@Plane@ozcollide@@QAEXABVVec3f@2@0@Z ENDP ; ozcollide::Plane::fromPointAndNormal
_TEXT	ENDS
END
