; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\sdk\ozcollide\aabbtree_sphere.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG7100	DB	'AABB', 00H
	ORG $+3
$SG7105	DB	'NODS', 00H
	ORG $+3
$SG7124	DB	'LEFS', 00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z ; ozcollide::AABBTreeSphere::loadBinary
PUBLIC	?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z ; ozcollide::AABBTreeSphere::loadBinary
EXTRN	?close@DataIn@ozcollide@@QAE_NXZ:PROC		; ozcollide::DataIn::close
EXTRN	??1DataIn@ozcollide@@UAE@XZ:PROC		; ozcollide::DataIn::~DataIn
EXTRN	?open@DataIn@ozcollide@@QAE_NPBD@Z:PROC		; ozcollide::DataIn::open
EXTRN	??0DataIn@ozcollide@@QAE@XZ:PROC		; ozcollide::DataIn::DataIn
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z$0
__ehfuncinfo$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\aabbtreesphere_io.cpp
xdata$x	ENDS
_TEXT	SEGMENT
$T7429 = -56						; size = 4
$T7428 = -52						; size = 4
$T7427 = -48						; size = 4
_err$ = -44						; size = 4
_file$ = -40						; size = 28
__$EHRec$ = -12						; size = 12
__fileName$ = 8						; size = 4
__tree$ = 12						; size = 4
?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z PROC ; ozcollide::AABBTreeSphere::loadBinary

; 5    : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 6    : 	DataIn file;

	lea	ecx, DWORD PTR _file$[ebp]
	call	??0DataIn@ozcollide@@QAE@XZ		; ozcollide::DataIn::DataIn
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 7    : 	ERR err;
; 8    : 	
; 9    : 	if (!file.open(_fileName))

	mov	eax, DWORD PTR __fileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _file$[ebp]
	call	?open@DataIn@ozcollide@@QAE_NPBD@Z	; ozcollide::DataIn::open
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@loadBinary

; 10   : 		return ERR_CANNOT_OPEN;

	mov	DWORD PTR $T7427[ebp], 17		; 00000011H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _file$[ebp]
	call	??1DataIn@ozcollide@@UAE@XZ		; ozcollide::DataIn::~DataIn
	mov	eax, DWORD PTR $T7427[ebp]
	jmp	SHORT $LN3@loadBinary
$LN2@loadBinary:

; 11   : 
; 12   : 	err  = loadBinary(file, _tree);

	mov	edx, DWORD PTR __tree$[ebp]
	push	edx
	lea	eax, DWORD PTR _file$[ebp]
	push	eax
	call	?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z ; ozcollide::AABBTreeSphere::loadBinary
	add	esp, 8
	mov	DWORD PTR _err$[ebp], eax

; 13   : 	if (err != NOERR)

	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN1@loadBinary

; 14   : 		return err;

	mov	ecx, DWORD PTR _err$[ebp]
	mov	DWORD PTR $T7428[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _file$[ebp]
	call	??1DataIn@ozcollide@@UAE@XZ		; ozcollide::DataIn::~DataIn
	mov	eax, DWORD PTR $T7428[ebp]
	jmp	SHORT $LN3@loadBinary
$LN1@loadBinary:

; 15   : 
; 16   : 	file.close();

	lea	ecx, DWORD PTR _file$[ebp]
	call	?close@DataIn@ozcollide@@QAE_NXZ	; ozcollide::DataIn::close

; 17   : 	return NOERR;

	mov	DWORD PTR $T7429[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _file$[ebp]
	call	??1DataIn@ozcollide@@UAE@XZ		; ozcollide::DataIn::~DataIn
	mov	eax, DWORD PTR $T7429[ebp]
$LN3@loadBinary:

; 18   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z$0:
	lea	ecx, DWORD PTR _file$[ebp]
	jmp	??1DataIn@ozcollide@@UAE@XZ		; ozcollide::DataIn::~DataIn
__ehhandler$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@PBDPAPAV12@@Z ENDP ; ozcollide::AABBTreeSphere::loadBinary
PUBLIC	?readLEFSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z ; ozcollide::AABBTreeSphere::readLEFSchunk
PUBLIC	?readNODSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z ; ozcollide::AABBTreeSphere::readNODSchunk
PUBLIC	??0AABBTreeNode@ozcollide@@QAE@XZ		; ozcollide::AABBTreeNode::AABBTreeNode
PUBLIC	??1AABBTreeNode@ozcollide@@QAE@XZ		; ozcollide::AABBTreeNode::~AABBTreeNode
PUBLIC	??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ		; ozcollide::AABBTreeSphereLeaf::AABBTreeSphereLeaf
PUBLIC	??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ		; ozcollide::AABBTreeSphereLeaf::~AABBTreeSphereLeaf
PUBLIC	??0AABBTreeSphere@ozcollide@@AAE@H@Z		; ozcollide::AABBTreeSphere::AABBTreeSphere
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?seek@DataIn@ozcollide@@QAE_NH@Z:PROC		; ozcollide::DataIn::seek
EXTRN	?advance@DataIn@ozcollide@@QAE_NH@Z:PROC	; ozcollide::DataIn::advance
EXTRN	?tell@DataIn@ozcollide@@QBEHXZ:PROC		; ozcollide::DataIn::tell
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	?readByte@DataIn@ozcollide@@QAEDXZ:PROC		; ozcollide::DataIn::readByte
EXTRN	?readDword@DataIn@ozcollide@@QAEHXZ:PROC	; ozcollide::DataIn::readDword
EXTRN	?read@DataIn@ozcollide@@QAEHPAXH@Z:PROC		; ozcollide::DataIn::read
xdata$x	SEGMENT
__unwindtable$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z$2
__ehfuncinfo$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv204 = -96						; size = 4
tv172 = -92						; size = 4
tv130 = -88						; size = 4
$T7452 = -84						; size = 4
$T7451 = -80						; size = 4
$T7450 = -76						; size = 4
$T7447 = -72						; size = 4
$T7446 = -68						; size = 4
$T7445 = -64						; size = 4
$T7442 = -60						; size = 4
$T7441 = -56						; size = 4
_sc$7009 = -52						; size = 4
_pos0$7011 = -48					; size = 4
_scSize$7010 = -44					; size = 4
_pos1$7016 = -40					; size = 4
_id$7008 = -36						; size = 4
_chunkSize$ = -32					; size = 4
_t$ = -28						; size = 4
_leafDepth$ = -21					; size = 1
_chunk$ = -20						; size = 4
_leafType$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
__file$ = 8						; size = 4
__tree$ = 12						; size = 4
?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z PROC ; ozcollide::AABBTreeSphere::loadBinary

; 21   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 22   : 	char chunk[4];
; 23   : 	int chunkSize;
; 24   : 
; 25   : 	_file.read(chunk, 4);

	push	4
	lea	eax, DWORD PTR _chunk$[ebp]
	push	eax
	mov	ecx, DWORD PTR __file$[ebp]
	call	?read@DataIn@ozcollide@@QAEHPAXH@Z	; ozcollide::DataIn::read

; 26   : 	if (MID(chunk[0], chunk[1],chunk[2], chunk[3]) != MID('A', 'A', 'B', 'B'))

	movsx	ecx, BYTE PTR _chunk$[ebp+3]
	shl	ecx, 24					; 00000018H
	movsx	edx, BYTE PTR _chunk$[ebp+2]
	shl	edx, 16					; 00000010H
	add	ecx, edx
	movsx	eax, BYTE PTR _chunk$[ebp+1]
	shl	eax, 8
	add	ecx, eax
	movsx	edx, BYTE PTR _chunk$[ebp]
	add	ecx, edx
	cmp	ecx, 1111638337				; 42424141H
	je	SHORT $LN9@loadBinary@2

; 27   : 		return ERR_INVALID_FORMAT;

	mov	eax, 18					; 00000012H
	jmp	$LN10@loadBinary@2
$LN9@loadBinary@2:

; 28   : 	
; 29   : 	chunkSize = _file.readDword();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readDword@DataIn@ozcollide@@QAEHXZ	; ozcollide::DataIn::readDword
	mov	DWORD PTR _chunkSize$[ebp], eax

; 30   : 
; 31   : 	char leafType = _file.readByte();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readByte@DataIn@ozcollide@@QAEDXZ	; ozcollide::DataIn::readByte
	mov	BYTE PTR _leafType$[ebp], al

; 32   : 
; 33   : 	if (leafType != 1)

	movsx	eax, BYTE PTR _leafType$[ebp]
	cmp	eax, 1
	je	SHORT $LN8@loadBinary@2

; 34   : 		return ERR_INVALID_FORMAT;

	mov	eax, 18					; 00000012H
	jmp	$LN10@loadBinary@2
$LN8@loadBinary@2:

; 35   : 
; 36   : 	AABBTreeSphere *t;
; 37   : 	char leafDepth = _file.readByte();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readByte@DataIn@ozcollide@@QAEDXZ	; ozcollide::DataIn::readByte
	mov	BYTE PTR _leafDepth$[ebp], al

; 38   : 	t = new AABBTreeSphere(leafDepth);

	push	220					; 000000dcH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7442[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7442[ebp], 0
	je	SHORT $LN12@loadBinary@2
	movsx	ecx, BYTE PTR _leafDepth$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T7442[ebp]
	call	??0AABBTreeSphere@ozcollide@@AAE@H@Z	; ozcollide::AABBTreeSphere::AABBTreeSphere
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN13@loadBinary@2
$LN12@loadBinary@2:
	mov	DWORD PTR tv130[ebp], 0
$LN13@loadBinary@2:
	mov	edx, DWORD PTR tv130[ebp]
	mov	DWORD PTR $T7441[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T7441[ebp]
	mov	DWORD PTR _t$[ebp], eax

; 39   : 
; 40   : 	t->nbNodes_ = _file.readDword();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readDword@DataIn@ozcollide@@QAEHXZ	; ozcollide::DataIn::readDword
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 41   : 	t->nbLeafs_ = _file.readDword();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readDword@DataIn@ozcollide@@QAEHXZ	; ozcollide::DataIn::readDword
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [edx+12], eax

; 42   : 
; 43   : 	t->leafs_ = new AABBTreeSphereLeaf[t->nbLeafs_];

	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T7445[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T7445[ebp]
	mov	edx, 44					; 0000002cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7447[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T7447[ebp], 0
	je	SHORT $LN14@loadBinary@2
	mov	ecx, DWORD PTR $T7447[ebp]
	mov	edx, DWORD PTR $T7445[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	push	OFFSET ??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ ; ozcollide::AABBTreeSphereLeaf::AABBTreeSphereLeaf
	mov	eax, DWORD PTR $T7445[ebp]
	push	eax
	push	44					; 0000002cH
	mov	ecx, DWORD PTR $T7447[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T7447[ebp]
	add	edx, 4
	mov	DWORD PTR tv172[ebp], edx
	jmp	SHORT $LN15@loadBinary@2
$LN14@loadBinary@2:
	mov	DWORD PTR tv172[ebp], 0
$LN15@loadBinary@2:
	mov	eax, DWORD PTR tv172[ebp]
	mov	DWORD PTR $T7446[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR $T7446[ebp]
	mov	DWORD PTR [ecx+36], edx

; 44   : 	t->root_ = new AABBTreeNode[t->nbNodes_];

	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T7450[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T7450[ebp]
	mov	edx, 32					; 00000020H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7452[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T7452[ebp], 0
	je	SHORT $LN16@loadBinary@2
	mov	ecx, DWORD PTR $T7452[ebp]
	mov	edx, DWORD PTR $T7450[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1AABBTreeNode@ozcollide@@QAE@XZ
	push	OFFSET ??0AABBTreeNode@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR $T7450[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR $T7452[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T7452[ebp]
	add	edx, 4
	mov	DWORD PTR tv204[ebp], edx
	jmp	SHORT $LN17@loadBinary@2
$LN16@loadBinary@2:
	mov	DWORD PTR tv204[ebp], 0
$LN17@loadBinary@2:
	mov	eax, DWORD PTR tv204[ebp]
	mov	DWORD PTR $T7451[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR $T7451[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN7@loadBinary@2:

; 45   : 
; 46   : 	while(chunkSize > 8) {

	cmp	DWORD PTR _chunkSize$[ebp], 8
	jle	$LN6@loadBinary@2

; 47   : 		char id[4];
; 48   : 		_file.read(id, 4);

	push	4
	lea	eax, DWORD PTR _id$7008[ebp]
	push	eax
	mov	ecx, DWORD PTR __file$[ebp]
	call	?read@DataIn@ozcollide@@QAEHPAXH@Z	; ozcollide::DataIn::read

; 49   : 		int sc = MID(id[0], id[1], id[2], id[3]);

	movsx	ecx, BYTE PTR _id$7008[ebp+3]
	shl	ecx, 24					; 00000018H
	movsx	edx, BYTE PTR _id$7008[ebp+2]
	shl	edx, 16					; 00000010H
	add	ecx, edx
	movsx	eax, BYTE PTR _id$7008[ebp+1]
	shl	eax, 8
	add	ecx, eax
	movsx	edx, BYTE PTR _id$7008[ebp]
	add	ecx, edx
	mov	DWORD PTR _sc$7009[ebp], ecx

; 50   : 
; 51   : 		int scSize = _file.readDword();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readDword@DataIn@ozcollide@@QAEHXZ	; ozcollide::DataIn::readDword
	mov	DWORD PTR _scSize$7010[ebp], eax

; 52   : 		int pos0 = _file.tell();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?tell@DataIn@ozcollide@@QBEHXZ		; ozcollide::DataIn::tell
	mov	DWORD PTR _pos0$7011[ebp], eax

; 53   : 
; 54   : 		if (sc == MID('N','O','D','S'))

	cmp	DWORD PTR _sc$7009[ebp], 1396985678	; 53444f4eH
	jne	SHORT $LN5@loadBinary@2

; 55   : 			t->readNODSchunk(_file, scSize, t->nbNodes_);

	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _scSize$7010[ebp]
	push	edx
	mov	eax, DWORD PTR __file$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	call	?readNODSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z ; ozcollide::AABBTreeSphere::readNODSchunk
	jmp	SHORT $LN4@loadBinary@2
$LN5@loadBinary@2:

; 56   : 		else if (sc == MID('L','E','F','S'))

	cmp	DWORD PTR _sc$7009[ebp], 1397114188	; 5346454cH
	jne	SHORT $LN3@loadBinary@2

; 57   : 			t->readLEFSchunk(_file, scSize, t->nbLeafs_);

	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _scSize$7010[ebp]
	push	eax
	mov	ecx, DWORD PTR __file$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _t$[ebp]
	call	?readLEFSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z ; ozcollide::AABBTreeSphere::readLEFSchunk

; 58   : 		else

	jmp	SHORT $LN4@loadBinary@2
$LN3@loadBinary@2:

; 59   : 			_file.advance(scSize);

	mov	edx, DWORD PTR _scSize$7010[ebp]
	push	edx
	mov	ecx, DWORD PTR __file$[ebp]
	call	?advance@DataIn@ozcollide@@QAE_NH@Z	; ozcollide::DataIn::advance
$LN4@loadBinary@2:

; 60   : 
; 61   : 		int pos1 = _file.tell();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?tell@DataIn@ozcollide@@QBEHXZ		; ozcollide::DataIn::tell
	mov	DWORD PTR _pos1$7016[ebp], eax

; 62   : 		if (pos1 - pos0 != scSize)

	mov	eax, DWORD PTR _pos1$7016[ebp]
	sub	eax, DWORD PTR _pos0$7011[ebp]
	cmp	eax, DWORD PTR _scSize$7010[ebp]
	je	SHORT $LN1@loadBinary@2

; 63   : 			_file.seek(pos0 + scSize);

	mov	ecx, DWORD PTR _pos0$7011[ebp]
	add	ecx, DWORD PTR _scSize$7010[ebp]
	push	ecx
	mov	ecx, DWORD PTR __file$[ebp]
	call	?seek@DataIn@ozcollide@@QAE_NH@Z	; ozcollide::DataIn::seek
$LN1@loadBinary@2:

; 64   : 		chunkSize -= scSize + 8;

	mov	edx, DWORD PTR _scSize$7010[ebp]
	add	edx, 8
	mov	eax, DWORD PTR _chunkSize$[ebp]
	sub	eax, edx
	mov	DWORD PTR _chunkSize$[ebp], eax

; 65   : 	}

	jmp	$LN7@loadBinary@2
$LN6@loadBinary@2:

; 66   : 
; 67   : 	*_tree = t;

	mov	ecx, DWORD PTR __tree$[ebp]
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [ecx], edx

; 68   : 
; 69   : 	return NOERR;

	xor	eax, eax
$LN10@loadBinary@2:

; 70   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z$0:
	mov	eax, DWORD PTR $T7442[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z$1:
	mov	eax, DWORD PTR $T7447[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z$2:
	mov	eax, DWORD PTR $T7452[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?loadBinary@AABBTreeSphere@ozcollide@@SA?AW4ERR@2@AAVDataIn@2@PAPAV12@@Z ENDP ; ozcollide::AABBTreeSphere::loadBinary
;	COMDAT xdata$x
; File i:\svnroot\client\sdk\ozcollide\aabbtree_sphere.h
xdata$x	SEGMENT
__unwindtable$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ$0
__ehfuncinfo$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ PROC		; ozcollide::AABBTreeSphereLeaf::AABBTreeSphereLeaf, COMDAT
; _this$ = ecx

; 46   : 	AABBTreeSphereLeaf() : nbSpheres(0), spheres(NULL), users(NULL) { };

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0AABBTreeNode@ozcollide@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AABBTreeNode@ozcollide@@QAE@XZ
__ehhandler$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ ENDP		; ozcollide::AABBTreeSphereLeaf::AABBTreeSphereLeaf
PUBLIC	??1Box@ozcollide@@QAE@XZ			; ozcollide::Box::~Box
PUBLIC	??0Box@ozcollide@@QAE@XZ			; ozcollide::Box::Box
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AABBTreeNode@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AABBTreeNode@ozcollide@@QAE@XZ$0
__ehfuncinfo$??0AABBTreeNode@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0AABBTreeNode@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0AABBTreeNode@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AABBTreeNode@ozcollide@@QAE@XZ PROC			; ozcollide::AABBTreeNode::AABBTreeNode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0AABBTreeNode@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Box@ozcollide@@QAE@XZ		; ozcollide::Box::Box
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AABBTreeNode@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
__ehhandler$??0AABBTreeNode@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0AABBTreeNode@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0AABBTreeNode@ozcollide@@QAE@XZ ENDP			; ozcollide::AABBTreeNode::AABBTreeNode
PUBLIC	??0Vec3f@ozcollide@@QAE@XZ			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\box.h
;	COMDAT ??0Box@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Box@ozcollide@@QAE@XZ PROC				; ozcollide::Box::Box, COMDAT
; _this$ = ecx

; 44   : 	ozinline Box()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f

; 45   : 	{
; 46   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Box@ozcollide@@QAE@XZ ENDP				; ozcollide::Box::Box
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
_TEXT	ENDS
;	COMDAT ??0Vec3f@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vec3f@ozcollide@@QAE@XZ PROC				; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 37   : 	ozinline Vec3f()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	{
; 39   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vec3f@ozcollide@@QAE@XZ ENDP				; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\box.h
_TEXT	ENDS
;	COMDAT ??1Box@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Box@ozcollide@@QAE@XZ PROC				; ozcollide::Box::~Box, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1Box@ozcollide@@QAE@XZ ENDP				; ozcollide::Box::~Box
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AABBTreeNode@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AABBTreeNode@ozcollide@@QAE@XZ$0
__ehfuncinfo$??1AABBTreeNode@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1AABBTreeNode@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1AABBTreeNode@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AABBTreeNode@ozcollide@@QAE@XZ PROC			; ozcollide::AABBTreeNode::~AABBTreeNode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1AABBTreeNode@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AABBTreeNode@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
__ehhandler$??1AABBTreeNode@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1AABBTreeNode@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1AABBTreeNode@ozcollide@@QAE@XZ ENDP			; ozcollide::AABBTreeNode::~AABBTreeNode
PUBLIC	??_EAABBTreeSphereLeaf@ozcollide@@QAEPAXI@Z	; ozcollide::AABBTreeSphereLeaf::`vector deleting destructor'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_EAABBTreeSphereLeaf@ozcollide@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EAABBTreeSphereLeaf@ozcollide@@QAEPAXI@Z PROC	; ozcollide::AABBTreeSphereLeaf::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@2
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EAABBTreeSphereLeaf@ozcollide@@QAEPAXI@Z ENDP	; ozcollide::AABBTreeSphereLeaf::`vector deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ$0
__ehfuncinfo$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ PROC		; ozcollide::AABBTreeSphereLeaf::~AABBTreeSphereLeaf, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AABBTreeNode@ozcollide@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AABBTreeNode@ozcollide@@QAE@XZ
__ehhandler$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ ENDP		; ozcollide::AABBTreeSphereLeaf::~AABBTreeSphereLeaf
PUBLIC	??_EAABBTreeNode@ozcollide@@QAEPAXI@Z		; ozcollide::AABBTreeNode::`vector deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_EAABBTreeNode@ozcollide@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EAABBTreeNode@ozcollide@@QAEPAXI@Z PROC		; ozcollide::AABBTreeNode::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1AABBTreeNode@ozcollide@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@3
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AABBTreeNode@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EAABBTreeNode@ozcollide@@QAEPAXI@Z ENDP		; ozcollide::AABBTreeNode::`vector deleting destructor'
_TEXT	ENDS
EXTRN	?readFloat@DataIn@ozcollide@@QAEMXZ:PROC	; ozcollide::DataIn::readFloat
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\aabbtreesphere_io.cpp
_TEXT	SEGMENT
_this$ = -36						; size = 4
_index$7056 = -32					; size = 4
_isLeaf$7055 = -28					; size = 4
_index$7050 = -24					; size = 4
_isLeaf$7049 = -20					; size = 4
_node$7044 = -16					; size = 4
_leftID$7045 = -12					; size = 4
_rightID$7046 = -8					; size = 4
_i$ = -4						; size = 4
__file$ = 8						; size = 4
__chunkSize$ = 12					; size = 4
__nbNodes$ = 16						; size = 4
?readNODSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z PROC ; ozcollide::AABBTreeSphere::readNODSchunk
; _this$ = ecx

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 74   : 	int i;
; 75   : 
; 76   : 	for (i = 0; i < _nbNodes; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@readNODSch
$LN10@readNODSch:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@readNODSch:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR __nbNodes$[ebp]
	jge	$LN9@readNODSch

; 77   : 		AABBTreeNode &node = root_[i];

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _node$7044[ebp], edx

; 78   : 
; 79   : 		node.aabb.center.x = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	ecx, DWORD PTR _node$7044[ebp]
	fstp	DWORD PTR [ecx]

; 80   : 		node.aabb.center.y = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	edx, DWORD PTR _node$7044[ebp]
	fstp	DWORD PTR [edx+4]

; 81   : 		node.aabb.center.z = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	eax, DWORD PTR _node$7044[ebp]
	fstp	DWORD PTR [eax+8]

; 82   : 		node.aabb.extent.x = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	ecx, DWORD PTR _node$7044[ebp]
	fstp	DWORD PTR [ecx+12]

; 83   : 		node.aabb.extent.y = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	edx, DWORD PTR _node$7044[ebp]
	fstp	DWORD PTR [edx+16]

; 84   : 		node.aabb.extent.z = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	eax, DWORD PTR _node$7044[ebp]
	fstp	DWORD PTR [eax+20]

; 85   : 
; 86   : 		int leftID = _file.readDword();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readDword@DataIn@ozcollide@@QAEHXZ	; ozcollide::DataIn::readDword
	mov	DWORD PTR _leftID$7045[ebp], eax

; 87   : 		int rightID = _file.readDword();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readDword@DataIn@ozcollide@@QAEHXZ	; ozcollide::DataIn::readDword
	mov	DWORD PTR _rightID$7046[ebp], eax

; 88   : 
; 89   : 		if (leftID == -1)

	cmp	DWORD PTR _leftID$7045[ebp], -1
	jne	SHORT $LN8@readNODSch

; 90   : 			node.left = NULL;

	mov	ecx, DWORD PTR _node$7044[ebp]
	mov	DWORD PTR [ecx+24], 0

; 91   : 		else {

	jmp	SHORT $LN5@readNODSch
$LN8@readNODSch:

; 92   : 			int isLeaf = leftID >> 31;

	mov	edx, DWORD PTR _leftID$7045[ebp]
	sar	edx, 31					; 0000001fH
	mov	DWORD PTR _isLeaf$7049[ebp], edx

; 93   : 			int index = leftID & 0x7fffffff;

	mov	eax, DWORD PTR _leftID$7045[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _index$7050[ebp], eax

; 94   : 			if (isLeaf)

	cmp	DWORD PTR _isLeaf$7049[ebp], 0
	je	SHORT $LN6@readNODSch

; 95   : 				node.left = &leafs_[index];

	mov	ecx, DWORD PTR _index$7050[ebp]
	imul	ecx, 44					; 0000002cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+36]
	mov	eax, DWORD PTR _node$7044[ebp]
	mov	DWORD PTR [eax+24], ecx

; 96   : 			else

	jmp	SHORT $LN5@readNODSch
$LN6@readNODSch:

; 97   : 				node.left = &root_[index];

	mov	ecx, DWORD PTR _index$7050[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _node$7044[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN5@readNODSch:

; 98   : 		}
; 99   : 
; 100  : 		if (rightID == -1)

	cmp	DWORD PTR _rightID$7046[ebp], -1
	jne	SHORT $LN4@readNODSch

; 101  : 			node.right = NULL;

	mov	ecx, DWORD PTR _node$7044[ebp]
	mov	DWORD PTR [ecx+28], 0

; 102  : 		else {

	jmp	SHORT $LN1@readNODSch
$LN4@readNODSch:

; 103  : 			int isLeaf = rightID >> 31;

	mov	edx, DWORD PTR _rightID$7046[ebp]
	sar	edx, 31					; 0000001fH
	mov	DWORD PTR _isLeaf$7055[ebp], edx

; 104  : 			int index = rightID & 0x7fffffff;

	mov	eax, DWORD PTR _rightID$7046[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _index$7056[ebp], eax

; 105  : 			if (isLeaf)

	cmp	DWORD PTR _isLeaf$7055[ebp], 0
	je	SHORT $LN2@readNODSch

; 106  : 				node.right = &leafs_[index];

	mov	ecx, DWORD PTR _index$7056[ebp]
	imul	ecx, 44					; 0000002cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+36]
	mov	eax, DWORD PTR _node$7044[ebp]
	mov	DWORD PTR [eax+28], ecx

; 107  : 			else

	jmp	SHORT $LN1@readNODSch
$LN2@readNODSch:

; 108  : 				node.right = &root_[index];

	mov	ecx, DWORD PTR _index$7056[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _node$7044[ebp]
	mov	DWORD PTR [eax+28], ecx
$LN1@readNODSch:

; 109  : 		}

	jmp	$LN10@readNODSch
$LN9@readNODSch:

; 110  : 	}
; 111  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?readNODSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z ENDP ; ozcollide::AABBTreeSphere::readNODSchunk
_TEXT	ENDS
PUBLIC	??0Sphere@ozcollide@@QAE@XZ			; ozcollide::Sphere::Sphere
xdata$x	SEGMENT
__unwindtable$?readLEFSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?readLEFSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z$0
__ehfuncinfo$?readLEFSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?readLEFSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv179 = -52						; size = 4
_this$ = -48						; size = 4
$T7513 = -44						; size = 4
$T7512 = -40						; size = 4
$T7511 = -36						; size = 4
_s$7081 = -32						; size = 4
_leaf$7070 = -28					; size = 4
_nbSpheres$7071 = -24					; size = 4
_j$ = -20						; size = 4
_i$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__file$ = 8						; size = 4
__chunkSize$ = 12					; size = 4
__nbLeafs$ = 16						; size = 4
?readLEFSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z PROC ; ozcollide::AABBTreeSphere::readLEFSchunk
; _this$ = ecx

; 114  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?readLEFSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 115  : 	int i, j;
; 116  : 
; 117  : 	for (i = 0; i < _nbLeafs; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@readLEFSch
$LN5@readLEFSch:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@readLEFSch:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR __nbLeafs$[ebp]
	jge	$LN4@readLEFSch

; 118  : 		AABBTreeSphereLeaf &leaf = leafs_[i];

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+36]
	mov	DWORD PTR _leaf$7070[ebp], edx

; 119  : 	
; 120  : 		leaf.aabb.center.x = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	ecx, DWORD PTR _leaf$7070[ebp]
	fstp	DWORD PTR [ecx]

; 121  : 		leaf.aabb.center.y = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	edx, DWORD PTR _leaf$7070[ebp]
	fstp	DWORD PTR [edx+4]

; 122  : 		leaf.aabb.center.z = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	eax, DWORD PTR _leaf$7070[ebp]
	fstp	DWORD PTR [eax+8]

; 123  : 		leaf.aabb.extent.x = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	ecx, DWORD PTR _leaf$7070[ebp]
	fstp	DWORD PTR [ecx+12]

; 124  : 		leaf.aabb.extent.y = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	edx, DWORD PTR _leaf$7070[ebp]
	fstp	DWORD PTR [edx+16]

; 125  : 		leaf.aabb.extent.z = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	eax, DWORD PTR _leaf$7070[ebp]
	fstp	DWORD PTR [eax+20]

; 126  : 		
; 127  : 		leaf.left = NULL;

	mov	ecx, DWORD PTR _leaf$7070[ebp]
	mov	DWORD PTR [ecx+24], 0

; 128  : 		leaf.right = NULL;

	mov	edx, DWORD PTR _leaf$7070[ebp]
	mov	DWORD PTR [edx+28], 0

; 129  : 		
; 130  : 		int nbSpheres = _file.readDword();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readDword@DataIn@ozcollide@@QAEHXZ	; ozcollide::DataIn::readDword
	mov	DWORD PTR _nbSpheres$7071[ebp], eax

; 131  : 		leaf.nbSpheres = nbSpheres;

	mov	eax, DWORD PTR _leaf$7070[ebp]
	mov	ecx, DWORD PTR _nbSpheres$7071[ebp]
	mov	DWORD PTR [eax+32], ecx

; 132  : 		leaf.spheres = new Sphere[nbSpheres];

	mov	edx, DWORD PTR _nbSpheres$7071[ebp]
	mov	DWORD PTR $T7511[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T7511[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7513[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7513[ebp], 0
	je	SHORT $LN9@readLEFSch
	push	OFFSET ??0Sphere@ozcollide@@QAE@XZ	; ozcollide::Sphere::Sphere
	mov	eax, DWORD PTR $T7511[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T7513[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T7513[ebp]
	mov	DWORD PTR tv179[ebp], edx
	jmp	SHORT $LN10@readLEFSch
$LN9@readLEFSch:
	mov	DWORD PTR tv179[ebp], 0
$LN10@readLEFSch:
	mov	eax, DWORD PTR tv179[ebp]
	mov	DWORD PTR $T7512[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _leaf$7070[ebp]
	mov	edx, DWORD PTR $T7512[ebp]
	mov	DWORD PTR [ecx+36], edx

; 133  : 		for (j = 0; j < nbSpheres; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@readLEFSch
$LN2@readLEFSch:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@readLEFSch:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _nbSpheres$7071[ebp]
	jge	SHORT $LN1@readLEFSch

; 134  : 			Sphere &s = (Sphere &) leaf.spheres[j];

	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _leaf$7070[ebp]
	add	edx, DWORD PTR [eax+36]
	mov	DWORD PTR _s$7081[ebp], edx

; 135  : 			s.center.x = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	ecx, DWORD PTR _s$7081[ebp]
	fstp	DWORD PTR [ecx]

; 136  : 			s.center.y = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	edx, DWORD PTR _s$7081[ebp]
	fstp	DWORD PTR [edx+4]

; 137  : 			s.center.z = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	eax, DWORD PTR _s$7081[ebp]
	fstp	DWORD PTR [eax+8]

; 138  : 			s.radius = _file.readFloat();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?readFloat@DataIn@ozcollide@@QAEMXZ	; ozcollide::DataIn::readFloat
	mov	ecx, DWORD PTR _s$7081[ebp]
	fstp	DWORD PTR [ecx+12]

; 139  : 		}

	jmp	SHORT $LN2@readLEFSch
$LN1@readLEFSch:

; 140  : 	}

	jmp	$LN5@readLEFSch
$LN4@readLEFSch:

; 141  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?readLEFSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z$0:
	mov	eax, DWORD PTR $T7513[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?readLEFSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?readLEFSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?readLEFSchunk@AABBTreeSphere@ozcollide@@AAEXAAVDataIn@2@HH@Z ENDP ; ozcollide::AABBTreeSphere::readLEFSchunk
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\sphere.h
;	COMDAT ??0Sphere@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Sphere@ozcollide@@QAE@XZ PROC			; ozcollide::Sphere::Sphere, COMDAT
; _this$ = ecx

; 36   : 	Sphere() { };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Sphere@ozcollide@@QAE@XZ ENDP			; ozcollide::Sphere::Sphere
_TEXT	ENDS
PUBLIC	?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@PBD@Z ; ozcollide::AABBTreeSphere::saveBinary
EXTRN	?close@DataOut@ozcollide@@QAE_NXZ:PROC		; ozcollide::DataOut::close
EXTRN	??1DataOut@ozcollide@@UAE@XZ:PROC		; ozcollide::DataOut::~DataOut
EXTRN	?open@DataOut@ozcollide@@QAE_NPBD@Z:PROC	; ozcollide::DataOut::open
EXTRN	??0DataOut@ozcollide@@QAE@XZ:PROC		; ozcollide::DataOut::DataOut
xdata$x	SEGMENT
__unwindtable$?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@PBD@Z$0
__ehfuncinfo$?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\aabbtreesphere_io.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T7526 = -44						; size = 4
$T7525 = -40						; size = 4
$T7524 = -36						; size = 4
_err$ = -32						; size = 4
_file$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
__fname$ = 8						; size = 4
?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@PBD@Z PROC ; ozcollide::AABBTreeSphere::saveBinary
; _this$ = ecx

; 144  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 	DataOut file;

	lea	ecx, DWORD PTR _file$[ebp]
	call	??0DataOut@ozcollide@@QAE@XZ		; ozcollide::DataOut::DataOut
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 146  : 	ERR err;
; 147  : 
; 148  : 	if (!file.open(_fname))

	mov	eax, DWORD PTR __fname$[ebp]
	push	eax
	lea	ecx, DWORD PTR _file$[ebp]
	call	?open@DataOut@ozcollide@@QAE_NPBD@Z	; ozcollide::DataOut::open
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@saveBinary

; 149  : 		return ERR_CANNOT_OPEN;

	mov	DWORD PTR $T7524[ebp], 17		; 00000011H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _file$[ebp]
	call	??1DataOut@ozcollide@@UAE@XZ		; ozcollide::DataOut::~DataOut
	mov	eax, DWORD PTR $T7524[ebp]
	jmp	SHORT $LN3@saveBinary
$LN2@saveBinary:

; 150  : 
; 151  : 	err = saveBinary(file);

	lea	edx, DWORD PTR _file$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	DWORD PTR _err$[ebp], eax

; 152  : 	if (err)

	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN1@saveBinary

; 153  : 		return err;

	mov	ecx, DWORD PTR _err$[ebp]
	mov	DWORD PTR $T7525[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _file$[ebp]
	call	??1DataOut@ozcollide@@UAE@XZ		; ozcollide::DataOut::~DataOut
	mov	eax, DWORD PTR $T7525[ebp]
	jmp	SHORT $LN3@saveBinary
$LN1@saveBinary:

; 154  : 
; 155  : 	file.close();

	lea	ecx, DWORD PTR _file$[ebp]
	call	?close@DataOut@ozcollide@@QAE_NXZ	; ozcollide::DataOut::close

; 156  : 	return NOERR;

	mov	DWORD PTR $T7526[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _file$[ebp]
	call	??1DataOut@ozcollide@@UAE@XZ		; ozcollide::DataOut::~DataOut
	mov	eax, DWORD PTR $T7526[ebp]
$LN3@saveBinary:

; 157  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@PBD@Z$0:
	lea	ecx, DWORD PTR _file$[ebp]
	jmp	??1DataOut@ozcollide@@UAE@XZ		; ozcollide::DataOut::~DataOut
__ehhandler$?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@PBD@Z ENDP ; ozcollide::AABBTreeSphere::saveBinary
PUBLIC	?getNbLeafs@AABBTree@ozcollide@@QBEHXZ		; ozcollide::AABBTree::getNbLeafs
PUBLIC	?getNbNodes@AABBTree@ozcollide@@QBEHXZ		; ozcollide::AABBTree::getNbNodes
PUBLIC	?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@AAVDataOut@2@@Z ; ozcollide::AABBTreeSphere::saveBinary
EXTRN	?seek@DataOut@ozcollide@@QAE_NH@Z:PROC		; ozcollide::DataOut::seek
EXTRN	?writeFloat@DataOut@ozcollide@@QAEHM@Z:PROC	; ozcollide::DataOut::writeFloat
EXTRN	?writeDword@DataOut@ozcollide@@QAEHH@Z:PROC	; ozcollide::DataOut::writeDword
EXTRN	?writeByte@DataOut@ozcollide@@QAEHD@Z:PROC	; ozcollide::DataOut::writeByte
EXTRN	?advance@DataOut@ozcollide@@QAE_NH@Z:PROC	; ozcollide::DataOut::advance
EXTRN	?tell@DataOut@ozcollide@@QBEHXZ:PROC		; ozcollide::DataOut::tell
EXTRN	?writeStr@DataOut@ozcollide@@QAEHPBD@Z:PROC	; ozcollide::DataOut::writeStr
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -68						; size = 4
_s$7135 = -64						; size = 4
_leaf$7130 = -60					; size = 4
_nbSpheres$7131 = -56					; size = 4
_diff$7119 = -52					; size = 4
_diff$7113 = -48					; size = 4
_node$7109 = -44					; size = 4
_right$7111 = -40					; size = 4
_left$7110 = -36					; size = 4
_j$ = -32						; size = 4
_size$ = -28						; size = 4
_nbNodes$ = -24						; size = 4
_sizeLEFS$ = -20					; size = 4
_i$ = -16						; size = 4
_posLEFS$ = -12						; size = 4
_posBBT$ = -8						; size = 4
_nbLeafs$ = -4						; size = 4
__file$ = 8						; size = 4
?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@AAVDataOut@2@@Z PROC ; ozcollide::AABBTreeSphere::saveBinary
; _this$ = ecx

; 160  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 	int i, j;
; 162  : 
; 163  : 	_file.writeStr("AABB");

	push	OFFSET $SG7100
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeStr@DataOut@ozcollide@@QAEHPBD@Z	; ozcollide::DataOut::writeStr

; 164  : 	int posBBT = _file.tell();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?tell@DataOut@ozcollide@@QBEHXZ		; ozcollide::DataOut::tell
	mov	DWORD PTR _posBBT$[ebp], eax

; 165  : 	_file.advance(4);

	push	4
	mov	ecx, DWORD PTR __file$[ebp]
	call	?advance@DataOut@ozcollide@@QAE_NH@Z	; ozcollide::DataOut::advance

; 166  : 
; 167  : 	int size = 0;

	mov	DWORD PTR _size$[ebp], 0

; 168  : 
; 169  : 	size += _file.writeByte(1);

	push	1
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeByte@DataOut@ozcollide@@QAEHD@Z	; ozcollide::DataOut::writeByte
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 170  : 
; 171  : 	int nbNodes = getNbNodes();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNbNodes@AABBTree@ozcollide@@QBEHXZ	; ozcollide::AABBTree::getNbNodes
	mov	DWORD PTR _nbNodes$[ebp], eax

; 172  : 	int nbLeafs = getNbLeafs();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNbLeafs@AABBTree@ozcollide@@QBEHXZ	; ozcollide::AABBTree::getNbLeafs
	mov	DWORD PTR _nbLeafs$[ebp], eax

; 173  : 
; 174  : 	size += _file.writeByte(leafDepth_);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	push	ecx
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeByte@DataOut@ozcollide@@QAEHD@Z	; ozcollide::DataOut::writeByte
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 175  : 	size += _file.writeDword(nbNodes);

	mov	edx, DWORD PTR _nbNodes$[ebp]
	push	edx
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeDword@DataOut@ozcollide@@QAEHH@Z	; ozcollide::DataOut::writeDword
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 176  : 	size += _file.writeDword(nbLeafs);

	mov	eax, DWORD PTR _nbLeafs$[ebp]
	push	eax
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeDword@DataOut@ozcollide@@QAEHH@Z	; ozcollide::DataOut::writeDword
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 177  : 
; 178  : 	size += _file.writeStr("NODS");

	push	OFFSET $SG7105
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeStr@DataOut@ozcollide@@QAEHPBD@Z	; ozcollide::DataOut::writeStr
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 179  : 	size += _file.writeDword((24 + 8) * nbNodes);

	mov	ecx, DWORD PTR _nbNodes$[ebp]
	shl	ecx, 5
	push	ecx
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeDword@DataOut@ozcollide@@QAEHH@Z	; ozcollide::DataOut::writeDword
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 180  : 	for (i = 0; i < nbNodes; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN17@saveBinary@2
$LN16@saveBinary@2:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN17@saveBinary@2:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nbNodes$[ebp]
	jge	$LN15@saveBinary@2

; 181  : 		AABBTreeNode *node = &root_[i];

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _node$7109[ebp], ecx

; 182  : 		size += _file.writeFloat(node->aabb.center.x);

	mov	eax, DWORD PTR _node$7109[ebp]
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 183  : 		size += _file.writeFloat(node->aabb.center.y);

	mov	ecx, DWORD PTR _node$7109[ebp]
	push	ecx
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 184  : 		size += _file.writeFloat(node->aabb.center.z);

	mov	edx, DWORD PTR _node$7109[ebp]
	push	ecx
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 185  : 		size += _file.writeFloat(node->aabb.extent.x);

	mov	eax, DWORD PTR _node$7109[ebp]
	push	ecx
	fld	DWORD PTR [eax+12]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 186  : 		size += _file.writeFloat(node->aabb.extent.y);

	mov	ecx, DWORD PTR _node$7109[ebp]
	push	ecx
	fld	DWORD PTR [ecx+16]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 187  : 		size += _file.writeFloat(node->aabb.extent.z);

	mov	edx, DWORD PTR _node$7109[ebp]
	push	ecx
	fld	DWORD PTR [edx+20]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 188  : 
; 189  : 		const AABBTreeNode *left = node->left;

	mov	eax, DWORD PTR _node$7109[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _left$7110[ebp], ecx

; 190  : 		const AABBTreeNode *right = node->right;

	mov	edx, DWORD PTR _node$7109[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _right$7111[ebp], eax

; 191  : 
; 192  : 		if (left) {

	cmp	DWORD PTR _left$7110[ebp], 0
	je	SHORT $LN14@saveBinary@2

; 193  : 			int diff = left - root_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _left$7110[ebp]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 5
	mov	DWORD PTR _diff$7113[ebp], edx

; 194  : 			if (diff < 0 || diff >= nbNodes) {

	cmp	DWORD PTR _diff$7113[ebp], 0
	jl	SHORT $LN12@saveBinary@2
	mov	eax, DWORD PTR _diff$7113[ebp]
	cmp	eax, DWORD PTR _nbNodes$[ebp]
	jl	SHORT $LN13@saveBinary@2
$LN12@saveBinary@2:

; 195  : 				diff = ((AABBTreeSphereLeaf*) left) - leafs_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _left$7110[ebp]
	sub	eax, DWORD PTR [ecx+36]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	mov	DWORD PTR _diff$7113[ebp], eax

; 196  : 				diff |= 0x80000000;

	mov	edx, DWORD PTR _diff$7113[ebp]
	or	edx, -2147483648			; 80000000H
	mov	DWORD PTR _diff$7113[ebp], edx
$LN13@saveBinary@2:

; 197  : 			}
; 198  : 			size += _file.writeDword(diff);

	mov	eax, DWORD PTR _diff$7113[ebp]
	push	eax
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeDword@DataOut@ozcollide@@QAEHH@Z	; ozcollide::DataOut::writeDword
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 199  : 		}
; 200  : 		else

	jmp	SHORT $LN11@saveBinary@2
$LN14@saveBinary@2:

; 201  : 			size += _file.writeDword(-1);

	push	-1
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeDword@DataOut@ozcollide@@QAEHH@Z	; ozcollide::DataOut::writeDword
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax
$LN11@saveBinary@2:

; 202  : 
; 203  : 		if (right) {

	cmp	DWORD PTR _right$7111[ebp], 0
	je	SHORT $LN10@saveBinary@2

; 204  : 			int diff = right - root_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _right$7111[ebp]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 5
	mov	DWORD PTR _diff$7119[ebp], edx

; 205  : 			if (diff < 0 || diff >= nbNodes) {

	cmp	DWORD PTR _diff$7119[ebp], 0
	jl	SHORT $LN8@saveBinary@2
	mov	eax, DWORD PTR _diff$7119[ebp]
	cmp	eax, DWORD PTR _nbNodes$[ebp]
	jl	SHORT $LN9@saveBinary@2
$LN8@saveBinary@2:

; 206  : 				diff = ((AABBTreeSphereLeaf*) right) - leafs_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _right$7111[ebp]
	sub	eax, DWORD PTR [ecx+36]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	mov	DWORD PTR _diff$7119[ebp], eax

; 207  : 				diff |= 0x80000000;

	mov	edx, DWORD PTR _diff$7119[ebp]
	or	edx, -2147483648			; 80000000H
	mov	DWORD PTR _diff$7119[ebp], edx
$LN9@saveBinary@2:

; 208  : 			}
; 209  : 			size += _file.writeDword(diff);

	mov	eax, DWORD PTR _diff$7119[ebp]
	push	eax
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeDword@DataOut@ozcollide@@QAEHH@Z	; ozcollide::DataOut::writeDword
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 210  : 		}
; 211  : 		else

	jmp	SHORT $LN7@saveBinary@2
$LN10@saveBinary@2:

; 212  : 			size += _file.writeDword(-1);

	push	-1
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeDword@DataOut@ozcollide@@QAEHH@Z	; ozcollide::DataOut::writeDword
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax
$LN7@saveBinary@2:

; 213  : 	}

	jmp	$LN16@saveBinary@2
$LN15@saveBinary@2:

; 214  : 
; 215  : 	size += _file.writeStr("LEFS");

	push	OFFSET $SG7124
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeStr@DataOut@ozcollide@@QAEHPBD@Z	; ozcollide::DataOut::writeStr
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 216  : 	int posLEFS = _file.tell();

	mov	ecx, DWORD PTR __file$[ebp]
	call	?tell@DataOut@ozcollide@@QBEHXZ		; ozcollide::DataOut::tell
	mov	DWORD PTR _posLEFS$[ebp], eax

; 217  : 	_file.advance(4);

	push	4
	mov	ecx, DWORD PTR __file$[ebp]
	call	?advance@DataOut@ozcollide@@QAE_NH@Z	; ozcollide::DataOut::advance

; 218  : 	int sizeLEFS = 0;

	mov	DWORD PTR _sizeLEFS$[ebp], 0

; 219  : 	for (i = 0; i < nbLeafs; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@saveBinary@2
$LN5@saveBinary@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@saveBinary@2:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _nbLeafs$[ebp]
	jge	$LN4@saveBinary@2

; 220  : 		AABBTreeSphereLeaf *leaf = &leafs_[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _leaf$7130[ebp], eax

; 221  : 
; 222  : 		_file.writeFloat(leaf->aabb.center.x);

	mov	edx, DWORD PTR _leaf$7130[ebp]
	push	ecx
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat

; 223  : 		_file.writeFloat(leaf->aabb.center.y);

	mov	eax, DWORD PTR _leaf$7130[ebp]
	push	ecx
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat

; 224  : 		_file.writeFloat(leaf->aabb.center.z);

	mov	ecx, DWORD PTR _leaf$7130[ebp]
	push	ecx
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat

; 225  : 		_file.writeFloat(leaf->aabb.extent.x);

	mov	edx, DWORD PTR _leaf$7130[ebp]
	push	ecx
	fld	DWORD PTR [edx+12]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat

; 226  : 		_file.writeFloat(leaf->aabb.extent.y);

	mov	eax, DWORD PTR _leaf$7130[ebp]
	push	ecx
	fld	DWORD PTR [eax+16]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat

; 227  : 		_file.writeFloat(leaf->aabb.extent.z);

	mov	ecx, DWORD PTR _leaf$7130[ebp]
	push	ecx
	fld	DWORD PTR [ecx+20]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat

; 228  : 		size += 24;		sizeLEFS += 24;

	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _size$[ebp], edx
	mov	eax, DWORD PTR _sizeLEFS$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _sizeLEFS$[ebp], eax

; 229  : 
; 230  : 		_file.writeDword(leaf->nbSpheres);

	mov	ecx, DWORD PTR _leaf$7130[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeDword@DataOut@ozcollide@@QAEHH@Z	; ozcollide::DataOut::writeDword

; 231  : 		size += 4;		sizeLEFS += 4;

	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 4
	mov	DWORD PTR _size$[ebp], eax
	mov	ecx, DWORD PTR _sizeLEFS$[ebp]
	add	ecx, 4
	mov	DWORD PTR _sizeLEFS$[ebp], ecx

; 232  : 
; 233  : 		int nbSpheres = leaf->nbSpheres;

	mov	edx, DWORD PTR _leaf$7130[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _nbSpheres$7131[ebp], eax

; 234  : 		for (j = 0; j < nbSpheres; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@saveBinary@2
$LN2@saveBinary@2:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN3@saveBinary@2:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _nbSpheres$7131[ebp]
	jge	SHORT $LN1@saveBinary@2

; 235  : 			const Sphere &s = leaf->spheres[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _leaf$7130[ebp]
	add	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _s$7135[ebp], eax

; 236  : 			_file.writeFloat(s.center.x);

	mov	edx, DWORD PTR _s$7135[ebp]
	push	ecx
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat

; 237  : 			_file.writeFloat(s.center.y);

	mov	eax, DWORD PTR _s$7135[ebp]
	push	ecx
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat

; 238  : 			_file.writeFloat(s.center.z);

	mov	ecx, DWORD PTR _s$7135[ebp]
	push	ecx
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat

; 239  : 			_file.writeFloat(s.radius);

	mov	edx, DWORD PTR _s$7135[ebp]
	push	ecx
	fld	DWORD PTR [edx+12]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeFloat@DataOut@ozcollide@@QAEHM@Z	; ozcollide::DataOut::writeFloat

; 240  : 		}

	jmp	SHORT $LN2@saveBinary@2
$LN1@saveBinary@2:

; 241  : 		size += nbSpheres * 16;

	mov	eax, DWORD PTR _nbSpheres$7131[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 242  : 		sizeLEFS += nbSpheres * 16;

	mov	ecx, DWORD PTR _nbSpheres$7131[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _sizeLEFS$[ebp]
	mov	DWORD PTR _sizeLEFS$[ebp], ecx

; 243  : 	}

	jmp	$LN5@saveBinary@2
$LN4@saveBinary@2:

; 244  : 
; 245  : 	_file.seek(posLEFS);

	mov	edx, DWORD PTR _posLEFS$[ebp]
	push	edx
	mov	ecx, DWORD PTR __file$[ebp]
	call	?seek@DataOut@ozcollide@@QAE_NH@Z	; ozcollide::DataOut::seek

; 246  : 	_file.writeDword(sizeLEFS);

	mov	eax, DWORD PTR _sizeLEFS$[ebp]
	push	eax
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeDword@DataOut@ozcollide@@QAEHH@Z	; ozcollide::DataOut::writeDword

; 247  : 
; 248  : 	_file.seek(posBBT);

	mov	ecx, DWORD PTR _posBBT$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __file$[ebp]
	call	?seek@DataOut@ozcollide@@QAE_NH@Z	; ozcollide::DataOut::seek

; 249  : 	_file.writeDword(size);

	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	ecx, DWORD PTR __file$[ebp]
	call	?writeDword@DataOut@ozcollide@@QAEHH@Z	; ozcollide::DataOut::writeDword

; 250  : 
; 251  : 	return NOERR;

	xor	eax, eax

; 252  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@AAVDataOut@2@@Z ENDP ; ozcollide::AABBTreeSphere::saveBinary
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\aabbtree.h
_TEXT	ENDS
;	COMDAT ?getNbNodes@AABBTree@ozcollide@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNbNodes@AABBTree@ozcollide@@QBEHXZ PROC		; ozcollide::AABBTree::getNbNodes, COMDAT
; _this$ = ecx

; 80   : 	ozinline int getNbNodes() const { return nbNodes_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?getNbNodes@AABBTree@ozcollide@@QBEHXZ ENDP		; ozcollide::AABBTree::getNbNodes
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getNbLeafs@AABBTree@ozcollide@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNbLeafs@AABBTree@ozcollide@@QBEHXZ PROC		; ozcollide::AABBTree::getNbLeafs, COMDAT
; _this$ = ecx

; 81   : 	ozinline int getNbLeafs() const { return nbLeafs_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?getNbLeafs@AABBTree@ozcollide@@QBEHXZ ENDP		; ozcollide::AABBTree::getNbLeafs
_TEXT	ENDS
PUBLIC	??0Frustum@ozcollide@@QAE@XZ			; ozcollide::Frustum::Frustum
PUBLIC	??_7AABBTreeSphere@ozcollide@@6B@		; ozcollide::AABBTreeSphere::`vftable'
PUBLIC	??_R4AABBTreeSphere@ozcollide@@6B@		; ozcollide::AABBTreeSphere::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAABBTreeSphere@ozcollide@@@8		; ozcollide::AABBTreeSphere `RTTI Type Descriptor'
PUBLIC	??_R3AABBTreeSphere@ozcollide@@8		; ozcollide::AABBTreeSphere::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AABBTreeSphere@ozcollide@@8		; ozcollide::AABBTreeSphere::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AABBTreeSphere@ozcollide@@8	; ozcollide::AABBTreeSphere::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@AABBTree@ozcollide@@8		; ozcollide::AABBTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVAABBTree@ozcollide@@@8			; ozcollide::AABBTree `RTTI Type Descriptor'
PUBLIC	??_R3AABBTree@ozcollide@@8			; ozcollide::AABBTree::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AABBTree@ozcollide@@8			; ozcollide::AABBTree::`RTTI Base Class Array'
PUBLIC	?scale@AABBTreeSphere@ozcollide@@UAEXM@Z	; ozcollide::AABBTreeSphere::scale
PUBLIC	?getMemoryConsumption@AABBTreeSphere@ozcollide@@UBEHXZ ; ozcollide::AABBTreeSphere::getMemoryConsumption
EXTRN	??1AABBTree@ozcollide@@EAE@XZ:PROC		; ozcollide::AABBTree::~AABBTree
EXTRN	??0AABBTree@ozcollide@@AAE@W4AABBTREE_LEAFTYPE@1@H@Z:PROC ; ozcollide::AABBTree::AABBTree
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EAABBTreeSphere@ozcollide@@EAEPAXI@Z:PROC	; ozcollide::AABBTreeSphere::`vector deleting destructor'
;	COMDAT ??_R2AABBTree@ozcollide@@8
; File i:\svnroot\client\sdk\ozcollide\aabbtree_sphere.cpp
rdata$r	SEGMENT
??_R2AABBTree@ozcollide@@8 DD FLAT:??_R1A@?0A@EA@AABBTree@ozcollide@@8 ; ozcollide::AABBTree::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3AABBTree@ozcollide@@8
rdata$r	SEGMENT
??_R3AABBTree@ozcollide@@8 DD 00H			; ozcollide::AABBTree::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2AABBTree@ozcollide@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAABBTree@ozcollide@@@8
_DATA	SEGMENT
??_R0?AVAABBTree@ozcollide@@@8 DD FLAT:??_7type_info@@6B@ ; ozcollide::AABBTree `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAABBTree@ozcollide@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@AABBTree@ozcollide@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AABBTree@ozcollide@@8 DD FLAT:??_R0?AVAABBTree@ozcollide@@@8 ; ozcollide::AABBTree::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AABBTree@ozcollide@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AABBTreeSphere@ozcollide@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AABBTreeSphere@ozcollide@@8 DD FLAT:??_R0?AVAABBTreeSphere@ozcollide@@@8 ; ozcollide::AABBTreeSphere::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AABBTreeSphere@ozcollide@@8
rdata$r	ENDS
;	COMDAT ??_R2AABBTreeSphere@ozcollide@@8
rdata$r	SEGMENT
??_R2AABBTreeSphere@ozcollide@@8 DD FLAT:??_R1A@?0A@EA@AABBTreeSphere@ozcollide@@8 ; ozcollide::AABBTreeSphere::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@AABBTree@ozcollide@@8
rdata$r	ENDS
;	COMDAT ??_R3AABBTreeSphere@ozcollide@@8
rdata$r	SEGMENT
??_R3AABBTreeSphere@ozcollide@@8 DD 00H			; ozcollide::AABBTreeSphere::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2AABBTreeSphere@ozcollide@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAABBTreeSphere@ozcollide@@@8
_DATA	SEGMENT
??_R0?AVAABBTreeSphere@ozcollide@@@8 DD FLAT:??_7type_info@@6B@ ; ozcollide::AABBTreeSphere `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAABBTreeSphere@ozcollide@@', 00H
_DATA	ENDS
;	COMDAT ??_R4AABBTreeSphere@ozcollide@@6B@
rdata$r	SEGMENT
??_R4AABBTreeSphere@ozcollide@@6B@ DD 00H		; ozcollide::AABBTreeSphere::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAABBTreeSphere@ozcollide@@@8
	DD	FLAT:??_R3AABBTreeSphere@ozcollide@@8
rdata$r	ENDS
;	COMDAT ??_7AABBTreeSphere@ozcollide@@6B@
CONST	SEGMENT
??_7AABBTreeSphere@ozcollide@@6B@ DD FLAT:??_R4AABBTreeSphere@ozcollide@@6B@ ; ozcollide::AABBTreeSphere::`vftable'
	DD	FLAT:??_EAABBTreeSphere@ozcollide@@EAEPAXI@Z
	DD	FLAT:?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@AAVDataOut@2@@Z
	DD	FLAT:?saveBinary@AABBTreeSphere@ozcollide@@UAE?AW4ERR@2@PBD@Z
	DD	FLAT:?scale@AABBTreeSphere@ozcollide@@UAEXM@Z
	DD	FLAT:?getMemoryConsumption@AABBTreeSphere@ozcollide@@UBEHXZ
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0AABBTreeSphere@ozcollide@@AAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AABBTreeSphere@ozcollide@@AAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AABBTreeSphere@ozcollide@@AAE@H@Z$1
__ehfuncinfo$??0AABBTreeSphere@ozcollide@@AAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0AABBTreeSphere@ozcollide@@AAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__leafDepth$ = 8					; size = 4
??0AABBTreeSphere@ozcollide@@AAE@H@Z PROC		; ozcollide::AABBTreeSphere::AABBTreeSphere
; _this$ = ecx

; 36   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0AABBTreeSphere@ozcollide@@AAE@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __leafDepth$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0AABBTree@ozcollide@@AAE@W4AABBTREE_LEAFTYPE@1@H@Z ; ozcollide::AABBTree::AABBTree
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7AABBTreeSphere@ozcollide@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0Box@ozcollide@@QAE@XZ		; ozcollide::Box::Box
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??0Sphere@ozcollide@@QAE@XZ		; ozcollide::Sphere::Sphere
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??0Frustum@ozcollide@@QAE@XZ		; ozcollide::Frustum::Frustum

; 37   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0AABBTreeSphere@ozcollide@@AAE@H@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AABBTree@ozcollide@@EAE@XZ		; ozcollide::AABBTree::~AABBTree
__unwindfunclet$??0AABBTreeSphere@ozcollide@@AAE@H@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
__ehhandler$??0AABBTreeSphere@ozcollide@@AAE@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0AABBTreeSphere@ozcollide@@AAE@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0AABBTreeSphere@ozcollide@@AAE@H@Z ENDP		; ozcollide::AABBTreeSphere::AABBTreeSphere
PUBLIC	__real@00000000
EXTRN	??0Plane@ozcollide@@QAE@XZ:PROC			; ozcollide::Plane::Plane
;	COMDAT __real@00000000
; File i:\svnroot\client\sdk\ozcollide\frustum.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0Frustum@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$6751 = -4						; size = 4
??0Frustum@ozcollide@@QAE@XZ PROC			; ozcollide::Frustum::Frustum, COMDAT
; _this$ = ecx

; 35   : 	Frustum()

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0Plane@ozcollide@@QAE@XZ	; ozcollide::Plane::Plane
	push	6
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 36   : 	{
; 37   : 		for (int i = 0; i < 6; i++) {

	mov	DWORD PTR _i$6751[ebp], 0
	jmp	SHORT $LN3@Frustum
$LN2@Frustum:
	mov	ecx, DWORD PTR _i$6751[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$6751[ebp], ecx
$LN3@Frustum:
	cmp	DWORD PTR _i$6751[ebp], 6
	jge	SHORT $LN1@Frustum

; 38   : 			planes[i].a = 0;

	mov	edx, DWORD PTR _i$6751[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+edx]

; 39   : 			planes[i].b = 0;

	mov	ecx, DWORD PTR _i$6751[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+ecx+4]

; 40   : 			planes[i].c = 0;

	mov	eax, DWORD PTR _i$6751[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+eax+8]

; 41   : 			planes[i].d = 0;

	mov	edx, DWORD PTR _i$6751[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+edx+12]

; 42   : 		}

	jmp	SHORT $LN2@Frustum
$LN1@Frustum:

; 43   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Frustum@ozcollide@@QAE@XZ ENDP			; ozcollide::Frustum::Frustum
_TEXT	ENDS
PUBLIC	??1AABBTreeSphere@ozcollide@@EAE@XZ		; ozcollide::AABBTreeSphere::~AABBTreeSphere
; Function compile flags: /Odtp
;	COMDAT ??_GAABBTreeSphere@ozcollide@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GAABBTreeSphere@ozcollide@@EAEPAXI@Z PROC		; ozcollide::AABBTreeSphere::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AABBTreeSphere@ozcollide@@EAE@XZ	; ozcollide::AABBTreeSphere::~AABBTreeSphere
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GAABBTreeSphere@ozcollide@@EAEPAXI@Z ENDP		; ozcollide::AABBTreeSphere::`scalar deleting destructor'
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$??1AABBTreeSphere@ozcollide@@EAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AABBTreeSphere@ozcollide@@EAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1AABBTreeSphere@ozcollide@@EAE@XZ$1
__ehfuncinfo$??1AABBTreeSphere@ozcollide@@EAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1AABBTreeSphere@ozcollide@@EAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\aabbtree_sphere.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AABBTreeSphere@ozcollide@@EAE@XZ PROC		; ozcollide::AABBTreeSphere::~AABBTreeSphere
; _this$ = ecx

; 40   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1AABBTreeSphere@ozcollide@@EAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7AABBTreeSphere@ozcollide@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 41   : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AABBTree@ozcollide@@EAE@XZ		; ozcollide::AABBTree::~AABBTree
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1AABBTreeSphere@ozcollide@@EAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AABBTree@ozcollide@@EAE@XZ		; ozcollide::AABBTree::~AABBTree
__unwindfunclet$??1AABBTreeSphere@ozcollide@@EAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
__ehhandler$??1AABBTreeSphere@ozcollide@@EAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1AABBTreeSphere@ozcollide@@EAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1AABBTreeSphere@ozcollide@@EAE@XZ ENDP		; ozcollide::AABBTreeSphere::~AABBTreeSphere
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_size$ = -4						; size = 4
?getMemoryConsumption@AABBTreeSphere@ozcollide@@UBEHXZ PROC ; ozcollide::AABBTreeSphere::getMemoryConsumption
; _this$ = ecx

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 	int size = 0;

	mov	DWORD PTR _size$[ebp], 0

; 46   : 	size += getNbNodes() * sizeof(AABBTreeNode);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNbNodes@AABBTree@ozcollide@@QBEHXZ	; ozcollide::AABBTree::getNbNodes
	shl	eax, 5
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 47   : 	size += getNbLeafs() * sizeof(AABBTreeSphereLeaf);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNbLeafs@AABBTree@ozcollide@@QBEHXZ	; ozcollide::AABBTree::getNbLeafs
	imul	eax, 44					; 0000002cH
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 48   : 	size += sizeof *this;

	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 220				; 000000dcH
	mov	DWORD PTR _size$[ebp], eax

; 49   : 	return size;

	mov	eax, DWORD PTR _size$[ebp]

; 50   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMemoryConsumption@AABBTreeSphere@ozcollide@@UBEHXZ ENDP ; ozcollide::AABBTreeSphere::getMemoryConsumption
_TEXT	ENDS
PUBLIC	?collideWithFrustum@AABBTreeSphere@ozcollide@@AAEXABVAABBTreeNode@2@@Z ; ozcollide::AABBTreeSphere::collideWithFrustum
PUBLIC	?collideWithFrustum@AABBTreeSphere@ozcollide@@QAEXABVFrustum@2@P6AXABV12@ABVSphere@2@HABVBox@2@PAX@Z4@Z ; ozcollide::AABBTreeSphere::collideWithFrustum
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
__frustum$ = 8						; size = 4
__callback$ = 12					; size = 4
__userCallback$ = 16					; size = 4
?collideWithFrustum@AABBTreeSphere@ozcollide@@QAEXABVFrustum@2@P6AXABV12@ABVSphere@2@HABVBox@2@PAX@Z4@Z PROC ; ozcollide::AABBTreeSphere::collideWithFrustum
; _this$ = ecx

; 57   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 	if (!_callback)

	cmp	DWORD PTR __callback$[ebp], 0
	jne	SHORT $LN1@collideWit

; 59   : 		return;

	jmp	SHORT $LN2@collideWit
$LN1@collideWit:

; 60   : 	callback_ = _callback;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __callback$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 61   : 	userCallback_ = _userCallback;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __userCallback$[ebp]
	mov	DWORD PTR [edx+52], eax

; 62   : 	nbColls_ = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+216], 0

; 63   : 	frustum_ = _frustum;

	mov	esi, DWORD PTR __frustum$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 120				; 00000078H
	mov	ecx, 24					; 00000018H
	rep movsd

; 64   : 	collideWithFrustum(*root_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?collideWithFrustum@AABBTreeSphere@ozcollide@@AAEXABVAABBTreeNode@2@@Z ; ozcollide::AABBTreeSphere::collideWithFrustum
$LN2@collideWit:

; 65   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?collideWithFrustum@AABBTreeSphere@ozcollide@@QAEXABVFrustum@2@P6AXABV12@ABVSphere@2@HABVBox@2@PAX@Z4@Z ENDP ; ozcollide::AABBTreeSphere::collideWithFrustum
_TEXT	ENDS
PUBLIC	?collideWithBox@AABBTreeSphere@ozcollide@@AAEXABVAABBTreeNode@2@@Z ; ozcollide::AABBTreeSphere::collideWithBox
PUBLIC	?getMaxExtent@Box@ozcollide@@QBEMXZ		; ozcollide::Box::getMaxExtent
EXTRN	?testIntersectionFrustumSphere@ozcollide@@YA_NABVFrustum@1@ABVSphere@1@@Z:PROC ; ozcollide::testIntersectionFrustumSphere
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -48						; size = 4
_user$7176 = -44					; size = 4
_s$7175 = -40						; size = 4
_res$7178 = -33						; size = 1
_i$7171 = -32						; size = 4
_sl$7168 = -28						; size = 4
_nbSpheres$7170 = -24					; size = 4
_s$ = -20						; size = 16
_high$ = -4						; size = 4
__node$ = 8						; size = 4
?collideWithFrustum@AABBTreeSphere@ozcollide@@AAEXABVAABBTreeNode@2@@Z PROC ; ozcollide::AABBTreeSphere::collideWithFrustum
; _this$ = ecx

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 	float high = _node.aabb.getMaxExtent();

	mov	ecx, DWORD PTR __node$[ebp]
	call	?getMaxExtent@Box@ozcollide@@QBEMXZ	; ozcollide::Box::getMaxExtent
	fstp	DWORD PTR _high$[ebp]

; 70   : 	Sphere s;

	lea	ecx, DWORD PTR _s$[ebp]
	call	??0Sphere@ozcollide@@QAE@XZ		; ozcollide::Sphere::Sphere

; 71   : 	s.center = _node.aabb.center;

	mov	eax, DWORD PTR __node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _s$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _s$[ebp+8], eax

; 72   : 	s.radius = high;

	fld	DWORD PTR _high$[ebp]
	fstp	DWORD PTR _s$[ebp+12]

; 73   : 	if (testIntersectionFrustumSphere(frustum_, s) == true) {

	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 120				; 00000078H
	push	edx
	call	?testIntersectionFrustumSphere@ozcollide@@YA_NABVFrustum@1@ABVSphere@1@@Z ; ozcollide::testIntersectionFrustumSphere
	add	esp, 8
	movzx	eax, al
	cmp	eax, 1
	jne	$LN1@collideWit@2

; 74   : 		if (!_node.left && !_node.right) {

	mov	ecx, DWORD PTR __node$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	$LN10@collideWit@2
	mov	edx, DWORD PTR __node$[ebp]
	cmp	DWORD PTR [edx+28], 0
	jne	$LN10@collideWit@2

; 75   : 			// reach a leaf
; 76   : 			const AABBTreeSphereLeaf &sl = (AABBTreeSphereLeaf&) _node;

	mov	eax, DWORD PTR __node$[ebp]
	mov	DWORD PTR _sl$7168[ebp], eax

; 77   : 			int nbSpheres = sl.nbSpheres;

	mov	ecx, DWORD PTR _sl$7168[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _nbSpheres$7170[ebp], edx

; 78   : 			for (int i = 0; i < nbSpheres; i++) {

	mov	DWORD PTR _i$7171[ebp], 0
	jmp	SHORT $LN9@collideWit@2
$LN8@collideWit@2:
	mov	eax, DWORD PTR _i$7171[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7171[ebp], eax
$LN9@collideWit@2:
	mov	ecx, DWORD PTR _i$7171[ebp]
	cmp	ecx, DWORD PTR _nbSpheres$7170[ebp]
	jge	$LN7@collideWit@2

; 79   : 				nbColls_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+216]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+216], eax

; 80   : 				const Sphere &s = sl.spheres[i];

	mov	edx, DWORD PTR _i$7171[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _sl$7168[ebp]
	add	edx, DWORD PTR [eax+36]
	mov	DWORD PTR _s$7175[ebp], edx

; 81   : 				int user = 0; 

	mov	DWORD PTR _user$7176[ebp], 0

; 82   : 				if (sl.users)

	mov	ecx, DWORD PTR _sl$7168[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN6@collideWit@2

; 83   : 					user = sl.users[i];

	mov	edx, DWORD PTR _sl$7168[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _i$7171[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _user$7176[ebp], edx
$LN6@collideWit@2:

; 84   : 
; 85   : 				bool res = testIntersectionFrustumSphere(frustum_, s);

	mov	eax, DWORD PTR _s$7175[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	push	ecx
	call	?testIntersectionFrustumSphere@ozcollide@@YA_NABVFrustum@1@ABVSphere@1@@Z ; ozcollide::testIntersectionFrustumSphere
	add	esp, 8
	mov	BYTE PTR _res$7178[ebp], al

; 86   : 				if (res == true) {

	movzx	edx, BYTE PTR _res$7178[ebp]
	cmp	edx, 1
	jne	SHORT $LN4@collideWit@2

; 87   : 					if (callback_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN4@collideWit@2

; 88   : 						callback_(*this, s, user, _node.aabb, userCallback_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR __node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _user$7176[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$7175[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	add	esp, 20					; 00000014H
$LN4@collideWit@2:

; 89   : 				}
; 90   : 			}

	jmp	$LN8@collideWit@2
$LN7@collideWit@2:

; 91   : 		}
; 92   : 		else {

	jmp	SHORT $LN1@collideWit@2
$LN10@collideWit@2:

; 93   : 			if (_node.left)

	mov	eax, DWORD PTR __node$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN2@collideWit@2

; 94   : 				collideWithBox(*_node.left);

	mov	ecx, DWORD PTR __node$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?collideWithBox@AABBTreeSphere@ozcollide@@AAEXABVAABBTreeNode@2@@Z ; ozcollide::AABBTreeSphere::collideWithBox
$LN2@collideWit@2:

; 95   : 			if (_node.right)

	mov	eax, DWORD PTR __node$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@collideWit@2

; 96   : 				collideWithBox(*_node.right);

	mov	ecx, DWORD PTR __node$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?collideWithBox@AABBTreeSphere@ozcollide@@AAEXABVAABBTreeNode@2@@Z ; ozcollide::AABBTreeSphere::collideWithBox
$LN1@collideWit@2:

; 97   : 		}
; 98   : 	}
; 99   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?collideWithFrustum@AABBTreeSphere@ozcollide@@AAEXABVAABBTreeNode@2@@Z ENDP ; ozcollide::AABBTreeSphere::collideWithFrustum
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\box.h
_TEXT	ENDS
;	COMDAT ?getMaxExtent@Box@ozcollide@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxExtent@Box@ozcollide@@QBEMXZ PROC		; ozcollide::Box::getMaxExtent, COMDAT
; _this$ = ecx

; 170  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		if (extent.x > extent.y && extent.x > extent.z)

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+16]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@getMaxExte
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@getMaxExte

; 172  : 			return extent.x;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	jmp	SHORT $LN3@getMaxExte
$LN2@getMaxExte:

; 173  : 		if (extent.y > extent.z)

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@getMaxExte

; 174  : 			return extent.y;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+16]
	jmp	SHORT $LN3@getMaxExte
$LN1@getMaxExte:

; 175  : 		return extent.z;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+20]
$LN3@getMaxExte:

; 176  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxExtent@Box@ozcollide@@QBEMXZ ENDP		; ozcollide::Box::getMaxExtent
_TEXT	ENDS
PUBLIC	?isCollideWithBox@AABBTreeSphere@ozcollide@@AAE_NABVAABBTreeNode@2@@Z ; ozcollide::AABBTreeSphere::isCollideWithBox
PUBLIC	?isCollideWithBox@AABBTreeSphere@ozcollide@@QAE_NABVBox@2@@Z ; ozcollide::AABBTreeSphere::isCollideWithBox
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\aabbtree_sphere.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
__box$ = 8						; size = 4
?isCollideWithBox@AABBTreeSphere@ozcollide@@QAE_NABVBox@2@@Z PROC ; ozcollide::AABBTreeSphere::isCollideWithBox
; _this$ = ecx

; 105  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 	nbColls_ = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+216], 0

; 107  : 	box_ = _box;

	mov	ecx, DWORD PTR __box$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], ecx

; 108  : 	return isCollideWithBox(*root_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isCollideWithBox@AABBTreeSphere@ozcollide@@AAE_NABVAABBTreeNode@2@@Z ; ozcollide::AABBTreeSphere::isCollideWithBox

; 109  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isCollideWithBox@AABBTreeSphere@ozcollide@@QAE_NABVBox@2@@Z ENDP ; ozcollide::AABBTreeSphere::isCollideWithBox
_TEXT	ENDS
PUBLIC	?collideWithBox@AABBTreeSphere@ozcollide@@QAEXABVBox@2@P6AXABV12@ABVSphere@2@H0PAX@Z3@Z ; ozcollide::AABBTreeSphere::collideWithBox
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
__box$ = 8						; size = 4
__callback$ = 12					; size = 4
__userCallback$ = 16					; size = 4
?collideWithBox@AABBTreeSphere@ozcollide@@QAEXABVBox@2@P6AXABV12@ABVSphere@2@H0PAX@Z3@Z PROC ; ozcollide::AABBTreeSphere::collideWithBox
; _this$ = ecx

; 112  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 	if (!_callback)

	cmp	DWORD PTR __callback$[ebp], 0
	jne	SHORT $LN1@collideWit@3

; 114  : 		return;

	jmp	SHORT $LN2@collideWit@3
$LN1@collideWit@3:

; 115  : 	callback_ = _callback;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __callback$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 116  : 	userCallback_ = _userCallback;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __userCallback$[ebp]
	mov	DWORD PTR [edx+52], eax

; 117  : 	nbColls_ = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+216], 0

; 118  : 	box_ = _box;

	mov	edx, DWORD PTR __box$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+20], edx

; 119  : 	collideWithBox(*root_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?collideWithBox@AABBTreeSphere@ozcollide@@AAEXABVAABBTreeNode@2@@Z ; ozcollide::AABBTreeSphere::collideWithBox
$LN2@collideWit@3:

; 120  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?collideWithBox@AABBTreeSphere@ozcollide@@QAEXABVBox@2@P6AXABV12@ABVSphere@2@H0PAX@Z3@Z ENDP ; ozcollide::AABBTreeSphere::collideWithBox
_TEXT	ENDS
PUBLIC	?isOverlap@Box@ozcollide@@QBE_NABV12@@Z		; ozcollide::Box::isOverlap
EXTRN	?testIntersectionSphereBox@ozcollide@@YA_NABVSphere@1@ABVBox@1@@Z:PROC ; ozcollide::testIntersectionSphereBox
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -20						; size = 4
_s$7208 = -16						; size = 4
_i$7204 = -12						; size = 4
_pl$7201 = -8						; size = 4
_nbSpheres$7203 = -4					; size = 4
__node$ = 8						; size = 4
?isCollideWithBox@AABBTreeSphere@ozcollide@@AAE_NABVAABBTreeNode@2@@Z PROC ; ozcollide::AABBTreeSphere::isCollideWithBox
; _this$ = ecx

; 125  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 	if (_node.aabb.isOverlap(box_) == true) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR __node$[ebp]
	call	?isOverlap@Box@ozcollide@@QBE_NABV12@@Z	; ozcollide::Box::isOverlap
	movzx	ecx, al
	cmp	ecx, 1
	jne	$LN10@isCollideW

; 127  : 		if (!_node.left && !_node.right) {

	mov	edx, DWORD PTR __node$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	SHORT $LN9@isCollideW
	mov	eax, DWORD PTR __node$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN9@isCollideW

; 128  : 			// reach a leaf
; 129  : 			const AABBTreeSphereLeaf &pl = (AABBTreeSphereLeaf&) _node;

	mov	ecx, DWORD PTR __node$[ebp]
	mov	DWORD PTR _pl$7201[ebp], ecx

; 130  : 			int nbSpheres = pl.nbSpheres;

	mov	edx, DWORD PTR _pl$7201[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _nbSpheres$7203[ebp], eax

; 131  : 			for (int i = 0; i < nbSpheres; i++) {

	mov	DWORD PTR _i$7204[ebp], 0
	jmp	SHORT $LN8@isCollideW
$LN7@isCollideW:
	mov	ecx, DWORD PTR _i$7204[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$7204[ebp], ecx
$LN8@isCollideW:
	mov	edx, DWORD PTR _i$7204[ebp]
	cmp	edx, DWORD PTR _nbSpheres$7203[ebp]
	jge	SHORT $LN6@isCollideW

; 132  : 				nbColls_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+216]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+216], ecx

; 133  : 				const Sphere &s = pl.spheres[i];

	mov	eax, DWORD PTR _i$7204[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pl$7201[ebp]
	add	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _s$7208[ebp], eax

; 134  : 				return testIntersectionSphereBox(s, box_);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	mov	eax, DWORD PTR _s$7208[ebp]
	push	eax
	call	?testIntersectionSphereBox@ozcollide@@YA_NABVSphere@1@ABVBox@1@@Z ; ozcollide::testIntersectionSphereBox
	add	esp, 8
	jmp	SHORT $LN11@isCollideW

; 135  : 			}

	jmp	SHORT $LN7@isCollideW
$LN6@isCollideW:

; 136  : 		}
; 137  : 		else {

	jmp	SHORT $LN10@isCollideW
$LN9@isCollideW:

; 138  : 			if (_node.left) {

	mov	ecx, DWORD PTR __node$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN4@isCollideW

; 139  : 				if (isCollideWithBox(*_node.left) == true)

	mov	edx, DWORD PTR __node$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isCollideWithBox@AABBTreeSphere@ozcollide@@AAE_NABVAABBTreeNode@2@@Z ; ozcollide::AABBTreeSphere::isCollideWithBox
	movzx	ecx, al
	cmp	ecx, 1
	jne	SHORT $LN4@isCollideW

; 140  : 					return true;

	mov	al, 1
	jmp	SHORT $LN11@isCollideW
$LN4@isCollideW:

; 141  : 			}
; 142  : 			if (_node.right) {

	mov	edx, DWORD PTR __node$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN10@isCollideW

; 143  : 				if (isCollideWithBox(*_node.right) == true)

	mov	eax, DWORD PTR __node$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isCollideWithBox@AABBTreeSphere@ozcollide@@AAE_NABVAABBTreeNode@2@@Z ; ozcollide::AABBTreeSphere::isCollideWithBox
	movzx	edx, al
	cmp	edx, 1
	jne	SHORT $LN10@isCollideW

; 144  : 					return true;

	mov	al, 1
	jmp	SHORT $LN11@isCollideW
$LN10@isCollideW:

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return false;

	xor	al, al
$LN11@isCollideW:

; 149  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isCollideWithBox@AABBTreeSphere@ozcollide@@AAE_NABVAABBTreeNode@2@@Z ENDP ; ozcollide::AABBTreeSphere::isCollideWithBox
_TEXT	ENDS
PUBLIC	?isOverlapOnZ@Box@ozcollide@@QBE_NABV12@@Z	; ozcollide::Box::isOverlapOnZ
PUBLIC	?isOverlapOnY@Box@ozcollide@@QBE_NABV12@@Z	; ozcollide::Box::isOverlapOnY
PUBLIC	?isOverlapOnX@Box@ozcollide@@QBE_NABV12@@Z	; ozcollide::Box::isOverlapOnX
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\box.h
;	COMDAT ?isOverlap@Box@ozcollide@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__box$ = 8						; size = 4
?isOverlap@Box@ozcollide@@QBE_NABV12@@Z PROC		; ozcollide::Box::isOverlap, COMDAT
; _this$ = ecx

; 85   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 		if (isOverlapOnX(_box) &&
; 87   : 			isOverlapOnY(_box) &&
; 88   : 			isOverlapOnZ(_box))

	mov	eax, DWORD PTR __box$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isOverlapOnX@Box@ozcollide@@QBE_NABV12@@Z ; ozcollide::Box::isOverlapOnX
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@isOverlap
	mov	edx, DWORD PTR __box$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isOverlapOnY@Box@ozcollide@@QBE_NABV12@@Z ; ozcollide::Box::isOverlapOnY
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@isOverlap
	mov	ecx, DWORD PTR __box$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isOverlapOnZ@Box@ozcollide@@QBE_NABV12@@Z ; ozcollide::Box::isOverlapOnZ
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@isOverlap

; 89   : 			return true;

	mov	al, 1
	jmp	SHORT $LN2@isOverlap
$LN1@isOverlap:

; 90   : 
; 91   : 		return false;

	xor	al, al
$LN2@isOverlap:

; 92   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?isOverlap@Box@ozcollide@@QBE_NABV12@@Z ENDP		; ozcollide::Box::isOverlap
_TEXT	ENDS
PUBLIC	__real@0000000000000000
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?isOverlapOnX@Box@ozcollide@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_t$ = -8						; size = 4
_ext$ = -4						; size = 4
__box$ = 8						; size = 4
?isOverlapOnX@Box@ozcollide@@QBE_NABV12@@Z PROC		; ozcollide::Box::isOverlapOnX, COMDAT
; _this$ = ecx

; 96   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 		float t = _box.center.x - center.x;

	mov	eax, DWORD PTR __box$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _t$[ebp]

; 98   : 		if (t < 0) t = -t;

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@isOverlapO
	fld	DWORD PTR _t$[ebp]
	fchs
	fstp	DWORD PTR _t$[ebp]
$LN2@isOverlapO:

; 99   : 
; 100  : 		float ext = _box.extent.x + extent.x;

	mov	edx, DWORD PTR __box$[ebp]
	fld	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+12]
	fstp	DWORD PTR _ext$[ebp]

; 101  : 		if (t <= ext)

	fld	DWORD PTR _t$[ebp]
	fld	DWORD PTR _ext$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN1@isOverlapO

; 102  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@isOverlapO
$LN1@isOverlapO:

; 103  : 		return false;

	xor	al, al
$LN3@isOverlapO:

; 104  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?isOverlapOnX@Box@ozcollide@@QBE_NABV12@@Z ENDP		; ozcollide::Box::isOverlapOnX
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?isOverlapOnY@Box@ozcollide@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_t$ = -8						; size = 4
_ext$ = -4						; size = 4
__box$ = 8						; size = 4
?isOverlapOnY@Box@ozcollide@@QBE_NABV12@@Z PROC		; ozcollide::Box::isOverlapOnY, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 109  : 		float t = _box.center.y - center.y;

	mov	eax, DWORD PTR __box$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _t$[ebp]

; 110  : 		if (t < 0) t = -t;

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@isOverlapO@2
	fld	DWORD PTR _t$[ebp]
	fchs
	fstp	DWORD PTR _t$[ebp]
$LN2@isOverlapO@2:

; 111  : 
; 112  : 		float ext = _box.extent.y + extent.y;

	mov	edx, DWORD PTR __box$[ebp]
	fld	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+16]
	fstp	DWORD PTR _ext$[ebp]

; 113  : 		if (t <= ext)

	fld	DWORD PTR _t$[ebp]
	fld	DWORD PTR _ext$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN1@isOverlapO@2

; 114  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@isOverlapO@2
$LN1@isOverlapO@2:

; 115  : 		return false;

	xor	al, al
$LN3@isOverlapO@2:

; 116  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?isOverlapOnY@Box@ozcollide@@QBE_NABV12@@Z ENDP		; ozcollide::Box::isOverlapOnY
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?isOverlapOnZ@Box@ozcollide@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_t$ = -8						; size = 4
_ext$ = -4						; size = 4
__box$ = 8						; size = 4
?isOverlapOnZ@Box@ozcollide@@QBE_NABV12@@Z PROC		; ozcollide::Box::isOverlapOnZ, COMDAT
; _this$ = ecx

; 120  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 		float t = _box.center.z - center.z;

	mov	eax, DWORD PTR __box$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _t$[ebp]

; 122  : 		if (t < 0) t = -t;

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@isOverlapO@3
	fld	DWORD PTR _t$[ebp]
	fchs
	fstp	DWORD PTR _t$[ebp]
$LN2@isOverlapO@3:

; 123  : 
; 124  : 		float ext = _box.extent.z + extent.z;

	mov	edx, DWORD PTR __box$[ebp]
	fld	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+20]
	fstp	DWORD PTR _ext$[ebp]

; 125  : 		if (t <= ext)

	fld	DWORD PTR _t$[ebp]
	fld	DWORD PTR _ext$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN1@isOverlapO@3

; 126  : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@isOverlapO@3
$LN1@isOverlapO@3:

; 127  : 		return false;

	xor	al, al
$LN3@isOverlapO@3:

; 128  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?isOverlapOnZ@Box@ozcollide@@QBE_NABV12@@Z ENDP		; ozcollide::Box::isOverlapOnZ
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\aabbtree_sphere.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -28						; size = 4
_user$7228 = -24					; size = 4
_s$7227 = -20						; size = 4
_res$7230 = -13						; size = 1
_i$7223 = -12						; size = 4
_sl$7220 = -8						; size = 4
_nbSpheres$7222 = -4					; size = 4
__node$ = 8						; size = 4
?collideWithBox@AABBTreeSphere@ozcollide@@AAEXABVAABBTreeNode@2@@Z PROC ; ozcollide::AABBTreeSphere::collideWithBox
; _this$ = ecx

; 152  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 	if (_node.aabb.isOverlap(box_) == true) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR __node$[ebp]
	call	?isOverlap@Box@ozcollide@@QBE_NABV12@@Z	; ozcollide::Box::isOverlap
	movzx	ecx, al
	cmp	ecx, 1
	jne	$LN11@collideWit@4

; 154  : 		if (!_node.left && !_node.right) {

	mov	edx, DWORD PTR __node$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	$LN9@collideWit@4
	mov	eax, DWORD PTR __node$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	$LN9@collideWit@4

; 155  : 			// reach a leaf
; 156  : 			const AABBTreeSphereLeaf &sl = (AABBTreeSphereLeaf&) _node;

	mov	ecx, DWORD PTR __node$[ebp]
	mov	DWORD PTR _sl$7220[ebp], ecx

; 157  : 			int nbSpheres = sl.nbSpheres;

	mov	edx, DWORD PTR _sl$7220[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _nbSpheres$7222[ebp], eax

; 158  : 			for (int i = 0; i < nbSpheres; i++) {

	mov	DWORD PTR _i$7223[ebp], 0
	jmp	SHORT $LN8@collideWit@4
$LN7@collideWit@4:
	mov	ecx, DWORD PTR _i$7223[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$7223[ebp], ecx
$LN8@collideWit@4:
	mov	edx, DWORD PTR _i$7223[ebp]
	cmp	edx, DWORD PTR _nbSpheres$7222[ebp]
	jge	$LN6@collideWit@4

; 159  : 				nbColls_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+216]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+216], ecx

; 160  : 				const Sphere &s = sl.spheres[i];

	mov	eax, DWORD PTR _i$7223[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _sl$7220[ebp]
	add	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _s$7227[ebp], eax

; 161  : 				int user = 0;

	mov	DWORD PTR _user$7228[ebp], 0

; 162  : 				if (sl.users[i])

	mov	edx, DWORD PTR _sl$7220[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _i$7223[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN5@collideWit@4

; 163  : 					user = sl.users[i];

	mov	edx, DWORD PTR _sl$7220[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _i$7223[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _user$7228[ebp], edx
$LN5@collideWit@4:

; 164  : 				bool res = testIntersectionSphereBox(s, box_);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR _s$7227[ebp]
	push	ecx
	call	?testIntersectionSphereBox@ozcollide@@YA_NABVSphere@1@ABVBox@1@@Z ; ozcollide::testIntersectionSphereBox
	add	esp, 8
	mov	BYTE PTR _res$7230[ebp], al

; 165  : 				if (res == true)

	movzx	edx, BYTE PTR _res$7230[ebp]
	cmp	edx, 1
	jne	SHORT $LN4@collideWit@4

; 166  : 					callback_(*this, s, user, _node.aabb, userCallback_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR __node$[ebp]
	push	edx
	mov	eax, DWORD PTR _user$7228[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$7227[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	add	esp, 20					; 00000014H
$LN4@collideWit@4:

; 167  : 			}

	jmp	$LN7@collideWit@4
$LN6@collideWit@4:

; 168  : 		}
; 169  : 		else {

	jmp	SHORT $LN11@collideWit@4
$LN9@collideWit@4:

; 170  : 			if (_node.left)

	mov	edx, DWORD PTR __node$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN2@collideWit@4

; 171  : 				collideWithBox(*_node.left);

	mov	eax, DWORD PTR __node$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?collideWithBox@AABBTreeSphere@ozcollide@@AAEXABVAABBTreeNode@2@@Z ; ozcollide::AABBTreeSphere::collideWithBox
$LN2@collideWit@4:

; 172  : 			if (_node.right)

	mov	edx, DWORD PTR __node$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN11@collideWit@4

; 173  : 				collideWithBox(*_node.right);

	mov	eax, DWORD PTR __node$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?collideWithBox@AABBTreeSphere@ozcollide@@AAEXABVAABBTreeNode@2@@Z ; ozcollide::AABBTreeSphere::collideWithBox
$LN11@collideWit@4:

; 174  : 		}
; 175  : 	}
; 176  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?collideWithBox@AABBTreeSphere@ozcollide@@AAEXABVAABBTreeNode@2@@Z ENDP ; ozcollide::AABBTreeSphere::collideWithBox
_TEXT	ENDS
PUBLIC	??XVec3f@ozcollide@@QAEXM@Z			; ozcollide::Vec3f::operator*=
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -24						; size = 4
_sphere$7252 = -20					; size = 4
_leaf$7248 = -16					; size = 4
_node$7244 = -12					; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
__scale$ = 8						; size = 4
?scale@AABBTreeSphere@ozcollide@@UAEXM@Z PROC		; ozcollide::AABBTreeSphere::scale
; _this$ = ecx

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 180  : 	int i, j;
; 181  : 
; 182  : 	for (i = 0; i < nbNodes_; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@scale
$LN8@scale:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@scale:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jge	SHORT $LN7@scale

; 183  : 		AABBTreeNode *node = &root_[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _node$7244[ebp], eax

; 184  : 		node->aabb.center *= _scale;

	push	ecx
	fld	DWORD PTR __scale$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _node$7244[ebp]
	call	??XVec3f@ozcollide@@QAEXM@Z		; ozcollide::Vec3f::operator*=

; 185  : 		node->aabb.extent *= _scale;

	push	ecx
	fld	DWORD PTR __scale$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _node$7244[ebp]
	add	ecx, 12					; 0000000cH
	call	??XVec3f@ozcollide@@QAEXM@Z		; ozcollide::Vec3f::operator*=

; 186  : 	}

	jmp	SHORT $LN8@scale
$LN7@scale:

; 187  : 
; 188  : 	for (i = 0; i < nbLeafs_; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@scale
$LN5@scale:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@scale:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN4@scale

; 189  : 		AABBTreeSphereLeaf *leaf = &leafs_[i];

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+36]
	mov	DWORD PTR _leaf$7248[ebp], edx

; 190  : 		for (j = 0; j < leaf->nbSpheres; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@scale
$LN2@scale:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN3@scale:
	mov	edx, DWORD PTR _leaf$7248[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR [edx+32]
	jge	SHORT $LN1@scale

; 191  : 			Sphere *sphere = (Sphere*) &leaf->spheres[j];

	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _leaf$7248[ebp]
	add	ecx, DWORD PTR [edx+36]
	mov	DWORD PTR _sphere$7252[ebp], ecx

; 192  : 			sphere->center *= _scale;

	push	ecx
	fld	DWORD PTR __scale$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _sphere$7252[ebp]
	call	??XVec3f@ozcollide@@QAEXM@Z		; ozcollide::Vec3f::operator*=

; 193  : 			sphere->radius *= _scale;

	mov	eax, DWORD PTR _sphere$7252[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR __scale$[ebp]
	mov	ecx, DWORD PTR _sphere$7252[ebp]
	fstp	DWORD PTR [ecx+12]

; 194  : 		}

	jmp	SHORT $LN2@scale
$LN1@scale:

; 195  : 	}

	jmp	SHORT $LN5@scale
$LN4@scale:

; 196  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?scale@AABBTreeSphere@ozcollide@@UAEXM@Z ENDP		; ozcollide::AABBTreeSphere::scale
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
_TEXT	ENDS
;	COMDAT ??XVec3f@ozcollide@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__mul$ = 8						; size = 4
??XVec3f@ozcollide@@QAEXM@Z PROC			; ozcollide::Vec3f::operator*=, COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 73   : 		x *= _mul;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR __mul$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 74   : 		y *= _mul;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR __mul$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 75   : 		z *= _mul;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR __mul$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 76   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVec3f@ozcollide@@QAEXM@Z ENDP			; ozcollide::Vec3f::operator*=
_TEXT	ENDS
END
