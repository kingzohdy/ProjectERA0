; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\sdk\ozcollide\aabbtreesphere_builder.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG7110	DB	'Building the final clean tree', 00H
	ORG $+2
$SG7150	DB	'Freeing temporary buffer', 00H
	ORG $+3
$SG7155	DB	'Done.', 00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::~Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>
PUBLIC	??0?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>
PUBLIC	??0AABBTreeSphere_Builder@ozcollide@@QAE@XZ	; ozcollide::AABBTreeSphere_Builder::AABBTreeSphere_Builder
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$??0AABBTreeSphere_Builder@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AABBTreeSphere_Builder@ozcollide@@QAE@XZ$0
__ehfuncinfo$??0AABBTreeSphere_Builder@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\aabbtreesphere_builder.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AABBTreeSphere_Builder@ozcollide@@QAE@XZ PROC	; ozcollide::AABBTreeSphere_Builder::AABBTreeSphere_Builder
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 34   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0AABBTreeSphere_Builder@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::~Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>
__ehhandler$??0AABBTreeSphere_Builder@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0AABBTreeSphere_Builder@ozcollide@@QAE@XZ ENDP	; ozcollide::AABBTreeSphere_Builder::AABBTreeSphere_Builder
PUBLIC	??1AABBTreeSphere_Builder@ozcollide@@QAE@XZ	; ozcollide::AABBTreeSphere_Builder::~AABBTreeSphere_Builder
xdata$x	SEGMENT
__unwindtable$??1AABBTreeSphere_Builder@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AABBTreeSphere_Builder@ozcollide@@QAE@XZ$0
__ehfuncinfo$??1AABBTreeSphere_Builder@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AABBTreeSphere_Builder@ozcollide@@QAE@XZ PROC	; ozcollide::AABBTreeSphere_Builder::~AABBTreeSphere_Builder
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 38   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::~Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1AABBTreeSphere_Builder@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::~Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>
__ehhandler$??1AABBTreeSphere_Builder@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1AABBTreeSphere_Builder@ozcollide@@QAE@XZ ENDP	; ozcollide::AABBTreeSphere_Builder::~AABBTreeSphere_Builder
PUBLIC	?clear@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXXZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::clear
PUBLIC	??_GWorkingItem@AABBTreeSphere_Builder@ozcollide@@QAEPAXI@Z ; ozcollide::AABBTreeSphere_Builder::WorkingItem::`scalar deleting destructor'
PUBLIC	??A?$Vector@VSphere@ozcollide@@@ozcollide@@QBEAAVSphere@1@H@Z ; ozcollide::Vector<ozcollide::Sphere>::operator[]
PUBLIC	??0Sphere@ozcollide@@QAE@XZ			; ozcollide::Sphere::Sphere
PUBLIC	?size@?$Vector@VSphere@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::Sphere>::size
PUBLIC	??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ		; ozcollide::AABBTreeSphereLeaf::AABBTreeSphereLeaf
PUBLIC	??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ		; ozcollide::AABBTreeSphereLeaf::~AABBTreeSphereLeaf
PUBLIC	??0AABBTreeNode@ozcollide@@QAE@XZ		; ozcollide::AABBTreeNode::AABBTreeNode
PUBLIC	??1AABBTreeNode@ozcollide@@QAE@XZ		; ozcollide::AABBTreeNode::~AABBTreeNode
PUBLIC	?size@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::size
PUBLIC	?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z ; ozcollide::AABBTreeSphere_Builder::workOnItem
PUBLIC	??A?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreeSphere_Builder@1@H@Z ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::operator[]
PUBLIC	?add@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXABQAVWorkingItem@AABBTreeSphere_Builder@2@@Z ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::add
PUBLIC	?add@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXABVSphere@2@@Z ; ozcollide::Vector<ozcollide::Sphere>::add
PUBLIC	??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ ; ozcollide::AABBTreeSphere_Builder::WorkingItem::WorkingItem
PUBLIC	?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z ; ozcollide::AABBTreeSphere_Builder::build
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0AABBTreeSphere@ozcollide@@AAE@H@Z:PROC	; ozcollide::AABBTreeSphere::AABBTreeSphere
EXTRN	??2@YAPAXI@Z:PROC				; operator new
xdata$x	SEGMENT
__ehfuncinfo$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z$4
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv422 = -192						; size = 4
tv321 = -188						; size = 4
tv212 = -184						; size = 4
tv188 = -180						; size = 4
tv80 = -176						; size = 4
tv73 = -172						; size = 4
_this$ = -168						; size = 4
$T7595 = -164						; size = 4
$T7594 = -160						; size = 4
$T7593 = -156						; size = 4
$T7590 = -152						; size = 4
$T7589 = -148						; size = 4
$T7588 = -144						; size = 4
$T7585 = -140						; size = 4
$T7584 = -136						; size = 4
$T7583 = -132						; size = 4
$T7580 = -128						; size = 4
$T7579 = -124						; size = 4
$T7578 = -120						; size = 4
$T7577 = -116						; size = 4
$T7574 = -112						; size = 4
$T7573 = -108						; size = 4
$T7570 = -104						; size = 4
$T7569 = -100						; size = 4
_leaf$7145 = -96					; size = 4
_item$7143 = -92					; size = 4
_leaf$7138 = -88					; size = 4
_item$7136 = -84					; size = 4
_node$7134 = -80					; size = 4
_nodeIndex$7133 = -76					; size = 4
_sp$7130 = -72						; size = 4
_sl$7118 = -68						; size = 4
_indexLeaf$7117 = -64					; size = 4
_nbSpheres$7120 = -60					; size = 4
_it$7115 = -56						; size = 4
_it$7092 = -52						; size = 4
_size$7082 = -48					; size = 4
_it$7081 = -44						; size = 4
_j$ = -40						; size = 4
_item$ = -36						; size = 4
_ln$ = -32						; size = 4
_nbNodes$ = -28						; size = 4
_off$ = -24						; size = 4
_i$ = -20						; size = 4
_nbLeafs$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nbSpheres$ = 8						; size = 4
_spheres$ = 12						; size = 4
_leafDepth$ = 16					; size = 4
_moni$ = 20						; size = 4
?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z PROC ; ozcollide::AABBTreeSphere_Builder::build
; _this$ = ecx

; 44   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 180				; 000000b4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 	int i, j;
; 46   : 
; 47   : 	tree_ = new AABBTreeSphere(leafDepth);

	push	220					; 000000dcH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7570[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7570[ebp], 0
	je	SHORT $LN34@build
	mov	eax, DWORD PTR _leafDepth$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T7570[ebp]
	call	??0AABBTreeSphere@ozcollide@@AAE@H@Z	; ozcollide::AABBTreeSphere::AABBTreeSphere
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN35@build
$LN34@build:
	mov	DWORD PTR tv73[ebp], 0
$LN35@build:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T7569[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T7569[ebp]
	mov	DWORD PTR [edx+12], eax

; 48   : 
; 49   : 	// Build the root node
; 50   : 
; 51   : 	WorkingItem *item = new WorkingItem();

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7574[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T7574[ebp], 0
	je	SHORT $LN36@build
	mov	ecx, DWORD PTR $T7574[ebp]
	call	??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN37@build
$LN36@build:
	mov	DWORD PTR tv80[ebp], 0
$LN37@build:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T7573[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T7573[ebp]
	mov	DWORD PTR _item$[ebp], edx

; 52   : 
; 53   : 	for (i = 0; i < nbSpheres; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN31@build
$LN30@build:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN31@build:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nbSpheres$[ebp]
	jge	SHORT $LN29@build

; 54   : 		item->spheres.add( spheres[i] );

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _spheres$[ebp]
	push	edx
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 32					; 00000020H
	call	?add@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXABVSphere@2@@Z ; ozcollide::Vector<ozcollide::Sphere>::add
	jmp	SHORT $LN30@build
$LN29@build:

; 55   : 
; 56   : 	item->left = -1;

	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+24], -1

; 57   : 	item->right = -1;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+28], -1

; 58   : 
; 59   : 	items_.add(item);

	lea	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?add@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXABQAVWorkingItem@AABBTreeSphere_Builder@2@@Z ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::add

; 60   : 
; 61   : 	int off = 0;

	mov	DWORD PTR _off$[ebp], 0
$LN28@build:

; 62   : 	while(true) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN27@build

; 63   : 		WorkingItem &it = *items_[off];

	mov	ecx, DWORD PTR _off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreeSphere_Builder@1@H@Z ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _it$7081[ebp], edx

; 64   : 		workOnItem(it, leafDepth);

	mov	eax, DWORD PTR _leafDepth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _it$7081[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z ; ozcollide::AABBTreeSphere_Builder::workOnItem

; 65   : 		off++;

	mov	edx, DWORD PTR _off$[ebp]
	add	edx, 1
	mov	DWORD PTR _off$[ebp], edx

; 66   : 		int size = items_.size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::size
	mov	DWORD PTR _size$7082[ebp], eax

; 67   : 		if (off == size)

	mov	eax, DWORD PTR _off$[ebp]
	cmp	eax, DWORD PTR _size$7082[ebp]
	jne	SHORT $LN26@build

; 68   : 			break;

	jmp	SHORT $LN27@build
$LN26@build:

; 69   : 	}

	jmp	SHORT $LN28@build
$LN27@build:

; 70   : 
; 71   : 	// Now we have a bastard working tree, let's build the final clean one...
; 72   : 
; 73   : 	int *ln = new int[items_.size()];

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::size
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7577[ebp], eax
	mov	eax, DWORD PTR $T7577[ebp]
	mov	DWORD PTR _ln$[ebp], eax

; 74   : 	int nbNodes = 0;

	mov	DWORD PTR _nbNodes$[ebp], 0

; 75   : 	int nbLeafs = 0;

	mov	DWORD PTR _nbLeafs$[ebp], 0

; 76   : 	for (i = 0; i < items_.size(); i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN25@build
$LN24@build:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN25@build:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN23@build

; 77   : 		WorkingItem &it = *items_[i];

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreeSphere_Builder@1@H@Z ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _it$7092[ebp], eax

; 78   : 		if (it.left == -1 && it.right == -1)

	mov	ecx, DWORD PTR _it$7092[ebp]
	cmp	DWORD PTR [ecx+24], -1
	jne	SHORT $LN22@build
	mov	edx, DWORD PTR _it$7092[ebp]
	cmp	DWORD PTR [edx+28], -1
	jne	SHORT $LN22@build

; 79   : 			ln[i] = nbLeafs++;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ln$[ebp]
	mov	edx, DWORD PTR _nbLeafs$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _nbLeafs$[ebp]
	add	eax, 1
	mov	DWORD PTR _nbLeafs$[ebp], eax

; 80   : 		else

	jmp	SHORT $LN21@build
$LN22@build:

; 81   : 			ln[i] = nbNodes++;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _ln$[ebp]
	mov	eax, DWORD PTR _nbNodes$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	ecx, DWORD PTR _nbNodes$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nbNodes$[ebp], ecx
$LN21@build:

; 82   : 	}

	jmp	SHORT $LN24@build
$LN23@build:

; 83   : 	tree_->root_ = new AABBTreeNode[nbNodes];

	mov	edx, DWORD PTR _nbNodes$[ebp]
	mov	DWORD PTR $T7578[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T7578[ebp]
	mov	edx, 32					; 00000020H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7580[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T7580[ebp], 0
	je	SHORT $LN38@build
	mov	ecx, DWORD PTR $T7580[ebp]
	mov	edx, DWORD PTR $T7578[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1AABBTreeNode@ozcollide@@QAE@XZ
	push	OFFSET ??0AABBTreeNode@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR $T7578[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR $T7580[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T7580[ebp]
	add	edx, 4
	mov	DWORD PTR tv188[ebp], edx
	jmp	SHORT $LN39@build
$LN38@build:
	mov	DWORD PTR tv188[ebp], 0
$LN39@build:
	mov	eax, DWORD PTR tv188[ebp]
	mov	DWORD PTR $T7579[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T7579[ebp]
	mov	DWORD PTR [edx+8], eax

; 84   : 	tree_->leafs_ = new AABBTreeSphereLeaf[nbLeafs];

	mov	ecx, DWORD PTR _nbLeafs$[ebp]
	mov	DWORD PTR $T7583[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T7583[ebp]
	mov	edx, 44					; 0000002cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7585[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T7585[ebp], 0
	je	SHORT $LN40@build
	mov	ecx, DWORD PTR $T7585[ebp]
	mov	edx, DWORD PTR $T7583[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	push	OFFSET ??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ ; ozcollide::AABBTreeSphereLeaf::AABBTreeSphereLeaf
	mov	eax, DWORD PTR $T7583[ebp]
	push	eax
	push	44					; 0000002cH
	mov	ecx, DWORD PTR $T7585[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T7585[ebp]
	add	edx, 4
	mov	DWORD PTR tv212[ebp], edx
	jmp	SHORT $LN41@build
$LN40@build:
	mov	DWORD PTR tv212[ebp], 0
$LN41@build:
	mov	eax, DWORD PTR tv212[ebp]
	mov	DWORD PTR $T7584[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T7584[ebp]
	mov	DWORD PTR [edx+36], eax

; 85   : 	tree_->nbNodes_ = nbNodes;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _nbNodes$[ebp]
	mov	DWORD PTR [edx+4], eax

; 86   : 	tree_->nbLeafs_ = nbLeafs;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _nbLeafs$[ebp]
	mov	DWORD PTR [edx+12], eax

; 87   : 
; 88   : 	if (moni)

	cmp	DWORD PTR _moni$[ebp], 0
	je	SHORT $LN20@build

; 89   : 		moni->write("Building the final clean tree");

	push	OFFSET $SG7110
	mov	ecx, DWORD PTR _moni$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _moni$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
$LN20@build:

; 90   : 
; 91   : 	for (i = 0; i < items_.size(); i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@build
$LN18@build:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN19@build:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN17@build

; 92   : 		if (moni)

	cmp	DWORD PTR _moni$[ebp], 0
	je	SHORT $LN16@build

; 93   : 			moni->setProgress(i, items_.size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::size
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _moni$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _moni$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN16@build:

; 94   : 
; 95   : 		WorkingItem &it = *items_[i];

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreeSphere_Builder@1@H@Z ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _it$7115[ebp], edx

; 96   : 		if (it.left == -1 && it.right == -1) {

	mov	eax, DWORD PTR _it$7115[ebp]
	cmp	DWORD PTR [eax+24], -1
	jne	$LN15@build
	mov	ecx, DWORD PTR _it$7115[ebp]
	cmp	DWORD PTR [ecx+28], -1
	jne	$LN15@build

; 97   : 			int indexLeaf = ln[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ln$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _indexLeaf$7117[ebp], ecx

; 98   : 			AABBTreeSphereLeaf *sl = (AABBTreeSphereLeaf*) tree_->leafs_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _sl$7118[ebp], ecx

; 99   : 			sl += indexLeaf;

	mov	edx, DWORD PTR _indexLeaf$7117[ebp]
	imul	edx, 44					; 0000002cH
	add	edx, DWORD PTR _sl$7118[ebp]
	mov	DWORD PTR _sl$7118[ebp], edx

; 100  : 			sl->aabb = it.aabb;

	mov	eax, DWORD PTR _it$7115[ebp]
	mov	ecx, DWORD PTR _sl$7118[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax

; 101  : 			sl->left = NULL;

	mov	ecx, DWORD PTR _sl$7118[ebp]
	mov	DWORD PTR [ecx+24], 0

; 102  : 			sl->right = NULL;

	mov	edx, DWORD PTR _sl$7118[ebp]
	mov	DWORD PTR [edx+28], 0

; 103  : 			int nbSpheres = it.spheres.size();

	mov	ecx, DWORD PTR _it$7115[ebp]
	add	ecx, 32					; 00000020H
	call	?size@?$Vector@VSphere@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::Sphere>::size
	mov	DWORD PTR _nbSpheres$7120[ebp], eax

; 104  : 			sl->nbSpheres = nbSpheres;

	mov	eax, DWORD PTR _sl$7118[ebp]
	mov	ecx, DWORD PTR _nbSpheres$7120[ebp]
	mov	DWORD PTR [eax+32], ecx

; 105  : 			sl->spheres = new Sphere[nbSpheres];

	mov	edx, DWORD PTR _nbSpheres$7120[ebp]
	mov	DWORD PTR $T7588[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T7588[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7590[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T7590[ebp], 0
	je	SHORT $LN42@build
	push	OFFSET ??0Sphere@ozcollide@@QAE@XZ	; ozcollide::Sphere::Sphere
	mov	eax, DWORD PTR $T7588[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T7590[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T7590[ebp]
	mov	DWORD PTR tv321[ebp], edx
	jmp	SHORT $LN43@build
$LN42@build:
	mov	DWORD PTR tv321[ebp], 0
$LN43@build:
	mov	eax, DWORD PTR tv321[ebp]
	mov	DWORD PTR $T7589[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _sl$7118[ebp]
	mov	edx, DWORD PTR $T7589[ebp]
	mov	DWORD PTR [ecx+36], edx

; 106  : 			for (j = 0; j < nbSpheres; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN14@build
$LN13@build:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN14@build:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _nbSpheres$7120[ebp]
	jge	SHORT $LN12@build

; 107  : 				Sphere *sp = (Sphere*) &sl->spheres[j];

	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _sl$7118[ebp]
	add	edx, DWORD PTR [eax+36]
	mov	DWORD PTR _sp$7130[ebp], edx

; 108  : 				*sp = it.spheres[j];

	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _it$7115[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$Vector@VSphere@ozcollide@@@ozcollide@@QBEAAVSphere@1@H@Z ; ozcollide::Vector<ozcollide::Sphere>::operator[]
	mov	edx, DWORD PTR _sp$7130[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax

; 109  : 			}

	jmp	SHORT $LN13@build
$LN12@build:

; 110  : 		}
; 111  : 		else {

	jmp	$LN11@build
$LN15@build:

; 112  : 			int nodeIndex = ln[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _ln$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _nodeIndex$7133[ebp], eax

; 113  : 			AABBTreeNode *node = &tree_->root_[nodeIndex];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _nodeIndex$7133[ebp]
	shl	eax, 5
	add	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _node$7134[ebp], eax

; 114  : 			node->aabb = it.aabb;

	mov	ecx, DWORD PTR _it$7115[ebp]
	mov	edx, DWORD PTR _node$7134[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], ecx

; 115  : 
; 116  : 			if (it.left != -1) {

	mov	edx, DWORD PTR _it$7115[ebp]
	cmp	DWORD PTR [edx+24], -1
	je	SHORT $LN10@build

; 117  : 				WorkingItem *item = items_[it.left];

	mov	eax, DWORD PTR _it$7115[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreeSphere_Builder@1@H@Z ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _item$7136[ebp], edx

; 118  : 				if (item->left == -1 && item->right == -1) {

	mov	eax, DWORD PTR _item$7136[ebp]
	cmp	DWORD PTR [eax+24], -1
	jne	SHORT $LN9@build
	mov	ecx, DWORD PTR _item$7136[ebp]
	cmp	DWORD PTR [ecx+28], -1
	jne	SHORT $LN9@build

; 119  : 					AABBTreeSphereLeaf *leaf = (AABBTreeSphereLeaf*) tree_->leafs_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _leaf$7138[ebp], ecx

; 120  : 					node->left = leaf + ln[it.left];

	mov	edx, DWORD PTR _it$7115[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _ln$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 44					; 0000002cH
	add	edx, DWORD PTR _leaf$7138[ebp]
	mov	eax, DWORD PTR _node$7134[ebp]
	mov	DWORD PTR [eax+24], edx

; 121  : 				}
; 122  : 				else {

	jmp	SHORT $LN8@build
$LN9@build:

; 123  : 					node->left = tree_->root_ + ln[it.left];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _it$7115[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR _ln$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	shl	ecx, 5
	add	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _node$7134[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN8@build:

; 124  : 				}
; 125  : 			}
; 126  : 			else

	jmp	SHORT $LN7@build
$LN10@build:

; 127  : 				node->left = NULL;

	mov	eax, DWORD PTR _node$7134[ebp]
	mov	DWORD PTR [eax+24], 0
$LN7@build:

; 128  : 
; 129  : 			if (it.right != -1) {

	mov	ecx, DWORD PTR _it$7115[ebp]
	cmp	DWORD PTR [ecx+28], -1
	je	SHORT $LN6@build

; 130  : 				WorkingItem *item = items_[it.right];

	mov	edx, DWORD PTR _it$7115[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreeSphere_Builder@1@H@Z ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _item$7143[ebp], ecx

; 131  : 				if (item->left == -1 && item->right == -1) {

	mov	edx, DWORD PTR _item$7143[ebp]
	cmp	DWORD PTR [edx+24], -1
	jne	SHORT $LN5@build
	mov	eax, DWORD PTR _item$7143[ebp]
	cmp	DWORD PTR [eax+28], -1
	jne	SHORT $LN5@build

; 132  : 					AABBTreeSphereLeaf *leaf = (AABBTreeSphereLeaf*) tree_->leafs_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _leaf$7145[ebp], eax

; 133  : 					node->right = leaf + ln[it.right];

	mov	ecx, DWORD PTR _it$7115[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _ln$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	imul	ecx, 44					; 0000002cH
	add	ecx, DWORD PTR _leaf$7145[ebp]
	mov	edx, DWORD PTR _node$7134[ebp]
	mov	DWORD PTR [edx+28], ecx

; 134  : 				}
; 135  : 				else {

	jmp	SHORT $LN4@build
$LN5@build:

; 136  : 					node->right = tree_->root_ + ln[it.right];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _it$7115[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	edx, DWORD PTR _ln$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	shl	eax, 5
	add	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _node$7134[ebp]
	mov	DWORD PTR [ecx+28], eax
$LN4@build:

; 137  : 				}
; 138  : 			}
; 139  : 			else

	jmp	SHORT $LN11@build
$LN6@build:

; 140  : 				node->right = NULL;

	mov	edx, DWORD PTR _node$7134[ebp]
	mov	DWORD PTR [edx+28], 0
$LN11@build:

; 141  : 		}
; 142  : 	}

	jmp	$LN18@build
$LN17@build:

; 143  : 
; 144  : 	if (moni)

	cmp	DWORD PTR _moni$[ebp], 0
	je	SHORT $LN2@build

; 145  : 		moni->write("Freeing temporary buffer");

	push	OFFSET $SG7150
	mov	eax, DWORD PTR _moni$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _moni$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
$LN2@build:

; 146  : 
; 147  : 	delete [] ln;

	mov	ecx, DWORD PTR _ln$[ebp]
	mov	DWORD PTR $T7593[ebp], ecx
	mov	edx, DWORD PTR $T7593[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 148  : 
; 149  : 	delete item;

	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR $T7595[ebp], eax
	mov	ecx, DWORD PTR $T7595[ebp]
	mov	DWORD PTR $T7594[ebp], ecx
	cmp	DWORD PTR $T7594[ebp], 0
	je	SHORT $LN44@build
	push	1
	mov	ecx, DWORD PTR $T7594[ebp]
	call	??_GWorkingItem@AABBTreeSphere_Builder@ozcollide@@QAEPAXI@Z
	mov	DWORD PTR tv422[ebp], eax
	jmp	SHORT $LN45@build
$LN44@build:
	mov	DWORD PTR tv422[ebp], 0
$LN45@build:

; 150  : 	items_.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXXZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::clear

; 151  : 
; 152  : 	if (moni)

	cmp	DWORD PTR _moni$[ebp], 0
	je	SHORT $LN1@build

; 153  : 		moni->write("Done.");

	push	OFFSET $SG7155
	mov	edx, DWORD PTR _moni$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _moni$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
$LN1@build:

; 154  : 
; 155  : 	return tree_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 156  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z$0:
	mov	eax, DWORD PTR $T7570[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z$1:
	mov	eax, DWORD PTR $T7574[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z$2:
	mov	eax, DWORD PTR $T7580[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z$3:
	mov	eax, DWORD PTR $T7585[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z$4:
	mov	eax, DWORD PTR $T7590[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-184]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?build@AABBTreeSphere_Builder@ozcollide@@QAEPAVAABBTreeSphere@2@HPBVSphere@2@HPAVMonitor@2@@Z ENDP ; ozcollide::AABBTreeSphere_Builder::build
PUBLIC	??0Vec3f@ozcollide@@QAE@XZ			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\sphere.h
;	COMDAT ??0Sphere@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Sphere@ozcollide@@QAE@XZ PROC			; ozcollide::Sphere::Sphere, COMDAT
; _this$ = ecx

; 36   : 	Sphere() { };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Sphere@ozcollide@@QAE@XZ ENDP			; ozcollide::Sphere::Sphere
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
_TEXT	ENDS
;	COMDAT ??0Vec3f@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vec3f@ozcollide@@QAE@XZ PROC				; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 37   : 	ozinline Vec3f()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	{
; 39   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vec3f@ozcollide@@QAE@XZ ENDP				; ozcollide::Vec3f::Vec3f
_TEXT	ENDS
;	COMDAT xdata$x
; File i:\svnroot\client\sdk\ozcollide\aabbtree_sphere.h
xdata$x	SEGMENT
__unwindtable$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ$0
__ehfuncinfo$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ PROC		; ozcollide::AABBTreeSphereLeaf::AABBTreeSphereLeaf, COMDAT
; _this$ = ecx

; 46   : 	AABBTreeSphereLeaf() : nbSpheres(0), spheres(NULL), users(NULL) { };

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0AABBTreeNode@ozcollide@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AABBTreeNode@ozcollide@@QAE@XZ
__ehhandler$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0AABBTreeSphereLeaf@ozcollide@@QAE@XZ ENDP		; ozcollide::AABBTreeSphereLeaf::AABBTreeSphereLeaf
PUBLIC	??1Box@ozcollide@@QAE@XZ			; ozcollide::Box::~Box
PUBLIC	??0Box@ozcollide@@QAE@XZ			; ozcollide::Box::Box
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AABBTreeNode@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AABBTreeNode@ozcollide@@QAE@XZ$0
__ehfuncinfo$??0AABBTreeNode@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0AABBTreeNode@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0AABBTreeNode@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AABBTreeNode@ozcollide@@QAE@XZ PROC			; ozcollide::AABBTreeNode::AABBTreeNode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0AABBTreeNode@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Box@ozcollide@@QAE@XZ		; ozcollide::Box::Box
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AABBTreeNode@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
__ehhandler$??0AABBTreeNode@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0AABBTreeNode@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0AABBTreeNode@ozcollide@@QAE@XZ ENDP			; ozcollide::AABBTreeNode::AABBTreeNode
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\box.h
;	COMDAT ??0Box@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Box@ozcollide@@QAE@XZ PROC				; ozcollide::Box::Box, COMDAT
; _this$ = ecx

; 44   : 	ozinline Box()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f

; 45   : 	{
; 46   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Box@ozcollide@@QAE@XZ ENDP				; ozcollide::Box::Box
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1Box@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Box@ozcollide@@QAE@XZ PROC				; ozcollide::Box::~Box, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1Box@ozcollide@@QAE@XZ ENDP				; ozcollide::Box::~Box
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AABBTreeNode@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AABBTreeNode@ozcollide@@QAE@XZ$0
__ehfuncinfo$??1AABBTreeNode@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1AABBTreeNode@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1AABBTreeNode@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AABBTreeNode@ozcollide@@QAE@XZ PROC			; ozcollide::AABBTreeNode::~AABBTreeNode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1AABBTreeNode@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AABBTreeNode@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
__ehhandler$??1AABBTreeNode@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1AABBTreeNode@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1AABBTreeNode@ozcollide@@QAE@XZ ENDP			; ozcollide::AABBTreeNode::~AABBTreeNode
PUBLIC	??1?$Vector@VSphere@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::Sphere>::~Vector<ozcollide::Sphere>
PUBLIC	??0?$Vector@VSphere@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::Sphere>::Vector<ozcollide::Sphere>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ$1
__ehfuncinfo$??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ PROC ; ozcollide::AABBTreeSphere_Builder::WorkingItem::WorkingItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Box@ozcollide@@QAE@XZ		; ozcollide::Box::Box
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$Vector@VSphere@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::Sphere>::Vector<ozcollide::Sphere>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
__unwindfunclet$??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$Vector@VSphere@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::Sphere>::~Vector<ozcollide::Sphere>
__ehhandler$??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ ENDP ; ozcollide::AABBTreeSphere_Builder::WorkingItem::WorkingItem
PUBLIC	??_EAABBTreeNode@ozcollide@@QAEPAXI@Z		; ozcollide::AABBTreeNode::`vector deleting destructor'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_EAABBTreeNode@ozcollide@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EAABBTreeNode@ozcollide@@QAEPAXI@Z PROC		; ozcollide::AABBTreeNode::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1AABBTreeNode@ozcollide@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@2
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AABBTreeNode@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EAABBTreeNode@ozcollide@@QAEPAXI@Z ENDP		; ozcollide::AABBTreeNode::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_EAABBTreeSphereLeaf@ozcollide@@QAEPAXI@Z	; ozcollide::AABBTreeSphereLeaf::`vector deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_EAABBTreeSphereLeaf@ozcollide@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EAABBTreeSphereLeaf@ozcollide@@QAEPAXI@Z PROC	; ozcollide::AABBTreeSphereLeaf::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@3
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EAABBTreeSphereLeaf@ozcollide@@QAEPAXI@Z ENDP	; ozcollide::AABBTreeSphereLeaf::`vector deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ$0
__ehfuncinfo$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ PROC		; ozcollide::AABBTreeSphereLeaf::~AABBTreeSphereLeaf, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AABBTreeNode@ozcollide@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AABBTreeNode@ozcollide@@QAE@XZ
__ehhandler$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1AABBTreeSphereLeaf@ozcollide@@QAE@XZ ENDP		; ozcollide::AABBTreeSphereLeaf::~AABBTreeSphereLeaf
PUBLIC	??1WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ ; ozcollide::AABBTreeSphere_Builder::WorkingItem::~WorkingItem
; Function compile flags: /Odtp
;	COMDAT ??_GWorkingItem@AABBTreeSphere_Builder@ozcollide@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GWorkingItem@AABBTreeSphere_Builder@ozcollide@@QAEPAXI@Z PROC ; ozcollide::AABBTreeSphere_Builder::WorkingItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GWorkingItem@AABBTreeSphere_Builder@ozcollide@@QAEPAXI@Z ENDP ; ozcollide::AABBTreeSphere_Builder::WorkingItem::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ$1
__ehfuncinfo$??1WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ PROC ; ozcollide::AABBTreeSphere_Builder::WorkingItem::~WorkingItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$Vector@VSphere@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::Sphere>::~Vector<ozcollide::Sphere>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
__unwindfunclet$??1WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$Vector@VSphere@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::Sphere>::~Vector<ozcollide::Sphere>
__ehhandler$??1WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ ENDP ; ozcollide::AABBTreeSphere_Builder::WorkingItem::~WorkingItem
PUBLIC	?grow@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Sphere>::grow
PUBLIC	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
PUBLIC	__real@4000000000000000
PUBLIC	?classifySphere@AABBTreeSphere_Builder@ozcollide@@AAEHABVSphere@2@HM@Z ; ozcollide::AABBTreeSphere_Builder::classifySphere
PUBLIC	??KVec3f@ozcollide@@QBE?AV01@M@Z		; ozcollide::Vec3f::operator/
PUBLIC	__real@40000000
PUBLIC	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator+
PUBLIC	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator-
PUBLIC	??GVec3f@ozcollide@@QBE?AV01@XZ			; ozcollide::Vec3f::operator-
PUBLIC	??0Vec3f@ozcollide@@QAE@MMM@Z			; ozcollide::Vec3f::Vec3f
PUBLIC	__real@7f7fffff
EXTRN	__fltused:DWORD
;	COMDAT __real@4000000000000000
; File i:\svnroot\client\sdk\ozcollide\aabbtreesphere_builder.cpp
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$3
__ehfuncinfo$?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv571 = -532						; size = 4
tv542 = -528						; size = 4
tv920 = -524						; size = 4
tv910 = -520						; size = 4
tv900 = -516						; size = 4
tv428 = -512						; size = 4
tv840 = -508						; size = 4
tv830 = -504						; size = 4
tv820 = -500						; size = 4
tv287 = -496						; size = 4
_this$ = -492						; size = 4
$T7711 = -488						; size = 4
$T7710 = -484						; size = 4
$T7707 = -480						; size = 4
$T7706 = -476						; size = 4
$T7705 = -472						; size = 12
$T7704 = -460						; size = 12
$T7703 = -448						; size = 12
$T7702 = -436						; size = 12
$T7701 = -424						; size = 12
$T7700 = -412						; size = 12
$T7697 = -400						; size = 4
$T7696 = -396						; size = 4
$T7695 = -392						; size = 12
$T7694 = -380						; size = 12
$T7693 = -368						; size = 12
$T7692 = -356						; size = 12
$T7691 = -344						; size = 12
$T7690 = -332						; size = 12
$T7687 = -320						; size = 4
$T7686 = -316						; size = 4
$T7685 = -312						; size = 12
$T7684 = -300						; size = 12
$T7683 = -288						; size = 12
$T7682 = -276						; size = 12
$T7681 = -264						; size = 12
$T7680 = -252						; size = 12
$T7679 = -240						; size = 12
$T7678 = -228						; size = 12
_s$7314 = -216						; size = 16
_start$7310 = -200					; size = 4
_nbSpheres$7308 = -196					; size = 4
_le$7309 = -192						; size = 4
_s$7301 = -188						; size = 16
_start$7297 = -172					; size = 4
_nbSpheres$7295 = -168					; size = 4
_le$7296 = -164						; size = 4
_box$7269 = -160					; size = 4
_box$7278 = -156					; size = 4
_box$7245 = -152					; size = 4
_box$7254 = -148					; size = 4
_sphere$7231 = -144					; size = 4
_max$7233 = -140					; size = 4
_min$7232 = -136					; size = 4
_res$7234 = -132					; size = 4
_sphere$7198 = -128					; size = 4
_r$7199 = -124						; size = 4
_topLeft$7200 = -120					; size = 12
_bottomRight$7203 = -108				; size = 12
_max$ = -96						; size = 12
_middle$ = -84						; size = 4
_bboxMax$ = -80						; size = 12
_bboxMin$ = -68						; size = 12
_right$ = -56						; size = 4
_ext$ = -52						; size = 4
_size$ = -48						; size = 4
_left$ = -44						; size = 4
_min$ = -40						; size = 12
_i$ = -28						; size = 4
_axis$ = -24						; size = 4
_nbSpheres$ = -20					; size = 4
_center$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
_leafDepth$ = 12					; size = 4
?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z PROC ; ozcollide::AABBTreeSphere_Builder::workOnItem
; _this$ = ecx

; 160  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 520				; 00000208H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 	int i;
; 162  : 
; 163  : 	int size = item.spheres.size();

	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 32					; 00000020H
	call	?size@?$Vector@VSphere@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::Sphere>::size
	mov	DWORD PTR _size$[ebp], eax

; 164  : 	if (size <= leafDepth) {

	mov	eax, DWORD PTR _size$[ebp]
	cmp	eax, DWORD PTR _leafDepth$[ebp]
	jg	SHORT $LN61@workOnItem

; 165  : 		item.left = -1;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+24], -1

; 166  : 		item.right = -1;

	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+28], -1

; 167  : 		return;

	jmp	$LN62@workOnItem
$LN61@workOnItem:

; 168  : 	}
; 169  : 
; 170  : 	int axis;
; 171  : 	float middle;
; 172  : 
; 173  : 	int nbSpheres = item.spheres.size();

	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 32					; 00000020H
	call	?size@?$Vector@VSphere@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::Sphere>::size
	mov	DWORD PTR _nbSpheres$[ebp], eax

; 174  : 
; 175  : 	Vec3f min, max;

	lea	ecx, DWORD PTR _min$[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f
	lea	ecx, DWORD PTR _max$[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f

; 176  : 	min = Vec3f(FLT_MAX, FLT_MAX, FLT_MAX);

	push	ecx
	fld	DWORD PTR __real@7f7fffff
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@7f7fffff
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@7f7fffff
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7678[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _min$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _min$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _min$[ebp+8], eax

; 177  : 	max = -min;

	lea	ecx, DWORD PTR $T7679[ebp]
	push	ecx
	lea	ecx, DWORD PTR _min$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@XZ		; ozcollide::Vec3f::operator-
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _max$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _max$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _max$[ebp+8], edx

; 178  : 
; 179  : 	for (i = 0; i < nbSpheres; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN60@workOnItem
$LN59@workOnItem:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN60@workOnItem:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nbSpheres$[ebp]
	jge	$LN58@workOnItem

; 180  : 		Sphere &sphere = item.spheres[i];

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$Vector@VSphere@ozcollide@@@ozcollide@@QBEAAVSphere@1@H@Z ; ozcollide::Vector<ozcollide::Sphere>::operator[]
	mov	DWORD PTR _sphere$7198[ebp], eax

; 181  : 		float r = sphere.radius;

	mov	eax, DWORD PTR _sphere$7198[ebp]
	fld	DWORD PTR [eax+12]
	fstp	DWORD PTR _r$7199[ebp]

; 182  : 		Vec3f topLeft = sphere.center - Vec3f(r, r, r);

	push	ecx
	fld	DWORD PTR _r$7199[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _r$7199[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _r$7199[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7680[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	lea	ecx, DWORD PTR _topLeft$7200[ebp]
	push	ecx
	mov	ecx, DWORD PTR _sphere$7198[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 183  : 		Vec3f bottomRight = sphere.center + Vec3f(r, r, r);

	push	ecx
	fld	DWORD PTR _r$7199[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _r$7199[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _r$7199[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7681[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	lea	edx, DWORD PTR _bottomRight$7203[ebp]
	push	edx
	mov	ecx, DWORD PTR _sphere$7198[ebp]
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+

; 184  : 		if (topLeft.x < min.x) min.x = topLeft.x;

	fld	DWORD PTR _topLeft$7200[ebp]
	fld	DWORD PTR _min$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN57@workOnItem
	fld	DWORD PTR _topLeft$7200[ebp]
	fstp	DWORD PTR _min$[ebp]
$LN57@workOnItem:

; 185  : 		if (topLeft.y < min.y) min.y = topLeft.y;

	fld	DWORD PTR _topLeft$7200[ebp+4]
	fld	DWORD PTR _min$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN56@workOnItem
	fld	DWORD PTR _topLeft$7200[ebp+4]
	fstp	DWORD PTR _min$[ebp+4]
$LN56@workOnItem:

; 186  : 		if (topLeft.z < min.z) min.z = topLeft.z;

	fld	DWORD PTR _topLeft$7200[ebp+8]
	fld	DWORD PTR _min$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN55@workOnItem
	fld	DWORD PTR _topLeft$7200[ebp+8]
	fstp	DWORD PTR _min$[ebp+8]
$LN55@workOnItem:

; 187  : 
; 188  : 		if (bottomRight.x > max.x) max.x = bottomRight.x;

	fld	DWORD PTR _bottomRight$7203[ebp]
	fld	DWORD PTR _max$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN54@workOnItem
	fld	DWORD PTR _bottomRight$7203[ebp]
	fstp	DWORD PTR _max$[ebp]
$LN54@workOnItem:

; 189  : 		if (bottomRight.y > max.y) max.y = bottomRight.y;

	fld	DWORD PTR _bottomRight$7203[ebp+4]
	fld	DWORD PTR _max$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN53@workOnItem
	fld	DWORD PTR _bottomRight$7203[ebp+4]
	fstp	DWORD PTR _max$[ebp+4]
$LN53@workOnItem:

; 190  : 		if (bottomRight.z > max.z) max.z = bottomRight.z;

	fld	DWORD PTR _bottomRight$7203[ebp+8]
	fld	DWORD PTR _max$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN52@workOnItem
	fld	DWORD PTR _bottomRight$7203[ebp+8]
	fstp	DWORD PTR _max$[ebp+8]
$LN52@workOnItem:

; 191  : 	}

	jmp	$LN59@workOnItem
$LN58@workOnItem:

; 192  : 
; 193  : 	item.aabb.center = (min + max) / 2;

	push	ecx
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T7683[ebp]
	push	eax
	lea	ecx, DWORD PTR _max$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T7682[ebp]
	push	edx
	lea	ecx, DWORD PTR _min$[ebp]
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+
	mov	ecx, eax
	call	??KVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator/
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 194  : 	item.aabb.extent = (max - min) / 2;

	push	ecx
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7685[ebp]
	push	ecx
	lea	edx, DWORD PTR _min$[ebp]
	push	edx
	lea	eax, DWORD PTR $T7684[ebp]
	push	eax
	lea	ecx, DWORD PTR _max$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	mov	ecx, eax
	call	??KVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator/
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 195  : 
; 196  : 	const Vec3f &center = item.aabb.center;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR _center$[ebp], ecx

; 197  : 	const Vec3f &ext = item.aabb.extent;

	mov	edx, DWORD PTR _item$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _ext$[ebp], edx

; 198  : 
; 199  : 	if (ext.x > ext.y && ext.x > ext.z) {

	mov	eax, DWORD PTR _ext$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _ext$[ebp]
	fld	DWORD PTR [ecx+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN51@workOnItem
	mov	edx, DWORD PTR _ext$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _ext$[ebp]
	fld	DWORD PTR [eax+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN51@workOnItem

; 200  : 		axis = 0;

	mov	DWORD PTR _axis$[ebp], 0

; 201  : 		middle = center.x;

	mov	ecx, DWORD PTR _center$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR _middle$[ebp]

; 202  : 	}
; 203  : 	else {

	jmp	SHORT $LN48@workOnItem
$LN51@workOnItem:

; 204  : 		if (ext.y > ext.z) {

	mov	edx, DWORD PTR _ext$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _ext$[ebp]
	fld	DWORD PTR [eax+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN49@workOnItem

; 205  : 			axis = 1;

	mov	DWORD PTR _axis$[ebp], 1

; 206  : 			middle = center.y;

	mov	ecx, DWORD PTR _center$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR _middle$[ebp]

; 207  : 		}
; 208  : 		else {

	jmp	SHORT $LN48@workOnItem
$LN49@workOnItem:

; 209  : 			axis = 2;

	mov	DWORD PTR _axis$[ebp], 2

; 210  : 			middle = center.z;

	mov	edx, DWORD PTR _center$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR _middle$[ebp]
$LN48@workOnItem:

; 211  : 		}
; 212  : 	}
; 213  : 
; 214  : 	Vec3f bboxMin = center - ext;

	mov	eax, DWORD PTR _ext$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bboxMin$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _center$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 215  : 	Vec3f bboxMax = center + ext;

	mov	edx, DWORD PTR _ext$[ebp]
	push	edx
	lea	eax, DWORD PTR _bboxMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _center$[ebp]
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+

; 216  : 
; 217  : 	WorkingItem *left = NULL;

	mov	DWORD PTR _left$[ebp], 0

; 218  : 	WorkingItem *right = NULL;

	mov	DWORD PTR _right$[ebp], 0

; 219  : 
; 220  : 	for (i = 0; i < nbSpheres; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN47@workOnItem
$LN46@workOnItem:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN47@workOnItem:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _nbSpheres$[ebp]
	jge	$LN45@workOnItem

; 221  : 		const Sphere &sphere = item.spheres[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$Vector@VSphere@ozcollide@@@ozcollide@@QBEAAVSphere@1@H@Z ; ozcollide::Vector<ozcollide::Sphere>::operator[]
	mov	DWORD PTR _sphere$7231[ebp], eax

; 222  : 
; 223  : 		float min, max;
; 224  : 		int res = classifySphere(sphere, axis, middle);

	push	ecx
	fld	DWORD PTR _middle$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _axis$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sphere$7231[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?classifySphere@AABBTreeSphere_Builder@ozcollide@@AAEHABVSphere@2@HM@Z ; ozcollide::AABBTreeSphere_Builder::classifySphere
	mov	DWORD PTR _res$7234[ebp], eax

; 225  : 		if (axis == 0) {

	cmp	DWORD PTR _axis$[ebp], 0
	jne	SHORT $LN44@workOnItem

; 226  : 			min = sphere.center.x - sphere.radius;

	mov	eax, DWORD PTR _sphere$7231[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _sphere$7231[ebp]
	fsub	DWORD PTR [ecx+12]
	fstp	DWORD PTR _min$7232[ebp]

; 227  : 			max = sphere.center.x + sphere.radius;

	mov	edx, DWORD PTR _sphere$7231[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _sphere$7231[ebp]
	fadd	DWORD PTR [eax+12]
	fstp	DWORD PTR _max$7233[ebp]
	jmp	SHORT $LN41@workOnItem
$LN44@workOnItem:

; 228  : 		}
; 229  : 		else if (axis == 1) {

	cmp	DWORD PTR _axis$[ebp], 1
	jne	SHORT $LN42@workOnItem

; 230  : 			min = sphere.center.y - sphere.radius;

	mov	ecx, DWORD PTR _sphere$7231[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _sphere$7231[ebp]
	fsub	DWORD PTR [edx+12]
	fstp	DWORD PTR _min$7232[ebp]

; 231  : 			max = sphere.center.y + sphere.radius;

	mov	eax, DWORD PTR _sphere$7231[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _sphere$7231[ebp]
	fadd	DWORD PTR [ecx+12]
	fstp	DWORD PTR _max$7233[ebp]

; 232  : 		}
; 233  : 		else {

	jmp	SHORT $LN41@workOnItem
$LN42@workOnItem:

; 234  : 			min = sphere.center.z - sphere.radius;

	mov	edx, DWORD PTR _sphere$7231[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _sphere$7231[ebp]
	fsub	DWORD PTR [eax+12]
	fstp	DWORD PTR _min$7232[ebp]

; 235  : 			max = sphere.center.z + sphere.radius;

	mov	ecx, DWORD PTR _sphere$7231[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _sphere$7231[ebp]
	fadd	DWORD PTR [edx+12]
	fstp	DWORD PTR _max$7233[ebp]
$LN41@workOnItem:

; 236  : 		}
; 237  : 
; 238  : 		if (res == 0) {

	cmp	DWORD PTR _res$7234[ebp], 0
	jne	$LN40@workOnItem

; 239  : 			if (!left) {

	cmp	DWORD PTR _left$[ebp], 0
	jne	$LN34@workOnItem

; 240  : 				left = new WorkingItem();

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7687[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7687[ebp], 0
	je	SHORT $LN64@workOnItem
	mov	ecx, DWORD PTR $T7687[ebp]
	call	??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	mov	DWORD PTR tv287[ebp], eax
	jmp	SHORT $LN65@workOnItem
$LN64@workOnItem:
	mov	DWORD PTR tv287[ebp], 0
$LN65@workOnItem:
	mov	eax, DWORD PTR tv287[ebp]
	mov	DWORD PTR $T7686[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7686[ebp]
	mov	DWORD PTR _left$[ebp], ecx

; 241  : 				Box &box = left->aabb;

	mov	edx, DWORD PTR _left$[ebp]
	mov	DWORD PTR _box$7245[ebp], edx

; 242  : 				if (axis == 0)

	cmp	DWORD PTR _axis$[ebp], 0
	jne	SHORT $LN38@workOnItem

; 243  : 					box.setFromPoints(bboxMin, Vec3f((bboxMin.x + bboxMax.x) / 2.0f, bboxMax.y, bboxMax.z));

	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+4]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _bboxMin$[ebp]
	fadd	DWORD PTR _bboxMax$[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv820[ebp]
	fld	DWORD PTR tv820[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7690[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	lea	eax, DWORD PTR _bboxMin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _box$7245[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	$LN34@workOnItem
$LN38@workOnItem:

; 244  : 				else if (axis == 1)

	cmp	DWORD PTR _axis$[ebp], 1
	jne	SHORT $LN36@workOnItem

; 245  : 					box.setFromPoints(bboxMin, Vec3f(bboxMax.x, (bboxMin.y + bboxMax.y) / 2.0f, bboxMax.z));

	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+8]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _bboxMin$[ebp+4]
	fadd	DWORD PTR _bboxMax$[ebp+4]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv830[ebp]
	fld	DWORD PTR tv830[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7691[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	lea	ecx, DWORD PTR _bboxMin$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _box$7245[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	SHORT $LN34@workOnItem
$LN36@workOnItem:

; 246  : 				else if (axis == 2)

	cmp	DWORD PTR _axis$[ebp], 2
	jne	SHORT $LN34@workOnItem

; 247  : 					box.setFromPoints(bboxMin, Vec3f(bboxMax.x, bboxMax.y, (bboxMin.z + bboxMax.z) / 2.0f));

	fld	DWORD PTR _bboxMin$[ebp+8]
	fadd	DWORD PTR _bboxMax$[ebp+8]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv840[ebp]
	fld	DWORD PTR tv840[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7692[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	lea	edx, DWORD PTR _bboxMin$[ebp]
	push	edx
	mov	ecx, DWORD PTR _box$7245[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
$LN34@workOnItem:

; 248  : 			}
; 249  : 			Box &box = left->aabb;

	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _box$7254[ebp], eax

; 250  : 			if (axis == 0 && max > (box.center.x + box.extent.x) )

	cmp	DWORD PTR _axis$[ebp], 0
	jne	SHORT $LN33@workOnItem
	mov	ecx, DWORD PTR _box$7254[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _box$7254[ebp]
	fadd	DWORD PTR [edx+12]
	fld	DWORD PTR _max$7233[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN33@workOnItem

; 251  : 				box.setFromPoints(bboxMin, Vec3f(max, bboxMax.y, bboxMax.z));

	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _max$7233[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7693[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	lea	eax, DWORD PTR _bboxMin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _box$7254[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	$LN29@workOnItem
$LN33@workOnItem:

; 252  : 			else if (axis == 1 && max > (box.center.y + box.extent.y) )

	cmp	DWORD PTR _axis$[ebp], 1
	jne	SHORT $LN31@workOnItem
	mov	ecx, DWORD PTR _box$7254[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _box$7254[ebp]
	fadd	DWORD PTR [edx+16]
	fld	DWORD PTR _max$7233[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN31@workOnItem

; 253  : 				box.setFromPoints(bboxMin, Vec3f(bboxMax.x, max, bboxMax.z));

	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _max$7233[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7694[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	lea	eax, DWORD PTR _bboxMin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _box$7254[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	SHORT $LN29@workOnItem
$LN31@workOnItem:

; 254  : 			else if (axis == 2 && max > (box.center.z + box.extent.z) )

	cmp	DWORD PTR _axis$[ebp], 2
	jne	SHORT $LN29@workOnItem
	mov	ecx, DWORD PTR _box$7254[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _box$7254[ebp]
	fadd	DWORD PTR [edx+20]
	fld	DWORD PTR _max$7233[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN29@workOnItem

; 255  : 				box.setFromPoints(bboxMin, Vec3f(bboxMax.x, bboxMax.y, max));

	push	ecx
	fld	DWORD PTR _max$7233[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7695[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	lea	eax, DWORD PTR _bboxMin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _box$7254[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
$LN29@workOnItem:

; 256  : 			left->spheres.add(sphere);

	mov	ecx, DWORD PTR _sphere$7231[ebp]
	push	ecx
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, 32					; 00000020H
	call	?add@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXABVSphere@2@@Z ; ozcollide::Vector<ozcollide::Sphere>::add

; 257  : 		}
; 258  : 		else {

	jmp	$LN28@workOnItem
$LN40@workOnItem:

; 259  : 			// res = 1
; 260  : 			if (!right) {

	cmp	DWORD PTR _right$[ebp], 0
	jne	$LN22@workOnItem

; 261  : 				right = new WorkingItem();

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7697[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T7697[ebp], 0
	je	SHORT $LN66@workOnItem
	mov	ecx, DWORD PTR $T7697[ebp]
	call	??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	mov	DWORD PTR tv428[ebp], eax
	jmp	SHORT $LN67@workOnItem
$LN66@workOnItem:
	mov	DWORD PTR tv428[ebp], 0
$LN67@workOnItem:
	mov	edx, DWORD PTR tv428[ebp]
	mov	DWORD PTR $T7696[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T7696[ebp]
	mov	DWORD PTR _right$[ebp], eax

; 262  : 				Box &box = right->aabb;

	mov	ecx, DWORD PTR _right$[ebp]
	mov	DWORD PTR _box$7269[ebp], ecx

; 263  : 				if (axis == 0)

	cmp	DWORD PTR _axis$[ebp], 0
	jne	SHORT $LN26@workOnItem

; 264  : 					box.setFromPoints(Vec3f((bboxMin.x + bboxMax.x) / 2.0f, bboxMin.y, bboxMin.z), bboxMax);

	lea	edx, DWORD PTR _bboxMax$[ebp]
	push	edx
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+4]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _bboxMin$[ebp]
	fadd	DWORD PTR _bboxMax$[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv900[ebp]
	fld	DWORD PTR tv900[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7700[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	mov	ecx, DWORD PTR _box$7269[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	$LN22@workOnItem
$LN26@workOnItem:

; 265  : 				else if (axis == 1)

	cmp	DWORD PTR _axis$[ebp], 1
	jne	SHORT $LN24@workOnItem

; 266  : 					box.setFromPoints(Vec3f(bboxMin.x, (bboxMin.y + bboxMax.y) / 2.0f, bboxMin.z), bboxMax);

	lea	eax, DWORD PTR _bboxMax$[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+8]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _bboxMin$[ebp+4]
	fadd	DWORD PTR _bboxMax$[ebp+4]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv910[ebp]
	fld	DWORD PTR tv910[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7701[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	mov	ecx, DWORD PTR _box$7269[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	SHORT $LN22@workOnItem
$LN24@workOnItem:

; 267  : 				else if (axis == 2)

	cmp	DWORD PTR _axis$[ebp], 2
	jne	SHORT $LN22@workOnItem

; 268  : 					box.setFromPoints(Vec3f(bboxMin.x, bboxMin.y, (bboxMin.z + bboxMax.z) / 2.0f), bboxMax);

	lea	ecx, DWORD PTR _bboxMax$[ebp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+8]
	fadd	DWORD PTR _bboxMax$[ebp+8]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv920[ebp]
	fld	DWORD PTR tv920[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7702[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	mov	ecx, DWORD PTR _box$7269[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
$LN22@workOnItem:

; 269  : 			}
; 270  : 			Box &box = right->aabb;

	mov	edx, DWORD PTR _right$[ebp]
	mov	DWORD PTR _box$7278[ebp], edx

; 271  : 			if (axis == 0 && min < (box.center.x - box.extent.x) )

	cmp	DWORD PTR _axis$[ebp], 0
	jne	SHORT $LN21@workOnItem
	mov	eax, DWORD PTR _box$7278[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _box$7278[ebp]
	fsub	DWORD PTR [ecx+12]
	fld	DWORD PTR _min$7232[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN21@workOnItem

; 272  : 				box.setFromPoints(Vec3f(min, bboxMin.y, bboxMin.z), bboxMax);

	lea	edx, DWORD PTR _bboxMax$[ebp]
	push	edx
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _min$7232[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7703[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	mov	ecx, DWORD PTR _box$7278[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	$LN17@workOnItem
$LN21@workOnItem:

; 273  : 			else if (axis == 1 && min < (box.center.y - box.extent.y) )

	cmp	DWORD PTR _axis$[ebp], 1
	jne	SHORT $LN19@workOnItem
	mov	eax, DWORD PTR _box$7278[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _box$7278[ebp]
	fsub	DWORD PTR [ecx+16]
	fld	DWORD PTR _min$7232[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN19@workOnItem

; 274  : 				box.setFromPoints(Vec3f(bboxMin.x, min, bboxMin.z), bboxMax);

	lea	edx, DWORD PTR _bboxMax$[ebp]
	push	edx
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _min$7232[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7704[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	mov	ecx, DWORD PTR _box$7278[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	SHORT $LN17@workOnItem
$LN19@workOnItem:

; 275  : 			else if (axis == 2 && min < (box.center.z - box.extent.z) )

	cmp	DWORD PTR _axis$[ebp], 2
	jne	SHORT $LN17@workOnItem
	mov	eax, DWORD PTR _box$7278[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _box$7278[ebp]
	fsub	DWORD PTR [ecx+20]
	fld	DWORD PTR _min$7232[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN17@workOnItem

; 276  : 				box.setFromPoints(Vec3f(bboxMin.x, bboxMin.y, min), bboxMax);

	lea	edx, DWORD PTR _bboxMax$[ebp]
	push	edx
	push	ecx
	fld	DWORD PTR _min$7232[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7705[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	mov	ecx, DWORD PTR _box$7278[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
$LN17@workOnItem:

; 277  : 			right->spheres.add(sphere);

	mov	eax, DWORD PTR _sphere$7231[ebp]
	push	eax
	mov	ecx, DWORD PTR _right$[ebp]
	add	ecx, 32					; 00000020H
	call	?add@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXABVSphere@2@@Z ; ozcollide::Vector<ozcollide::Sphere>::add
$LN28@workOnItem:

; 278  : 		}
; 279  : 	}

	jmp	$LN46@workOnItem
$LN45@workOnItem:

; 280  : 
; 281  : 
; 282  : 	if ((left && !right) || (!left && right)) {

	cmp	DWORD PTR _left$[ebp], 0
	je	SHORT $LN14@workOnItem
	cmp	DWORD PTR _right$[ebp], 0
	je	SHORT $LN15@workOnItem
$LN14@workOnItem:
	cmp	DWORD PTR _left$[ebp], 0
	jne	$LN8@workOnItem
	cmp	DWORD PTR _right$[ebp], 0
	je	$LN8@workOnItem
$LN15@workOnItem:

; 283  : 		if (left && !right) {

	cmp	DWORD PTR _left$[ebp], 0
	je	$LN13@workOnItem
	cmp	DWORD PTR _right$[ebp], 0
	jne	$LN13@workOnItem

; 284  : 			right = new WorkingItem();

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7707[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T7707[ebp], 0
	je	SHORT $LN68@workOnItem
	mov	ecx, DWORD PTR $T7707[ebp]
	call	??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	mov	DWORD PTR tv542[ebp], eax
	jmp	SHORT $LN69@workOnItem
$LN68@workOnItem:
	mov	DWORD PTR tv542[ebp], 0
$LN69@workOnItem:
	mov	ecx, DWORD PTR tv542[ebp]
	mov	DWORD PTR $T7706[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T7706[ebp]
	mov	DWORD PTR _right$[ebp], edx

; 285  : 			right->aabb = left->aabb;

	mov	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR _right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax

; 286  : 			int nbSpheres = left->spheres.size();

	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, 32					; 00000020H
	call	?size@?$Vector@VSphere@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::Sphere>::size
	mov	DWORD PTR _nbSpheres$7295[ebp], eax

; 287  : 			int le = nbSpheres / 2;

	mov	eax, DWORD PTR _nbSpheres$7295[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _le$7296[ebp], eax

; 288  : 			int start = nbSpheres - le;

	mov	ecx, DWORD PTR _nbSpheres$7295[ebp]
	sub	ecx, DWORD PTR _le$7296[ebp]
	mov	DWORD PTR _start$7297[ebp], ecx

; 289  : 			for (i = start; i < nbSpheres; i++) {

	mov	edx, DWORD PTR _start$7297[ebp]
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN12@workOnItem
$LN11@workOnItem:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@workOnItem:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nbSpheres$7295[ebp]
	jge	SHORT $LN10@workOnItem

; 290  : 				Sphere s = left->spheres[i];

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$Vector@VSphere@ozcollide@@@ozcollide@@QBEAAVSphere@1@H@Z ; ozcollide::Vector<ozcollide::Sphere>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$7301[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _s$7301[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _s$7301[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _s$7301[ebp+12], edx

; 291  : 				right->spheres.add(s);

	lea	eax, DWORD PTR _s$7301[ebp]
	push	eax
	mov	ecx, DWORD PTR _right$[ebp]
	add	ecx, 32					; 00000020H
	call	?add@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXABVSphere@2@@Z ; ozcollide::Vector<ozcollide::Sphere>::add

; 292  : 			}

	jmp	SHORT $LN11@workOnItem
$LN10@workOnItem:

; 293  : 			left->spheres.grow(-le);

	mov	ecx, DWORD PTR _le$7296[ebp]
	neg	ecx
	push	ecx
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, 32					; 00000020H
	call	?grow@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Sphere>::grow
	jmp	$LN8@workOnItem
$LN13@workOnItem:

; 294  : 		}
; 295  : 		else if (!left && right) {

	cmp	DWORD PTR _left$[ebp], 0
	jne	$LN8@workOnItem
	cmp	DWORD PTR _right$[ebp], 0
	je	$LN8@workOnItem

; 296  : 			left = new WorkingItem();

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7711[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T7711[ebp], 0
	je	SHORT $LN70@workOnItem
	mov	ecx, DWORD PTR $T7711[ebp]
	call	??0WorkingItem@AABBTreeSphere_Builder@ozcollide@@QAE@XZ
	mov	DWORD PTR tv571[ebp], eax
	jmp	SHORT $LN71@workOnItem
$LN70@workOnItem:
	mov	DWORD PTR tv571[ebp], 0
$LN71@workOnItem:
	mov	edx, DWORD PTR tv571[ebp]
	mov	DWORD PTR $T7710[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T7710[ebp]
	mov	DWORD PTR _left$[ebp], eax

; 297  : 			left->aabb = right->aabb;

	mov	ecx, DWORD PTR _right$[ebp]
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], ecx

; 298  : 			int nbSpheres = right->spheres.size();

	mov	ecx, DWORD PTR _right$[ebp]
	add	ecx, 32					; 00000020H
	call	?size@?$Vector@VSphere@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::Sphere>::size
	mov	DWORD PTR _nbSpheres$7308[ebp], eax

; 299  : 			int le = nbSpheres / 2;

	mov	eax, DWORD PTR _nbSpheres$7308[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _le$7309[ebp], eax

; 300  : 			int start = nbSpheres - le;

	mov	edx, DWORD PTR _nbSpheres$7308[ebp]
	sub	edx, DWORD PTR _le$7309[ebp]
	mov	DWORD PTR _start$7310[ebp], edx

; 301  : 			for (i = start; i < nbSpheres; i++) {

	mov	eax, DWORD PTR _start$7310[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN7@workOnItem
$LN6@workOnItem:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@workOnItem:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _nbSpheres$7308[ebp]
	jge	SHORT $LN5@workOnItem

; 302  : 				Sphere s = right->spheres[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _right$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$Vector@VSphere@ozcollide@@@ozcollide@@QBEAAVSphere@1@H@Z ; ozcollide::Vector<ozcollide::Sphere>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$7314[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _s$7314[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _s$7314[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _s$7314[ebp+12], edx

; 303  : 				left->spheres.add(s);

	lea	eax, DWORD PTR _s$7314[ebp]
	push	eax
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, 32					; 00000020H
	call	?add@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXABVSphere@2@@Z ; ozcollide::Vector<ozcollide::Sphere>::add

; 304  : 			}

	jmp	SHORT $LN6@workOnItem
$LN5@workOnItem:

; 305  : 			right->spheres.grow(-le);

	mov	ecx, DWORD PTR _le$7309[ebp]
	neg	ecx
	push	ecx
	mov	ecx, DWORD PTR _right$[ebp]
	add	ecx, 32					; 00000020H
	call	?grow@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Sphere>::grow
$LN8@workOnItem:

; 306  : 		}
; 307  : 	}
; 308  : 
; 309  : 	if (left) {

	cmp	DWORD PTR _left$[ebp], 0
	je	SHORT $LN4@workOnItem

; 310  : 		item.left = items_.size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::size
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+24], eax

; 311  : 		items_.add(left);

	lea	eax, DWORD PTR _left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?add@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXABQAVWorkingItem@AABBTreeSphere_Builder@2@@Z ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::add

; 312  : 	}
; 313  : 	else

	jmp	SHORT $LN3@workOnItem
$LN4@workOnItem:

; 314  : 		item.left = -1;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+24], -1
$LN3@workOnItem:

; 315  : 
; 316  : 	if (right) {

	cmp	DWORD PTR _right$[ebp], 0
	je	SHORT $LN2@workOnItem

; 317  : 		item.right = items_.size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::size
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+28], eax

; 318  : 		items_.add(right);

	lea	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?add@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXABQAVWorkingItem@AABBTreeSphere_Builder@2@@Z ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::add

; 319  : 	}
; 320  : 	else

	jmp	SHORT $LN1@workOnItem
$LN2@workOnItem:

; 321  : 		item.right = -1;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+28], -1
$LN1@workOnItem:
$LN62@workOnItem:

; 322  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$0:
	mov	eax, DWORD PTR $T7687[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$1:
	mov	eax, DWORD PTR $T7697[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$2:
	mov	eax, DWORD PTR $T7707[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$3:
	mov	eax, DWORD PTR $T7711[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-524]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?workOnItem@AABBTreeSphere_Builder@ozcollide@@AAEXAAVWorkingItem@12@H@Z ENDP ; ozcollide::AABBTreeSphere_Builder::workOnItem
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
;	COMDAT ??0Vec3f@ozcollide@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Vec3f@ozcollide@@QAE@MMM@Z PROC			; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __z$[ebp]
	fstp	DWORD PTR [edx+8]

; 43   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vec3f@ozcollide@@QAE@MMM@Z ENDP			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??GVec3f@ozcollide@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??GVec3f@ozcollide@@QBE?AV01@XZ PROC			; ozcollide::Vec3f::operator-, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 		return Vec3f(-x, -y, -z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 55   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??GVec3f@ozcollide@@QBE?AV01@XZ ENDP			; ozcollide::Vec3f::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator-, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		return Vec3f(x - _v.x, y - _v.y, z - _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 96   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator+, COMDAT
; _this$ = ecx

; 99   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 		return Vec3f(x + _v.x, y + _v.y, z + _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 101  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator+
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??KVec3f@ozcollide@@QBE?AV01@M@Z
_TEXT	SEGMENT
tv92 = -20						; size = 4
tv90 = -16						; size = 4
tv88 = -12						; size = 4
_this$ = -8						; size = 4
_m$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__d$ = 12						; size = 4
??KVec3f@ozcollide@@QBE?AV01@M@Z PROC			; ozcollide::Vec3f::operator/, COMDAT
; _this$ = ecx

; 119  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		float m = 1.0f / _d;

	fld	DWORD PTR __d$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _m$[ebp]

; 121  : 		return Vec3f(x * m, y * m, z * m);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _m$[ebp]
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR _m$[ebp]
	fstp	DWORD PTR tv90[ebp]
	fld	DWORD PTR tv90[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR _m$[ebp]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 122  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??KVec3f@ozcollide@@QBE?AV01@M@Z ENDP			; ozcollide::Vec3f::operator/
_TEXT	ENDS
PUBLIC	?positive@Vec3f@ozcollide@@QAEXXZ		; ozcollide::Vec3f::positive
PUBLIC	??DVec3f@ozcollide@@QBE?AV01@M@Z		; ozcollide::Vec3f::operator*
PUBLIC	__real@3f000000
;	COMDAT __real@3f000000
; File i:\svnroot\client\sdk\ozcollide\box.h
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T7745 = -48						; size = 12
$T7744 = -36						; size = 12
$T7743 = -24						; size = 12
$T7742 = -12						; size = 12
__pt0$ = 8						; size = 4
__pt1$ = 12						; size = 4
?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z PROC	; ozcollide::Box::setFromPoints, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		center = (_pt1 + _pt0) * 0.5f;

	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T7743[ebp]
	push	eax
	mov	ecx, DWORD PTR __pt0$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T7742[ebp]
	push	edx
	mov	ecx, DWORD PTR __pt1$[ebp]
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+
	mov	ecx, eax
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 60   : 		extent = (_pt1 - _pt0) * 0.5f;

	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7745[ebp]
	push	ecx
	mov	edx, DWORD PTR __pt0$[ebp]
	push	edx
	lea	eax, DWORD PTR $T7744[ebp]
	push	eax
	mov	ecx, DWORD PTR __pt1$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	mov	ecx, eax
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 61   : 		extent.positive();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?positive@Vec3f@ozcollide@@QAEXXZ	; ozcollide::Vec3f::positive

; 62   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ENDP	; ozcollide::Box::setFromPoints
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
_TEXT	ENDS
;	COMDAT ??DVec3f@ozcollide@@QBE?AV01@M@Z
_TEXT	SEGMENT
tv87 = -16						; size = 4
tv85 = -12						; size = 4
tv83 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__m$ = 12						; size = 4
??DVec3f@ozcollide@@QBE?AV01@M@Z PROC			; ozcollide::Vec3f::operator*, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 		return Vec3f(x * _m, y * _m, z * _m);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR __m$[ebp]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR __m$[ebp]
	fstp	DWORD PTR tv85[ebp]
	fld	DWORD PTR tv85[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR __m$[ebp]
	fstp	DWORD PTR tv87[ebp]
	fld	DWORD PTR tv87[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??DVec3f@ozcollide@@QBE?AV01@M@Z ENDP			; ozcollide::Vec3f::operator*
_TEXT	ENDS
PUBLIC	__real@0000000000000000
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?positive@Vec3f@ozcollide@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?positive@Vec3f@ozcollide@@QAEXXZ PROC			; ozcollide::Vec3f::positive, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 180  : 		if (x < 0) x = -x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@positive
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fchs
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]
$LN3@positive:

; 181  : 		if (y < 0) y = -y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@positive
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]
$LN2@positive:

; 182  : 		if (z < 0) z = -z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@positive
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fchs
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]
$LN1@positive:

; 183  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?positive@Vec3f@ozcollide@@QAEXXZ ENDP			; ozcollide::Vec3f::positive
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\aabbtreesphere_builder.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sphere$ = 8						; size = 4
_axis$ = 12						; size = 4
_middle$ = 16						; size = 4
?classifySphere@AABBTreeSphere_Builder@ozcollide@@AAEHABVSphere@2@HM@Z PROC ; ozcollide::AABBTreeSphere_Builder::classifySphere
; _this$ = ecx

; 325  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 326  : 	if ((sphere.center.x <= middle && axis == 0) ||
; 327  : 		(sphere.center.y <= middle && axis == 1) ||
; 328  : 		(sphere.center.z <= middle && axis == 2) )

	mov	eax, DWORD PTR _sphere$[ebp]
	fld	DWORD PTR [eax]
	fld	DWORD PTR _middle$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@classifySp
	cmp	DWORD PTR _axis$[ebp], 0
	je	SHORT $LN4@classifySp
$LN3@classifySp:
	mov	ecx, DWORD PTR _sphere$[ebp]
	fld	DWORD PTR [ecx+4]
	fld	DWORD PTR _middle$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN2@classifySp
	cmp	DWORD PTR _axis$[ebp], 1
	je	SHORT $LN4@classifySp
$LN2@classifySp:
	mov	edx, DWORD PTR _sphere$[ebp]
	fld	DWORD PTR [edx+8]
	fld	DWORD PTR _middle$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN5@classifySp
	cmp	DWORD PTR _axis$[ebp], 2
	jne	SHORT $LN5@classifySp
$LN4@classifySp:

; 329  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN1@classifySp

; 330  : 	else

	jmp	SHORT $LN1@classifySp
$LN5@classifySp:

; 331  : 		return 1;

	mov	eax, 1
$LN1@classifySp:

; 332  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?classifySphere@AABBTreeSphere_Builder@ozcollide@@AAEHABVSphere@2@HM@Z ENDP ; ozcollide::AABBTreeSphere_Builder::classifySphere
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vector.h
_TEXT	ENDS
;	COMDAT ??0?$Vector@VSphere@ozcollide@@@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$Vector@VSphere@ozcollide@@@ozcollide@@QAE@XZ PROC	; ozcollide::Vector<ozcollide::Sphere>::Vector<ozcollide::Sphere>, COMDAT
; _this$ = ecx

; 35   : 	Vector()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 	{
; 37   : 		mem_ = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 38   : 		size_ = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 39   : 		capacity_ = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$Vector@VSphere@ozcollide@@@ozcollide@@QAE@XZ ENDP	; ozcollide::Vector<ozcollide::Sphere>::Vector<ozcollide::Sphere>
_TEXT	ENDS
PUBLIC	?clear@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXXZ ; ozcollide::Vector<ozcollide::Sphere>::clear
; Function compile flags: /Odtp
;	COMDAT ??1?$Vector@VSphere@ozcollide@@@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$Vector@VSphere@ozcollide@@@ozcollide@@QAE@XZ PROC	; ozcollide::Vector<ozcollide::Sphere>::~Vector<ozcollide::Sphere>, COMDAT
; _this$ = ecx

; 43   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 		clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXXZ ; ozcollide::Vector<ozcollide::Sphere>::clear

; 45   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$Vector@VSphere@ozcollide@@@ozcollide@@QAE@XZ ENDP	; ozcollide::Vector<ozcollide::Sphere>::~Vector<ozcollide::Sphere>
_TEXT	ENDS
PUBLIC	?resize@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Sphere>::resize
; Function compile flags: /Odtp
;	COMDAT ?add@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXABVSphere@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__t$ = 8						; size = 4
?add@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXABVSphere@2@@Z PROC ; ozcollide::Vector<ozcollide::Sphere>::add, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 		if (size_ < capacity_) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN1@add

; 50   : 			mem_[size_] = _t;

	mov	eax, DWORD PTR __t$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	add	ecx, edx
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 51   : 			size_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 52   : 			return;

	jmp	SHORT $LN2@add
$LN1@add:

; 53   : 		}
; 54   : 
; 55   : 		resize(size_ + 1);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Sphere>::resize

; 56   : 		mem_[size_ - 1] = _t;

	mov	eax, DWORD PTR __t$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	shl	edx, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	add	ecx, edx
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
$LN2@add:

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?add@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXABVSphere@2@@Z ENDP ; ozcollide::Vector<ozcollide::Sphere>::add
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?grow@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__size$ = 8						; size = 4
?grow@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z PROC ; ozcollide::Vector<ozcollide::Sphere>::grow, COMDAT
; _this$ = ecx

; 140  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 		resize(size_ + _size);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR __size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Sphere>::resize

; 142  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?grow@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z ENDP ; ozcollide::Vector<ozcollide::Sphere>::grow
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$Vector@VSphere@ozcollide@@@ozcollide@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$Vector@VSphere@ozcollide@@@ozcollide@@QBEHXZ PROC ; ozcollide::Vector<ozcollide::Sphere>::size, COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 		return size_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 162  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$Vector@VSphere@ozcollide@@@ozcollide@@QBEHXZ ENDP ; ozcollide::Vector<ozcollide::Sphere>::size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$Vector@VSphere@ozcollide@@@ozcollide@@QBEAAVSphere@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$Vector@VSphere@ozcollide@@@ozcollide@@QBEAAVSphere@1@H@Z PROC ; ozcollide::Vector<ozcollide::Sphere>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 		return mem_[index];

	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]

; 200  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$Vector@VSphere@ozcollide@@@ozcollide@@QBEAAVSphere@1@H@Z ENDP ; ozcollide::Vector<ozcollide::Sphere>::operator[]
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAE@XZ PROC ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>, COMDAT
; _this$ = ecx

; 35   : 	Vector()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 	{
; 37   : 		mem_ = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 38   : 		size_ = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 39   : 		capacity_ = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAE@XZ ENDP ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAE@XZ PROC ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::~Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>, COMDAT
; _this$ = ecx

; 43   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 		clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXXZ ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::clear

; 45   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAE@XZ ENDP ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::~Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>
_TEXT	ENDS
PUBLIC	?resize@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::resize
; Function compile flags: /Odtp
;	COMDAT ?add@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXABQAVWorkingItem@AABBTreeSphere_Builder@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__t$ = 8						; size = 4
?add@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXABQAVWorkingItem@AABBTreeSphere_Builder@2@@Z PROC ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::add, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 		if (size_ < capacity_) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN1@add@2

; 50   : 			mem_[size_] = _t;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR __t$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 51   : 			size_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 52   : 			return;

	jmp	SHORT $LN2@add@2
$LN1@add@2:

; 53   : 		}
; 54   : 
; 55   : 		resize(size_ + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::resize

; 56   : 		mem_[size_ - 1] = _t;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __t$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax*4-4], ecx
$LN2@add@2:

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?add@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXABQAVWorkingItem@AABBTreeSphere_Builder@2@@Z ENDP ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::add
_TEXT	ENDS
EXTRN	__imp__free:PROC
; Function compile flags: /Odtp
;	COMDAT ?clear@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXXZ PROC ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::clear, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 		if (mem_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@clear

; 153  : 			free(mem_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
$LN1@clear:

; 154  : 		mem_ = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 155  : 		size_ = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 156  : 		capacity_ = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 157  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXXZ ENDP ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::clear
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEHXZ PROC ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::size, COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 		return size_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 162  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEHXZ ENDP ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreeSphere_Builder@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreeSphere_Builder@1@H@Z PROC ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 		return mem_[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 200  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreeSphere_Builder@1@H@Z ENDP ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::operator[]
_TEXT	ENDS
PUBLIC	?reserve@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Sphere>::reserve
; Function compile flags: /Odtp
;	COMDAT ?resize@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__size$ = 8						; size = 4
?resize@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z PROC ; ozcollide::Vector<ozcollide::Sphere>::resize, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		if (_size > capacity_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __size$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $LN1@resize

; 124  : 			reserve(_size * 2);

	mov	edx, DWORD PTR __size$[ebp]
	shl	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Sphere>::reserve
$LN1@resize:

; 125  : 		size_ = _size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __size$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 126  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z ENDP ; ozcollide::Vector<ozcollide::Sphere>::resize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?clear@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXXZ PROC ; ozcollide::Vector<ozcollide::Sphere>::clear, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 		if (mem_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@clear@2

; 153  : 			free(mem_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
$LN1@clear@2:

; 154  : 		mem_ = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 155  : 		size_ = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 156  : 		capacity_ = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 157  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXXZ ENDP ; ozcollide::Vector<ozcollide::Sphere>::clear
_TEXT	ENDS
PUBLIC	?reserve@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::reserve
; Function compile flags: /Odtp
;	COMDAT ?resize@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__size$ = 8						; size = 4
?resize@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXH@Z PROC ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::resize, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		if (_size > capacity_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __size$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $LN1@resize@2

; 124  : 			reserve(_size * 2);

	mov	edx, DWORD PTR __size$[ebp]
	shl	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::reserve
$LN1@resize@2:

; 125  : 		size_ = _size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __size$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 126  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXH@Z ENDP ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::resize
_TEXT	ENDS
EXTRN	_memcpy:PROC
EXTRN	__imp__malloc:PROC
; Function compile flags: /Odtp
;	COMDAT ?reserve@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
_toCopy$ = -8						; size = 4
_old$ = -4						; size = 4
__capacity$ = 8						; size = 4
?reserve@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z PROC ; ozcollide::Vector<ozcollide::Sphere>::reserve, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 130  : 		T *old = mem_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old$[ebp], ecx

; 131  : 		mem_ = (T*) malloc(_capacity * sizeof(T));

	mov	edx, DWORD PTR __capacity$[ebp]
	shl	edx, 4
	push	edx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 132  : 		int toCopy = _capacity > capacity_ ? capacity_ : _capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __capacity$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jle	SHORT $LN4@reserve
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN5@reserve
$LN4@reserve:
	mov	eax, DWORD PTR __capacity$[ebp]
	mov	DWORD PTR tv70[ebp], eax
$LN5@reserve:
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _toCopy$[ebp], ecx

; 133  : 		memcpy(mem_, old, toCopy * sizeof(T));

	mov	edx, DWORD PTR _toCopy$[ebp]
	shl	edx, 4
	push	edx
	mov	eax, DWORD PTR _old$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 134  : 		if (old)

	cmp	DWORD PTR _old$[ebp], 0
	je	SHORT $LN1@reserve

; 135  : 			free(old);

	mov	eax, DWORD PTR _old$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN1@reserve:

; 136  : 		capacity_ = _capacity;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __capacity$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 137  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$Vector@VSphere@ozcollide@@@ozcollide@@QAEXH@Z ENDP ; ozcollide::Vector<ozcollide::Sphere>::reserve
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?reserve@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXH@Z
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
_toCopy$ = -8						; size = 4
_old$ = -4						; size = 4
__capacity$ = 8						; size = 4
?reserve@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXH@Z PROC ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::reserve, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 130  : 		T *old = mem_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old$[ebp], ecx

; 131  : 		mem_ = (T*) malloc(_capacity * sizeof(T));

	mov	edx, DWORD PTR __capacity$[ebp]
	shl	edx, 2
	push	edx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 132  : 		int toCopy = _capacity > capacity_ ? capacity_ : _capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __capacity$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jle	SHORT $LN4@reserve@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN5@reserve@2
$LN4@reserve@2:
	mov	eax, DWORD PTR __capacity$[ebp]
	mov	DWORD PTR tv70[ebp], eax
$LN5@reserve@2:
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _toCopy$[ebp], ecx

; 133  : 		memcpy(mem_, old, toCopy * sizeof(T));

	mov	edx, DWORD PTR _toCopy$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _old$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 134  : 		if (old)

	cmp	DWORD PTR _old$[ebp], 0
	je	SHORT $LN1@reserve@2

; 135  : 			free(old);

	mov	eax, DWORD PTR _old$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN1@reserve@2:

; 136  : 		capacity_ = _capacity;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __capacity$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 137  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$Vector@PAVWorkingItem@AABBTreeSphere_Builder@ozcollide@@@ozcollide@@QAEXH@Z ENDP ; ozcollide::Vector<ozcollide::AABBTreeSphere_Builder::WorkingItem *>::reserve
_TEXT	ENDS
END
