; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\OgreMain\OgreMD5.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG5713
	ORG $+4
_PADDING DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_DATA	ENDS
CONST	SEGMENT
$SG5713	DB	'bad allocation', 00H
CONST	ENDS
PUBLIC	?MD5Init@@YAXPAUMD5_CTX@@@Z			; MD5Init
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremd5.cpp
_TEXT	SEGMENT
_context$ = 8						; size = 4
?MD5Init@@YAXPAUMD5_CTX@@@Z PROC			; MD5Init

; 80   : {

	push	ebp
	mov	ebp, esp

; 81   :   context->count[0] = context->count[1] = 0;

	mov	eax, DWORD PTR _context$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR _context$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 82   :   /* Load magic initialization constants.
; 83   : */
; 84   :   context->state[0] = 0x67452301;

	mov	edx, DWORD PTR _context$[ebp]
	mov	DWORD PTR [edx], 1732584193		; 67452301H

; 85   :   context->state[1] = 0xefcdab89;

	mov	eax, DWORD PTR _context$[ebp]
	mov	DWORD PTR [eax+4], -271733879		; efcdab89H

; 86   :   context->state[2] = 0x98badcfe;

	mov	ecx, DWORD PTR _context$[ebp]
	mov	DWORD PTR [ecx+8], -1732584194		; 98badcfeH

; 87   :   context->state[3] = 0x10325476;

	mov	edx, DWORD PTR _context$[ebp]
	mov	DWORD PTR [edx+12], 271733878		; 10325476H

; 88   : }

	pop	ebp
	ret	0
?MD5Init@@YAXPAUMD5_CTX@@@Z ENDP			; MD5Init
_TEXT	ENDS
PUBLIC	?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z		; MD5Update
; Function compile flags: /Odtp
_TEXT	SEGMENT
_partLen$ = -12						; size = 4
_index$ = -8						; size = 4
_i$ = -4						; size = 4
_context$ = 8						; size = 4
_input$ = 12						; size = 4
_inputLen$ = 16						; size = 4
?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z PROC			; MD5Update

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 97   :   unsigned int i, index, partLen;
; 98   : 
; 99   :   /* Compute number of bytes mod 64 */
; 100  :   index = (unsigned int)((context->count[0] >> 3) & 0x3F);

	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 3
	and	ecx, 63					; 0000003fH
	mov	DWORD PTR _index$[ebp], ecx

; 101  : 
; 102  :   /* Update number of bits */
; 103  :   if ((context->count[0] += ((unsigned long int)inputLen << 3))
; 104  :    < ((unsigned long int)inputLen << 3))

	mov	edx, DWORD PTR _context$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _inputLen$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _context$[ebp]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR _inputLen$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR _context$[ebp]
	cmp	DWORD PTR [edx+16], ecx
	jae	SHORT $LN6@MD5Update

; 105  :  context->count[1]++;

	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _context$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN6@MD5Update:

; 106  :   context->count[1] += ((unsigned long int)inputLen >> 29);

	mov	eax, DWORD PTR _inputLen$[ebp]
	shr	eax, 29					; 0000001dH
	mov	ecx, DWORD PTR _context$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _context$[ebp]
	mov	DWORD PTR [edx+20], eax

; 107  : 
; 108  :   partLen = 64 - index;

	mov	eax, 64					; 00000040H
	sub	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _partLen$[ebp], eax

; 109  : 
; 110  :   /* Transform as many times as possible.
; 111  : */
; 112  :   if (inputLen >= partLen) {

	mov	ecx, DWORD PTR _inputLen$[ebp]
	cmp	ecx, DWORD PTR _partLen$[ebp]
	jb	SHORT $LN5@MD5Update

; 113  :  MD5_memcpy
; 114  :    ((unsigned char *)&context->buffer[index], (unsigned char *)input, partLen);

	mov	edx, DWORD PTR _partLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _context$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24]
	push	eax
	call	?MD5_memcpy@@YAXPAE0I@Z			; MD5_memcpy
	add	esp, 12					; 0000000cH

; 115  :  MD5Transform (context->state, context->buffer);

	mov	ecx, DWORD PTR _context$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	call	?MD5Transform@@YAXQAKQAE@Z		; MD5Transform
	add	esp, 8

; 116  : 
; 117  :  for (i = partLen; i + 63 < inputLen; i += 64)

	mov	eax, DWORD PTR _partLen$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN4@MD5Update
$LN3@MD5Update:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _i$[ebp], ecx
$LN4@MD5Update:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 63					; 0000003fH
	cmp	edx, DWORD PTR _inputLen$[ebp]
	jae	SHORT $LN2@MD5Update

; 118  :    MD5Transform (context->state, &input[i]);

	mov	eax, DWORD PTR _input$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	call	?MD5Transform@@YAXQAKQAE@Z		; MD5Transform
	add	esp, 8
	jmp	SHORT $LN3@MD5Update
$LN2@MD5Update:

; 119  : 
; 120  :  index = 0;

	mov	DWORD PTR _index$[ebp], 0

; 121  :   }
; 122  :   else

	jmp	SHORT $LN1@MD5Update
$LN5@MD5Update:

; 123  :  i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN1@MD5Update:

; 124  : 
; 125  :   /* Buffer remaining input */
; 126  :   MD5_memcpy
; 127  :  ((unsigned char *)&context->buffer[index], (unsigned char *)&input[i],
; 128  :   inputLen-i);

	mov	edx, DWORD PTR _inputLen$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _input$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _context$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24]
	push	eax
	call	?MD5_memcpy@@YAXPAE0I@Z			; MD5_memcpy
	add	esp, 12					; 0000000cH

; 129  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z ENDP			; MD5Update
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?MD5Final@@YAXQAEPAUMD5_CTX@@@Z			; MD5Final
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = -24						; size = 4
_padLen$ = -20						; size = 4
_bits$ = -16						; size = 8
__$ArrayPad$ = -8					; size = 4
_index$ = -4						; size = 4
_digest$ = 8						; size = 4
_context$ = 12						; size = 4
?MD5Final@@YAXQAEPAUMD5_CTX@@@Z PROC			; MD5Final

; 136  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 137  :   unsigned char bits[8];
; 138  :   unsigned int index, padLen;
; 139  : 
; 140  :   /* Save number of bits */
; 141  :   Encode (bits, context->count, 8);

	push	8
	mov	eax, DWORD PTR _context$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _bits$[ebp]
	push	ecx
	call	?Encode@@YAXPAEPAKI@Z			; Encode
	add	esp, 12					; 0000000cH

; 142  : 
; 143  :   /* Pad out to 56 mod 64.
; 144  : */
; 145  :   index = (unsigned int)((context->count[0] >> 3) & 0x3f);

	mov	edx, DWORD PTR _context$[ebp]
	mov	eax, DWORD PTR [edx+16]
	shr	eax, 3
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _index$[ebp], eax

; 146  :   padLen = (index < 56) ? (56 - index) : (120 - index);

	cmp	DWORD PTR _index$[ebp], 56		; 00000038H
	jae	SHORT $LN3@MD5Final
	mov	ecx, 56					; 00000038H
	sub	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN4@MD5Final
$LN3@MD5Final:
	mov	edx, 120				; 00000078H
	sub	edx, DWORD PTR _index$[ebp]
	mov	DWORD PTR tv75[ebp], edx
$LN4@MD5Final:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR _padLen$[ebp], eax

; 147  :   MD5Update (context, PADDING, padLen);

	mov	ecx, DWORD PTR _padLen$[ebp]
	push	ecx
	push	OFFSET _PADDING
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	call	?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z	; MD5Update
	add	esp, 12					; 0000000cH

; 148  : 
; 149  :   /* Append length (before padding) */
; 150  :   MD5Update (context, bits, 8);

	push	8
	lea	eax, DWORD PTR _bits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	call	?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z	; MD5Update
	add	esp, 12					; 0000000cH

; 151  : 
; 152  :   /* Store state in digest */
; 153  :   Encode (digest, context->state, 16);

	push	16					; 00000010H
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	mov	eax, DWORD PTR _digest$[ebp]
	push	eax
	call	?Encode@@YAXPAEPAKI@Z			; Encode
	add	esp, 12					; 0000000cH

; 154  : 
; 155  :   /* Zeroize sensitive information.
; 156  : */
; 157  :   MD5_memset ((unsigned char *)context, 0, sizeof (*context));

	push	88					; 00000058H
	push	0
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	call	?MD5_memset@@YAXPAEHI@Z			; MD5_memset
	add	esp, 12					; 0000000cH

; 158  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?MD5Final@@YAXQAEPAUMD5_CTX@@@Z ENDP			; MD5Final
; Function compile flags: /Odtp
_c$ = -80						; size = 4
_d$ = -76						; size = 4
_b$ = -72						; size = 4
_a$ = -68						; size = 4
_x$ = -64						; size = 64
_state$ = 8						; size = 4
_block$ = 12						; size = 4
?MD5Transform@@YAXQAKQAE@Z PROC				; MD5Transform

; 163  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H

; 164  :   unsigned long int a = state[0], b = state[1], c = state[2], d = state[3], x[16];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _d$[ebp], ecx

; 165  : 
; 166  :   Decode (x, block, 64);

	push	64					; 00000040H
	mov	edx, DWORD PTR _block$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	call	?Decode@@YAXPAKPAEI@Z			; Decode
	add	esp, 12					; 0000000cH

; 167  : 
; 168  :   /* Round 1 */
; 169  :   FF (a, b, c, d, x[ 0], S11, 0xd76aa478); /* 1 */

	mov	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	not	edx
	and	edx, DWORD PTR _d$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [eax+ecx-680876936]
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 7
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 25					; 00000019H
	or	edx, eax
	mov	DWORD PTR _a$[ebp], edx
	mov	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], ecx

; 170  :   FF (d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */

	mov	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	and	eax, DWORD PTR _c$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _x$[ebp+4]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+edx-389564586]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 20					; 00000014H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 171  :   FF (c, d, a, b, x[ 2], S13, 0x242070db); /* 3 */

	mov	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	and	ecx, DWORD PTR _b$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _x$[ebp+8]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax+606105819]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 17					; 00000011H
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 15					; 0000000fH
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 172  :   FF (b, c, d, a, x[ 3], S14, 0xc1bdceee); /* 4 */

	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	not	edx
	and	edx, DWORD PTR _a$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _x$[ebp+12]
	mov	eax, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [eax+ecx-1044525330]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 22					; 00000016H
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 10					; 0000000aH
	or	edx, eax
	mov	DWORD PTR _b$[ebp], edx
	mov	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], ecx

; 173  :   FF (a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */

	mov	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	and	eax, DWORD PTR _d$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _x$[ebp+16]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+edx-176418897]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 25					; 00000019H
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 174  :   FF (d, a, b, c, x[ 5], S12, 0x4787c62a); /* 6 */

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	not	ecx
	and	ecx, DWORD PTR _c$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _x$[ebp+20]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax+1200080426]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 20					; 00000014H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 175  :   FF (c, d, a, b, x[ 6], S13, 0xa8304613); /* 7 */

	mov	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	not	edx
	and	edx, DWORD PTR _b$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _x$[ebp+24]
	mov	eax, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [eax+ecx-1473231341]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 17					; 00000011H
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 15					; 0000000fH
	or	edx, eax
	mov	DWORD PTR _c$[ebp], edx
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx

; 176  :   FF (b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */

	mov	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	and	eax, DWORD PTR _a$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _x$[ebp+28]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+edx-45705983]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 22					; 00000016H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 10					; 0000000aH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 177  :   FF (a, b, c, d, x[ 8], S11, 0x698098d8); /* 9 */

	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	not	ecx
	and	ecx, DWORD PTR _d$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _x$[ebp+32]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax+1770035416]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 25					; 00000019H
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 178  :   FF (d, a, b, c, x[ 9], S12, 0x8b44f7af); /* 10 */

	mov	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	not	edx
	and	edx, DWORD PTR _c$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _x$[ebp+36]
	mov	eax, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [eax+ecx-1958414417]
	mov	DWORD PTR _d$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _d$[ebp]
	shr	eax, 20					; 00000014H
	or	edx, eax
	mov	DWORD PTR _d$[ebp], edx
	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], ecx

; 179  :   FF (c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */

	mov	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	and	eax, DWORD PTR _b$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _x$[ebp+40]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+edx-42063]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 15					; 0000000fH
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx

; 180  :   FF (b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */

	mov	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	not	ecx
	and	ecx, DWORD PTR _a$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _x$[ebp+44]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax-1990404162]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 22					; 00000016H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 10					; 0000000aH
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax

; 181  :   FF (a, b, c, d, x[12], S11, 0x6b901122); /* 13 */

	mov	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	not	edx
	and	edx, DWORD PTR _d$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _x$[ebp+48]
	mov	eax, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [eax+ecx+1804603682]
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 7
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 25					; 00000019H
	or	edx, eax
	mov	DWORD PTR _a$[ebp], edx
	mov	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], ecx

; 182  :   FF (d, a, b, c, x[13], S12, 0xfd987193); /* 14 */

	mov	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	and	eax, DWORD PTR _c$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _x$[ebp+52]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+edx-40341101]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 20					; 00000014H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 183  :   FF (c, d, a, b, x[14], S13, 0xa679438e); /* 15 */

	mov	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	and	ecx, DWORD PTR _b$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _x$[ebp+56]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax-1502002290]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 17					; 00000011H
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 15					; 0000000fH
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 184  :   FF (b, c, d, a, x[15], S14, 0x49b40821); /* 16 */

	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	not	edx
	and	edx, DWORD PTR _a$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _x$[ebp+60]
	mov	eax, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [eax+ecx+1236535329]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 22					; 00000016H
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 10					; 0000000aH
	or	edx, eax
	mov	DWORD PTR _b$[ebp], edx
	mov	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], ecx

; 185  : 
; 186  :  /* Round 2 */
; 187  :   GG (a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */

	mov	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	and	eax, DWORD PTR _c$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _x$[ebp+4]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+edx-165796510]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 27					; 0000001bH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 188  :   GG (d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	not	ecx
	and	ecx, DWORD PTR _b$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _x$[ebp+24]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax-1069501632]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 9
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 23					; 00000017H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 189  :   GG (c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */

	mov	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	not	edx
	and	edx, DWORD PTR _a$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _x$[ebp+44]
	mov	eax, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [eax+ecx+643717713]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 14					; 0000000eH
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 18					; 00000012H
	or	edx, eax
	mov	DWORD PTR _c$[ebp], edx
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx

; 190  :   GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20 */

	mov	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	and	eax, DWORD PTR _d$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+edx-373897302]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 12					; 0000000cH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 191  :   GG (a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */

	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	and	ecx, DWORD PTR _c$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _x$[ebp+20]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax-701558691]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 27					; 0000001bH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 192  :   GG (d, a, b, c, x[10], S22,  0x2441453); /* 22 */

	mov	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	not	edx
	and	edx, DWORD PTR _b$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _x$[ebp+40]
	mov	eax, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [eax+ecx+38016083]
	mov	DWORD PTR _d$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _d$[ebp]
	shr	eax, 23					; 00000017H
	or	edx, eax
	mov	DWORD PTR _d$[ebp], edx
	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], ecx

; 193  :   GG (c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */

	mov	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	and	eax, DWORD PTR _a$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _x$[ebp+60]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+edx-660478335]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 14					; 0000000eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 18					; 00000012H
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx

; 194  :   GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */

	mov	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	not	ecx
	and	ecx, DWORD PTR _d$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _x$[ebp+16]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax-405537848]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 12					; 0000000cH
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax

; 195  :   GG (a, b, c, d, x[ 9], S21, 0x21e1cde6); /* 25 */

	mov	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	not	edx
	and	edx, DWORD PTR _c$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _x$[ebp+36]
	mov	eax, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [eax+ecx+568446438]
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 27					; 0000001bH
	or	edx, eax
	mov	DWORD PTR _a$[ebp], edx
	mov	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], ecx

; 196  :   GG (d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */

	mov	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	and	eax, DWORD PTR _b$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _x$[ebp+56]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+edx-1019803690]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 23					; 00000017H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 197  :   GG (c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */

	mov	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	not	ecx
	and	ecx, DWORD PTR _a$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _x$[ebp+12]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax-187363961]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 14					; 0000000eH
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 18					; 00000012H
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 198  :   GG (b, c, d, a, x[ 8], S24, 0x455a14ed); /* 28 */

	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	not	edx
	and	edx, DWORD PTR _d$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _x$[ebp+32]
	mov	eax, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [eax+ecx+1163531501]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 20					; 00000014H
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 12					; 0000000cH
	or	edx, eax
	mov	DWORD PTR _b$[ebp], edx
	mov	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], ecx

; 199  :   GG (a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */

	mov	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	and	eax, DWORD PTR _c$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _x$[ebp+52]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+edx-1444681467]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 27					; 0000001bH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 200  :   GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	not	ecx
	and	ecx, DWORD PTR _b$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _x$[ebp+8]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax-51403784]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 9
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 23					; 00000017H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 201  :   GG (c, d, a, b, x[ 7], S23, 0x676f02d9); /* 31 */

	mov	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	not	edx
	and	edx, DWORD PTR _a$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _x$[ebp+28]
	mov	eax, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [eax+ecx+1735328473]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 14					; 0000000eH
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 18					; 00000012H
	or	edx, eax
	mov	DWORD PTR _c$[ebp], edx
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx

; 202  :   GG (b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */

	mov	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	and	eax, DWORD PTR _d$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _x$[ebp+48]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+edx-1926607734]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 12					; 0000000cH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 203  : 
; 204  :   /* Round 3 */
; 205  :   HH (a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33 */

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _x$[ebp+20]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax-378558]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 28					; 0000001cH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 206  :   HH (d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _x$[ebp+32]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+eax-2022574463]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 21					; 00000015H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 207  :   HH (c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _x$[ebp+44]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1839030562]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 16					; 00000010H
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx

; 208  :   HH (b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _x$[ebp+56]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax-35309556]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 23					; 00000017H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 9
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 209  :   HH (a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _x$[ebp+4]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1530992060]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 28					; 0000001cH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 210  :   HH (d, a, b, c, x[ 4], S32, 0x4bdecfa9); /* 38 */

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _x$[ebp+16]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1272893353]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 21					; 00000015H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 211  :   HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60); /* 39 */

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _x$[ebp+28]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax-155497632]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 16					; 00000010H
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx

; 212  :   HH (b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _x$[ebp+40]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1094730640]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 23					; 00000017H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 9
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 213  :   HH (a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _x$[ebp+52]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax+681279174]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 28					; 0000001cH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 214  :   HH (d, a, b, c, x[ 0], S32, 0xeaa127fa); /* 42 */

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+eax-358537222]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 21					; 00000015H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 215  :   HH (c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _x$[ebp+12]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax-722521979]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 16					; 00000010H
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx

; 216  :   HH (b, c, d, a, x[ 6], S34,  0x4881d05); /* 44 */

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _x$[ebp+24]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax+76029189]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 23					; 00000017H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 9
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 217  :   HH (a, b, c, d, x[ 9], S31, 0xd9d4d039); /* 45 */

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _x$[ebp+36]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax-640364487]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 28					; 0000001cH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 218  :   HH (d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _x$[ebp+48]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+eax-421815835]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 21					; 00000015H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 219  :   HH (c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _x$[ebp+60]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax+530742520]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 16					; 00000010H
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx

; 220  :   HH (b, c, d, a, x[ 2], S34, 0xc4ac5665); /* 48 */

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _x$[ebp+8]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax-995338651]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 23					; 00000017H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 9
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 221  : 
; 222  :   /* Round 4 */
; 223  :   II (a, b, c, d, x[ 0], S41, 0xf4292244); /* 49 */

	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	or	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax-198630844]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 26					; 0000001aH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 224  :   II (d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */

	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	or	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _x$[ebp+28]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1126891415]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 22					; 00000016H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 225  :   II (c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */

	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	or	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _x$[ebp+56]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1416354905]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 17					; 00000011H
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx

; 226  :   II (b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52 */

	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	or	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _x$[ebp+20]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax-57434055]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 21					; 00000015H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 11					; 0000000bH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 227  :   II (a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */

	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	or	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _x$[ebp+48]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1700485571]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 26					; 0000001aH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 228  :   II (d, a, b, c, x[ 3], S42, 0x8f0ccc92); /* 54 */

	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	or	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _x$[ebp+12]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1894986606]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 22					; 00000016H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 229  :   II (c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */

	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	or	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _x$[ebp+40]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1051523]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 17					; 00000011H
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx

; 230  :   II (b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */

	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	or	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _x$[ebp+4]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax-2054922799]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 21					; 00000015H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 11					; 0000000bH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 231  :   II (a, b, c, d, x[ 8], S41, 0x6fa87e4f); /* 57 */

	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	or	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _x$[ebp+32]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1873313359]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 26					; 0000001aH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 232  :   II (d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */

	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	or	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _x$[ebp+60]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+eax-30611744]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 22					; 00000016H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 233  :   II (c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */

	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	or	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _x$[ebp+24]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1560198380]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 17					; 00000011H
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx

; 234  :   II (b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */

	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	or	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _x$[ebp+52]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1309151649]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 21					; 00000015H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 11					; 0000000bH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 235  :   II (a, b, c, d, x[ 4], S41, 0xf7537e82); /* 61 */

	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	or	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _x$[ebp+16]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax-145523070]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 26					; 0000001aH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 236  :   II (d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */

	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	or	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _x$[ebp+44]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1120210379]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 22					; 00000016H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 237  :   II (c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */

	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	or	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _x$[ebp+8]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax+718787259]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 17					; 00000011H
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx

; 238  :   II (b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */

	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	or	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _x$[ebp+36]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax-343485551]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 21					; 00000015H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 11					; 0000000bH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 239  : 
; 240  :   state[0] += a;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx

; 241  :   state[1] += b;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 242  :   state[2] += c;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 243  :   state[3] += d;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 244  : 
; 245  :   /* Zeroize sensitive information.
; 246  : */
; 247  :   MD5_memset ((unsigned char *)x, 0, sizeof (x));

	push	64					; 00000040H
	push	0
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	call	?MD5_memset@@YAXPAEHI@Z			; MD5_memset
	add	esp, 12					; 0000000cH

; 248  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?MD5Transform@@YAXQAKQAE@Z ENDP				; MD5Transform
; Function compile flags: /Odtp
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_output$ = 8						; size = 4
_input$ = 12						; size = 4
_len$ = 16						; size = 4
?Encode@@YAXPAEPAKI@Z PROC				; Encode

; 254  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 255  :   unsigned int i, j;
; 256  : 
; 257  :   for (i = 0, j = 0; j < len; i++, j += 4) {

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@Encode
$LN2@Encode:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 4
	mov	DWORD PTR _j$[ebp], ecx
$LN3@Encode:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jae	SHORT $LN4@Encode

; 258  :  output[j] = (unsigned char)(input[i] & 0xff);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _output$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	BYTE PTR [eax], dl

; 259  :  output[j+1] = (unsigned char)((input[i] >> 8) & 0xff);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _output$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	BYTE PTR [ecx+1], al

; 260  :  output[j+2] = (unsigned char)((input[i] >> 16) & 0xff);

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _output$[ebp]
	add	edx, DWORD PTR _j$[ebp]
	mov	BYTE PTR [edx+2], cl

; 261  :  output[j+3] = (unsigned char)((input[i] >> 24) & 0xff);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _output$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	BYTE PTR [eax+3], dl
	jmp	$LN2@Encode
$LN4@Encode:

; 262  :   }
; 263  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Encode@@YAXPAEPAKI@Z ENDP				; Encode
; Function compile flags: /Odtp
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_output$ = 8						; size = 4
_input$ = 12						; size = 4
_len$ = 16						; size = 4
?Decode@@YAXPAKPAEI@Z PROC				; Decode

; 269  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 270  :   unsigned int i, j;
; 271  : 
; 272  :   for (i = 0, j = 0; j < len; i++, j += 4)

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@Decode
$LN2@Decode:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 4
	mov	DWORD PTR _j$[ebp], ecx
$LN3@Decode:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jae	SHORT $LN4@Decode

; 273  :  output[i] = ((unsigned long int)input[j]) | (((unsigned long int)input[j+1]) << 8) |
; 274  :    (((unsigned long int)input[j+2]) << 16) | (((unsigned long int)input[j+3]) << 24);

	mov	eax, DWORD PTR _input$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _input$[ebp]
	add	edx, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _input$[ebp]
	add	edx, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _input$[ebp]
	add	edx, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _output$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN2@Decode
$LN4@Decode:

; 275  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Decode@@YAXPAKPAEI@Z ENDP				; Decode
; Function compile flags: /Odtp
_i$ = -4						; size = 4
_output$ = 8						; size = 4
_input$ = 12						; size = 4
_len$ = 16						; size = 4
?MD5_memcpy@@YAXPAE0I@Z PROC				; MD5_memcpy

; 281  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 282  :   unsigned int i;
; 283  : 
; 284  :   for (i = 0; i < len; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MD5_memcpy
$LN2@MD5_memcpy:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@MD5_memcpy:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jae	SHORT $LN4@MD5_memcpy

; 285  :  output[i] = input[i];

	mov	edx, DWORD PTR _output$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _input$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	jmp	SHORT $LN2@MD5_memcpy
$LN4@MD5_memcpy:

; 286  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?MD5_memcpy@@YAXPAE0I@Z ENDP				; MD5_memcpy
; Function compile flags: /Odtp
_i$ = -4						; size = 4
_output$ = 8						; size = 4
_value$ = 12						; size = 4
_len$ = 16						; size = 4
?MD5_memset@@YAXPAEHI@Z PROC				; MD5_memset

; 291  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 292  :   unsigned int i;
; 293  : 
; 294  :   for (i = 0; i < len; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MD5_memset
$LN2@MD5_memset:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@MD5_memset:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jae	SHORT $LN4@MD5_memset

; 295  :  ((char *)output)[i] = (char)value;

	mov	edx, DWORD PTR _output$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR _value$[ebp]
	mov	BYTE PTR [edx], al
	jmp	SHORT $LN2@MD5_memset
$LN4@MD5_memset:

; 296  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?MD5_memset@@YAXPAEHI@Z ENDP				; MD5_memset
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Md5Calc@Ogre@@YAXQADPBDI@Z			; Ogre::Md5Calc
; Function compile flags: /Odtp
_TEXT	SEGMENT
_md5ctx$ = -96						; size = 88
__$ArrayPad$ = -4					; size = 4
_output$ = 8						; size = 4
_input$ = 12						; size = 4
_length$ = 16						; size = 4
?Md5Calc@Ogre@@YAXQADPBDI@Z PROC			; Ogre::Md5Calc

; 302  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 303  : 		MD5_CTX md5ctx;
; 304  : 		MD5Init(&md5ctx);

	lea	eax, DWORD PTR _md5ctx$[ebp]
	push	eax
	call	?MD5Init@@YAXPAUMD5_CTX@@@Z		; MD5Init
	add	esp, 4

; 305  : 		MD5Update(&md5ctx, (unsigned char *)input, length);

	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	lea	eax, DWORD PTR _md5ctx$[ebp]
	push	eax
	call	?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z	; MD5Update
	add	esp, 12					; 0000000cH

; 306  : 		MD5Final((unsigned char *)output, &md5ctx);

	lea	ecx, DWORD PTR _md5ctx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	?MD5Final@@YAXQAEPAUMD5_CTX@@@Z		; MD5Final
	add	esp, 8

; 307  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Md5Calc@Ogre@@YAXQADPBDI@Z ENDP			; Ogre::Md5Calc
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Md5Verify@Ogre@@YA_NQBDPBDI@Z			; Ogre::Md5Verify
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_md5$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 4
_input$ = 12						; size = 4
_length$ = 16						; size = 4
?Md5Verify@Ogre@@YA_NQBDPBDI@Z PROC			; Ogre::Md5Verify

; 310  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 311  : 		char md5[16];
; 312  : 		Md5Calc(md5, input, length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	lea	edx, DWORD PTR _md5$[ebp]
	push	edx
	call	?Md5Calc@Ogre@@YAXQADPBDI@Z		; Ogre::Md5Calc
	add	esp, 12					; 0000000cH

; 313  : 		return memcmp(md5, target, 16) == 0;

	push	16					; 00000010H
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR _md5$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 314  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Md5Verify@Ogre@@YA_NQBDPBDI@Z ENDP			; Ogre::Md5Verify
_TEXT	ENDS
END
