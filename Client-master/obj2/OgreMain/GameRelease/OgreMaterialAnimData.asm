; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\OgreMain\OgreMaterialAnimData.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG5716
_DATA	ENDS
CONST	SEGMENT
$SG5716	DB	'bad allocation', 00H
	ORG $+1
$SG57494 DB	'MaterialAnimData', 00H
CONST	ENDS
PUBLIC	??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDelegation::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDelegation::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDelegation::operator=
_TEXT	ENDS
PUBLIC	?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ	; Ogre::RuntimeClass::getBaseClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebaseobject.h
;	COMDAT ?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ PROC	; Ogre::RuntimeClass::getBaseClass, COMDAT
; _this$ = ecx

; 20   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 21   : 			return m_pBaseClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 22   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ ENDP	; Ogre::RuntimeClass::getBaseClass
_TEXT	ENDS
PUBLIC	?getClassName@RuntimeClass@Ogre@@QBEPBDXZ	; Ogre::RuntimeClass::getClassName
; Function compile flags: /Odtp
;	COMDAT ?getClassName@RuntimeClass@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ PROC		; Ogre::RuntimeClass::getClassName, COMDAT
; _this$ = ecx

; 25   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 26   : 			return m_pClassName; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ ENDP		; Ogre::RuntimeClass::getClassName
_TEXT	ENDS
PUBLIC	?getVersion@RuntimeClass@Ogre@@QBEHXZ		; Ogre::RuntimeClass::getVersion
; Function compile flags: /Odtp
;	COMDAT ?getVersion@RuntimeClass@Ogre@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVersion@RuntimeClass@Ogre@@QBEHXZ PROC		; Ogre::RuntimeClass::getVersion, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Version;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getVersion@RuntimeClass@Ogre@@QBEHXZ ENDP		; Ogre::RuntimeClass::getVersion
_TEXT	ENDS
PUBLIC	?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ; Ogre::RuntimeClass::newObject
; Function compile flags: /Odtp
;	COMDAT ?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ PROC ; Ogre::RuntimeClass::newObject, COMDAT
; _this$ = ecx

; 35   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 			return (*m_pNewFunc)();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx

; 37   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ENDP ; Ogre::RuntimeClass::newObject
_TEXT	ENDS
PUBLIC	??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::RuntimeClass::operator=
; Function compile flags: /Odtp
;	COMDAT ??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::RuntimeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::RuntimeClass::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::BaseObject::getRTTI
EXTRN	?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::BaseObject::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::BaseObject::getRTTI, COMDAT
; _this$ = ecx

; 56   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 			return &m_RTTI;

	mov	eax, OFFSET ?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B ; Ogre::BaseObject::m_RTTI

; 58   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::BaseObject::getRTTI
_TEXT	ENDS
PUBLIC	?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ; Ogre::BaseObject::isExactKindOf
; Function compile flags: /Odtp
;	COMDAT ?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_prtti$ = 8						; size = 4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z PROC ; Ogre::BaseObject::isExactKindOf, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			return (getRTTI() == prtti);

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	xor	ecx, ecx
	cmp	eax, DWORD PTR _prtti$[ebp]
	sete	cl
	mov	al, cl

; 63   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ENDP ; Ogre::BaseObject::isExactKindOf
_TEXT	ENDS
PUBLIC	?release@BaseObject@Ogre@@UAEXXZ		; Ogre::BaseObject::release
; Function compile flags: /Odtp
;	COMDAT ?release@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?release@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::release, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			m_RefCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 70   : 			if(m_RefCount <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN2@release

; 71   : 			{
; 72   : 				deleteThis();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
$LN2@release:

; 73   : 			}
; 74   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?release@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::release
_TEXT	ENDS
PUBLIC	?addRef@BaseObject@Ogre@@UAEXXZ			; Ogre::BaseObject::addRef
; Function compile flags: /Odtp
;	COMDAT ?addRef@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?addRef@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::addRef, COMDAT
; _this$ = ecx

; 77   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 			m_RefCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 79   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?addRef@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::addRef
_TEXT	ENDS
PUBLIC	?getRefCount@BaseObject@Ogre@@UAEHXZ		; Ogre::BaseObject::getRefCount
; Function compile flags: /Odtp
;	COMDAT ?getRefCount@BaseObject@Ogre@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRefCount@BaseObject@Ogre@@UAEHXZ PROC		; Ogre::BaseObject::getRefCount, COMDAT
; _this$ = ecx

; 82   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 			return m_RefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 84   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRefCount@BaseObject@Ogre@@UAEHXZ ENDP		; Ogre::BaseObject::getRefCount
_TEXT	ENDS
PUBLIC	?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::BaseObject::_serialize
; Function compile flags: /Odtp
;	COMDAT ?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z PROC	; Ogre::BaseObject::_serialize, COMDAT
; _this$ = ecx

; 87   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ENDP	; Ogre::BaseObject::_serialize
_TEXT	ENDS
PUBLIC	??_7BaseObject@Ogre@@6B@			; Ogre::BaseObject::`vftable'
PUBLIC	??0BaseObject@Ogre@@IAE@XZ			; Ogre::BaseObject::BaseObject
PUBLIC	??_R4BaseObject@Ogre@@6B@			; Ogre::BaseObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBaseObject@Ogre@@@8			; Ogre::BaseObject `RTTI Type Descriptor'
PUBLIC	??_R3BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BaseObject@Ogre@@8		; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVMemoryDelegation@Ogre@@@8		; Ogre::MemoryDelegation `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`vector deleting destructor'
PUBLIC	?deleteThis@BaseObject@Ogre@@MAEXXZ		; Ogre::BaseObject::deleteThis
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDelegation@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDelegation@Ogre@@8 DD 00H			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDelegation@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDelegation@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDelegation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDelegation@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R13?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BaseObject@Ogre@@8 DD FLAT:??_R0?AVBaseObject@Ogre@@@8 ; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R2BaseObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8 ; Ogre::BaseObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R3BaseObject@Ogre@@8 DD 00H				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBaseObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVBaseObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::BaseObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBaseObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BaseObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4BaseObject@Ogre@@6B@ DD 00H			; Ogre::BaseObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBaseObject@Ogre@@@8
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7BaseObject@Ogre@@6B@
CONST	SEGMENT
??_7BaseObject@Ogre@@6B@ DD FLAT:??_R4BaseObject@Ogre@@6B@ ; Ogre::BaseObject::`vftable'
	DD	FLAT:?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EBaseObject@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0BaseObject@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BaseObject@Ogre@@IAE@XZ PROC				; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx

; 92   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 1

; 93   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BaseObject@Ogre@@IAE@XZ ENDP				; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??1BaseObject@Ogre@@MAE@XZ			; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
;	COMDAT ??1BaseObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BaseObject@Ogre@@MAE@XZ PROC				; Ogre::BaseObject::~BaseObject, COMDAT
; _this$ = ecx

; 96   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1BaseObject@Ogre@@MAE@XZ ENDP				; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deleteThis@BaseObject@Ogre@@MAEXXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T65340 = -8						; size = 4
$T65339 = -4						; size = 4
?deleteThis@BaseObject@Ogre@@MAEXXZ PROC		; Ogre::BaseObject::deleteThis, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 			delete this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T65340[ebp], eax
	mov	ecx, DWORD PTR $T65340[ebp]
	mov	DWORD PTR $T65339[ebp], ecx
	cmp	DWORD PTR $T65339[ebp], 0
	je	SHORT $LN3@deleteThis
	push	1
	mov	edx, DWORD PTR $T65339[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T65339[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN1@deleteThis
$LN3@deleteThis:
	mov	DWORD PTR tv70[ebp], 0
$LN1@deleteThis:

; 102  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?deleteThis@BaseObject@Ogre@@MAEXXZ ENDP		; Ogre::BaseObject::deleteThis
_TEXT	ENDS
PUBLIC	??0BaseObject@Ogre@@QAE@ABV01@@Z		; Ogre::BaseObject::BaseObject
; Function compile flags: /Odtp
;	COMDAT ??0BaseObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0BaseObject@Ogre@@QAE@ABV01@@Z PROC			; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@BaseObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@BaseObject
$LN3@BaseObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@BaseObject:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BaseObject@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BaseObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BaseObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BaseObject::operator=
_TEXT	ENDS
PUBLIC	??_GBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`scalar deleting destructor'
EXTRN	??3MemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VMemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_EBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1BaseObject@Ogre@@MAE@XZ	; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z	; Ogre::FixedString::handle2Ptr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrefixedstring.h
;	COMDAT ?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z PROC		; Ogre::FixedString::handle2Ptr, COMDAT

; 22   : 		{

	push	ebp
	mov	ebp, esp

; 23   : 			return (const char *)h;

	mov	eax, DWORD PTR _h$[ebp]

; 24   : 		}

	pop	ebp
	ret	0
?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z ENDP		; Ogre::FixedString::handle2Ptr
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@XZ			; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FixedString@Ogre@@QAE@XZ PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 27   : 		FixedString() : m_StrHandle(NULL){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0FixedString@Ogre@@QAE@XZ ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PAX@Z			; Ogre::FixedString::FixedString
EXTRN	?addRef@FixedString@Ogre@@SAXPAX@Z:PROC		; Ogre::FixedString::addRef
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_h$ = 8							; size = 4
??0FixedString@Ogre@@QAE@PAX@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 29   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax], ecx

; 30   : 			addRef(h);

	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	call	?addRef@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::addRef
	add	esp, 4

; 31   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@PAX@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@ABV01@@Z		; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0FixedString@Ogre@@QAE@ABV01@@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 34   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 35   : 			addRef(m_StrHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?addRef@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::addRef
	add	esp, 4

; 36   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PBD@Z			; Ogre::FixedString::FixedString
EXTRN	?insert@FixedString@Ogre@@SAPAXPBDH@Z:PROC	; Ogre::FixedString::insert
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstr$ = 8						; size = 4
??0FixedString@Ogre@@QAE@PBD@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 38   : 		FixedString(const char *pstr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 		{
; 40   : 			m_StrHandle = insert(pstr); 

	push	-1
	mov	eax, DWORD PTR _pstr$[ebp]
	push	eax
	call	?insert@FixedString@Ogre@@SAPAXPBDH@Z	; Ogre::FixedString::insert
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 41   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@PBD@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PBDI@Z			; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstr$ = 8						; size = 4
_len$ = 12						; size = 4
??0FixedString@Ogre@@QAE@PBDI@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 43   : 		FixedString(const char *pstr, size_t len)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 		{
; 45   : 			m_StrHandle = insert(pstr, (int)len); 

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pstr$[ebp]
	push	ecx
	call	?insert@FixedString@Ogre@@SAPAXPBDH@Z	; Ogre::FixedString::insert
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 46   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0FixedString@Ogre@@QAE@PBDI@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??1FixedString@Ogre@@QAE@XZ			; Ogre::FixedString::~FixedString
EXTRN	?release@FixedString@Ogre@@SAXPAX@Z:PROC	; Ogre::FixedString::release
; Function compile flags: /Odtp
;	COMDAT ??1FixedString@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FixedString@Ogre@@QAE@XZ PROC			; Ogre::FixedString::~FixedString, COMDAT
; _this$ = ecx

; 49   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 			release(m_StrHandle); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?release@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::release
	add	esp, 4

; 51   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1FixedString@Ogre@@QAE@XZ ENDP			; Ogre::FixedString::~FixedString
_TEXT	ENDS
PUBLIC	??BFixedString@Ogre@@QBEPBDXZ			; Ogre::FixedString::operator char const *
; Function compile flags: /Odtp
;	COMDAT ??BFixedString@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BFixedString@Ogre@@QBEPBDXZ PROC			; Ogre::FixedString::operator char const *, COMDAT
; _this$ = ecx

; 54   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 			return handle2Ptr(m_StrHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z ; Ogre::FixedString::handle2Ptr
	add	esp, 4

; 56   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BFixedString@Ogre@@QBEPBDXZ ENDP			; Ogre::FixedString::operator char const *
_TEXT	ENDS
PUBLIC	?getHandle@FixedString@Ogre@@QBEPAXXZ		; Ogre::FixedString::getHandle
; Function compile flags: /Odtp
;	COMDAT ?getHandle@FixedString@Ogre@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHandle@FixedString@Ogre@@QBEPAXXZ PROC		; Ogre::FixedString::getHandle, COMDAT
; _this$ = ecx

; 59   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 			return m_StrHandle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 61   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getHandle@FixedString@Ogre@@QBEPAXXZ ENDP		; Ogre::FixedString::getHandle
_TEXT	ENDS
PUBLIC	?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ	; Ogre::Resource::getRTTI
EXTRN	?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B:BYTE	; Ogre::Resource::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreresource.h
;	COMDAT ?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::Resource::getRTTI, COMDAT
; _this$ = ecx

; 39   : 		DECLARE_RTTI_VIRTUAL(Resource)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B ; Ogre::Resource::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::Resource::getRTTI
_TEXT	ENDS
PUBLIC	?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ ; Ogre::Resource::getResPath
; Function compile flags: /Odtp
;	COMDAT ?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ PROC	; Ogre::Resource::getResPath, COMDAT
; _this$ = ecx

; 44   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 			return m_ResPath;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8

; 46   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ ENDP	; Ogre::Resource::getResPath
_TEXT	ENDS
PUBLIC	?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z ; Ogre::Resource::setResPath
EXTRN	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z:PROC	; Ogre::FixedString::operator=
; Function compile flags: /Odtp
;	COMDAT ?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_path$ = 8						; size = 4
?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z PROC	; Ogre::Resource::setResPath, COMDAT
; _this$ = ecx

; 48   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 			m_ResPath = path;

	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=

; 50   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z ENDP	; Ogre::Resource::setResPath
_TEXT	ENDS
PUBLIC	??_7Resource@Ogre@@6B@				; Ogre::Resource::`vftable'
PUBLIC	??0Resource@Ogre@@IAE@XZ			; Ogre::Resource::Resource
PUBLIC	??_R4Resource@Ogre@@6B@				; Ogre::Resource::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVResource@Ogre@@@8			; Ogre::Resource `RTTI Type Descriptor'
PUBLIC	??_R3Resource@Ogre@@8				; Ogre::Resource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Resource@Ogre@@8				; Ogre::Resource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Resource@Ogre@@8			; Ogre::Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EResource@Ogre@@MAEPAXI@Z			; Ogre::Resource::`vector deleting destructor'
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	?release@Resource@Ogre@@UAEXXZ:PROC		; Ogre::Resource::release
EXTRN	?addRef@Resource@Ogre@@UAEXXZ:PROC		; Ogre::Resource::addRef
EXTRN	?getRefCount@Resource@Ogre@@UAEHXZ:PROC		; Ogre::Resource::getRefCount
;	COMDAT ??_R1A@?0A@EA@Resource@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Resource@Ogre@@8 DD FLAT:??_R0?AVResource@Ogre@@@8 ; Ogre::Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Resource@Ogre@@8
rdata$r	SEGMENT
??_R2Resource@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Resource@Ogre@@8 ; Ogre::Resource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3Resource@Ogre@@8
rdata$r	SEGMENT
??_R3Resource@Ogre@@8 DD 00H				; Ogre::Resource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVResource@Ogre@@@8
_DATA	SEGMENT
??_R0?AVResource@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Resource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVResource@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Resource@Ogre@@6B@
rdata$r	SEGMENT
??_R4Resource@Ogre@@6B@ DD 00H				; Ogre::Resource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVResource@Ogre@@@8
	DD	FLAT:??_R3Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Resource@Ogre@@6B@
CONST	SEGMENT
??_7Resource@Ogre@@6B@ DD FLAT:??_R4Resource@Ogre@@6B@	; Ogre::Resource::`vftable'
	DD	FLAT:?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EResource@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Resource@Ogre@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@IAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@IAE@XZ$1
__ehfuncinfo$??0Resource@Ogre@@IAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Resource@Ogre@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Resource@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Resource@Ogre@@IAE@XZ PROC				; Ogre::Resource::Resource, COMDAT
; _this$ = ecx

; 72   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Resource@Ogre@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@IAE@XZ		; Ogre::BaseObject::BaseObject
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 1

; 73   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Resource@Ogre@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0Resource@Ogre@@IAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0Resource@Ogre@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Resource@Ogre@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Resource@Ogre@@IAE@XZ ENDP				; Ogre::Resource::Resource
PUBLIC	??1Resource@Ogre@@MAE@XZ			; Ogre::Resource::~Resource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Resource@Ogre@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Resource@Ogre@@MAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1Resource@Ogre@@MAE@XZ$1
__ehfuncinfo$??1Resource@Ogre@@MAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1Resource@Ogre@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1Resource@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Resource@Ogre@@MAE@XZ PROC				; Ogre::Resource::~Resource, COMDAT
; _this$ = ecx

; 76   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Resource@Ogre@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 77   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Resource@Ogre@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??1Resource@Ogre@@MAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??1Resource@Ogre@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Resource@Ogre@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Resource@Ogre@@MAE@XZ ENDP				; Ogre::Resource::~Resource
PUBLIC	??0Resource@Ogre@@QAE@ABV01@@Z			; Ogre::Resource::Resource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Resource@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$1
__ehfuncinfo$??0Resource@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Resource@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Resource@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Resource@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Resource::Resource, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Resource@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7Resource@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0FixedString@Ogre@@QAE@ABV01@@Z	; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0Resource@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Resource@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Resource@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Resource::Resource
PUBLIC	??4Resource@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Resource::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Resource@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Resource@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::Resource::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Resource@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::Resource::operator=
_TEXT	ENDS
PUBLIC	??_GResource@Ogre@@MAEPAXI@Z			; Ogre::Resource::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GResource@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GResource@Ogre@@MAEPAXI@Z PROC			; Ogre::Resource::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GResource@Ogre@@MAEPAXI@Z ENDP			; Ogre::Resource::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EResource@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EResource@Ogre@@MAEPAXI@Z PROC			; Ogre::Resource::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@2
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EResource@Ogre@@MAEPAXI@Z ENDP			; Ogre::Resource::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@BaseAnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::BaseAnimationData::getRTTI
EXTRN	?m_RTTI@BaseAnimationData@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::BaseAnimationData::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreanimationdata.h
;	COMDAT ?getRTTI@BaseAnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@BaseAnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::BaseAnimationData::getRTTI, COMDAT
; _this$ = ecx

; 41   : 		DECLARE_RTTI_VIRTUAL(BaseAnimationData)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@BaseAnimationData@Ogre@@2VRuntimeClass@2@B ; Ogre::BaseAnimationData::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@BaseAnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::BaseAnimationData::getRTTI
_TEXT	ENDS
PUBLIC	??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??_7BaseAnimationData@Ogre@@6B@			; Ogre::BaseAnimationData::`vftable'
PUBLIC	??0BaseAnimationData@Ogre@@QAE@XZ		; Ogre::BaseAnimationData::BaseAnimationData
PUBLIC	??_R4BaseAnimationData@Ogre@@6B@		; Ogre::BaseAnimationData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBaseAnimationData@Ogre@@@8		; Ogre::BaseAnimationData `RTTI Type Descriptor'
PUBLIC	??_R3BaseAnimationData@Ogre@@8			; Ogre::BaseAnimationData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BaseAnimationData@Ogre@@8			; Ogre::BaseAnimationData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BaseAnimationData@Ogre@@8		; Ogre::BaseAnimationData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EBaseAnimationData@Ogre@@UAEPAXI@Z		; Ogre::BaseAnimationData::`vector deleting destructor'
EXTRN	?_serialize@BaseAnimationData@Ogre@@UAEXAAVArchive@2@H@Z:PROC ; Ogre::BaseAnimationData::_serialize
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@BaseAnimationData@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BaseAnimationData@Ogre@@8 DD FLAT:??_R0?AVBaseAnimationData@Ogre@@@8 ; Ogre::BaseAnimationData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BaseAnimationData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2BaseAnimationData@Ogre@@8
rdata$r	SEGMENT
??_R2BaseAnimationData@Ogre@@8 DD FLAT:??_R1A@?0A@EA@BaseAnimationData@Ogre@@8 ; Ogre::BaseAnimationData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3BaseAnimationData@Ogre@@8
rdata$r	SEGMENT
??_R3BaseAnimationData@Ogre@@8 DD 00H			; Ogre::BaseAnimationData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2BaseAnimationData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBaseAnimationData@Ogre@@@8
_DATA	SEGMENT
??_R0?AVBaseAnimationData@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::BaseAnimationData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBaseAnimationData@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BaseAnimationData@Ogre@@6B@
rdata$r	SEGMENT
??_R4BaseAnimationData@Ogre@@6B@ DD 00H			; Ogre::BaseAnimationData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBaseAnimationData@Ogre@@@8
	DD	FLAT:??_R3BaseAnimationData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7BaseAnimationData@Ogre@@6B@
CONST	SEGMENT
??_7BaseAnimationData@Ogre@@6B@ DD FLAT:??_R4BaseAnimationData@Ogre@@6B@ ; Ogre::BaseAnimationData::`vftable'
	DD	FLAT:?getRTTI@BaseAnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseAnimationData@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EBaseAnimationData@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0BaseAnimationData@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@XZ$2
__ehfuncinfo$??0BaseAnimationData@Ogre@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0BaseAnimationData@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0BaseAnimationData@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0BaseAnimationData@Ogre@@QAE@XZ PROC			; Ogre::BaseAnimationData::BaseAnimationData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BaseAnimationData@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseAnimationData@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
__ehhandler$??0BaseAnimationData@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BaseAnimationData@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BaseAnimationData@Ogre@@QAE@XZ ENDP			; Ogre::BaseAnimationData::BaseAnimationData
PUBLIC	??1BaseAnimationData@Ogre@@UAE@XZ		; Ogre::BaseAnimationData::~BaseAnimationData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1BaseAnimationData@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BaseAnimationData@Ogre@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1BaseAnimationData@Ogre@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1BaseAnimationData@Ogre@@UAE@XZ$2
__ehfuncinfo$??1BaseAnimationData@Ogre@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1BaseAnimationData@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1BaseAnimationData@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BaseAnimationData@Ogre@@UAE@XZ PROC			; Ogre::BaseAnimationData::~BaseAnimationData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1BaseAnimationData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BaseAnimationData@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??1BaseAnimationData@Ogre@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
__unwindfunclet$??1BaseAnimationData@Ogre@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
__ehhandler$??1BaseAnimationData@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1BaseAnimationData@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1BaseAnimationData@Ogre@@UAE@XZ ENDP			; Ogre::BaseAnimationData::~BaseAnimationData
PUBLIC	??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??0BaseAnimationData@Ogre@@QAE@ABV01@@Z		; Ogre::BaseAnimationData::BaseAnimationData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z$2
__ehfuncinfo$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0BaseAnimationData@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0BaseAnimationData@Ogre@@QAE@ABV01@@Z PROC		; Ogre::BaseAnimationData::BaseAnimationData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BaseAnimationData@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
__ehhandler$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BaseAnimationData@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::BaseAnimationData::BaseAnimationData
PUBLIC	??4?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator=
PUBLIC	??4?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator=
PUBLIC	??4BaseAnimationData@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::BaseAnimationData::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BaseAnimationData@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BaseAnimationData@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::BaseAnimationData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??4?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BaseAnimationData@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::BaseAnimationData::operator=
_TEXT	ENDS
PUBLIC	??_GBaseAnimationData@Ogre@@UAEPAXI@Z		; Ogre::BaseAnimationData::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GBaseAnimationData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBaseAnimationData@Ogre@@UAEPAXI@Z PROC		; Ogre::BaseAnimationData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseAnimationData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBaseAnimationData@Ogre@@UAEPAXI@Z ENDP		; Ogre::BaseAnimationData::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EBaseAnimationData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EBaseAnimationData@Ogre@@UAEPAXI@Z PROC		; Ogre::BaseAnimationData::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1BaseAnimationData@Ogre@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	64					; 00000040H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@3
	push	64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseAnimationData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EBaseAnimationData@Ogre@@UAEPAXI@Z ENDP		; Ogre::BaseAnimationData::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@AnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::AnimationData::getRTTI
EXTRN	?m_RTTI@AnimationData@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::AnimationData::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@AnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@AnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::AnimationData::getRTTI, COMDAT
; _this$ = ecx

; 60   : 		DECLARE_RTTI(AnimationData)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@AnimationData@Ogre@@2VRuntimeClass@2@B ; Ogre::AnimationData::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@AnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::AnimationData::getRTTI
_TEXT	ENDS
PUBLIC	?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::AnimationData::newObject
EXTRN	??0AnimationData@Ogre@@QAE@XZ:PROC		; Ogre::AnimationData::AnimationData
EXTRN	??2MemoryDelegation@Ogre@@SAPAXI@Z:PROC		; Ogre::MemoryDelegation::operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T65464 = -20						; size = 4
$T65463 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ PROC ; Ogre::AnimationData::newObject, COMDAT

; 60   : 		DECLARE_RTTI(AnimationData)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	112					; 00000070H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T65464[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T65464[ebp], 0
	je	SHORT $LN3@newObject
	mov	ecx, DWORD PTR $T65464[ebp]
	call	??0AnimationData@Ogre@@QAE@XZ		; Ogre::AnimationData::AnimationData
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject
$LN3@newObject:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T65463[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T65463[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	112					; 00000070H
	mov	eax, DWORD PTR $T65464[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ ENDP ; Ogre::AnimationData::newObject
PUBLIC	??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::~vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
PUBLIC	??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
PUBLIC	??_7AnimationData@Ogre@@6B@			; Ogre::AnimationData::`vftable'
PUBLIC	??0AnimationData@Ogre@@QAE@ABV01@@Z		; Ogre::AnimationData::AnimationData
PUBLIC	??_R4AnimationData@Ogre@@6B@			; Ogre::AnimationData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAnimationData@Ogre@@@8			; Ogre::AnimationData `RTTI Type Descriptor'
PUBLIC	??_R3AnimationData@Ogre@@8			; Ogre::AnimationData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AnimationData@Ogre@@8			; Ogre::AnimationData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AnimationData@Ogre@@8		; Ogre::AnimationData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EAnimationData@Ogre@@UAEPAXI@Z		; Ogre::AnimationData::`vector deleting destructor'
EXTRN	?_serialize@AnimationData@Ogre@@UAEXAAVArchive@2@H@Z:PROC ; Ogre::AnimationData::_serialize
EXTRN	?getType@AnimationData@Ogre@@UAE?AW4AnimationType@2@XZ:PROC ; Ogre::AnimationData::getType
;	COMDAT ??_R1A@?0A@EA@AnimationData@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AnimationData@Ogre@@8 DD FLAT:??_R0?AVAnimationData@Ogre@@@8 ; Ogre::AnimationData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AnimationData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2AnimationData@Ogre@@8
rdata$r	SEGMENT
??_R2AnimationData@Ogre@@8 DD FLAT:??_R1A@?0A@EA@AnimationData@Ogre@@8 ; Ogre::AnimationData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseAnimationData@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3AnimationData@Ogre@@8
rdata$r	SEGMENT
??_R3AnimationData@Ogre@@8 DD 00H			; Ogre::AnimationData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2AnimationData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAnimationData@Ogre@@@8
_DATA	SEGMENT
??_R0?AVAnimationData@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::AnimationData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAnimationData@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4AnimationData@Ogre@@6B@
rdata$r	SEGMENT
??_R4AnimationData@Ogre@@6B@ DD 00H			; Ogre::AnimationData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAnimationData@Ogre@@@8
	DD	FLAT:??_R3AnimationData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7AnimationData@Ogre@@6B@
CONST	SEGMENT
??_7AnimationData@Ogre@@6B@ DD FLAT:??_R4AnimationData@Ogre@@6B@ ; Ogre::AnimationData::`vftable'
	DD	FLAT:?getRTTI@AnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@AnimationData@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EAnimationData@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?getType@AnimationData@Ogre@@UAE?AW4AnimationType@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AnimationData@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AnimationData@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AnimationData@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AnimationData@Ogre@@QAE@ABV01@@Z$2
__ehfuncinfo$??0AnimationData@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0AnimationData@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0AnimationData@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0AnimationData@Ogre@@QAE@ABV01@@Z PROC		; Ogre::AnimationData::AnimationData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0AnimationData@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseAnimationData@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7AnimationData@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 88					; 00000058H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AnimationData@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseAnimationData@Ogre@@UAE@XZ
__unwindfunclet$??0AnimationData@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::~vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
__unwindfunclet$??0AnimationData@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	jmp	??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
__ehhandler$??0AnimationData@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0AnimationData@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0AnimationData@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::AnimationData::AnimationData
PUBLIC	??4?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator=
PUBLIC	??4?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator=
PUBLIC	??4AnimationData@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::AnimationData::operator=
; Function compile flags: /Odtp
;	COMDAT ??4AnimationData@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4AnimationData@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::AnimationData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BaseAnimationData@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??4?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 88					; 00000058H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??4?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4AnimationData@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::AnimationData::operator=
_TEXT	ENDS
PUBLIC	??_GAnimationData@Ogre@@UAEPAXI@Z		; Ogre::AnimationData::`scalar deleting destructor'
EXTRN	??1AnimationData@Ogre@@UAE@XZ:PROC		; Ogre::AnimationData::~AnimationData
; Function compile flags: /Odtp
;	COMDAT ??_GAnimationData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GAnimationData@Ogre@@UAEPAXI@Z PROC			; Ogre::AnimationData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AnimationData@Ogre@@UAE@XZ		; Ogre::AnimationData::~AnimationData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	push	112					; 00000070H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GAnimationData@Ogre@@UAEPAXI@Z ENDP			; Ogre::AnimationData::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EAnimationData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EAnimationData@Ogre@@UAEPAXI@Z PROC			; Ogre::AnimationData::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@4
	push	OFFSET ??1AnimationData@Ogre@@UAE@XZ	; Ogre::AnimationData::~AnimationData
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	112					; 00000070H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@4
	push	112					; 00000070H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@4
$LN3@vector@4:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AnimationData@Ogre@@UAE@XZ		; Ogre::AnimationData::~AnimationData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@4
	push	112					; 00000070H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@4:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EAnimationData@Ogre@@UAEPAXI@Z ENDP			; Ogre::AnimationData::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@MaterialAnimData@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::MaterialAnimData::getRTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematerialanimdata.h
;	COMDAT ?getRTTI@MaterialAnimData@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@MaterialAnimData@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::MaterialAnimData::getRTTI, COMDAT
; _this$ = ecx

; 12   : 		DECLARE_RTTI(MaterialAnimData)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@MaterialAnimData@Ogre@@2VRuntimeClass@2@B ; Ogre::MaterialAnimData::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@MaterialAnimData@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::MaterialAnimData::getRTTI
_TEXT	ENDS
PUBLIC	??0MaterialAnimData@Ogre@@QAE@XZ		; Ogre::MaterialAnimData::MaterialAnimData
PUBLIC	?newObject@MaterialAnimData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::MaterialAnimData::newObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@MaterialAnimData@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@MaterialAnimData@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@MaterialAnimData@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@MaterialAnimData@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@MaterialAnimData@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T65496 = -20						; size = 4
$T65495 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@MaterialAnimData@Ogre@@SAPAVBaseObject@2@XZ PROC ; Ogre::MaterialAnimData::newObject, COMDAT

; 12   : 		DECLARE_RTTI(MaterialAnimData)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@MaterialAnimData@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	136					; 00000088H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T65496[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T65496[ebp], 0
	je	SHORT $LN3@newObject@2
	mov	ecx, DWORD PTR $T65496[ebp]
	call	??0MaterialAnimData@Ogre@@QAE@XZ
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject@2
$LN3@newObject@2:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject@2:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T65495[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T65495[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@MaterialAnimData@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	136					; 00000088H
	mov	eax, DWORD PTR $T65496[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@MaterialAnimData@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@MaterialAnimData@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@MaterialAnimData@Ogre@@SAPAVBaseObject@2@XZ ENDP ; Ogre::MaterialAnimData::newObject
PUBLIC	?getType@MaterialAnimData@Ogre@@UAE?AW4AnimationType@2@XZ ; Ogre::MaterialAnimData::getType
; Function compile flags: /Odtp
;	COMDAT ?getType@MaterialAnimData@Ogre@@UAE?AW4AnimationType@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getType@MaterialAnimData@Ogre@@UAE?AW4AnimationType@2@XZ PROC ; Ogre::MaterialAnimData::getType, COMDAT
; _this$ = ecx

; 16   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 17   : 			return ANIM_MATERIAL;

	mov	eax, 2

; 18   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getType@MaterialAnimData@Ogre@@UAE?AW4AnimationType@2@XZ ENDP ; Ogre::MaterialAnimData::getType
_TEXT	ENDS
PUBLIC	??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	??_7MaterialAnimData@Ogre@@6B@			; Ogre::MaterialAnimData::`vftable'
PUBLIC	??_R4MaterialAnimData@Ogre@@6B@			; Ogre::MaterialAnimData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMaterialAnimData@Ogre@@@8		; Ogre::MaterialAnimData `RTTI Type Descriptor'
PUBLIC	??_R3MaterialAnimData@Ogre@@8			; Ogre::MaterialAnimData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MaterialAnimData@Ogre@@8			; Ogre::MaterialAnimData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MaterialAnimData@Ogre@@8		; Ogre::MaterialAnimData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?_serialize@MaterialAnimData@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::MaterialAnimData::_serialize
PUBLIC	??_EMaterialAnimData@Ogre@@UAEPAXI@Z		; Ogre::MaterialAnimData::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@MaterialAnimData@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MaterialAnimData@Ogre@@8 DD FLAT:??_R0?AVMaterialAnimData@Ogre@@@8 ; Ogre::MaterialAnimData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MaterialAnimData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MaterialAnimData@Ogre@@8
rdata$r	SEGMENT
??_R2MaterialAnimData@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MaterialAnimData@Ogre@@8 ; Ogre::MaterialAnimData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@AnimationData@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseAnimationData@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3MaterialAnimData@Ogre@@8
rdata$r	SEGMENT
??_R3MaterialAnimData@Ogre@@8 DD 00H			; Ogre::MaterialAnimData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2MaterialAnimData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMaterialAnimData@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMaterialAnimData@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MaterialAnimData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMaterialAnimData@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MaterialAnimData@Ogre@@6B@
rdata$r	SEGMENT
??_R4MaterialAnimData@Ogre@@6B@ DD 00H			; Ogre::MaterialAnimData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMaterialAnimData@Ogre@@@8
	DD	FLAT:??_R3MaterialAnimData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7MaterialAnimData@Ogre@@6B@
CONST	SEGMENT
??_7MaterialAnimData@Ogre@@6B@ DD FLAT:??_R4MaterialAnimData@Ogre@@6B@ ; Ogre::MaterialAnimData::`vftable'
	DD	FLAT:?getRTTI@MaterialAnimData@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@MaterialAnimData@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EMaterialAnimData@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?getType@MaterialAnimData@Ogre@@UAE?AW4AnimationType@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0MaterialAnimData@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MaterialAnimData@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0MaterialAnimData@Ogre@@QAE@XZ$1
__ehfuncinfo$??0MaterialAnimData@Ogre@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0MaterialAnimData@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0MaterialAnimData@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0MaterialAnimData@Ogre@@QAE@XZ PROC			; Ogre::MaterialAnimData::MaterialAnimData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MaterialAnimData@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0AnimationData@Ogre@@QAE@XZ		; Ogre::AnimationData::AnimationData
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MaterialAnimData@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MaterialAnimData@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AnimationData@Ogre@@UAE@XZ		; Ogre::AnimationData::~AnimationData
__unwindfunclet$??0MaterialAnimData@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
__ehhandler$??0MaterialAnimData@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MaterialAnimData@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MaterialAnimData@Ogre@@QAE@XZ ENDP			; Ogre::MaterialAnimData::MaterialAnimData
PUBLIC	??1MaterialAnimData@Ogre@@UAE@XZ		; Ogre::MaterialAnimData::~MaterialAnimData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1MaterialAnimData@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1MaterialAnimData@Ogre@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1MaterialAnimData@Ogre@@UAE@XZ$1
__ehfuncinfo$??1MaterialAnimData@Ogre@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1MaterialAnimData@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1MaterialAnimData@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1MaterialAnimData@Ogre@@UAE@XZ PROC			; Ogre::MaterialAnimData::~MaterialAnimData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1MaterialAnimData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AnimationData@Ogre@@UAE@XZ		; Ogre::AnimationData::~AnimationData
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1MaterialAnimData@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AnimationData@Ogre@@UAE@XZ		; Ogre::AnimationData::~AnimationData
__unwindfunclet$??1MaterialAnimData@Ogre@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
__ehhandler$??1MaterialAnimData@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1MaterialAnimData@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1MaterialAnimData@Ogre@@UAE@XZ ENDP			; Ogre::MaterialAnimData::~MaterialAnimData
PUBLIC	??0MaterialAnimData@Ogre@@QAE@ABV01@@Z		; Ogre::MaterialAnimData::MaterialAnimData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0MaterialAnimData@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MaterialAnimData@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0MaterialAnimData@Ogre@@QAE@ABV01@@Z$1
__ehfuncinfo$??0MaterialAnimData@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0MaterialAnimData@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0MaterialAnimData@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0MaterialAnimData@Ogre@@QAE@ABV01@@Z PROC		; Ogre::MaterialAnimData::MaterialAnimData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MaterialAnimData@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0AnimationData@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7MaterialAnimData@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MaterialAnimData@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AnimationData@Ogre@@UAE@XZ		; Ogre::AnimationData::~AnimationData
__unwindfunclet$??0MaterialAnimData@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
__ehhandler$??0MaterialAnimData@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MaterialAnimData@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MaterialAnimData@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::MaterialAnimData::MaterialAnimData
PUBLIC	??4MaterialAnimData@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MaterialAnimData::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MaterialAnimData@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MaterialAnimData@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MaterialAnimData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4AnimationData@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 112				; 00000070H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??4?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MaterialAnimData@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MaterialAnimData::operator=
_TEXT	ENDS
PUBLIC	??_GMaterialAnimData@Ogre@@UAEPAXI@Z		; Ogre::MaterialAnimData::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GMaterialAnimData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMaterialAnimData@Ogre@@UAEPAXI@Z PROC		; Ogre::MaterialAnimData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MaterialAnimData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	push	136					; 00000088H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMaterialAnimData@Ogre@@UAEPAXI@Z ENDP		; Ogre::MaterialAnimData::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EMaterialAnimData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMaterialAnimData@Ogre@@UAEPAXI@Z PROC		; Ogre::MaterialAnimData::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@5
	push	OFFSET ??1MaterialAnimData@Ogre@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	136					; 00000088H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@5
	push	136					; 00000088H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@5
$LN3@vector@5:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MaterialAnimData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@5
	push	136					; 00000088H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@5:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMaterialAnimData@Ogre@@UAEPAXI@Z ENDP		; Ogre::MaterialAnimData::`vector deleting destructor'
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematerialanimdata.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@MaterialAnimData@Ogre@@UAEXAAVArchive@2@H@Z PROC ; Ogre::MaterialAnimData::_serialize
; _this$ = ecx

; 9    : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 10   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@MaterialAnimData@Ogre@@UAEXAAVArchive@2@H@Z ENDP ; Ogre::MaterialAnimData::_serialize
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	?_Buy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Buy
PUBLIC	??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@XZ	; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T65547 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T65547[ebp], esp
	call	??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	?_Tidy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@1@0PAU23@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >
PUBLIC	?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin
PUBLIC	?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end
PUBLIC	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
PUBLIC	??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T65559 = -36						; size = 8
$T65558 = -28						; size = 8
$T65557 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T65557[ebp], esp
	push	eax
	call	??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@6

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T65558[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T65559[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@1@0PAU23@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@6
__catch$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@6
	ret	0
$LN5@vector@6:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@6:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@6:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	?deallocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@I@Z ; std::allocator<Ogre::TriggerDesc>::deallocate
PUBLIC	??$_Ucopy@PAUTriggerDesc@Ogre@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@PAU23@00@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<Ogre::TriggerDesc *>
PUBLIC	?capacity@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::capacity
PUBLIC	?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Destroy
PUBLIC	??$unchecked_copy@PAUTriggerDesc@Ogre@@PAU12@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
PUBLIC	?clear@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$59027 = -8					; size = 4
__Ptr$59017 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	test	eax, eax
	jne	SHORT $LN8@operator

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::clear
	jmp	$LN9@operator
$LN8@operator:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAUTriggerDesc@Ogre@@PAU12@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$59017[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$59017[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator
$LN6@operator:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Ptr$59027[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$59027[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAUTriggerDesc@Ogre@@PAU12@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$59027[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUTriggerDesc@Ogre@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@PAU23@00@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<Ogre::TriggerDesc *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator
$LN4@operator:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@I@Z ; std::allocator<Ogre::TriggerDesc>::deallocate
$LN2@operator:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUTriggerDesc@Ogre@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@PAU23@00@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<Ogre::TriggerDesc *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	?_Buy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Buy
PUBLIC	??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@XZ	; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T65588 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T65588[ebp], esp
	call	??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	?_Tidy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@1@0PAU23@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >
PUBLIC	?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin
PUBLIC	?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end
PUBLIC	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
PUBLIC	??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T65600 = -36						; size = 8
$T65599 = -28						; size = 8
$T65598 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T65598[ebp], esp
	push	eax
	call	??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@7

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T65599[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T65600[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@1@0PAU23@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@7
__catch$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@7
	ret	0
$LN5@vector@7:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@7:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@7:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	?deallocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@I@Z ; std::allocator<Ogre::SequenceDesc>::deallocate
PUBLIC	??$_Ucopy@PAUSequenceDesc@Ogre@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@PAU23@00@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<Ogre::SequenceDesc *>
PUBLIC	?capacity@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::capacity
PUBLIC	?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Destroy
PUBLIC	??$unchecked_copy@PAUSequenceDesc@Ogre@@PAU12@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
PUBLIC	?clear@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$59186 = -8					; size = 4
__Ptr$59176 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@2

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@2

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::clear
	jmp	$LN9@operator@2
$LN8@operator@2:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@2

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAUSequenceDesc@Ogre@@PAU12@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$59176[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$59176[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	jmp	$LN9@operator@2
$LN6@operator@2:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@2

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	shl	eax, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR __Ptr$59186[ebp], eax

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Ptr$59186[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAUSequenceDesc@Ogre@@PAU12@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$59186[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUSequenceDesc@Ogre@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@PAU23@00@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<Ogre::SequenceDesc *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@2
$LN4@operator@2:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@2

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@I@Z ; std::allocator<Ogre::SequenceDesc>::deallocate
$LN2@operator@2:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@2

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUSequenceDesc@Ogre@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@PAU23@00@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<Ogre::SequenceDesc *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@2:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::~_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
PUBLIC	?_Tidy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >
PUBLIC	?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin
PUBLIC	?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end
PUBLIC	?_Buy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Buy
PUBLIC	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
PUBLIC	??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z ; std::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
PUBLIC	??0?$allocator@PAVBoneTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BoneTrack *>::allocator<Ogre::BoneTrack *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T65630 = -36						; size = 8
$T65629 = -28						; size = 8
$T65628 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T65628[ebp], esp
	push	eax
	call	??0?$allocator@PAVBoneTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BoneTrack *>::allocator<Ogre::BoneTrack *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z ; std::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@8

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T65629[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T65630[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@8
__catch$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@8
	ret	0
$LN5@vector@8:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@8:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@8:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::~vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::~vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
PUBLIC	?deallocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEXPAPAVBoneTrack@Ogre@@I@Z ; std::allocator<Ogre::BoneTrack *>::deallocate
PUBLIC	??$_Ucopy@PAPAVBoneTrack@Ogre@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<Ogre::BoneTrack * *>
PUBLIC	?capacity@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::capacity
PUBLIC	?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Destroy
PUBLIC	??$unchecked_copy@PAPAVBoneTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
PUBLIC	?clear@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$59340 = -8					; size = 4
__Ptr$59330 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@3

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@3

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::clear
	jmp	$LN9@operator@3
$LN8@operator@3:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@3

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAPAVBoneTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$59330[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$59330[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@3
$LN6@operator@3:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@3

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Ptr$59340[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$59340[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAPAVBoneTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$59340[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVBoneTrack@Ogre@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<Ogre::BoneTrack * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@3
$LN4@operator@3:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@3

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEXPAPAVBoneTrack@Ogre@@I@Z ; std::allocator<Ogre::BoneTrack *>::deallocate
$LN2@operator@3:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@3

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVBoneTrack@Ogre@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<Ogre::BoneTrack * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@3:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	?_Buy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Buy
PUBLIC	??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ; std::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T65658 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T65658[ebp], esp
	call	??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ; std::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	?_Tidy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >
PUBLIC	?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin
PUBLIC	?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end
PUBLIC	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
PUBLIC	??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T65670 = -36						; size = 8
$T65669 = -28						; size = 8
$T65668 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T65668[ebp], esp
	push	eax
	call	??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ; std::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@9

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T65669[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T65670[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@9
__catch$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@9
	ret	0
$LN5@vector@9:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@9:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@9:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	?deallocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEXPAPAVMaterialParamTrack@Ogre@@I@Z ; std::allocator<Ogre::MaterialParamTrack *>::deallocate
PUBLIC	??$_Ucopy@PAPAVMaterialParamTrack@Ogre@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<Ogre::MaterialParamTrack * *>
PUBLIC	?capacity@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::capacity
PUBLIC	?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Destroy
PUBLIC	??$unchecked_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
PUBLIC	?clear@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$59499 = -8					; size = 4
__Ptr$59489 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@4

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@4

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::clear
	jmp	$LN9@operator@4
$LN8@operator@4:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@4

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$59489[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$59489[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@4
$LN6@operator@4:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@4

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Ptr$59499[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$59499[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$59499[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVMaterialParamTrack@Ogre@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<Ogre::MaterialParamTrack * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@4
$LN4@operator@4:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@4

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEXPAPAVMaterialParamTrack@Ogre@@I@Z ; std::allocator<Ogre::MaterialParamTrack *>::deallocate
$LN2@operator@4:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@4

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVMaterialParamTrack@Ogre@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<Ogre::MaterialParamTrack * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@4:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
__ehhandler$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
__ehhandler$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::~_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
__ehhandler$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::~_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
__ehhandler$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
;	COMDAT ?capacity@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity
$LN3@capacity:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 3

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::erase
PUBLIC	?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin
PUBLIC	?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T65748 = -40						; size = 8
$T65747 = -32						; size = 8
$T65746 = -24						; size = 8
$T65745 = -16						; size = 8
$T65744 = -8						; size = 8
?clear@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T65745[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T65744[ebp], ecx
	mov	DWORD PTR $T65744[ebp+4], edx
	lea	eax, DWORD PTR $T65747[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T65746[ebp], ecx
	mov	DWORD PTR $T65746[ebp+4], edx
	mov	eax, DWORD PTR $T65744[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T65744[ebp]
	push	ecx
	mov	edx, DWORD PTR $T65746[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T65746[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65748[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEPAUTriggerDesc@Ogre@@I@Z ; std::allocator<Ogre::TriggerDesc>::allocate
PUBLIC	?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Xlen
PUBLIC	?max_size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy
$LN2@Buy:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEPAUTriggerDesc@Ogre@@I@Z ; std::allocator<Ogre::TriggerDesc>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@I@Z ; std::allocator<Ogre::TriggerDesc>::deallocate
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T65757 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T65757[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
__ehhandler$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 402  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@XZ PROC	; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@XZ ENDP	; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ?deallocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@I@Z PROC ; std::allocator<Ogre::TriggerDesc>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@I@Z ENDP ; std::allocator<Ogre::TriggerDesc>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@2
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@2
$LN3@capacity@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 4
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@2:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 4

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::erase
PUBLIC	?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin
PUBLIC	?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T65798 = -40						; size = 8
$T65797 = -32						; size = 8
$T65796 = -24						; size = 8
$T65795 = -16						; size = 8
$T65794 = -8						; size = 8
?clear@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T65795[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T65794[ebp], ecx
	mov	DWORD PTR $T65794[ebp+4], edx
	lea	eax, DWORD PTR $T65797[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T65796[ebp], ecx
	mov	DWORD PTR $T65796[ebp+4], edx
	mov	eax, DWORD PTR $T65794[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T65794[ebp]
	push	ecx
	mov	edx, DWORD PTR $T65796[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T65796[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65798[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEPAUSequenceDesc@Ogre@@I@Z ; std::allocator<Ogre::SequenceDesc>::allocate
PUBLIC	?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Xlen
PUBLIC	?max_size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@2

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@2
	jmp	SHORT $LN3@Buy@2
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@2

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@2
$LN2@Buy@2:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEPAUSequenceDesc@Ogre@@I@Z ; std::allocator<Ogre::SequenceDesc>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN3@Buy@2:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@2:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@2

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@I@Z ; std::allocator<Ogre::SequenceDesc>::deallocate
$LN1@Tidy@2:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T65807 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T65807[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
__ehhandler$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@XZ PROC	; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@XZ ENDP	; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@I@Z PROC ; std::allocator<Ogre::SequenceDesc>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@I@Z ENDP ; std::allocator<Ogre::SequenceDesc>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@3
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@3
$LN3@capacity@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@3:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::erase
PUBLIC	?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin
PUBLIC	?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T65846 = -40						; size = 8
$T65845 = -32						; size = 8
$T65844 = -24						; size = 8
$T65843 = -16						; size = 8
$T65842 = -8						; size = 8
?clear@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T65843[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T65842[ebp], ecx
	mov	DWORD PTR $T65842[ebp+4], edx
	lea	eax, DWORD PTR $T65845[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T65844[ebp], ecx
	mov	DWORD PTR $T65844[ebp+4], edx
	mov	eax, DWORD PTR $T65842[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T65842[ebp]
	push	ecx
	mov	edx, DWORD PTR $T65844[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T65844[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65846[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEPAPAVBoneTrack@Ogre@@I@Z ; std::allocator<Ogre::BoneTrack *>::allocate
PUBLIC	?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Xlen
PUBLIC	?max_size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@3

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@3
	jmp	SHORT $LN3@Buy@3
$LN4@Buy@3:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@3

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@3
$LN2@Buy@3:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEPAPAVBoneTrack@Ogre@@I@Z ; std::allocator<Ogre::BoneTrack *>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@3:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@3:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@3

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEXPAPAVBoneTrack@Ogre@@I@Z ; std::allocator<Ogre::BoneTrack *>::deallocate
$LN1@Tidy@3:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T65855 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T65855[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@PAVBoneTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BoneTrack *>::allocator<Ogre::BoneTrack *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@PAVBoneTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BoneTrack *>::allocator<Ogre::BoneTrack *>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
__ehhandler$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVBoneTrack@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVBoneTrack@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::BoneTrack *>::allocator<Ogre::BoneTrack *>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAVBoneTrack@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::BoneTrack *>::allocator<Ogre::BoneTrack *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEXPAPAVBoneTrack@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEXPAPAVBoneTrack@Ogre@@I@Z PROC ; std::allocator<Ogre::BoneTrack *>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEXPAPAVBoneTrack@Ogre@@I@Z ENDP ; std::allocator<Ogre::BoneTrack *>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@4
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@4
$LN3@capacity@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@4:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::erase
PUBLIC	?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin
PUBLIC	?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T65892 = -40						; size = 8
$T65891 = -32						; size = 8
$T65890 = -24						; size = 8
$T65889 = -16						; size = 8
$T65888 = -8						; size = 8
?clear@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T65889[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T65888[ebp], ecx
	mov	DWORD PTR $T65888[ebp+4], edx
	lea	eax, DWORD PTR $T65891[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T65890[ebp], ecx
	mov	DWORD PTR $T65890[ebp+4], edx
	mov	eax, DWORD PTR $T65888[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T65888[ebp]
	push	ecx
	mov	edx, DWORD PTR $T65890[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T65890[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65892[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEPAPAVMaterialParamTrack@Ogre@@I@Z ; std::allocator<Ogre::MaterialParamTrack *>::allocate
PUBLIC	?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Xlen
PUBLIC	?max_size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@4

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@4
	jmp	SHORT $LN3@Buy@4
$LN4@Buy@4:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@4

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@4
$LN2@Buy@4:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEPAPAVMaterialParamTrack@Ogre@@I@Z ; std::allocator<Ogre::MaterialParamTrack *>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@4:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@4:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@4

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEXPAPAVMaterialParamTrack@Ogre@@I@Z ; std::allocator<Ogre::MaterialParamTrack *>::deallocate
$LN1@Tidy@4:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T65901 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T65901[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
__ehhandler$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@XZ PROC ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@XZ ENDP ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEXPAPAVMaterialParamTrack@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEXPAPAVMaterialParamTrack@Ogre@@I@Z PROC ; std::allocator<Ogre::MaterialParamTrack *>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEXPAPAVMaterialParamTrack@Ogre@@I@Z ENDP ; std::allocator<Ogre::MaterialParamTrack *>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UTriggerDesc@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::TriggerDesc>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@UTriggerDesc@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::TriggerDesc>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator!=
PUBLIC	?_Make_iter@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$61014 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAUTriggerDesc@Ogre@@PAU12@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$61014[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$61014[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$61014[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::erase
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T65935 = -80						; size = 28
$T65934 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T65935[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T65935[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65934[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T65934[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T65935[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T65935[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Xlen
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 27   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1logic_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$1
__ehfuncinfo$??1logic_error@std@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1logic_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 31   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1logic_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??1logic_error@std@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1logic_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1logic_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Odtp
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1length_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1length_error@std@@UAE@XZ$0
__ehfuncinfo$??1length_error@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1length_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1length_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1length_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??1length_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1length_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1length_error@std@@UAE@XZ		; std::length_error::~length_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
PUBLIC	??$?0UTriggerDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UTriggerDesc@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::TriggerDesc>
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T66001 = -24						; size = 4
$T66000 = -20						; size = 4
$T65999 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0UTriggerDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UTriggerDesc@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::TriggerDesc>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T66001[ebp], eax
	mov	ecx, DWORD PTR $T66001[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T66000[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T66000[ebp], 0
	je	SHORT $LN3@Container_
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T66000[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_
$LN3@Container_:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T65999[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T65999[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T66001[ebp]
	push	eax
	mov	ecx, DWORD PTR $T66000[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 58   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 60   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 63   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 64   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
_TEXT	ENDS
PUBLIC	??$_Allocate@UTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@IPAU12@@Z ; std::_Allocate<Ogre::TriggerDesc>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEPAUTriggerDesc@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEPAUTriggerDesc@Ogre@@I@Z PROC ; std::allocator<Ogre::TriggerDesc>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@IPAU12@@Z ; std::_Allocate<Ogre::TriggerDesc>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEPAUTriggerDesc@Ogre@@I@Z ENDP ; std::allocator<Ogre::TriggerDesc>::allocate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@USequenceDesc@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::SequenceDesc>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@USequenceDesc@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::SequenceDesc>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator!=
PUBLIC	?_Make_iter@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$61065 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@2

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAUSequenceDesc@Ogre@@PAU12@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$61065[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$61065[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$61065[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@2:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T66035 = -80						; size = 28
$T66034 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T66035[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T66035[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66034[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T66034[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T66035[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T66035[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Xlen
PUBLIC	??$?0USequenceDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USequenceDesc@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SequenceDesc>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T66047 = -24						; size = 4
$T66046 = -20						; size = 4
$T66045 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0USequenceDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USequenceDesc@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SequenceDesc>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T66047[ebp], eax
	mov	ecx, DWORD PTR $T66047[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T66046[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T66046[ebp], 0
	je	SHORT $LN3@Container_@2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T66046[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@2
$LN3@Container_@2:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@2:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T66045[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T66045[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T66047[ebp]
	push	eax
	mov	ecx, DWORD PTR $T66046[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
PUBLIC	??$_Allocate@USequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@IPAU12@@Z ; std::_Allocate<Ogre::SequenceDesc>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEPAUSequenceDesc@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEPAUSequenceDesc@Ogre@@I@Z PROC ; std::allocator<Ogre::SequenceDesc>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@USequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@IPAU12@@Z ; std::_Allocate<Ogre::SequenceDesc>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEPAUSequenceDesc@Ogre@@I@Z ENDP ; std::allocator<Ogre::SequenceDesc>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVBoneTrack@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::BoneTrack *>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@PAVBoneTrack@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::BoneTrack *>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator!=
PUBLIC	?_Make_iter@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$61109 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@3

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAPAVBoneTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$61109[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$61109[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$61109[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@3:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T66071 = -80						; size = 28
$T66070 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T66071[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T66071[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66070[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T66070[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T66071[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@3:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T66071[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Xlen
PUBLIC	??$?0PAVBoneTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVBoneTrack@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BoneTrack *>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T66083 = -24						; size = 4
$T66082 = -20						; size = 4
$T66081 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0PAVBoneTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVBoneTrack@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BoneTrack *>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T66083[ebp], eax
	mov	ecx, DWORD PTR $T66083[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T66082[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T66082[ebp], 0
	je	SHORT $LN3@Container_@3
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T66082[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@3
$LN3@Container_@3:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@3:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T66081[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T66081[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T66083[ebp]
	push	eax
	mov	ecx, DWORD PTR $T66082[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
PUBLIC	??$_Allocate@PAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::BoneTrack *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEPAPAVBoneTrack@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEPAPAVBoneTrack@Ogre@@I@Z PROC ; std::allocator<Ogre::BoneTrack *>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::BoneTrack *>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEPAPAVBoneTrack@Ogre@@I@Z ENDP ; std::allocator<Ogre::BoneTrack *>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::MaterialParamTrack *>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::MaterialParamTrack *>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator!=
PUBLIC	?_Make_iter@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$61153 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@4

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$61153[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$61153[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$61153[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@4:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T66107 = -80						; size = 28
$T66106 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T66107[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T66107[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66106[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T66106[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T66107[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@4:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T66107[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Xlen
PUBLIC	??$?0PAVMaterialParamTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::MaterialParamTrack *>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T66119 = -24						; size = 4
$T66118 = -20						; size = 4
$T66117 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0PAVMaterialParamTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::MaterialParamTrack *>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T66119[ebp], eax
	mov	ecx, DWORD PTR $T66119[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T66118[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T66118[ebp], 0
	je	SHORT $LN3@Container_@4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T66118[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@4
$LN3@Container_@4:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@4:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T66117[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T66117[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T66119[ebp]
	push	eax
	mov	ecx, DWORD PTR $T66118[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	??$_Allocate@PAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::MaterialParamTrack *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEPAPAVMaterialParamTrack@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEPAPAVMaterialParamTrack@Ogre@@I@Z PROC ; std::allocator<Ogre::MaterialParamTrack *>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::MaterialParamTrack *>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEPAPAVMaterialParamTrack@Ogre@@I@Z ENDP ; std::allocator<Ogre::MaterialParamTrack *>::allocate
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
PUBLIC	??0?$_Ranit@UTriggerDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Ranit<Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &>::_Ranit<Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &>
EXTRN	__imp___invalid_parameter_noinfo:PROC
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@UTriggerDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con
$LN1@Vector_con:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 452  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 454  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	??0?$_Ranit@USequenceDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Ranit<Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &>::_Ranit<Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@USequenceDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@2
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@2
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@2
$LN1@Vector_con@2:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@2:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@PAVBoneTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ; std::_Ranit<Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &>::_Ranit<Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@PAVBoneTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@3
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@3
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@3
$LN1@Vector_con@3:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@3:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@PAVMaterialParamTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ; std::_Ranit<Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &>::_Ranit<Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@PAVMaterialParamTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@4
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@4
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@4
$LN1@Vector_con@4:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@4:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UTriggerDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@UTriggerDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@UTriggerDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &>::_Ranit<Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UTriggerDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@UTriggerDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &>::_Ranit<Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@USequenceDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@USequenceDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@USequenceDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &>::_Ranit<Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@USequenceDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@USequenceDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &>::_Ranit<Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVBoneTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@PAVBoneTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@PAVBoneTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &>::_Ranit<Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVBoneTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@PAVBoneTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &>::_Ranit<Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVMaterialParamTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@PAVMaterialParamTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@PAVMaterialParamTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &>::_Ranit<Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVMaterialParamTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@PAVMaterialParamTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &>::_Ranit<Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &>
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UTriggerDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UTriggerDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UTriggerDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@USequenceDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@USequenceDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@USequenceDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVBoneTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVBoneTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVBoneTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVMaterialParamTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVMaterialParamTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVMaterialParamTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UTriggerDesc@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@UTriggerDesc@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::TriggerDesc>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UTriggerDesc@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::TriggerDesc>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@USequenceDesc@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@USequenceDesc@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::SequenceDesc>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 268435455	; 0fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@2
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@2
$LN3@max_size@2:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@USequenceDesc@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::SequenceDesc>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAVBoneTrack@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@PAVBoneTrack@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::BoneTrack *>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@3
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@3
$LN3@max_size@3:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@3:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVBoneTrack@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::BoneTrack *>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::MaterialParamTrack *>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@4
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@4
$LN3@max_size@4:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@4:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::MaterialParamTrack *>::max_size
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator==
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator!=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Odtp
;	COMDAT ??8?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@5
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@5
$LN1@operator@5:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@5:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator==
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 462  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 463  : 		return _Myaux == _Other._Myaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Other$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al

; 464  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 467  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 468  : 		return _Myaux != 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	mov	al, cl

; 469  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@6
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@6
$LN1@operator@6:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@6:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@7
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@7
$LN1@operator@7:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@7:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@8
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@8
$LN1@operator@8:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@8:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator==
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@2@@stdext@@YAPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@1@0PAU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@1@0PAU23@@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@2@@stdext@@YAPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@1@0PAU23@@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
PUBLIC	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
PUBLIC	??$_Iter_random@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTriggerDesc@Ogre@@0@Z ; std::_Iter_random<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
PUBLIC	??$_Ptr_cat@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUTriggerDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUTriggerDesc@Ogre@@PAU12@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00@Z
_TEXT	SEGMENT
$T66229 = -3						; size = 1
$T66228 = -2						; size = 1
$T66227 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUTriggerDesc@Ogre@@PAU12@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00@Z PROC ; stdext::unchecked_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T66227[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUTriggerDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 8
	mov	BYTE PTR $T66228[ebp], al
	movzx	eax, BYTE PTR $T66227[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T66228[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66229[ebp]
	push	ecx
	call	??$_Iter_random@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTriggerDesc@Ogre@@0@Z ; std::_Iter_random<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAUTriggerDesc@Ogre@@PAU12@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00@Z ENDP ; stdext::unchecked_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUTriggerDesc@Ogre@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@PAU23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUTriggerDesc@Ogre@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@PAU23@00@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<Ogre::TriggerDesc *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAUTriggerDesc@Ogre@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@PAU23@00@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<Ogre::TriggerDesc *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@2@@stdext@@YAPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@1@0PAU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@1@0PAU23@@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@2@@stdext@@YAPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@1@0PAU23@@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
PUBLIC	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
PUBLIC	??$_Iter_random@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSequenceDesc@Ogre@@0@Z ; std::_Iter_random<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
PUBLIC	??$_Ptr_cat@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSequenceDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUSequenceDesc@Ogre@@PAU12@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00@Z
_TEXT	SEGMENT
$T66238 = -3						; size = 1
$T66237 = -2						; size = 1
$T66236 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUSequenceDesc@Ogre@@PAU12@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00@Z PROC ; stdext::unchecked_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T66236[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSequenceDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 8
	mov	BYTE PTR $T66237[ebp], al
	movzx	eax, BYTE PTR $T66236[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T66237[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66238[ebp]
	push	ecx
	call	??$_Iter_random@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSequenceDesc@Ogre@@0@Z ; std::_Iter_random<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAUSequenceDesc@Ogre@@PAU12@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00@Z ENDP ; stdext::unchecked_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUSequenceDesc@Ogre@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@PAU23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUSequenceDesc@Ogre@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@PAU23@00@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<Ogre::SequenceDesc *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAUSequenceDesc@Ogre@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@PAU23@00@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<Ogre::SequenceDesc *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@2@@stdext@@YAPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@1@0PAPAV23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@1@0PAPAV23@@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@2@@stdext@@YAPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@1@0PAPAV23@@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAVBoneTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneTrack * *>
PUBLIC	??$_Iter_random@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneTrack@Ogre@@0@Z ; std::_Iter_random<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
PUBLIC	??$_Ptr_cat@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVBoneTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00@Z
_TEXT	SEGMENT
$T66247 = -3						; size = 1
$T66246 = -2						; size = 1
$T66245 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVBoneTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00@Z PROC ; stdext::unchecked_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T66245[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
	add	esp, 8
	mov	BYTE PTR $T66246[ebp], al
	movzx	eax, BYTE PTR $T66245[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T66246[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66247[ebp]
	push	ecx
	call	??$_Iter_random@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneTrack@Ogre@@0@Z ; std::_Iter_random<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneTrack * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneTrack * *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAPAVBoneTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVBoneTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00@Z ENDP ; stdext::unchecked_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAPAVBoneTrack@Ogre@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@PAPAV23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAPAVBoneTrack@Ogre@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@PAPAV23@00@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<Ogre::BoneTrack * *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAPAVBoneTrack@Ogre@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@PAPAV23@00@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<Ogre::BoneTrack * *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@2@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@1@0PAPAV23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@1@0PAPAV23@@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@2@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@1@0PAPAV23@@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAVMaterialParamTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::MaterialParamTrack * *>
PUBLIC	??$_Iter_random@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVMaterialParamTrack@Ogre@@0@Z ; std::_Iter_random<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
PUBLIC	??$_Ptr_cat@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVMaterialParamTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00@Z
_TEXT	SEGMENT
$T66256 = -3						; size = 1
$T66255 = -2						; size = 1
$T66254 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00@Z PROC ; stdext::unchecked_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T66254[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVMaterialParamTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
	add	esp, 8
	mov	BYTE PTR $T66255[ebp], al
	movzx	eax, BYTE PTR $T66254[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T66255[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66256[ebp]
	push	ecx
	call	??$_Iter_random@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVMaterialParamTrack@Ogre@@0@Z ; std::_Iter_random<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::MaterialParamTrack * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::MaterialParamTrack * *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAPAVMaterialParamTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00@Z ENDP ; stdext::unchecked_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAPAVMaterialParamTrack@Ogre@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@PAPAV23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAPAVMaterialParamTrack@Ogre@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@PAPAV23@00@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<Ogre::MaterialParamTrack * *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAPAVMaterialParamTrack@Ogre@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@PAPAV23@00@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<Ogre::MaterialParamTrack * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@@Z
_TEXT	SEGMENT
$T66261 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUTriggerDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 8
	mov	BYTE PTR $T66261[ebp], al
	movzx	edx, BYTE PTR $T66261[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@@Z
_TEXT	SEGMENT
$T66264 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSequenceDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 8
	mov	BYTE PTR $T66264[ebp], al
	movzx	edx, BYTE PTR $T66264[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@@Z
_TEXT	SEGMENT
$T66267 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
	add	esp, 8
	mov	BYTE PTR $T66267[ebp], al
	movzx	edx, BYTE PTR $T66267[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@@Z
_TEXT	SEGMENT
$T66270 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVMaterialParamTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
	add	esp, 8
	mov	BYTE PTR $T66270[ebp], al
	movzx	edx, BYTE PTR $T66270[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0UTriggerDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UTriggerDesc@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UTriggerDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UTriggerDesc@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::TriggerDesc>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UTriggerDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UTriggerDesc@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::TriggerDesc>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Allocate@UTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@IPAU12@@Z
_TEXT	SEGMENT
$T66275 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@IPAU12@@Z PROC ; std::_Allocate<Ogre::TriggerDesc>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T66275[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T66275[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@IPAU12@@Z ENDP ; std::_Allocate<Ogre::TriggerDesc>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_alloc@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0
__ehfuncinfo$??1bad_alloc@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_alloc@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1bad_alloc@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 381  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??1bad_alloc@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1bad_alloc@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ		; std::bad_alloc::~bad_alloc
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0USequenceDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USequenceDesc@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0USequenceDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USequenceDesc@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SequenceDesc>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0USequenceDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USequenceDesc@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SequenceDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@USequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@IPAU12@@Z
_TEXT	SEGMENT
$T66300 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@USequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@IPAU12@@Z PROC ; std::_Allocate<Ogre::SequenceDesc>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 16					; 00000010H
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T66300[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T66300[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 4
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@USequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@IPAU12@@Z ENDP ; std::_Allocate<Ogre::SequenceDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0PAVBoneTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVBoneTrack@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVBoneTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVBoneTrack@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BoneTrack *>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVBoneTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVBoneTrack@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BoneTrack *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@IPAPAV12@@Z
_TEXT	SEGMENT
$T66305 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@IPAPAV12@@Z PROC ; std::_Allocate<Ogre::BoneTrack *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@3
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T66305[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T66305[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@3:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@IPAPAV12@@Z ENDP ; std::_Allocate<Ogre::BoneTrack *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0PAVMaterialParamTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVMaterialParamTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::MaterialParamTrack *>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVMaterialParamTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::MaterialParamTrack *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@IPAPAV12@@Z
_TEXT	SEGMENT
$T66310 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@IPAPAV12@@Z PROC ; std::_Allocate<Ogre::MaterialParamTrack *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@4
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T66310[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T66310[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@4:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@IPAPAV12@@Z ENDP ; std::_Allocate<Ogre::MaterialParamTrack *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T66313 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@5
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T66313[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T66313[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@5:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
PUBLIC	??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::TriggerDesc const *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@AAPAUTriggerDesc@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@2@@stdext@@YAPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@4@@Z
_TEXT	SEGMENT
$T66326 = -2						; size = 1
$T66325 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@2@@stdext@@YAPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T66325[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@AAPAUTriggerDesc@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *>
	add	esp, 8
	mov	BYTE PTR $T66326[ebp], al
	movzx	eax, BYTE PTR $T66325[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T66326[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::TriggerDesc const *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@2@@stdext@@YAPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z PROC ; std::_Checked_base<Ogre::TriggerDesc *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z ENDP ; std::_Checked_base<Ogre::TriggerDesc *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTriggerDesc@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTriggerDesc@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::TriggerDesc *,Ogre::TriggerDesc *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTriggerDesc@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUTriggerDesc@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUTriggerDesc@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::TriggerDesc *,Ogre::TriggerDesc *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUTriggerDesc@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T66337 = -7						; size = 1
$T66336 = -6						; size = 1
$T66335 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Result$[ebp], edx

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T66335[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T66336[ebp], cl
	movzx	edx, BYTE PTR $T66335[ebp]
	push	edx
	movzx	eax, BYTE PTR $T66336[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T66337[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T66341 = -2						; size = 1
$T66340 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T66340[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUTriggerDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 8
	mov	BYTE PTR $T66341[ebp], al
	movzx	eax, BYTE PTR $T66340[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T66341[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SequenceDesc const *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@AAPAUSequenceDesc@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@2@@stdext@@YAPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@4@@Z
_TEXT	SEGMENT
$T66345 = -2						; size = 1
$T66344 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@2@@stdext@@YAPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T66344[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@AAPAUSequenceDesc@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *>
	add	esp, 8
	mov	BYTE PTR $T66345[ebp], al
	movzx	eax, BYTE PTR $T66344[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T66345[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SequenceDesc const *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@2@@stdext@@YAPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z PROC ; std::_Checked_base<Ogre::SequenceDesc *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z ENDP ; std::_Checked_base<Ogre::SequenceDesc *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSequenceDesc@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSequenceDesc@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::SequenceDesc *,Ogre::SequenceDesc *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSequenceDesc@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSequenceDesc@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSequenceDesc@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::SequenceDesc *,Ogre::SequenceDesc *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSequenceDesc@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T66356 = -7						; size = 1
$T66355 = -6						; size = 1
$T66354 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 4
	shl	eax, 4
	add	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Result$[ebp], eax

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	ecx, ecx
	mov	BYTE PTR $T66354[ebp], cl
	xor	edx, edx
	mov	BYTE PTR $T66355[ebp], dl
	movzx	eax, BYTE PTR $T66354[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T66355[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T66356[ebp]
	push	edx
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T66360 = -2						; size = 1
$T66359 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T66359[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSequenceDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 8
	mov	BYTE PTR $T66360[ebp], al
	movzx	eax, BYTE PTR $T66359[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T66360[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBQAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BoneTrack * const *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@AAPAPAVBoneTrack@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@2@@stdext@@YAPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@4@@Z
_TEXT	SEGMENT
$T66364 = -2						; size = 1
$T66363 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@2@@stdext@@YAPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T66363[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@AAPAPAVBoneTrack@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *>
	add	esp, 8
	mov	BYTE PTR $T66364[ebp], al
	movzx	eax, BYTE PTR $T66363[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T66364[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBQAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BoneTrack * const *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@2@@stdext@@YAPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::BoneTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z PROC ; std::_Checked_base<Ogre::BoneTrack * *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::BoneTrack * *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z ENDP ; std::_Checked_base<Ogre::BoneTrack * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneTrack@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneTrack@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::BoneTrack * *,Ogre::BoneTrack * *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneTrack@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneTrack@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneTrack@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::BoneTrack * *,Ogre::BoneTrack * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneTrack@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
_TEXT	ENDS
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAPAVBoneTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAPAVBoneTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAPAVBoneTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T66376 = -2						; size = 1
$T66375 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T66375[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
	add	esp, 8
	mov	BYTE PTR $T66376[ebp], al
	movzx	eax, BYTE PTR $T66375[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T66376[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneTrack * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneTrack * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBQAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@AAPAPAVMaterialParamTrack@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@2@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@4@@Z
_TEXT	SEGMENT
$T66380 = -2						; size = 1
$T66379 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@2@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T66379[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@AAPAPAVMaterialParamTrack@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *>
	add	esp, 8
	mov	BYTE PTR $T66380[ebp], al
	movzx	eax, BYTE PTR $T66379[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T66380[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBQAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@2@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z PROC ; std::_Checked_base<Ogre::MaterialParamTrack * *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::MaterialParamTrack * *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z ENDP ; std::_Checked_base<Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVMaterialParamTrack@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVMaterialParamTrack@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVMaterialParamTrack@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVMaterialParamTrack@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVMaterialParamTrack@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVMaterialParamTrack@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAPAVMaterialParamTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAPAVMaterialParamTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt@2

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt@2:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAPAVMaterialParamTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T66392 = -2						; size = 1
$T66391 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T66391[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVMaterialParamTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
	add	esp, 8
	mov	BYTE PTR $T66392[ebp], al
	movzx	eax, BYTE PTR $T66391[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T66392[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::MaterialParamTrack * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::MaterialParamTrack * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@@Z ; std::allocator<Ogre::TriggerDesc>::destroy
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@@Z ; std::allocator<Ogre::TriggerDesc>::destroy
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@@Z ; std::allocator<Ogre::SequenceDesc>::destroy
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra@2
$LN2@Destroy_ra@2:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@2:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra@2

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@@Z ; std::allocator<Ogre::SequenceDesc>::destroy
	jmp	SHORT $LN2@Destroy_ra@2
$LN4@Destroy_ra@2:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >
_TEXT	ENDS
PUBLIC	??$_Destroy@UTriggerDesc@Ogre@@@std@@YAXPAUTriggerDesc@Ogre@@@Z ; std::_Destroy<Ogre::TriggerDesc>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@@Z PROC ; std::allocator<Ogre::TriggerDesc>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@UTriggerDesc@Ogre@@@std@@YAXPAUTriggerDesc@Ogre@@@Z ; std::_Destroy<Ogre::TriggerDesc>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@@Z ENDP ; std::allocator<Ogre::TriggerDesc>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@USequenceDesc@Ogre@@@std@@YAXPAUSequenceDesc@Ogre@@@Z ; std::_Destroy<Ogre::SequenceDesc>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@@Z PROC ; std::allocator<Ogre::SequenceDesc>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@USequenceDesc@Ogre@@@std@@YAXPAUSequenceDesc@Ogre@@@Z ; std::_Destroy<Ogre::SequenceDesc>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@@Z ENDP ; std::allocator<Ogre::SequenceDesc>::destroy
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@AAPAUTriggerDesc@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@AAPAUTriggerDesc@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@AAPAUTriggerDesc@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@ABU34@@Z ; std::allocator<Ogre::TriggerDesc>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::TriggerDesc const *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@ABU34@@Z ; std::allocator<Ogre::TriggerDesc>::construct
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@@Z ; std::allocator<Ogre::TriggerDesc>::destroy
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::TriggerDesc const *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::TriggerDesc *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::TriggerDesc *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@3
$LN2@Copy_opt@3:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 8
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@3:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@3

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_opt@3
$LN1@Copy_opt@3:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@2
$LN5@Uninit_cop@2:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@2:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@ABU34@@Z ; std::allocator<Ogre::TriggerDesc>::construct
	jmp	SHORT $LN5@Uninit_cop@2
$LN4@Uninit_cop@2:
	jmp	SHORT $LN10@Uninit_cop@2
__catch$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@2
$LN2@Uninit_cop@2:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@2:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@2

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@@Z ; std::allocator<Ogre::TriggerDesc>::destroy
	jmp	SHORT $LN2@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@2:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@AAPAUSequenceDesc@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@AAPAUSequenceDesc@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@AAPAUSequenceDesc@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@ABU34@@Z ; std::allocator<Ogre::SequenceDesc>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::SequenceDesc const *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@3
$LN5@Uninit_cop@3:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@3:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@3

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@ABU34@@Z ; std::allocator<Ogre::SequenceDesc>::construct
	jmp	SHORT $LN5@Uninit_cop@3
$LN4@Uninit_cop@3:
	jmp	SHORT $LN10@Uninit_cop@3
__catch$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@3
$LN2@Uninit_cop@3:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@3:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@3

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@@Z ; std::allocator<Ogre::SequenceDesc>::destroy
	jmp	SHORT $LN2@Uninit_cop@3
$LN1@Uninit_cop@3:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@3:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::SequenceDesc const *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::SequenceDesc *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::SequenceDesc *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@4
$LN2@Copy_opt@4:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@4:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@4

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN2@Copy_opt@4
$LN1@Copy_opt@4:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@4
$LN5@Uninit_cop@4:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@4:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@4

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@ABU34@@Z ; std::allocator<Ogre::SequenceDesc>::construct
	jmp	SHORT $LN5@Uninit_cop@4
$LN4@Uninit_cop@4:
	jmp	SHORT $LN10@Uninit_cop@4
__catch$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@4
$LN2@Uninit_cop@4:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@4:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@4

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@@Z ; std::allocator<Ogre::SequenceDesc>::destroy
	jmp	SHORT $LN2@Uninit_cop@4
$LN1@Uninit_cop@4:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@4:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@AAPAPAVBoneTrack@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@AAPAPAVBoneTrack@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@AAPAPAVBoneTrack@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PBQAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBQAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::BoneTrack * const *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@5

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@5:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBQAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::BoneTrack * const *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::BoneTrack * *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::BoneTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@6

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@6:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@AAPAPAVMaterialParamTrack@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@AAPAPAVMaterialParamTrack@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@AAPAPAVMaterialParamTrack@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PBQAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBQAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@7

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@7:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBQAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::MaterialParamTrack * *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@8

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@8:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy@UTriggerDesc@Ogre@@@std@@YAXPAUTriggerDesc@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UTriggerDesc@Ogre@@@std@@YAXPAUTriggerDesc@Ogre@@@Z PROC ; std::_Destroy<Ogre::TriggerDesc>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@UTriggerDesc@Ogre@@@std@@YAXPAUTriggerDesc@Ogre@@@Z ENDP ; std::_Destroy<Ogre::TriggerDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@USequenceDesc@Ogre@@@std@@YAXPAUSequenceDesc@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@USequenceDesc@Ogre@@@std@@YAXPAUSequenceDesc@Ogre@@@Z PROC ; std::_Destroy<Ogre::SequenceDesc>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@USequenceDesc@Ogre@@@std@@YAXPAUSequenceDesc@Ogre@@@Z ENDP ; std::_Destroy<Ogre::SequenceDesc>
_TEXT	ENDS
PUBLIC	??$_Construct@UTriggerDesc@Ogre@@U12@@std@@YAXPAUTriggerDesc@Ogre@@ABU12@@Z ; std::_Construct<Ogre::TriggerDesc,Ogre::TriggerDesc>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@ABU34@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@ABU34@@Z PROC ; std::allocator<Ogre::TriggerDesc>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@UTriggerDesc@Ogre@@U12@@std@@YAXPAUTriggerDesc@Ogre@@ABU12@@Z ; std::_Construct<Ogre::TriggerDesc,Ogre::TriggerDesc>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@ABU34@@Z ENDP ; std::allocator<Ogre::TriggerDesc>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@USequenceDesc@Ogre@@U12@@std@@YAXPAUSequenceDesc@Ogre@@ABU12@@Z ; std::_Construct<Ogre::SequenceDesc,Ogre::SequenceDesc>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@ABU34@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@ABU34@@Z PROC ; std::allocator<Ogre::SequenceDesc>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@USequenceDesc@Ogre@@U12@@std@@YAXPAUSequenceDesc@Ogre@@ABU12@@Z ; std::_Construct<Ogre::SequenceDesc,Ogre::SequenceDesc>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@ABU34@@Z ENDP ; std::allocator<Ogre::SequenceDesc>::construct
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEPBUTriggerDesc@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Checked_iterator_base
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEPBUTriggerDesc@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEPBUSequenceDesc@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEPBUSequenceDesc@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEPBQAVBoneTrack@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEPBQAVBoneTrack@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEPBQAVMaterialParamTrack@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEPBQAVMaterialParamTrack@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Construct@UTriggerDesc@Ogre@@U12@@std@@YAXPAUTriggerDesc@Ogre@@ABU12@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T66519 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UTriggerDesc@Ogre@@U12@@std@@YAXPAUTriggerDesc@Ogre@@ABU12@@Z PROC ; std::_Construct<Ogre::TriggerDesc,Ogre::TriggerDesc>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T66519[ebp], eax
	cmp	DWORD PTR $T66519[ebp], 0
	je	SHORT $LN3@Construct
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T66519[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T66519[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@Construct
$LN3@Construct:
	mov	DWORD PTR tv69[ebp], 0
$LN1@Construct:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@UTriggerDesc@Ogre@@U12@@std@@YAXPAUTriggerDesc@Ogre@@ABU12@@Z ENDP ; std::_Construct<Ogre::TriggerDesc,Ogre::TriggerDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Construct@USequenceDesc@Ogre@@U12@@std@@YAXPAUSequenceDesc@Ogre@@ABU12@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T66524 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@USequenceDesc@Ogre@@U12@@std@@YAXPAUSequenceDesc@Ogre@@ABU12@@Z PROC ; std::_Construct<Ogre::SequenceDesc,Ogre::SequenceDesc>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	16					; 00000010H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T66524[ebp], eax
	cmp	DWORD PTR $T66524[ebp], 0
	je	SHORT $LN3@Construct@2
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T66524[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T66524[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@Construct@2
$LN3@Construct@2:
	mov	DWORD PTR tv69[ebp], 0
$LN1@Construct@2:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@USequenceDesc@Ogre@@U12@@std@@YAXPAUSequenceDesc@Ogre@@ABU12@@Z ENDP ; std::_Construct<Ogre::SequenceDesc,Ogre::SequenceDesc>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEPBUTriggerDesc@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEPBUTriggerDesc@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEPBUTriggerDesc@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEPBUSequenceDesc@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEPBUSequenceDesc@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEPBUSequenceDesc@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEPBQAVBoneTrack@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEPBQAVBoneTrack@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEPBQAVBoneTrack@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEPBQAVMaterialParamTrack@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEPBQAVMaterialParamTrack@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEPBQAVMaterialParamTrack@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Checked_iterator_base
_TEXT	ENDS
EXTRN	??0RuntimeClass@Ogre@@QAE@PBDPBV01@HP6APAVBaseObject@1@XZ@Z:PROC ; Ogre::RuntimeClass::RuntimeClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematerialanimdata.cpp
;	COMDAT ??__E?m_RTTI@MaterialAnimData@Ogre@@2VRuntimeClass@2@B@@YAXXZ
text$yc	SEGMENT
??__E?m_RTTI@MaterialAnimData@Ogre@@2VRuntimeClass@2@B@@YAXXZ PROC ; `dynamic initializer for 'Ogre::MaterialAnimData::m_RTTI'', COMDAT

; 6    : 	IMPLEMENT_RTTI(MaterialAnimData, Resource, 100)

	push	ebp
	mov	ebp, esp
	push	OFFSET ?newObject@MaterialAnimData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::MaterialAnimData::newObject
	push	100					; 00000064H
	push	OFFSET ?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B ; Ogre::Resource::m_RTTI
	push	OFFSET $SG57494
	mov	ecx, OFFSET ?m_RTTI@MaterialAnimData@Ogre@@2VRuntimeClass@2@B ; Ogre::MaterialAnimData::m_RTTI
	call	??0RuntimeClass@Ogre@@QAE@PBDPBV01@HP6APAVBaseObject@1@XZ@Z ; Ogre::RuntimeClass::RuntimeClass
	pop	ebp
	ret	0
??__E?m_RTTI@MaterialAnimData@Ogre@@2VRuntimeClass@2@B@@YAXXZ ENDP ; `dynamic initializer for 'Ogre::MaterialAnimData::m_RTTI''
text$yc	ENDS
PUBLIC	?m_RTTI@MaterialAnimData@Ogre@@2VRuntimeClass@2@B ; Ogre::MaterialAnimData::m_RTTI
_BSS	SEGMENT
?m_RTTI@MaterialAnimData@Ogre@@2VRuntimeClass@2@B DB 014H DUP (?) ; Ogre::MaterialAnimData::m_RTTI
_BSS	ENDS
CRT$XCU	SEGMENT
?m_RTTI$initializer$@MaterialAnimData@Ogre@@2P6AXXZA DD FLAT:??__E?m_RTTI@MaterialAnimData@Ogre@@2VRuntimeClass@2@B@@YAXXZ ; Ogre::MaterialAnimData::m_RTTI$initializer$
CRT$XCU	ENDS
END
