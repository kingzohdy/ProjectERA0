; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\OgreMain\OgreMatrix4.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG5713
_DATA	ENDS
CONST	SEGMENT
$SG5713	DB	'bad allocation', 00H
	ORG $+1
_MAX_FLOAT DD	07f7fffffr			; 3.40282e+038
_ONE_PI	DD	040490fd0r			; 3.14159
_EPSILON DD	03727c5acr			; 1e-005
_RADS_PER_DEG DD 03c8efa35r			; 0.0174533
_DEGS_PER_RAD DD 042652ee1r			; 57.2958
	ORG $+4
_s_IdenArray DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_s_ZeroArray DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
PUBLIC	??_7DataStream@Ogre@@6B@			; Ogre::DataStream::`vftable'
PUBLIC	??0DataStream@Ogre@@QAE@XZ			; Ogre::DataStream::DataStream
PUBLIC	??_R4DataStream@Ogre@@6B@			; Ogre::DataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStream@Ogre@@@8			; Ogre::DataStream `RTTI Type Descriptor'
PUBLIC	??_R3DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStream@Ogre@@8		; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`vector deleting destructor'
PUBLIC	?size@DataStream@Ogre@@UBEIXZ			; Ogre::DataStream::size
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__purecall:PROC
EXTRN	?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::readLine
EXTRN	?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; Ogre::DataStream::getLine
EXTRN	?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; Ogre::DataStream::getAsString
EXTRN	?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::skipLine
;	COMDAT ??_R1A@?0A@EA@DataStream@Ogre@@8
; File i:\svnroot\client\ogremain\ogredatastream.h
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStream@Ogre@@8 DD FLAT:??_R0?AVDataStream@Ogre@@@8 ; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStream@Ogre@@8
rdata$r	SEGMENT
??_R2DataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8 ; Ogre::DataStream::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStream@Ogre@@8
rdata$r	SEGMENT
??_R3DataStream@Ogre@@8 DD 00H				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::DataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStream@Ogre@@6B@ DD 00H			; Ogre::DataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStream@Ogre@@@8
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStream@Ogre@@6B@
CONST	SEGMENT
??_7DataStream@Ogre@@6B@ DD FLAT:??_R4DataStream@Ogre@@6B@ ; Ogre::DataStream::`vftable'
	DD	FLAT:??_EDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0DataStream@Ogre@@QAE@XZ PROC				; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 68   : 		DataStream() : mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@XZ ENDP				; Ogre::DataStream::DataStream
PUBLIC	??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Ogre::DataStream::DataStream
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 70   : 		DataStream(const String& name) : mName(name), mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Ogre::DataStream::DataStream
PUBLIC	?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Ogre::DataStream::getName
; Function compile flags: /Odtp
;	COMDAT ?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Ogre::DataStream::getName, COMDAT
; _this$ = ecx

; 72   : 		const String& getName(void) { return mName; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Ogre::DataStream::getName
_TEXT	ENDS
PUBLIC	??1DataStream@Ogre@@UAE@XZ			; Ogre::DataStream::~DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1DataStream@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0
__ehfuncinfo$??1DataStream@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1DataStream@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1DataStream@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DataStream@Ogre@@UAE@XZ PROC				; Ogre::DataStream::~DataStream, COMDAT
; _this$ = ecx

; 73   : 		virtual ~DataStream() {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1DataStream@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1DataStream@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1DataStream@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1DataStream@Ogre@@UAE@XZ ENDP				; Ogre::DataStream::~DataStream
; Function compile flags: /Odtp
;	COMDAT ?size@DataStream@Ogre@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@DataStream@Ogre@@UBEIXZ PROC			; Ogre::DataStream::size, COMDAT
; _this$ = ecx

; 157  : 		virtual size_t size(void) const { return mSize; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?size@DataStream@Ogre@@UBEIXZ ENDP			; Ogre::DataStream::size
_TEXT	ENDS
PUBLIC	??0DataStream@Ogre@@QAE@ABV01@@Z		; Ogre::DataStream::DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV01@@Z PROC			; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::DataStream::DataStream
PUBLIC	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::DataStream::operator=
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::DataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::DataStream::operator=
_TEXT	ENDS
PUBLIC	??_GDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`scalar deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_EDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1DataStream@Ogre@@UAE@XZ	; Ogre::DataStream::~DataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	36					; 00000024H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ		; Ogre::MemoryDataStream::getPtr
; Function compile flags: /Odtp
;	COMDAT ?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC		; Ogre::MemoryDataStream::getPtr, COMDAT
; _this$ = ecx

; 267  : 		uchar* getPtr(void) { return mData; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP		; Ogre::MemoryDataStream::getPtr
_TEXT	ENDS
PUBLIC	?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ	; Ogre::MemoryDataStream::getCurrentPtr
; Function compile flags: /Odtp
;	COMDAT ?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC	; Ogre::MemoryDataStream::getCurrentPtr, COMDAT
; _this$ = ecx

; 270  : 		uchar* getCurrentPtr(void) { return mPos; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP	; Ogre::MemoryDataStream::getCurrentPtr
_TEXT	ENDS
PUBLIC	?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ	; Ogre::MemoryDataStream::getMemoryImage
; Function compile flags: /Odtp
;	COMDAT ?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ PROC	; Ogre::MemoryDataStream::getMemoryImage, COMDAT
; _this$ = ecx

; 307  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 			return mData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]

; 309  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ ENDP	; Ogre::MemoryDataStream::getMemoryImage
_TEXT	ENDS
PUBLIC	?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ; Ogre::MemoryDataStream::setFreeOnClose
; Function compile flags: /Odtp
;	COMDAT ?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_freeOnClose$ = 8					; size = 4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z PROC ; Ogre::MemoryDataStream::setFreeOnClose, COMDAT
; _this$ = ecx

; 313  : 		void setFreeOnClose(void (*freeOnClose)(void *)) { mFreeOnClose = freeOnClose; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _freeOnClose$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ENDP ; Ogre::MemoryDataStream::setFreeOnClose
_TEXT	ENDS
PUBLIC	??_7MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`vftable'
PUBLIC	??0MemoryDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??_R4MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMemoryDataStream@Ogre@@@8		; Ogre::MemoryDataStream `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDataStream@Ogre@@8		; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`vector deleting destructor'
EXTRN	?read@MemoryDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::MemoryDataStream::read
EXTRN	?write@MemoryDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::MemoryDataStream::write
EXTRN	?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::readLine
EXTRN	?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::skipLine
EXTRN	?skip@MemoryDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::MemoryDataStream::skip
EXTRN	?seek@MemoryDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::MemoryDataStream::seek
EXTRN	?tell@MemoryDataStream@Ogre@@UBEIXZ:PROC	; Ogre::MemoryDataStream::tell
EXTRN	?eof@MemoryDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::MemoryDataStream::eof
EXTRN	?close@MemoryDataStream@Ogre@@UAEXXZ:PROC	; Ogre::MemoryDataStream::close
;	COMDAT ??_R1A@?0A@EA@MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 DD FLAT:??_R0?AVMemoryDataStream@Ogre@@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDataStream@Ogre@@8 DD 00H			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MemoryDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4MemoryDataStream@Ogre@@6B@ DD 00H			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMemoryDataStream@Ogre@@@8
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7MemoryDataStream@Ogre@@6B@
CONST	SEGMENT
??_7MemoryDataStream@Ogre@@6B@ DD FLAT:??_R4MemoryDataStream@Ogre@@6B@ ; Ogre::MemoryDataStream::`vftable'
	DD	FLAT:??_EMemoryDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@MemoryDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@MemoryDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@MemoryDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@MemoryDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@MemoryDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@MemoryDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@MemoryDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::MemoryDataStream::MemoryDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7MemoryDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+44], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+48], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+44], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+48], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`scalar deleting destructor'
EXTRN	??1MemoryDataStream@Ogre@@UAE@XZ:PROC		; Ogre::MemoryDataStream::~MemoryDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@2
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`vftable'
PUBLIC	??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??_R4FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileStreamDataStream@Ogre@@@8		; Ogre::FileStreamDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8	; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`vector deleting destructor'
EXTRN	?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileStreamDataStream::read
EXTRN	?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileStreamDataStream::write
EXTRN	?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::FileStreamDataStream::readLine
EXTRN	?skip@FileStreamDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileStreamDataStream::skip
EXTRN	?seek@FileStreamDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileStreamDataStream::seek
EXTRN	?tell@FileStreamDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileStreamDataStream::tell
EXTRN	?eof@FileStreamDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileStreamDataStream::eof
EXTRN	?close@FileStreamDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileStreamDataStream::close
EXTRN	?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileStreamDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 DD FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileStreamDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileStreamDataStream@Ogre@@8 DD 00H		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileStreamDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileStreamDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileStreamDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileStreamDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileStreamDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileStreamDataStream@Ogre@@6B@ DD 00H		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileStreamDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileStreamDataStream@Ogre@@6B@ DD FLAT:??_R4FileStreamDataStream@Ogre@@6B@ ; Ogre::FileStreamDataStream::`vftable'
	DD	FLAT:??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileStreamDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileStreamDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileStreamDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileStreamDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileStreamDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileStreamDataStream::FileStreamDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileStreamDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+40]
	mov	BYTE PTR [edx+40], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileStreamDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileStreamDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+40]
	mov	BYTE PTR [ecx+40], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileStreamDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`scalar deleting destructor'
EXTRN	??1FileStreamDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileStreamDataStream::~FileStreamDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1FileStreamDataStream@Ogre@@UAE@XZ ; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@3
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`vftable'
PUBLIC	??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??_R4FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileHandleDataStream@Ogre@@@8		; Ogre::FileHandleDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8	; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`vector deleting destructor'
EXTRN	?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileHandleDataStream::read
EXTRN	?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileHandleDataStream::write
EXTRN	?skip@FileHandleDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileHandleDataStream::skip
EXTRN	?seek@FileHandleDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileHandleDataStream::seek
EXTRN	?tell@FileHandleDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileHandleDataStream::tell
EXTRN	?eof@FileHandleDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileHandleDataStream::eof
EXTRN	?close@FileHandleDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileHandleDataStream::close
EXTRN	?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileHandleDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 DD FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileHandleDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileHandleDataStream@Ogre@@8 DD 00H		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileHandleDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileHandleDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileHandleDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileHandleDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileHandleDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileHandleDataStream@Ogre@@6B@ DD 00H		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileHandleDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileHandleDataStream@Ogre@@6B@ DD FLAT:??_R4FileHandleDataStream@Ogre@@6B@ ; Ogre::FileHandleDataStream::`vftable'
	DD	FLAT:??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileHandleDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileHandleDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileHandleDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileHandleDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileHandleDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileHandleDataStream::FileHandleDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileHandleDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileHandleDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileHandleDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileHandleDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`scalar deleting destructor'
EXTRN	??1FileHandleDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileHandleDataStream::~FileHandleDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@4
	push	OFFSET ??1FileHandleDataStream@Ogre@@UAE@XZ ; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@4
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@4
$LN3@vector@4:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@4:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`vftable'
PUBLIC	??1DataStreamObject@Ogre@@MAE@XZ		; Ogre::DataStreamObject::~DataStreamObject
PUBLIC	??_R4DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStreamObject@Ogre@@@8		; Ogre::DataStreamObject `RTTI Type Descriptor'
PUBLIC	??_R3DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStreamObject@Ogre@@8		; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStreamObject@Ogre@@8 DD FLAT:??_R0?AVDataStreamObject@Ogre@@@8 ; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R2DataStreamObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStreamObject@Ogre@@8 ; Ogre::DataStreamObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R3DataStreamObject@Ogre@@8 DD 00H			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStreamObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStreamObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::DataStreamObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStreamObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStreamObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStreamObject@Ogre@@6B@ DD 00H			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStreamObject@Ogre@@@8
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStreamObject@Ogre@@6B@
CONST	SEGMENT
??_7DataStreamObject@Ogre@@6B@ DD FLAT:??_R4DataStreamObject@Ogre@@6B@ ; Ogre::DataStreamObject::`vftable'
	DD	FLAT:??_EDataStreamObject@Ogre@@MAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??1DataStreamObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DataStreamObject@Ogre@@MAE@XZ PROC			; Ogre::DataStreamObject::~DataStreamObject, COMDAT
; _this$ = ecx

; 445  : 		virtual ~DataStreamObject(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1DataStreamObject@Ogre@@MAE@XZ ENDP			; Ogre::DataStreamObject::~DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@XZ		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DataStreamObject@Ogre@@QAE@XZ PROC			; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DataStreamObject@Ogre@@QAE@XZ ENDP			; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@ABV01@@Z		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z PROC		; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::DataStreamObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::DataStreamObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::DataStreamObject::operator=
_TEXT	ENDS
PUBLIC	??_GDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@5
	push	OFFSET ??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@5
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@5
$LN3@vector@5:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@5:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`vftable'
PUBLIC	??0ObjectDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??_R4ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVObjectDataStream@Ogre@@@8		; Ogre::ObjectDataStream `RTTI Type Descriptor'
PUBLIC	??_R3ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ObjectDataStream@Ogre@@8		; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`vector deleting destructor'
EXTRN	?read@ObjectDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::ObjectDataStream::read
EXTRN	?write@ObjectDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::ObjectDataStream::write
EXTRN	?skip@ObjectDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::ObjectDataStream::skip
EXTRN	?seek@ObjectDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::ObjectDataStream::seek
EXTRN	?tell@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::tell
EXTRN	?eof@ObjectDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::ObjectDataStream::eof
EXTRN	?size@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::size
EXTRN	?close@ObjectDataStream@Ogre@@UAEXXZ:PROC	; Ogre::ObjectDataStream::close
EXTRN	?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::ObjectDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 DD FLAT:??_R0?AVObjectDataStream@Ogre@@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2ObjectDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3ObjectDataStream@Ogre@@8 DD 00H			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVObjectDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVObjectDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::ObjectDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVObjectDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ObjectDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4ObjectDataStream@Ogre@@6B@ DD 00H			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVObjectDataStream@Ogre@@@8
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7ObjectDataStream@Ogre@@6B@
CONST	SEGMENT
??_7ObjectDataStream@Ogre@@6B@ DD FLAT:??_R4ObjectDataStream@Ogre@@6B@ ; Ogre::ObjectDataStream::`vftable'
	DD	FLAT:??_EObjectDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@ObjectDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@ObjectDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@ObjectDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@ObjectDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@ObjectDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@ObjectDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::ObjectDataStream::ObjectDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ObjectDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::ObjectDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::ObjectDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::ObjectDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`scalar deleting destructor'
EXTRN	??1ObjectDataStream@Ogre@@UAE@XZ:PROC		; Ogre::ObjectDataStream::~ObjectDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@6
	push	OFFSET ??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@6
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@6
$LN3@vector@6:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@6:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDelegation::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDelegation::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDelegation::operator=
_TEXT	ENDS
PUBLIC	?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ	; Ogre::RuntimeClass::getBaseClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebaseobject.h
;	COMDAT ?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ PROC	; Ogre::RuntimeClass::getBaseClass, COMDAT
; _this$ = ecx

; 20   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 21   : 			return m_pBaseClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 22   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ ENDP	; Ogre::RuntimeClass::getBaseClass
_TEXT	ENDS
PUBLIC	?getClassName@RuntimeClass@Ogre@@QBEPBDXZ	; Ogre::RuntimeClass::getClassName
; Function compile flags: /Odtp
;	COMDAT ?getClassName@RuntimeClass@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ PROC		; Ogre::RuntimeClass::getClassName, COMDAT
; _this$ = ecx

; 25   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 26   : 			return m_pClassName; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ ENDP		; Ogre::RuntimeClass::getClassName
_TEXT	ENDS
PUBLIC	?getVersion@RuntimeClass@Ogre@@QBEHXZ		; Ogre::RuntimeClass::getVersion
; Function compile flags: /Odtp
;	COMDAT ?getVersion@RuntimeClass@Ogre@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVersion@RuntimeClass@Ogre@@QBEHXZ PROC		; Ogre::RuntimeClass::getVersion, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Version;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getVersion@RuntimeClass@Ogre@@QBEHXZ ENDP		; Ogre::RuntimeClass::getVersion
_TEXT	ENDS
PUBLIC	?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ; Ogre::RuntimeClass::newObject
; Function compile flags: /Odtp
;	COMDAT ?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ PROC ; Ogre::RuntimeClass::newObject, COMDAT
; _this$ = ecx

; 35   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 			return (*m_pNewFunc)();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx

; 37   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ENDP ; Ogre::RuntimeClass::newObject
_TEXT	ENDS
PUBLIC	??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::RuntimeClass::operator=
; Function compile flags: /Odtp
;	COMDAT ??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::RuntimeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::RuntimeClass::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::BaseObject::getRTTI
EXTRN	?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::BaseObject::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::BaseObject::getRTTI, COMDAT
; _this$ = ecx

; 56   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 			return &m_RTTI;

	mov	eax, OFFSET ?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B ; Ogre::BaseObject::m_RTTI

; 58   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::BaseObject::getRTTI
_TEXT	ENDS
PUBLIC	?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ; Ogre::BaseObject::isExactKindOf
; Function compile flags: /Odtp
;	COMDAT ?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_prtti$ = 8						; size = 4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z PROC ; Ogre::BaseObject::isExactKindOf, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			return (getRTTI() == prtti);

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	xor	ecx, ecx
	cmp	eax, DWORD PTR _prtti$[ebp]
	sete	cl
	mov	al, cl

; 63   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ENDP ; Ogre::BaseObject::isExactKindOf
_TEXT	ENDS
PUBLIC	?release@BaseObject@Ogre@@UAEXXZ		; Ogre::BaseObject::release
; Function compile flags: /Odtp
;	COMDAT ?release@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?release@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::release, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			m_RefCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 70   : 			if(m_RefCount <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN2@release

; 71   : 			{
; 72   : 				deleteThis();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
$LN2@release:

; 73   : 			}
; 74   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?release@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::release
_TEXT	ENDS
PUBLIC	?addRef@BaseObject@Ogre@@UAEXXZ			; Ogre::BaseObject::addRef
; Function compile flags: /Odtp
;	COMDAT ?addRef@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?addRef@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::addRef, COMDAT
; _this$ = ecx

; 77   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 			m_RefCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 79   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?addRef@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::addRef
_TEXT	ENDS
PUBLIC	?getRefCount@BaseObject@Ogre@@UAEHXZ		; Ogre::BaseObject::getRefCount
; Function compile flags: /Odtp
;	COMDAT ?getRefCount@BaseObject@Ogre@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRefCount@BaseObject@Ogre@@UAEHXZ PROC		; Ogre::BaseObject::getRefCount, COMDAT
; _this$ = ecx

; 82   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 			return m_RefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 84   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRefCount@BaseObject@Ogre@@UAEHXZ ENDP		; Ogre::BaseObject::getRefCount
_TEXT	ENDS
PUBLIC	?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::BaseObject::_serialize
; Function compile flags: /Odtp
;	COMDAT ?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z PROC	; Ogre::BaseObject::_serialize, COMDAT
; _this$ = ecx

; 87   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ENDP	; Ogre::BaseObject::_serialize
_TEXT	ENDS
PUBLIC	??_7BaseObject@Ogre@@6B@			; Ogre::BaseObject::`vftable'
PUBLIC	??0BaseObject@Ogre@@IAE@XZ			; Ogre::BaseObject::BaseObject
PUBLIC	??_R4BaseObject@Ogre@@6B@			; Ogre::BaseObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBaseObject@Ogre@@@8			; Ogre::BaseObject `RTTI Type Descriptor'
PUBLIC	??_R3BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BaseObject@Ogre@@8		; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVMemoryDelegation@Ogre@@@8		; Ogre::MemoryDelegation `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`vector deleting destructor'
PUBLIC	?deleteThis@BaseObject@Ogre@@MAEXXZ		; Ogre::BaseObject::deleteThis
;	COMDAT ??_R1A@?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDelegation@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDelegation@Ogre@@8 DD 00H			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDelegation@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDelegation@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDelegation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDelegation@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R13?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BaseObject@Ogre@@8 DD FLAT:??_R0?AVBaseObject@Ogre@@@8 ; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R2BaseObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8 ; Ogre::BaseObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R3BaseObject@Ogre@@8 DD 00H				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBaseObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVBaseObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::BaseObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBaseObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BaseObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4BaseObject@Ogre@@6B@ DD 00H			; Ogre::BaseObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBaseObject@Ogre@@@8
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7BaseObject@Ogre@@6B@
CONST	SEGMENT
??_7BaseObject@Ogre@@6B@ DD FLAT:??_R4BaseObject@Ogre@@6B@ ; Ogre::BaseObject::`vftable'
	DD	FLAT:?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EBaseObject@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0BaseObject@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BaseObject@Ogre@@IAE@XZ PROC				; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx

; 92   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 1

; 93   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BaseObject@Ogre@@IAE@XZ ENDP				; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??1BaseObject@Ogre@@MAE@XZ			; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
;	COMDAT ??1BaseObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BaseObject@Ogre@@MAE@XZ PROC				; Ogre::BaseObject::~BaseObject, COMDAT
; _this$ = ecx

; 96   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1BaseObject@Ogre@@MAE@XZ ENDP				; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deleteThis@BaseObject@Ogre@@MAEXXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T63091 = -8						; size = 4
$T63090 = -4						; size = 4
?deleteThis@BaseObject@Ogre@@MAEXXZ PROC		; Ogre::BaseObject::deleteThis, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 			delete this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T63091[ebp], eax
	mov	ecx, DWORD PTR $T63091[ebp]
	mov	DWORD PTR $T63090[ebp], ecx
	cmp	DWORD PTR $T63090[ebp], 0
	je	SHORT $LN3@deleteThis
	push	1
	mov	edx, DWORD PTR $T63090[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T63090[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN1@deleteThis
$LN3@deleteThis:
	mov	DWORD PTR tv70[ebp], 0
$LN1@deleteThis:

; 102  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?deleteThis@BaseObject@Ogre@@MAEXXZ ENDP		; Ogre::BaseObject::deleteThis
_TEXT	ENDS
PUBLIC	??0BaseObject@Ogre@@QAE@ABV01@@Z		; Ogre::BaseObject::BaseObject
; Function compile flags: /Odtp
;	COMDAT ??0BaseObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0BaseObject@Ogre@@QAE@ABV01@@Z PROC			; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@BaseObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@BaseObject
$LN3@BaseObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@BaseObject:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BaseObject@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BaseObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BaseObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BaseObject::operator=
_TEXT	ENDS
PUBLIC	??_GBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`scalar deleting destructor'
EXTRN	??3MemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VMemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete[]
; Function compile flags: /Odtp
;	COMDAT ??_EBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@7
	push	OFFSET ??1BaseObject@Ogre@@MAE@XZ	; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@7
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@7
$LN3@vector@7:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@7
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@7:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Archive@Ogre@@6B@				; Ogre::Archive::`vftable'
PUBLIC	??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z	; Ogre::Archive::Archive
PUBLIC	??_R4Archive@Ogre@@6B@				; Ogre::Archive::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVArchive@Ogre@@@8			; Ogre::Archive `RTTI Type Descriptor'
PUBLIC	??_R3Archive@Ogre@@8				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Archive@Ogre@@8				; Ogre::Archive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Archive@Ogre@@8			; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Archive@Ogre@@8
; File i:\svnroot\client\ogremain\ogrearchive.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Archive@Ogre@@8 DD FLAT:??_R0?AVArchive@Ogre@@@8 ; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Archive@Ogre@@8
rdata$r	SEGMENT
??_R2Archive@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Archive@Ogre@@8 ; Ogre::Archive::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Archive@Ogre@@8
rdata$r	SEGMENT
??_R3Archive@Ogre@@8 DD 00H				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVArchive@Ogre@@@8
_DATA	SEGMENT
??_R0?AVArchive@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Archive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArchive@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Archive@Ogre@@6B@
rdata$r	SEGMENT
??_R4Archive@Ogre@@6B@ DD 00H				; Ogre::Archive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArchive@Ogre@@@8
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Archive@Ogre@@6B@
CONST	SEGMENT
??_7Archive@Ogre@@6B@ DD FLAT:??_R4Archive@Ogre@@6B@	; Ogre::Archive::`vftable'
	DD	FLAT:??_EArchive@Ogre@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstream$ = 8						; size = 4
_mode$ = 12						; size = 4
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z PROC		; Ogre::Archive::Archive, COMDAT
; _this$ = ecx

; 22   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pstream$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 23   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z ENDP		; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??1Archive@Ogre@@UAE@XZ				; Ogre::Archive::~Archive
; Function compile flags: /Odtp
;	COMDAT ??1Archive@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Archive@Ogre@@UAE@XZ PROC				; Ogre::Archive::~Archive, COMDAT
; _this$ = ecx

; 26   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1Archive@Ogre@@UAE@XZ ENDP				; Ogre::Archive::~Archive
_TEXT	ENDS
PUBLIC	?isLoading@Archive@Ogre@@QAE_NXZ		; Ogre::Archive::isLoading
; Function compile flags: /Odtp
;	COMDAT ?isLoading@Archive@Ogre@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isLoading@Archive@Ogre@@QAE_NXZ PROC			; Ogre::Archive::isLoading, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Mode==MODE_LOAD;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+8], 1
	sete	cl
	mov	al, cl

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?isLoading@Archive@Ogre@@QAE_NXZ ENDP			; Ogre::Archive::isLoading
_TEXT	ENDS
PUBLIC	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z	; Ogre::Archive::serialize
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAD@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAD@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 108  : 		SERIALIZE_PRIMITIVE_FUNC(char)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAD@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAF@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAF@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 109  : 		SERIALIZE_PRIMITIVE_FUNC(short)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAF@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAH@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAH@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 110  : 		SERIALIZE_PRIMITIVE_FUNC(int)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAH@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_J@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_J@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 111  : 		SERIALIZE_PRIMITIVE_FUNC(int64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_J@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAE@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAE@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 112  : 		SERIALIZE_PRIMITIVE_FUNC(uchar)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAE@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAG@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAG@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 113  : 		SERIALIZE_PRIMITIVE_FUNC(ushort)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAG@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAI@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAI@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 114  : 		SERIALIZE_PRIMITIVE_FUNC(uint)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAI@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_K@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_K@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 115  : 		SERIALIZE_PRIMITIVE_FUNC(uint64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_K@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_N@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_N@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 116  : 		SERIALIZE_PRIMITIVE_FUNC(bool)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_N@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAM@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAM@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 117  : 		SERIALIZE_PRIMITIVE_FUNC(float)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAM@Z ENDP			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z PROC		; Ogre::Archive::serialize, COMDAT
; _this$ = ecx

; 155  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 			if(isLoading()) m_pStream->read(pbuf, len);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@serialize
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	jmp	SHORT $LN1@serialize
$LN2@serialize:

; 157  : 			else m_pStream->write(pbuf, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN1@serialize:

; 158  : 
; 159  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 160  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ENDP		; Ogre::Archive::serialize
_TEXT	ENDS
PUBLIC	?read@Archive@Ogre@@QAEXPAXI@Z			; Ogre::Archive::read
; Function compile flags: /Odtp
;	COMDAT ?read@Archive@Ogre@@QAEXPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?read@Archive@Ogre@@QAEXPAXI@Z PROC			; Ogre::Archive::read, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			m_pStream->read(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 165  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?read@Archive@Ogre@@QAEXPAXI@Z ENDP			; Ogre::Archive::read
_TEXT	ENDS
PUBLIC	?write@Archive@Ogre@@QAEXPBXI@Z			; Ogre::Archive::write
; Function compile flags: /Odtp
;	COMDAT ?write@Archive@Ogre@@QAEXPBXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?write@Archive@Ogre@@QAEXPBXI@Z PROC			; Ogre::Archive::write, COMDAT
; _this$ = ecx

; 168  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 			m_pStream->write(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 170  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?write@Archive@Ogre@@QAEXPBXI@Z ENDP			; Ogre::Archive::write
_TEXT	ENDS
PUBLIC	??0Archive@Ogre@@QAE@ABV01@@Z			; Ogre::Archive::Archive
; Function compile flags: /Odtp
;	COMDAT ??0Archive@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Archive@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Archive::Archive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Archive@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??4Archive@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Archive::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Archive@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Archive::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Archive::operator=
_TEXT	ENDS
PUBLIC	??_GArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@8
	push	OFFSET ??1Archive@Ogre@@UAE@XZ		; Ogre::Archive::~Archive
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@8
$LN3@vector@8:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@8:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@XZ				; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ??0Vector3@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector3@Ogre@@QAE@XZ PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 49   : 		Vector3(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@Ogre@@QAE@XZ ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@ABV01@@Z			; Ogre::Vector3::Vector3
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0Vector3@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 50   : 		Vector3(const Vector3 &rhs)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		{
; 52   : 			x = rhs.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 53   : 			y = rhs.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 54   : 			z = rhs.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 55   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@MMM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
??0Vector3@Ogre@@QAE@MMM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 56   : 		Vector3( float x1, float y1, float z1 ) : x(x1), y(y1), z(z1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector3@Ogre@@QAE@MMM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@M@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@M@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 57   : 		Vector3(float v) : x(v), y(v), z(v){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@M@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@PAM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@PAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@PAM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 58   : 		Vector3(float* v) : x(v[0]), y(v[1]), z(v[2]){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@PAM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??4Vector3@Ogre@@QAEABV01@ABV01@@Z		; Ogre::Vector3::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Vector3@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z PROC			; Ogre::Vector3::operator=, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			x = vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 63   : 			y = vec.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 64   : 			z = vec.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 65   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 66   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z ENDP			; Ogre::Vector3::operator=
_TEXT	ENDS
PUBLIC	??YVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??YVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator+=, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			x += vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 70   : 			y += vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 71   : 			z += vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 72   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator+=
_TEXT	ENDS
PUBLIC	??ZVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??ZVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator-=, COMDAT
; _this$ = ecx

; 74   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 			x -= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 76   : 			y -= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 77   : 			z -= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 78   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator-=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XVector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 81   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 			x *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 83   : 			y *= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 84   : 			z *= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 85   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??XVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 88   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 			x *= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 90   : 			y *= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 91   : 			z *= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 92   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??_0Vector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator/=
; Function compile flags: /Odtp
;	COMDAT ??_0Vector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??_0Vector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator/=, COMDAT
; _this$ = ecx

; 95   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 			x /= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 97   : 			y /= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fdiv	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 98   : 			z /= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fdiv	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 99   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??_0Vector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator/=
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QAEPAMXZ			; Ogre::Vector3::operator float *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QAEPAMXZ PROC				; Ogre::Vector3::operator float *, COMDAT
; _this$ = ecx

; 101  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 103  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QAEPAMXZ ENDP				; Ogre::Vector3::operator float *
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QBEPBMXZ			; Ogre::Vector3::operator float const *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QBEPBMXZ PROC				; Ogre::Vector3::operator float const *, COMDAT
; _this$ = ecx

; 105  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 107  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QBEPBMXZ ENDP				; Ogre::Vector3::operator float const *
_TEXT	ENDS
PUBLIC	??HVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator+
; Function compile flags: /Odtp
;	COMDAT ??HVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??HVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator+, COMDAT
; _this$ = ecx

; 109  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??HVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator+
_TEXT	ENDS
PUBLIC	??GVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator-
; Function compile flags: /Odtp
;	COMDAT ??GVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??GVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator-, COMDAT
; _this$ = ecx

; 113  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 			return Vector3(-x, -y, -z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 115  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??GVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator-
_TEXT	ENDS
PUBLIC	??8Vector3@Ogre@@QBE_NABV01@@Z			; Ogre::Vector3::operator==
; Function compile flags: /Odtp
;	COMDAT ??8Vector3@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??8Vector3@Ogre@@QBE_NABV01@@Z PROC			; Ogre::Vector3::operator==, COMDAT
; _this$ = ecx

; 117  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 			return (x==vec.x && y==vec.y && z==vec.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv77[ebp]

; 119  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector3@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::Vector3::operator==
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXMMM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
?setElement@Vector3@Ogre@@QAEXMMM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			x = x1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]

; 123  : 			y = y1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]

; 124  : 			z = z1;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]

; 125  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setElement@Vector3@Ogre@@QAEXMMM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXPAM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXPAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?setElement@Vector3@Ogre@@QAEXPAM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 127  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 			x = p[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 129  : 			y = p[1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 130  : 			z = p[2];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 131  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setElement@Vector3@Ogre@@QAEXPAM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?Sqrt@Ogre@@YAMM@Z				; Ogre::Sqrt
PUBLIC	?length@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::length
; Function compile flags: /Odtp
;	COMDAT ?length@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?length@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::length, COMDAT
; _this$ = ecx

; 133  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 			return (float)Sqrt(x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@Ogre@@YAMM@Z			; Ogre::Sqrt
	add	esp, 4

; 135  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::length
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
;	COMDAT ?Sqrt@Ogre@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Sqrt@Ogre@@YAMM@Z PROC					; Ogre::Sqrt, COMDAT

; 59   : 	{

	push	ebp
	mov	ebp, esp

; 60   : 		return (float)sqrt(x);

	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 61   : 	}

	pop	ebp
	ret	0
?Sqrt@Ogre@@YAMM@Z ENDP					; Ogre::Sqrt
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?lengthSqr@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::lengthSqr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ?lengthSqr@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?lengthSqr@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::lengthSqr, COMDAT
; _this$ = ecx

; 137  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 			return (x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]

; 139  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?lengthSqr@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::lengthSqr
_TEXT	ENDS
PUBLIC	?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix3::getRow3
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix3.h
;	COMDAT ?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z PROC		; Ogre::Matrix3::getRow3, COMDAT
; _this$ = ecx

; 67   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 			return Vector3(m[i][0], m[i][1], m[i][2]);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax+8]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx+4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 69   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getRow3@Matrix3@Ogre@@QBE?AVVector3@2@I@Z ENDP		; Ogre::Matrix3::getRow3
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	?identity@Matrix3@Ogre@@QAEXXZ			; Ogre::Matrix3::identity
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?identity@Matrix3@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?identity@Matrix3@Ogre@@QAEXXZ PROC			; Ogre::Matrix3::identity, COMDAT
; _this$ = ecx

; 71   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 72   : 			_11=1.0f, _12=0.0f, _13=0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+8]

; 73   : 			_21=0.0f, _22=1.0f, _23=0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+20]

; 74   : 			_31=0.0f, _32=0.0f, _33=1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [edx+32]

; 75   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?identity@Matrix3@Ogre@@QAEXXZ ENDP			; Ogre::Matrix3::identity
_TEXT	ENDS
PUBLIC	?setRow@Matrix3@Ogre@@QAEXIMMM@Z		; Ogre::Matrix3::setRow
; Function compile flags: /Odtp
;	COMDAT ?setRow@Matrix3@Ogre@@QAEXIMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?setRow@Matrix3@Ogre@@QAEXIMMM@Z PROC			; Ogre::Matrix3::setRow, COMDAT
; _this$ = ecx

; 77   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 			m[i][0] = x;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [ecx+eax]

; 79   : 			m[i][1] = y;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+edx+4]

; 80   : 			m[i][2] = z;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [edx+ecx+8]

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?setRow@Matrix3@Ogre@@QAEXIMMM@Z ENDP			; Ogre::Matrix3::setRow
_TEXT	ENDS
PUBLIC	?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix3::getColumn
; Function compile flags: /Odtp
;	COMDAT ?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z PROC	; Ogre::Matrix3::getColumn, COMDAT
; _this$ = ecx

; 84   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 			return Vector3(m[0][i], m[1][i], m[2][i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4+24]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx*4+12]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx*4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 86   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getColumn@Matrix3@Ogre@@QBE?AVVector3@2@I@Z ENDP	; Ogre::Matrix3::getColumn
_TEXT	ENDS
PUBLIC	?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z		; Ogre::Matrix3::makeScaleMatrix
EXTRN	?makeScaleMatrix@Matrix3@Ogre@@QAEXABVVector3@2@@Z:PROC ; Ogre::Matrix3::makeScaleMatrix
; Function compile flags: /Odtp
;	COMDAT ?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T63207 = -12						; size = 12
_s$ = 8							; size = 4
?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z PROC		; Ogre::Matrix3::makeScaleMatrix, COMDAT
; _this$ = ecx

; 93   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 94   : 			makeScaleMatrix(Vector3(s, s, s));

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T63207[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?makeScaleMatrix@Matrix3@Ogre@@QAEXABVVector3@2@@Z ; Ogre::Matrix3::makeScaleMatrix

; 95   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?makeScaleMatrix@Matrix3@Ogre@@QAEXM@Z ENDP		; Ogre::Matrix3::makeScaleMatrix
_TEXT	ENDS
PUBLIC	??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Matrix3::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Matrix3::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, DWORD PTR ___that$[ebp]
	mov	ecx, 9
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix3@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Matrix3::operator=
_TEXT	ENDS
PUBLIC	??AMatrix4@Ogre@@QBEPBMI@Z			; Ogre::Matrix4::operator[]
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.h
;	COMDAT ??AMatrix4@Ogre@@QBEPBMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_irow$ = 8						; size = 4
??AMatrix4@Ogre@@QBEPBMI@Z PROC				; Ogre::Matrix4::operator[], COMDAT
; _this$ = ecx

; 88   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 			return &m[irow][0];

	mov	eax, DWORD PTR _irow$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]

; 90   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@Ogre@@QBEPBMI@Z ENDP				; Ogre::Matrix4::operator[]
_TEXT	ENDS
PUBLIC	??AMatrix4@Ogre@@QAEPAMI@Z			; Ogre::Matrix4::operator[]
; Function compile flags: /Odtp
;	COMDAT ??AMatrix4@Ogre@@QAEPAMI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_irow$ = 8						; size = 4
??AMatrix4@Ogre@@QAEPAMI@Z PROC				; Ogre::Matrix4::operator[], COMDAT
; _this$ = ecx

; 92   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 			return &m[irow][0];

	mov	eax, DWORD PTR _irow$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]

; 94   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??AMatrix4@Ogre@@QAEPAMI@Z ENDP				; Ogre::Matrix4::operator[]
_TEXT	ENDS
PUBLIC	?makeScaleMatrix@Matrix4@Ogre@@QAEXABVVector3@2@@Z ; Ogre::Matrix4::makeScaleMatrix
PUBLIC	?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z		; Ogre::Matrix4::makeScaleMatrix
; Function compile flags: /Odtp
;	COMDAT ?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T63216 = -12						; size = 12
_s$ = 8							; size = 4
?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z PROC		; Ogre::Matrix4::makeScaleMatrix, COMDAT
; _this$ = ecx

; 101  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 			makeScaleMatrix(Vector3(s, s, s));

	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _s$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T63216[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?makeScaleMatrix@Matrix4@Ogre@@QAEXABVVector3@2@@Z ; Ogre::Matrix4::makeScaleMatrix

; 103  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?makeScaleMatrix@Matrix4@Ogre@@QAEXM@Z ENDP		; Ogre::Matrix4::makeScaleMatrix
_TEXT	ENDS
PUBLIC	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z		; Ogre::Matrix4::setRow
; Function compile flags: /Odtp
;	COMDAT ?setRow@Matrix4@Ogre@@QAEXIMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_w$ = 24						; size = 4
?setRow@Matrix4@Ogre@@QAEXIMMMM@Z PROC			; Ogre::Matrix4::setRow, COMDAT
; _this$ = ecx

; 133  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 			m[i][0] = x;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [ecx+eax]

; 135  : 			m[i][1] = y;

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+edx+4]

; 136  : 			m[i][2] = z;

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [edx+ecx+8]

; 137  : 			m[i][3] = w;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [ecx+eax+12]

; 138  : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?setRow@Matrix4@Ogre@@QAEXIMMMM@Z ENDP			; Ogre::Matrix4::setRow
_TEXT	ENDS
PUBLIC	?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z		; Ogre::Matrix4::setColumn
; Function compile flags: /Odtp
;	COMDAT ?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_w$ = 24						; size = 4
?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z PROC		; Ogre::Matrix4::setColumn, COMDAT
; _this$ = ecx

; 140  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 			m[0][i] = x;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [ecx+eax*4]

; 142  : 			m[1][i] = y;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+edx*4+16]

; 143  : 			m[2][i] = z;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [edx+ecx*4+32]

; 144  : 			m[3][i] = w;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [ecx+eax*4+48]

; 145  : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?setColumn@Matrix4@Ogre@@QAEXIMMMM@Z ENDP		; Ogre::Matrix4::setColumn
_TEXT	ENDS
PUBLIC	?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix4::getRow3
; Function compile flags: /Odtp
;	COMDAT ?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z PROC		; Ogre::Matrix4::getRow3, COMDAT
; _this$ = ecx

; 147  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 			return Vector3(m[i][0], m[i][1], m[i][2]);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax+8]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx+4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 149  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z ENDP		; Ogre::Matrix4::getRow3
_TEXT	ENDS
PUBLIC	?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z	; Ogre::Matrix4::getColumn3
; Function compile flags: /Odtp
;	COMDAT ?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z PROC	; Ogre::Matrix4::getColumn3, COMDAT
; _this$ = ecx

; 151  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 			return Vector3(m[0][i], m[1][i], m[2][i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4+32]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx*4+16]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx*4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 153  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getColumn3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z ENDP	; Ogre::Matrix4::getColumn3
_TEXT	ENDS
PUBLIC	??0Vector4@Ogre@@QAE@MMMM@Z			; Ogre::Vector4::Vector4
PUBLIC	?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z	; Ogre::Matrix4::getRow4
; Function compile flags: /Odtp
;	COMDAT ?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z PROC		; Ogre::Matrix4::getRow4, COMDAT
; _this$ = ecx

; 155  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 			return Vector4(m[i][0], m[i][1], m[i][2], m[i][3]);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax+12]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx+8]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx+4]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector4@Ogre@@QAE@MMMM@Z		; Ogre::Vector4::Vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 157  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getRow4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z ENDP		; Ogre::Matrix4::getRow4
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector4.h
_TEXT	ENDS
;	COMDAT ??0Vector4@Ogre@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
_w1$ = 20						; size = 4
??0Vector4@Ogre@@QAE@MMMM@Z PROC			; Ogre::Vector4::Vector4, COMDAT
; _this$ = ecx

; 44   : 		Vector4( float x1, float y1, float z1, float w1 ) : x(x1), y(y1), z(z1), w(w1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w1$[ebp]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Vector4@Ogre@@QAE@MMMM@Z ENDP			; Ogre::Vector4::Vector4
_TEXT	ENDS
PUBLIC	?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z	; Ogre::Matrix4::getColumn4
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.h
;	COMDAT ?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z PROC	; Ogre::Matrix4::getColumn4, COMDAT
; _this$ = ecx

; 159  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 			return Vector4(m[0][i], m[1][i], m[2][i], m[3][i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4+48]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+edx*4+32]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+ecx*4+16]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+eax*4]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector4@Ogre@@QAE@MMMM@Z		; Ogre::Vector4::Vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getColumn4@Matrix4@Ogre@@QBE?AVVector4@2@I@Z ENDP	; Ogre::Matrix4::getColumn4
_TEXT	ENDS
PUBLIC	?setTranslate@Matrix4@Ogre@@QAEXMMM@Z		; Ogre::Matrix4::setTranslate
; Function compile flags: /Odtp
;	COMDAT ?setTranslate@Matrix4@Ogre@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?setTranslate@Matrix4@Ogre@@QAEXMMM@Z PROC		; Ogre::Matrix4::setTranslate, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			setRow( 3, x, y, z, 1.0f );

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 165  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setTranslate@Matrix4@Ogre@@QAEXMMM@Z ENDP		; Ogre::Matrix4::setTranslate
_TEXT	ENDS
PUBLIC	?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z	; Ogre::Matrix4::setTranslate
; Function compile flags: /Odtp
;	COMDAT ?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z PROC	; Ogre::Matrix4::setTranslate, COMDAT
; _this$ = ecx

; 167  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 			setTranslate( pos.x, pos.y, pos.z );

	mov	eax, DWORD PTR _pos$[ebp]
	push	ecx
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _pos$[ebp]
	push	ecx
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setTranslate@Matrix4@Ogre@@QAEXMMM@Z	; Ogre::Matrix4::setTranslate

; 169  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z ENDP	; Ogre::Matrix4::setTranslate
_TEXT	ENDS
PUBLIC	?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ	; Ogre::Matrix4::getTranslate
; Function compile flags: /Odtp
;	COMDAT ?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ PROC	; Ogre::Matrix4::getTranslate, COMDAT
; _this$ = ecx

; 171  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 172  : 			return getRow3(3);

	push	3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getRow3@Matrix4@Ogre@@QBE?AVVector3@2@I@Z ; Ogre::Matrix4::getRow3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 173  : 		};

	mov	esp, ebp
	pop	ebp
	ret	4
?getTranslate@Matrix4@Ogre@@QBE?AVVector3@2@XZ ENDP	; Ogre::Matrix4::getTranslate
_TEXT	ENDS
PUBLIC	?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z ; Ogre::Matrix4::transformCoord
; Function compile flags: /Odtp
;	COMDAT ?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z
_TEXT	SEGMENT
tv182 = -16						; size = 4
tv174 = -12						; size = 4
tv166 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_vec$ = 12						; size = 4
?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z PROC ; Ogre::Matrix4::transformCoord, COMDAT
; _this$ = ecx

; 233  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 		return Vector3( vec.x*_11 + vec.y*_21 + vec.z*_31 + _41,
; 235  : 			vec.x*_12 + vec.y*_22 + vec.z*_32 + _42,
; 236  : 			vec.x*_13 + vec.y*_23 + vec.z*_33 + _43 );

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+24]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+40]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+56]
	fstp	DWORD PTR tv166[ebp]
	fld	DWORD PTR tv166[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+20]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+36]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+52]
	fstp	DWORD PTR tv174[ebp]
	fld	DWORD PTR tv174[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+16]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+32]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [edx+48]
	fstp	DWORD PTR tv182[ebp]
	fld	DWORD PTR tv182[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 237  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?transformCoord@Matrix4@Ogre@@QBE?AVVector3@2@ABV32@@Z ENDP ; Ogre::Matrix4::transformCoord
_TEXT	ENDS
PUBLIC	??0Quaternion@Ogre@@QAE@XZ			; Ogre::Quaternion::Quaternion
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrequaternion.h
;	COMDAT ??0Quaternion@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Quaternion@Ogre@@QAE@XZ PROC				; Ogre::Quaternion::Quaternion, COMDAT
; _this$ = ecx

; 54   : 		Quaternion():x(0), y(0), z(0), w(1.0f){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Quaternion@Ogre@@QAE@XZ ENDP				; Ogre::Quaternion::Quaternion
_TEXT	ENDS
PUBLIC	??0Quaternion@Ogre@@QAE@MMMM@Z			; Ogre::Quaternion::Quaternion
; Function compile flags: /Odtp
;	COMDAT ??0Quaternion@Ogre@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
_w1$ = 20						; size = 4
??0Quaternion@Ogre@@QAE@MMMM@Z PROC			; Ogre::Quaternion::Quaternion, COMDAT
; _this$ = ecx

; 55   : 		Quaternion( float x1, float y1, float z1, float w1 ) : x(x1), y(y1), z(z1), w(w1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w1$[ebp]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Quaternion@Ogre@@QAE@MMMM@Z ENDP			; Ogre::Quaternion::Quaternion
_TEXT	ENDS
PUBLIC	??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Quaternion::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_quat$ = 8						; size = 4
??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::Quaternion::operator=, COMDAT
; _this$ = ecx

; 59   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 			x = quat.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 61   : 			y = quat.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 62   : 			z = quat.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 63   : 			w = quat.w;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]

; 64   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 65   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::Quaternion::operator=
_TEXT	ENDS
PUBLIC	??XQuaternion@Ogre@@QAEXM@Z			; Ogre::Quaternion::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XQuaternion@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XQuaternion@Ogre@@QAEXM@Z PROC			; Ogre::Quaternion::operator*=, COMDAT
; _this$ = ecx

; 67   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 			x *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 69   : 			y *= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 70   : 			z *= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 71   : 			w *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 72   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XQuaternion@Ogre@@QAEXM@Z ENDP			; Ogre::Quaternion::operator*=
_TEXT	ENDS
PUBLIC	?norm@Quaternion@Ogre@@QAEMXZ			; Ogre::Quaternion::norm
; Function compile flags: /Odtp
;	COMDAT ?norm@Quaternion@Ogre@@QAEMXZ
_TEXT	SEGMENT
tv94 = -8						; size = 4
_this$ = -4						; size = 4
?norm@Quaternion@Ogre@@QAEMXZ PROC			; Ogre::Quaternion::norm, COMDAT
; _this$ = ecx

; 74   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 			return x*x+y*y+z*z+w*w;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv94[ebp]
	fld	DWORD PTR tv94[ebp]

; 76   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?norm@Quaternion@Ogre@@QAEMXZ ENDP			; Ogre::Quaternion::norm
_TEXT	ENDS
PUBLIC	?identity@Quaternion@Ogre@@QAEXXZ		; Ogre::Quaternion::identity
; Function compile flags: /Odtp
;	COMDAT ?identity@Quaternion@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?identity@Quaternion@Ogre@@QAEXXZ PROC			; Ogre::Quaternion::identity, COMDAT
; _this$ = ecx

; 78   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 79   : 			x = y = z = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx]

; 80   : 			w = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+12]

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?identity@Quaternion@Ogre@@QAEXXZ ENDP			; Ogre::Quaternion::identity
_TEXT	ENDS
PUBLIC	?inverse@Quaternion@Ogre@@QAEXXZ		; Ogre::Quaternion::inverse
; Function compile flags: /Odtp
;	COMDAT ?inverse@Quaternion@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?inverse@Quaternion@Ogre@@QAEXXZ PROC			; Ogre::Quaternion::inverse, COMDAT
; _this$ = ecx

; 83   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 			x = -x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fchs
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 85   : 			y = -y;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fchs
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 86   : 			z = -z;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fchs
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 87   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?inverse@Quaternion@Ogre@@QAEXXZ ENDP			; Ogre::Quaternion::inverse
_TEXT	ENDS
PUBLIC	?inverse@Quaternion@Ogre@@QBEXAAV12@@Z		; Ogre::Quaternion::inverse
; Function compile flags: /Odtp
;	COMDAT ?inverse@Quaternion@Ogre@@QBEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_quat$ = 8						; size = 4
?inverse@Quaternion@Ogre@@QBEXAAV12@@Z PROC		; Ogre::Quaternion::inverse, COMDAT
; _this$ = ecx

; 89   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 			quat.x = -x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fchs
	mov	ecx, DWORD PTR _quat$[ebp]
	fstp	DWORD PTR [ecx]

; 91   : 			quat.y = -y;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fchs
	mov	eax, DWORD PTR _quat$[ebp]
	fstp	DWORD PTR [eax+4]

; 92   : 			quat.z = -z;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fchs
	mov	edx, DWORD PTR _quat$[ebp]
	fstp	DWORD PTR [edx+8]

; 93   : 			quat.w = w;

	mov	eax, DWORD PTR _quat$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]

; 94   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?inverse@Quaternion@Ogre@@QBEXAAV12@@Z ENDP		; Ogre::Quaternion::inverse
_TEXT	ENDS
PUBLIC	?setElement@Quaternion@Ogre@@QAEXMMMM@Z		; Ogre::Quaternion::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Quaternion@Ogre@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
_w1$ = 20						; size = 4
?setElement@Quaternion@Ogre@@QAEXMMMM@Z PROC		; Ogre::Quaternion::setElement, COMDAT
; _this$ = ecx

; 96   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 			x = x1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]

; 98   : 			y = y1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]

; 99   : 			z = z1;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]

; 100  : 			w = w1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w1$[ebp]
	fstp	DWORD PTR [eax+12]

; 101  : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?setElement@Quaternion@Ogre@@QAEXMMMM@Z ENDP		; Ogre::Quaternion::setElement
_TEXT	ENDS
PUBLIC	??9Quaternion@Ogre@@QBE_NABV01@@Z		; Ogre::Quaternion::operator!=
EXTRN	??8Quaternion@Ogre@@QBE_NABV01@@Z:PROC		; Ogre::Quaternion::operator==
; Function compile flags: /Odtp
;	COMDAT ??9Quaternion@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_quat$ = 8						; size = 4
??9Quaternion@Ogre@@QBE_NABV01@@Z PROC			; Ogre::Quaternion::operator!=, COMDAT
; _this$ = ecx

; 105  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 			return !operator==(quat);

	mov	eax, DWORD PTR _quat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8Quaternion@Ogre@@QBE_NABV01@@Z	; Ogre::Quaternion::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 107  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9Quaternion@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::Quaternion::operator!=
_TEXT	ENDS
PUBLIC	??0Matrix4@Ogre@@QAE@XZ				; Ogre::Matrix4::Matrix4
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Matrix4@Ogre@@QAE@XZ PROC				; Ogre::Matrix4::Matrix4
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Matrix4@Ogre@@QAE@XZ ENDP				; Ogre::Matrix4::Matrix4
_TEXT	ENDS
PUBLIC	??0Matrix4@Ogre@@QAE@QBM@Z			; Ogre::Matrix4::Matrix4
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_i$58080 = -8						; size = 4
_dest$ = -4						; size = 4
_data$ = 8						; size = 4
??0Matrix4@Ogre@@QAE@QBM@Z PROC				; Ogre::Matrix4::Matrix4
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 61   : 		float *dest = (float *)this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _dest$[ebp], eax

; 62   : 		for( int i=0; i<MATRIX_ELE; i++ ) dest[i] = data[i];

	mov	DWORD PTR _i$58080[ebp], 0
	jmp	SHORT $LN3@Matrix4
$LN2@Matrix4:
	mov	ecx, DWORD PTR _i$58080[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$58080[ebp], ecx
$LN3@Matrix4:
	cmp	DWORD PTR _i$58080[ebp], 16		; 00000010H
	jge	SHORT $LN1@Matrix4
	mov	edx, DWORD PTR _i$58080[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _i$58080[ebp]
	mov	esi, DWORD PTR _data$[ebp]
	fld	DWORD PTR [esi+ecx*4]
	fstp	DWORD PTR [eax+edx*4]
	jmp	SHORT $LN2@Matrix4
$LN1@Matrix4:

; 63   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@Ogre@@QAE@QBM@Z ENDP				; Ogre::Matrix4::Matrix4
_TEXT	ENDS
PUBLIC	??0Matrix4@Ogre@@QAE@ABV01@@Z			; Ogre::Matrix4::Matrix4
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_i$58092 = -12						; size = 4
_src$ = -8						; size = 4
_dest$ = -4						; size = 4
_mat$ = 8						; size = 4
??0Matrix4@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Matrix4::Matrix4
; _this$ = ecx

; 66   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 		float *dest = (float *)this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _dest$[ebp], eax

; 68   : 		float *src = (float *)&mat;

	mov	ecx, DWORD PTR _mat$[ebp]
	mov	DWORD PTR _src$[ebp], ecx

; 69   : 
; 70   : 		for( int i=0; i<MATRIX_ELE; i++ ) *dest++ = *src++;

	mov	DWORD PTR _i$58092[ebp], 0
	jmp	SHORT $LN3@Matrix4@2
$LN2@Matrix4@2:
	mov	edx, DWORD PTR _i$58092[ebp]
	add	edx, 1
	mov	DWORD PTR _i$58092[ebp], edx
$LN3@Matrix4@2:
	cmp	DWORD PTR _i$58092[ebp], 16		; 00000010H
	jge	SHORT $LN1@Matrix4@2
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 4
	mov	DWORD PTR _dest$[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 4
	mov	DWORD PTR _src$[ebp], eax
	jmp	SHORT $LN2@Matrix4@2
$LN1@Matrix4@2:

; 71   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Matrix4@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Matrix4::Matrix4
_TEXT	ENDS
PUBLIC	??4Matrix4@Ogre@@QAEABV01@ABV01@@Z		; Ogre::Matrix4::operator=
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mat$ = 8						; size = 4
??4Matrix4@Ogre@@QAEABV01@ABV01@@Z PROC			; Ogre::Matrix4::operator=
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		memcpy(m, mat.m, sizeof(m));

	push	64					; 00000040H
	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 76   : 
; 77   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 78   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Matrix4@Ogre@@QAEABV01@ABV01@@Z ENDP			; Ogre::Matrix4::operator=
_TEXT	ENDS
PUBLIC	??YMatrix4@Ogre@@QAEXABV01@@Z			; Ogre::Matrix4::operator+=
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_i$58108 = -12						; size = 4
_src$ = -8						; size = 4
_dest$ = -4						; size = 4
_mat$ = 8						; size = 4
??YMatrix4@Ogre@@QAEXABV01@@Z PROC			; Ogre::Matrix4::operator+=
; _this$ = ecx

; 81   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 		float *dest = (float *)this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _dest$[ebp], eax

; 83   : 		float *src = (float *)&mat;

	mov	ecx, DWORD PTR _mat$[ebp]
	mov	DWORD PTR _src$[ebp], ecx

; 84   : 
; 85   : 		for( int i=0; i<MATRIX_ELE; i++ ) (*dest++) += (*src++);

	mov	DWORD PTR _i$58108[ebp], 0
	jmp	SHORT $LN3@operator@2
$LN2@operator@2:
	mov	edx, DWORD PTR _i$58108[ebp]
	add	edx, 1
	mov	DWORD PTR _i$58108[ebp], edx
$LN3@operator@2:
	cmp	DWORD PTR _i$58108[ebp], 16		; 00000010H
	jge	SHORT $LN1@operator@2
	mov	eax, DWORD PTR _dest$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _src$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _dest$[ebp]
	fstp	DWORD PTR [edx]
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 4
	mov	DWORD PTR _src$[ebp], eax
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 4
	mov	DWORD PTR _dest$[ebp], ecx
	jmp	SHORT $LN2@operator@2
$LN1@operator@2:

; 86   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??YMatrix4@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Matrix4::operator+=
_TEXT	ENDS
PUBLIC	??ZMatrix4@Ogre@@QAEXABV01@@Z			; Ogre::Matrix4::operator-=
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_i$58120 = -12						; size = 4
_src$ = -8						; size = 4
_dest$ = -4						; size = 4
_mat$ = 8						; size = 4
??ZMatrix4@Ogre@@QAEXABV01@@Z PROC			; Ogre::Matrix4::operator-=
; _this$ = ecx

; 89   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 		float *dest = (float *)this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _dest$[ebp], eax

; 91   : 		float *src = (float *)&mat;

	mov	ecx, DWORD PTR _mat$[ebp]
	mov	DWORD PTR _src$[ebp], ecx

; 92   : 
; 93   : 		for( int i=0; i<MATRIX_ELE; i++ ) (*dest++) -= (*src++);

	mov	DWORD PTR _i$58120[ebp], 0
	jmp	SHORT $LN3@operator@3
$LN2@operator@3:
	mov	edx, DWORD PTR _i$58120[ebp]
	add	edx, 1
	mov	DWORD PTR _i$58120[ebp], edx
$LN3@operator@3:
	cmp	DWORD PTR _i$58120[ebp], 16		; 00000010H
	jge	SHORT $LN1@operator@3
	mov	eax, DWORD PTR _dest$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _src$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _dest$[ebp]
	fstp	DWORD PTR [edx]
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 4
	mov	DWORD PTR _src$[ebp], eax
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 4
	mov	DWORD PTR _dest$[ebp], ecx
	jmp	SHORT $LN2@operator@3
$LN1@operator@3:

; 94   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZMatrix4@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Matrix4::operator-=
_TEXT	ENDS
PUBLIC	??XMatrix4@Ogre@@QAEXM@Z			; Ogre::Matrix4::operator*=
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_i$58130 = -8						; size = 4
_dest$ = -4						; size = 4
_s$ = 8							; size = 4
??XMatrix4@Ogre@@QAEXM@Z PROC				; Ogre::Matrix4::operator*=
; _this$ = ecx

; 97   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 		float *dest = (float *)this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _dest$[ebp], eax

; 99   : 		for( int i=0; i<MATRIX_ELE; i++ ) (*dest++) *= s;

	mov	DWORD PTR _i$58130[ebp], 0
	jmp	SHORT $LN3@operator@4
$LN2@operator@4:
	mov	ecx, DWORD PTR _i$58130[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$58130[ebp], ecx
$LN3@operator@4:
	cmp	DWORD PTR _i$58130[ebp], 16		; 00000010H
	jge	SHORT $LN1@operator@4
	mov	edx, DWORD PTR _dest$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 4
	mov	DWORD PTR _dest$[ebp], ecx
	jmp	SHORT $LN2@operator@4
$LN1@operator@4:

; 100  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??XMatrix4@Ogre@@QAEXM@Z ENDP				; Ogre::Matrix4::operator*=
_TEXT	ENDS
PUBLIC	??_0Matrix4@Ogre@@QAEXM@Z			; Ogre::Matrix4::operator/=
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_i$58140 = -8						; size = 4
_dest$ = -4						; size = 4
_s$ = 8							; size = 4
??_0Matrix4@Ogre@@QAEXM@Z PROC				; Ogre::Matrix4::operator/=
; _this$ = ecx

; 103  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 		float *dest = (float *)this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _dest$[ebp], eax

; 105  : 		for( int i=0; i<MATRIX_ELE; i++ ) (*dest++) /= s;

	mov	DWORD PTR _i$58140[ebp], 0
	jmp	SHORT $LN3@operator@5
$LN2@operator@5:
	mov	ecx, DWORD PTR _i$58140[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$58140[ebp], ecx
$LN3@operator@5:
	cmp	DWORD PTR _i$58140[ebp], 16		; 00000010H
	jge	SHORT $LN1@operator@5
	mov	edx, DWORD PTR _dest$[ebp]
	fld	DWORD PTR [edx]
	fdiv	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 4
	mov	DWORD PTR _dest$[ebp], ecx
	jmp	SHORT $LN2@operator@5
$LN1@operator@5:

; 106  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??_0Matrix4@Ogre@@QAEXM@Z ENDP				; Ogre::Matrix4::operator/=
_TEXT	ENDS
PUBLIC	??BMatrix4@Ogre@@QAEPAMXZ			; Ogre::Matrix4::operator float *
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BMatrix4@Ogre@@QAEPAMXZ PROC				; Ogre::Matrix4::operator float *
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 		return &m[0][0];

	mov	eax, DWORD PTR _this$[ebp]

; 111  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BMatrix4@Ogre@@QAEPAMXZ ENDP				; Ogre::Matrix4::operator float *
_TEXT	ENDS
PUBLIC	??XMatrix4@Ogre@@QAEXABV01@@Z			; Ogre::Matrix4::operator*=
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -76						; size = 4
_j$58156 = -72						; size = 4
_i$58152 = -68						; size = 4
_tmp$ = -64						; size = 64
_mat$ = 8						; size = 4
??XMatrix4@Ogre@@QAEXABV01@@Z PROC			; Ogre::Matrix4::operator*=
; _this$ = ecx

; 114  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 115  : 		Matrix4 tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Matrix4@Ogre@@QAE@ABV01@@Z		; Ogre::Matrix4::Matrix4

; 116  : 		for( int i=0; i<4; i++ )

	mov	DWORD PTR _i$58152[ebp], 0
	jmp	SHORT $LN6@operator@6
$LN5@operator@6:
	mov	ecx, DWORD PTR _i$58152[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$58152[ebp], ecx
$LN6@operator@6:
	cmp	DWORD PTR _i$58152[ebp], 4
	jge	$LN4@operator@6

; 117  : 		{
; 118  : 			for( int j=0; j<4; j++ )

	mov	DWORD PTR _j$58156[ebp], 0
	jmp	SHORT $LN3@operator@6
$LN2@operator@6:
	mov	edx, DWORD PTR _j$58156[ebp]
	add	edx, 1
	mov	DWORD PTR _j$58156[ebp], edx
$LN3@operator@6:
	cmp	DWORD PTR _j$58156[ebp], 4
	jge	SHORT $LN1@operator@6

; 119  : 			{
; 120  : 				m[i][j] = tmp.m[i][0]*mat.m[0][j] + tmp.m[i][1]*mat.m[1][j] + tmp.m[i][2]*mat.m[2][j] + tmp.m[i][3]*mat.m[3][j];

	mov	eax, DWORD PTR _i$58152[ebp]
	shl	eax, 4
	fld	DWORD PTR _tmp$[ebp+eax]
	mov	ecx, DWORD PTR _j$58156[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _i$58152[ebp]
	shl	eax, 4
	fld	DWORD PTR _tmp$[ebp+eax+4]
	mov	ecx, DWORD PTR _j$58156[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [edx+ecx*4+16]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$58152[ebp]
	shl	eax, 4
	fld	DWORD PTR _tmp$[ebp+eax+8]
	mov	ecx, DWORD PTR _j$58156[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [edx+ecx*4+32]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$58152[ebp]
	shl	eax, 4
	fld	DWORD PTR _tmp$[ebp+eax+12]
	mov	ecx, DWORD PTR _j$58156[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [edx+ecx*4+48]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$58152[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _j$58156[ebp]
	fstp	DWORD PTR [eax+ecx*4]

; 121  : 			}

	jmp	SHORT $LN2@operator@6
$LN1@operator@6:

; 122  : 		}

	jmp	$LN5@operator@6
$LN4@operator@6:

; 123  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??XMatrix4@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Matrix4::operator*=
_TEXT	ENDS
PUBLIC	?det@Matrix4@Ogre@@QBEMXZ			; Ogre::Matrix4::det
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv309 = -8						; size = 4
_this$ = -4						; size = 4
?det@Matrix4@Ogre@@QBEMXZ PROC				; Ogre::Matrix4::det
; _this$ = ecx

; 126  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 127  : 		return  (_11 * _22 - _12 * _21) * (_33 * _44 - _34 * _43)
; 128  : 			-(_11 * _23 - _13 * _21) * (_32 * _44 - _34 * _42)
; 129  : 			+(_11 * _24 - _14 * _21) * (_32 * _43 - _33 * _42)
; 130  : 			+(_12 * _23 - _13 * _22) * (_31 * _44 - _34 * _41)
; 131  : 			-(_12 * _24 - _14 * _22) * (_31 * _43 - _33 * _41)
; 132  : 			+(_13 * _24 - _14 * _23) * (_31 * _42 - _32 * _41);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+16]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+60]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+56]
	fsubp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+16]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+60]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+44]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+52]
	fsubp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+52]
	fsubp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+20]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+60]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+48]
	fsubp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+20]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+56]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+48]
	fsubp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+24]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+48]
	fsubp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv309[ebp]
	fld	DWORD PTR tv309[ebp]

; 133  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?det@Matrix4@Ogre@@QBEMXZ ENDP				; Ogre::Matrix4::det
_TEXT	ENDS
PUBLIC	?identity@Matrix4@Ogre@@QAEXXZ			; Ogre::Matrix4::identity
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?identity@Matrix4@Ogre@@QAEXXZ PROC			; Ogre::Matrix4::identity
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 		*this = Matrix4::Iden;

	push	OFFSET ?Iden@Matrix4@Ogre@@2V12@B	; Ogre::Matrix4::Iden
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Matrix4@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Matrix4::operator=

; 138  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?identity@Matrix4@Ogre@@QAEXXZ ENDP			; Ogre::Matrix4::identity
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@0000000000000000
PUBLIC	?inverse@Matrix4@Ogre@@QBEXAAV12@@Z		; Ogre::Matrix4::inverse
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
_this$ = -8						; size = 4
_s$ = -4						; size = 4
_output$ = 8						; size = 4
?inverse@Matrix4@Ogre@@QBEXAAV12@@Z PROC		; Ogre::Matrix4::inverse
; _this$ = ecx

; 141  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 142  : 		assert( this != &output );
; 143  : 
; 144  : 		float s = det();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?det@Matrix4@Ogre@@QBEMXZ		; Ogre::Matrix4::det
	fstp	DWORD PTR _s$[ebp]

; 145  : 		if( s == 0 ) return;

	fld	DWORD PTR _s$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@inverse
	jmp	$LN2@inverse
$LN1@inverse:

; 146  : 
; 147  : 		s = 1.0f/s;

	fld	DWORD PTR _s$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _s$[ebp]

; 148  : 		output._11 = s*(_22*(_33*_44 - _34*_43) + _23*(_34*_42 - _32*_44) + _24*(_32*_43 - _33*_42));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+60]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+44]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+56]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+44]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+60]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+24]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+56]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+52]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [eax]

; 149  : 		output._12 = s*(_32*(_13*_44 - _14*_43) + _33*(_14*_42 - _12*_44) + _34*(_12*_43 - _13*_42));

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+60]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+56]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+60]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+40]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+52]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+44]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [ecx+4]

; 150  : 		output._13 = s*(_42*(_13*_24 - _14*_23) + _43*(_14*_22 - _12*_24) + _44*(_12*_23 - _13*_22));

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+24]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+28]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+56]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+20]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+60]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [edx+8]

; 151  : 		output._14 = s*(_12*(_24*_33 - _23*_34) + _13*(_22*_34 - _24*_32) + _14*(_23*_32 - _22*_33));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+44]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+36]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+8]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+40]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+12]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [eax+12]

; 152  : 		output._21 = s*(_23*(_31*_44 - _34*_41) + _24*(_33*_41 - _31*_43) + _21*(_34*_43 - _33*_44));

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+60]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+48]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+56]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+28]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+44]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+60]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [ecx+16]

; 153  : 		output._22 = s*(_33*(_11*_44 - _14*_41) + _34*(_13*_41 - _11*_43) + _31*(_14*_43 - _13*_44));

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+60]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+48]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+56]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+44]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+56]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+60]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+32]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [edx+20]

; 154  : 		output._23 = s*(_43*(_11*_24 - _14*_21) + _44*(_13*_21 - _11*_23) + _41*(_14*_23 - _13*_24));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+16]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+56]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+24]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+60]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+28]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+48]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [eax+24]

; 155  : 		output._24 = s*(_13*(_24*_31 - _21*_34) + _14*(_21*_33 - _23*_31) + _11*(_23*_34 - _24*_33));

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+44]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+32]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+40]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [ecx+28]

; 156  : 		output._31 = s*(_24*(_31*_42 - _32*_41) + _21*(_32*_44 - _34*_42) + _22*(_34*_41 - _31*_44));

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+48]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+60]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+52]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+16]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+60]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+20]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [edx+32]

; 157  : 		output._32 = s*(_34*(_11*_42 - _12*_41) + _31*(_12*_44 - _14*_42) + _32*(_14*_41 - _11*_44));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+48]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+44]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+60]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+52]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+32]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+60]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+36]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [eax+36]

; 158  : 		output._33 = s*(_44*(_11*_22 - _12*_21) + _41*(_12*_24 - _14*_22) + _42*(_14*_21 - _11*_24));

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+60]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+20]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+48]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+28]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+52]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [ecx+40]

; 159  : 		output._34 = s*(_14*(_22*_31 - _21*_32) + _11*(_24*_32 - _22*_34) + _12*(_21*_34 - _24*_31));

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+36]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+44]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+44]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+32]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [edx+44]

; 160  : 		output._41 = s*(_21*(_33*_42 - _32*_43) + _22*(_31*_43 - _33*_41) + _23*(_32*_41 - _31*_42));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+56]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+48]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+52]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [eax+48]

; 161  : 		output._42 = s*(_31*(_13*_42 - _12*_43) + _32*(_11*_43 - _13*_41) + _33*(_12*_41 - _11*_42));

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+52]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+56]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+56]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+48]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+36]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+52]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+40]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [ecx+52]

; 162  : 		output._43 = s*(_41*(_13*_22 - _12*_23) + _42*(_11*_23 - _13*_21) + _43*(_12*_21 - _11*_22));

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+24]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+52]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+20]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+56]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [edx+56]

; 163  : 		output._44 = s*(_11*(_22*_33 - _23*_32) + _12*(_23*_31 - _21*_33) + _13*(_21*_32 - _22*_31));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+36]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+40]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+32]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [eax+60]
$LN2@inverse:

; 164  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?inverse@Matrix4@Ogre@@QBEXAAV12@@Z ENDP		; Ogre::Matrix4::inverse
_TEXT	ENDS
PUBLIC	?quickInverse@Matrix4@Ogre@@QBEXAAV12@@Z	; Ogre::Matrix4::quickInverse
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_s$ = -4						; size = 4
_output$ = 8						; size = 4
?quickInverse@Matrix4@Ogre@@QBEXAAV12@@Z PROC		; Ogre::Matrix4::quickInverse
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 		assert( this != &output );
; 169  : 
; 170  : 		float s = det();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?det@Matrix4@Ogre@@QBEMXZ		; Ogre::Matrix4::det
	fstp	DWORD PTR _s$[ebp]

; 171  : 		if( s == 0 ) return;

	fld	DWORD PTR _s$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@quickInver
	jmp	$LN2@quickInver
$LN1@quickInver:

; 172  : 
; 173  : 		s = 1.0f/s;

	fld	DWORD PTR _s$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _s$[ebp]

; 174  : 		output._11 = s * ((_22 * _33) - (_23 * _32));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+36]
	fsubp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [ecx]

; 175  : 		output._12 = s * ((_32 * _13) - (_33 * _12));

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+4]
	fsubp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [eax+4]

; 176  : 		output._13 = s * ((_12 * _23) - (_13 * _22));

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+20]
	fsubp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [edx+8]

; 177  : 		output._14 = 0.0f;

	mov	eax, DWORD PTR _output$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]

; 178  : 		output._21 = s * ((_23 * _31) - (_21 * _33));

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+40]
	fsubp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [edx+16]

; 179  : 		output._22 = s * ((_33 * _11) - (_31 * _13));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+8]
	fsubp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [ecx+20]

; 180  : 		output._23 = s * ((_13 * _21) - (_11 * _23));

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+24]
	fsubp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [eax+24]

; 181  : 		output._24 = 0.0f;

	mov	ecx, DWORD PTR _output$[ebp]
	fldz
	fstp	DWORD PTR [ecx+28]

; 182  : 		output._31 = s * ((_21 * _32) - (_22 * _31));

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+32]
	fsubp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [eax+32]

; 183  : 		output._32 = s * ((_31 * _12) - (_32 * _11));

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	fsubp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [edx+36]

; 184  : 		output._33 = s * ((_11 * _22) - (_12 * _21));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+16]
	fsubp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [ecx+40]

; 185  : 		output._34 = 0.0f;

	mov	edx, DWORD PTR _output$[ebp]
	fldz
	fstp	DWORD PTR [edx+44]

; 186  : 		output._41 = s * (_21*(_33*_42 - _32*_43) + _22*(_31*_43 - _33*_41) + _23*(_32*_41 - _31*_42));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+56]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+48]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+52]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [eax+48]

; 187  : 		output._42 = s * (_31*(_13*_42 - _12*_43) + _32*(_11*_43 - _13*_41) + _33*(_12*_41 - _11*_42));

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+52]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+56]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+56]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+48]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+36]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+52]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+40]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [ecx+52]

; 188  : 		output._43 = s * (_41*(_13*_22 - _12*_23) + _42*(_11*_23 - _13*_21) + _43*(_12*_21 - _11*_22));

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+24]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+52]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+20]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+56]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _output$[ebp]
	fstp	DWORD PTR [edx+56]

; 189  : 		output._44 = 1.0f;

	mov	eax, DWORD PTR _output$[ebp]
	fld1
	fstp	DWORD PTR [eax+60]
$LN2@quickInver:

; 190  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?quickInverse@Matrix4@Ogre@@QBEXAAV12@@Z ENDP		; Ogre::Matrix4::quickInverse
_TEXT	ENDS
PUBLIC	?inverse@Matrix4@Ogre@@QAEAAV12@XZ		; Ogre::Matrix4::inverse
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -68						; size = 4
_tmp$ = -64						; size = 64
?inverse@Matrix4@Ogre@@QAEAAV12@XZ PROC			; Ogre::Matrix4::inverse
; _this$ = ecx

; 193  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 194  : 		Matrix4 tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Matrix4@Ogre@@QAE@ABV01@@Z		; Ogre::Matrix4::Matrix4

; 195  : 		tmp.inverse( *this );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	?inverse@Matrix4@Ogre@@QBEXAAV12@@Z	; Ogre::Matrix4::inverse

; 196  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 197  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?inverse@Matrix4@Ogre@@QAEAAV12@XZ ENDP			; Ogre::Matrix4::inverse
_TEXT	ENDS
PUBLIC	?quickInverse@Matrix4@Ogre@@QAEXXZ		; Ogre::Matrix4::quickInverse
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -68						; size = 4
_tmp$ = -64						; size = 64
?quickInverse@Matrix4@Ogre@@QAEXXZ PROC			; Ogre::Matrix4::quickInverse
; _this$ = ecx

; 200  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 201  : 		Matrix4 tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Matrix4@Ogre@@QAE@ABV01@@Z		; Ogre::Matrix4::Matrix4

; 202  : 		tmp.quickInverse( *this );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tmp$[ebp]
	call	?quickInverse@Matrix4@Ogre@@QBEXAAV12@@Z ; Ogre::Matrix4::quickInverse

; 203  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?quickInverse@Matrix4@Ogre@@QAEXXZ ENDP			; Ogre::Matrix4::quickInverse
_TEXT	ENDS
PUBLIC	??$Swap@M@Ogre@@YAXAAM0@Z			; Ogre::Swap<float>
PUBLIC	?transpose@Matrix4@Ogre@@QAEXXZ			; Ogre::Matrix4::transpose
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?transpose@Matrix4@Ogre@@QAEXXZ PROC			; Ogre::Matrix4::transpose
; _this$ = ecx

; 206  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 207  : 		Swap( _12, _21 );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	??$Swap@M@Ogre@@YAXAAM0@Z		; Ogre::Swap<float>
	add	esp, 8

; 208  : 		Swap( _13, _31 );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	call	??$Swap@M@Ogre@@YAXAAM0@Z		; Ogre::Swap<float>
	add	esp, 8

; 209  : 		Swap( _14, _41 );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	??$Swap@M@Ogre@@YAXAAM0@Z		; Ogre::Swap<float>
	add	esp, 8

; 210  : 		Swap( _23, _32 );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	??$Swap@M@Ogre@@YAXAAM0@Z		; Ogre::Swap<float>
	add	esp, 8

; 211  : 		Swap( _24, _42 );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	??$Swap@M@Ogre@@YAXAAM0@Z		; Ogre::Swap<float>
	add	esp, 8

; 212  : 		Swap( _34, _43 );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	call	??$Swap@M@Ogre@@YAXAAM0@Z		; Ogre::Swap<float>
	add	esp, 8

; 213  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?transpose@Matrix4@Ogre@@QAEXXZ ENDP			; Ogre::Matrix4::transpose
_TEXT	ENDS
PUBLIC	?getMatrix3@Matrix4@Ogre@@QBEXAAVMatrix3@2@@Z	; Ogre::Matrix4::getMatrix3
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mat$ = 8						; size = 4
?getMatrix3@Matrix4@Ogre@@QBEXAAVMatrix3@2@@Z PROC	; Ogre::Matrix4::getMatrix3
; _this$ = ecx

; 216  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 217  : 		assert( _14==0 && _24==0 && _34==0 && _44==1.0f );
; 218  : 		mat._11=_11, mat._12=_12, mat._13=_13;

	mov	eax, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	edx, DWORD PTR _mat$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 219  : 		mat._21=_21, mat._22=_22, mat._23=_23;

	mov	eax, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+16]
	fstp	DWORD PTR [eax+12]
	mov	edx, DWORD PTR _mat$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	fstp	DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+24]
	fstp	DWORD PTR [ecx+20]

; 220  : 		mat._31=_31, mat._32=_32, mat._33=_33;

	mov	eax, DWORD PTR _mat$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+32]
	fstp	DWORD PTR [eax+24]
	mov	edx, DWORD PTR _mat$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	fstp	DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+40]
	fstp	DWORD PTR [ecx+32]

; 221  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?getMatrix3@Matrix4@Ogre@@QBEXAAVMatrix3@2@@Z ENDP	; Ogre::Matrix4::getMatrix3
_TEXT	ENDS
PUBLIC	??DOgre@@YA?AVMatrix3@0@ABV10@0@Z		; Ogre::operator*
PUBLIC	?getScale@Matrix4@Ogre@@QBEXAAV12@@Z		; Ogre::Matrix4::getScale
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -156						; size = 4
$T63284 = -152						; size = 36
$T63283 = -108						; size = 36
_sr$ = -72						; size = 36
_srt$ = -36						; size = 36
_mat$ = 8						; size = 4
?getScale@Matrix4@Ogre@@QBEXAAV12@@Z PROC		; Ogre::Matrix4::getScale
; _this$ = ecx

; 224  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 225  : 		Matrix3 sr;
; 226  : 		Matrix3 srt;
; 227  : 		mat.identity();

	mov	ecx, DWORD PTR _mat$[ebp]
	call	?identity@Matrix4@Ogre@@QAEXXZ		; Ogre::Matrix4::identity

; 228  : 		sr.identity();

	lea	ecx, DWORD PTR _sr$[ebp]
	call	?identity@Matrix3@Ogre@@QAEXXZ		; Ogre::Matrix3::identity

; 229  : 		srt.identity();

	lea	ecx, DWORD PTR _srt$[ebp]
	call	?identity@Matrix3@Ogre@@QAEXXZ		; Ogre::Matrix3::identity

; 230  : 
; 231  : 		getMatrix3(sr);

	lea	eax, DWORD PTR _sr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getMatrix3@Matrix4@Ogre@@QBEXAAVMatrix3@2@@Z ; Ogre::Matrix4::getMatrix3

; 232  : 		srt._11 = sr._11;	srt._12 = sr._21;	srt._13 = sr._31;

	fld	DWORD PTR _sr$[ebp]
	fstp	DWORD PTR _srt$[ebp]
	fld	DWORD PTR _sr$[ebp+12]
	fstp	DWORD PTR _srt$[ebp+4]
	fld	DWORD PTR _sr$[ebp+24]
	fstp	DWORD PTR _srt$[ebp+8]

; 233  : 		srt._21 = sr._12;	srt._22 = sr._22;	srt._23 = sr._32;

	fld	DWORD PTR _sr$[ebp+4]
	fstp	DWORD PTR _srt$[ebp+12]
	fld	DWORD PTR _sr$[ebp+16]
	fstp	DWORD PTR _srt$[ebp+16]
	fld	DWORD PTR _sr$[ebp+28]
	fstp	DWORD PTR _srt$[ebp+20]

; 234  : 		srt._31 = sr._13;	srt._32 = sr._23;	srt._33 = sr._33;

	fld	DWORD PTR _sr$[ebp+8]
	fstp	DWORD PTR _srt$[ebp+24]
	fld	DWORD PTR _sr$[ebp+20]
	fstp	DWORD PTR _srt$[ebp+28]
	fld	DWORD PTR _sr$[ebp+32]
	fstp	DWORD PTR _srt$[ebp+32]

; 235  : 
; 236  : 		sr = sr * srt;

	lea	ecx, DWORD PTR _srt$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T63284[ebp]
	push	eax
	call	??DOgre@@YA?AVMatrix3@0@ABV10@0@Z	; Ogre::operator*
	add	esp, 12					; 0000000cH
	mov	ecx, 9
	mov	esi, eax
	lea	edi, DWORD PTR $T63283[ebp]
	rep movsd
	mov	ecx, 9
	lea	esi, DWORD PTR $T63283[ebp]
	lea	edi, DWORD PTR _sr$[ebp]
	rep movsd

; 237  : 		mat._11 = Sqrt(sr._11);

	push	ecx
	fld	DWORD PTR _sr$[ebp]
	fstp	DWORD PTR [esp]
	call	?Sqrt@Ogre@@YAMM@Z			; Ogre::Sqrt
	add	esp, 4
	mov	ecx, DWORD PTR _mat$[ebp]
	fstp	DWORD PTR [ecx]

; 238  : 		mat._22 = Sqrt(sr._22);

	push	ecx
	fld	DWORD PTR _sr$[ebp+16]
	fstp	DWORD PTR [esp]
	call	?Sqrt@Ogre@@YAMM@Z			; Ogre::Sqrt
	add	esp, 4
	mov	edx, DWORD PTR _mat$[ebp]
	fstp	DWORD PTR [edx+20]

; 239  : 		mat._33 = Sqrt(sr._33);

	push	ecx
	fld	DWORD PTR _sr$[ebp+32]
	fstp	DWORD PTR [esp]
	call	?Sqrt@Ogre@@YAMM@Z			; Ogre::Sqrt
	add	esp, 4
	mov	eax, DWORD PTR _mat$[ebp]
	fstp	DWORD PTR [eax+40]

; 240  : 	}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?getScale@Matrix4@Ogre@@QBEXAAV12@@Z ENDP		; Ogre::Matrix4::getScale
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix3.h
_TEXT	ENDS
;	COMDAT ??DOgre@@YA?AVMatrix3@0@ABV10@0@Z
_TEXT	SEGMENT
tv146 = -48						; size = 4
_j$57516 = -44						; size = 4
_i$57512 = -40						; size = 4
_retvalue$ = -36					; size = 36
$T63286 = 8						; size = 4
_m1$ = 12						; size = 4
_m2$ = 16						; size = 4
??DOgre@@YA?AVMatrix3@0@ABV10@0@Z PROC			; Ogre::operator*, COMDAT

; 121  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi

; 122  : 		Matrix3 retvalue;
; 123  : 		for( int i=0; i<3; i++ )

	mov	DWORD PTR _i$57512[ebp], 0
	jmp	SHORT $LN6@operator@7
$LN5@operator@7:
	mov	eax, DWORD PTR _i$57512[ebp]
	add	eax, 1
	mov	DWORD PTR _i$57512[ebp], eax
$LN6@operator@7:
	cmp	DWORD PTR _i$57512[ebp], 3
	jge	SHORT $LN4@operator@7

; 124  : 		{
; 125  : 			for( int j=0; j<3; j++ )

	mov	DWORD PTR _j$57516[ebp], 0
	jmp	SHORT $LN3@operator@7
$LN2@operator@7:
	mov	ecx, DWORD PTR _j$57516[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$57516[ebp], ecx
$LN3@operator@7:
	cmp	DWORD PTR _j$57516[ebp], 3
	jge	SHORT $LN1@operator@7

; 126  : 			{
; 127  : 				retvalue.m[i][j] = m1.m[i][0]*m2.m[0][j] + m1.m[i][1]*m2.m[1][j] + m1.m[i][2]*m2.m[2][j];

	mov	edx, DWORD PTR _i$57512[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _m1$[ebp]
	fld	DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _j$57516[ebp]
	mov	edx, DWORD PTR _m2$[ebp]
	fmul	DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _i$57512[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _m1$[ebp]
	fld	DWORD PTR [ecx+eax+4]
	mov	edx, DWORD PTR _j$57516[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	fmul	DWORD PTR [eax+edx*4+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _i$57512[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _m1$[ebp]
	fld	DWORD PTR [edx+ecx+8]
	mov	eax, DWORD PTR _j$57516[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	fmul	DWORD PTR [ecx+eax*4+24]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv146[ebp]
	fld	DWORD PTR tv146[ebp]
	mov	edx, DWORD PTR _i$57512[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _retvalue$[ebp+edx]
	mov	ecx, DWORD PTR _j$57516[ebp]
	fstp	DWORD PTR [eax+ecx*4]

; 128  : 			}

	jmp	SHORT $LN2@operator@7
$LN1@operator@7:

; 129  : 		}

	jmp	$LN5@operator@7
$LN4@operator@7:

; 130  : 		return retvalue;

	mov	ecx, 9
	lea	esi, DWORD PTR _retvalue$[ebp]
	mov	edi, DWORD PTR $T63286[ebp]
	rep movsd
	mov	eax, DWORD PTR $T63286[ebp]

; 131  : 	}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??DOgre@@YA?AVMatrix3@0@ABV10@0@Z ENDP			; Ogre::operator*
_TEXT	ENDS
PUBLIC	?Invert@Ogre@@YA?AVMatrix4@1@ABV21@@Z		; Ogre::Invert
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.cpp
_TEXT	SEGMENT
_invtm$ = -64						; size = 64
___$ReturnUdt$ = 8					; size = 4
_tm$ = 12						; size = 4
?Invert@Ogre@@YA?AVMatrix4@1@ABV21@@Z PROC		; Ogre::Invert

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 244  : 		Matrix4 invtm;

	lea	ecx, DWORD PTR _invtm$[ebp]
	call	??0Matrix4@Ogre@@QAE@XZ			; Ogre::Matrix4::Matrix4

; 245  : 		tm.inverse( invtm );

	lea	eax, DWORD PTR _invtm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tm$[ebp]
	call	?inverse@Matrix4@Ogre@@QBEXAAV12@@Z	; Ogre::Matrix4::inverse

; 246  : 		return invtm;

	lea	ecx, DWORD PTR _invtm$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Matrix4@Ogre@@QAE@ABV01@@Z		; Ogre::Matrix4::Matrix4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 247  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?Invert@Ogre@@YA?AVMatrix4@1@ABV21@@Z ENDP		; Ogre::Invert
_TEXT	ENDS
PUBLIC	??4Vector4@Ogre@@QAEABV01@ABV01@@Z		; Ogre::Vector4::operator=
PUBLIC	??DOgre@@YA?AVVector4@0@ABV10@ABVMatrix4@0@@Z	; Ogre::operator*
PUBLIC	?transformVec4@Matrix4@Ogre@@QBEXAAVVector4@2@ABV32@@Z ; Ogre::Matrix4::transformVec4
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T63290 = -16						; size = 16
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
?transformVec4@Matrix4@Ogre@@QBEXAAVVector4@2@ABV32@@Z PROC ; Ogre::Matrix4::transformVec4
; _this$ = ecx

; 250  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 251  : 		dest = src * (*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63290[ebp]
	push	edx
	call	??DOgre@@YA?AVVector4@0@ABV10@ABVMatrix4@0@@Z ; Ogre::operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	call	??4Vector4@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector4::operator=

; 252  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?transformVec4@Matrix4@Ogre@@QBEXAAVVector4@2@ABV32@@Z ENDP ; Ogre::Matrix4::transformVec4
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector4.h
_TEXT	ENDS
;	COMDAT ??4Vector4@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??4Vector4@Ogre@@QAEABV01@ABV01@@Z PROC			; Ogre::Vector4::operator=, COMDAT
; _this$ = ecx

; 49   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 			x = vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 51   : 			y = vec.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 52   : 			z = vec.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 53   : 			w = vec.w;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]

; 54   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 55   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector4@Ogre@@QAEABV01@ABV01@@Z ENDP			; Ogre::Vector4::operator=
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.h
_TEXT	ENDS
;	COMDAT ??DOgre@@YA?AVVector4@0@ABV10@ABVMatrix4@0@@Z
_TEXT	SEGMENT
tv227 = -16						; size = 4
tv218 = -12						; size = 4
tv209 = -8						; size = 4
tv200 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_vec$ = 12						; size = 4
_mat$ = 16						; size = 4
??DOgre@@YA?AVVector4@0@ABV10@ABVMatrix4@0@@Z PROC	; Ogre::operator*, COMDAT

; 225  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 226  : 		return Vector4( vec.x*mat._11 + vec.y*mat._21 + vec.z*mat._31 + vec.w*mat._41,
; 227  : 			vec.x*mat._12 + vec.y*mat._22 + vec.z*mat._32 + vec.w*mat._42,
; 228  : 			vec.x*mat._13 + vec.y*mat._23 + vec.z*mat._33 + vec.w*mat._43,
; 229  : 			vec.x*mat._14 + vec.y*mat._24 + vec.z*mat._34 + vec.w*mat._44 );

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [eax+28]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [edx+44]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [ecx+60]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv200[ebp]
	fld	DWORD PTR tv200[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [ecx+40]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [eax+56]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv209[ebp]
	fld	DWORD PTR tv209[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [ecx+20]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [eax+36]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [edx+52]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv218[ebp]
	fld	DWORD PTR tv218[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [ecx+48]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv227[ebp]
	fld	DWORD PTR tv227[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector4@Ogre@@QAE@MMMM@Z		; Ogre::Vector4::Vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 230  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??DOgre@@YA?AVVector4@0@ABV10@ABVMatrix4@0@@Z ENDP	; Ogre::operator*
_TEXT	ENDS
PUBLIC	??DOgre@@YA?AVVector3@0@ABV10@ABVMatrix4@0@@Z	; Ogre::operator*
PUBLIC	?transformCoord@Matrix4@Ogre@@QBEXAAVVector3@2@ABV32@@Z ; Ogre::Matrix4::transformCoord
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T63296 = -12						; size = 12
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
?transformCoord@Matrix4@Ogre@@QBEXAAVVector3@2@ABV32@@Z PROC ; Ogre::Matrix4::transformCoord
; _this$ = ecx

; 255  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 256  : 		dest = src * (*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63296[ebp]
	push	edx
	call	??DOgre@@YA?AVVector3@0@ABV10@ABVMatrix4@0@@Z ; Ogre::operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 257  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?transformCoord@Matrix4@Ogre@@QBEXAAVVector3@2@ABV32@@Z ENDP ; Ogre::Matrix4::transformCoord
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.h
_TEXT	ENDS
;	COMDAT ??DOgre@@YA?AVVector3@0@ABV10@ABVMatrix4@0@@Z
_TEXT	SEGMENT
tv182 = -12						; size = 4
tv174 = -8						; size = 4
tv166 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_vec$ = 12						; size = 4
_mat$ = 16						; size = 4
??DOgre@@YA?AVVector3@0@ABV10@ABVMatrix4@0@@Z PROC	; Ogre::operator*, COMDAT

; 218  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 219  : 		return Vector3( vec.x*mat._11 + vec.y*mat._21 + vec.z*mat._31 + mat._41,
; 220  : 			vec.x*mat._12 + vec.y*mat._22 + vec.z*mat._32 + mat._42,
; 221  : 			vec.x*mat._13 + vec.y*mat._23 + vec.z*mat._33 + mat._43 );

	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [eax+24]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [edx+40]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _mat$[ebp]
	fadd	DWORD PTR [eax+56]
	fstp	DWORD PTR tv166[ebp]
	fld	DWORD PTR tv166[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [ecx+20]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [eax+36]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mat$[ebp]
	fadd	DWORD PTR [ecx+52]
	fstp	DWORD PTR tv174[ebp]
	fld	DWORD PTR tv174[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [edx+16]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [ecx+32]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mat$[ebp]
	fadd	DWORD PTR [edx+48]
	fstp	DWORD PTR tv182[ebp]
	fld	DWORD PTR tv182[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 222  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??DOgre@@YA?AVVector3@0@ABV10@ABVMatrix4@0@@Z ENDP	; Ogre::operator*
_TEXT	ENDS
PUBLIC	?transformNormal@Matrix4@Ogre@@QBEXAAVVector3@2@ABV32@@Z ; Ogre::Matrix4::transformNormal
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.cpp
_TEXT	SEGMENT
tv173 = -28						; size = 4
tv166 = -24						; size = 4
tv159 = -20						; size = 4
_this$ = -16						; size = 4
$T63300 = -12						; size = 12
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
?transformNormal@Matrix4@Ogre@@QBEXAAVVector3@2@ABV32@@Z PROC ; Ogre::Matrix4::transformNormal
; _this$ = ecx

; 260  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 261  : 		dest = Vector3( src.x*_11 + src.y*_21 + src.z*_31,
; 262  : 			src.x*_12 + src.y*_22 + src.z*_32,
; 263  : 			src.x*_13 + src.y*_23 + src.z*_33 );

	mov	eax, DWORD PTR _src$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _src$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+24]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _src$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+40]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv159[ebp]
	fld	DWORD PTR tv159[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _src$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _src$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _src$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+36]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv166[ebp]
	fld	DWORD PTR tv166[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _src$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _src$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _src$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv173[ebp]
	fld	DWORD PTR tv173[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T63300[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 264  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?transformNormal@Matrix4@Ogre@@QBEXAAVVector3@2@ABV32@@Z ENDP ; Ogre::Matrix4::transformNormal
_TEXT	ENDS
PUBLIC	?apply4x4@Matrix4@Ogre@@QBEXAAVVector3@2@ABV32@@Z ; Ogre::Matrix4::apply4x4
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -24						; size = 4
_z$ = -20						; size = 4
_oneOverW$ = -16					; size = 4
_x$ = -12						; size = 4
_y$ = -8						; size = 4
_w$ = -4						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
?apply4x4@Matrix4@Ogre@@QBEXAAVVector3@2@ABV32@@Z PROC	; Ogre::Matrix4::apply4x4
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 268  : 		float w, oneOverW;
; 269  : 		float x, y, z;
; 270  : 
; 271  : 		w = src.x*_14 + src.y*_24 + src.z*_34 + _44;

	mov	eax, DWORD PTR _src$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _src$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+28]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _src$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+44]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+60]
	fstp	DWORD PTR _w$[ebp]

; 272  : 		oneOverW = 1.0f / w;

	fld	DWORD PTR _w$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _oneOverW$[ebp]

; 273  : 
; 274  : 		x = (src.x*_11 + src.y*_21 + src.z*_31 + _41) * oneOverW;

	mov	ecx, DWORD PTR _src$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx]
	mov	eax, DWORD PTR _src$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _src$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+32]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+48]
	fmul	DWORD PTR _oneOverW$[ebp]
	fstp	DWORD PTR _x$[ebp]

; 275  : 		y = (src.x*_12 + src.y*_22 + src.z*_32 + _42) * oneOverW;

	mov	edx, DWORD PTR _src$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _src$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _src$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+36]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [edx+52]
	fmul	DWORD PTR _oneOverW$[ebp]
	fstp	DWORD PTR _y$[ebp]

; 276  : 		z = (src.x*_13 + src.y*_23 + src.z*_33 + _43) * oneOverW;

	mov	eax, DWORD PTR _src$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _src$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+24]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _src$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+40]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+56]
	fmul	DWORD PTR _oneOverW$[ebp]
	fstp	DWORD PTR _z$[ebp]

; 277  : 
; 278  : 		dest.x = x, dest.y = y, dest.z = z;

	mov	ecx, DWORD PTR _dest$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [ecx]
	mov	edx, DWORD PTR _dest$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _dest$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [eax+8]

; 279  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?apply4x4@Matrix4@Ogre@@QBEXAAVVector3@2@ABV32@@Z ENDP	; Ogre::Matrix4::apply4x4
_TEXT	ENDS
PUBLIC	?makeTranslateMatrix@Matrix4@Ogre@@QAEXABVVector3@2@@Z ; Ogre::Matrix4::makeTranslateMatrix
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?makeTranslateMatrix@Matrix4@Ogre@@QAEXABVVector3@2@@Z PROC ; Ogre::Matrix4::makeTranslateMatrix
; _this$ = ecx

; 282  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 283  : 		identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?identity@Matrix4@Ogre@@QAEXXZ		; Ogre::Matrix4::identity

; 284  : 		setRow( 3, pos.x, pos.y, pos.z, 1.0f );

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _pos$[ebp]
	push	ecx
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _pos$[ebp]
	push	ecx
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [esp]
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 285  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?makeTranslateMatrix@Matrix4@Ogre@@QAEXABVVector3@2@@Z ENDP ; Ogre::Matrix4::makeTranslateMatrix
; Function compile flags: /Odtp
_this$ = -4						; size = 4
_scale$ = 8						; size = 4
?makeScaleMatrix@Matrix4@Ogre@@QAEXABVVector3@2@@Z PROC	; Ogre::Matrix4::makeScaleMatrix
; _this$ = ecx

; 288  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 		identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?identity@Matrix4@Ogre@@QAEXXZ		; Ogre::Matrix4::identity

; 290  : 		_11 = scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 291  : 		_22 = scale.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+20]

; 292  : 		_33 = scale.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _scale$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+40]

; 293  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?makeScaleMatrix@Matrix4@Ogre@@QAEXABVVector3@2@@Z ENDP	; Ogre::Matrix4::makeScaleMatrix
_TEXT	ENDS
PUBLIC	?makeRotateMatrix@Matrix4@Ogre@@QAEXABVQuaternion@2@@Z ; Ogre::Matrix4::makeRotateMatrix
EXTRN	?getMatrix@Quaternion@Ogre@@QBEXAAVMatrix4@2@@Z:PROC ; Ogre::Quaternion::getMatrix
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_quat$ = 8						; size = 4
?makeRotateMatrix@Matrix4@Ogre@@QAEXABVQuaternion@2@@Z PROC ; Ogre::Matrix4::makeRotateMatrix
; _this$ = ecx

; 296  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		quat.getMatrix( *this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _quat$[ebp]
	call	?getMatrix@Quaternion@Ogre@@QBEXAAVMatrix4@2@@Z ; Ogre::Quaternion::getMatrix

; 298  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?makeRotateMatrix@Matrix4@Ogre@@QAEXABVQuaternion@2@@Z ENDP ; Ogre::Matrix4::makeRotateMatrix
_TEXT	ENDS
PUBLIC	__real@4000000000000000
PUBLIC	?Sin@Ogre@@YAMM@Z				; Ogre::Sin
PUBLIC	?Cos@Ogre@@YAMM@Z				; Ogre::Cos
PUBLIC	__real@3fe0000000000000
PUBLIC	?makeRotateMatrix@Matrix4@Ogre@@QAEXABVVector3@2@M@Z ; Ogre::Matrix4::makeRotateMatrix
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
tv233 = -32						; size = 4
tv228 = -28						; size = 4
_this$ = -24						; size = 4
_ysin$ = -20						; size = 4
_halfsin$ = -16						; size = 4
_zsin$ = -12						; size = 4
_halfcos$ = -8						; size = 4
_xsin$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
?makeRotateMatrix@Matrix4@Ogre@@QAEXABVVector3@2@M@Z PROC ; Ogre::Matrix4::makeRotateMatrix
; _this$ = ecx

; 301  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		assert( IsNormalized(axis) && IsFloatValid(angle) );
; 303  : 
; 304  : 		const float halfcos = Cos(angle * 0.5f);

	fld	DWORD PTR _angle$[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv228[ebp]
	fld	DWORD PTR tv228[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Cos@Ogre@@YAMM@Z			; Ogre::Cos
	add	esp, 4
	fstp	DWORD PTR _halfcos$[ebp]

; 305  : 		const float halfsin = Sin(angle * 0.5f);

	fld	DWORD PTR _angle$[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv233[ebp]
	fld	DWORD PTR tv233[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sin@Ogre@@YAMM@Z			; Ogre::Sin
	add	esp, 4
	fstp	DWORD PTR _halfsin$[ebp]

; 306  : 
; 307  : 		const float xsin = halfsin * axis.x;

	fld	DWORD PTR _halfsin$[ebp]
	mov	eax, DWORD PTR _axis$[ebp]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR _xsin$[ebp]

; 308  : 		const float ysin = halfsin * axis.y;

	fld	DWORD PTR _halfsin$[ebp]
	mov	ecx, DWORD PTR _axis$[ebp]
	fmul	DWORD PTR [ecx+4]
	fstp	DWORD PTR _ysin$[ebp]

; 309  : 		const float zsin = halfsin * axis.z;

	fld	DWORD PTR _halfsin$[ebp]
	mov	edx, DWORD PTR _axis$[ebp]
	fmul	DWORD PTR [edx+8]
	fstp	DWORD PTR _zsin$[ebp]

; 310  : 
; 311  : 		_11 = 1.0f - 2.0f * ( ysin * ysin + zsin * zsin );

	fld	DWORD PTR _ysin$[ebp]
	fmul	DWORD PTR _ysin$[ebp]
	fld	DWORD PTR _zsin$[ebp]
	fmul	DWORD PTR _zsin$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@4000000000000000
	fld1
	fsubrp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax]

; 312  : 		_22 = 1.0f - 2.0f * ( xsin * xsin + zsin * zsin );

	fld	DWORD PTR _xsin$[ebp]
	fmul	DWORD PTR _xsin$[ebp]
	fld	DWORD PTR _zsin$[ebp]
	fmul	DWORD PTR _zsin$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@4000000000000000
	fld1
	fsubrp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+20]

; 313  : 		_33 = 1.0f - 2.0f * ( xsin * xsin + ysin * ysin );

	fld	DWORD PTR _xsin$[ebp]
	fmul	DWORD PTR _xsin$[ebp]
	fld	DWORD PTR _ysin$[ebp]
	fmul	DWORD PTR _ysin$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@4000000000000000
	fld1
	fsubrp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+40]

; 314  : 		_44 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+60]

; 315  : 
; 316  : 		_12 = 2.0f * ( xsin * ysin + halfcos * zsin );

	fld	DWORD PTR _xsin$[ebp]
	fmul	DWORD PTR _ysin$[ebp]
	fld	DWORD PTR _halfcos$[ebp]
	fmul	DWORD PTR _zsin$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@4000000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 317  : 		_13 = 2.0f * ( xsin * zsin - halfcos * ysin );

	fld	DWORD PTR _xsin$[ebp]
	fmul	DWORD PTR _zsin$[ebp]
	fld	DWORD PTR _halfcos$[ebp]
	fmul	DWORD PTR _ysin$[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR __real@4000000000000000
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 318  : 		_14 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]

; 319  : 
; 320  : 		_21 = 2.0f * ( xsin * ysin - halfcos * zsin );

	fld	DWORD PTR _xsin$[ebp]
	fmul	DWORD PTR _ysin$[ebp]
	fld	DWORD PTR _halfcos$[ebp]
	fmul	DWORD PTR _zsin$[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR __real@4000000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+16]

; 321  : 		_23 = 2.0f * ( ysin * zsin + halfcos * xsin );

	fld	DWORD PTR _ysin$[ebp]
	fmul	DWORD PTR _zsin$[ebp]
	fld	DWORD PTR _halfcos$[ebp]
	fmul	DWORD PTR _xsin$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@4000000000000000
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+24]

; 322  : 		_24 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+28]

; 323  : 
; 324  : 		_31 = 2.0f * ( xsin * zsin + halfcos * ysin );

	fld	DWORD PTR _xsin$[ebp]
	fmul	DWORD PTR _zsin$[ebp]
	fld	DWORD PTR _halfcos$[ebp]
	fmul	DWORD PTR _ysin$[ebp]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@4000000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+32]

; 325  : 		_32 = 2.0f * ( ysin * zsin - halfcos * xsin );

	fld	DWORD PTR _ysin$[ebp]
	fmul	DWORD PTR _zsin$[ebp]
	fld	DWORD PTR _halfcos$[ebp]
	fmul	DWORD PTR _xsin$[ebp]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR __real@4000000000000000
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+36]

; 326  : 		_34 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+44]

; 327  : 
; 328  : 		_41 = _42 = _43 = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+56]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+52]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+48]

; 329  : 
; 330  : 		assert( isOrthonormal() );
; 331  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?makeRotateMatrix@Matrix4@Ogre@@QAEXABVVector3@2@M@Z ENDP ; Ogre::Matrix4::makeRotateMatrix
_TEXT	ENDS
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?Deg2Rad@Ogre@@YAMM@Z				; Ogre::Deg2Rad
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
;	COMDAT ?Sin@Ogre@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Sin@Ogre@@YAMM@Z PROC					; Ogre::Sin, COMDAT

; 26   : 	{

	push	ebp
	mov	ebp, esp

; 27   : 		return (float)sin( Deg2Rad(x) );

	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	?Deg2Rad@Ogre@@YAMM@Z			; Ogre::Deg2Rad
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4

; 28   : 	}

	pop	ebp
	ret	0
?Sin@Ogre@@YAMM@Z ENDP					; Ogre::Sin
_TEXT	ENDS
PUBLIC	_sinf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 530  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
EXTRN	_sin:PROC
; Function compile flags: /Odtp
;	COMDAT _sinf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 419  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
_TEXT	ENDS
;	COMDAT ?Deg2Rad@Ogre@@YAMM@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_x$ = 8							; size = 4
?Deg2Rad@Ogre@@YAMM@Z PROC				; Ogre::Deg2Rad, COMDAT

; 17   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 18   : 		return x*RADS_PER_DEG;

	fld	DWORD PTR _x$[ebp]
	fmul	DWORD PTR _RADS_PER_DEG
	fstp	DWORD PTR tv68[ebp]
	fld	DWORD PTR tv68[ebp]

; 19   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?Deg2Rad@Ogre@@YAMM@Z ENDP				; Ogre::Deg2Rad
_TEXT	ENDS
PUBLIC	?cos@@YAMM@Z					; cos
; Function compile flags: /Odtp
;	COMDAT ?Cos@Ogre@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Cos@Ogre@@YAMM@Z PROC					; Ogre::Cos, COMDAT

; 31   : 	{

	push	ebp
	mov	ebp, esp

; 32   : 		return (float)cos( Deg2Rad(x) );

	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	?Deg2Rad@Ogre@@YAMM@Z			; Ogre::Deg2Rad
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4

; 33   : 	}

	pop	ebp
	ret	0
?Cos@Ogre@@YAMM@Z ENDP					; Ogre::Cos
_TEXT	ENDS
PUBLIC	_cosf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 504  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
EXTRN	_cos:PROC
; Function compile flags: /Odtp
;	COMDAT _cosf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 399  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_cos
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
PUBLIC	?makeRotateX@Matrix4@Ogre@@QAEXM@Z		; Ogre::Matrix4::makeRotateX
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_mycos$ = -8						; size = 4
_mysin$ = -4						; size = 4
_angle$ = 8						; size = 4
?makeRotateX@Matrix4@Ogre@@QAEXM@Z PROC			; Ogre::Matrix4::makeRotateX
; _this$ = ecx

; 334  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 335  : 		identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?identity@Matrix4@Ogre@@QAEXXZ		; Ogre::Matrix4::identity

; 336  : 
; 337  : 		float mycos = Cos(angle);

	push	ecx
	fld	DWORD PTR _angle$[ebp]
	fstp	DWORD PTR [esp]
	call	?Cos@Ogre@@YAMM@Z			; Ogre::Cos
	add	esp, 4
	fstp	DWORD PTR _mycos$[ebp]

; 338  : 		float mysin = Sin(angle);

	push	ecx
	fld	DWORD PTR _angle$[ebp]
	fstp	DWORD PTR [esp]
	call	?Sin@Ogre@@YAMM@Z			; Ogre::Sin
	add	esp, 4
	fstp	DWORD PTR _mysin$[ebp]

; 339  : 		_22 = mycos;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _mycos$[ebp]
	fstp	DWORD PTR [eax+20]

; 340  : 		_23 = mysin;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _mysin$[ebp]
	fstp	DWORD PTR [ecx+24]

; 341  : 		_32 = -mysin;

	fld	DWORD PTR _mysin$[ebp]
	fchs
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+36]

; 342  : 		_33 = mycos;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _mycos$[ebp]
	fstp	DWORD PTR [eax+40]

; 343  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?makeRotateX@Matrix4@Ogre@@QAEXM@Z ENDP			; Ogre::Matrix4::makeRotateX
_TEXT	ENDS
PUBLIC	?makeRotateY@Matrix4@Ogre@@QAEXM@Z		; Ogre::Matrix4::makeRotateY
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_mycos$ = -8						; size = 4
_mysin$ = -4						; size = 4
_angle$ = 8						; size = 4
?makeRotateY@Matrix4@Ogre@@QAEXM@Z PROC			; Ogre::Matrix4::makeRotateY
; _this$ = ecx

; 346  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 347  : 		identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?identity@Matrix4@Ogre@@QAEXXZ		; Ogre::Matrix4::identity

; 348  : 
; 349  : 		float mycos = Cos(angle);

	push	ecx
	fld	DWORD PTR _angle$[ebp]
	fstp	DWORD PTR [esp]
	call	?Cos@Ogre@@YAMM@Z			; Ogre::Cos
	add	esp, 4
	fstp	DWORD PTR _mycos$[ebp]

; 350  : 		float mysin = Sin(angle);

	push	ecx
	fld	DWORD PTR _angle$[ebp]
	fstp	DWORD PTR [esp]
	call	?Sin@Ogre@@YAMM@Z			; Ogre::Sin
	add	esp, 4
	fstp	DWORD PTR _mysin$[ebp]

; 351  : 		_11 = mycos;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _mycos$[ebp]
	fstp	DWORD PTR [eax]

; 352  : 		_13 = -mysin;

	fld	DWORD PTR _mysin$[ebp]
	fchs
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 353  : 		_31 = mysin;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _mysin$[ebp]
	fstp	DWORD PTR [edx+32]

; 354  : 		_33 = mycos;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _mycos$[ebp]
	fstp	DWORD PTR [eax+40]

; 355  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?makeRotateY@Matrix4@Ogre@@QAEXM@Z ENDP			; Ogre::Matrix4::makeRotateY
_TEXT	ENDS
PUBLIC	?makeRotateZ@Matrix4@Ogre@@QAEXM@Z		; Ogre::Matrix4::makeRotateZ
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_mycos$ = -8						; size = 4
_mysin$ = -4						; size = 4
_angle$ = 8						; size = 4
?makeRotateZ@Matrix4@Ogre@@QAEXM@Z PROC			; Ogre::Matrix4::makeRotateZ
; _this$ = ecx

; 358  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 359  : 		identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?identity@Matrix4@Ogre@@QAEXXZ		; Ogre::Matrix4::identity

; 360  : 
; 361  : 		float mycos = Cos(angle);

	push	ecx
	fld	DWORD PTR _angle$[ebp]
	fstp	DWORD PTR [esp]
	call	?Cos@Ogre@@YAMM@Z			; Ogre::Cos
	add	esp, 4
	fstp	DWORD PTR _mycos$[ebp]

; 362  : 		float mysin = Sin(angle);

	push	ecx
	fld	DWORD PTR _angle$[ebp]
	fstp	DWORD PTR [esp]
	call	?Sin@Ogre@@YAMM@Z			; Ogre::Sin
	add	esp, 4
	fstp	DWORD PTR _mysin$[ebp]

; 363  : 		_11 = mycos;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _mycos$[ebp]
	fstp	DWORD PTR [eax]

; 364  : 		_12 = mysin;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _mysin$[ebp]
	fstp	DWORD PTR [ecx+4]

; 365  : 		_21 = -mysin;

	fld	DWORD PTR _mysin$[ebp]
	fchs
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+16]

; 366  : 		_22 = mycos;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _mycos$[ebp]
	fstp	DWORD PTR [eax+20]

; 367  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?makeRotateZ@Matrix4@Ogre@@QAEXM@Z ENDP			; Ogre::Matrix4::makeRotateZ
_TEXT	ENDS
PUBLIC	?makeRotateMatrix@Matrix4@Ogre@@QAEXABVVector3@2@00@Z ; Ogre::Matrix4::makeRotateMatrix
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_xaxis$ = 8						; size = 4
_yaxis$ = 12						; size = 4
_zaxis$ = 16						; size = 4
?makeRotateMatrix@Matrix4@Ogre@@QAEXABVVector3@2@00@Z PROC ; Ogre::Matrix4::makeRotateMatrix
; _this$ = ecx

; 370  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 371  : 		_11 = xaxis.x, _12 = xaxis.y, _13 = xaxis.z, _14 = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _xaxis$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _xaxis$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _xaxis$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]

; 372  : 		_21 = yaxis.x, _22 = yaxis.y, _23 = yaxis.z, _24 = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _yaxis$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _yaxis$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _yaxis$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+28]

; 373  : 		_31 = zaxis.x, _32 = zaxis.y, _33 = zaxis.z, _34 = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _zaxis$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _zaxis$[ebp]
	fld	DWORD PTR [edx+4]
	fstp	DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _zaxis$[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+40]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+44]

; 374  : 		_41 = 0,       _42 = 0,       _43 = 0,       _44 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+56]
	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+60]

; 375  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?makeRotateMatrix@Matrix4@Ogre@@QAEXABVVector3@2@00@Z ENDP ; Ogre::Matrix4::makeRotateMatrix
_TEXT	ENDS
PUBLIC	?makeRFTMatrix@Matrix4@Ogre@@QAEXABVQuaternion@2@MABVVector3@2@@Z ; Ogre::Matrix4::makeRFTMatrix
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_j$58299 = -8						; size = 4
_i$58295 = -4						; size = 4
_quat$ = 8						; size = 4
_flipscale$ = 12					; size = 4
_translate$ = 16					; size = 4
?makeRFTMatrix@Matrix4@Ogre@@QAEXABVQuaternion@2@MABVVector3@2@@Z PROC ; Ogre::Matrix4::makeRFTMatrix
; _this$ = ecx

; 378  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 379  : 		quat.getMatrix( *this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _quat$[ebp]
	call	?getMatrix@Quaternion@Ogre@@QBEXAAVMatrix4@2@@Z ; Ogre::Quaternion::getMatrix

; 380  : 		for( int i=0; i<3; i++ )

	mov	DWORD PTR _i$58295[ebp], 0
	jmp	SHORT $LN6@makeRFTMat
$LN5@makeRFTMat:
	mov	ecx, DWORD PTR _i$58295[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$58295[ebp], ecx
$LN6@makeRFTMat:
	cmp	DWORD PTR _i$58295[ebp], 3
	jge	SHORT $LN4@makeRFTMat

; 381  : 		{
; 382  : 			for( int j=0; j<3; j++ ) m[i][j] *= flipscale;

	mov	DWORD PTR _j$58299[ebp], 0
	jmp	SHORT $LN3@makeRFTMat
$LN2@makeRFTMat:
	mov	edx, DWORD PTR _j$58299[ebp]
	add	edx, 1
	mov	DWORD PTR _j$58299[ebp], edx
$LN3@makeRFTMat:
	cmp	DWORD PTR _j$58299[ebp], 3
	jge	SHORT $LN1@makeRFTMat
	mov	eax, DWORD PTR _i$58295[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _j$58299[ebp]
	fld	DWORD PTR [eax+ecx*4]
	fmul	DWORD PTR _flipscale$[ebp]
	mov	edx, DWORD PTR _i$58295[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _j$58299[ebp]
	fstp	DWORD PTR [edx+eax*4]
	jmp	SHORT $LN2@makeRFTMat
$LN1@makeRFTMat:

; 383  : 		}

	jmp	SHORT $LN5@makeRFTMat
$LN4@makeRFTMat:

; 384  : 
; 385  : 		setTranslate(translate);

	mov	ecx, DWORD PTR _translate$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z ; Ogre::Matrix4::setTranslate

; 386  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?makeRFTMatrix@Matrix4@Ogre@@QAEXABVQuaternion@2@MABVVector3@2@@Z ENDP ; Ogre::Matrix4::makeRFTMatrix
_TEXT	ENDS
PUBLIC	?makeSRTMatrix@Matrix4@Ogre@@QAEXABVVector3@2@ABVQuaternion@2@0@Z ; Ogre::Matrix4::makeSRTMatrix
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_tm$ = -4						; size = 4
_scale$ = 8						; size = 4
_rot$ = 12						; size = 4
_translate$ = 16					; size = 4
?makeSRTMatrix@Matrix4@Ogre@@QAEXABVVector3@2@ABVQuaternion@2@0@Z PROC ; Ogre::Matrix4::makeSRTMatrix
; _this$ = ecx

; 389  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 390  : 		Matrix4 &tm = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _tm$[ebp], eax

; 391  : 
; 392  : 		rot.getMatrix(tm);

	mov	ecx, DWORD PTR _tm$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _rot$[ebp]
	call	?getMatrix@Quaternion@Ogre@@QBEXAAVMatrix4@2@@Z ; Ogre::Quaternion::getMatrix

; 393  : 		tm._11 *= scale.x; tm._12 *= scale.x; tm._13 *= scale.x;

	mov	edx, DWORD PTR _tm$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _tm$[ebp]
	fstp	DWORD PTR [ecx]
	mov	edx, DWORD PTR _tm$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _tm$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _tm$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _tm$[ebp]
	fstp	DWORD PTR [ecx+8]

; 394  : 		tm._21 *= scale.y; tm._22 *= scale.y; tm._23 *= scale.y;

	mov	edx, DWORD PTR _tm$[ebp]
	fld	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _tm$[ebp]
	fstp	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _tm$[ebp]
	fld	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _tm$[ebp]
	fstp	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _tm$[ebp]
	fld	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _tm$[ebp]
	fstp	DWORD PTR [ecx+24]

; 395  : 		tm._31 *= scale.z; tm._32 *= scale.z; tm._33 *= scale.z;

	mov	edx, DWORD PTR _tm$[ebp]
	fld	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _tm$[ebp]
	fstp	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _tm$[ebp]
	fld	DWORD PTR [edx+36]
	mov	eax, DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _tm$[ebp]
	fstp	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _tm$[ebp]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _tm$[ebp]
	fstp	DWORD PTR [ecx+40]

; 396  : 
; 397  : 		tm._41 = translate.x; tm._42 = translate.y; tm._43 = translate.z;

	mov	edx, DWORD PTR _tm$[ebp]
	mov	eax, DWORD PTR _translate$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _tm$[ebp]
	mov	edx, DWORD PTR _translate$[ebp]
	fld	DWORD PTR [edx+4]
	fstp	DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _tm$[ebp]
	mov	ecx, DWORD PTR _translate$[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+56]

; 398  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?makeSRTMatrix@Matrix4@Ogre@@QAEXABVVector3@2@ABVQuaternion@2@0@Z ENDP ; Ogre::Matrix4::makeSRTMatrix
_TEXT	ENDS
PUBLIC	?DotProduct@Ogre@@YAMABVVector3@1@0@Z		; Ogre::DotProduct
PUBLIC	?CrossProduct@Ogre@@YA?AVVector3@1@ABV21@0@Z	; Ogre::CrossProduct
PUBLIC	?GetNormalize@Ogre@@YA?AVVector3@1@ABV21@@Z	; Ogre::GetNormalize
PUBLIC	??GOgre@@YA?AVVector3@0@ABV10@0@Z		; Ogre::operator-
PUBLIC	?makeViewMatrix@Matrix4@Ogre@@QAEXABVVector3@2@00@Z ; Ogre::Matrix4::makeViewMatrix
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T63332 = -60						; size = 12
$T63331 = -48						; size = 12
_xaxis$ = -36						; size = 12
_yaxis$ = -24						; size = 12
_zaxis$ = -12						; size = 12
_eyeloc$ = 8						; size = 4
_goalloc$ = 12						; size = 4
_upvec$ = 16						; size = 4
?makeViewMatrix@Matrix4@Ogre@@QAEXABVVector3@2@00@Z PROC ; Ogre::Matrix4::makeViewMatrix
; _this$ = ecx

; 401  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 		Vector3 zaxis = GetNormalize( goalloc-eyeloc );

	mov	eax, DWORD PTR _eyeloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _goalloc$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T63331[ebp]
	push	edx
	call	??GOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _zaxis$[ebp]
	push	eax
	call	?GetNormalize@Ogre@@YA?AVVector3@1@ABV21@@Z ; Ogre::GetNormalize
	add	esp, 8

; 403  : 		Vector3 xaxis = GetNormalize( CrossProduct(upvec, zaxis) );

	lea	ecx, DWORD PTR _zaxis$[ebp]
	push	ecx
	mov	edx, DWORD PTR _upvec$[ebp]
	push	edx
	lea	eax, DWORD PTR $T63332[ebp]
	push	eax
	call	?CrossProduct@Ogre@@YA?AVVector3@1@ABV21@0@Z ; Ogre::CrossProduct
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _xaxis$[ebp]
	push	ecx
	call	?GetNormalize@Ogre@@YA?AVVector3@1@ABV21@@Z ; Ogre::GetNormalize
	add	esp, 8

; 404  : 		Vector3 yaxis = CrossProduct( zaxis, xaxis );

	lea	edx, DWORD PTR _xaxis$[ebp]
	push	edx
	lea	eax, DWORD PTR _zaxis$[ebp]
	push	eax
	lea	ecx, DWORD PTR _yaxis$[ebp]
	push	ecx
	call	?CrossProduct@Ogre@@YA?AVVector3@1@ABV21@0@Z ; Ogre::CrossProduct

; 405  : 
; 406  : 		setRow( 0, xaxis.x, yaxis.x, zaxis.x, 0 );

	add	esp, 8
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _zaxis$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _yaxis$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _xaxis$[ebp]
	fstp	DWORD PTR [esp]
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 407  : 		setRow( 1, xaxis.y, yaxis.y, zaxis.y, 0 );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _zaxis$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _yaxis$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _xaxis$[ebp+4]
	fstp	DWORD PTR [esp]
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 408  : 		setRow( 2, xaxis.z, yaxis.z, zaxis.z, 0 );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _zaxis$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _yaxis$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _xaxis$[ebp+8]
	fstp	DWORD PTR [esp]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 409  : 		setRow( 3, -DotProduct(xaxis,eyeloc), -DotProduct(yaxis,eyeloc), -DotProduct(zaxis,eyeloc), 1.0f );

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _eyeloc$[ebp]
	push	edx
	lea	eax, DWORD PTR _zaxis$[ebp]
	push	eax
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _eyeloc$[ebp]
	push	ecx
	lea	edx, DWORD PTR _yaxis$[ebp]
	push	edx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _eyeloc$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xaxis$[ebp]
	push	ecx
	call	?DotProduct@Ogre@@YAMABVVector3@1@0@Z	; Ogre::DotProduct
	add	esp, 8
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?makeViewMatrix@Matrix4@Ogre@@QAEXABVVector3@2@00@Z ENDP ; Ogre::Matrix4::makeViewMatrix
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ??GOgre@@YA?AVVector3@0@ABV10@0@Z
_TEXT	SEGMENT
tv92 = -12						; size = 4
tv89 = -8						; size = 4
tv86 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??GOgre@@YA?AVVector3@0@ABV10@0@Z PROC			; Ogre::operator-, COMDAT

; 174  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 175  : 		return Vector3(v1.x-v2.x, v1.y-v2.y, v1.z-v2.z);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v2$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v2$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v2$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 176  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??GOgre@@YA?AVVector3@0@ABV10@0@Z ENDP			; Ogre::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetNormalize@Ogre@@YA?AVVector3@1@ABV21@@Z
_TEXT	SEGMENT
tv150 = -16						; size = 4
tv148 = -12						; size = 4
tv146 = -8						; size = 4
_scale$57393 = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?GetNormalize@Ogre@@YA?AVVector3@1@ABV21@@Z PROC	; Ogre::GetNormalize, COMDAT

; 239  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 240  : 		//assert( v.length() > 0 );
; 241  : 		if(v.length() == 0.0f)

	mov	ecx, DWORD PTR _v$[ebp]
	call	?length@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::length
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@GetNormali

; 242  : 		{
; 243  : 			return Vector3(0.0f, 0.0f, 0.0f);

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@GetNormali

; 244  : 		}
; 245  : 		else

	jmp	SHORT $LN1@GetNormali
$LN2@GetNormali:

; 246  : 		{
; 247  : 			float scale = 1.0f/v.length();

	mov	ecx, DWORD PTR _v$[ebp]
	call	?length@Vector3@Ogre@@QBEMXZ		; Ogre::Vector3::length
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _scale$57393[ebp]

; 248  : 			return Vector3(v.x*scale, v.y*scale, v.z*scale);

	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _scale$57393[ebp]
	fstp	DWORD PTR tv146[ebp]
	fld	DWORD PTR tv146[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR _scale$57393[ebp]
	fstp	DWORD PTR tv148[ebp]
	fld	DWORD PTR tv148[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR _scale$57393[ebp]
	fstp	DWORD PTR tv150[ebp]
	fld	DWORD PTR tv150[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@GetNormali:

; 249  : 		}
; 250  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNormalize@Ogre@@YA?AVVector3@1@ABV21@@Z ENDP	; Ogre::GetNormalize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?DotProduct@Ogre@@YAMABVVector3@1@0@Z
_TEXT	SEGMENT
tv86 = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?DotProduct@Ogre@@YAMABVVector3@1@0@Z PROC		; Ogre::DotProduct, COMDAT

; 263  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 264  : 		return v1.x*v2.x + v1.y*v2.y + v1.z*v2.z;

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]

; 265  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?DotProduct@Ogre@@YAMABVVector3@1@0@Z ENDP		; Ogre::DotProduct
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?CrossProduct@Ogre@@YA?AVVector3@1@ABV21@0@Z
_TEXT	SEGMENT
tv146 = -12						; size = 4
tv141 = -8						; size = 4
tv136 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?CrossProduct@Ogre@@YA?AVVector3@1@ABV21@0@Z PROC	; Ogre::CrossProduct, COMDAT

; 268  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 269  : 		return Vector3(v1.y*v2.z-v1.z*v2.y, v1.z*v2.x-v1.x*v2.z, v1.x*v2.y-v1.y*v2.x);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv136[ebp]
	fld	DWORD PTR tv136[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [edx]
	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [ecx+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv141[ebp]
	fld	DWORD PTR tv141[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _v2$[ebp]
	fmul	DWORD PTR [edx+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv146[ebp]
	fld	DWORD PTR tv146[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 270  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?CrossProduct@Ogre@@YA?AVVector3@1@ABV21@0@Z ENDP	; Ogre::CrossProduct
_TEXT	ENDS
PUBLIC	?makeViewMatrix@Matrix4@Ogre@@QAEXABVVector3@2@ABVQuaternion@2@@Z ; Ogre::Matrix4::makeViewMatrix
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eyeloc$ = 8						; size = 4
_quat$ = 12						; size = 4
?makeViewMatrix@Matrix4@Ogre@@QAEXABVVector3@2@ABVQuaternion@2@@Z PROC ; Ogre::Matrix4::makeViewMatrix
; _this$ = ecx

; 413  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 414  : 		quat.getMatrix( *this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _quat$[ebp]
	call	?getMatrix@Quaternion@Ogre@@QBEXAAVMatrix4@2@@Z ; Ogre::Quaternion::getMatrix

; 415  : 		setTranslate( eyeloc );

	mov	ecx, DWORD PTR _eyeloc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setTranslate@Matrix4@Ogre@@QAEXABVVector3@2@@Z ; Ogre::Matrix4::setTranslate

; 416  : 
; 417  : 		inverse();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?inverse@Matrix4@Ogre@@QAEAAV12@XZ	; Ogre::Matrix4::inverse

; 418  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?makeViewMatrix@Matrix4@Ogre@@QAEXABVVector3@2@ABVQuaternion@2@@Z ENDP ; Ogre::Matrix4::makeViewMatrix
_TEXT	ENDS
PUBLIC	?makeOrthoMatrix@Matrix4@Ogre@@QAEXMMMM@Z	; Ogre::Matrix4::makeOrthoMatrix
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv171 = -20						; size = 4
tv161 = -16						; size = 4
tv150 = -12						; size = 4
tv140 = -8						; size = 4
_this$ = -4						; size = 4
_w$ = 8							; size = 4
_h$ = 12						; size = 4
_zn$ = 16						; size = 4
_zf$ = 20						; size = 4
?makeOrthoMatrix@Matrix4@Ogre@@QAEXMMMM@Z PROC		; Ogre::Matrix4::makeOrthoMatrix
; _this$ = ecx

; 421  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 422  : 		setRow( 0, 2.0f/w, 0,      0,            0    );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _w$[ebp]
	fdivr	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv140[ebp]
	fld	DWORD PTR tv140[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 423  : 		setRow( 1, 0,      2.0f/h, 0,            0    );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _h$[ebp]
	fdivr	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv150[ebp]
	fld	DWORD PTR tv150[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 424  : 		setRow( 2, 0,      0,      1.0f/(zf-zn), 0    );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _zf$[ebp]
	fsub	DWORD PTR _zn$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR tv161[ebp]
	fld	DWORD PTR tv161[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 425  : 		setRow( 3, 0,      0,      zn/(zn-zf),   1.0f );

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _zn$[ebp]
	fsub	DWORD PTR _zf$[ebp]
	fdivr	DWORD PTR _zn$[ebp]
	fstp	DWORD PTR tv171[ebp]
	fld	DWORD PTR tv171[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 426  : 	}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?makeOrthoMatrix@Matrix4@Ogre@@QAEXMMMM@Z ENDP		; Ogre::Matrix4::makeOrthoMatrix
_TEXT	ENDS
PUBLIC	?Cotan@Ogre@@YAMM@Z				; Ogre::Cotan
PUBLIC	?makePerspectiveMatrix@Matrix4@Ogre@@QAEXMMMM@Z	; Ogre::Matrix4::makePerspectiveMatrix
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv181 = -24						; size = 4
tv171 = -20						; size = 4
tv146 = -16						; size = 4
_this$ = -12						; size = 4
_h$ = -8						; size = 4
_w$ = -4						; size = 4
_fovy$ = 8						; size = 4
_aspect$ = 12						; size = 4
_zn$ = 16						; size = 4
_zf$ = 20						; size = 4
?makePerspectiveMatrix@Matrix4@Ogre@@QAEXMMMM@Z PROC	; Ogre::Matrix4::makePerspectiveMatrix
; _this$ = ecx

; 429  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 430  : 		float h = Cotan(fovy/2.0f);

	fld	DWORD PTR _fovy$[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv146[ebp]
	fld	DWORD PTR tv146[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Cotan@Ogre@@YAMM@Z			; Ogre::Cotan
	add	esp, 4
	fstp	DWORD PTR _h$[ebp]

; 431  : 		float w = h/aspect;

	fld	DWORD PTR _h$[ebp]
	fdiv	DWORD PTR _aspect$[ebp]
	fstp	DWORD PTR _w$[ebp]

; 432  : 
; 433  : 		setRow( 0, w, 0, 0,             0 );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [esp]
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 434  : 		setRow( 1, 0, h, 0,             0 );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _h$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 435  : 		setRow( 2, 0, 0, -zf/(zn-zf),   1 );

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _zf$[ebp]
	fchs
	fld	DWORD PTR _zn$[ebp]
	fsub	DWORD PTR _zf$[ebp]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR tv171[ebp]
	fld	DWORD PTR tv171[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 436  : 		setRow( 3, 0, 0, zn*zf/(zn-zf), 0 );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _zn$[ebp]
	fmul	DWORD PTR _zf$[ebp]
	fld	DWORD PTR _zn$[ebp]
	fsub	DWORD PTR _zf$[ebp]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR tv181[ebp]
	fld	DWORD PTR tv181[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRow@Matrix4@Ogre@@QAEXIMMMM@Z	; Ogre::Matrix4::setRow

; 437  : 	}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?makePerspectiveMatrix@Matrix4@Ogre@@QAEXMMMM@Z ENDP	; Ogre::Matrix4::makePerspectiveMatrix
_TEXT	ENDS
PUBLIC	?Tan@Ogre@@YAMM@Z				; Ogre::Tan
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
;	COMDAT ?Cotan@Ogre@@YAMM@Z
_TEXT	SEGMENT
tv75 = -4						; size = 4
_x$ = 8							; size = 4
?Cotan@Ogre@@YAMM@Z PROC				; Ogre::Cotan, COMDAT

; 44   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 45   : 		return 1.0f/Tan(x);

	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	?Tan@Ogre@@YAMM@Z			; Ogre::Tan
	add	esp, 4
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR tv75[ebp]
	fld	DWORD PTR tv75[ebp]

; 46   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?Cotan@Ogre@@YAMM@Z ENDP				; Ogre::Cotan
_TEXT	ENDS
PUBLIC	?tan@@YAMM@Z					; tan
; Function compile flags: /Odtp
;	COMDAT ?Tan@Ogre@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Tan@Ogre@@YAMM@Z PROC					; Ogre::Tan, COMDAT

; 39   : 	{

	push	ebp
	mov	ebp, esp

; 40   : 		return (float)tan( Deg2Rad(x) );

	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	?Deg2Rad@Ogre@@YAMM@Z			; Ogre::Deg2Rad
	fstp	DWORD PTR [esp]
	call	?tan@@YAMM@Z				; tan
	add	esp, 4

; 41   : 	}

	pop	ebp
	ret	0
?Tan@Ogre@@YAMM@Z ENDP					; Ogre::Tan
_TEXT	ENDS
PUBLIC	_tanf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?tan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?tan@@YAMM@Z PROC					; tan, COMDAT

; 536  :         {return (tanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_tanf
	add	esp, 4
	pop	ebp
	ret	0
?tan@@YAMM@Z ENDP					; tan
_TEXT	ENDS
EXTRN	_tan:PROC
; Function compile flags: /Odtp
;	COMDAT _tanf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 425  :         {return ((float)tan((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_tan
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_tanf	ENDP
_TEXT	ENDS
PUBLIC	??$Abs@M@Ogre@@YAMABM@Z				; Ogre::Abs<float>
PUBLIC	__real@3c23d70a
PUBLIC	?isOrthonormal@Matrix4@Ogre@@QBE_NXZ		; Ogre::Matrix4::isOrthonormal
;	COMDAT __real@3c23d70a
; File i:\svnroot\client\ogremain\ogrematrix4.cpp
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T63355 = -16						; size = 4
$T63354 = -12						; size = 4
$T63353 = -8						; size = 4
_limit$ = -4						; size = 4
?isOrthonormal@Matrix4@Ogre@@QBE_NXZ PROC		; Ogre::Matrix4::isOrthonormal
; _this$ = ecx

; 440  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 441  : 		float limit = 0.01f;

	fld	DWORD PTR __real@3c23d70a
	fstp	DWORD PTR _limit$[ebp]

; 442  : 
; 443  : 		if( ((_11*_21+_12*_22+_13*_23) < limit) &&
; 444  : 			((_11*_31+_12*_32+_13*_33) < limit) &&
; 445  : 			((_31*_21+_32*_22+_33*_23) < limit) &&
; 446  : 			(Abs(_11*_11+_12*_12+_13*_13 - 1.0f) < limit) &&
; 447  : 			(Abs(_21*_21+_22*_22+_23*_23 - 1.0f) < limit) &&
; 448  : 			(Abs(_31*_31+_32*_32+_33*_33 - 1.0f) < limit) )

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _limit$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN2@isOrthonor
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+36]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+40]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _limit$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN2@isOrthonor
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _limit$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN2@isOrthonor
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR $T63353[ebp]
	lea	eax, DWORD PTR $T63353[ebp]
	push	eax
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	add	esp, 4
	fld	DWORD PTR _limit$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN2@isOrthonor
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+20]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+24]
	faddp	ST(1), ST(0)
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR $T63354[ebp]
	lea	ecx, DWORD PTR $T63354[ebp]
	push	ecx
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	add	esp, 4
	fld	DWORD PTR _limit$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@isOrthonor
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+36]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+40]
	faddp	ST(1), ST(0)
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR $T63355[ebp]
	lea	edx, DWORD PTR $T63355[ebp]
	push	edx
	call	??$Abs@M@Ogre@@YAMABM@Z			; Ogre::Abs<float>
	add	esp, 4
	fld	DWORD PTR _limit$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@isOrthonor

; 449  : 			return true;

	mov	al, 1
	jmp	SHORT $LN1@isOrthonor
	jmp	SHORT $LN1@isOrthonor
$LN2@isOrthonor:

; 450  : 		else return false;

	xor	al, al
$LN1@isOrthonor:

; 451  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?isOrthonormal@Matrix4@Ogre@@QBE_NXZ ENDP		; Ogre::Matrix4::isOrthonormal
_TEXT	ENDS
PUBLIC	__real@c000000000000000
PUBLIC	?makeReflectMatrix@Matrix4@Ogre@@QAEXABVVector4@2@@Z ; Ogre::Matrix4::makeReflectMatrix
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
tv217 = -28						; size = 4
_this$ = -24						; size = 4
_c$ = -20						; size = 4
_d$ = -16						; size = 4
_b$ = -12						; size = 4
_len$ = -8						; size = 4
_a$ = -4						; size = 4
_plane$ = 8						; size = 4
?makeReflectMatrix@Matrix4@Ogre@@QAEXABVVector4@2@@Z PROC ; Ogre::Matrix4::makeReflectMatrix
; _this$ = ecx

; 454  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 455  : 		float len = Sqrt(plane.x*plane.x + plane.y*plane.y + plane.z*plane.z);

	mov	eax, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _plane$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _plane$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _plane$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv217[ebp]
	fld	DWORD PTR tv217[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@Ogre@@YAMM@Z			; Ogre::Sqrt
	add	esp, 4
	fstp	DWORD PTR _len$[ebp]

; 456  : 		assert( len > EPSILON );
; 457  : 
; 458  : 		float a = plane.x/len;

	mov	eax, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _len$[ebp]
	fstp	DWORD PTR _a$[ebp]

; 459  : 		float b = plane.y/len;

	mov	ecx, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [ecx+4]
	fdiv	DWORD PTR _len$[ebp]
	fstp	DWORD PTR _b$[ebp]

; 460  : 		float c = plane.z/len;

	mov	edx, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [edx+8]
	fdiv	DWORD PTR _len$[ebp]
	fstp	DWORD PTR _c$[ebp]

; 461  : 		float d = plane.w/len;

	mov	eax, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [eax+12]
	fdiv	DWORD PTR _len$[ebp]
	fstp	DWORD PTR _d$[ebp]

; 462  : 
; 463  : 		_11 = -2.0f*a*a+1.0f, _12 = -2.0f*b*a,      _13 = -2.0f*c*a,      _14 = 0;

	fld	DWORD PTR _a$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _a$[ebp]
	fadd	QWORD PTR __real@3ff0000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR _b$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]
	fld	DWORD PTR _c$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+12]

; 464  : 		_21 = -2.0f*a*b,      _22 = -2.0f*b*b+1.0f, _23 = -2.0f*c*b,      _24 = 0;

	fld	DWORD PTR _a$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+16]
	fld	DWORD PTR _b$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _b$[ebp]
	fadd	QWORD PTR __real@3ff0000000000000
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+20]
	fld	DWORD PTR _c$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+28]

; 465  : 		_31 = -2.0f*a*c,      _32 = -2.0f*b*c,      _33 = -2.0f*c*c+1.0f, _34 = 0;

	fld	DWORD PTR _a$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+32]
	fld	DWORD PTR _b$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+36]
	fld	DWORD PTR _c$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _c$[ebp]
	fadd	QWORD PTR __real@3ff0000000000000
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+44]

; 466  : 		_41 = -2.0f*a*d,      _42 = -2.0f*b*d,      _43 = -2.0f*c*d,      _44 = 1.0f;

	fld	DWORD PTR _a$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+48]
	fld	DWORD PTR _b$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+52]
	fld	DWORD PTR _c$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [ecx+60]

; 467  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?makeReflectMatrix@Matrix4@Ogre@@QAEXABVVector4@2@@Z ENDP ; Ogre::Matrix4::makeReflectMatrix
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
_TEXT	ENDS
;	COMDAT ??$Abs@M@Ogre@@YAMABM@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_x$ = 8							; size = 4
??$Abs@M@Ogre@@YAMABM@Z PROC				; Ogre::Abs<float>, COMDAT

; 125  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 126  : 		return (x<0.0f) ? (-x) : x;

	mov	eax, DWORD PTR _x$[ebp]
	fld	DWORD PTR [eax]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@Abs
	mov	ecx, DWORD PTR _x$[ebp]
	fld	DWORD PTR [ecx]
	fchs
	fstp	DWORD PTR tv68[ebp]
	jmp	SHORT $LN4@Abs
$LN3@Abs:
	mov	edx, DWORD PTR _x$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR tv68[ebp]
$LN4@Abs:
	fld	DWORD PTR tv68[ebp]

; 127  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$Abs@M@Ogre@@YAMABM@Z ENDP				; Ogre::Abs<float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$Swap@M@Ogre@@YAXAAM0@Z
_TEXT	SEGMENT
_c$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$Swap@M@Ogre@@YAXAAM0@Z PROC				; Ogre::Swap<float>, COMDAT

; 105  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 106  : 		Type c(a); a = b; b = c;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [ecx]
	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR _c$[ebp]
	fstp	DWORD PTR [eax]

; 107  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$Swap@M@Ogre@@YAXAAM0@Z ENDP				; Ogre::Swap<float>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??__ETWO_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__ETWO_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'TWO_PI'', COMDAT

; 10   : 	const float TWO_PI = ONE_PI*2;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fadd	ST(0), ST(0)
	fstp	DWORD PTR _TWO_PI
	pop	ebp
	ret	0
??__ETWO_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'TWO_PI''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??__EHALF_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__EHALF_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'HALF_PI'', COMDAT

; 11   : 	const float	HALF_PI = ONE_PI*0.5f;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR _HALF_PI
	pop	ebp
	ret	0
??__EHALF_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'HALF_PI''
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrematrix4.cpp
text$yc	ENDS
;	COMDAT ??__E?Iden@Matrix4@Ogre@@2V12@B@@YAXXZ
text$yc	SEGMENT
??__E?Iden@Matrix4@Ogre@@2V12@B@@YAXXZ PROC		; `dynamic initializer for 'Ogre::Matrix4::Iden'', COMDAT

; 51   : 	const Matrix4 Matrix4::Iden(s_IdenArray);

	push	ebp
	mov	ebp, esp
	push	OFFSET _s_IdenArray
	mov	ecx, OFFSET ?Iden@Matrix4@Ogre@@2V12@B	; Ogre::Matrix4::Iden
	call	??0Matrix4@Ogre@@QAE@QBM@Z		; Ogre::Matrix4::Matrix4
	pop	ebp
	ret	0
??__E?Iden@Matrix4@Ogre@@2V12@B@@YAXXZ ENDP		; `dynamic initializer for 'Ogre::Matrix4::Iden''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??__E?Zero@Matrix4@Ogre@@2V12@B@@YAXXZ
text$yc	SEGMENT
??__E?Zero@Matrix4@Ogre@@2V12@B@@YAXXZ PROC		; `dynamic initializer for 'Ogre::Matrix4::Zero'', COMDAT

; 52   : 	const Matrix4 Matrix4::Zero(s_ZeroArray);

	push	ebp
	mov	ebp, esp
	push	OFFSET _s_ZeroArray
	mov	ecx, OFFSET ?Zero@Matrix4@Ogre@@2V12@B	; Ogre::Matrix4::Zero
	call	??0Matrix4@Ogre@@QAE@QBM@Z		; Ogre::Matrix4::Matrix4
	pop	ebp
	ret	0
??__E?Zero@Matrix4@Ogre@@2V12@B@@YAXXZ ENDP		; `dynamic initializer for 'Ogre::Matrix4::Zero''
text$yc	ENDS
PUBLIC	?Zero@Matrix4@Ogre@@2V12@B			; Ogre::Matrix4::Zero
PUBLIC	?Iden@Matrix4@Ogre@@2V12@B			; Ogre::Matrix4::Iden
_BSS	SEGMENT
_TWO_PI	DD	01H DUP (?)
_HALF_PI DD	01H DUP (?)
?Zero@Matrix4@Ogre@@2V12@B DB 040H DUP (?)		; Ogre::Matrix4::Zero
?Iden@Matrix4@Ogre@@2V12@B DB 040H DUP (?)		; Ogre::Matrix4::Iden
_BSS	ENDS
CRT$XCU	SEGMENT
_TWO_PI$initializer$ DD FLAT:??__ETWO_PI@Ogre@@YAXXZ
_HALF_PI$initializer$ DD FLAT:??__EHALF_PI@Ogre@@YAXXZ
?Iden$initializer$@Matrix4@Ogre@@2P6AXXZA DD FLAT:??__E?Iden@Matrix4@Ogre@@2V12@B@@YAXXZ ; Ogre::Matrix4::Iden$initializer$
?Zero$initializer$@Matrix4@Ogre@@2P6AXXZA DD FLAT:??__E?Zero@Matrix4@Ogre@@2V12@B@@YAXXZ ; Ogre::Matrix4::Zero$initializer$
CRT$XCU	ENDS
END
